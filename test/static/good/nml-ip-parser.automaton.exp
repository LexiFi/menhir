State 0:
## Known stack suffix:
##
## LR(1) items:
toplevel_phrase' -> . toplevel_phrase [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TYPE shift to state 915
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On SEMISEMI shift to state 975
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On OPEN shift to state 976
-- On MODULE shift to state 978
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 982
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On EXCEPTION shift to state 985
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On use_file_exprs shift to state 989
-- On toplevel_phrase shift to state 993
-- On top_expr shift to state 994
-- On simple_expr shift to state 417
-- On seq_expr shift to state 992
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:
-- On #
--   reduce production toplevel_phrase ->
** End-of-stream conflict on WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION DOLLAR CHAR CASE BEGIN ASSERT
**   There is a tension between
**   (1) reducing production toplevel_phrase ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 1:
## Known stack suffix:
## WHILE
## LR(1) items:
no_value_expr -> WHILE . expr DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 911
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 2:
## Known stack suffix:
## WHERE
## LR(1) items:
value_expr -> WHERE . expr THEN expr ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> WHERE . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 906
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 3:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_longident -> UIDENT . DOT UIDENT [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
constr_longident -> UIDENT . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
val_longident -> UIDENT . DOT val_ident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On DOT shift to state 4
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production constr_longident -> UIDENT
** Conflict on DOT

State 4:
## Known stack suffix:
## UIDENT DOT
## LR(1) items:
constr_longident -> UIDENT DOT . UIDENT [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
val_longident -> UIDENT DOT . val_ident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On UIDENT shift to state 5
-- On LPAREN shift to state 6
-- On LIDENT shift to state 28
-- On val_ident shift to state 29
## Reductions:

State 5:
## Known stack suffix:
## UIDENT DOT UIDENT
## LR(1) items:
constr_longident -> UIDENT DOT UIDENT . [ WITH WHILE WHERE WHEN WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TYPE TUPLEPAT TRY TO THEN SYMBOLPAT STRINGPAT STRING STAR STACKPAT SHARP SEMISEMI SEMI RPAREN RECORDPAT REALPAT RAISE QUEUEPAT QUESTION PREFIXOP PLUS OUT_CHANNELPAT OPEN NUMBERPAT MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LISTPAT LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY IN_CHANNELPAT INTPAT INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF HASHTABLEPAT FUNCTION FUN FOR FLOATPAT FLOAT FARRAYPAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO DIR_HANDLEPAT COMPLEXPAT COMMA COLONEQUAL COLONCOLON COLON CHARPAT CHAR CASE CARRAYPAT BOXPAT BELOW BEGIN BARBAR BAR ASSERT AS ARRAYPAT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TYPE TUPLEPAT TRY TO THEN SYMBOLPAT STRINGPAT STRING STAR STACKPAT SHARP SEMISEMI SEMI RPAREN RECORDPAT REALPAT RAISE QUEUEPAT QUESTION PREFIXOP PLUS OUT_CHANNELPAT OPEN NUMBERPAT MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LISTPAT LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY IN_CHANNELPAT INTPAT INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF HASHTABLEPAT FUNCTION FUN FOR FLOATPAT FLOAT FARRAYPAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO DIR_HANDLEPAT COMPLEXPAT COMMA COLONEQUAL COLONCOLON COLON CHARPAT CHAR CASE CARRAYPAT BOXPAT BELOW BEGIN BARBAR BAR ASSERT AS ARRAYPAT AND AMPERAMPER ABOVE
--   reduce production constr_longident -> UIDENT DOT UIDENT

State 6:
## Known stack suffix:
## LPAREN
## LR(1) items:
val_ident -> LPAREN . operator RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On STAR shift to state 7
-- On SHARP shift to state 8
-- On PREFIXOP shift to state 9
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On INFIXOP5R shift to state 12
-- On INFIXOP5L shift to state 13
-- On INFIXOP4R shift to state 14
-- On INFIXOP4L shift to state 15
-- On INFIXOP3R shift to state 16
-- On INFIXOP3L shift to state 17
-- On INFIXOP2R shift to state 18
-- On INFIXOP2L shift to state 19
-- On INFIXOP1R shift to state 20
-- On INFIXOP1L shift to state 21
-- On EQ shift to state 22
-- On DOLLAR shift to state 23
-- On COLONEQUAL shift to state 24
-- On COLONCOLON shift to state 25
-- On operator shift to state 26
## Reductions:

State 7:
## Known stack suffix:
## STAR
## LR(1) items:
operator -> STAR . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> STAR

State 8:
## Known stack suffix:
## SHARP
## LR(1) items:
operator -> SHARP . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> SHARP

State 9:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
operator -> PREFIXOP . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> PREFIXOP

State 10:
## Known stack suffix:
## PLUS
## LR(1) items:
operator -> PLUS . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> PLUS

State 11:
## Known stack suffix:
## MINUS
## LR(1) items:
operator -> MINUS . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> MINUS

State 12:
## Known stack suffix:
## INFIXOP5R
## LR(1) items:
operator -> INFIXOP5R . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP5R

State 13:
## Known stack suffix:
## INFIXOP5L
## LR(1) items:
operator -> INFIXOP5L . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP5L

State 14:
## Known stack suffix:
## INFIXOP4R
## LR(1) items:
operator -> INFIXOP4R . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP4R

State 15:
## Known stack suffix:
## INFIXOP4L
## LR(1) items:
operator -> INFIXOP4L . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP4L

State 16:
## Known stack suffix:
## INFIXOP3R
## LR(1) items:
operator -> INFIXOP3R . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP3R

State 17:
## Known stack suffix:
## INFIXOP3L
## LR(1) items:
operator -> INFIXOP3L . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP3L

State 18:
## Known stack suffix:
## INFIXOP2R
## LR(1) items:
operator -> INFIXOP2R . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP2R

State 19:
## Known stack suffix:
## INFIXOP2L
## LR(1) items:
operator -> INFIXOP2L . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP2L

State 20:
## Known stack suffix:
## INFIXOP1R
## LR(1) items:
operator -> INFIXOP1R . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP1R

State 21:
## Known stack suffix:
## INFIXOP1L
## LR(1) items:
operator -> INFIXOP1L . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP1L

State 22:
## Known stack suffix:
## EQ
## LR(1) items:
operator -> EQ . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> EQ

State 23:
## Known stack suffix:
## DOLLAR
## LR(1) items:
operator -> DOLLAR . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> DOLLAR

State 24:
## Known stack suffix:
## COLONEQUAL
## LR(1) items:
operator -> COLONEQUAL . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> COLONEQUAL

State 25:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
operator -> COLONCOLON . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> COLONCOLON

State 26:
## Known stack suffix:
## LPAREN operator
## LR(1) items:
val_ident -> LPAREN operator . RPAREN [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
-- On RPAREN shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## LPAREN operator RPAREN
## LR(1) items:
val_ident -> LPAREN operator RPAREN . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production val_ident -> LPAREN operator RPAREN

State 28:
## Known stack suffix:
## LIDENT
## LR(1) items:
val_ident -> LIDENT . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production val_ident -> LIDENT

State 29:
## Known stack suffix:
## UIDENT DOT val_ident
## LR(1) items:
val_longident -> UIDENT DOT val_ident . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production val_longident -> UIDENT DOT val_ident

State 30:
## Known stack suffix:
## TRY
## LR(1) items:
value_expr -> TRY . seq_expr WITH opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> TRY . seq_expr WITH error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 901
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 31:
## Known stack suffix:
## STRING
## LR(1) items:
constant -> STRING . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> STRING

State 32:
## Known stack suffix:
## SHARP
## LR(1) items:
constant -> SHARP . STRING [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
constant -> SHARP . LIDENT [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
constant -> SHARP . UIDENT [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
-- On UIDENT shift to state 33
-- On STRING shift to state 34
-- On LIDENT shift to state 35
## Reductions:

State 33:
## Known stack suffix:
## SHARP UIDENT
## LR(1) items:
constant -> SHARP UIDENT . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> SHARP UIDENT

State 34:
## Known stack suffix:
## SHARP STRING
## LR(1) items:
constant -> SHARP STRING . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> SHARP STRING

State 35:
## Known stack suffix:
## SHARP LIDENT
## LR(1) items:
constant -> SHARP LIDENT . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> SHARP LIDENT

State 36:
## Known stack suffix:
## RAISE
## LR(1) items:
no_value_expr -> RAISE . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 900
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 37:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
simple_expr -> PREFIXOP . simple_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 899
-- On constr_longident shift to state 414
-- On constant shift to state 415
## Reductions:

State 38:
## Known stack suffix:
## LVECTOR
## LR(1) items:
constant -> LVECTOR . RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LVECTOR . list_expr RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LVECTOR . list_expr error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RBRACK shift to state 133
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On list_expr shift to state 896
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 750
-- On expr shift to state 762
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
## Reductions:

State 39:
## Known stack suffix:
## WHILE
## LR(1) items:
no_value_expr -> WHILE . expr DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 892
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 40:
## Known stack suffix:
## PLUS
## LR(1) items:
value_expr -> PLUS . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 891
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 41:
## Known stack suffix:
## MINUS
## LR(1) items:
value_expr -> MINUS . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 890
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 42:
## Known stack suffix:
## MATCH
## LR(1) items:
value_expr -> MATCH . expr WITH opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> MATCH . expr_comma_list opt_comma WITH opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 43
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 69
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr_comma_list_element shift to state 836
-- On expr_comma_list shift to state 881
-- On expr shift to state 886
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On colonized_symbol shift to state 841
## Reductions:

State 43:
## Known stack suffix:
## UIDENT
## LR(1) items:
colonized_symbol -> UIDENT . [ COLON ]
constr_longident -> UIDENT . DOT UIDENT [ WITH WHERE UIDENT STRING STAR SHARP QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERAMPER ]
constr_longident -> UIDENT . [ WITH WHERE UIDENT STRING STAR SHARP QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERAMPER ]
val_longident -> UIDENT . DOT val_ident [ WITH WHERE UIDENT STRING STAR SHARP QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERAMPER ]
## Transitions:
-- On DOT shift to state 4
## Reductions:
-- On COLON
--   reduce production colonized_symbol -> UIDENT
-- On WITH WHERE UIDENT STRING STAR SHARP QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERAMPER
--   reduce production constr_longident -> UIDENT
** Conflict on DOT

State 44:
## Known stack suffix:
## LPAREN
## LR(1) items:
constant -> LPAREN . RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN . expr_comma_list opt_comma RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN . expr_comma_list BAR expr RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN . expr SEMI basic_seq_expr RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN . expr SEMI basic_seq_expr error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN . expr_comma_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
val_ident -> LPAREN . operator RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 7
-- On SHARP shift to state 80
-- On RPAREN shift to state 135
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 82
-- On PLUS shift to state 810
-- On MINUS shift to state 812
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On INFIXOP5R shift to state 12
-- On INFIXOP5L shift to state 13
-- On INFIXOP4R shift to state 14
-- On INFIXOP4L shift to state 15
-- On INFIXOP3R shift to state 16
-- On INFIXOP3L shift to state 17
-- On INFIXOP2R shift to state 18
-- On INFIXOP2L shift to state 19
-- On INFIXOP1R shift to state 20
-- On INFIXOP1L shift to state 21
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On EQ shift to state 22
-- On DOLLAR shift to state 239
-- On COLONEQUAL shift to state 24
-- On COLONCOLON shift to state 25
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On operator shift to state 26
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 869
-- On expr shift to state 876
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
## Reductions:

State 45:
## Known stack suffix:
## WHERE
## LR(1) items:
value_expr -> WHERE . expr THEN expr ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> WHERE . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 864
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 46:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_longident -> UIDENT . DOT UIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
constr_longident -> UIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
val_longident -> UIDENT . DOT val_ident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On DOT shift to state 47
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production constr_longident -> UIDENT
** Conflict on DOT

State 47:
## Known stack suffix:
## UIDENT DOT
## LR(1) items:
constr_longident -> UIDENT DOT . UIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
val_longident -> UIDENT DOT . val_ident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 48
-- On LPAREN shift to state 49
-- On LIDENT shift to state 52
-- On val_ident shift to state 53
## Reductions:

State 48:
## Known stack suffix:
## UIDENT DOT UIDENT
## LR(1) items:
constr_longident -> UIDENT DOT UIDENT . [ error WHERE WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT THEN SYMBOLPAT STRINGPAT STRING STAR STACKPAT SHARP SEMI RPAREN RECORDPAT REALPAT RBRACK RBRACE QUEUEPAT QUESTION PREFIXOP PLUS OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LMATRIX LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT EQ END ELSE DOTDOT DOT DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONEQUAL COLONCOLON COLON CHARPAT CHAR CARRAYPAT BOXPAT BEGIN BARRBRACK BARCOLON BARBAR BAR AS ARRAYPAT AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT THEN SYMBOLPAT STRINGPAT STRING STAR STACKPAT SHARP SEMI RPAREN RECORDPAT REALPAT RBRACK RBRACE QUEUEPAT QUESTION PREFIXOP PLUS OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LMATRIX LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT EQ END ELSE DOTDOT DOT DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONEQUAL COLONCOLON COLON CHARPAT CHAR CARRAYPAT BOXPAT BEGIN BARRBRACK BARCOLON BARBAR BAR AS ARRAYPAT AMPERAMPER
--   reduce production constr_longident -> UIDENT DOT UIDENT

State 49:
## Known stack suffix:
## LPAREN
## LR(1) items:
val_ident -> LPAREN . operator RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On STAR shift to state 7
-- On SHARP shift to state 8
-- On PREFIXOP shift to state 9
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On INFIXOP5R shift to state 12
-- On INFIXOP5L shift to state 13
-- On INFIXOP4R shift to state 14
-- On INFIXOP4L shift to state 15
-- On INFIXOP3R shift to state 16
-- On INFIXOP3L shift to state 17
-- On INFIXOP2R shift to state 18
-- On INFIXOP2L shift to state 19
-- On INFIXOP1R shift to state 20
-- On INFIXOP1L shift to state 21
-- On EQ shift to state 22
-- On DOLLAR shift to state 23
-- On COLONEQUAL shift to state 24
-- On COLONCOLON shift to state 25
-- On operator shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## LPAREN operator
## LR(1) items:
val_ident -> LPAREN operator . RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## LPAREN operator RPAREN
## LR(1) items:
val_ident -> LPAREN operator RPAREN . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production val_ident -> LPAREN operator RPAREN

State 52:
## Known stack suffix:
## LIDENT
## LR(1) items:
val_ident -> LIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production val_ident -> LIDENT

State 53:
## Known stack suffix:
## UIDENT DOT val_ident
## LR(1) items:
val_longident -> UIDENT DOT val_ident . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production val_longident -> UIDENT DOT val_ident

State 54:
## Known stack suffix:
## TRY
## LR(1) items:
value_expr -> TRY . seq_expr WITH opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> TRY . seq_expr WITH error [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 859
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 55:
## Known stack suffix:
## LMATRIX
## LR(1) items:
simple_expr -> LMATRIX . matrix_expr RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LMATRIX . matrix_expr error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On matrix_expr shift to state 856
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 808
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
## Reductions:

State 56:
## Known stack suffix:
## UIDENT
## LR(1) items:
colonized_symbol -> UIDENT . [ COLON ]
constr_longident -> UIDENT . DOT UIDENT [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN RBRACK QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
constr_longident -> UIDENT . [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN RBRACK QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
val_longident -> UIDENT . DOT val_ident [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN RBRACK QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On DOT shift to state 47
## Reductions:
-- On COLON
--   reduce production colonized_symbol -> UIDENT
-- On error WHERE UIDENT STRING STAR SHARP SEMI RPAREN RBRACK QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production constr_longident -> UIDENT
** Conflict on DOT

State 57:
## Known stack suffix:
## STRING
## LR(1) items:
constant -> STRING . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> STRING

State 58:
## Known stack suffix:
## SHARP
## LR(1) items:
constant -> SHARP . STRING [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
constant -> SHARP . LIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
constant -> SHARP . UIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 59
-- On STRING shift to state 60
-- On LIDENT shift to state 61
## Reductions:

State 59:
## Known stack suffix:
## SHARP UIDENT
## LR(1) items:
constant -> SHARP UIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> SHARP UIDENT

State 60:
## Known stack suffix:
## SHARP STRING
## LR(1) items:
constant -> SHARP STRING . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> SHARP STRING

State 61:
## Known stack suffix:
## SHARP LIDENT
## LR(1) items:
constant -> SHARP LIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> SHARP LIDENT

State 62:
## Known stack suffix:
## RAISE
## LR(1) items:
no_value_expr -> RAISE . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 855
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 63:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
simple_expr -> PREFIXOP . simple_expr [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 46
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On PREFIXOP shift to state 63
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On BEGIN shift to state 111
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 809
-- On constr_longident shift to state 515
-- On constant shift to state 516
## Reductions:

State 64:
## Known stack suffix:
## LVECTOR
## LR(1) items:
constant -> LVECTOR . RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LVECTOR . list_expr RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LVECTOR . list_expr error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RBRACK shift to state 65
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On list_expr shift to state 852
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 750
-- On expr shift to state 762
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
## Reductions:

State 65:
## Known stack suffix:
## LVECTOR RBRACK
## LR(1) items:
constant -> LVECTOR RBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> LVECTOR RBRACK

State 66:
## Known stack suffix:
## PLUS
## LR(1) items:
value_expr -> PLUS . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 811
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 67:
## Known stack suffix:
## MINUS
## LR(1) items:
value_expr -> MINUS . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 813
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 68:
## Known stack suffix:
## MATCH
## LR(1) items:
value_expr -> MATCH . expr WITH opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> MATCH . expr_comma_list opt_comma WITH opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 43
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 69
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr_comma_list_element shift to state 836
-- On expr_comma_list shift to state 837
-- On expr shift to state 848
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On colonized_symbol shift to state 841
## Reductions:

State 69:
## Known stack suffix:
## LIDENT
## LR(1) items:
colonized_symbol -> LIDENT . [ COLON ]
val_ident -> LIDENT . [ WITH WHERE UIDENT STRING STAR SHARP QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production colonized_symbol -> LIDENT
-- On WITH WHERE UIDENT STRING STAR SHARP QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERAMPER
--   reduce production val_ident -> LIDENT

State 70:
## Known stack suffix:
## LET
## LR(1) items:
value_expr -> LET . rec_flag let_bindings IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> LET . MODULE mod_ident EQ mod_ident IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On REC shift to state 71
-- On MODULE shift to state 72
-- On rec_flag shift to state 832
## Reductions:
-- On WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CARRAYPAT BOXPAT ARRAYPAT AMPERREST
--   reduce production rec_flag ->

State 71:
## Known stack suffix:
## REC
## LR(1) items:
rec_flag -> REC . [ WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CARRAYPAT BOXPAT ARRAYPAT AMPERREST ]
## Transitions:
## Reductions:
-- On WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CARRAYPAT BOXPAT ARRAYPAT AMPERREST
--   reduce production rec_flag -> REC

State 72:
## Known stack suffix:
## LET MODULE
## LR(1) items:
value_expr -> LET MODULE . mod_ident EQ mod_ident IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On UIDENT shift to state 73
-- On mod_ident shift to state 74
## Reductions:

State 73:
## Known stack suffix:
## UIDENT
## LR(1) items:
mod_ident -> UIDENT . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production mod_ident -> UIDENT

State 74:
## Known stack suffix:
## LET MODULE mod_ident
## LR(1) items:
value_expr -> LET MODULE mod_ident . EQ mod_ident IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On EQ shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## LET MODULE mod_ident EQ
## LR(1) items:
value_expr -> LET MODULE mod_ident EQ . mod_ident IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On UIDENT shift to state 73
-- On mod_ident shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## LET MODULE mod_ident EQ mod_ident
## LR(1) items:
value_expr -> LET MODULE mod_ident EQ mod_ident . IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On IN shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## LET MODULE mod_ident EQ mod_ident IN
## LR(1) items:
value_expr -> LET MODULE mod_ident EQ mod_ident IN . seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 831
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 78:
## Known stack suffix:
## LBRACKBAR
## LR(1) items:
constant -> LBRACKBAR . BARRBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACKBAR . expr_comma_list opt_comma BARRBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACKBAR . expr_comma_list opt_comma error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On BARRBRACK shift to state 139
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 827
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
## Reductions:

State 79:
## Known stack suffix:
## LPAREN
## LR(1) items:
constant -> LPAREN . RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN . expr_comma_list opt_comma RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN . expr_comma_list BAR expr RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN . expr SEMI basic_seq_expr RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN . expr SEMI basic_seq_expr error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN . expr_comma_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
val_ident -> LPAREN . operator RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 7
-- On SHARP shift to state 80
-- On RPAREN shift to state 81
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 82
-- On PLUS shift to state 810
-- On MINUS shift to state 812
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On INFIXOP5R shift to state 12
-- On INFIXOP5L shift to state 13
-- On INFIXOP4R shift to state 14
-- On INFIXOP4L shift to state 15
-- On INFIXOP3R shift to state 16
-- On INFIXOP3L shift to state 17
-- On INFIXOP2R shift to state 18
-- On INFIXOP2L shift to state 19
-- On INFIXOP1R shift to state 20
-- On INFIXOP1L shift to state 21
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On EQ shift to state 22
-- On DOLLAR shift to state 239
-- On COLONEQUAL shift to state 24
-- On COLONCOLON shift to state 25
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On operator shift to state 50
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 814
-- On expr shift to state 822
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
## Reductions:

State 80:
## Known stack suffix:
## SHARP
## LR(1) items:
constant -> SHARP . STRING [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR BAR AS AMPERAMPER ]
constant -> SHARP . LIDENT [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR BAR AS AMPERAMPER ]
constant -> SHARP . UIDENT [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR BAR AS AMPERAMPER ]
operator -> SHARP . [ RPAREN ]
## Transitions:
-- On UIDENT shift to state 59
-- On STRING shift to state 60
-- On LIDENT shift to state 61
## Reductions:
-- On RPAREN
--   reduce production operator -> SHARP

State 81:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
constant -> LPAREN RPAREN . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> LPAREN RPAREN

State 82:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
operator -> PREFIXOP . [ RPAREN ]
simple_expr -> PREFIXOP . simple_expr [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR BAR AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 46
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On PREFIXOP shift to state 63
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On BEGIN shift to state 111
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 809
-- On constr_longident shift to state 515
-- On constant shift to state 516
## Reductions:
-- On RPAREN
--   reduce production operator -> PREFIXOP

State 83:
## Known stack suffix:
## LMATRIX
## LR(1) items:
simple_expr -> LMATRIX . matrix_expr RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LMATRIX . matrix_expr error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On matrix_expr shift to state 802
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 808
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
## Reductions:

State 84:
## Known stack suffix:
## LIDENT
## LR(1) items:
colonized_symbol -> LIDENT . [ COLON ]
val_ident -> LIDENT . [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN RBRACK QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production colonized_symbol -> LIDENT
-- On error WHERE UIDENT STRING STAR SHARP SEMI RPAREN RBRACK QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production val_ident -> LIDENT

State 85:
## Known stack suffix:
## LET
## LR(1) items:
value_expr -> LET . rec_flag let_bindings IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> LET . MODULE mod_ident EQ mod_ident IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On REC shift to state 71
-- On MODULE shift to state 86
-- On rec_flag shift to state 785
## Reductions:
-- On WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CARRAYPAT BOXPAT ARRAYPAT AMPERREST
--   reduce production rec_flag ->

State 86:
## Known stack suffix:
## LET MODULE
## LR(1) items:
value_expr -> LET MODULE . mod_ident EQ mod_ident IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 73
-- On mod_ident shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## LET MODULE mod_ident
## LR(1) items:
value_expr -> LET MODULE mod_ident . EQ mod_ident IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On EQ shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## LET MODULE mod_ident EQ
## LR(1) items:
value_expr -> LET MODULE mod_ident EQ . mod_ident IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 73
-- On mod_ident shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## LET MODULE mod_ident EQ mod_ident
## LR(1) items:
value_expr -> LET MODULE mod_ident EQ mod_ident . IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On IN shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## LET MODULE mod_ident EQ mod_ident IN
## LR(1) items:
value_expr -> LET MODULE mod_ident EQ mod_ident IN . seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On seq_expr shift to state 784
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 629
## Reductions:

State 91:
## Known stack suffix:
## LBRACKBAR
## LR(1) items:
constant -> LBRACKBAR . BARRBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACKBAR . expr_comma_list opt_comma BARRBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACKBAR . expr_comma_list opt_comma error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On BARRBRACK shift to state 180
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 780
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
## Reductions:

State 92:
## Known stack suffix:
## LBRACK
## LR(1) items:
constant -> LBRACK . RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACK . list_expr RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACK . list_expr error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RBRACK shift to state 93
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On list_expr shift to state 777
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 750
-- On expr shift to state 762
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
## Reductions:

State 93:
## Known stack suffix:
## LBRACK RBRACK
## LR(1) items:
constant -> LBRACK RBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> LBRACK RBRACK

State 94:
## Known stack suffix:
## LBRACE
## LR(1) items:
constant -> LBRACE . RBRACE [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACE . record_expr opt_comma RBRACE [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACE . record_expr opt_comma error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 95
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RBRACE shift to state 98
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 99
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 721
-- On record_expr shift to state 773
-- On lbl_expr_list shift to state 736
-- On label_longident shift to state 728
-- On constr_longident shift to state 414
-- On constant shift to state 415
## Reductions:

State 95:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_longident -> UIDENT . DOT UIDENT [ WITH DOT ]
constr_longident -> UIDENT . [ WITH DOT ]
label_longident -> UIDENT . DOT LIDENT [ EQ ]
val_longident -> UIDENT . DOT val_ident [ WITH DOT ]
## Transitions:
-- On DOT shift to state 96
## Reductions:
-- On WITH DOT
--   reduce production constr_longident -> UIDENT
** Conflict on DOT

State 96:
## Known stack suffix:
## UIDENT DOT
## LR(1) items:
constr_longident -> UIDENT DOT . UIDENT [ WITH DOT ]
label_longident -> UIDENT DOT . LIDENT [ EQ ]
val_longident -> UIDENT DOT . val_ident [ WITH DOT ]
## Transitions:
-- On UIDENT shift to state 5
-- On LPAREN shift to state 6
-- On LIDENT shift to state 97
-- On val_ident shift to state 29
## Reductions:

State 97:
## Known stack suffix:
## UIDENT DOT LIDENT
## LR(1) items:
label_longident -> UIDENT DOT LIDENT . [ EQ ]
val_ident -> LIDENT . [ WITH DOT ]
## Transitions:
## Reductions:
-- On EQ
--   reduce production label_longident -> UIDENT DOT LIDENT
-- On WITH DOT
--   reduce production val_ident -> LIDENT

State 98:
## Known stack suffix:
## LBRACE RBRACE
## LR(1) items:
constant -> LBRACE RBRACE . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> LBRACE RBRACE

State 99:
## Known stack suffix:
## LIDENT
## LR(1) items:
label_longident -> LIDENT . [ EQ ]
val_ident -> LIDENT . [ WITH DOT ]
## Transitions:
## Reductions:
-- On EQ
--   reduce production label_longident -> LIDENT
-- On WITH DOT
--   reduce production val_ident -> LIDENT

State 100:
## Known stack suffix:
## LBRACK
## LR(1) items:
constant -> LBRACK . RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACK . list_expr RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACK . list_expr error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RBRACK shift to state 101
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On list_expr shift to state 746
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 750
-- On expr shift to state 762
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
## Reductions:

State 101:
## Known stack suffix:
## LBRACK RBRACK
## LR(1) items:
constant -> LBRACK RBRACK . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> LBRACK RBRACK

State 102:
## Known stack suffix:
## LAZY
## LR(1) items:
value_expr -> LAZY . simple_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 46
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On PREFIXOP shift to state 63
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On BEGIN shift to state 111
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 745
-- On constr_longident shift to state 515
-- On constant shift to state 516
## Reductions:

State 103:
## Known stack suffix:
## INT
## LR(1) items:
constant -> INT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> INT

State 104:
## Known stack suffix:
## IMAGINARY
## LR(1) items:
constant -> IMAGINARY . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> IMAGINARY

State 105:
## Known stack suffix:
## FLOAT
## LR(1) items:
constant -> FLOAT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> FLOAT

State 106:
## Known stack suffix:
## DOLLAR
## LR(1) items:
constant -> DOLLAR . STRING [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
constant -> DOLLAR . LIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
constant -> DOLLAR . UIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 107
-- On STRING shift to state 108
-- On LIDENT shift to state 109
## Reductions:

State 107:
## Known stack suffix:
## DOLLAR UIDENT
## LR(1) items:
constant -> DOLLAR UIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> DOLLAR UIDENT

State 108:
## Known stack suffix:
## DOLLAR STRING
## LR(1) items:
constant -> DOLLAR STRING . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> DOLLAR STRING

State 109:
## Known stack suffix:
## DOLLAR LIDENT
## LR(1) items:
constant -> DOLLAR LIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> DOLLAR LIDENT

State 110:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> CHAR

State 111:
## Known stack suffix:
## BEGIN
## LR(1) items:
simple_expr -> BEGIN . seq_expr END [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> BEGIN . seq_expr error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On seq_expr shift to state 742
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 629
## Reductions:

State 112:
## Known stack suffix:
## IF
## LR(1) items:
value_expr -> IF . expr THEN expr ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> IF . expr THEN expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 737
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 113:
## Known stack suffix:
## LBRACE
## LR(1) items:
constant -> LBRACE . RBRACE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACE . record_expr opt_comma RBRACE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACE . record_expr opt_comma error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On UIDENT shift to state 95
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RBRACE shift to state 114
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 99
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 721
-- On record_expr shift to state 731
-- On lbl_expr_list shift to state 736
-- On label_longident shift to state 728
-- On constr_longident shift to state 414
-- On constant shift to state 415
## Reductions:

State 114:
## Known stack suffix:
## LBRACE RBRACE
## LR(1) items:
constant -> LBRACE RBRACE . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> LBRACE RBRACE

State 115:
## Known stack suffix:
## INT
## LR(1) items:
constant -> INT . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> INT

State 116:
## Known stack suffix:
## IMAGINARY
## LR(1) items:
constant -> IMAGINARY . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> IMAGINARY

State 117:
## Known stack suffix:
## FLOAT
## LR(1) items:
constant -> FLOAT . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> FLOAT

State 118:
## Known stack suffix:
## DOLLAR
## LR(1) items:
constant -> DOLLAR . STRING [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
constant -> DOLLAR . LIDENT [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
constant -> DOLLAR . UIDENT [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
-- On UIDENT shift to state 119
-- On STRING shift to state 120
-- On LIDENT shift to state 121
## Reductions:

State 119:
## Known stack suffix:
## DOLLAR UIDENT
## LR(1) items:
constant -> DOLLAR UIDENT . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> DOLLAR UIDENT

State 120:
## Known stack suffix:
## DOLLAR STRING
## LR(1) items:
constant -> DOLLAR STRING . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> DOLLAR STRING

State 121:
## Known stack suffix:
## DOLLAR LIDENT
## LR(1) items:
constant -> DOLLAR LIDENT . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> DOLLAR LIDENT

State 122:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ WITH WHILE WHERE WHEN UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> CHAR

State 123:
## Known stack suffix:
## BEGIN
## LR(1) items:
simple_expr -> BEGIN . seq_expr END [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> BEGIN . seq_expr error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On seq_expr shift to state 718
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 629
## Reductions:

State 124:
## Known stack suffix:
## FUNCTION
## LR(1) items:
value_expr -> FUNCTION . opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On BAR shift to state 125
-- On opt_bar shift to state 126
## Reductions:
-- On WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CARRAYPAT BOXPAT ARRAYPAT AMPERREST
--   reduce production opt_bar ->

State 125:
## Known stack suffix:
## BAR
## LR(1) items:
opt_bar -> BAR . [ WHILE WHERE WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT TRY SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT RAISE QUEUEPAT PREFIXOP PLUS OUT_CHANNELPAT NUMBERPAT MINUS MATCH LVECTOR LPAREN LMATRIX LISTPAT LIDENT LET LBRACKBAR LBRACK LBRACE LAZY IN_CHANNELPAT INTPAT INT IMAGINARY IF HASHTABLEPAT FUNCTION FUN FOR FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CASE CARRAYPAT BOXPAT BEGIN ASSERT ARRAYPAT AMPERREST ]
## Transitions:
## Reductions:
-- On WHILE WHERE WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT TRY SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT RAISE QUEUEPAT PREFIXOP PLUS OUT_CHANNELPAT NUMBERPAT MINUS MATCH LVECTOR LPAREN LMATRIX LISTPAT LIDENT LET LBRACKBAR LBRACK LBRACE LAZY IN_CHANNELPAT INTPAT INT IMAGINARY IF HASHTABLEPAT FUNCTION FUN FOR FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CASE CARRAYPAT BOXPAT BEGIN ASSERT ARRAYPAT AMPERREST
--   reduce production opt_bar -> BAR

State 126:
## Known stack suffix:
## FUNCTION opt_bar
## LR(1) items:
value_expr -> FUNCTION opt_bar . match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 710
-- On pattern shift to state 399
-- On match_cases shift to state 713
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 127:
## Known stack suffix:
## WEAKARRAYPAT
## LR(1) items:
built_in_constr -> WEAKARRAYPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 147
## Reductions:

State 128:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_bi_pattern -> UNDERSCORE . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production simple_bi_pattern -> UNDERSCORE

State 129:
## Known stack suffix:
## MINUS
## LR(1) items:
signed_constant -> MINUS . INT [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
signed_constant -> MINUS . FLOAT [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On INT shift to state 130
-- On FLOAT shift to state 131
## Reductions:

State 130:
## Known stack suffix:
## MINUS INT
## LR(1) items:
signed_constant -> MINUS INT . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production signed_constant -> MINUS INT

State 131:
## Known stack suffix:
## MINUS FLOAT
## LR(1) items:
signed_constant -> MINUS FLOAT . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production signed_constant -> MINUS FLOAT

State 132:
## Known stack suffix:
## LVECTOR
## LR(1) items:
constant -> LVECTOR . RBRACK [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On RBRACK shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## LVECTOR RBRACK
## LR(1) items:
constant -> LVECTOR RBRACK . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> LVECTOR RBRACK

State 134:
## Known stack suffix:
## LPAREN
## LR(1) items:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
constant -> LPAREN . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RPAREN shift to state 135
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 136
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 142
-- On signed_constant shift to state 144
-- On constant shift to state 145
## Reductions:

State 135:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
constant -> LPAREN RPAREN . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> LPAREN RPAREN

State 136:
## Known stack suffix:
## LPAREN
## LR(1) items:
constant -> LPAREN . RPAREN [ RPAREN ]
## Transitions:
-- On RPAREN shift to state 135
## Reductions:

State 137:
## Known stack suffix:
## LIDENT
## LR(1) items:
simple_bi_pattern -> LIDENT . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production simple_bi_pattern -> LIDENT

State 138:
## Known stack suffix:
## LBRACKBAR
## LR(1) items:
constant -> LBRACKBAR . BARRBRACK [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On BARRBRACK shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## LBRACKBAR BARRBRACK
## LR(1) items:
constant -> LBRACKBAR BARRBRACK . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE
--   reduce production constant -> LBRACKBAR BARRBRACK

State 140:
## Known stack suffix:
## LBRACK
## LR(1) items:
constant -> LBRACK . RBRACK [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On RBRACK shift to state 101
## Reductions:

State 141:
## Known stack suffix:
## LBRACE
## LR(1) items:
constant -> LBRACE . RBRACE [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On RBRACE shift to state 114
## Reductions:

State 142:
## Known stack suffix:
## LPAREN simple_bi_pattern
## LR(1) items:
bi_pattern -> LPAREN simple_bi_pattern . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On RPAREN shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## LPAREN simple_bi_pattern RPAREN
## LR(1) items:
bi_pattern -> LPAREN simple_bi_pattern RPAREN . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN

State 144:
## Known stack suffix:
## signed_constant
## LR(1) items:
simple_bi_pattern -> signed_constant . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production simple_bi_pattern -> signed_constant

State 145:
## Known stack suffix:
## constant
## LR(1) items:
signed_constant -> constant . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production signed_constant -> constant

State 146:
## Known stack suffix:
## simple_bi_pattern
## LR(1) items:
bi_pattern -> simple_bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production bi_pattern -> simple_bi_pattern

State 147:
## Known stack suffix:
## WEAKARRAYPAT bi_pattern
## LR(1) items:
built_in_constr -> WEAKARRAYPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> WEAKARRAYPAT bi_pattern

State 148:
## Known stack suffix:
## VECTORPAT
## LR(1) items:
built_in_constr -> VECTORPAT . pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 709
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 149:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_pattern -> UNDERSCORE . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production simple_pattern -> UNDERSCORE

State 150:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_longident -> UIDENT . DOT UIDENT [ WHEN WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RPAREN RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUSGREATER MINUS LVECTOR LPAREN LISTPAT LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT EQ DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONCOLON CHARPAT CHAR CARRAYPAT BOXPAT BARBAR AS ARRAYPAT ]
constr_longident -> UIDENT . [ WHEN WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RPAREN RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUSGREATER MINUS LVECTOR LPAREN LISTPAT LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT EQ DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONCOLON CHARPAT CHAR CARRAYPAT BOXPAT BARBAR AS ARRAYPAT ]
## Transitions:
-- On DOT shift to state 151
## Reductions:
-- On WHEN WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RPAREN RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUSGREATER MINUS LVECTOR LPAREN LISTPAT LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT EQ DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONCOLON CHARPAT CHAR CARRAYPAT BOXPAT BARBAR AS ARRAYPAT
--   reduce production constr_longident -> UIDENT

State 151:
## Known stack suffix:
## UIDENT DOT
## LR(1) items:
constr_longident -> UIDENT DOT . UIDENT [ WHEN WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RPAREN RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUSGREATER MINUS LVECTOR LPAREN LISTPAT LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT EQ DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONCOLON CHARPAT CHAR CARRAYPAT BOXPAT BARBAR AS ARRAYPAT ]
## Transitions:
-- On UIDENT shift to state 5
## Reductions:

State 152:
## Known stack suffix:
## TUPLEPAT
## LR(1) items:
built_in_constr -> TUPLEPAT . pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 708
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 153:
## Known stack suffix:
## SYMBOLPAT
## LR(1) items:
built_in_constr -> SYMBOLPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## SYMBOLPAT bi_pattern
## LR(1) items:
built_in_constr -> SYMBOLPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> SYMBOLPAT bi_pattern

State 155:
## Known stack suffix:
## STRINGPAT
## LR(1) items:
built_in_constr -> STRINGPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## STRINGPAT bi_pattern
## LR(1) items:
built_in_constr -> STRINGPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> STRINGPAT bi_pattern

State 157:
## Known stack suffix:
## STACKPAT
## LR(1) items:
built_in_constr -> STACKPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## STACKPAT bi_pattern
## LR(1) items:
built_in_constr -> STACKPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> STACKPAT bi_pattern

State 159:
## Known stack suffix:
## RECORDPAT
## LR(1) items:
built_in_constr -> RECORDPAT . pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 707
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 160:
## Known stack suffix:
## REALPAT
## LR(1) items:
built_in_constr -> REALPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## REALPAT bi_pattern
## LR(1) items:
built_in_constr -> REALPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> REALPAT bi_pattern

State 162:
## Known stack suffix:
## QUEUEPAT
## LR(1) items:
built_in_constr -> QUEUEPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## QUEUEPAT bi_pattern
## LR(1) items:
built_in_constr -> QUEUEPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> QUEUEPAT bi_pattern

State 164:
## Known stack suffix:
## OUT_CHANNELPAT
## LR(1) items:
built_in_constr -> OUT_CHANNELPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## OUT_CHANNELPAT bi_pattern
## LR(1) items:
built_in_constr -> OUT_CHANNELPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern

State 166:
## Known stack suffix:
## NUMBERPAT
## LR(1) items:
built_in_constr -> NUMBERPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 167
## Reductions:

State 167:
## Known stack suffix:
## NUMBERPAT bi_pattern
## LR(1) items:
built_in_constr -> NUMBERPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> NUMBERPAT bi_pattern

State 168:
## Known stack suffix:
## LVECTOR
## LR(1) items:
constant -> LVECTOR . RBRACK [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LVECTOR . list_pattern RBRACK [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LVECTOR . list_pattern error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On RBRACK shift to state 133
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOTDOTDOT shift to state 236
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 348
-- On pattern_comma_list shift to state 349
-- On pattern shift to state 355
-- On list_pattern shift to state 704
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:

State 169:
## Known stack suffix:
## WEAKARRAYPAT
## LR(1) items:
built_in_constr -> WEAKARRAYPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 186
## Reductions:

State 170:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_bi_pattern -> UNDERSCORE . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_bi_pattern -> UNDERSCORE

State 171:
## Known stack suffix:
## MINUS
## LR(1) items:
signed_constant -> MINUS . INT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
signed_constant -> MINUS . FLOAT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On INT shift to state 172
-- On FLOAT shift to state 173
## Reductions:

State 172:
## Known stack suffix:
## MINUS INT
## LR(1) items:
signed_constant -> MINUS INT . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production signed_constant -> MINUS INT

State 173:
## Known stack suffix:
## MINUS FLOAT
## LR(1) items:
signed_constant -> MINUS FLOAT . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production signed_constant -> MINUS FLOAT

State 174:
## Known stack suffix:
## LVECTOR
## LR(1) items:
constant -> LVECTOR . RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On RBRACK shift to state 65
## Reductions:

State 175:
## Known stack suffix:
## LPAREN
## LR(1) items:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
constant -> LPAREN . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RPAREN shift to state 81
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 136
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 176
-- On signed_constant shift to state 144
-- On constant shift to state 145
## Reductions:

State 176:
## Known stack suffix:
## LPAREN simple_bi_pattern
## LR(1) items:
bi_pattern -> LPAREN simple_bi_pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On RPAREN shift to state 177
## Reductions:

State 177:
## Known stack suffix:
## LPAREN simple_bi_pattern RPAREN
## LR(1) items:
bi_pattern -> LPAREN simple_bi_pattern RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN

State 178:
## Known stack suffix:
## LIDENT
## LR(1) items:
simple_bi_pattern -> LIDENT . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_bi_pattern -> LIDENT

State 179:
## Known stack suffix:
## LBRACKBAR
## LR(1) items:
constant -> LBRACKBAR . BARRBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On BARRBRACK shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## LBRACKBAR BARRBRACK
## LR(1) items:
constant -> LBRACKBAR BARRBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER
--   reduce production constant -> LBRACKBAR BARRBRACK

State 181:
## Known stack suffix:
## LBRACK
## LR(1) items:
constant -> LBRACK . RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On RBRACK shift to state 93
## Reductions:

State 182:
## Known stack suffix:
## LBRACE
## LR(1) items:
constant -> LBRACE . RBRACE [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On RBRACE shift to state 98
## Reductions:

State 183:
## Known stack suffix:
## simple_bi_pattern
## LR(1) items:
bi_pattern -> simple_bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production bi_pattern -> simple_bi_pattern

State 184:
## Known stack suffix:
## signed_constant
## LR(1) items:
simple_bi_pattern -> signed_constant . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_bi_pattern -> signed_constant

State 185:
## Known stack suffix:
## constant
## LR(1) items:
signed_constant -> constant . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production signed_constant -> constant

State 186:
## Known stack suffix:
## WEAKARRAYPAT bi_pattern
## LR(1) items:
built_in_constr -> WEAKARRAYPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> WEAKARRAYPAT bi_pattern

State 187:
## Known stack suffix:
## VECTORPAT
## LR(1) items:
built_in_constr -> VECTORPAT . pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 703
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:

State 188:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_pattern -> UNDERSCORE . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> UNDERSCORE

State 189:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_longident -> UIDENT . DOT UIDENT [ error WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RPAREN RECORDPAT REALPAT RBRACK RBRACE QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONCOLON CHARPAT CHAR CARRAYPAT BOXPAT BARBAR BAR AS ARRAYPAT ]
constr_longident -> UIDENT . [ error WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RPAREN RECORDPAT REALPAT RBRACK RBRACE QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONCOLON CHARPAT CHAR CARRAYPAT BOXPAT BARBAR BAR AS ARRAYPAT ]
## Transitions:
-- On DOT shift to state 190
## Reductions:
-- On error WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RPAREN RECORDPAT REALPAT RBRACK RBRACE QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONCOLON CHARPAT CHAR CARRAYPAT BOXPAT BARBAR BAR AS ARRAYPAT
--   reduce production constr_longident -> UIDENT

State 190:
## Known stack suffix:
## UIDENT DOT
## LR(1) items:
constr_longident -> UIDENT DOT . UIDENT [ error WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RPAREN RECORDPAT REALPAT RBRACK RBRACE QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONCOLON CHARPAT CHAR CARRAYPAT BOXPAT BARBAR BAR AS ARRAYPAT ]
## Transitions:
-- On UIDENT shift to state 48
## Reductions:

State 191:
## Known stack suffix:
## TUPLEPAT
## LR(1) items:
built_in_constr -> TUPLEPAT . pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 702
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:

State 192:
## Known stack suffix:
## SYMBOLPAT
## LR(1) items:
built_in_constr -> SYMBOLPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## SYMBOLPAT bi_pattern
## LR(1) items:
built_in_constr -> SYMBOLPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> SYMBOLPAT bi_pattern

State 194:
## Known stack suffix:
## STRINGPAT
## LR(1) items:
built_in_constr -> STRINGPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## STRINGPAT bi_pattern
## LR(1) items:
built_in_constr -> STRINGPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> STRINGPAT bi_pattern

State 196:
## Known stack suffix:
## STACKPAT
## LR(1) items:
built_in_constr -> STACKPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## STACKPAT bi_pattern
## LR(1) items:
built_in_constr -> STACKPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> STACKPAT bi_pattern

State 198:
## Known stack suffix:
## RECORDPAT
## LR(1) items:
built_in_constr -> RECORDPAT . pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 701
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:

State 199:
## Known stack suffix:
## REALPAT
## LR(1) items:
built_in_constr -> REALPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## REALPAT bi_pattern
## LR(1) items:
built_in_constr -> REALPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> REALPAT bi_pattern

State 201:
## Known stack suffix:
## QUEUEPAT
## LR(1) items:
built_in_constr -> QUEUEPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 202
## Reductions:

State 202:
## Known stack suffix:
## QUEUEPAT bi_pattern
## LR(1) items:
built_in_constr -> QUEUEPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> QUEUEPAT bi_pattern

State 203:
## Known stack suffix:
## OUT_CHANNELPAT
## LR(1) items:
built_in_constr -> OUT_CHANNELPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## OUT_CHANNELPAT bi_pattern
## LR(1) items:
built_in_constr -> OUT_CHANNELPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern

State 205:
## Known stack suffix:
## NUMBERPAT
## LR(1) items:
built_in_constr -> NUMBERPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## NUMBERPAT bi_pattern
## LR(1) items:
built_in_constr -> NUMBERPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> NUMBERPAT bi_pattern

State 207:
## Known stack suffix:
## LVECTOR
## LR(1) items:
constant -> LVECTOR . RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LVECTOR . list_pattern RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LVECTOR . list_pattern error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On RBRACK shift to state 65
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOTDOTDOT shift to state 236
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 348
-- On pattern_comma_list shift to state 349
-- On pattern shift to state 355
-- On list_pattern shift to state 698
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:

State 208:
## Known stack suffix:
## LPAREN
## LR(1) items:
constant -> LPAREN . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LPAREN . list_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LPAREN . pattern_comma_list COMMA param_tail RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LPAREN . param_tail RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LPAREN . list_pattern error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
val_ident -> LPAREN . operator RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STAR shift to state 7
-- On STACKPAT shift to state 196
-- On SHARP shift to state 80
-- On RPAREN shift to state 81
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On PREFIXOP shift to state 9
-- On PLUS shift to state 10
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 209
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On INFIXOP5R shift to state 12
-- On INFIXOP5L shift to state 13
-- On INFIXOP4R shift to state 14
-- On INFIXOP4L shift to state 15
-- On INFIXOP3R shift to state 16
-- On INFIXOP3L shift to state 17
-- On INFIXOP2R shift to state 18
-- On INFIXOP2L shift to state 19
-- On INFIXOP1R shift to state 20
-- On INFIXOP1L shift to state 21
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On EQ shift to state 22
-- On DOTDOTDOT shift to state 236
-- On DOLLAR shift to state 239
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On COLONEQUAL shift to state 24
-- On COLONCOLON shift to state 25
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On AMPEROPT shift to state 377
-- On AMPERKEY shift to state 666
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 348
-- On pattern_comma_list shift to state 689
-- On pattern shift to state 355
-- On param_tail shift to state 693
-- On operator shift to state 50
-- On list_pattern shift to state 695
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:

State 209:
## Known stack suffix:
## MINUS
## LR(1) items:
operator -> MINUS . [ RPAREN ]
signed_constant -> MINUS . INT [ error RPAREN COMMA COLONCOLON BARBAR BAR AS ]
signed_constant -> MINUS . FLOAT [ error RPAREN COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On INT shift to state 172
-- On FLOAT shift to state 173
## Reductions:
-- On RPAREN
--   reduce production operator -> MINUS

State 210:
## Known stack suffix:
## LISTPAT
## LR(1) items:
built_in_constr -> LISTPAT . pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 688
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:

State 211:
## Known stack suffix:
## LBRACK
## LR(1) items:
constant -> LBRACK . RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LBRACK . list_pattern RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LBRACK . list_pattern error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On RBRACK shift to state 93
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOTDOTDOT shift to state 236
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 348
-- On pattern_comma_list shift to state 349
-- On pattern shift to state 355
-- On list_pattern shift to state 685
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:

State 212:
## Known stack suffix:
## LBRACE
## LR(1) items:
constant -> LBRACE . RBRACE [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LBRACE . lbl_pattern_list opt_comma RBRACE [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LBRACE . lbl_pattern_list error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UIDENT shift to state 213
-- On RBRACE shift to state 98
-- On LIDENT shift to state 216
-- On lbl_pattern_list_element shift to state 217
-- On lbl_pattern_list shift to state 218
-- On label_longident shift to state 222
## Reductions:

State 213:
## Known stack suffix:
## UIDENT
## LR(1) items:
label_longident -> UIDENT . DOT LIDENT [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On DOT shift to state 214
## Reductions:

State 214:
## Known stack suffix:
## UIDENT DOT
## LR(1) items:
label_longident -> UIDENT DOT . LIDENT [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On LIDENT shift to state 215
## Reductions:

State 215:
## Known stack suffix:
## UIDENT DOT LIDENT
## LR(1) items:
label_longident -> UIDENT DOT LIDENT . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production label_longident -> UIDENT DOT LIDENT

State 216:
## Known stack suffix:
## LIDENT
## LR(1) items:
label_longident -> LIDENT . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production label_longident -> LIDENT

State 217:
## Known stack suffix:
## lbl_pattern_list_element
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list_element . [ error RBRACE COMMA ]
## Transitions:
## Reductions:
-- On error RBRACE COMMA
--   reduce production lbl_pattern_list -> lbl_pattern_list_element

State 218:
## Known stack suffix:
## LBRACE lbl_pattern_list
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list . COMMA lbl_pattern_list_element [ error RBRACE COMMA ]
simple_pattern -> LBRACE lbl_pattern_list . opt_comma RBRACE [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LBRACE lbl_pattern_list . error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On error shift to state 219
-- On COMMA shift to state 220
-- On opt_comma shift to state 683
## Reductions:
-- On RBRACE
--   reduce production opt_comma ->

State 219:
## Known stack suffix:
## LBRACE lbl_pattern_list error
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list error . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> LBRACE lbl_pattern_list error

State 220:
## Known stack suffix:
## lbl_pattern_list COMMA
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list COMMA . lbl_pattern_list_element [ error RBRACE COMMA ]
opt_comma -> COMMA . [ RBRACE ]
## Transitions:
-- On UIDENT shift to state 213
-- On LIDENT shift to state 216
-- On lbl_pattern_list_element shift to state 221
-- On label_longident shift to state 222
## Reductions:
-- On RBRACE
--   reduce production opt_comma -> COMMA

State 221:
## Known stack suffix:
## lbl_pattern_list COMMA lbl_pattern_list_element
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list COMMA lbl_pattern_list_element . [ error RBRACE COMMA ]
## Transitions:
## Reductions:
-- On error RBRACE COMMA
--   reduce production lbl_pattern_list -> lbl_pattern_list COMMA lbl_pattern_list_element

State 222:
## Known stack suffix:
## label_longident
## LR(1) items:
lbl_pattern_list_element -> label_longident . EQ pattern [ error RBRACE COMMA ]
## Transitions:
-- On EQ shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## label_longident EQ
## LR(1) items:
lbl_pattern_list_element -> label_longident EQ . pattern [ error RBRACE COMMA ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 682
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:

State 224:
## Known stack suffix:
## IN_CHANNELPAT
## LR(1) items:
built_in_constr -> IN_CHANNELPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 225
## Reductions:

State 225:
## Known stack suffix:
## IN_CHANNELPAT bi_pattern
## LR(1) items:
built_in_constr -> IN_CHANNELPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> IN_CHANNELPAT bi_pattern

State 226:
## Known stack suffix:
## INTPAT
## LR(1) items:
built_in_constr -> INTPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 227
## Reductions:

State 227:
## Known stack suffix:
## INTPAT bi_pattern
## LR(1) items:
built_in_constr -> INTPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> INTPAT bi_pattern

State 228:
## Known stack suffix:
## HASHTABLEPAT
## LR(1) items:
built_in_constr -> HASHTABLEPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 229
## Reductions:

State 229:
## Known stack suffix:
## HASHTABLEPAT bi_pattern
## LR(1) items:
built_in_constr -> HASHTABLEPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> HASHTABLEPAT bi_pattern

State 230:
## Known stack suffix:
## FLOATPAT
## LR(1) items:
built_in_constr -> FLOATPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## FLOATPAT bi_pattern
## LR(1) items:
built_in_constr -> FLOATPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> FLOATPAT bi_pattern

State 232:
## Known stack suffix:
## FARRAYPAT
## LR(1) items:
built_in_constr -> FARRAYPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> FARRAYPAT . LPAREN pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 233
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 681
## Reductions:

State 233:
## Known stack suffix:
## FARRAYPAT LPAREN
## LR(1) items:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> FARRAYPAT LPAREN . pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
constant -> LPAREN . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 81
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 176
-- On signed_constant shift to state 300
-- On pattern shift to state 677
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 234:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_bi_pattern -> UNDERSCORE . [ RPAREN ]
simple_pattern -> UNDERSCORE . [ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production simple_bi_pattern -> UNDERSCORE
-- On COMMA COLONCOLON BARBAR AS
--   reduce production simple_pattern -> UNDERSCORE

State 235:
## Known stack suffix:
## LPAREN
## LR(1) items:
constant -> LPAREN . RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LPAREN . list_pattern RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LPAREN . pattern_comma_list COMMA param_tail RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LPAREN . param_tail RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LPAREN . list_pattern error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
val_ident -> LPAREN . operator RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STAR shift to state 7
-- On STACKPAT shift to state 196
-- On SHARP shift to state 80
-- On RPAREN shift to state 135
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On PREFIXOP shift to state 9
-- On PLUS shift to state 10
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 209
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On INFIXOP5R shift to state 12
-- On INFIXOP5L shift to state 13
-- On INFIXOP4R shift to state 14
-- On INFIXOP4L shift to state 15
-- On INFIXOP3R shift to state 16
-- On INFIXOP3L shift to state 17
-- On INFIXOP2R shift to state 18
-- On INFIXOP2L shift to state 19
-- On INFIXOP1R shift to state 20
-- On INFIXOP1L shift to state 21
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On EQ shift to state 22
-- On DOTDOTDOT shift to state 236
-- On DOLLAR shift to state 239
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On COLONEQUAL shift to state 24
-- On COLONCOLON shift to state 25
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On AMPEROPT shift to state 377
-- On AMPERKEY shift to state 666
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 348
-- On pattern_comma_list shift to state 668
-- On pattern shift to state 355
-- On param_tail shift to state 672
-- On operator shift to state 26
-- On list_pattern shift to state 674
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:

State 236:
## Known stack suffix:
## DOTDOTDOT
## LR(1) items:
list_pattern -> DOTDOTDOT . AS LIDENT [ error RPAREN RBRACK ]
list_pattern -> DOTDOTDOT . [ error RPAREN RBRACK ]
## Transitions:
-- On AS shift to state 237
## Reductions:
-- On error RPAREN RBRACK
--   reduce production list_pattern -> DOTDOTDOT

State 237:
## Known stack suffix:
## DOTDOTDOT AS
## LR(1) items:
list_pattern -> DOTDOTDOT AS . LIDENT [ error RPAREN RBRACK ]
## Transitions:
-- On LIDENT shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## DOTDOTDOT AS LIDENT
## LR(1) items:
list_pattern -> DOTDOTDOT AS LIDENT . [ error RPAREN RBRACK ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK
--   reduce production list_pattern -> DOTDOTDOT AS LIDENT

State 239:
## Known stack suffix:
## DOLLAR
## LR(1) items:
constant -> DOLLAR . STRING [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR BAR AS AMPERAMPER ]
constant -> DOLLAR . LIDENT [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR BAR AS AMPERAMPER ]
constant -> DOLLAR . UIDENT [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR BAR AS AMPERAMPER ]
operator -> DOLLAR . [ RPAREN ]
## Transitions:
-- On UIDENT shift to state 107
-- On STRING shift to state 108
-- On LIDENT shift to state 109
## Reductions:
-- On RPAREN
--   reduce production operator -> DOLLAR

State 240:
## Known stack suffix:
## DIR_HANDLEPAT
## LR(1) items:
built_in_constr -> DIR_HANDLEPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## DIR_HANDLEPAT bi_pattern
## LR(1) items:
built_in_constr -> DIR_HANDLEPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern

State 242:
## Known stack suffix:
## COMPLEXPAT
## LR(1) items:
built_in_constr -> COMPLEXPAT . LPAREN bi_pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> COMPLEXPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 243
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 249
## Reductions:

State 243:
## Known stack suffix:
## COMPLEXPAT LPAREN
## LR(1) items:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> COMPLEXPAT LPAREN . bi_pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
constant -> LPAREN . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RPAREN shift to state 81
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 244
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 245
## Reductions:

State 244:
## Known stack suffix:
## LPAREN simple_bi_pattern
## LR(1) items:
bi_pattern -> simple_bi_pattern . [ COMMA ]
bi_pattern -> LPAREN simple_bi_pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On RPAREN shift to state 177
## Reductions:
-- On COMMA
--   reduce production bi_pattern -> simple_bi_pattern

State 245:
## Known stack suffix:
## COMPLEXPAT LPAREN bi_pattern
## LR(1) items:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern . COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On COMMA shift to state 246
## Reductions:

State 246:
## Known stack suffix:
## COMPLEXPAT LPAREN bi_pattern COMMA
## LR(1) items:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA . bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern
## LR(1) items:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On RPAREN shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
## LR(1) items:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN

State 249:
## Known stack suffix:
## COMPLEXPAT bi_pattern
## LR(1) items:
built_in_constr -> COMPLEXPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> COMPLEXPAT bi_pattern

State 250:
## Known stack suffix:
## CHARPAT
## LR(1) items:
built_in_constr -> CHARPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 251
## Reductions:

State 251:
## Known stack suffix:
## CHARPAT bi_pattern
## LR(1) items:
built_in_constr -> CHARPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> CHARPAT bi_pattern

State 252:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> CHAR . DOTDOT CHAR [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On DOTDOT shift to state 253
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production constant -> CHAR

State 253:
## Known stack suffix:
## CHAR DOTDOT
## LR(1) items:
simple_pattern -> CHAR DOTDOT . CHAR [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On CHAR shift to state 254
## Reductions:

State 254:
## Known stack suffix:
## CHAR DOTDOT CHAR
## LR(1) items:
simple_pattern -> CHAR DOTDOT CHAR . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> CHAR DOTDOT CHAR

State 255:
## Known stack suffix:
## CARRAYPAT
## LR(1) items:
built_in_constr -> CARRAYPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> CARRAYPAT . LPAREN pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 256
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 376
## Reductions:

State 256:
## Known stack suffix:
## CARRAYPAT LPAREN
## LR(1) items:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> CARRAYPAT LPAREN . pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
constant -> LPAREN . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 81
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 176
-- On signed_constant shift to state 300
-- On pattern shift to state 372
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 257:
## Known stack suffix:
## LISTPAT
## LR(1) items:
built_in_constr -> LISTPAT . pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 371
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 258:
## Known stack suffix:
## LBRACK
## LR(1) items:
constant -> LBRACK . RBRACK [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LBRACK . list_pattern RBRACK [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LBRACK . list_pattern error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On RBRACK shift to state 101
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOTDOTDOT shift to state 236
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 348
-- On pattern_comma_list shift to state 349
-- On pattern shift to state 355
-- On list_pattern shift to state 368
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:

State 259:
## Known stack suffix:
## BOXPAT
## LR(1) items:
built_in_constr -> BOXPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> BOXPAT . LPAREN pattern COMMA pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 260
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 335
## Reductions:

State 260:
## Known stack suffix:
## BOXPAT LPAREN
## LR(1) items:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> BOXPAT LPAREN . pattern COMMA pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
constant -> LPAREN . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 81
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 176
-- On signed_constant shift to state 300
-- On pattern shift to state 331
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 261:
## Known stack suffix:
## LIDENT
## LR(1) items:
simple_bi_pattern -> LIDENT . [ RPAREN ]
val_ident -> LIDENT . [ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production simple_bi_pattern -> LIDENT
-- On COMMA COLONCOLON BARBAR AS
--   reduce production val_ident -> LIDENT

State 262:
## Known stack suffix:
## LBRACE
## LR(1) items:
constant -> LBRACE . RBRACE [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LBRACE . lbl_pattern_list opt_comma RBRACE [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LBRACE . lbl_pattern_list error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On UIDENT shift to state 213
-- On RBRACE shift to state 114
-- On LIDENT shift to state 216
-- On lbl_pattern_list_element shift to state 217
-- On lbl_pattern_list shift to state 263
-- On label_longident shift to state 222
## Reductions:

State 263:
## Known stack suffix:
## LBRACE lbl_pattern_list
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list . COMMA lbl_pattern_list_element [ error RBRACE COMMA ]
simple_pattern -> LBRACE lbl_pattern_list . opt_comma RBRACE [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LBRACE lbl_pattern_list . error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On error shift to state 264
-- On COMMA shift to state 220
-- On opt_comma shift to state 265
## Reductions:
-- On RBRACE
--   reduce production opt_comma ->

State 264:
## Known stack suffix:
## LBRACE lbl_pattern_list error
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list error . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production simple_pattern -> LBRACE lbl_pattern_list error

State 265:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_comma
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_comma . RBRACE [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On RBRACE shift to state 266
## Reductions:

State 266:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_comma RBRACE
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE

State 267:
## Known stack suffix:
## IN_CHANNELPAT
## LR(1) items:
built_in_constr -> IN_CHANNELPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 268
## Reductions:

State 268:
## Known stack suffix:
## IN_CHANNELPAT bi_pattern
## LR(1) items:
built_in_constr -> IN_CHANNELPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> IN_CHANNELPAT bi_pattern

State 269:
## Known stack suffix:
## INTPAT
## LR(1) items:
built_in_constr -> INTPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 270
## Reductions:

State 270:
## Known stack suffix:
## INTPAT bi_pattern
## LR(1) items:
built_in_constr -> INTPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> INTPAT bi_pattern

State 271:
## Known stack suffix:
## HASHTABLEPAT
## LR(1) items:
built_in_constr -> HASHTABLEPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## HASHTABLEPAT bi_pattern
## LR(1) items:
built_in_constr -> HASHTABLEPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> HASHTABLEPAT bi_pattern

State 273:
## Known stack suffix:
## FLOATPAT
## LR(1) items:
built_in_constr -> FLOATPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## FLOATPAT bi_pattern
## LR(1) items:
built_in_constr -> FLOATPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> FLOATPAT bi_pattern

State 275:
## Known stack suffix:
## FARRAYPAT
## LR(1) items:
built_in_constr -> FARRAYPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> FARRAYPAT . LPAREN pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 276
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 330
## Reductions:

State 276:
## Known stack suffix:
## FARRAYPAT LPAREN
## LR(1) items:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> FARRAYPAT LPAREN . pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
constant -> LPAREN . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 135
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 142
-- On signed_constant shift to state 300
-- On pattern shift to state 326
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 277:
## Known stack suffix:
## DIR_HANDLEPAT
## LR(1) items:
built_in_constr -> DIR_HANDLEPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## DIR_HANDLEPAT bi_pattern
## LR(1) items:
built_in_constr -> DIR_HANDLEPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern

State 279:
## Known stack suffix:
## COMPLEXPAT
## LR(1) items:
built_in_constr -> COMPLEXPAT . LPAREN bi_pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> COMPLEXPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 280
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 286
## Reductions:

State 280:
## Known stack suffix:
## COMPLEXPAT LPAREN
## LR(1) items:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> COMPLEXPAT LPAREN . bi_pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
constant -> LPAREN . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RPAREN shift to state 135
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 281
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 282
## Reductions:

State 281:
## Known stack suffix:
## LPAREN simple_bi_pattern
## LR(1) items:
bi_pattern -> simple_bi_pattern . [ COMMA ]
bi_pattern -> LPAREN simple_bi_pattern . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On RPAREN shift to state 143
## Reductions:
-- On COMMA
--   reduce production bi_pattern -> simple_bi_pattern

State 282:
## Known stack suffix:
## COMPLEXPAT LPAREN bi_pattern
## LR(1) items:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern . COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COMMA shift to state 283
## Reductions:

State 283:
## Known stack suffix:
## COMPLEXPAT LPAREN bi_pattern COMMA
## LR(1) items:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA . bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern
## LR(1) items:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On RPAREN shift to state 285
## Reductions:

State 285:
## Known stack suffix:
## COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
## LR(1) items:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN

State 286:
## Known stack suffix:
## COMPLEXPAT bi_pattern
## LR(1) items:
built_in_constr -> COMPLEXPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> COMPLEXPAT bi_pattern

State 287:
## Known stack suffix:
## CHARPAT
## LR(1) items:
built_in_constr -> CHARPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 288
## Reductions:

State 288:
## Known stack suffix:
## CHARPAT bi_pattern
## LR(1) items:
built_in_constr -> CHARPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> CHARPAT bi_pattern

State 289:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> CHAR . DOTDOT CHAR [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On DOTDOT shift to state 290
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production constant -> CHAR

State 290:
## Known stack suffix:
## CHAR DOTDOT
## LR(1) items:
simple_pattern -> CHAR DOTDOT . CHAR [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On CHAR shift to state 291
## Reductions:

State 291:
## Known stack suffix:
## CHAR DOTDOT CHAR
## LR(1) items:
simple_pattern -> CHAR DOTDOT CHAR . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production simple_pattern -> CHAR DOTDOT CHAR

State 292:
## Known stack suffix:
## CARRAYPAT
## LR(1) items:
built_in_constr -> CARRAYPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> CARRAYPAT . LPAREN pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 293
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 325
## Reductions:

State 293:
## Known stack suffix:
## CARRAYPAT LPAREN
## LR(1) items:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> CARRAYPAT LPAREN . pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
constant -> LPAREN . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 135
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 142
-- On signed_constant shift to state 300
-- On pattern shift to state 321
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 294:
## Known stack suffix:
## BOXPAT
## LR(1) items:
built_in_constr -> BOXPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> BOXPAT . LPAREN pattern COMMA pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 295
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 320
## Reductions:

State 295:
## Known stack suffix:
## BOXPAT LPAREN
## LR(1) items:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> BOXPAT LPAREN . pattern COMMA pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
constant -> LPAREN . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 135
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 142
-- On signed_constant shift to state 300
-- On pattern shift to state 316
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 296:
## Known stack suffix:
## ARRAYPAT
## LR(1) items:
built_in_constr -> ARRAYPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> ARRAYPAT . LPAREN pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 297
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 315
## Reductions:

State 297:
## Known stack suffix:
## ARRAYPAT LPAREN
## LR(1) items:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> ARRAYPAT LPAREN . pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
constant -> LPAREN . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 135
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 142
-- On signed_constant shift to state 300
-- On pattern shift to state 301
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 298:
## Known stack suffix:
## val_ident
## LR(1) items:
simple_pattern -> val_ident . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production simple_pattern -> val_ident

State 299:
## Known stack suffix:
## simple_pattern
## LR(1) items:
pattern -> simple_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production pattern -> simple_pattern

State 300:
## Known stack suffix:
## signed_constant
## LR(1) items:
simple_bi_pattern -> signed_constant . [ RPAREN ]
simple_pattern -> signed_constant . [ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production simple_bi_pattern -> signed_constant
-- On COMMA COLONCOLON BARBAR AS
--   reduce production simple_pattern -> signed_constant

State 301:
## Known stack suffix:
## ARRAYPAT LPAREN pattern
## LR(1) items:
built_in_constr -> ARRAYPAT LPAREN pattern . COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COMMA shift to state 302
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:

State 302:
## Known stack suffix:
## ARRAYPAT LPAREN pattern COMMA
## LR(1) items:
built_in_constr -> ARRAYPAT LPAREN pattern COMMA . bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 303
## Reductions:

State 303:
## Known stack suffix:
## ARRAYPAT LPAREN pattern COMMA bi_pattern
## LR(1) items:
built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On RPAREN shift to state 304
## Reductions:

State 304:
## Known stack suffix:
## ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
## LR(1) items:
built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN

State 305:
## Known stack suffix:
## pattern COLONCOLON
## LR(1) items:
pattern -> pattern COLONCOLON . pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 307
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 306:
## Known stack suffix:
## signed_constant
## LR(1) items:
simple_pattern -> signed_constant . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production simple_pattern -> signed_constant

State 307:
## Known stack suffix:
## pattern COLONCOLON pattern
## LR(1) items:
pattern -> pattern . AS LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern COLONCOLON pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COLONCOLON shift to state 305
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA BARBAR AS
--   reduce production pattern -> pattern COLONCOLON pattern

State 308:
## Known stack suffix:
## constr_longident
## LR(1) items:
pattern -> constr_longident . pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
simple_pattern -> constr_longident . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 309
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production simple_pattern -> constr_longident

State 309:
## Known stack suffix:
## constr_longident pattern
## LR(1) items:
pattern -> constr_longident pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production pattern -> constr_longident pattern

State 310:
## Known stack suffix:
## built_in_constr
## LR(1) items:
pattern -> built_in_constr . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production pattern -> built_in_constr

State 311:
## Known stack suffix:
## pattern BARBAR
## LR(1) items:
pattern -> pattern BARBAR . pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 312
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 312:
## Known stack suffix:
## pattern BARBAR pattern
## LR(1) items:
pattern -> pattern . AS LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern BARBAR pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA AS
--   reduce production pattern -> pattern BARBAR pattern

State 313:
## Known stack suffix:
## pattern AS
## LR(1) items:
pattern -> pattern AS . LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On LIDENT shift to state 314
## Reductions:

State 314:
## Known stack suffix:
## pattern AS LIDENT
## LR(1) items:
pattern -> pattern AS LIDENT . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production pattern -> pattern AS LIDENT

State 315:
## Known stack suffix:
## ARRAYPAT bi_pattern
## LR(1) items:
built_in_constr -> ARRAYPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> ARRAYPAT bi_pattern

State 316:
## Known stack suffix:
## BOXPAT LPAREN pattern
## LR(1) items:
built_in_constr -> BOXPAT LPAREN pattern . COMMA pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COMMA shift to state 317
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:

State 317:
## Known stack suffix:
## BOXPAT LPAREN pattern COMMA
## LR(1) items:
built_in_constr -> BOXPAT LPAREN pattern COMMA . pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 318
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 318:
## Known stack suffix:
## BOXPAT LPAREN pattern COMMA pattern
## LR(1) items:
built_in_constr -> BOXPAT LPAREN pattern COMMA pattern . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ RPAREN COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ RPAREN COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ RPAREN COLONCOLON BARBAR AS ]
## Transitions:
-- On RPAREN shift to state 319
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:

State 319:
## Known stack suffix:
## BOXPAT LPAREN pattern COMMA pattern RPAREN
## LR(1) items:
built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN

State 320:
## Known stack suffix:
## BOXPAT bi_pattern
## LR(1) items:
built_in_constr -> BOXPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> BOXPAT bi_pattern

State 321:
## Known stack suffix:
## CARRAYPAT LPAREN pattern
## LR(1) items:
built_in_constr -> CARRAYPAT LPAREN pattern . COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COMMA shift to state 322
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:

State 322:
## Known stack suffix:
## CARRAYPAT LPAREN pattern COMMA
## LR(1) items:
built_in_constr -> CARRAYPAT LPAREN pattern COMMA . bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 323
## Reductions:

State 323:
## Known stack suffix:
## CARRAYPAT LPAREN pattern COMMA bi_pattern
## LR(1) items:
built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On RPAREN shift to state 324
## Reductions:

State 324:
## Known stack suffix:
## CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
## LR(1) items:
built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN

State 325:
## Known stack suffix:
## CARRAYPAT bi_pattern
## LR(1) items:
built_in_constr -> CARRAYPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> CARRAYPAT bi_pattern

State 326:
## Known stack suffix:
## FARRAYPAT LPAREN pattern
## LR(1) items:
built_in_constr -> FARRAYPAT LPAREN pattern . COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COMMA shift to state 327
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:

State 327:
## Known stack suffix:
## FARRAYPAT LPAREN pattern COMMA
## LR(1) items:
built_in_constr -> FARRAYPAT LPAREN pattern COMMA . bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 328
## Reductions:

State 328:
## Known stack suffix:
## FARRAYPAT LPAREN pattern COMMA bi_pattern
## LR(1) items:
built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On RPAREN shift to state 329
## Reductions:

State 329:
## Known stack suffix:
## FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
## LR(1) items:
built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN

State 330:
## Known stack suffix:
## FARRAYPAT bi_pattern
## LR(1) items:
built_in_constr -> FARRAYPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> FARRAYPAT bi_pattern

State 331:
## Known stack suffix:
## BOXPAT LPAREN pattern
## LR(1) items:
built_in_constr -> BOXPAT LPAREN pattern . COMMA pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COMMA shift to state 332
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:

State 332:
## Known stack suffix:
## BOXPAT LPAREN pattern COMMA
## LR(1) items:
built_in_constr -> BOXPAT LPAREN pattern COMMA . pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 333
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 333:
## Known stack suffix:
## BOXPAT LPAREN pattern COMMA pattern
## LR(1) items:
built_in_constr -> BOXPAT LPAREN pattern COMMA pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ RPAREN COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ RPAREN COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ RPAREN COLONCOLON BARBAR AS ]
## Transitions:
-- On RPAREN shift to state 334
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:

State 334:
## Known stack suffix:
## BOXPAT LPAREN pattern COMMA pattern RPAREN
## LR(1) items:
built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN

State 335:
## Known stack suffix:
## BOXPAT bi_pattern
## LR(1) items:
built_in_constr -> BOXPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> BOXPAT bi_pattern

State 336:
## Known stack suffix:
## ARRAYPAT
## LR(1) items:
built_in_constr -> ARRAYPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> ARRAYPAT . LPAREN pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 337
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 342
## Reductions:

State 337:
## Known stack suffix:
## ARRAYPAT LPAREN
## LR(1) items:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> ARRAYPAT LPAREN . pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
constant -> LPAREN . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 81
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 176
-- On signed_constant shift to state 300
-- On pattern shift to state 338
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 338:
## Known stack suffix:
## ARRAYPAT LPAREN pattern
## LR(1) items:
built_in_constr -> ARRAYPAT LPAREN pattern . COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COMMA shift to state 339
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:

State 339:
## Known stack suffix:
## ARRAYPAT LPAREN pattern COMMA
## LR(1) items:
built_in_constr -> ARRAYPAT LPAREN pattern COMMA . bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 340
## Reductions:

State 340:
## Known stack suffix:
## ARRAYPAT LPAREN pattern COMMA bi_pattern
## LR(1) items:
built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On RPAREN shift to state 341
## Reductions:

State 341:
## Known stack suffix:
## ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
## LR(1) items:
built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN

State 342:
## Known stack suffix:
## ARRAYPAT bi_pattern
## LR(1) items:
built_in_constr -> ARRAYPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> ARRAYPAT bi_pattern

State 343:
## Known stack suffix:
## AMPERREST
## LR(1) items:
pattern_comma_list_element -> AMPERREST . LIDENT [ error RPAREN RBRACK COMMA BAR ]
## Transitions:
-- On LIDENT shift to state 344
## Reductions:

State 344:
## Known stack suffix:
## AMPERREST LIDENT
## LR(1) items:
pattern_comma_list_element -> AMPERREST LIDENT . [ error RPAREN RBRACK COMMA BAR ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK COMMA BAR
--   reduce production pattern_comma_list_element -> AMPERREST LIDENT

State 345:
## Known stack suffix:
## val_ident
## LR(1) items:
simple_pattern -> val_ident . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> val_ident

State 346:
## Known stack suffix:
## simple_pattern
## LR(1) items:
pattern -> simple_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production pattern -> simple_pattern

State 347:
## Known stack suffix:
## signed_constant
## LR(1) items:
simple_pattern -> signed_constant . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> signed_constant

State 348:
## Known stack suffix:
## pattern_comma_list_element
## LR(1) items:
pattern_comma_list -> pattern_comma_list_element . [ error RPAREN RBRACK COMMA BAR ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK COMMA BAR
--   reduce production pattern_comma_list -> pattern_comma_list_element

State 349:
## Known stack suffix:
## pattern_comma_list
## LR(1) items:
list_pattern -> pattern_comma_list . COMMA DOTDOTDOT AS LIDENT [ error RBRACK ]
list_pattern -> pattern_comma_list . COMMA DOTDOTDOT [ error RBRACK ]
list_pattern -> pattern_comma_list . BAR pattern [ error RBRACK ]
list_pattern -> pattern_comma_list . opt_comma [ error RBRACK ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ error RBRACK COMMA BAR ]
## Transitions:
-- On COMMA shift to state 350
-- On BAR shift to state 365
-- On opt_comma shift to state 367
## Reductions:
-- On error RBRACK
--   reduce production opt_comma ->

State 350:
## Known stack suffix:
## pattern_comma_list COMMA
## LR(1) items:
list_pattern -> pattern_comma_list COMMA . DOTDOTDOT AS LIDENT [ error RBRACK ]
list_pattern -> pattern_comma_list COMMA . DOTDOTDOT [ error RBRACK ]
opt_comma -> COMMA . [ error RBRACK ]
pattern_comma_list -> pattern_comma_list COMMA . pattern_comma_list_element [ error RBRACK COMMA BAR ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOTDOTDOT shift to state 351
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 354
-- On pattern shift to state 355
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:
-- On error RBRACK
--   reduce production opt_comma -> COMMA

State 351:
## Known stack suffix:
## pattern_comma_list COMMA DOTDOTDOT
## LR(1) items:
list_pattern -> pattern_comma_list COMMA DOTDOTDOT . AS LIDENT [ error RPAREN RBRACK ]
list_pattern -> pattern_comma_list COMMA DOTDOTDOT . [ error RPAREN RBRACK ]
## Transitions:
-- On AS shift to state 352
## Reductions:
-- On error RPAREN RBRACK
--   reduce production list_pattern -> pattern_comma_list COMMA DOTDOTDOT

State 352:
## Known stack suffix:
## pattern_comma_list COMMA DOTDOTDOT AS
## LR(1) items:
list_pattern -> pattern_comma_list COMMA DOTDOTDOT AS . LIDENT [ error RPAREN RBRACK ]
## Transitions:
-- On LIDENT shift to state 353
## Reductions:

State 353:
## Known stack suffix:
## pattern_comma_list COMMA DOTDOTDOT AS LIDENT
## LR(1) items:
list_pattern -> pattern_comma_list COMMA DOTDOTDOT AS LIDENT . [ error RPAREN RBRACK ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK
--   reduce production list_pattern -> pattern_comma_list COMMA DOTDOTDOT AS LIDENT

State 354:
## Known stack suffix:
## pattern_comma_list COMMA pattern_comma_list_element
## LR(1) items:
pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element . [ error RPAREN RBRACK COMMA BAR ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK COMMA BAR
--   reduce production pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element

State 355:
## Known stack suffix:
## pattern
## LR(1) items:
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK COMMA COLONCOLON BARBAR BAR AS ]
pattern_comma_list_element -> pattern . [ error RPAREN RBRACK COMMA BAR ]
## Transitions:
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On AS shift to state 363
## Reductions:
-- On error RPAREN RBRACK COMMA BAR
--   reduce production pattern_comma_list_element -> pattern

State 356:
## Known stack suffix:
## pattern COLONCOLON
## LR(1) items:
pattern -> pattern COLONCOLON . pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 357
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:

State 357:
## Known stack suffix:
## pattern COLONCOLON pattern
## LR(1) items:
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern COLONCOLON pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 356
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA BARBAR BAR AS
--   reduce production pattern -> pattern COLONCOLON pattern

State 358:
## Known stack suffix:
## constr_longident
## LR(1) items:
pattern -> constr_longident . pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> constr_longident . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 359
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> constr_longident

State 359:
## Known stack suffix:
## constr_longident pattern
## LR(1) items:
pattern -> constr_longident pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production pattern -> constr_longident pattern

State 360:
## Known stack suffix:
## built_in_constr
## LR(1) items:
pattern -> built_in_constr . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production pattern -> built_in_constr

State 361:
## Known stack suffix:
## pattern BARBAR
## LR(1) items:
pattern -> pattern BARBAR . pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 362
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:

State 362:
## Known stack suffix:
## pattern BARBAR pattern
## LR(1) items:
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern BARBAR pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA BAR AS
--   reduce production pattern -> pattern BARBAR pattern

State 363:
## Known stack suffix:
## pattern AS
## LR(1) items:
pattern -> pattern AS . LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On LIDENT shift to state 364
## Reductions:

State 364:
## Known stack suffix:
## pattern AS LIDENT
## LR(1) items:
pattern -> pattern AS LIDENT . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production pattern -> pattern AS LIDENT

State 365:
## Known stack suffix:
## pattern_comma_list BAR
## LR(1) items:
list_pattern -> pattern_comma_list BAR . pattern [ error RPAREN RBRACK ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 366
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:

State 366:
## Known stack suffix:
## pattern_comma_list BAR pattern
## LR(1) items:
list_pattern -> pattern_comma_list BAR pattern . [ error RPAREN RBRACK ]
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK COLONCOLON BARBAR AS ]
## Transitions:
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On AS shift to state 363
## Reductions:
-- On error RPAREN RBRACK
--   reduce production list_pattern -> pattern_comma_list BAR pattern

State 367:
## Known stack suffix:
## pattern_comma_list opt_comma
## LR(1) items:
list_pattern -> pattern_comma_list opt_comma . [ error RPAREN RBRACK ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK
--   reduce production list_pattern -> pattern_comma_list opt_comma

State 368:
## Known stack suffix:
## LBRACK list_pattern
## LR(1) items:
simple_pattern -> LBRACK list_pattern . RBRACK [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LBRACK list_pattern . error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On error shift to state 369
-- On RBRACK shift to state 370
## Reductions:

State 369:
## Known stack suffix:
## LBRACK list_pattern error
## LR(1) items:
simple_pattern -> LBRACK list_pattern error . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production simple_pattern -> LBRACK list_pattern error

State 370:
## Known stack suffix:
## LBRACK list_pattern RBRACK
## LR(1) items:
simple_pattern -> LBRACK list_pattern RBRACK . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production simple_pattern -> LBRACK list_pattern RBRACK

State 371:
## Known stack suffix:
## LISTPAT pattern
## LR(1) items:
built_in_constr -> LISTPAT pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> LISTPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 372:
## Known stack suffix:
## CARRAYPAT LPAREN pattern
## LR(1) items:
built_in_constr -> CARRAYPAT LPAREN pattern . COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COMMA shift to state 373
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:

State 373:
## Known stack suffix:
## CARRAYPAT LPAREN pattern COMMA
## LR(1) items:
built_in_constr -> CARRAYPAT LPAREN pattern COMMA . bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 374
## Reductions:

State 374:
## Known stack suffix:
## CARRAYPAT LPAREN pattern COMMA bi_pattern
## LR(1) items:
built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On RPAREN shift to state 375
## Reductions:

State 375:
## Known stack suffix:
## CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
## LR(1) items:
built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN

State 376:
## Known stack suffix:
## CARRAYPAT bi_pattern
## LR(1) items:
built_in_constr -> CARRAYPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> CARRAYPAT bi_pattern

State 377:
## Known stack suffix:
## AMPEROPT
## LR(1) items:
param_tail -> AMPEROPT . option_pattern_list [ RPAREN ]
param_tail -> AMPEROPT . option_pattern_list COMMA AMPERKEY key_pattern [ RPAREN ]
## Transitions:
-- On LIDENT shift to state 378
-- On AMPERREST shift to state 643
-- On option_pattern_list_element shift to state 645
-- On option_pattern_list shift to state 646
## Reductions:

State 378:
## Known stack suffix:
## LIDENT
## LR(1) items:
option_pattern_list_element -> LIDENT . [ RPAREN COMMA ]
option_pattern_list_element -> LIDENT . EQ value_expr [ RPAREN COMMA ]
## Transitions:
-- On EQ shift to state 379
## Reductions:
-- On RPAREN COMMA
--   reduce production option_pattern_list_element -> LIDENT

State 379:
## Known stack suffix:
## LIDENT EQ
## LR(1) items:
option_pattern_list_element -> LIDENT EQ . value_expr [ RPAREN COMMA ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 641
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 642
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 380:
## Known stack suffix:
## LAZY
## LR(1) items:
value_expr -> LAZY . simple_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 383
-- On constr_longident shift to state 414
-- On constant shift to state 415
## Reductions:

State 381:
## Known stack suffix:
## val_longident
## LR(1) items:
simple_expr -> val_longident . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> val_longident

State 382:
## Known stack suffix:
## val_ident
## LR(1) items:
val_longident -> val_ident . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production val_longident -> val_ident

State 383:
## Known stack suffix:
## LAZY simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> LAZY simple_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On DOT shift to state 384
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> LAZY simple_expr

State 384:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
simple_expr -> simple_expr DOT . label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT . LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT . LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On UIDENT shift to state 213
-- On LIDENT shift to state 216
-- On LBRACK shift to state 385
-- On label_longident shift to state 640
## Reductions:

State 385:
## Known stack suffix:
## simple_expr DOT LBRACK
## LR(1) items:
simple_expr -> simple_expr DOT LBRACK . index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT LBRACK . index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 386
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOTDOT shift to state 482
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On index_list shift to state 638
-- On index shift to state 561
-- On expr shift to state 555
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 386:
## Known stack suffix:
## STAR
## LR(1) items:
index -> STAR . [ error RBRACK COMMA ]
## Transitions:
## Reductions:
-- On error RBRACK COMMA
--   reduce production index -> STAR

State 387:
## Known stack suffix:
## FUN
## LR(1) items:
value_expr -> FUN . simple_pattern fun_def [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 388
-- On signed_constant shift to state 306
-- On constr_longident shift to state 609
-- On constant shift to state 145
## Reductions:

State 388:
## Known stack suffix:
## FUN simple_pattern
## LR(1) items:
value_expr -> FUN simple_pattern . fun_def [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 389
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUSGREATER shift to state 632
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 634
-- On signed_constant shift to state 306
-- On match_action shift to state 635
-- On fun_def shift to state 637
-- On constr_longident shift to state 609
-- On constant shift to state 145
## Reductions:

State 389:
## Known stack suffix:
## WHEN
## LR(1) items:
match_action -> WHEN . expr MINUSGREATER seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 625
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 390:
## Known stack suffix:
## IF
## LR(1) items:
value_expr -> IF . expr THEN expr ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> IF . expr THEN expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 620
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 391:
## Known stack suffix:
## FUNCTION
## LR(1) items:
value_expr -> FUNCTION . opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On BAR shift to state 125
-- On opt_bar shift to state 392
## Reductions:
-- On WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CARRAYPAT BOXPAT ARRAYPAT AMPERREST
--   reduce production opt_bar ->

State 392:
## Known stack suffix:
## FUNCTION opt_bar
## LR(1) items:
value_expr -> FUNCTION opt_bar . match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 396
-- On pattern shift to state 399
-- On match_cases shift to state 615
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 393:
## Known stack suffix:
## AMPERREST
## LR(1) items:
pattern_comma_list_element -> AMPERREST . LIDENT [ WHEN MINUSGREATER EQ COMMA ]
## Transitions:
-- On LIDENT shift to state 394
## Reductions:

State 394:
## Known stack suffix:
## AMPERREST LIDENT
## LR(1) items:
pattern_comma_list_element -> AMPERREST LIDENT . [ WHEN MINUSGREATER EQ COMMA ]
## Transitions:
## Reductions:
-- On WHEN MINUSGREATER EQ COMMA
--   reduce production pattern_comma_list_element -> AMPERREST LIDENT

State 395:
## Known stack suffix:
## pattern_comma_list_element
## LR(1) items:
pattern_comma_list -> pattern_comma_list_element . [ WHEN MINUSGREATER EQ COMMA ]
## Transitions:
## Reductions:
-- On WHEN MINUSGREATER EQ COMMA
--   reduce production pattern_comma_list -> pattern_comma_list_element

State 396:
## Known stack suffix:
## pattern_comma_list
## LR(1) items:
match_cases -> pattern_comma_list . opt_comma match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ WHEN MINUSGREATER COMMA ]
## Transitions:
-- On COMMA shift to state 397
-- On opt_comma shift to state 400
## Reductions:
-- On WHEN MINUSGREATER
--   reduce production opt_comma ->

State 397:
## Known stack suffix:
## pattern_comma_list COMMA
## LR(1) items:
opt_comma -> COMMA . [ WHEN MINUSGREATER ]
pattern_comma_list -> pattern_comma_list COMMA . pattern_comma_list_element [ WHEN MINUSGREATER COMMA ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 398
-- On pattern shift to state 399
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:
-- On WHEN MINUSGREATER
--   reduce production opt_comma -> COMMA

State 398:
## Known stack suffix:
## pattern_comma_list COMMA pattern_comma_list_element
## LR(1) items:
pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element . [ WHEN MINUSGREATER EQ COMMA ]
## Transitions:
## Reductions:
-- On WHEN MINUSGREATER EQ COMMA
--   reduce production pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element

State 399:
## Known stack suffix:
## pattern
## LR(1) items:
pattern -> pattern . AS LIDENT [ WHEN MINUSGREATER EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN MINUSGREATER EQ COMMA COLONCOLON BARBAR AS ]
pattern_comma_list_element -> pattern . [ WHEN MINUSGREATER EQ COMMA ]
## Transitions:
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:
-- On WHEN MINUSGREATER EQ COMMA
--   reduce production pattern_comma_list_element -> pattern

State 400:
## Known stack suffix:
## pattern_comma_list opt_comma
## LR(1) items:
match_cases -> pattern_comma_list opt_comma . match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHEN shift to state 401
-- On MINUSGREATER shift to state 404
-- On match_action shift to state 614
## Reductions:

State 401:
## Known stack suffix:
## WHEN
## LR(1) items:
match_action -> WHEN . expr MINUSGREATER seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 611
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 402:
## Known stack suffix:
## FUN
## LR(1) items:
value_expr -> FUN . simple_pattern fun_def [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 403
-- On signed_constant shift to state 306
-- On constr_longident shift to state 609
-- On constant shift to state 145
## Reductions:

State 403:
## Known stack suffix:
## FUN simple_pattern
## LR(1) items:
value_expr -> FUN simple_pattern . fun_def [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHEN shift to state 401
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUSGREATER shift to state 404
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 606
-- On signed_constant shift to state 306
-- On match_action shift to state 607
-- On fun_def shift to state 610
-- On constr_longident shift to state 609
-- On constant shift to state 145
## Reductions:

State 404:
## Known stack suffix:
## MINUSGREATER
## LR(1) items:
match_action -> MINUSGREATER . seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 605
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 405:
## Known stack suffix:
## FOR
## LR(1) items:
no_value_expr -> FOR . LIDENT EQ expr direction_flag expr DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On LIDENT shift to state 406
## Reductions:

State 406:
## Known stack suffix:
## FOR LIDENT
## LR(1) items:
no_value_expr -> FOR LIDENT . EQ expr direction_flag expr DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On EQ shift to state 407
## Reductions:

State 407:
## Known stack suffix:
## FOR LIDENT EQ
## LR(1) items:
no_value_expr -> FOR LIDENT EQ . expr direction_flag expr DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 599
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 408:
## Known stack suffix:
## CASE
## LR(1) items:
value_expr -> CASE . opt_bar case_list [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On BAR shift to state 125
-- On opt_bar shift to state 409
## Reductions:
-- On WHILE WHERE UNDERSCORE UIDENT TRY STRING SHARP RAISE PREFIXOP PLUS MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production opt_bar ->

State 409:
## Known stack suffix:
## CASE opt_bar
## LR(1) items:
value_expr -> CASE opt_bar . case_list [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UNDERSCORE shift to state 410
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On simple_case shift to state 592
-- On no_value_expr shift to state 423
-- On expr shift to state 593
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On case_list shift to state 596
## Reductions:

State 410:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_case -> UNDERSCORE . MINUSGREATER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On MINUSGREATER shift to state 411
## Reductions:

State 411:
## Known stack suffix:
## UNDERSCORE MINUSGREATER
## LR(1) items:
simple_case -> UNDERSCORE MINUSGREATER . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 591
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 412:
## Known stack suffix:
## ASSERT
## LR(1) items:
no_value_expr -> ASSERT . simple_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 413
-- On constr_longident shift to state 414
-- On constant shift to state 415
## Reductions:

State 413:
## Known stack suffix:
## ASSERT simple_expr
## LR(1) items:
no_value_expr -> ASSERT simple_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On DOT shift to state 384
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production no_value_expr -> ASSERT simple_expr

State 414:
## Known stack suffix:
## constr_longident
## LR(1) items:
simple_expr -> constr_longident . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> constr_longident

State 415:
## Known stack suffix:
## constant
## LR(1) items:
simple_expr -> constant . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> constant

State 416:
## Known stack suffix:
## value_expr
## LR(1) items:
expr -> value_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production expr -> value_expr

State 417:
## Known stack suffix:
## simple_expr
## LR(1) items:
no_value_expr -> simple_expr . DOT label_longident LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> simple_expr . DOT LBRACK index_list RBRACK LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> simple_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> simple_expr . simple_expr_list [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOT shift to state 418
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr_list shift to state 588
-- On simple_expr shift to state 590
-- On constr_longident shift to state 414
-- On constant shift to state 415
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> simple_expr
** Conflict on UIDENT STRING SHARP PREFIXOP LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT DOLLAR CHAR BEGIN

State 418:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
no_value_expr -> simple_expr DOT . label_longident LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> simple_expr DOT . LBRACK index_list RBRACK LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT . label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT . LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT . LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On UIDENT shift to state 213
-- On LIDENT shift to state 216
-- On LBRACK shift to state 419
-- On label_longident shift to state 585
## Reductions:

State 419:
## Known stack suffix:
## simple_expr DOT LBRACK
## LR(1) items:
no_value_expr -> simple_expr DOT LBRACK . index_list RBRACK LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT LBRACK . index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT LBRACK . index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 386
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOTDOT shift to state 482
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On index_list shift to state 580
-- On index shift to state 561
-- On expr shift to state 555
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 420:
## Known stack suffix:
## FOR
## LR(1) items:
no_value_expr -> FOR . LIDENT EQ expr direction_flag expr DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 421
## Reductions:

State 421:
## Known stack suffix:
## FOR LIDENT
## LR(1) items:
no_value_expr -> FOR LIDENT . EQ expr direction_flag expr DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On EQ shift to state 422
## Reductions:

State 422:
## Known stack suffix:
## FOR LIDENT EQ
## LR(1) items:
no_value_expr -> FOR LIDENT EQ . expr direction_flag expr DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 424
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 423:
## Known stack suffix:
## no_value_expr
## LR(1) items:
expr -> no_value_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production expr -> no_value_expr

State 424:
## Known stack suffix:
## FOR LIDENT EQ expr
## LR(1) items:
no_value_expr -> FOR LIDENT EQ expr . direction_flag expr DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On TO shift to state 469
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On DOWNTO shift to state 470
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BELOW shift to state 471
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On ABOVE shift to state 472
-- On direction_flag shift to state 473
## Reductions:

State 425:
## Known stack suffix:
## expr WHERE
## LR(1) items:
value_expr -> expr WHERE . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 426
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 426:
## Known stack suffix:
## expr WHERE expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr WHERE expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLON CHAR CASE BELOW BEGIN BAR ASSERT AND ABOVE
--   reduce production value_expr -> expr WHERE expr
** Conflict on WHERE

State 427:
## Known stack suffix:
## expr STAR
## LR(1) items:
value_expr -> expr STAR . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 428
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 428:
## Known stack suffix:
## expr STAR expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr STAR expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr STAR expr
** Conflict on WHERE

State 429:
## Known stack suffix:
## expr INFIXOP5R
## LR(1) items:
value_expr -> expr INFIXOP5R . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 430
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 430:
## Known stack suffix:
## expr INFIXOP5R expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP5R expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On INFIXOP5R shift to state 429
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr INFIXOP5R expr
** Conflict on WHERE

State 431:
## Known stack suffix:
## constr_longident
## LR(1) items:
simple_expr -> constr_longident . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> constr_longident . simple_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 432
-- On constr_longident shift to state 414
-- On constant shift to state 415
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> constr_longident
** Conflict on UIDENT STRING SHARP PREFIXOP LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT DOLLAR CHAR BEGIN

State 432:
## Known stack suffix:
## constr_longident simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> constr_longident simple_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On DOT shift to state 384
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> constr_longident simple_expr

State 433:
## Known stack suffix:
## expr INFIXOP5L
## LR(1) items:
value_expr -> expr INFIXOP5L . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 434
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 434:
## Known stack suffix:
## expr INFIXOP5L expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP5L expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On INFIXOP5R shift to state 429
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr INFIXOP5L expr
** Conflict on WHERE

State 435:
## Known stack suffix:
## expr INFIXOP4R
## LR(1) items:
value_expr -> expr INFIXOP4R . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 436
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 436:
## Known stack suffix:
## expr INFIXOP4R expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP4R expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr INFIXOP4R expr
** Conflict on WHERE

State 437:
## Known stack suffix:
## expr QUESTION
## LR(1) items:
value_expr -> expr QUESTION . expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 438
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 438:
## Known stack suffix:
## expr QUESTION expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr QUESTION expr . COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On COLON shift to state 467
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 439:
## Known stack suffix:
## expr PLUS
## LR(1) items:
value_expr -> expr PLUS . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 440
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 440:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr PLUS expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr PLUS expr
** Conflict on WHERE

State 441:
## Known stack suffix:
## expr INFIXOP4L
## LR(1) items:
value_expr -> expr INFIXOP4L . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 442
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 442:
## Known stack suffix:
## expr INFIXOP4L expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP4L expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr INFIXOP4L expr
** Conflict on WHERE

State 443:
## Known stack suffix:
## expr INFIXOP3R
## LR(1) items:
value_expr -> expr INFIXOP3R . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 444
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 444:
## Known stack suffix:
## expr INFIXOP3R expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP3R expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr INFIXOP3R expr
** Conflict on WHERE

State 445:
## Known stack suffix:
## expr MINUS
## LR(1) items:
value_expr -> expr MINUS . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 446
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 446:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr MINUS expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr MINUS expr
** Conflict on WHERE

State 447:
## Known stack suffix:
## expr INFIXOP3L
## LR(1) items:
value_expr -> expr INFIXOP3L . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 448
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 448:
## Known stack suffix:
## expr INFIXOP3L expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP3L expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr INFIXOP3L expr
** Conflict on WHERE

State 449:
## Known stack suffix:
## expr INFIXOP2R
## LR(1) items:
value_expr -> expr INFIXOP2R . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 450
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 450:
## Known stack suffix:
## expr INFIXOP2R expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP2R expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On COLONCOLON shift to state 451
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr INFIXOP2R expr
** Conflict on WHERE

State 451:
## Known stack suffix:
## expr COLONCOLON
## LR(1) items:
value_expr -> expr COLONCOLON . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 452
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 452:
## Known stack suffix:
## expr COLONCOLON expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr COLONCOLON expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On COLONCOLON shift to state 451
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr COLONCOLON expr
** Conflict on WHERE

State 453:
## Known stack suffix:
## expr INFIXOP2L
## LR(1) items:
value_expr -> expr INFIXOP2L . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 454
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 454:
## Known stack suffix:
## expr INFIXOP2L expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP2L expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On COLONCOLON shift to state 451
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr INFIXOP2L expr
** Conflict on WHERE

State 455:
## Known stack suffix:
## expr INFIXOP1R
## LR(1) items:
value_expr -> expr INFIXOP1R . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 456
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 456:
## Known stack suffix:
## expr INFIXOP1R expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP1R expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On COLONCOLON shift to state 451
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr INFIXOP1R expr
** Conflict on WHERE

State 457:
## Known stack suffix:
## expr INFIXOP1L
## LR(1) items:
value_expr -> expr INFIXOP1L . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 458
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 458:
## Known stack suffix:
## expr INFIXOP1L expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP1L expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On COLONCOLON shift to state 451
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr INFIXOP1L expr
** Conflict on WHERE

State 459:
## Known stack suffix:
## expr EQ
## LR(1) items:
value_expr -> expr EQ . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 460
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 460:
## Known stack suffix:
## expr EQ expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr EQ expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On COLONCOLON shift to state 451
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr EQ expr
** Conflict on WHERE

State 461:
## Known stack suffix:
## expr COLONEQUAL
## LR(1) items:
no_value_expr -> expr COLONEQUAL . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 462
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 462:
## Known stack suffix:
## expr COLONEQUAL expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr COLONEQUAL expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLON CHAR CASE BELOW BEGIN BAR ASSERT AND ABOVE
--   reduce production no_value_expr -> expr COLONEQUAL expr
** Conflict on WHERE

State 463:
## Known stack suffix:
## expr BARBAR
## LR(1) items:
value_expr -> expr BARBAR . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 464
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 464:
## Known stack suffix:
## expr BARBAR expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr BARBAR expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLON CHAR CASE BELOW BEGIN BAR ASSERT AND ABOVE
--   reduce production value_expr -> expr BARBAR expr
** Conflict on WHERE

State 465:
## Known stack suffix:
## expr AMPERAMPER
## LR(1) items:
value_expr -> expr AMPERAMPER . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 466
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 466:
## Known stack suffix:
## expr AMPERAMPER expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr AMPERAMPER expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONCOLON shift to state 451
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND ABOVE
--   reduce production value_expr -> expr AMPERAMPER expr
** Conflict on WHERE

State 467:
## Known stack suffix:
## expr QUESTION expr COLON
## LR(1) items:
value_expr -> expr QUESTION expr COLON . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 468
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 468:
## Known stack suffix:
## expr QUESTION expr COLON expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr QUESTION expr COLON expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> expr QUESTION expr COLON expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 469:
## Known stack suffix:
## TO
## LR(1) items:
direction_flag -> TO . [ WHILE WHERE UIDENT TRY STRING SHARP RAISE PREFIXOP PLUS MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TRY STRING SHARP RAISE PREFIXOP PLUS MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production direction_flag -> TO

State 470:
## Known stack suffix:
## DOWNTO
## LR(1) items:
direction_flag -> DOWNTO . [ WHILE WHERE UIDENT TRY STRING SHARP RAISE PREFIXOP PLUS MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TRY STRING SHARP RAISE PREFIXOP PLUS MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production direction_flag -> DOWNTO

State 471:
## Known stack suffix:
## BELOW
## LR(1) items:
direction_flag -> BELOW . [ WHILE WHERE UIDENT TRY STRING SHARP RAISE PREFIXOP PLUS MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TRY STRING SHARP RAISE PREFIXOP PLUS MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production direction_flag -> BELOW

State 472:
## Known stack suffix:
## ABOVE
## LR(1) items:
direction_flag -> ABOVE . [ WHILE WHERE UIDENT TRY STRING SHARP RAISE PREFIXOP PLUS MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TRY STRING SHARP RAISE PREFIXOP PLUS MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production direction_flag -> ABOVE

State 473:
## Known stack suffix:
## FOR LIDENT EQ expr direction_flag
## LR(1) items:
no_value_expr -> FOR LIDENT EQ expr direction_flag . expr DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 474
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 474:
## Known stack suffix:
## FOR LIDENT EQ expr direction_flag expr
## LR(1) items:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr . DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On DO shift to state 475
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 475:
## Known stack suffix:
## FOR LIDENT EQ expr direction_flag expr DO
## LR(1) items:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO . seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 476
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 476:
## Known stack suffix:
## FOR LIDENT EQ expr direction_flag expr DO seq_expr
## LR(1) items:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr . DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On DONE shift to state 477
## Reductions:

State 477:
## Known stack suffix:
## FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
## LR(1) items:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE

State 478:
## Known stack suffix:
## expr
## LR(1) items:
basic_seq_expr -> expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production basic_seq_expr -> expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 479:
## Known stack suffix:
## basic_seq_expr
## LR(1) items:
basic_seq_expr -> basic_seq_expr . SEMI expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
basic_seq_expr -> basic_seq_expr . SEMI [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
seq_expr -> basic_seq_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On SEMI shift to state 480
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production seq_expr -> basic_seq_expr
** Conflict on SEMI

State 480:
## Known stack suffix:
## basic_seq_expr SEMI
## LR(1) items:
basic_seq_expr -> basic_seq_expr SEMI . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
basic_seq_expr -> basic_seq_expr SEMI . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 481
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production basic_seq_expr -> basic_seq_expr SEMI
** Conflict on WHILE WHERE UIDENT TRY STRING SHARP RAISE MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT

State 481:
## Known stack suffix:
## basic_seq_expr SEMI expr
## LR(1) items:
basic_seq_expr -> basic_seq_expr SEMI expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLON CHAR CASE BELOW BEGIN BAR ASSERT AND ABOVE
--   reduce production basic_seq_expr -> basic_seq_expr SEMI expr
** Conflict on WHERE

State 482:
## Known stack suffix:
## DOTDOT
## LR(1) items:
index -> DOTDOT . [ error RBRACK COMMA ]
index -> DOTDOT . expr [ error RBRACK COMMA ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 579
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:
-- On error RBRACK COMMA
--   reduce production index -> DOTDOT

State 483:
## Known stack suffix:
## CASE
## LR(1) items:
value_expr -> CASE . opt_bar case_list [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On BAR shift to state 125
-- On opt_bar shift to state 484
## Reductions:
-- On WHILE WHERE UNDERSCORE UIDENT TRY STRING SHARP RAISE PREFIXOP PLUS MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production opt_bar ->

State 484:
## Known stack suffix:
## CASE opt_bar
## LR(1) items:
value_expr -> CASE opt_bar . case_list [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UNDERSCORE shift to state 485
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On simple_case shift to state 572
-- On no_value_expr shift to state 423
-- On expr shift to state 573
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On case_list shift to state 576
## Reductions:

State 485:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_case -> UNDERSCORE . MINUSGREATER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 486
## Reductions:

State 486:
## Known stack suffix:
## UNDERSCORE MINUSGREATER
## LR(1) items:
simple_case -> UNDERSCORE MINUSGREATER . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 571
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 487:
## Known stack suffix:
## ASSERT
## LR(1) items:
no_value_expr -> ASSERT . simple_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 46
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On PREFIXOP shift to state 63
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On BEGIN shift to state 111
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 490
-- On constr_longident shift to state 515
-- On constant shift to state 516
## Reductions:

State 488:
## Known stack suffix:
## val_longident
## LR(1) items:
simple_expr -> val_longident . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> val_longident

State 489:
## Known stack suffix:
## val_ident
## LR(1) items:
val_longident -> val_ident . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production val_longident -> val_ident

State 490:
## Known stack suffix:
## ASSERT simple_expr
## LR(1) items:
no_value_expr -> ASSERT simple_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On DOT shift to state 491
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production no_value_expr -> ASSERT simple_expr

State 491:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
simple_expr -> simple_expr DOT . label_longident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACK index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACK index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 492
-- On LIDENT shift to state 495
-- On LBRACK shift to state 496
-- On label_longident shift to state 570
## Reductions:

State 492:
## Known stack suffix:
## UIDENT
## LR(1) items:
label_longident -> UIDENT . DOT LIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUSGREATER MINUS LVECTOR LPAREN LMATRIX LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On DOT shift to state 493
## Reductions:

State 493:
## Known stack suffix:
## UIDENT DOT
## LR(1) items:
label_longident -> UIDENT DOT . LIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUSGREATER MINUS LVECTOR LPAREN LMATRIX LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 494
## Reductions:

State 494:
## Known stack suffix:
## UIDENT DOT LIDENT
## LR(1) items:
label_longident -> UIDENT DOT LIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUSGREATER MINUS LVECTOR LPAREN LMATRIX LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUSGREATER MINUS LVECTOR LPAREN LMATRIX LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production label_longident -> UIDENT DOT LIDENT

State 495:
## Known stack suffix:
## LIDENT
## LR(1) items:
label_longident -> LIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUSGREATER MINUS LVECTOR LPAREN LMATRIX LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUSGREATER MINUS LVECTOR LPAREN LMATRIX LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production label_longident -> LIDENT

State 496:
## Known stack suffix:
## simple_expr DOT LBRACK
## LR(1) items:
simple_expr -> simple_expr DOT LBRACK . index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACK . index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 386
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOTDOT shift to state 482
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On index_list shift to state 568
-- On index shift to state 561
-- On expr shift to state 555
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 497:
## Known stack suffix:
## value_expr
## LR(1) items:
expr -> value_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production expr -> value_expr

State 498:
## Known stack suffix:
## simple_expr
## LR(1) items:
no_value_expr -> simple_expr . DOT label_longident LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> simple_expr . DOT LBRACK index_list RBRACK LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> simple_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> simple_expr . simple_expr_list [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 46
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On PREFIXOP shift to state 63
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOT shift to state 499
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On BEGIN shift to state 111
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr_list shift to state 565
-- On simple_expr shift to state 567
-- On constr_longident shift to state 515
-- On constant shift to state 516
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> simple_expr

State 499:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
no_value_expr -> simple_expr DOT . label_longident LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> simple_expr DOT . LBRACK index_list RBRACK LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT . label_longident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACK index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACK index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 492
-- On LIDENT shift to state 495
-- On LBRACK shift to state 500
-- On label_longident shift to state 562
## Reductions:

State 500:
## Known stack suffix:
## simple_expr DOT LBRACK
## LR(1) items:
no_value_expr -> simple_expr DOT LBRACK . index_list RBRACK LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACK . index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACK . index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 386
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOTDOT shift to state 482
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On index_list shift to state 502
-- On index shift to state 561
-- On expr shift to state 555
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 501:
## Known stack suffix:
## no_value_expr
## LR(1) items:
expr -> no_value_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production expr -> no_value_expr

State 502:
## Known stack suffix:
## simple_expr DOT LBRACK index_list
## LR(1) items:
index_list -> index_list . COMMA index [ error RBRACK COMMA ]
no_value_expr -> simple_expr DOT LBRACK index_list . RBRACK LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACK index_list . RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACK index_list . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On error shift to state 503
-- On RBRACK shift to state 504
-- On COMMA shift to state 553
## Reductions:

State 503:
## Known stack suffix:
## simple_expr DOT LBRACK index_list error
## LR(1) items:
simple_expr -> simple_expr DOT LBRACK index_list error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LBRACK index_list error

State 504:
## Known stack suffix:
## simple_expr DOT LBRACK index_list RBRACK
## LR(1) items:
no_value_expr -> simple_expr DOT LBRACK index_list RBRACK . LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACK index_list RBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 505
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK

State 505:
## Known stack suffix:
## simple_expr DOT LBRACK index_list RBRACK LESSMINUS
## LR(1) items:
no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 506
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 506:
## Known stack suffix:
## simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
## LR(1) items:
no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE END ELSE DOTDOT COMMA COLON BARRBRACK BARCOLON BAR
--   reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
** Conflict on WHERE

State 507:
## Known stack suffix:
## expr WHERE
## LR(1) items:
value_expr -> expr WHERE . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 508
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 508:
## Known stack suffix:
## expr WHERE expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr WHERE expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE END ELSE DOTDOT COMMA COLON BARRBRACK BARCOLON BAR
--   reduce production value_expr -> expr WHERE expr
** Conflict on WHERE

State 509:
## Known stack suffix:
## expr STAR
## LR(1) items:
value_expr -> expr STAR . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 510
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 510:
## Known stack suffix:
## expr STAR expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr STAR expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr STAR expr
** Conflict on WHERE

State 511:
## Known stack suffix:
## expr INFIXOP5R
## LR(1) items:
value_expr -> expr INFIXOP5R . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 512
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 512:
## Known stack suffix:
## expr INFIXOP5R expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP5R expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On INFIXOP5R shift to state 511
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr INFIXOP5R expr
** Conflict on WHERE

State 513:
## Known stack suffix:
## constr_longident
## LR(1) items:
simple_expr -> constr_longident . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> constr_longident . simple_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 46
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On PREFIXOP shift to state 63
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On BEGIN shift to state 111
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 514
-- On constr_longident shift to state 515
-- On constant shift to state 516
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> constr_longident
** Conflict on UIDENT STRING SHARP PREFIXOP LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT DOLLAR CHAR BEGIN

State 514:
## Known stack suffix:
## constr_longident simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> constr_longident simple_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On DOT shift to state 491
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> constr_longident simple_expr

State 515:
## Known stack suffix:
## constr_longident
## LR(1) items:
simple_expr -> constr_longident . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> constr_longident

State 516:
## Known stack suffix:
## constant
## LR(1) items:
simple_expr -> constant . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> constant

State 517:
## Known stack suffix:
## expr INFIXOP5L
## LR(1) items:
value_expr -> expr INFIXOP5L . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 518
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 518:
## Known stack suffix:
## expr INFIXOP5L expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP5L expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On INFIXOP5R shift to state 511
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr INFIXOP5L expr
** Conflict on WHERE

State 519:
## Known stack suffix:
## expr INFIXOP4R
## LR(1) items:
value_expr -> expr INFIXOP4R . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 520
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 520:
## Known stack suffix:
## expr INFIXOP4R expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP4R expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr INFIXOP4R expr
** Conflict on WHERE

State 521:
## Known stack suffix:
## expr QUESTION
## LR(1) items:
value_expr -> expr QUESTION . expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 522
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 522:
## Known stack suffix:
## expr QUESTION expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr QUESTION expr . COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On COLON shift to state 523
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 523:
## Known stack suffix:
## expr QUESTION expr COLON
## LR(1) items:
value_expr -> expr QUESTION expr COLON . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 524
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 524:
## Known stack suffix:
## expr QUESTION expr COLON expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr QUESTION expr COLON expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr QUESTION expr COLON expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 525:
## Known stack suffix:
## expr PLUS
## LR(1) items:
value_expr -> expr PLUS . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 526
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 526:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr PLUS expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr PLUS expr
** Conflict on WHERE

State 527:
## Known stack suffix:
## expr INFIXOP4L
## LR(1) items:
value_expr -> expr INFIXOP4L . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 528
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 528:
## Known stack suffix:
## expr INFIXOP4L expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP4L expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr INFIXOP4L expr
** Conflict on WHERE

State 529:
## Known stack suffix:
## expr INFIXOP3R
## LR(1) items:
value_expr -> expr INFIXOP3R . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 530
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 530:
## Known stack suffix:
## expr INFIXOP3R expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP3R expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr INFIXOP3R expr
** Conflict on WHERE

State 531:
## Known stack suffix:
## expr MINUS
## LR(1) items:
value_expr -> expr MINUS . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 532
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 532:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr MINUS expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr MINUS expr
** Conflict on WHERE

State 533:
## Known stack suffix:
## expr INFIXOP3L
## LR(1) items:
value_expr -> expr INFIXOP3L . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 534
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 534:
## Known stack suffix:
## expr INFIXOP3L expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP3L expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr INFIXOP3L expr
** Conflict on WHERE

State 535:
## Known stack suffix:
## expr INFIXOP2R
## LR(1) items:
value_expr -> expr INFIXOP2R . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 536
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 536:
## Known stack suffix:
## expr INFIXOP2R expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP2R expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On COLONCOLON shift to state 537
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE QUESTION INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr INFIXOP2R expr
** Conflict on WHERE

State 537:
## Known stack suffix:
## expr COLONCOLON
## LR(1) items:
value_expr -> expr COLONCOLON . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 538
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 538:
## Known stack suffix:
## expr COLONCOLON expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr COLONCOLON expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On COLONCOLON shift to state 537
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE QUESTION INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr COLONCOLON expr
** Conflict on WHERE

State 539:
## Known stack suffix:
## expr INFIXOP2L
## LR(1) items:
value_expr -> expr INFIXOP2L . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 540
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 540:
## Known stack suffix:
## expr INFIXOP2L expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP2L expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On COLONCOLON shift to state 537
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE QUESTION INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr INFIXOP2L expr
** Conflict on WHERE

State 541:
## Known stack suffix:
## expr INFIXOP1R
## LR(1) items:
value_expr -> expr INFIXOP1R . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 542
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 542:
## Known stack suffix:
## expr INFIXOP1R expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP1R expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On COLONCOLON shift to state 537
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE QUESTION INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr INFIXOP1R expr
** Conflict on WHERE

State 543:
## Known stack suffix:
## expr INFIXOP1L
## LR(1) items:
value_expr -> expr INFIXOP1L . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 544
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 544:
## Known stack suffix:
## expr INFIXOP1L expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP1L expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On COLONCOLON shift to state 537
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE QUESTION INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr INFIXOP1L expr
** Conflict on WHERE

State 545:
## Known stack suffix:
## expr EQ
## LR(1) items:
value_expr -> expr EQ . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 546
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 546:
## Known stack suffix:
## expr EQ expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr EQ expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On COLONCOLON shift to state 537
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE QUESTION INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> expr EQ expr
** Conflict on WHERE

State 547:
## Known stack suffix:
## expr COLONEQUAL
## LR(1) items:
no_value_expr -> expr COLONEQUAL . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 548
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 548:
## Known stack suffix:
## expr COLONEQUAL expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr COLONEQUAL expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE END ELSE DOTDOT COMMA COLON BARRBRACK BARCOLON BAR
--   reduce production no_value_expr -> expr COLONEQUAL expr
** Conflict on WHERE

State 549:
## Known stack suffix:
## expr BARBAR
## LR(1) items:
value_expr -> expr BARBAR . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 550
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 550:
## Known stack suffix:
## expr BARBAR expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr BARBAR expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE QUESTION END ELSE DOTDOT COMMA COLONEQUAL COLON BARRBRACK BARCOLON BAR
--   reduce production value_expr -> expr BARBAR expr
** Conflict on WHERE

State 551:
## Known stack suffix:
## expr AMPERAMPER
## LR(1) items:
value_expr -> expr AMPERAMPER . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 552
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 552:
## Known stack suffix:
## expr AMPERAMPER expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr AMPERAMPER expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONCOLON shift to state 537
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE QUESTION END ELSE DOTDOT COMMA COLONEQUAL COLON BARRBRACK BARCOLON BARBAR BAR
--   reduce production value_expr -> expr AMPERAMPER expr
** Conflict on WHERE

State 553:
## Known stack suffix:
## index_list COMMA
## LR(1) items:
index_list -> index_list COMMA . index [ error RBRACK COMMA ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 386
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOTDOT shift to state 482
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On index shift to state 554
-- On expr shift to state 555
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 554:
## Known stack suffix:
## index_list COMMA index
## LR(1) items:
index_list -> index_list COMMA index . [ error RBRACK COMMA ]
## Transitions:
## Reductions:
-- On error RBRACK COMMA
--   reduce production index_list -> index_list COMMA index

State 555:
## Known stack suffix:
## expr
## LR(1) items:
index -> expr . [ error RBRACK COMMA ]
index -> expr . COLON expr [ error RBRACK COMMA ]
index -> expr . COLON STAR [ error RBRACK COMMA ]
index -> expr . DOTDOT expr [ error RBRACK COMMA ]
index -> expr . DOTDOT [ error RBRACK COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On DOTDOT shift to state 556
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On COLON shift to state 558
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error RBRACK COMMA
--   reduce production index -> expr

State 556:
## Known stack suffix:
## expr DOTDOT
## LR(1) items:
index -> expr DOTDOT . expr [ error RBRACK COMMA ]
index -> expr DOTDOT . [ error RBRACK COMMA ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 557
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:
-- On error RBRACK COMMA
--   reduce production index -> expr DOTDOT

State 557:
## Known stack suffix:
## expr DOTDOT expr
## LR(1) items:
index -> expr DOTDOT expr . [ error RBRACK COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error RBRACK COMMA
--   reduce production index -> expr DOTDOT expr

State 558:
## Known stack suffix:
## expr COLON
## LR(1) items:
index -> expr COLON . expr [ error RBRACK COMMA ]
index -> expr COLON . STAR [ error RBRACK COMMA ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 559
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 560
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 559:
## Known stack suffix:
## expr COLON STAR
## LR(1) items:
index -> expr COLON STAR . [ error RBRACK COMMA ]
## Transitions:
## Reductions:
-- On error RBRACK COMMA
--   reduce production index -> expr COLON STAR

State 560:
## Known stack suffix:
## expr COLON expr
## LR(1) items:
index -> expr COLON expr . [ error RBRACK COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error RBRACK COMMA
--   reduce production index -> expr COLON expr

State 561:
## Known stack suffix:
## index
## LR(1) items:
index_list -> index . [ error RBRACK COMMA ]
## Transitions:
## Reductions:
-- On error RBRACK COMMA
--   reduce production index_list -> index

State 562:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
no_value_expr -> simple_expr DOT label_longident . LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT label_longident . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 563
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT label_longident

State 563:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS
## LR(1) items:
no_value_expr -> simple_expr DOT label_longident LESSMINUS . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 564
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 564:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS expr
## LR(1) items:
no_value_expr -> simple_expr DOT label_longident LESSMINUS expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE END ELSE DOTDOT COMMA COLON BARRBRACK BARCOLON BAR
--   reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
** Conflict on WHERE

State 565:
## Known stack suffix:
## simple_expr simple_expr_list
## LR(1) items:
simple_expr_list -> simple_expr_list . simple_expr [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> simple_expr simple_expr_list . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 46
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On PREFIXOP shift to state 63
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On BEGIN shift to state 111
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 566
-- On constr_longident shift to state 515
-- On constant shift to state 516
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> simple_expr simple_expr_list

State 566:
## Known stack suffix:
## simple_expr_list simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr_list -> simple_expr_list simple_expr . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On DOT shift to state 491
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr_list -> simple_expr_list simple_expr

State 567:
## Known stack suffix:
## simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr_list -> simple_expr . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On DOT shift to state 491
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr_list -> simple_expr

State 568:
## Known stack suffix:
## simple_expr DOT LBRACK index_list
## LR(1) items:
index_list -> index_list . COMMA index [ error RBRACK COMMA ]
simple_expr -> simple_expr DOT LBRACK index_list . RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACK index_list . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On error shift to state 503
-- On RBRACK shift to state 569
-- On COMMA shift to state 553
## Reductions:

State 569:
## Known stack suffix:
## simple_expr DOT LBRACK index_list RBRACK
## LR(1) items:
simple_expr -> simple_expr DOT LBRACK index_list RBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK

State 570:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
simple_expr -> simple_expr DOT label_longident . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT label_longident

State 571:
## Known stack suffix:
## UNDERSCORE MINUSGREATER expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_case -> UNDERSCORE MINUSGREATER expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_case -> UNDERSCORE MINUSGREATER expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 572:
## Known stack suffix:
## simple_case
## LR(1) items:
case_list -> simple_case . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production case_list -> simple_case

State 573:
## Known stack suffix:
## expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
simple_case -> expr . MINUSGREATER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUSGREATER shift to state 574
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 574:
## Known stack suffix:
## expr MINUSGREATER
## LR(1) items:
simple_case -> expr MINUSGREATER . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 575
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 575:
## Known stack suffix:
## expr MINUSGREATER expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_case -> expr MINUSGREATER expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_case -> expr MINUSGREATER expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 576:
## Known stack suffix:
## CASE opt_bar case_list
## LR(1) items:
case_list -> case_list . BAR simple_case [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> CASE opt_bar case_list . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On BAR shift to state 577
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> CASE opt_bar case_list
** Conflict on BAR

State 577:
## Known stack suffix:
## case_list BAR
## LR(1) items:
case_list -> case_list BAR . simple_case [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UNDERSCORE shift to state 485
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On simple_case shift to state 578
-- On no_value_expr shift to state 423
-- On expr shift to state 573
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 578:
## Known stack suffix:
## case_list BAR simple_case
## LR(1) items:
case_list -> case_list BAR simple_case . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production case_list -> case_list BAR simple_case

State 579:
## Known stack suffix:
## DOTDOT expr
## LR(1) items:
index -> DOTDOT expr . [ error RBRACK COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error RBRACK COMMA
--   reduce production index -> DOTDOT expr

State 580:
## Known stack suffix:
## simple_expr DOT LBRACK index_list
## LR(1) items:
index_list -> index_list . COMMA index [ error RBRACK COMMA ]
no_value_expr -> simple_expr DOT LBRACK index_list . RBRACK LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT LBRACK index_list . RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT LBRACK index_list . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On error shift to state 581
-- On RBRACK shift to state 582
-- On COMMA shift to state 553
## Reductions:

State 581:
## Known stack suffix:
## simple_expr DOT LBRACK index_list error
## LR(1) items:
simple_expr -> simple_expr DOT LBRACK index_list error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> simple_expr DOT LBRACK index_list error

State 582:
## Known stack suffix:
## simple_expr DOT LBRACK index_list RBRACK
## LR(1) items:
no_value_expr -> simple_expr DOT LBRACK index_list RBRACK . LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT LBRACK index_list RBRACK . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On LESSMINUS shift to state 583
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK

State 583:
## Known stack suffix:
## simple_expr DOT LBRACK index_list RBRACK LESSMINUS
## LR(1) items:
no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 584
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 584:
## Known stack suffix:
## simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
## LR(1) items:
no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLON CHAR CASE BELOW BEGIN BAR ASSERT AND ABOVE
--   reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
** Conflict on WHERE

State 585:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
no_value_expr -> simple_expr DOT label_longident . LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT label_longident . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On LESSMINUS shift to state 586
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> simple_expr DOT label_longident

State 586:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS
## LR(1) items:
no_value_expr -> simple_expr DOT label_longident LESSMINUS . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 587
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 587:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS expr
## LR(1) items:
no_value_expr -> simple_expr DOT label_longident LESSMINUS expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLON CHAR CASE BELOW BEGIN BAR ASSERT AND ABOVE
--   reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
** Conflict on WHERE

State 588:
## Known stack suffix:
## simple_expr simple_expr_list
## LR(1) items:
simple_expr_list -> simple_expr_list . simple_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> simple_expr simple_expr_list . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 589
-- On constr_longident shift to state 414
-- On constant shift to state 415
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> simple_expr simple_expr_list
** Conflict on UIDENT STRING SHARP LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT DOLLAR CHAR BEGIN

State 589:
## Known stack suffix:
## simple_expr_list simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr_list -> simple_expr_list simple_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On DOT shift to state 384
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr_list -> simple_expr_list simple_expr

State 590:
## Known stack suffix:
## simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr_list -> simple_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On DOT shift to state 384
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr_list -> simple_expr

State 591:
## Known stack suffix:
## UNDERSCORE MINUSGREATER expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_case -> UNDERSCORE MINUSGREATER expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_case -> UNDERSCORE MINUSGREATER expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 592:
## Known stack suffix:
## simple_case
## LR(1) items:
case_list -> simple_case . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production case_list -> simple_case

State 593:
## Known stack suffix:
## expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
simple_case -> expr . MINUSGREATER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUSGREATER shift to state 594
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 594:
## Known stack suffix:
## expr MINUSGREATER
## LR(1) items:
simple_case -> expr MINUSGREATER . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 595
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 595:
## Known stack suffix:
## expr MINUSGREATER expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_case -> expr MINUSGREATER expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_case -> expr MINUSGREATER expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 596:
## Known stack suffix:
## CASE opt_bar case_list
## LR(1) items:
case_list -> case_list . BAR simple_case [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> CASE opt_bar case_list . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On BAR shift to state 597
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> CASE opt_bar case_list
** Conflict on BAR

State 597:
## Known stack suffix:
## case_list BAR
## LR(1) items:
case_list -> case_list BAR . simple_case [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UNDERSCORE shift to state 410
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On simple_case shift to state 598
-- On no_value_expr shift to state 423
-- On expr shift to state 593
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 598:
## Known stack suffix:
## case_list BAR simple_case
## LR(1) items:
case_list -> case_list BAR simple_case . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production case_list -> case_list BAR simple_case

State 599:
## Known stack suffix:
## FOR LIDENT EQ expr
## LR(1) items:
no_value_expr -> FOR LIDENT EQ expr . direction_flag expr DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On TO shift to state 469
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On DOWNTO shift to state 470
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BELOW shift to state 471
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On ABOVE shift to state 472
-- On direction_flag shift to state 600
## Reductions:

State 600:
## Known stack suffix:
## FOR LIDENT EQ expr direction_flag
## LR(1) items:
no_value_expr -> FOR LIDENT EQ expr direction_flag . expr DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 601
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 601:
## Known stack suffix:
## FOR LIDENT EQ expr direction_flag expr
## LR(1) items:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr . DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On DO shift to state 602
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 602:
## Known stack suffix:
## FOR LIDENT EQ expr direction_flag expr DO
## LR(1) items:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO . seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 603
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 603:
## Known stack suffix:
## FOR LIDENT EQ expr direction_flag expr DO seq_expr
## LR(1) items:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr . DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On DONE shift to state 604
## Reductions:

State 604:
## Known stack suffix:
## FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
## LR(1) items:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE

State 605:
## Known stack suffix:
## MINUSGREATER seq_expr
## LR(1) items:
match_action -> MINUSGREATER seq_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production match_action -> MINUSGREATER seq_expr

State 606:
## Known stack suffix:
## simple_pattern
## LR(1) items:
fun_def -> simple_pattern . fun_def [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHEN shift to state 401
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUSGREATER shift to state 404
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 606
-- On signed_constant shift to state 306
-- On match_action shift to state 607
-- On fun_def shift to state 608
-- On constr_longident shift to state 609
-- On constant shift to state 145
## Reductions:

State 607:
## Known stack suffix:
## match_action
## LR(1) items:
fun_def -> match_action . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production fun_def -> match_action

State 608:
## Known stack suffix:
## simple_pattern fun_def
## LR(1) items:
fun_def -> simple_pattern fun_def . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production fun_def -> simple_pattern fun_def

State 609:
## Known stack suffix:
## constr_longident
## LR(1) items:
simple_pattern -> constr_longident . [ WHEN UNDERSCORE UIDENT STRING SHARP MINUSGREATER MINUS LVECTOR LPAREN LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR CHAR ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP MINUSGREATER MINUS LVECTOR LPAREN LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR CHAR
--   reduce production simple_pattern -> constr_longident

State 610:
## Known stack suffix:
## FUN simple_pattern fun_def
## LR(1) items:
value_expr -> FUN simple_pattern fun_def . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> FUN simple_pattern fun_def

State 611:
## Known stack suffix:
## WHEN expr
## LR(1) items:
match_action -> WHEN expr . MINUSGREATER seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUSGREATER shift to state 612
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 612:
## Known stack suffix:
## WHEN expr MINUSGREATER
## LR(1) items:
match_action -> WHEN expr MINUSGREATER . seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 613
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 613:
## Known stack suffix:
## WHEN expr MINUSGREATER seq_expr
## LR(1) items:
match_action -> WHEN expr MINUSGREATER seq_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production match_action -> WHEN expr MINUSGREATER seq_expr

State 614:
## Known stack suffix:
## pattern_comma_list opt_comma match_action
## LR(1) items:
match_cases -> pattern_comma_list opt_comma match_action . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production match_cases -> pattern_comma_list opt_comma match_action

State 615:
## Known stack suffix:
## FUNCTION opt_bar match_cases
## LR(1) items:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> FUNCTION opt_bar match_cases . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On BAR shift to state 616
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> FUNCTION opt_bar match_cases

State 616:
## Known stack suffix:
## match_cases BAR
## LR(1) items:
match_cases -> match_cases BAR . pattern_comma_list opt_comma match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 617
-- On pattern shift to state 399
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 617:
## Known stack suffix:
## match_cases BAR pattern_comma_list
## LR(1) items:
match_cases -> match_cases BAR pattern_comma_list . opt_comma match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ WHEN MINUSGREATER COMMA ]
## Transitions:
-- On COMMA shift to state 397
-- On opt_comma shift to state 618
## Reductions:
-- On WHEN MINUSGREATER
--   reduce production opt_comma ->

State 618:
## Known stack suffix:
## match_cases BAR pattern_comma_list opt_comma
## LR(1) items:
match_cases -> match_cases BAR pattern_comma_list opt_comma . match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHEN shift to state 401
-- On MINUSGREATER shift to state 404
-- On match_action shift to state 619
## Reductions:

State 619:
## Known stack suffix:
## match_cases BAR pattern_comma_list opt_comma match_action
## LR(1) items:
match_cases -> match_cases BAR pattern_comma_list opt_comma match_action . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action

State 620:
## Known stack suffix:
## IF expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> IF expr . THEN expr ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> IF expr . THEN expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On THEN shift to state 621
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 621:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
value_expr -> IF expr THEN . expr ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> IF expr THEN . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 622
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 622:
## Known stack suffix:
## IF expr THEN expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> IF expr THEN expr . ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> IF expr THEN expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On ELSE shift to state 623
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLON CHAR CASE BELOW BEGIN BAR ASSERT AND ABOVE
--   reduce production value_expr -> IF expr THEN expr
** Conflict on WHERE ELSE

State 623:
## Known stack suffix:
## IF expr THEN expr ELSE
## LR(1) items:
value_expr -> IF expr THEN expr ELSE . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 624
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 624:
## Known stack suffix:
## IF expr THEN expr ELSE expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> IF expr THEN expr ELSE expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLON CHAR CASE BELOW BEGIN BAR ASSERT AND ABOVE
--   reduce production value_expr -> IF expr THEN expr ELSE expr
** Conflict on WHERE

State 625:
## Known stack suffix:
## WHEN expr
## LR(1) items:
match_action -> WHEN expr . MINUSGREATER seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUSGREATER shift to state 626
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 626:
## Known stack suffix:
## WHEN expr MINUSGREATER
## LR(1) items:
match_action -> WHEN expr MINUSGREATER . seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On seq_expr shift to state 627
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 629
## Reductions:

State 627:
## Known stack suffix:
## WHEN expr MINUSGREATER seq_expr
## LR(1) items:
match_action -> WHEN expr MINUSGREATER seq_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production match_action -> WHEN expr MINUSGREATER seq_expr

State 628:
## Known stack suffix:
## expr
## LR(1) items:
basic_seq_expr -> expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production basic_seq_expr -> expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 629:
## Known stack suffix:
## basic_seq_expr
## LR(1) items:
basic_seq_expr -> basic_seq_expr . SEMI expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
basic_seq_expr -> basic_seq_expr . SEMI [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
seq_expr -> basic_seq_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 630
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production seq_expr -> basic_seq_expr
** Conflict on SEMI

State 630:
## Known stack suffix:
## basic_seq_expr SEMI
## LR(1) items:
basic_seq_expr -> basic_seq_expr SEMI . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
basic_seq_expr -> basic_seq_expr SEMI . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 631
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production basic_seq_expr -> basic_seq_expr SEMI
** Conflict on WHERE

State 631:
## Known stack suffix:
## basic_seq_expr SEMI expr
## LR(1) items:
basic_seq_expr -> basic_seq_expr SEMI expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE END ELSE DOTDOT COMMA COLON BARRBRACK BARCOLON BAR
--   reduce production basic_seq_expr -> basic_seq_expr SEMI expr
** Conflict on WHERE

State 632:
## Known stack suffix:
## MINUSGREATER
## LR(1) items:
match_action -> MINUSGREATER . seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On seq_expr shift to state 633
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 629
## Reductions:

State 633:
## Known stack suffix:
## MINUSGREATER seq_expr
## LR(1) items:
match_action -> MINUSGREATER seq_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production match_action -> MINUSGREATER seq_expr

State 634:
## Known stack suffix:
## simple_pattern
## LR(1) items:
fun_def -> simple_pattern . fun_def [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 389
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUSGREATER shift to state 632
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 634
-- On signed_constant shift to state 306
-- On match_action shift to state 635
-- On fun_def shift to state 636
-- On constr_longident shift to state 609
-- On constant shift to state 145
## Reductions:

State 635:
## Known stack suffix:
## match_action
## LR(1) items:
fun_def -> match_action . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production fun_def -> match_action

State 636:
## Known stack suffix:
## simple_pattern fun_def
## LR(1) items:
fun_def -> simple_pattern fun_def . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production fun_def -> simple_pattern fun_def

State 637:
## Known stack suffix:
## FUN simple_pattern fun_def
## LR(1) items:
value_expr -> FUN simple_pattern fun_def . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> FUN simple_pattern fun_def

State 638:
## Known stack suffix:
## simple_expr DOT LBRACK index_list
## LR(1) items:
index_list -> index_list . COMMA index [ error RBRACK COMMA ]
simple_expr -> simple_expr DOT LBRACK index_list . RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT LBRACK index_list . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On error shift to state 581
-- On RBRACK shift to state 639
-- On COMMA shift to state 553
## Reductions:

State 639:
## Known stack suffix:
## simple_expr DOT LBRACK index_list RBRACK
## LR(1) items:
simple_expr -> simple_expr DOT LBRACK index_list RBRACK . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK

State 640:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
simple_expr -> simple_expr DOT label_longident . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> simple_expr DOT label_longident

State 641:
## Known stack suffix:
## LIDENT EQ value_expr
## LR(1) items:
expr -> value_expr . [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
option_pattern_list_element -> LIDENT EQ value_expr . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER
--   reduce production expr -> value_expr
-- On RPAREN COMMA
--   reduce production option_pattern_list_element -> LIDENT EQ value_expr

State 642:
## Known stack suffix:
## expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 643:
## Known stack suffix:
## AMPERREST
## LR(1) items:
option_pattern_list_element -> AMPERREST . LIDENT [ RPAREN COMMA ]
## Transitions:
-- On LIDENT shift to state 644
## Reductions:

State 644:
## Known stack suffix:
## AMPERREST LIDENT
## LR(1) items:
option_pattern_list_element -> AMPERREST LIDENT . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production option_pattern_list_element -> AMPERREST LIDENT

State 645:
## Known stack suffix:
## option_pattern_list_element
## LR(1) items:
option_pattern_list -> option_pattern_list_element . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production option_pattern_list -> option_pattern_list_element

State 646:
## Known stack suffix:
## AMPEROPT option_pattern_list
## LR(1) items:
option_pattern_list -> option_pattern_list . COMMA option_pattern_list_element [ RPAREN COMMA ]
param_tail -> AMPEROPT option_pattern_list . [ RPAREN ]
param_tail -> AMPEROPT option_pattern_list . COMMA AMPERKEY key_pattern [ RPAREN ]
## Transitions:
-- On COMMA shift to state 647
## Reductions:
-- On RPAREN
--   reduce production param_tail -> AMPEROPT option_pattern_list

State 647:
## Known stack suffix:
## AMPEROPT option_pattern_list COMMA
## LR(1) items:
option_pattern_list -> option_pattern_list COMMA . option_pattern_list_element [ RPAREN COMMA ]
param_tail -> AMPEROPT option_pattern_list COMMA . AMPERKEY key_pattern [ RPAREN ]
## Transitions:
-- On LIDENT shift to state 378
-- On AMPERREST shift to state 643
-- On AMPERKEY shift to state 648
-- On option_pattern_list_element shift to state 665
## Reductions:

State 648:
## Known stack suffix:
## AMPEROPT option_pattern_list COMMA AMPERKEY
## LR(1) items:
param_tail -> AMPEROPT option_pattern_list COMMA AMPERKEY . key_pattern [ RPAREN ]
## Transitions:
-- On LIDENT shift to state 649
-- On DOTDOTDOT shift to state 652
-- On AMPERREST shift to state 655
-- On key_pattern_list_element shift to state 657
-- On key_pattern_list shift to state 658
-- On key_pattern shift to state 664
## Reductions:

State 649:
## Known stack suffix:
## LIDENT
## LR(1) items:
key_pattern_list_element -> LIDENT . [ RPAREN COMMA ]
key_pattern_list_element -> LIDENT . EQ value_expr [ RPAREN COMMA ]
## Transitions:
-- On EQ shift to state 650
## Reductions:
-- On RPAREN COMMA
--   reduce production key_pattern_list_element -> LIDENT

State 650:
## Known stack suffix:
## LIDENT EQ
## LR(1) items:
key_pattern_list_element -> LIDENT EQ . value_expr [ RPAREN COMMA ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 651
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 642
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 651:
## Known stack suffix:
## LIDENT EQ value_expr
## LR(1) items:
expr -> value_expr . [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
key_pattern_list_element -> LIDENT EQ value_expr . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER
--   reduce production expr -> value_expr
-- On RPAREN COMMA
--   reduce production key_pattern_list_element -> LIDENT EQ value_expr

State 652:
## Known stack suffix:
## DOTDOTDOT
## LR(1) items:
key_pattern -> DOTDOTDOT . [ RPAREN ]
key_pattern -> DOTDOTDOT . AS LIDENT [ RPAREN ]
## Transitions:
-- On AS shift to state 653
## Reductions:
-- On RPAREN
--   reduce production key_pattern -> DOTDOTDOT

State 653:
## Known stack suffix:
## DOTDOTDOT AS
## LR(1) items:
key_pattern -> DOTDOTDOT AS . LIDENT [ RPAREN ]
## Transitions:
-- On LIDENT shift to state 654
## Reductions:

State 654:
## Known stack suffix:
## DOTDOTDOT AS LIDENT
## LR(1) items:
key_pattern -> DOTDOTDOT AS LIDENT . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production key_pattern -> DOTDOTDOT AS LIDENT

State 655:
## Known stack suffix:
## AMPERREST
## LR(1) items:
key_pattern_list_element -> AMPERREST . LIDENT [ RPAREN COMMA ]
## Transitions:
-- On LIDENT shift to state 656
## Reductions:

State 656:
## Known stack suffix:
## AMPERREST LIDENT
## LR(1) items:
key_pattern_list_element -> AMPERREST LIDENT . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production key_pattern_list_element -> AMPERREST LIDENT

State 657:
## Known stack suffix:
## key_pattern_list_element
## LR(1) items:
key_pattern_list -> key_pattern_list_element . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production key_pattern_list -> key_pattern_list_element

State 658:
## Known stack suffix:
## key_pattern_list
## LR(1) items:
key_pattern -> key_pattern_list . [ RPAREN ]
key_pattern -> key_pattern_list . COMMA DOTDOTDOT [ RPAREN ]
key_pattern -> key_pattern_list . COMMA DOTDOTDOT AS LIDENT [ RPAREN ]
key_pattern_list -> key_pattern_list . COMMA key_pattern_list_element [ RPAREN COMMA ]
## Transitions:
-- On COMMA shift to state 659
## Reductions:
-- On RPAREN
--   reduce production key_pattern -> key_pattern_list

State 659:
## Known stack suffix:
## key_pattern_list COMMA
## LR(1) items:
key_pattern -> key_pattern_list COMMA . DOTDOTDOT [ RPAREN ]
key_pattern -> key_pattern_list COMMA . DOTDOTDOT AS LIDENT [ RPAREN ]
key_pattern_list -> key_pattern_list COMMA . key_pattern_list_element [ RPAREN COMMA ]
## Transitions:
-- On LIDENT shift to state 649
-- On DOTDOTDOT shift to state 660
-- On AMPERREST shift to state 655
-- On key_pattern_list_element shift to state 663
## Reductions:

State 660:
## Known stack suffix:
## key_pattern_list COMMA DOTDOTDOT
## LR(1) items:
key_pattern -> key_pattern_list COMMA DOTDOTDOT . [ RPAREN ]
key_pattern -> key_pattern_list COMMA DOTDOTDOT . AS LIDENT [ RPAREN ]
## Transitions:
-- On AS shift to state 661
## Reductions:
-- On RPAREN
--   reduce production key_pattern -> key_pattern_list COMMA DOTDOTDOT

State 661:
## Known stack suffix:
## key_pattern_list COMMA DOTDOTDOT AS
## LR(1) items:
key_pattern -> key_pattern_list COMMA DOTDOTDOT AS . LIDENT [ RPAREN ]
## Transitions:
-- On LIDENT shift to state 662
## Reductions:

State 662:
## Known stack suffix:
## key_pattern_list COMMA DOTDOTDOT AS LIDENT
## LR(1) items:
key_pattern -> key_pattern_list COMMA DOTDOTDOT AS LIDENT . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production key_pattern -> key_pattern_list COMMA DOTDOTDOT AS LIDENT

State 663:
## Known stack suffix:
## key_pattern_list COMMA key_pattern_list_element
## LR(1) items:
key_pattern_list -> key_pattern_list COMMA key_pattern_list_element . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production key_pattern_list -> key_pattern_list COMMA key_pattern_list_element

State 664:
## Known stack suffix:
## AMPEROPT option_pattern_list COMMA AMPERKEY key_pattern
## LR(1) items:
param_tail -> AMPEROPT option_pattern_list COMMA AMPERKEY key_pattern . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production param_tail -> AMPEROPT option_pattern_list COMMA AMPERKEY key_pattern

State 665:
## Known stack suffix:
## option_pattern_list COMMA option_pattern_list_element
## LR(1) items:
option_pattern_list -> option_pattern_list COMMA option_pattern_list_element . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production option_pattern_list -> option_pattern_list COMMA option_pattern_list_element

State 666:
## Known stack suffix:
## AMPERKEY
## LR(1) items:
param_tail -> AMPERKEY . key_pattern [ RPAREN ]
## Transitions:
-- On LIDENT shift to state 649
-- On DOTDOTDOT shift to state 652
-- On AMPERREST shift to state 655
-- On key_pattern_list_element shift to state 657
-- On key_pattern_list shift to state 658
-- On key_pattern shift to state 667
## Reductions:

State 667:
## Known stack suffix:
## AMPERKEY key_pattern
## LR(1) items:
param_tail -> AMPERKEY key_pattern . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production param_tail -> AMPERKEY key_pattern

State 668:
## Known stack suffix:
## LPAREN pattern_comma_list
## LR(1) items:
list_pattern -> pattern_comma_list . COMMA DOTDOTDOT AS LIDENT [ error RPAREN ]
list_pattern -> pattern_comma_list . COMMA DOTDOTDOT [ error RPAREN ]
list_pattern -> pattern_comma_list . BAR pattern [ error RPAREN ]
list_pattern -> pattern_comma_list . opt_comma [ error RPAREN ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ error RPAREN COMMA BAR ]
simple_pattern -> LPAREN pattern_comma_list . COMMA param_tail RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On COMMA shift to state 669
-- On BAR shift to state 365
-- On opt_comma shift to state 367
## Reductions:
-- On error RPAREN
--   reduce production opt_comma ->

State 669:
## Known stack suffix:
## LPAREN pattern_comma_list COMMA
## LR(1) items:
list_pattern -> pattern_comma_list COMMA . DOTDOTDOT AS LIDENT [ error RPAREN ]
list_pattern -> pattern_comma_list COMMA . DOTDOTDOT [ error RPAREN ]
opt_comma -> COMMA . [ error RPAREN ]
pattern_comma_list -> pattern_comma_list COMMA . pattern_comma_list_element [ error RPAREN COMMA BAR ]
simple_pattern -> LPAREN pattern_comma_list COMMA . param_tail RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOTDOTDOT shift to state 351
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On AMPEROPT shift to state 377
-- On AMPERKEY shift to state 666
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 354
-- On pattern shift to state 355
-- On param_tail shift to state 670
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:
-- On error RPAREN
--   reduce production opt_comma -> COMMA

State 670:
## Known stack suffix:
## LPAREN pattern_comma_list COMMA param_tail
## LR(1) items:
simple_pattern -> LPAREN pattern_comma_list COMMA param_tail . RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On RPAREN shift to state 671
## Reductions:

State 671:
## Known stack suffix:
## LPAREN pattern_comma_list COMMA param_tail RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN

State 672:
## Known stack suffix:
## LPAREN param_tail
## LR(1) items:
simple_pattern -> LPAREN param_tail . RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On RPAREN shift to state 673
## Reductions:

State 673:
## Known stack suffix:
## LPAREN param_tail RPAREN
## LR(1) items:
simple_pattern -> LPAREN param_tail RPAREN . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production simple_pattern -> LPAREN param_tail RPAREN

State 674:
## Known stack suffix:
## LPAREN list_pattern
## LR(1) items:
simple_pattern -> LPAREN list_pattern . RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LPAREN list_pattern . error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On error shift to state 675
-- On RPAREN shift to state 676
## Reductions:

State 675:
## Known stack suffix:
## LPAREN list_pattern error
## LR(1) items:
simple_pattern -> LPAREN list_pattern error . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production simple_pattern -> LPAREN list_pattern error

State 676:
## Known stack suffix:
## LPAREN list_pattern RPAREN
## LR(1) items:
simple_pattern -> LPAREN list_pattern RPAREN . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production simple_pattern -> LPAREN list_pattern RPAREN

State 677:
## Known stack suffix:
## FARRAYPAT LPAREN pattern
## LR(1) items:
built_in_constr -> FARRAYPAT LPAREN pattern . COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COMMA shift to state 678
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:

State 678:
## Known stack suffix:
## FARRAYPAT LPAREN pattern COMMA
## LR(1) items:
built_in_constr -> FARRAYPAT LPAREN pattern COMMA . bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 679
## Reductions:

State 679:
## Known stack suffix:
## FARRAYPAT LPAREN pattern COMMA bi_pattern
## LR(1) items:
built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On RPAREN shift to state 680
## Reductions:

State 680:
## Known stack suffix:
## FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
## LR(1) items:
built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN

State 681:
## Known stack suffix:
## FARRAYPAT bi_pattern
## LR(1) items:
built_in_constr -> FARRAYPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> FARRAYPAT bi_pattern

State 682:
## Known stack suffix:
## label_longident EQ pattern
## LR(1) items:
lbl_pattern_list_element -> label_longident EQ pattern . [ error RBRACE COMMA ]
pattern -> pattern . AS LIDENT [ error RBRACE COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RBRACE COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ error RBRACE COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On AS shift to state 363
## Reductions:
-- On error RBRACE COMMA
--   reduce production lbl_pattern_list_element -> label_longident EQ pattern

State 683:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_comma
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_comma . RBRACE [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On RBRACE shift to state 684
## Reductions:

State 684:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_comma RBRACE
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE

State 685:
## Known stack suffix:
## LBRACK list_pattern
## LR(1) items:
simple_pattern -> LBRACK list_pattern . RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LBRACK list_pattern . error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On error shift to state 686
-- On RBRACK shift to state 687
## Reductions:

State 686:
## Known stack suffix:
## LBRACK list_pattern error
## LR(1) items:
simple_pattern -> LBRACK list_pattern error . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> LBRACK list_pattern error

State 687:
## Known stack suffix:
## LBRACK list_pattern RBRACK
## LR(1) items:
simple_pattern -> LBRACK list_pattern RBRACK . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> LBRACK list_pattern RBRACK

State 688:
## Known stack suffix:
## LISTPAT pattern
## LR(1) items:
built_in_constr -> LISTPAT pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On AS shift to state 363
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> LISTPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 689:
## Known stack suffix:
## LPAREN pattern_comma_list
## LR(1) items:
list_pattern -> pattern_comma_list . COMMA DOTDOTDOT AS LIDENT [ error RPAREN ]
list_pattern -> pattern_comma_list . COMMA DOTDOTDOT [ error RPAREN ]
list_pattern -> pattern_comma_list . BAR pattern [ error RPAREN ]
list_pattern -> pattern_comma_list . opt_comma [ error RPAREN ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ error RPAREN COMMA BAR ]
simple_pattern -> LPAREN pattern_comma_list . COMMA param_tail RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On COMMA shift to state 690
-- On BAR shift to state 365
-- On opt_comma shift to state 367
## Reductions:
-- On error RPAREN
--   reduce production opt_comma ->

State 690:
## Known stack suffix:
## LPAREN pattern_comma_list COMMA
## LR(1) items:
list_pattern -> pattern_comma_list COMMA . DOTDOTDOT AS LIDENT [ error RPAREN ]
list_pattern -> pattern_comma_list COMMA . DOTDOTDOT [ error RPAREN ]
opt_comma -> COMMA . [ error RPAREN ]
pattern_comma_list -> pattern_comma_list COMMA . pattern_comma_list_element [ error RPAREN COMMA BAR ]
simple_pattern -> LPAREN pattern_comma_list COMMA . param_tail RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOTDOTDOT shift to state 351
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On AMPEROPT shift to state 377
-- On AMPERKEY shift to state 666
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 354
-- On pattern shift to state 355
-- On param_tail shift to state 691
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
## Reductions:
-- On error RPAREN
--   reduce production opt_comma -> COMMA

State 691:
## Known stack suffix:
## LPAREN pattern_comma_list COMMA param_tail
## LR(1) items:
simple_pattern -> LPAREN pattern_comma_list COMMA param_tail . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On RPAREN shift to state 692
## Reductions:

State 692:
## Known stack suffix:
## LPAREN pattern_comma_list COMMA param_tail RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN

State 693:
## Known stack suffix:
## LPAREN param_tail
## LR(1) items:
simple_pattern -> LPAREN param_tail . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On RPAREN shift to state 694
## Reductions:

State 694:
## Known stack suffix:
## LPAREN param_tail RPAREN
## LR(1) items:
simple_pattern -> LPAREN param_tail RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> LPAREN param_tail RPAREN

State 695:
## Known stack suffix:
## LPAREN list_pattern
## LR(1) items:
simple_pattern -> LPAREN list_pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LPAREN list_pattern . error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On error shift to state 696
-- On RPAREN shift to state 697
## Reductions:

State 696:
## Known stack suffix:
## LPAREN list_pattern error
## LR(1) items:
simple_pattern -> LPAREN list_pattern error . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> LPAREN list_pattern error

State 697:
## Known stack suffix:
## LPAREN list_pattern RPAREN
## LR(1) items:
simple_pattern -> LPAREN list_pattern RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> LPAREN list_pattern RPAREN

State 698:
## Known stack suffix:
## LVECTOR list_pattern
## LR(1) items:
simple_pattern -> LVECTOR list_pattern . RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LVECTOR list_pattern . error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On error shift to state 699
-- On RBRACK shift to state 700
## Reductions:

State 699:
## Known stack suffix:
## LVECTOR list_pattern error
## LR(1) items:
simple_pattern -> LVECTOR list_pattern error . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> LVECTOR list_pattern error

State 700:
## Known stack suffix:
## LVECTOR list_pattern RBRACK
## LR(1) items:
simple_pattern -> LVECTOR list_pattern RBRACK . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production simple_pattern -> LVECTOR list_pattern RBRACK

State 701:
## Known stack suffix:
## RECORDPAT pattern
## LR(1) items:
built_in_constr -> RECORDPAT pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On AS shift to state 363
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> RECORDPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 702:
## Known stack suffix:
## TUPLEPAT pattern
## LR(1) items:
built_in_constr -> TUPLEPAT pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On AS shift to state 363
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> TUPLEPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 703:
## Known stack suffix:
## VECTORPAT pattern
## LR(1) items:
built_in_constr -> VECTORPAT pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On AS shift to state 363
## Reductions:
-- On error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS
--   reduce production built_in_constr -> VECTORPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 704:
## Known stack suffix:
## LVECTOR list_pattern
## LR(1) items:
simple_pattern -> LVECTOR list_pattern . RBRACK [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LVECTOR list_pattern . error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
-- On error shift to state 705
-- On RBRACK shift to state 706
## Reductions:

State 705:
## Known stack suffix:
## LVECTOR list_pattern error
## LR(1) items:
simple_pattern -> LVECTOR list_pattern error . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production simple_pattern -> LVECTOR list_pattern error

State 706:
## Known stack suffix:
## LVECTOR list_pattern RBRACK
## LR(1) items:
simple_pattern -> LVECTOR list_pattern RBRACK . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS
--   reduce production simple_pattern -> LVECTOR list_pattern RBRACK

State 707:
## Known stack suffix:
## RECORDPAT pattern
## LR(1) items:
built_in_constr -> RECORDPAT pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> RECORDPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 708:
## Known stack suffix:
## TUPLEPAT pattern
## LR(1) items:
built_in_constr -> TUPLEPAT pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> TUPLEPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 709:
## Known stack suffix:
## VECTORPAT pattern
## LR(1) items:
built_in_constr -> VECTORPAT pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:
-- On WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS
--   reduce production built_in_constr -> VECTORPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 710:
## Known stack suffix:
## pattern_comma_list
## LR(1) items:
match_cases -> pattern_comma_list . opt_comma match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ WHEN MINUSGREATER COMMA ]
## Transitions:
-- On COMMA shift to state 397
-- On opt_comma shift to state 711
## Reductions:
-- On WHEN MINUSGREATER
--   reduce production opt_comma ->

State 711:
## Known stack suffix:
## pattern_comma_list opt_comma
## LR(1) items:
match_cases -> pattern_comma_list opt_comma . match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 389
-- On MINUSGREATER shift to state 632
-- On match_action shift to state 712
## Reductions:

State 712:
## Known stack suffix:
## pattern_comma_list opt_comma match_action
## LR(1) items:
match_cases -> pattern_comma_list opt_comma match_action . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production match_cases -> pattern_comma_list opt_comma match_action

State 713:
## Known stack suffix:
## FUNCTION opt_bar match_cases
## LR(1) items:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> FUNCTION opt_bar match_cases . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On BAR shift to state 714
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR AMPERAMPER
--   reduce production value_expr -> FUNCTION opt_bar match_cases

State 714:
## Known stack suffix:
## match_cases BAR
## LR(1) items:
match_cases -> match_cases BAR . pattern_comma_list opt_comma match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 715
-- On pattern shift to state 399
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 715:
## Known stack suffix:
## match_cases BAR pattern_comma_list
## LR(1) items:
match_cases -> match_cases BAR pattern_comma_list . opt_comma match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ WHEN MINUSGREATER COMMA ]
## Transitions:
-- On COMMA shift to state 397
-- On opt_comma shift to state 716
## Reductions:
-- On WHEN MINUSGREATER
--   reduce production opt_comma ->

State 716:
## Known stack suffix:
## match_cases BAR pattern_comma_list opt_comma
## LR(1) items:
match_cases -> match_cases BAR pattern_comma_list opt_comma . match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 389
-- On MINUSGREATER shift to state 632
-- On match_action shift to state 717
## Reductions:

State 717:
## Known stack suffix:
## match_cases BAR pattern_comma_list opt_comma match_action
## LR(1) items:
match_cases -> match_cases BAR pattern_comma_list opt_comma match_action . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action

State 718:
## Known stack suffix:
## BEGIN seq_expr
## LR(1) items:
simple_expr -> BEGIN seq_expr . END [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> BEGIN seq_expr . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On error shift to state 719
-- On END shift to state 720
## Reductions:

State 719:
## Known stack suffix:
## BEGIN seq_expr error
## LR(1) items:
simple_expr -> BEGIN seq_expr error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> BEGIN seq_expr error

State 720:
## Known stack suffix:
## BEGIN seq_expr END
## LR(1) items:
simple_expr -> BEGIN seq_expr END . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> BEGIN seq_expr END

State 721:
## Known stack suffix:
## simple_expr
## LR(1) items:
record_expr -> simple_expr . WITH lbl_expr_list [ error RBRACE COMMA ]
simple_expr -> simple_expr . DOT label_longident [ WITH DOT ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH DOT ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH DOT ]
## Transitions:
-- On WITH shift to state 722
-- On DOT shift to state 384
## Reductions:

State 722:
## Known stack suffix:
## simple_expr WITH
## LR(1) items:
record_expr -> simple_expr WITH . lbl_expr_list [ error RBRACE COMMA ]
## Transitions:
-- On UIDENT shift to state 213
-- On LIDENT shift to state 216
-- On lbl_expr_list shift to state 723
-- On label_longident shift to state 728
## Reductions:

State 723:
## Known stack suffix:
## simple_expr WITH lbl_expr_list
## LR(1) items:
lbl_expr_list -> lbl_expr_list . COMMA label_longident EQ expr [ error RBRACE COMMA ]
record_expr -> simple_expr WITH lbl_expr_list . [ error RBRACE COMMA ]
## Transitions:
-- On COMMA shift to state 724
## Reductions:
-- On error RBRACE COMMA
--   reduce production record_expr -> simple_expr WITH lbl_expr_list
** Conflict on COMMA

State 724:
## Known stack suffix:
## lbl_expr_list COMMA
## LR(1) items:
lbl_expr_list -> lbl_expr_list COMMA . label_longident EQ expr [ error RBRACE COMMA ]
## Transitions:
-- On UIDENT shift to state 213
-- On LIDENT shift to state 216
-- On label_longident shift to state 725
## Reductions:

State 725:
## Known stack suffix:
## lbl_expr_list COMMA label_longident
## LR(1) items:
lbl_expr_list -> lbl_expr_list COMMA label_longident . EQ expr [ error RBRACE COMMA ]
## Transitions:
-- On EQ shift to state 726
## Reductions:

State 726:
## Known stack suffix:
## lbl_expr_list COMMA label_longident EQ
## LR(1) items:
lbl_expr_list -> lbl_expr_list COMMA label_longident EQ . expr [ error RBRACE COMMA ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 727
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 727:
## Known stack suffix:
## lbl_expr_list COMMA label_longident EQ expr
## LR(1) items:
lbl_expr_list -> lbl_expr_list COMMA label_longident EQ expr . [ error RBRACE COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error RBRACE COMMA
--   reduce production lbl_expr_list -> lbl_expr_list COMMA label_longident EQ expr

State 728:
## Known stack suffix:
## label_longident
## LR(1) items:
lbl_expr_list -> label_longident . EQ expr [ error RBRACE COMMA ]
## Transitions:
-- On EQ shift to state 729
## Reductions:

State 729:
## Known stack suffix:
## label_longident EQ
## LR(1) items:
lbl_expr_list -> label_longident EQ . expr [ error RBRACE COMMA ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 730
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 730:
## Known stack suffix:
## label_longident EQ expr
## LR(1) items:
lbl_expr_list -> label_longident EQ expr . [ error RBRACE COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error RBRACE COMMA
--   reduce production lbl_expr_list -> label_longident EQ expr

State 731:
## Known stack suffix:
## LBRACE record_expr
## LR(1) items:
simple_expr -> LBRACE record_expr . opt_comma RBRACE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACE record_expr . opt_comma error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On COMMA shift to state 732
-- On opt_comma shift to state 733
## Reductions:
-- On error RBRACE
--   reduce production opt_comma ->

State 732:
## Known stack suffix:
## COMMA
## LR(1) items:
opt_comma -> COMMA . [ error RBRACE ]
## Transitions:
## Reductions:
-- On error RBRACE
--   reduce production opt_comma -> COMMA

State 733:
## Known stack suffix:
## LBRACE record_expr opt_comma
## LR(1) items:
simple_expr -> LBRACE record_expr opt_comma . RBRACE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACE record_expr opt_comma . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On error shift to state 734
-- On RBRACE shift to state 735
## Reductions:

State 734:
## Known stack suffix:
## LBRACE record_expr opt_comma error
## LR(1) items:
simple_expr -> LBRACE record_expr opt_comma error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LBRACE record_expr opt_comma error

State 735:
## Known stack suffix:
## LBRACE record_expr opt_comma RBRACE
## LR(1) items:
simple_expr -> LBRACE record_expr opt_comma RBRACE . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE

State 736:
## Known stack suffix:
## lbl_expr_list
## LR(1) items:
lbl_expr_list -> lbl_expr_list . COMMA label_longident EQ expr [ error RBRACE COMMA ]
record_expr -> lbl_expr_list . [ error RBRACE COMMA ]
## Transitions:
-- On COMMA shift to state 724
## Reductions:
-- On error RBRACE COMMA
--   reduce production record_expr -> lbl_expr_list
** Conflict on COMMA

State 737:
## Known stack suffix:
## IF expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> IF expr . THEN expr ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> IF expr . THEN expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On THEN shift to state 738
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 738:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
value_expr -> IF expr THEN . expr ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> IF expr THEN . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 739
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 739:
## Known stack suffix:
## IF expr THEN expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> IF expr THEN expr . ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> IF expr THEN expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On ELSE shift to state 740
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE END ELSE DOTDOT COMMA COLON BARRBRACK BARCOLON BAR
--   reduce production value_expr -> IF expr THEN expr
** Conflict on WHERE ELSE

State 740:
## Known stack suffix:
## IF expr THEN expr ELSE
## LR(1) items:
value_expr -> IF expr THEN expr ELSE . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 741
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 741:
## Known stack suffix:
## IF expr THEN expr ELSE expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> IF expr THEN expr ELSE expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE END ELSE DOTDOT COMMA COLON BARRBRACK BARCOLON BAR
--   reduce production value_expr -> IF expr THEN expr ELSE expr
** Conflict on WHERE

State 742:
## Known stack suffix:
## BEGIN seq_expr
## LR(1) items:
simple_expr -> BEGIN seq_expr . END [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> BEGIN seq_expr . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On error shift to state 743
-- On END shift to state 744
## Reductions:

State 743:
## Known stack suffix:
## BEGIN seq_expr error
## LR(1) items:
simple_expr -> BEGIN seq_expr error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> BEGIN seq_expr error

State 744:
## Known stack suffix:
## BEGIN seq_expr END
## LR(1) items:
simple_expr -> BEGIN seq_expr END . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> BEGIN seq_expr END

State 745:
## Known stack suffix:
## LAZY simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> LAZY simple_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On DOT shift to state 491
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> LAZY simple_expr

State 746:
## Known stack suffix:
## LBRACK list_expr
## LR(1) items:
simple_expr -> LBRACK list_expr . RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACK list_expr . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On error shift to state 747
-- On RBRACK shift to state 748
## Reductions:

State 747:
## Known stack suffix:
## LBRACK list_expr error
## LR(1) items:
simple_expr -> LBRACK list_expr error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LBRACK list_expr error

State 748:
## Known stack suffix:
## LBRACK list_expr RBRACK
## LR(1) items:
simple_expr -> LBRACK list_expr RBRACK . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LBRACK list_expr RBRACK

State 749:
## Known stack suffix:
## expr_comma_list_element
## LR(1) items:
expr_comma_list -> expr_comma_list_element . [ error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR ]
## Transitions:
## Reductions:
-- On error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR
--   reduce production expr_comma_list -> expr_comma_list_element

State 750:
## Known stack suffix:
## expr_comma_list
## LR(1) items:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ error RBRACK DOTDOT COMMA BAR ]
list_expr -> expr_comma_list . opt_comma [ error RBRACK ]
list_expr -> expr_comma_list . opt_comma DOTDOT expr [ error RBRACK ]
list_expr -> expr_comma_list . BAR expr [ error RBRACK ]
## Transitions:
-- On COMMA shift to state 751
-- On BAR shift to state 757
-- On opt_comma shift to state 759
## Reductions:
-- On error RBRACK DOTDOT
--   reduce production opt_comma ->

State 751:
## Known stack suffix:
## expr_comma_list COMMA
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA . expr_comma_list_element [ error RBRACK DOTDOT COMMA BARRBRACK BAR ]
opt_comma -> COMMA . [ error RBRACK DOTDOT BARRBRACK ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 752
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
## Reductions:
-- On error RBRACK DOTDOT BARRBRACK
--   reduce production opt_comma -> COMMA

State 752:
## Known stack suffix:
## expr_comma_list COMMA expr_comma_list_element
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA expr_comma_list_element . [ error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR ]
## Transitions:
## Reductions:
-- On error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR
--   reduce production expr_comma_list -> expr_comma_list COMMA expr_comma_list_element

State 753:
## Known stack suffix:
## expr
## LR(1) items:
expr_comma_list_element -> expr . [ error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR
--   reduce production expr_comma_list_element -> expr

State 754:
## Known stack suffix:
## colonized_symbol
## LR(1) items:
expr_comma_list_element -> colonized_symbol . COLON expr [ error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR ]
## Transitions:
-- On COLON shift to state 755
## Reductions:

State 755:
## Known stack suffix:
## colonized_symbol COLON
## LR(1) items:
expr_comma_list_element -> colonized_symbol COLON . expr [ error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 756
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 756:
## Known stack suffix:
## colonized_symbol COLON expr
## LR(1) items:
expr_comma_list_element -> colonized_symbol COLON expr . [ error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR
--   reduce production expr_comma_list_element -> colonized_symbol COLON expr

State 757:
## Known stack suffix:
## expr_comma_list BAR
## LR(1) items:
list_expr -> expr_comma_list BAR . expr [ error RBRACK ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 758
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 758:
## Known stack suffix:
## expr_comma_list BAR expr
## LR(1) items:
list_expr -> expr_comma_list BAR expr . [ error RBRACK ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error RBRACK
--   reduce production list_expr -> expr_comma_list BAR expr

State 759:
## Known stack suffix:
## expr_comma_list opt_comma
## LR(1) items:
list_expr -> expr_comma_list opt_comma . [ error RBRACK ]
list_expr -> expr_comma_list opt_comma . DOTDOT expr [ error RBRACK ]
## Transitions:
-- On DOTDOT shift to state 760
## Reductions:
-- On error RBRACK
--   reduce production list_expr -> expr_comma_list opt_comma

State 760:
## Known stack suffix:
## expr_comma_list opt_comma DOTDOT
## LR(1) items:
list_expr -> expr_comma_list opt_comma DOTDOT . expr [ error RBRACK ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 761
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 761:
## Known stack suffix:
## expr_comma_list opt_comma DOTDOT expr
## LR(1) items:
list_expr -> expr_comma_list opt_comma DOTDOT expr . [ error RBRACK ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error RBRACK
--   reduce production list_expr -> expr_comma_list opt_comma DOTDOT expr

State 762:
## Known stack suffix:
## expr
## LR(1) items:
expr_comma_list_element -> expr . [ error RBRACK DOTDOT COMMA BAR ]
list_expr -> expr . BARCOLON generator_list [ error RBRACK ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARCOLON shift to state 763
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error RBRACK DOTDOT COMMA BAR
--   reduce production expr_comma_list_element -> expr

State 763:
## Known stack suffix:
## expr BARCOLON
## LR(1) items:
list_expr -> expr BARCOLON . generator_list [ error RBRACK ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 764
-- On generator_list shift to state 769
-- On generator shift to state 772
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 764:
## Known stack suffix:
## pattern
## LR(1) items:
generator -> pattern . LESSMINUS expr [ error SEMI RBRACK ]
generator -> pattern . LESSMINUS expr COMMA expr [ error SEMI RBRACK ]
pattern -> pattern . AS LIDENT [ LESSMINUS COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ LESSMINUS COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ LESSMINUS COLONCOLON BARBAR AS ]
## Transitions:
-- On LESSMINUS shift to state 765
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
## Reductions:

State 765:
## Known stack suffix:
## pattern LESSMINUS
## LR(1) items:
generator -> pattern LESSMINUS . expr [ error SEMI RBRACK ]
generator -> pattern LESSMINUS . expr COMMA expr [ error SEMI RBRACK ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 766
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 766:
## Known stack suffix:
## pattern LESSMINUS expr
## LR(1) items:
generator -> pattern LESSMINUS expr . [ error SEMI RBRACK ]
generator -> pattern LESSMINUS expr . COMMA expr [ error SEMI RBRACK ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COMMA shift to state 767
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error SEMI RBRACK
--   reduce production generator -> pattern LESSMINUS expr

State 767:
## Known stack suffix:
## pattern LESSMINUS expr COMMA
## LR(1) items:
generator -> pattern LESSMINUS expr COMMA . expr [ error SEMI RBRACK ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 768
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 768:
## Known stack suffix:
## pattern LESSMINUS expr COMMA expr
## LR(1) items:
generator -> pattern LESSMINUS expr COMMA expr . [ error SEMI RBRACK ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error SEMI RBRACK
--   reduce production generator -> pattern LESSMINUS expr COMMA expr

State 769:
## Known stack suffix:
## expr BARCOLON generator_list
## LR(1) items:
generator_list -> generator_list . SEMI generator [ error SEMI RBRACK ]
list_expr -> expr BARCOLON generator_list . [ error RBRACK ]
## Transitions:
-- On SEMI shift to state 770
## Reductions:
-- On error RBRACK
--   reduce production list_expr -> expr BARCOLON generator_list

State 770:
## Known stack suffix:
## generator_list SEMI
## LR(1) items:
generator_list -> generator_list SEMI . generator [ error SEMI RBRACK ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 764
-- On generator shift to state 771
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 771:
## Known stack suffix:
## generator_list SEMI generator
## LR(1) items:
generator_list -> generator_list SEMI generator . [ error SEMI RBRACK ]
## Transitions:
## Reductions:
-- On error SEMI RBRACK
--   reduce production generator_list -> generator_list SEMI generator

State 772:
## Known stack suffix:
## generator
## LR(1) items:
generator_list -> generator . [ error SEMI RBRACK ]
## Transitions:
## Reductions:
-- On error SEMI RBRACK
--   reduce production generator_list -> generator

State 773:
## Known stack suffix:
## LBRACE record_expr
## LR(1) items:
simple_expr -> LBRACE record_expr . opt_comma RBRACE [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACE record_expr . opt_comma error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 732
-- On opt_comma shift to state 774
## Reductions:
-- On error RBRACE
--   reduce production opt_comma ->

State 774:
## Known stack suffix:
## LBRACE record_expr opt_comma
## LR(1) items:
simple_expr -> LBRACE record_expr opt_comma . RBRACE [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACE record_expr opt_comma . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On error shift to state 775
-- On RBRACE shift to state 776
## Reductions:

State 775:
## Known stack suffix:
## LBRACE record_expr opt_comma error
## LR(1) items:
simple_expr -> LBRACE record_expr opt_comma error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LBRACE record_expr opt_comma error

State 776:
## Known stack suffix:
## LBRACE record_expr opt_comma RBRACE
## LR(1) items:
simple_expr -> LBRACE record_expr opt_comma RBRACE . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE

State 777:
## Known stack suffix:
## LBRACK list_expr
## LR(1) items:
simple_expr -> LBRACK list_expr . RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACK list_expr . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On error shift to state 778
-- On RBRACK shift to state 779
## Reductions:

State 778:
## Known stack suffix:
## LBRACK list_expr error
## LR(1) items:
simple_expr -> LBRACK list_expr error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LBRACK list_expr error

State 779:
## Known stack suffix:
## LBRACK list_expr RBRACK
## LR(1) items:
simple_expr -> LBRACK list_expr RBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LBRACK list_expr RBRACK

State 780:
## Known stack suffix:
## LBRACKBAR expr_comma_list
## LR(1) items:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ error COMMA BARRBRACK ]
simple_expr -> LBRACKBAR expr_comma_list . opt_comma BARRBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACKBAR expr_comma_list . opt_comma error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 751
-- On opt_comma shift to state 781
## Reductions:
-- On error BARRBRACK
--   reduce production opt_comma ->

State 781:
## Known stack suffix:
## LBRACKBAR expr_comma_list opt_comma
## LR(1) items:
simple_expr -> LBRACKBAR expr_comma_list opt_comma . BARRBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACKBAR expr_comma_list opt_comma . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On error shift to state 782
-- On BARRBRACK shift to state 783
## Reductions:

State 782:
## Known stack suffix:
## LBRACKBAR expr_comma_list opt_comma error
## LR(1) items:
simple_expr -> LBRACKBAR expr_comma_list opt_comma error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error

State 783:
## Known stack suffix:
## LBRACKBAR expr_comma_list opt_comma BARRBRACK
## LR(1) items:
simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK

State 784:
## Known stack suffix:
## LET MODULE mod_ident EQ mod_ident IN seq_expr
## LR(1) items:
value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr

State 785:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
value_expr -> LET rec_flag . let_bindings IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 786
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 792
-- On pattern shift to state 399
-- On let_bindings shift to state 796
-- On let_binding shift to state 801
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 786:
## Known stack suffix:
## val_ident
## LR(1) items:
let_binding -> val_ident . fun_binding [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
simple_pattern -> val_ident . [ EQ COMMA COLONCOLON BARBAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On EQ shift to state 787
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 789
-- On signed_constant shift to state 306
-- On fun_binding shift to state 791
-- On constr_longident shift to state 609
-- On constant shift to state 145
## Reductions:
-- On EQ COMMA COLONCOLON BARBAR AS
--   reduce production simple_pattern -> val_ident
** Conflict on EQ

State 787:
## Known stack suffix:
## EQ
## LR(1) items:
fun_binding -> EQ . seq_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 788
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 788:
## Known stack suffix:
## EQ seq_expr
## LR(1) items:
fun_binding -> EQ seq_expr . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND
--   reduce production fun_binding -> EQ seq_expr

State 789:
## Known stack suffix:
## simple_pattern
## LR(1) items:
fun_binding -> simple_pattern . fun_binding [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
## Transitions:
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On EQ shift to state 787
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 789
-- On signed_constant shift to state 306
-- On fun_binding shift to state 790
-- On constr_longident shift to state 609
-- On constant shift to state 145
## Reductions:

State 790:
## Known stack suffix:
## simple_pattern fun_binding
## LR(1) items:
fun_binding -> simple_pattern fun_binding . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND
--   reduce production fun_binding -> simple_pattern fun_binding

State 791:
## Known stack suffix:
## val_ident fun_binding
## LR(1) items:
let_binding -> val_ident fun_binding . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND
--   reduce production let_binding -> val_ident fun_binding

State 792:
## Known stack suffix:
## pattern_comma_list
## LR(1) items:
let_binding -> pattern_comma_list . EQ seq_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ EQ COMMA ]
## Transitions:
-- On EQ shift to state 793
-- On COMMA shift to state 795
## Reductions:

State 793:
## Known stack suffix:
## pattern_comma_list EQ
## LR(1) items:
let_binding -> pattern_comma_list EQ . seq_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 794
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 794:
## Known stack suffix:
## pattern_comma_list EQ seq_expr
## LR(1) items:
let_binding -> pattern_comma_list EQ seq_expr . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND
--   reduce production let_binding -> pattern_comma_list EQ seq_expr

State 795:
## Known stack suffix:
## pattern_comma_list COMMA
## LR(1) items:
pattern_comma_list -> pattern_comma_list COMMA . pattern_comma_list_element [ EQ COMMA ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 398
-- On pattern shift to state 399
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 796:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
let_bindings -> let_bindings . AND let_binding [ IN AND ]
value_expr -> LET rec_flag let_bindings . IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On IN shift to state 797
-- On AND shift to state 799
## Reductions:

State 797:
## Known stack suffix:
## LET rec_flag let_bindings IN
## LR(1) items:
value_expr -> LET rec_flag let_bindings IN . seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On seq_expr shift to state 798
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 629
## Reductions:

State 798:
## Known stack suffix:
## LET rec_flag let_bindings IN seq_expr
## LR(1) items:
value_expr -> LET rec_flag let_bindings IN seq_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> LET rec_flag let_bindings IN seq_expr

State 799:
## Known stack suffix:
## let_bindings AND
## LR(1) items:
let_bindings -> let_bindings AND . let_binding [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 786
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 792
-- On pattern shift to state 399
-- On let_binding shift to state 800
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 800:
## Known stack suffix:
## let_bindings AND let_binding
## LR(1) items:
let_bindings -> let_bindings AND let_binding . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND
--   reduce production let_bindings -> let_bindings AND let_binding

State 801:
## Known stack suffix:
## let_binding
## LR(1) items:
let_bindings -> let_binding . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND
--   reduce production let_bindings -> let_binding

State 802:
## Known stack suffix:
## LMATRIX matrix_expr
## LR(1) items:
matrix_expr -> matrix_expr . SEMI expr_comma_list [ error SEMI RBRACK ]
simple_expr -> LMATRIX matrix_expr . RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LMATRIX matrix_expr . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On error shift to state 803
-- On SEMI shift to state 804
-- On RBRACK shift to state 807
## Reductions:

State 803:
## Known stack suffix:
## LMATRIX matrix_expr error
## LR(1) items:
simple_expr -> LMATRIX matrix_expr error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LMATRIX matrix_expr error

State 804:
## Known stack suffix:
## matrix_expr SEMI
## LR(1) items:
matrix_expr -> matrix_expr SEMI . expr_comma_list [ error SEMI RBRACK ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 805
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
## Reductions:

State 805:
## Known stack suffix:
## matrix_expr SEMI expr_comma_list
## LR(1) items:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ error SEMI RBRACK COMMA ]
matrix_expr -> matrix_expr SEMI expr_comma_list . [ error SEMI RBRACK ]
## Transitions:
-- On COMMA shift to state 806
## Reductions:
-- On error SEMI RBRACK
--   reduce production matrix_expr -> matrix_expr SEMI expr_comma_list

State 806:
## Known stack suffix:
## expr_comma_list COMMA
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA . expr_comma_list_element [ error SEMI RBRACK COMMA ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 752
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
## Reductions:

State 807:
## Known stack suffix:
## LMATRIX matrix_expr RBRACK
## LR(1) items:
simple_expr -> LMATRIX matrix_expr RBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LMATRIX matrix_expr RBRACK

State 808:
## Known stack suffix:
## expr_comma_list
## LR(1) items:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ error SEMI RBRACK COMMA ]
matrix_expr -> expr_comma_list . [ error SEMI RBRACK ]
## Transitions:
-- On COMMA shift to state 806
## Reductions:
-- On error SEMI RBRACK
--   reduce production matrix_expr -> expr_comma_list

State 809:
## Known stack suffix:
## PREFIXOP simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> PREFIXOP simple_expr . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> PREFIXOP simple_expr

State 810:
## Known stack suffix:
## PLUS
## LR(1) items:
operator -> PLUS . [ RPAREN ]
value_expr -> PLUS . expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 811
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:
-- On RPAREN
--   reduce production operator -> PLUS

State 811:
## Known stack suffix:
## PLUS expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> PLUS expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> PLUS expr
** Conflict on WHERE

State 812:
## Known stack suffix:
## MINUS
## LR(1) items:
operator -> MINUS . [ RPAREN ]
value_expr -> MINUS . expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 813
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:
-- On RPAREN
--   reduce production operator -> MINUS

State 813:
## Known stack suffix:
## MINUS expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> MINUS expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> MINUS expr
** Conflict on WHERE

State 814:
## Known stack suffix:
## LPAREN expr_comma_list
## LR(1) items:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ error RPAREN COMMA BAR ]
simple_expr -> LPAREN expr_comma_list . opt_comma RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN expr_comma_list . BAR expr RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN expr_comma_list . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On error shift to state 815
-- On COMMA shift to state 816
-- On BAR shift to state 817
-- On opt_comma shift to state 820
## Reductions:
-- On RPAREN
--   reduce production opt_comma ->

State 815:
## Known stack suffix:
## LPAREN expr_comma_list error
## LR(1) items:
simple_expr -> LPAREN expr_comma_list error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LPAREN expr_comma_list error

State 816:
## Known stack suffix:
## expr_comma_list COMMA
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA . expr_comma_list_element [ error RPAREN COMMA BAR ]
opt_comma -> COMMA . [ RPAREN ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 752
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
## Reductions:
-- On RPAREN
--   reduce production opt_comma -> COMMA

State 817:
## Known stack suffix:
## LPAREN expr_comma_list BAR
## LR(1) items:
simple_expr -> LPAREN expr_comma_list BAR . expr RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 818
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 818:
## Known stack suffix:
## LPAREN expr_comma_list BAR expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
simple_expr -> LPAREN expr_comma_list BAR expr . RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On RPAREN shift to state 819
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 819:
## Known stack suffix:
## LPAREN expr_comma_list BAR expr RPAREN
## LR(1) items:
simple_expr -> LPAREN expr_comma_list BAR expr RPAREN . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN

State 820:
## Known stack suffix:
## LPAREN expr_comma_list opt_comma
## LR(1) items:
simple_expr -> LPAREN expr_comma_list opt_comma . RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 821
## Reductions:

State 821:
## Known stack suffix:
## LPAREN expr_comma_list opt_comma RPAREN
## LR(1) items:
simple_expr -> LPAREN expr_comma_list opt_comma RPAREN . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN

State 822:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr_comma_list_element -> expr . [ error RPAREN COMMA BAR ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN expr . SEMI basic_seq_expr RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN expr . SEMI basic_seq_expr error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On SEMI shift to state 823
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error RPAREN COMMA BAR
--   reduce production expr_comma_list_element -> expr

State 823:
## Known stack suffix:
## LPAREN expr SEMI
## LR(1) items:
simple_expr -> LPAREN expr SEMI . basic_seq_expr RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN expr SEMI . basic_seq_expr error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 824
## Reductions:

State 824:
## Known stack suffix:
## LPAREN expr SEMI basic_seq_expr
## LR(1) items:
basic_seq_expr -> basic_seq_expr . SEMI expr [ error SEMI RPAREN ]
basic_seq_expr -> basic_seq_expr . SEMI [ error SEMI RPAREN ]
simple_expr -> LPAREN expr SEMI basic_seq_expr . RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN expr SEMI basic_seq_expr . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On error shift to state 825
-- On SEMI shift to state 630
-- On RPAREN shift to state 826
## Reductions:

State 825:
## Known stack suffix:
## LPAREN expr SEMI basic_seq_expr error
## LR(1) items:
simple_expr -> LPAREN expr SEMI basic_seq_expr error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error

State 826:
## Known stack suffix:
## LPAREN expr SEMI basic_seq_expr RPAREN
## LR(1) items:
simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN

State 827:
## Known stack suffix:
## LBRACKBAR expr_comma_list
## LR(1) items:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ error COMMA BARRBRACK ]
simple_expr -> LBRACKBAR expr_comma_list . opt_comma BARRBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACKBAR expr_comma_list . opt_comma error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On COMMA shift to state 751
-- On opt_comma shift to state 828
## Reductions:
-- On error BARRBRACK
--   reduce production opt_comma ->

State 828:
## Known stack suffix:
## LBRACKBAR expr_comma_list opt_comma
## LR(1) items:
simple_expr -> LBRACKBAR expr_comma_list opt_comma . BARRBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACKBAR expr_comma_list opt_comma . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On error shift to state 829
-- On BARRBRACK shift to state 830
## Reductions:

State 829:
## Known stack suffix:
## LBRACKBAR expr_comma_list opt_comma error
## LR(1) items:
simple_expr -> LBRACKBAR expr_comma_list opt_comma error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error

State 830:
## Known stack suffix:
## LBRACKBAR expr_comma_list opt_comma BARRBRACK
## LR(1) items:
simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK

State 831:
## Known stack suffix:
## LET MODULE mod_ident EQ mod_ident IN seq_expr
## LR(1) items:
value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr

State 832:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
value_expr -> LET rec_flag . let_bindings IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 786
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 792
-- On pattern shift to state 399
-- On let_bindings shift to state 833
-- On let_binding shift to state 801
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 833:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
let_bindings -> let_bindings . AND let_binding [ IN AND ]
value_expr -> LET rec_flag let_bindings . IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On IN shift to state 834
-- On AND shift to state 799
## Reductions:

State 834:
## Known stack suffix:
## LET rec_flag let_bindings IN
## LR(1) items:
value_expr -> LET rec_flag let_bindings IN . seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 835
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 835:
## Known stack suffix:
## LET rec_flag let_bindings IN seq_expr
## LR(1) items:
value_expr -> LET rec_flag let_bindings IN seq_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> LET rec_flag let_bindings IN seq_expr

State 836:
## Known stack suffix:
## expr_comma_list_element
## LR(1) items:
expr_comma_list -> expr_comma_list_element . [ WITH COMMA ]
## Transitions:
## Reductions:
-- On WITH COMMA
--   reduce production expr_comma_list -> expr_comma_list_element

State 837:
## Known stack suffix:
## MATCH expr_comma_list
## LR(1) items:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ WITH COMMA ]
value_expr -> MATCH expr_comma_list . opt_comma WITH opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 838
-- On opt_comma shift to state 844
## Reductions:
-- On WITH
--   reduce production opt_comma ->

State 838:
## Known stack suffix:
## expr_comma_list COMMA
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA . expr_comma_list_element [ WITH COMMA ]
opt_comma -> COMMA . [ WITH ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 43
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 69
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr_comma_list_element shift to state 839
-- On expr shift to state 840
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On colonized_symbol shift to state 841
## Reductions:
-- On WITH
--   reduce production opt_comma -> COMMA

State 839:
## Known stack suffix:
## expr_comma_list COMMA expr_comma_list_element
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA expr_comma_list_element . [ WITH COMMA ]
## Transitions:
## Reductions:
-- On WITH COMMA
--   reduce production expr_comma_list -> expr_comma_list COMMA expr_comma_list_element

State 840:
## Known stack suffix:
## expr
## LR(1) items:
expr_comma_list_element -> expr . [ WITH COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH COMMA
--   reduce production expr_comma_list_element -> expr

State 841:
## Known stack suffix:
## colonized_symbol
## LR(1) items:
expr_comma_list_element -> colonized_symbol . COLON expr [ WITH COMMA ]
## Transitions:
-- On COLON shift to state 842
## Reductions:

State 842:
## Known stack suffix:
## colonized_symbol COLON
## LR(1) items:
expr_comma_list_element -> colonized_symbol COLON . expr [ WITH COMMA ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 843
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 843:
## Known stack suffix:
## colonized_symbol COLON expr
## LR(1) items:
expr_comma_list_element -> colonized_symbol COLON expr . [ WITH COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH COMMA
--   reduce production expr_comma_list_element -> colonized_symbol COLON expr

State 844:
## Known stack suffix:
## MATCH expr_comma_list opt_comma
## LR(1) items:
value_expr -> MATCH expr_comma_list opt_comma . WITH opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WITH shift to state 845
## Reductions:

State 845:
## Known stack suffix:
## MATCH expr_comma_list opt_comma WITH
## LR(1) items:
value_expr -> MATCH expr_comma_list opt_comma WITH . opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On BAR shift to state 125
-- On opt_bar shift to state 846
## Reductions:
-- On WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CARRAYPAT BOXPAT ARRAYPAT AMPERREST
--   reduce production opt_bar ->

State 846:
## Known stack suffix:
## MATCH expr_comma_list opt_comma WITH opt_bar
## LR(1) items:
value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar . match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 710
-- On pattern shift to state 399
-- On match_cases shift to state 847
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 847:
## Known stack suffix:
## MATCH expr_comma_list opt_comma WITH opt_bar match_cases
## LR(1) items:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On BAR shift to state 714
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR AMPERAMPER
--   reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases

State 848:
## Known stack suffix:
## MATCH expr
## LR(1) items:
expr_comma_list_element -> expr . [ WITH COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> MATCH expr . WITH opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WITH shift to state 849
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH COMMA
--   reduce production expr_comma_list_element -> expr
** Conflict on WITH

State 849:
## Known stack suffix:
## MATCH expr WITH
## LR(1) items:
value_expr -> MATCH expr WITH . opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On BAR shift to state 125
-- On opt_bar shift to state 850
## Reductions:
-- On WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CARRAYPAT BOXPAT ARRAYPAT AMPERREST
--   reduce production opt_bar ->

State 850:
## Known stack suffix:
## MATCH expr WITH opt_bar
## LR(1) items:
value_expr -> MATCH expr WITH opt_bar . match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 710
-- On pattern shift to state 399
-- On match_cases shift to state 851
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 851:
## Known stack suffix:
## MATCH expr WITH opt_bar match_cases
## LR(1) items:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> MATCH expr WITH opt_bar match_cases . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On BAR shift to state 714
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR AMPERAMPER
--   reduce production value_expr -> MATCH expr WITH opt_bar match_cases

State 852:
## Known stack suffix:
## LVECTOR list_expr
## LR(1) items:
simple_expr -> LVECTOR list_expr . RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LVECTOR list_expr . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On error shift to state 853
-- On RBRACK shift to state 854
## Reductions:

State 853:
## Known stack suffix:
## LVECTOR list_expr error
## LR(1) items:
simple_expr -> LVECTOR list_expr error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LVECTOR list_expr error

State 854:
## Known stack suffix:
## LVECTOR list_expr RBRACK
## LR(1) items:
simple_expr -> LVECTOR list_expr RBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production simple_expr -> LVECTOR list_expr RBRACK

State 855:
## Known stack suffix:
## RAISE expr
## LR(1) items:
no_value_expr -> RAISE expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production no_value_expr -> RAISE expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 856:
## Known stack suffix:
## LMATRIX matrix_expr
## LR(1) items:
matrix_expr -> matrix_expr . SEMI expr_comma_list [ error SEMI RBRACK ]
simple_expr -> LMATRIX matrix_expr . RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LMATRIX matrix_expr . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On error shift to state 857
-- On SEMI shift to state 804
-- On RBRACK shift to state 858
## Reductions:

State 857:
## Known stack suffix:
## LMATRIX matrix_expr error
## LR(1) items:
simple_expr -> LMATRIX matrix_expr error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LMATRIX matrix_expr error

State 858:
## Known stack suffix:
## LMATRIX matrix_expr RBRACK
## LR(1) items:
simple_expr -> LMATRIX matrix_expr RBRACK . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LMATRIX matrix_expr RBRACK

State 859:
## Known stack suffix:
## TRY seq_expr
## LR(1) items:
value_expr -> TRY seq_expr . WITH opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> TRY seq_expr . WITH error [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WITH shift to state 860
## Reductions:

State 860:
## Known stack suffix:
## TRY seq_expr WITH
## LR(1) items:
value_expr -> TRY seq_expr WITH . opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> TRY seq_expr WITH . error [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On error shift to state 861
-- On BAR shift to state 125
-- On opt_bar shift to state 862
## Reductions:
-- On WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CARRAYPAT BOXPAT ARRAYPAT AMPERREST
--   reduce production opt_bar ->

State 861:
## Known stack suffix:
## TRY seq_expr WITH error
## LR(1) items:
value_expr -> TRY seq_expr WITH error . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production value_expr -> TRY seq_expr WITH error

State 862:
## Known stack suffix:
## TRY seq_expr WITH opt_bar
## LR(1) items:
value_expr -> TRY seq_expr WITH opt_bar . match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 710
-- On pattern shift to state 399
-- On match_cases shift to state 863
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 863:
## Known stack suffix:
## TRY seq_expr WITH opt_bar match_cases
## LR(1) items:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> TRY seq_expr WITH opt_bar match_cases . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On BAR shift to state 714
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR AMPERAMPER
--   reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases

State 864:
## Known stack suffix:
## WHERE expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> WHERE expr . THEN expr ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> WHERE expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On THEN shift to state 865
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE END ELSE DOTDOT COMMA COLON BARRBRACK BARCOLON BAR
--   reduce production value_expr -> WHERE expr
** Conflict on WHERE THEN

State 865:
## Known stack suffix:
## WHERE expr THEN
## LR(1) items:
value_expr -> WHERE expr THEN . expr ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 866
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 866:
## Known stack suffix:
## WHERE expr THEN expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> WHERE expr THEN expr . ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On ELSE shift to state 867
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 867:
## Known stack suffix:
## WHERE expr THEN expr ELSE
## LR(1) items:
value_expr -> WHERE expr THEN expr ELSE . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 868
-- On constr_longident shift to state 513
-- On constant shift to state 516
## Reductions:

State 868:
## Known stack suffix:
## WHERE expr THEN expr ELSE expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> WHERE expr THEN expr ELSE expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error WHERE THEN SEMI RPAREN RBRACK RBRACE END ELSE DOTDOT COMMA COLON BARRBRACK BARCOLON BAR
--   reduce production value_expr -> WHERE expr THEN expr ELSE expr
** Conflict on WHERE

State 869:
## Known stack suffix:
## LPAREN expr_comma_list
## LR(1) items:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ error RPAREN COMMA BAR ]
simple_expr -> LPAREN expr_comma_list . opt_comma RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN expr_comma_list . BAR expr RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN expr_comma_list . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On error shift to state 870
-- On COMMA shift to state 816
-- On BAR shift to state 871
-- On opt_comma shift to state 874
## Reductions:
-- On RPAREN
--   reduce production opt_comma ->

State 870:
## Known stack suffix:
## LPAREN expr_comma_list error
## LR(1) items:
simple_expr -> LPAREN expr_comma_list error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LPAREN expr_comma_list error

State 871:
## Known stack suffix:
## LPAREN expr_comma_list BAR
## LR(1) items:
simple_expr -> LPAREN expr_comma_list BAR . expr RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 872
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 872:
## Known stack suffix:
## LPAREN expr_comma_list BAR expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
simple_expr -> LPAREN expr_comma_list BAR expr . RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On RPAREN shift to state 873
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 873:
## Known stack suffix:
## LPAREN expr_comma_list BAR expr RPAREN
## LR(1) items:
simple_expr -> LPAREN expr_comma_list BAR expr RPAREN . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN

State 874:
## Known stack suffix:
## LPAREN expr_comma_list opt_comma
## LR(1) items:
simple_expr -> LPAREN expr_comma_list opt_comma . RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On RPAREN shift to state 875
## Reductions:

State 875:
## Known stack suffix:
## LPAREN expr_comma_list opt_comma RPAREN
## LR(1) items:
simple_expr -> LPAREN expr_comma_list opt_comma RPAREN . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN

State 876:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr_comma_list_element -> expr . [ error RPAREN COMMA BAR ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN expr . SEMI basic_seq_expr RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN expr . SEMI basic_seq_expr error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On SEMI shift to state 877
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
## Reductions:
-- On error RPAREN COMMA BAR
--   reduce production expr_comma_list_element -> expr

State 877:
## Known stack suffix:
## LPAREN expr SEMI
## LR(1) items:
simple_expr -> LPAREN expr SEMI . basic_seq_expr RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN expr SEMI . basic_seq_expr error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 878
## Reductions:

State 878:
## Known stack suffix:
## LPAREN expr SEMI basic_seq_expr
## LR(1) items:
basic_seq_expr -> basic_seq_expr . SEMI expr [ error SEMI RPAREN ]
basic_seq_expr -> basic_seq_expr . SEMI [ error SEMI RPAREN ]
simple_expr -> LPAREN expr SEMI basic_seq_expr . RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN expr SEMI basic_seq_expr . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On error shift to state 879
-- On SEMI shift to state 630
-- On RPAREN shift to state 880
## Reductions:

State 879:
## Known stack suffix:
## LPAREN expr SEMI basic_seq_expr error
## LR(1) items:
simple_expr -> LPAREN expr SEMI basic_seq_expr error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error

State 880:
## Known stack suffix:
## LPAREN expr SEMI basic_seq_expr RPAREN
## LR(1) items:
simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN

State 881:
## Known stack suffix:
## MATCH expr_comma_list
## LR(1) items:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ WITH COMMA ]
value_expr -> MATCH expr_comma_list . opt_comma WITH opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On COMMA shift to state 838
-- On opt_comma shift to state 882
## Reductions:
-- On WITH
--   reduce production opt_comma ->

State 882:
## Known stack suffix:
## MATCH expr_comma_list opt_comma
## LR(1) items:
value_expr -> MATCH expr_comma_list opt_comma . WITH opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WITH shift to state 883
## Reductions:

State 883:
## Known stack suffix:
## MATCH expr_comma_list opt_comma WITH
## LR(1) items:
value_expr -> MATCH expr_comma_list opt_comma WITH . opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On BAR shift to state 125
-- On opt_bar shift to state 884
## Reductions:
-- On WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CARRAYPAT BOXPAT ARRAYPAT AMPERREST
--   reduce production opt_bar ->

State 884:
## Known stack suffix:
## MATCH expr_comma_list opt_comma WITH opt_bar
## LR(1) items:
value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar . match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 396
-- On pattern shift to state 399
-- On match_cases shift to state 885
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 885:
## Known stack suffix:
## MATCH expr_comma_list opt_comma WITH opt_bar match_cases
## LR(1) items:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On BAR shift to state 616
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases

State 886:
## Known stack suffix:
## MATCH expr
## LR(1) items:
expr_comma_list_element -> expr . [ WITH COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> MATCH expr . WITH opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WITH shift to state 887
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH COMMA
--   reduce production expr_comma_list_element -> expr
** Conflict on WITH

State 887:
## Known stack suffix:
## MATCH expr WITH
## LR(1) items:
value_expr -> MATCH expr WITH . opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On BAR shift to state 125
-- On opt_bar shift to state 888
## Reductions:
-- On WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CARRAYPAT BOXPAT ARRAYPAT AMPERREST
--   reduce production opt_bar ->

State 888:
## Known stack suffix:
## MATCH expr WITH opt_bar
## LR(1) items:
value_expr -> MATCH expr WITH opt_bar . match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 396
-- On pattern shift to state 399
-- On match_cases shift to state 889
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 889:
## Known stack suffix:
## MATCH expr WITH opt_bar match_cases
## LR(1) items:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> MATCH expr WITH opt_bar match_cases . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On BAR shift to state 616
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> MATCH expr WITH opt_bar match_cases

State 890:
## Known stack suffix:
## MINUS expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> MINUS expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> MINUS expr
** Conflict on WHERE

State 891:
## Known stack suffix:
## PLUS expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> PLUS expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> PLUS expr
** Conflict on WHERE

State 892:
## Known stack suffix:
## WHILE expr
## LR(1) items:
no_value_expr -> WHILE expr . DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On DO shift to state 893
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 893:
## Known stack suffix:
## WHILE expr DO
## LR(1) items:
no_value_expr -> WHILE expr DO . seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 894
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 894:
## Known stack suffix:
## WHILE expr DO seq_expr
## LR(1) items:
no_value_expr -> WHILE expr DO seq_expr . DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
-- On DONE shift to state 895
## Reductions:

State 895:
## Known stack suffix:
## WHILE expr DO seq_expr DONE
## LR(1) items:
no_value_expr -> WHILE expr DO seq_expr DONE . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER
--   reduce production no_value_expr -> WHILE expr DO seq_expr DONE

State 896:
## Known stack suffix:
## LVECTOR list_expr
## LR(1) items:
simple_expr -> LVECTOR list_expr . RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LVECTOR list_expr . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On error shift to state 897
-- On RBRACK shift to state 898
## Reductions:

State 897:
## Known stack suffix:
## LVECTOR list_expr error
## LR(1) items:
simple_expr -> LVECTOR list_expr error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LVECTOR list_expr error

State 898:
## Known stack suffix:
## LVECTOR list_expr RBRACK
## LR(1) items:
simple_expr -> LVECTOR list_expr RBRACK . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> LVECTOR list_expr RBRACK

State 899:
## Known stack suffix:
## PREFIXOP simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> PREFIXOP simple_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production simple_expr -> PREFIXOP simple_expr

State 900:
## Known stack suffix:
## RAISE expr
## LR(1) items:
no_value_expr -> RAISE expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production no_value_expr -> RAISE expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 901:
## Known stack suffix:
## TRY seq_expr
## LR(1) items:
value_expr -> TRY seq_expr . WITH opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> TRY seq_expr . WITH error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WITH shift to state 902
## Reductions:

State 902:
## Known stack suffix:
## TRY seq_expr WITH
## LR(1) items:
value_expr -> TRY seq_expr WITH . opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> TRY seq_expr WITH . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On error shift to state 903
-- On BAR shift to state 125
-- On opt_bar shift to state 904
## Reductions:
-- On WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CARRAYPAT BOXPAT ARRAYPAT AMPERREST
--   reduce production opt_bar ->

State 903:
## Known stack suffix:
## TRY seq_expr WITH error
## LR(1) items:
value_expr -> TRY seq_expr WITH error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> TRY seq_expr WITH error

State 904:
## Known stack suffix:
## TRY seq_expr WITH opt_bar
## LR(1) items:
value_expr -> TRY seq_expr WITH opt_bar . match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 396
-- On pattern shift to state 399
-- On match_cases shift to state 905
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 905:
## Known stack suffix:
## TRY seq_expr WITH opt_bar match_cases
## LR(1) items:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> TRY seq_expr WITH opt_bar match_cases . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On BAR shift to state 616
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR ASSERT AND AMPERAMPER ABOVE
--   reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases

State 906:
## Known stack suffix:
## WHERE expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> WHERE expr . THEN expr ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> WHERE expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On THEN shift to state 907
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLON CHAR CASE BELOW BEGIN BAR ASSERT AND ABOVE
--   reduce production value_expr -> WHERE expr
** Conflict on WHERE THEN

State 907:
## Known stack suffix:
## WHERE expr THEN
## LR(1) items:
value_expr -> WHERE expr THEN . expr ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 908
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 908:
## Known stack suffix:
## WHERE expr THEN expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> WHERE expr THEN expr . ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On ELSE shift to state 909
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 909:
## Known stack suffix:
## WHERE expr THEN expr ELSE
## LR(1) items:
value_expr -> WHERE expr THEN expr ELSE . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 910
-- On constr_longident shift to state 431
-- On constant shift to state 415
## Reductions:

State 910:
## Known stack suffix:
## WHERE expr THEN expr ELSE expr
## LR(1) items:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> WHERE expr THEN expr ELSE expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING SHARP SEMISEMI SEMI RPAREN RAISE PREFIXOP OPEN MODULE MINUSGREATER MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLON CHAR CASE BELOW BEGIN BAR ASSERT AND ABOVE
--   reduce production value_expr -> WHERE expr THEN expr ELSE expr
** Conflict on WHERE

State 911:
## Known stack suffix:
## WHILE expr
## LR(1) items:
no_value_expr -> WHILE expr . DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
## Transitions:
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On DO shift to state 912
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
## Reductions:

State 912:
## Known stack suffix:
## WHILE expr DO
## LR(1) items:
no_value_expr -> WHILE expr DO . seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 913
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 913:
## Known stack suffix:
## WHILE expr DO seq_expr
## LR(1) items:
no_value_expr -> WHILE expr DO seq_expr . DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
-- On DONE shift to state 914
## Reductions:

State 914:
## Known stack suffix:
## WHILE expr DO seq_expr DONE
## LR(1) items:
no_value_expr -> WHILE expr DO seq_expr DONE . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
## Transitions:
## Reductions:
-- On WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE
--   reduce production no_value_expr -> WHILE expr DO seq_expr DONE

State 915:
## Known stack suffix:
## TYPE
## LR(1) items:
top_expr -> TYPE . type_vars LIDENT EQ opt_bar tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE . LIDENT EQ opt_bar tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE . LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE . LIDENT EQ LBRACE lbl_type_list opt_comma error [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On TIDENT shift to state 916
-- On LPAREN shift to state 917
-- On LIDENT shift to state 923
-- On type_vars shift to state 970
## Reductions:

State 916:
## Known stack suffix:
## TIDENT
## LR(1) items:
type_vars -> TIDENT . [ LIDENT ]
## Transitions:
## Reductions:
-- On LIDENT
--   reduce production type_vars -> TIDENT

State 917:
## Known stack suffix:
## LPAREN
## LR(1) items:
type_vars -> LPAREN . type_list RPAREN [ LIDENT ]
## Transitions:
-- On TIDENT shift to state 918
-- On type_list shift to state 919
## Reductions:

State 918:
## Known stack suffix:
## TIDENT
## LR(1) items:
type_list -> TIDENT . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production type_list -> TIDENT

State 919:
## Known stack suffix:
## LPAREN type_list
## LR(1) items:
type_list -> type_list . COMMA TIDENT [ RPAREN COMMA ]
type_vars -> LPAREN type_list . RPAREN [ LIDENT ]
## Transitions:
-- On RPAREN shift to state 920
-- On COMMA shift to state 921
## Reductions:

State 920:
## Known stack suffix:
## LPAREN type_list RPAREN
## LR(1) items:
type_vars -> LPAREN type_list RPAREN . [ LIDENT ]
## Transitions:
## Reductions:
-- On LIDENT
--   reduce production type_vars -> LPAREN type_list RPAREN

State 921:
## Known stack suffix:
## type_list COMMA
## LR(1) items:
type_list -> type_list COMMA . TIDENT [ RPAREN COMMA ]
## Transitions:
-- On TIDENT shift to state 922
## Reductions:

State 922:
## Known stack suffix:
## type_list COMMA TIDENT
## LR(1) items:
type_list -> type_list COMMA TIDENT . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production type_list -> type_list COMMA TIDENT

State 923:
## Known stack suffix:
## TYPE LIDENT
## LR(1) items:
top_expr -> TYPE LIDENT . EQ opt_bar tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE LIDENT . EQ LBRACE lbl_type_list opt_comma RBRACE [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE LIDENT . EQ LBRACE lbl_type_list opt_comma error [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On EQ shift to state 924
## Reductions:

State 924:
## Known stack suffix:
## TYPE LIDENT EQ
## LR(1) items:
top_expr -> TYPE LIDENT EQ . opt_bar tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE LIDENT EQ . LBRACE lbl_type_list opt_comma RBRACE [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE LIDENT EQ . LBRACE lbl_type_list opt_comma error [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On LBRACE shift to state 925
-- On BAR shift to state 125
-- On opt_bar shift to state 951
## Reductions:
-- On UIDENT
--   reduce production opt_bar ->

State 925:
## Known stack suffix:
## TYPE LIDENT EQ LBRACE
## LR(1) items:
top_expr -> TYPE LIDENT EQ LBRACE . lbl_type_list opt_comma RBRACE [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE LIDENT EQ LBRACE . lbl_type_list opt_comma error [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On MUTABLE shift to state 926
-- On LIDENT shift to state 941
-- On lbl_type_list shift to state 944
-- On field_defn shift to state 950
## Reductions:

State 926:
## Known stack suffix:
## MUTABLE
## LR(1) items:
field_defn -> MUTABLE . LIDENT COLON type_expr [ error RBRACE COMMA ]
## Transitions:
-- On LIDENT shift to state 927
## Reductions:

State 927:
## Known stack suffix:
## MUTABLE LIDENT
## LR(1) items:
field_defn -> MUTABLE LIDENT . COLON type_expr [ error RBRACE COMMA ]
## Transitions:
-- On COLON shift to state 928
## Reductions:

State 928:
## Known stack suffix:
## MUTABLE LIDENT COLON
## LR(1) items:
field_defn -> MUTABLE LIDENT COLON . type_expr [ error RBRACE COMMA ]
## Transitions:
-- On UIDENT shift to state 492
-- On TIDENT shift to state 929
-- On LPAREN shift to state 930
-- On LIDENT shift to state 495
-- On type_expr shift to state 940
-- On label_longident shift to state 938
## Reductions:

State 929:
## Known stack suffix:
## TIDENT
## LR(1) items:
type_expr -> TIDENT . [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
## Transitions:
## Reductions:
-- On error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA
--   reduce production type_expr -> TIDENT

State 930:
## Known stack suffix:
## LPAREN
## LR(1) items:
type_expr -> LPAREN . type_expr RPAREN [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> LPAREN . type_expr error [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
## Transitions:
-- On UIDENT shift to state 492
-- On TIDENT shift to state 929
-- On LPAREN shift to state 930
-- On LIDENT shift to state 495
-- On type_expr shift to state 931
-- On label_longident shift to state 938
## Reductions:

State 931:
## Known stack suffix:
## LPAREN type_expr
## LR(1) items:
type_expr -> type_expr . label_longident [ error UIDENT STAR RPAREN MINUSGREATER LIDENT ]
type_expr -> type_expr . STAR type_expr [ error UIDENT STAR RPAREN MINUSGREATER LIDENT ]
type_expr -> type_expr . MINUSGREATER type_expr [ error UIDENT STAR RPAREN MINUSGREATER LIDENT ]
type_expr -> LPAREN type_expr . RPAREN [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> LPAREN type_expr . error [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
## Transitions:
-- On error shift to state 932
-- On UIDENT shift to state 492
-- On STAR shift to state 933
-- On RPAREN shift to state 939
-- On MINUSGREATER shift to state 935
-- On LIDENT shift to state 495
-- On label_longident shift to state 937
## Reductions:

State 932:
## Known stack suffix:
## LPAREN type_expr error
## LR(1) items:
type_expr -> LPAREN type_expr error . [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
## Transitions:
## Reductions:
-- On error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA
--   reduce production type_expr -> LPAREN type_expr error

State 933:
## Known stack suffix:
## type_expr STAR
## LR(1) items:
type_expr -> type_expr STAR . type_expr [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
## Transitions:
-- On UIDENT shift to state 492
-- On TIDENT shift to state 929
-- On LPAREN shift to state 930
-- On LIDENT shift to state 495
-- On type_expr shift to state 934
-- On label_longident shift to state 938
## Reductions:

State 934:
## Known stack suffix:
## type_expr STAR type_expr
## LR(1) items:
type_expr -> type_expr . label_longident [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . STAR type_expr [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr STAR type_expr . [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . MINUSGREATER type_expr [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
## Transitions:
-- On UIDENT shift to state 492
-- On MINUSGREATER shift to state 935
-- On LIDENT shift to state 495
-- On label_longident shift to state 937
## Reductions:
-- On error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA
--   reduce production type_expr -> type_expr STAR type_expr
** Conflict on UIDENT MINUSGREATER LIDENT

State 935:
## Known stack suffix:
## type_expr MINUSGREATER
## LR(1) items:
type_expr -> type_expr MINUSGREATER . type_expr [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
## Transitions:
-- On UIDENT shift to state 492
-- On TIDENT shift to state 929
-- On LPAREN shift to state 930
-- On LIDENT shift to state 495
-- On type_expr shift to state 936
-- On label_longident shift to state 938
## Reductions:

State 936:
## Known stack suffix:
## type_expr MINUSGREATER type_expr
## LR(1) items:
type_expr -> type_expr . label_longident [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . STAR type_expr [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . MINUSGREATER type_expr [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr MINUSGREATER type_expr . [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
## Transitions:
-- On UIDENT shift to state 492
-- On STAR shift to state 933
-- On MINUSGREATER shift to state 935
-- On LIDENT shift to state 495
-- On label_longident shift to state 937
## Reductions:
-- On error UIDENT RPAREN RBRACE MINUSGREATER LIDENT COMMA
--   reduce production type_expr -> type_expr MINUSGREATER type_expr
** Conflict on UIDENT MINUSGREATER LIDENT

State 937:
## Known stack suffix:
## type_expr label_longident
## LR(1) items:
type_expr -> type_expr label_longident . [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
## Transitions:
## Reductions:
-- On error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA
--   reduce production type_expr -> type_expr label_longident

State 938:
## Known stack suffix:
## label_longident
## LR(1) items:
type_expr -> label_longident . [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
## Transitions:
## Reductions:
-- On error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA
--   reduce production type_expr -> label_longident

State 939:
## Known stack suffix:
## LPAREN type_expr RPAREN
## LR(1) items:
type_expr -> LPAREN type_expr RPAREN . [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
## Transitions:
## Reductions:
-- On error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA
--   reduce production type_expr -> LPAREN type_expr RPAREN

State 940:
## Known stack suffix:
## MUTABLE LIDENT COLON type_expr
## LR(1) items:
field_defn -> MUTABLE LIDENT COLON type_expr . [ error RBRACE COMMA ]
type_expr -> type_expr . label_longident [ error UIDENT STAR RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . STAR type_expr [ error UIDENT STAR RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . MINUSGREATER type_expr [ error UIDENT STAR RBRACE MINUSGREATER LIDENT COMMA ]
## Transitions:
-- On UIDENT shift to state 492
-- On STAR shift to state 933
-- On MINUSGREATER shift to state 935
-- On LIDENT shift to state 495
-- On label_longident shift to state 937
## Reductions:
-- On error RBRACE COMMA
--   reduce production field_defn -> MUTABLE LIDENT COLON type_expr

State 941:
## Known stack suffix:
## LIDENT
## LR(1) items:
field_defn -> LIDENT . COLON type_expr [ error RBRACE COMMA ]
## Transitions:
-- On COLON shift to state 942
## Reductions:

State 942:
## Known stack suffix:
## LIDENT COLON
## LR(1) items:
field_defn -> LIDENT COLON . type_expr [ error RBRACE COMMA ]
## Transitions:
-- On UIDENT shift to state 492
-- On TIDENT shift to state 929
-- On LPAREN shift to state 930
-- On LIDENT shift to state 495
-- On type_expr shift to state 943
-- On label_longident shift to state 938
## Reductions:

State 943:
## Known stack suffix:
## LIDENT COLON type_expr
## LR(1) items:
field_defn -> LIDENT COLON type_expr . [ error RBRACE COMMA ]
type_expr -> type_expr . label_longident [ error UIDENT STAR RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . STAR type_expr [ error UIDENT STAR RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . MINUSGREATER type_expr [ error UIDENT STAR RBRACE MINUSGREATER LIDENT COMMA ]
## Transitions:
-- On UIDENT shift to state 492
-- On STAR shift to state 933
-- On MINUSGREATER shift to state 935
-- On LIDENT shift to state 495
-- On label_longident shift to state 937
## Reductions:
-- On error RBRACE COMMA
--   reduce production field_defn -> LIDENT COLON type_expr

State 944:
## Known stack suffix:
## TYPE LIDENT EQ LBRACE lbl_type_list
## LR(1) items:
lbl_type_list -> lbl_type_list . COMMA field_defn [ error RBRACE COMMA ]
top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list . opt_comma RBRACE [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list . opt_comma error [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On COMMA shift to state 945
-- On opt_comma shift to state 947
## Reductions:
-- On error RBRACE
--   reduce production opt_comma ->

State 945:
## Known stack suffix:
## lbl_type_list COMMA
## LR(1) items:
lbl_type_list -> lbl_type_list COMMA . field_defn [ error RBRACE COMMA ]
opt_comma -> COMMA . [ error RBRACE ]
## Transitions:
-- On MUTABLE shift to state 926
-- On LIDENT shift to state 941
-- On field_defn shift to state 946
## Reductions:
-- On error RBRACE
--   reduce production opt_comma -> COMMA

State 946:
## Known stack suffix:
## lbl_type_list COMMA field_defn
## LR(1) items:
lbl_type_list -> lbl_type_list COMMA field_defn . [ error RBRACE COMMA ]
## Transitions:
## Reductions:
-- On error RBRACE COMMA
--   reduce production lbl_type_list -> lbl_type_list COMMA field_defn

State 947:
## Known stack suffix:
## TYPE LIDENT EQ LBRACE lbl_type_list opt_comma
## LR(1) items:
top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma . RBRACE [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma . error [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On error shift to state 948
-- On RBRACE shift to state 949
## Reductions:

State 948:
## Known stack suffix:
## TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
## LR(1) items:
top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error

State 949:
## Known stack suffix:
## TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
## LR(1) items:
top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE

State 950:
## Known stack suffix:
## field_defn
## LR(1) items:
lbl_type_list -> field_defn . [ error RBRACE COMMA ]
## Transitions:
## Reductions:
-- On error RBRACE COMMA
--   reduce production lbl_type_list -> field_defn

State 951:
## Known stack suffix:
## TYPE LIDENT EQ opt_bar
## LR(1) items:
top_expr -> TYPE LIDENT EQ opt_bar . tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On UIDENT shift to state 952
-- On tag_list shift to state 966
-- On simple_tag_type shift to state 969
## Reductions:

State 952:
## Known stack suffix:
## UIDENT
## LR(1) items:
simple_tag_type -> UIDENT . OF type_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
simple_tag_type -> UIDENT . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
-- On OF shift to state 953
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT
--   reduce production simple_tag_type -> UIDENT

State 953:
## Known stack suffix:
## UIDENT OF
## LR(1) items:
simple_tag_type -> UIDENT OF . type_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
-- On UIDENT shift to state 213
-- On TIDENT shift to state 954
-- On LPAREN shift to state 955
-- On LIDENT shift to state 216
-- On type_expr shift to state 959
-- On label_longident shift to state 965
## Reductions:

State 954:
## Known stack suffix:
## TIDENT
## LR(1) items:
type_expr -> TIDENT . [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT
--   reduce production type_expr -> TIDENT

State 955:
## Known stack suffix:
## LPAREN
## LR(1) items:
type_expr -> LPAREN . type_expr RPAREN [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> LPAREN . type_expr error [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
-- On UIDENT shift to state 492
-- On TIDENT shift to state 929
-- On LPAREN shift to state 930
-- On LIDENT shift to state 495
-- On type_expr shift to state 956
-- On label_longident shift to state 938
## Reductions:

State 956:
## Known stack suffix:
## LPAREN type_expr
## LR(1) items:
type_expr -> type_expr . label_longident [ error UIDENT STAR RPAREN MINUSGREATER LIDENT ]
type_expr -> type_expr . STAR type_expr [ error UIDENT STAR RPAREN MINUSGREATER LIDENT ]
type_expr -> type_expr . MINUSGREATER type_expr [ error UIDENT STAR RPAREN MINUSGREATER LIDENT ]
type_expr -> LPAREN type_expr . RPAREN [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> LPAREN type_expr . error [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
-- On error shift to state 957
-- On UIDENT shift to state 492
-- On STAR shift to state 933
-- On RPAREN shift to state 958
-- On MINUSGREATER shift to state 935
-- On LIDENT shift to state 495
-- On label_longident shift to state 937
## Reductions:

State 957:
## Known stack suffix:
## LPAREN type_expr error
## LR(1) items:
type_expr -> LPAREN type_expr error . [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT
--   reduce production type_expr -> LPAREN type_expr error

State 958:
## Known stack suffix:
## LPAREN type_expr RPAREN
## LR(1) items:
type_expr -> LPAREN type_expr RPAREN . [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT
--   reduce production type_expr -> LPAREN type_expr RPAREN

State 959:
## Known stack suffix:
## UIDENT OF type_expr
## LR(1) items:
simple_tag_type -> UIDENT OF type_expr . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr . label_longident [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr . STAR type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr . MINUSGREATER type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
-- On UIDENT shift to state 213
-- On STAR shift to state 960
-- On MINUSGREATER shift to state 962
-- On LIDENT shift to state 216
-- On label_longident shift to state 964
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT
--   reduce production simple_tag_type -> UIDENT OF type_expr
** Conflict on UIDENT LIDENT

State 960:
## Known stack suffix:
## type_expr STAR
## LR(1) items:
type_expr -> type_expr STAR . type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
-- On UIDENT shift to state 213
-- On TIDENT shift to state 954
-- On LPAREN shift to state 955
-- On LIDENT shift to state 216
-- On type_expr shift to state 961
-- On label_longident shift to state 965
## Reductions:

State 961:
## Known stack suffix:
## type_expr STAR type_expr
## LR(1) items:
type_expr -> type_expr . label_longident [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr . STAR type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr STAR type_expr . [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr . MINUSGREATER type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
-- On UIDENT shift to state 213
-- On MINUSGREATER shift to state 962
-- On LIDENT shift to state 216
-- On label_longident shift to state 964
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT
--   reduce production type_expr -> type_expr STAR type_expr
** Conflict on UIDENT MINUSGREATER LIDENT

State 962:
## Known stack suffix:
## type_expr MINUSGREATER
## LR(1) items:
type_expr -> type_expr MINUSGREATER . type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
-- On UIDENT shift to state 213
-- On TIDENT shift to state 954
-- On LPAREN shift to state 955
-- On LIDENT shift to state 216
-- On type_expr shift to state 963
-- On label_longident shift to state 965
## Reductions:

State 963:
## Known stack suffix:
## type_expr MINUSGREATER type_expr
## LR(1) items:
type_expr -> type_expr . label_longident [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr . STAR type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr . MINUSGREATER type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr MINUSGREATER type_expr . [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
-- On UIDENT shift to state 213
-- On STAR shift to state 960
-- On MINUSGREATER shift to state 962
-- On LIDENT shift to state 216
-- On label_longident shift to state 964
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT
--   reduce production type_expr -> type_expr MINUSGREATER type_expr
** Conflict on UIDENT MINUSGREATER LIDENT

State 964:
## Known stack suffix:
## type_expr label_longident
## LR(1) items:
type_expr -> type_expr label_longident . [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT
--   reduce production type_expr -> type_expr label_longident

State 965:
## Known stack suffix:
## label_longident
## LR(1) items:
type_expr -> label_longident . [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT
--   reduce production type_expr -> label_longident

State 966:
## Known stack suffix:
## TYPE LIDENT EQ opt_bar tag_list
## LR(1) items:
tag_list -> tag_list . BAR simple_tag_type [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
top_expr -> TYPE LIDENT EQ opt_bar tag_list . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On BAR shift to state 967
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list

State 967:
## Known stack suffix:
## tag_list BAR
## LR(1) items:
tag_list -> tag_list BAR . simple_tag_type [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
-- On UIDENT shift to state 952
-- On simple_tag_type shift to state 968
## Reductions:

State 968:
## Known stack suffix:
## tag_list BAR simple_tag_type
## LR(1) items:
tag_list -> tag_list BAR simple_tag_type . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT
--   reduce production tag_list -> tag_list BAR simple_tag_type

State 969:
## Known stack suffix:
## simple_tag_type
## LR(1) items:
tag_list -> simple_tag_type . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT
--   reduce production tag_list -> simple_tag_type

State 970:
## Known stack suffix:
## TYPE type_vars
## LR(1) items:
top_expr -> TYPE type_vars . LIDENT EQ opt_bar tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On LIDENT shift to state 971
## Reductions:

State 971:
## Known stack suffix:
## TYPE type_vars LIDENT
## LR(1) items:
top_expr -> TYPE type_vars LIDENT . EQ opt_bar tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On EQ shift to state 972
## Reductions:

State 972:
## Known stack suffix:
## TYPE type_vars LIDENT EQ
## LR(1) items:
top_expr -> TYPE type_vars LIDENT EQ . opt_bar tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On BAR shift to state 125
-- On opt_bar shift to state 973
## Reductions:
-- On UIDENT
--   reduce production opt_bar ->

State 973:
## Known stack suffix:
## TYPE type_vars LIDENT EQ opt_bar
## LR(1) items:
top_expr -> TYPE type_vars LIDENT EQ opt_bar . tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On UIDENT shift to state 952
-- On tag_list shift to state 974
-- On simple_tag_type shift to state 969
## Reductions:

State 974:
## Known stack suffix:
## TYPE type_vars LIDENT EQ opt_bar tag_list
## LR(1) items:
tag_list -> tag_list . BAR simple_tag_type [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On BAR shift to state 967
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list

State 975:
## Known stack suffix:
## SEMISEMI
## LR(1) items:
top_expr -> SEMISEMI . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production top_expr -> SEMISEMI

State 976:
## Known stack suffix:
## OPEN
## LR(1) items:
top_expr -> OPEN . mod_ident [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On UIDENT shift to state 73
-- On mod_ident shift to state 977
## Reductions:

State 977:
## Known stack suffix:
## OPEN mod_ident
## LR(1) items:
top_expr -> OPEN mod_ident . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production top_expr -> OPEN mod_ident

State 978:
## Known stack suffix:
## MODULE
## LR(1) items:
top_expr -> MODULE . mod_ident EQ mod_ident [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On UIDENT shift to state 73
-- On mod_ident shift to state 979
## Reductions:

State 979:
## Known stack suffix:
## MODULE mod_ident
## LR(1) items:
top_expr -> MODULE mod_ident . EQ mod_ident [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On EQ shift to state 980
## Reductions:

State 980:
## Known stack suffix:
## MODULE mod_ident EQ
## LR(1) items:
top_expr -> MODULE mod_ident EQ . mod_ident [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On UIDENT shift to state 73
-- On mod_ident shift to state 981
## Reductions:

State 981:
## Known stack suffix:
## MODULE mod_ident EQ mod_ident
## LR(1) items:
top_expr -> MODULE mod_ident EQ mod_ident . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production top_expr -> MODULE mod_ident EQ mod_ident

State 982:
## Known stack suffix:
## LET
## LR(1) items:
top_expr -> LET . rec_flag let_bindings [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
value_expr -> LET . rec_flag let_bindings IN seq_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI SEMI RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF DOLLAR COLONEQUAL COLONCOLON CHAR CASE BEGIN BARBAR ASSERT AMPERAMPER ]
value_expr -> LET . MODULE mod_ident EQ mod_ident IN seq_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI SEMI RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF DOLLAR COLONEQUAL COLONCOLON CHAR CASE BEGIN BARBAR ASSERT AMPERAMPER ]
## Transitions:
-- On REC shift to state 71
-- On MODULE shift to state 72
-- On rec_flag shift to state 983
## Reductions:
-- On WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CARRAYPAT BOXPAT ARRAYPAT AMPERREST
--   reduce production rec_flag ->

State 983:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
top_expr -> LET rec_flag . let_bindings [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
value_expr -> LET rec_flag . let_bindings IN seq_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI SEMI RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF DOLLAR COLONEQUAL COLONCOLON CHAR CASE BEGIN BARBAR ASSERT AMPERAMPER ]
## Transitions:
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 786
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 792
-- On pattern shift to state 399
-- On let_bindings shift to state 984
-- On let_binding shift to state 801
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
## Reductions:

State 984:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
let_bindings -> let_bindings . AND let_binding [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
top_expr -> LET rec_flag let_bindings . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
value_expr -> LET rec_flag let_bindings . IN seq_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI SEMI RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF DOLLAR COLONEQUAL COLONCOLON CHAR CASE BEGIN BARBAR ASSERT AMPERAMPER ]
## Transitions:
-- On IN shift to state 834
-- On AND shift to state 799
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production top_expr -> LET rec_flag let_bindings

State 985:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
top_expr -> EXCEPTION . UIDENT OF type_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> EXCEPTION . UIDENT [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On UIDENT shift to state 986
## Reductions:

State 986:
## Known stack suffix:
## EXCEPTION UIDENT
## LR(1) items:
top_expr -> EXCEPTION UIDENT . OF type_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> EXCEPTION UIDENT . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On OF shift to state 987
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production top_expr -> EXCEPTION UIDENT

State 987:
## Known stack suffix:
## EXCEPTION UIDENT OF
## LR(1) items:
top_expr -> EXCEPTION UIDENT OF . type_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On UIDENT shift to state 213
-- On TIDENT shift to state 954
-- On LPAREN shift to state 955
-- On LIDENT shift to state 216
-- On type_expr shift to state 988
-- On label_longident shift to state 965
## Reductions:

State 988:
## Known stack suffix:
## EXCEPTION UIDENT OF type_expr
## LR(1) items:
top_expr -> EXCEPTION UIDENT OF type_expr . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
type_expr -> type_expr . label_longident [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
type_expr -> type_expr . STAR type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
type_expr -> type_expr . MINUSGREATER type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On UIDENT shift to state 213
-- On STAR shift to state 960
-- On MINUSGREATER shift to state 962
-- On LIDENT shift to state 216
-- On label_longident shift to state 964
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production top_expr -> EXCEPTION UIDENT OF type_expr
** Conflict on UIDENT LIDENT

State 989:
## Known stack suffix:
## use_file_exprs
## LR(1) items:
toplevel_phrase -> use_file_exprs . EOF [ # ]
use_file_exprs -> use_file_exprs . top_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TYPE shift to state 915
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On SEMISEMI shift to state 975
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On OPEN shift to state 976
-- On MODULE shift to state 978
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 982
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On EXCEPTION shift to state 985
-- On EOF shift to state 990
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On top_expr shift to state 991
-- On simple_expr shift to state 417
-- On seq_expr shift to state 992
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 990:
## Known stack suffix:
## use_file_exprs EOF
## LR(1) items:
toplevel_phrase -> use_file_exprs EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production toplevel_phrase -> use_file_exprs EOF

State 991:
## Known stack suffix:
## use_file_exprs top_expr
## LR(1) items:
use_file_exprs -> use_file_exprs top_expr . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production use_file_exprs -> use_file_exprs top_expr

State 992:
## Known stack suffix:
## seq_expr
## LR(1) items:
top_expr -> seq_expr . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production top_expr -> seq_expr

State 993:
## Known stack suffix:
## toplevel_phrase
## LR(1) items:
toplevel_phrase' -> toplevel_phrase . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept toplevel_phrase

State 994:
## Known stack suffix:
## top_expr
## LR(1) items:
use_file_exprs -> top_expr . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT
--   reduce production use_file_exprs -> top_expr

State 995:
## Known stack suffix:
##
## LR(1) items:
use_file' -> . use_file [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TYPE shift to state 915
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On SEMISEMI shift to state 975
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On OPEN shift to state 976
-- On MODULE shift to state 978
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 982
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On EXCEPTION shift to state 985
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On use_file_exprs shift to state 996
-- On use_file shift to state 998
-- On top_expr shift to state 994
-- On simple_expr shift to state 417
-- On seq_expr shift to state 992
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 996:
## Known stack suffix:
## use_file_exprs
## LR(1) items:
use_file -> use_file_exprs . EOF [ # ]
use_file_exprs -> use_file_exprs . top_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
## Transitions:
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TYPE shift to state 915
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On SEMISEMI shift to state 975
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On OPEN shift to state 976
-- On MODULE shift to state 978
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 982
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On EXCEPTION shift to state 985
-- On EOF shift to state 997
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On top_expr shift to state 991
-- On simple_expr shift to state 417
-- On seq_expr shift to state 992
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479
## Reductions:

State 997:
## Known stack suffix:
## use_file_exprs EOF
## LR(1) items:
use_file -> use_file_exprs EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production use_file -> use_file_exprs EOF

State 998:
## Known stack suffix:
## use_file
## LR(1) items:
use_file' -> use_file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept use_file

