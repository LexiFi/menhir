State 0:
toplevel_phrase' -> . toplevel_phrase [ # ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TYPE shift to state 915
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On SEMISEMI shift to state 975
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On OPEN shift to state 976
-- On MODULE shift to state 978
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 982
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On EXCEPTION shift to state 985
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On use_file_exprs shift to state 989
-- On toplevel_phrase shift to state 993
-- On top_expr shift to state 994
-- On simple_expr shift to state 417
-- On seq_expr shift to state 992
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 1:
no_value_expr -> WHILE . expr DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 911
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 2:
value_expr -> WHERE . expr THEN expr ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> WHERE . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 906
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 3:
constr_longident -> UIDENT . DOT UIDENT [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
constr_longident -> UIDENT . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
val_longident -> UIDENT . DOT val_ident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On DOT shift to state 4
-- On WITH reduce production constr_longident -> UIDENT
-- On WHILE reduce production constr_longident -> UIDENT
-- On WHERE reduce production constr_longident -> UIDENT
-- On UIDENT reduce production constr_longident -> UIDENT
-- On TYPE reduce production constr_longident -> UIDENT
-- On TRY reduce production constr_longident -> UIDENT
-- On TO reduce production constr_longident -> UIDENT
-- On THEN reduce production constr_longident -> UIDENT
-- On STRING reduce production constr_longident -> UIDENT
-- On STAR reduce production constr_longident -> UIDENT
-- On SHARP reduce production constr_longident -> UIDENT
-- On SEMISEMI reduce production constr_longident -> UIDENT
-- On SEMI reduce production constr_longident -> UIDENT
-- On RPAREN reduce production constr_longident -> UIDENT
-- On RAISE reduce production constr_longident -> UIDENT
-- On QUESTION reduce production constr_longident -> UIDENT
-- On PREFIXOP reduce production constr_longident -> UIDENT
-- On PLUS reduce production constr_longident -> UIDENT
-- On OPEN reduce production constr_longident -> UIDENT
-- On MODULE reduce production constr_longident -> UIDENT
-- On MINUSGREATER reduce production constr_longident -> UIDENT
-- On MINUS reduce production constr_longident -> UIDENT
-- On MATCH reduce production constr_longident -> UIDENT
-- On LVECTOR reduce production constr_longident -> UIDENT
-- On LPAREN reduce production constr_longident -> UIDENT
-- On LMATRIX reduce production constr_longident -> UIDENT
-- On LIDENT reduce production constr_longident -> UIDENT
-- On LET reduce production constr_longident -> UIDENT
-- On LBRACKBAR reduce production constr_longident -> UIDENT
-- On LBRACK reduce production constr_longident -> UIDENT
-- On LBRACE reduce production constr_longident -> UIDENT
-- On LAZY reduce production constr_longident -> UIDENT
-- On INT reduce production constr_longident -> UIDENT
-- On INFIXOP5R reduce production constr_longident -> UIDENT
-- On INFIXOP5L reduce production constr_longident -> UIDENT
-- On INFIXOP4R reduce production constr_longident -> UIDENT
-- On INFIXOP4L reduce production constr_longident -> UIDENT
-- On INFIXOP3R reduce production constr_longident -> UIDENT
-- On INFIXOP3L reduce production constr_longident -> UIDENT
-- On INFIXOP2R reduce production constr_longident -> UIDENT
-- On INFIXOP2L reduce production constr_longident -> UIDENT
-- On INFIXOP1R reduce production constr_longident -> UIDENT
-- On INFIXOP1L reduce production constr_longident -> UIDENT
-- On IN reduce production constr_longident -> UIDENT
-- On IMAGINARY reduce production constr_longident -> UIDENT
-- On IF reduce production constr_longident -> UIDENT
-- On FUNCTION reduce production constr_longident -> UIDENT
-- On FUN reduce production constr_longident -> UIDENT
-- On FOR reduce production constr_longident -> UIDENT
-- On FLOAT reduce production constr_longident -> UIDENT
-- On EXCEPTION reduce production constr_longident -> UIDENT
-- On EQ reduce production constr_longident -> UIDENT
-- On EOF reduce production constr_longident -> UIDENT
-- On ELSE reduce production constr_longident -> UIDENT
-- On DOWNTO reduce production constr_longident -> UIDENT
-- On DONE reduce production constr_longident -> UIDENT
-- On DOLLAR reduce production constr_longident -> UIDENT
-- On DO reduce production constr_longident -> UIDENT
-- On COMMA reduce production constr_longident -> UIDENT
-- On COLONEQUAL reduce production constr_longident -> UIDENT
-- On COLONCOLON reduce production constr_longident -> UIDENT
-- On COLON reduce production constr_longident -> UIDENT
-- On CHAR reduce production constr_longident -> UIDENT
-- On CASE reduce production constr_longident -> UIDENT
-- On BELOW reduce production constr_longident -> UIDENT
-- On BEGIN reduce production constr_longident -> UIDENT
-- On BARBAR reduce production constr_longident -> UIDENT
-- On BAR reduce production constr_longident -> UIDENT
-- On ASSERT reduce production constr_longident -> UIDENT
-- On AND reduce production constr_longident -> UIDENT
-- On AMPERAMPER reduce production constr_longident -> UIDENT
-- On ABOVE reduce production constr_longident -> UIDENT
** Conflict on DOT

State 4:
constr_longident -> UIDENT DOT . UIDENT [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
val_longident -> UIDENT DOT . val_ident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On UIDENT shift to state 5
-- On LPAREN shift to state 6
-- On LIDENT shift to state 28
-- On val_ident shift to state 29

State 5:
constr_longident -> UIDENT DOT UIDENT . [ WITH WHILE WHERE WHEN WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TYPE TUPLEPAT TRY TO THEN SYMBOLPAT STRINGPAT STRING STAR STACKPAT SHARP SEMISEMI SEMI RPAREN RECORDPAT REALPAT RAISE QUEUEPAT QUESTION PREFIXOP PLUS OUT_CHANNELPAT OPEN NUMBERPAT MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LISTPAT LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY IN_CHANNELPAT INTPAT INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF HASHTABLEPAT FUNCTION FUN FOR FLOATPAT FLOAT FARRAYPAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO DIR_HANDLEPAT COMPLEXPAT COMMA COLONEQUAL COLONCOLON COLON CHARPAT CHAR CASE CARRAYPAT BOXPAT BELOW BEGIN BARBAR BAR ASSERT AS ARRAYPAT AND AMPERAMPER ABOVE ]
-- On WITH reduce production constr_longident -> UIDENT DOT UIDENT
-- On WHILE reduce production constr_longident -> UIDENT DOT UIDENT
-- On WHERE reduce production constr_longident -> UIDENT DOT UIDENT
-- On WHEN reduce production constr_longident -> UIDENT DOT UIDENT
-- On WEAKARRAYPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On VECTORPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On UNDERSCORE reduce production constr_longident -> UIDENT DOT UIDENT
-- On UIDENT reduce production constr_longident -> UIDENT DOT UIDENT
-- On TYPE reduce production constr_longident -> UIDENT DOT UIDENT
-- On TUPLEPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On TRY reduce production constr_longident -> UIDENT DOT UIDENT
-- On TO reduce production constr_longident -> UIDENT DOT UIDENT
-- On THEN reduce production constr_longident -> UIDENT DOT UIDENT
-- On SYMBOLPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On STRINGPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On STRING reduce production constr_longident -> UIDENT DOT UIDENT
-- On STAR reduce production constr_longident -> UIDENT DOT UIDENT
-- On STACKPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On SHARP reduce production constr_longident -> UIDENT DOT UIDENT
-- On SEMISEMI reduce production constr_longident -> UIDENT DOT UIDENT
-- On SEMI reduce production constr_longident -> UIDENT DOT UIDENT
-- On RPAREN reduce production constr_longident -> UIDENT DOT UIDENT
-- On RECORDPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On REALPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On RAISE reduce production constr_longident -> UIDENT DOT UIDENT
-- On QUEUEPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On QUESTION reduce production constr_longident -> UIDENT DOT UIDENT
-- On PREFIXOP reduce production constr_longident -> UIDENT DOT UIDENT
-- On PLUS reduce production constr_longident -> UIDENT DOT UIDENT
-- On OUT_CHANNELPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On OPEN reduce production constr_longident -> UIDENT DOT UIDENT
-- On NUMBERPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On MODULE reduce production constr_longident -> UIDENT DOT UIDENT
-- On MINUSGREATER reduce production constr_longident -> UIDENT DOT UIDENT
-- On MINUS reduce production constr_longident -> UIDENT DOT UIDENT
-- On MATCH reduce production constr_longident -> UIDENT DOT UIDENT
-- On LVECTOR reduce production constr_longident -> UIDENT DOT UIDENT
-- On LPAREN reduce production constr_longident -> UIDENT DOT UIDENT
-- On LMATRIX reduce production constr_longident -> UIDENT DOT UIDENT
-- On LISTPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On LIDENT reduce production constr_longident -> UIDENT DOT UIDENT
-- On LET reduce production constr_longident -> UIDENT DOT UIDENT
-- On LESSMINUS reduce production constr_longident -> UIDENT DOT UIDENT
-- On LBRACKBAR reduce production constr_longident -> UIDENT DOT UIDENT
-- On LBRACK reduce production constr_longident -> UIDENT DOT UIDENT
-- On LBRACE reduce production constr_longident -> UIDENT DOT UIDENT
-- On LAZY reduce production constr_longident -> UIDENT DOT UIDENT
-- On IN_CHANNELPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On INTPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On INT reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP5R reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP5L reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP4R reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP4L reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP3R reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP3L reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP2R reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP2L reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP1R reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP1L reduce production constr_longident -> UIDENT DOT UIDENT
-- On IN reduce production constr_longident -> UIDENT DOT UIDENT
-- On IMAGINARY reduce production constr_longident -> UIDENT DOT UIDENT
-- On IF reduce production constr_longident -> UIDENT DOT UIDENT
-- On HASHTABLEPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On FUNCTION reduce production constr_longident -> UIDENT DOT UIDENT
-- On FUN reduce production constr_longident -> UIDENT DOT UIDENT
-- On FOR reduce production constr_longident -> UIDENT DOT UIDENT
-- On FLOATPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On FLOAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On FARRAYPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On EXCEPTION reduce production constr_longident -> UIDENT DOT UIDENT
-- On EQ reduce production constr_longident -> UIDENT DOT UIDENT
-- On EOF reduce production constr_longident -> UIDENT DOT UIDENT
-- On ELSE reduce production constr_longident -> UIDENT DOT UIDENT
-- On DOWNTO reduce production constr_longident -> UIDENT DOT UIDENT
-- On DOT reduce production constr_longident -> UIDENT DOT UIDENT
-- On DONE reduce production constr_longident -> UIDENT DOT UIDENT
-- On DOLLAR reduce production constr_longident -> UIDENT DOT UIDENT
-- On DO reduce production constr_longident -> UIDENT DOT UIDENT
-- On DIR_HANDLEPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On COMPLEXPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On COMMA reduce production constr_longident -> UIDENT DOT UIDENT
-- On COLONEQUAL reduce production constr_longident -> UIDENT DOT UIDENT
-- On COLONCOLON reduce production constr_longident -> UIDENT DOT UIDENT
-- On COLON reduce production constr_longident -> UIDENT DOT UIDENT
-- On CHARPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On CHAR reduce production constr_longident -> UIDENT DOT UIDENT
-- On CASE reduce production constr_longident -> UIDENT DOT UIDENT
-- On CARRAYPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On BOXPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On BELOW reduce production constr_longident -> UIDENT DOT UIDENT
-- On BEGIN reduce production constr_longident -> UIDENT DOT UIDENT
-- On BARBAR reduce production constr_longident -> UIDENT DOT UIDENT
-- On BAR reduce production constr_longident -> UIDENT DOT UIDENT
-- On ASSERT reduce production constr_longident -> UIDENT DOT UIDENT
-- On AS reduce production constr_longident -> UIDENT DOT UIDENT
-- On ARRAYPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On AND reduce production constr_longident -> UIDENT DOT UIDENT
-- On AMPERAMPER reduce production constr_longident -> UIDENT DOT UIDENT
-- On ABOVE reduce production constr_longident -> UIDENT DOT UIDENT

State 6:
val_ident -> LPAREN . operator RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On STAR shift to state 7
-- On SHARP shift to state 8
-- On PREFIXOP shift to state 9
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On INFIXOP5R shift to state 12
-- On INFIXOP5L shift to state 13
-- On INFIXOP4R shift to state 14
-- On INFIXOP4L shift to state 15
-- On INFIXOP3R shift to state 16
-- On INFIXOP3L shift to state 17
-- On INFIXOP2R shift to state 18
-- On INFIXOP2L shift to state 19
-- On INFIXOP1R shift to state 20
-- On INFIXOP1L shift to state 21
-- On EQ shift to state 22
-- On DOLLAR shift to state 23
-- On COLONEQUAL shift to state 24
-- On COLONCOLON shift to state 25
-- On operator shift to state 26

State 7:
operator -> STAR . [ RPAREN ]
-- On RPAREN reduce production operator -> STAR

State 8:
operator -> SHARP . [ RPAREN ]
-- On RPAREN reduce production operator -> SHARP

State 9:
operator -> PREFIXOP . [ RPAREN ]
-- On RPAREN reduce production operator -> PREFIXOP

State 10:
operator -> PLUS . [ RPAREN ]
-- On RPAREN reduce production operator -> PLUS

State 11:
operator -> MINUS . [ RPAREN ]
-- On RPAREN reduce production operator -> MINUS

State 12:
operator -> INFIXOP5R . [ RPAREN ]
-- On RPAREN reduce production operator -> INFIXOP5R

State 13:
operator -> INFIXOP5L . [ RPAREN ]
-- On RPAREN reduce production operator -> INFIXOP5L

State 14:
operator -> INFIXOP4R . [ RPAREN ]
-- On RPAREN reduce production operator -> INFIXOP4R

State 15:
operator -> INFIXOP4L . [ RPAREN ]
-- On RPAREN reduce production operator -> INFIXOP4L

State 16:
operator -> INFIXOP3R . [ RPAREN ]
-- On RPAREN reduce production operator -> INFIXOP3R

State 17:
operator -> INFIXOP3L . [ RPAREN ]
-- On RPAREN reduce production operator -> INFIXOP3L

State 18:
operator -> INFIXOP2R . [ RPAREN ]
-- On RPAREN reduce production operator -> INFIXOP2R

State 19:
operator -> INFIXOP2L . [ RPAREN ]
-- On RPAREN reduce production operator -> INFIXOP2L

State 20:
operator -> INFIXOP1R . [ RPAREN ]
-- On RPAREN reduce production operator -> INFIXOP1R

State 21:
operator -> INFIXOP1L . [ RPAREN ]
-- On RPAREN reduce production operator -> INFIXOP1L

State 22:
operator -> EQ . [ RPAREN ]
-- On RPAREN reduce production operator -> EQ

State 23:
operator -> DOLLAR . [ RPAREN ]
-- On RPAREN reduce production operator -> DOLLAR

State 24:
operator -> COLONEQUAL . [ RPAREN ]
-- On RPAREN reduce production operator -> COLONEQUAL

State 25:
operator -> COLONCOLON . [ RPAREN ]
-- On RPAREN reduce production operator -> COLONCOLON

State 26:
val_ident -> LPAREN operator . RPAREN [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On RPAREN shift to state 27

State 27:
val_ident -> LPAREN operator RPAREN . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production val_ident -> LPAREN operator RPAREN
-- On WHILE reduce production val_ident -> LPAREN operator RPAREN
-- On WHERE reduce production val_ident -> LPAREN operator RPAREN
-- On WHEN reduce production val_ident -> LPAREN operator RPAREN
-- On UNDERSCORE reduce production val_ident -> LPAREN operator RPAREN
-- On UIDENT reduce production val_ident -> LPAREN operator RPAREN
-- On TYPE reduce production val_ident -> LPAREN operator RPAREN
-- On TRY reduce production val_ident -> LPAREN operator RPAREN
-- On TO reduce production val_ident -> LPAREN operator RPAREN
-- On THEN reduce production val_ident -> LPAREN operator RPAREN
-- On STRING reduce production val_ident -> LPAREN operator RPAREN
-- On STAR reduce production val_ident -> LPAREN operator RPAREN
-- On SHARP reduce production val_ident -> LPAREN operator RPAREN
-- On SEMISEMI reduce production val_ident -> LPAREN operator RPAREN
-- On SEMI reduce production val_ident -> LPAREN operator RPAREN
-- On RPAREN reduce production val_ident -> LPAREN operator RPAREN
-- On RAISE reduce production val_ident -> LPAREN operator RPAREN
-- On QUESTION reduce production val_ident -> LPAREN operator RPAREN
-- On PREFIXOP reduce production val_ident -> LPAREN operator RPAREN
-- On PLUS reduce production val_ident -> LPAREN operator RPAREN
-- On OPEN reduce production val_ident -> LPAREN operator RPAREN
-- On MODULE reduce production val_ident -> LPAREN operator RPAREN
-- On MINUSGREATER reduce production val_ident -> LPAREN operator RPAREN
-- On MINUS reduce production val_ident -> LPAREN operator RPAREN
-- On MATCH reduce production val_ident -> LPAREN operator RPAREN
-- On LVECTOR reduce production val_ident -> LPAREN operator RPAREN
-- On LPAREN reduce production val_ident -> LPAREN operator RPAREN
-- On LMATRIX reduce production val_ident -> LPAREN operator RPAREN
-- On LIDENT reduce production val_ident -> LPAREN operator RPAREN
-- On LET reduce production val_ident -> LPAREN operator RPAREN
-- On LESSMINUS reduce production val_ident -> LPAREN operator RPAREN
-- On LBRACKBAR reduce production val_ident -> LPAREN operator RPAREN
-- On LBRACK reduce production val_ident -> LPAREN operator RPAREN
-- On LBRACE reduce production val_ident -> LPAREN operator RPAREN
-- On LAZY reduce production val_ident -> LPAREN operator RPAREN
-- On INT reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP5R reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP5L reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP4R reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP4L reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP3R reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP3L reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP2R reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP2L reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP1R reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP1L reduce production val_ident -> LPAREN operator RPAREN
-- On IN reduce production val_ident -> LPAREN operator RPAREN
-- On IMAGINARY reduce production val_ident -> LPAREN operator RPAREN
-- On IF reduce production val_ident -> LPAREN operator RPAREN
-- On FUNCTION reduce production val_ident -> LPAREN operator RPAREN
-- On FUN reduce production val_ident -> LPAREN operator RPAREN
-- On FOR reduce production val_ident -> LPAREN operator RPAREN
-- On FLOAT reduce production val_ident -> LPAREN operator RPAREN
-- On EXCEPTION reduce production val_ident -> LPAREN operator RPAREN
-- On EQ reduce production val_ident -> LPAREN operator RPAREN
-- On EOF reduce production val_ident -> LPAREN operator RPAREN
-- On ELSE reduce production val_ident -> LPAREN operator RPAREN
-- On DOWNTO reduce production val_ident -> LPAREN operator RPAREN
-- On DOT reduce production val_ident -> LPAREN operator RPAREN
-- On DONE reduce production val_ident -> LPAREN operator RPAREN
-- On DOLLAR reduce production val_ident -> LPAREN operator RPAREN
-- On DO reduce production val_ident -> LPAREN operator RPAREN
-- On COMMA reduce production val_ident -> LPAREN operator RPAREN
-- On COLONEQUAL reduce production val_ident -> LPAREN operator RPAREN
-- On COLONCOLON reduce production val_ident -> LPAREN operator RPAREN
-- On COLON reduce production val_ident -> LPAREN operator RPAREN
-- On CHAR reduce production val_ident -> LPAREN operator RPAREN
-- On CASE reduce production val_ident -> LPAREN operator RPAREN
-- On BELOW reduce production val_ident -> LPAREN operator RPAREN
-- On BEGIN reduce production val_ident -> LPAREN operator RPAREN
-- On BARBAR reduce production val_ident -> LPAREN operator RPAREN
-- On BAR reduce production val_ident -> LPAREN operator RPAREN
-- On ASSERT reduce production val_ident -> LPAREN operator RPAREN
-- On AS reduce production val_ident -> LPAREN operator RPAREN
-- On AND reduce production val_ident -> LPAREN operator RPAREN
-- On AMPERAMPER reduce production val_ident -> LPAREN operator RPAREN
-- On ABOVE reduce production val_ident -> LPAREN operator RPAREN

State 28:
val_ident -> LIDENT . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production val_ident -> LIDENT
-- On WHILE reduce production val_ident -> LIDENT
-- On WHERE reduce production val_ident -> LIDENT
-- On WHEN reduce production val_ident -> LIDENT
-- On UNDERSCORE reduce production val_ident -> LIDENT
-- On UIDENT reduce production val_ident -> LIDENT
-- On TYPE reduce production val_ident -> LIDENT
-- On TRY reduce production val_ident -> LIDENT
-- On TO reduce production val_ident -> LIDENT
-- On THEN reduce production val_ident -> LIDENT
-- On STRING reduce production val_ident -> LIDENT
-- On STAR reduce production val_ident -> LIDENT
-- On SHARP reduce production val_ident -> LIDENT
-- On SEMISEMI reduce production val_ident -> LIDENT
-- On SEMI reduce production val_ident -> LIDENT
-- On RPAREN reduce production val_ident -> LIDENT
-- On RAISE reduce production val_ident -> LIDENT
-- On QUESTION reduce production val_ident -> LIDENT
-- On PREFIXOP reduce production val_ident -> LIDENT
-- On PLUS reduce production val_ident -> LIDENT
-- On OPEN reduce production val_ident -> LIDENT
-- On MODULE reduce production val_ident -> LIDENT
-- On MINUSGREATER reduce production val_ident -> LIDENT
-- On MINUS reduce production val_ident -> LIDENT
-- On MATCH reduce production val_ident -> LIDENT
-- On LVECTOR reduce production val_ident -> LIDENT
-- On LPAREN reduce production val_ident -> LIDENT
-- On LMATRIX reduce production val_ident -> LIDENT
-- On LIDENT reduce production val_ident -> LIDENT
-- On LET reduce production val_ident -> LIDENT
-- On LESSMINUS reduce production val_ident -> LIDENT
-- On LBRACKBAR reduce production val_ident -> LIDENT
-- On LBRACK reduce production val_ident -> LIDENT
-- On LBRACE reduce production val_ident -> LIDENT
-- On LAZY reduce production val_ident -> LIDENT
-- On INT reduce production val_ident -> LIDENT
-- On INFIXOP5R reduce production val_ident -> LIDENT
-- On INFIXOP5L reduce production val_ident -> LIDENT
-- On INFIXOP4R reduce production val_ident -> LIDENT
-- On INFIXOP4L reduce production val_ident -> LIDENT
-- On INFIXOP3R reduce production val_ident -> LIDENT
-- On INFIXOP3L reduce production val_ident -> LIDENT
-- On INFIXOP2R reduce production val_ident -> LIDENT
-- On INFIXOP2L reduce production val_ident -> LIDENT
-- On INFIXOP1R reduce production val_ident -> LIDENT
-- On INFIXOP1L reduce production val_ident -> LIDENT
-- On IN reduce production val_ident -> LIDENT
-- On IMAGINARY reduce production val_ident -> LIDENT
-- On IF reduce production val_ident -> LIDENT
-- On FUNCTION reduce production val_ident -> LIDENT
-- On FUN reduce production val_ident -> LIDENT
-- On FOR reduce production val_ident -> LIDENT
-- On FLOAT reduce production val_ident -> LIDENT
-- On EXCEPTION reduce production val_ident -> LIDENT
-- On EQ reduce production val_ident -> LIDENT
-- On EOF reduce production val_ident -> LIDENT
-- On ELSE reduce production val_ident -> LIDENT
-- On DOWNTO reduce production val_ident -> LIDENT
-- On DOT reduce production val_ident -> LIDENT
-- On DONE reduce production val_ident -> LIDENT
-- On DOLLAR reduce production val_ident -> LIDENT
-- On DO reduce production val_ident -> LIDENT
-- On COMMA reduce production val_ident -> LIDENT
-- On COLONEQUAL reduce production val_ident -> LIDENT
-- On COLONCOLON reduce production val_ident -> LIDENT
-- On COLON reduce production val_ident -> LIDENT
-- On CHAR reduce production val_ident -> LIDENT
-- On CASE reduce production val_ident -> LIDENT
-- On BELOW reduce production val_ident -> LIDENT
-- On BEGIN reduce production val_ident -> LIDENT
-- On BARBAR reduce production val_ident -> LIDENT
-- On BAR reduce production val_ident -> LIDENT
-- On ASSERT reduce production val_ident -> LIDENT
-- On AS reduce production val_ident -> LIDENT
-- On AND reduce production val_ident -> LIDENT
-- On AMPERAMPER reduce production val_ident -> LIDENT
-- On ABOVE reduce production val_ident -> LIDENT

State 29:
val_longident -> UIDENT DOT val_ident . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production val_longident -> UIDENT DOT val_ident
-- On WHILE reduce production val_longident -> UIDENT DOT val_ident
-- On WHERE reduce production val_longident -> UIDENT DOT val_ident
-- On UIDENT reduce production val_longident -> UIDENT DOT val_ident
-- On TYPE reduce production val_longident -> UIDENT DOT val_ident
-- On TRY reduce production val_longident -> UIDENT DOT val_ident
-- On TO reduce production val_longident -> UIDENT DOT val_ident
-- On THEN reduce production val_longident -> UIDENT DOT val_ident
-- On STRING reduce production val_longident -> UIDENT DOT val_ident
-- On STAR reduce production val_longident -> UIDENT DOT val_ident
-- On SHARP reduce production val_longident -> UIDENT DOT val_ident
-- On SEMISEMI reduce production val_longident -> UIDENT DOT val_ident
-- On SEMI reduce production val_longident -> UIDENT DOT val_ident
-- On RPAREN reduce production val_longident -> UIDENT DOT val_ident
-- On RAISE reduce production val_longident -> UIDENT DOT val_ident
-- On QUESTION reduce production val_longident -> UIDENT DOT val_ident
-- On PREFIXOP reduce production val_longident -> UIDENT DOT val_ident
-- On PLUS reduce production val_longident -> UIDENT DOT val_ident
-- On OPEN reduce production val_longident -> UIDENT DOT val_ident
-- On MODULE reduce production val_longident -> UIDENT DOT val_ident
-- On MINUSGREATER reduce production val_longident -> UIDENT DOT val_ident
-- On MINUS reduce production val_longident -> UIDENT DOT val_ident
-- On MATCH reduce production val_longident -> UIDENT DOT val_ident
-- On LVECTOR reduce production val_longident -> UIDENT DOT val_ident
-- On LPAREN reduce production val_longident -> UIDENT DOT val_ident
-- On LMATRIX reduce production val_longident -> UIDENT DOT val_ident
-- On LIDENT reduce production val_longident -> UIDENT DOT val_ident
-- On LET reduce production val_longident -> UIDENT DOT val_ident
-- On LBRACKBAR reduce production val_longident -> UIDENT DOT val_ident
-- On LBRACK reduce production val_longident -> UIDENT DOT val_ident
-- On LBRACE reduce production val_longident -> UIDENT DOT val_ident
-- On LAZY reduce production val_longident -> UIDENT DOT val_ident
-- On INT reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP5R reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP5L reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP4R reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP4L reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP3R reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP3L reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP2R reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP2L reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP1R reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP1L reduce production val_longident -> UIDENT DOT val_ident
-- On IN reduce production val_longident -> UIDENT DOT val_ident
-- On IMAGINARY reduce production val_longident -> UIDENT DOT val_ident
-- On IF reduce production val_longident -> UIDENT DOT val_ident
-- On FUNCTION reduce production val_longident -> UIDENT DOT val_ident
-- On FUN reduce production val_longident -> UIDENT DOT val_ident
-- On FOR reduce production val_longident -> UIDENT DOT val_ident
-- On FLOAT reduce production val_longident -> UIDENT DOT val_ident
-- On EXCEPTION reduce production val_longident -> UIDENT DOT val_ident
-- On EQ reduce production val_longident -> UIDENT DOT val_ident
-- On EOF reduce production val_longident -> UIDENT DOT val_ident
-- On ELSE reduce production val_longident -> UIDENT DOT val_ident
-- On DOWNTO reduce production val_longident -> UIDENT DOT val_ident
-- On DOT reduce production val_longident -> UIDENT DOT val_ident
-- On DONE reduce production val_longident -> UIDENT DOT val_ident
-- On DOLLAR reduce production val_longident -> UIDENT DOT val_ident
-- On DO reduce production val_longident -> UIDENT DOT val_ident
-- On COMMA reduce production val_longident -> UIDENT DOT val_ident
-- On COLONEQUAL reduce production val_longident -> UIDENT DOT val_ident
-- On COLONCOLON reduce production val_longident -> UIDENT DOT val_ident
-- On COLON reduce production val_longident -> UIDENT DOT val_ident
-- On CHAR reduce production val_longident -> UIDENT DOT val_ident
-- On CASE reduce production val_longident -> UIDENT DOT val_ident
-- On BELOW reduce production val_longident -> UIDENT DOT val_ident
-- On BEGIN reduce production val_longident -> UIDENT DOT val_ident
-- On BARBAR reduce production val_longident -> UIDENT DOT val_ident
-- On BAR reduce production val_longident -> UIDENT DOT val_ident
-- On ASSERT reduce production val_longident -> UIDENT DOT val_ident
-- On AND reduce production val_longident -> UIDENT DOT val_ident
-- On AMPERAMPER reduce production val_longident -> UIDENT DOT val_ident
-- On ABOVE reduce production val_longident -> UIDENT DOT val_ident

State 30:
value_expr -> TRY . seq_expr WITH opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> TRY . seq_expr WITH error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 901
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 31:
constant -> STRING . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> STRING
-- On WHILE reduce production constant -> STRING
-- On WHERE reduce production constant -> STRING
-- On WHEN reduce production constant -> STRING
-- On UNDERSCORE reduce production constant -> STRING
-- On UIDENT reduce production constant -> STRING
-- On TYPE reduce production constant -> STRING
-- On TRY reduce production constant -> STRING
-- On TO reduce production constant -> STRING
-- On THEN reduce production constant -> STRING
-- On STRING reduce production constant -> STRING
-- On STAR reduce production constant -> STRING
-- On SHARP reduce production constant -> STRING
-- On SEMISEMI reduce production constant -> STRING
-- On SEMI reduce production constant -> STRING
-- On RPAREN reduce production constant -> STRING
-- On RAISE reduce production constant -> STRING
-- On QUESTION reduce production constant -> STRING
-- On PREFIXOP reduce production constant -> STRING
-- On PLUS reduce production constant -> STRING
-- On OPEN reduce production constant -> STRING
-- On MODULE reduce production constant -> STRING
-- On MINUSGREATER reduce production constant -> STRING
-- On MINUS reduce production constant -> STRING
-- On MATCH reduce production constant -> STRING
-- On LVECTOR reduce production constant -> STRING
-- On LPAREN reduce production constant -> STRING
-- On LMATRIX reduce production constant -> STRING
-- On LIDENT reduce production constant -> STRING
-- On LET reduce production constant -> STRING
-- On LESSMINUS reduce production constant -> STRING
-- On LBRACKBAR reduce production constant -> STRING
-- On LBRACK reduce production constant -> STRING
-- On LBRACE reduce production constant -> STRING
-- On LAZY reduce production constant -> STRING
-- On INT reduce production constant -> STRING
-- On INFIXOP5R reduce production constant -> STRING
-- On INFIXOP5L reduce production constant -> STRING
-- On INFIXOP4R reduce production constant -> STRING
-- On INFIXOP4L reduce production constant -> STRING
-- On INFIXOP3R reduce production constant -> STRING
-- On INFIXOP3L reduce production constant -> STRING
-- On INFIXOP2R reduce production constant -> STRING
-- On INFIXOP2L reduce production constant -> STRING
-- On INFIXOP1R reduce production constant -> STRING
-- On INFIXOP1L reduce production constant -> STRING
-- On IN reduce production constant -> STRING
-- On IMAGINARY reduce production constant -> STRING
-- On IF reduce production constant -> STRING
-- On FUNCTION reduce production constant -> STRING
-- On FUN reduce production constant -> STRING
-- On FOR reduce production constant -> STRING
-- On FLOAT reduce production constant -> STRING
-- On EXCEPTION reduce production constant -> STRING
-- On EQ reduce production constant -> STRING
-- On EOF reduce production constant -> STRING
-- On ELSE reduce production constant -> STRING
-- On DOWNTO reduce production constant -> STRING
-- On DOT reduce production constant -> STRING
-- On DONE reduce production constant -> STRING
-- On DOLLAR reduce production constant -> STRING
-- On DO reduce production constant -> STRING
-- On COMMA reduce production constant -> STRING
-- On COLONEQUAL reduce production constant -> STRING
-- On COLONCOLON reduce production constant -> STRING
-- On COLON reduce production constant -> STRING
-- On CHAR reduce production constant -> STRING
-- On CASE reduce production constant -> STRING
-- On BELOW reduce production constant -> STRING
-- On BEGIN reduce production constant -> STRING
-- On BARBAR reduce production constant -> STRING
-- On BAR reduce production constant -> STRING
-- On ASSERT reduce production constant -> STRING
-- On AS reduce production constant -> STRING
-- On AND reduce production constant -> STRING
-- On AMPERAMPER reduce production constant -> STRING
-- On ABOVE reduce production constant -> STRING

State 32:
constant -> SHARP . STRING [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
constant -> SHARP . LIDENT [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
constant -> SHARP . UIDENT [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On UIDENT shift to state 33
-- On STRING shift to state 34
-- On LIDENT shift to state 35

State 33:
constant -> SHARP UIDENT . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> SHARP UIDENT
-- On WHILE reduce production constant -> SHARP UIDENT
-- On WHERE reduce production constant -> SHARP UIDENT
-- On WHEN reduce production constant -> SHARP UIDENT
-- On UNDERSCORE reduce production constant -> SHARP UIDENT
-- On UIDENT reduce production constant -> SHARP UIDENT
-- On TYPE reduce production constant -> SHARP UIDENT
-- On TRY reduce production constant -> SHARP UIDENT
-- On TO reduce production constant -> SHARP UIDENT
-- On THEN reduce production constant -> SHARP UIDENT
-- On STRING reduce production constant -> SHARP UIDENT
-- On STAR reduce production constant -> SHARP UIDENT
-- On SHARP reduce production constant -> SHARP UIDENT
-- On SEMISEMI reduce production constant -> SHARP UIDENT
-- On SEMI reduce production constant -> SHARP UIDENT
-- On RPAREN reduce production constant -> SHARP UIDENT
-- On RAISE reduce production constant -> SHARP UIDENT
-- On QUESTION reduce production constant -> SHARP UIDENT
-- On PREFIXOP reduce production constant -> SHARP UIDENT
-- On PLUS reduce production constant -> SHARP UIDENT
-- On OPEN reduce production constant -> SHARP UIDENT
-- On MODULE reduce production constant -> SHARP UIDENT
-- On MINUSGREATER reduce production constant -> SHARP UIDENT
-- On MINUS reduce production constant -> SHARP UIDENT
-- On MATCH reduce production constant -> SHARP UIDENT
-- On LVECTOR reduce production constant -> SHARP UIDENT
-- On LPAREN reduce production constant -> SHARP UIDENT
-- On LMATRIX reduce production constant -> SHARP UIDENT
-- On LIDENT reduce production constant -> SHARP UIDENT
-- On LET reduce production constant -> SHARP UIDENT
-- On LESSMINUS reduce production constant -> SHARP UIDENT
-- On LBRACKBAR reduce production constant -> SHARP UIDENT
-- On LBRACK reduce production constant -> SHARP UIDENT
-- On LBRACE reduce production constant -> SHARP UIDENT
-- On LAZY reduce production constant -> SHARP UIDENT
-- On INT reduce production constant -> SHARP UIDENT
-- On INFIXOP5R reduce production constant -> SHARP UIDENT
-- On INFIXOP5L reduce production constant -> SHARP UIDENT
-- On INFIXOP4R reduce production constant -> SHARP UIDENT
-- On INFIXOP4L reduce production constant -> SHARP UIDENT
-- On INFIXOP3R reduce production constant -> SHARP UIDENT
-- On INFIXOP3L reduce production constant -> SHARP UIDENT
-- On INFIXOP2R reduce production constant -> SHARP UIDENT
-- On INFIXOP2L reduce production constant -> SHARP UIDENT
-- On INFIXOP1R reduce production constant -> SHARP UIDENT
-- On INFIXOP1L reduce production constant -> SHARP UIDENT
-- On IN reduce production constant -> SHARP UIDENT
-- On IMAGINARY reduce production constant -> SHARP UIDENT
-- On IF reduce production constant -> SHARP UIDENT
-- On FUNCTION reduce production constant -> SHARP UIDENT
-- On FUN reduce production constant -> SHARP UIDENT
-- On FOR reduce production constant -> SHARP UIDENT
-- On FLOAT reduce production constant -> SHARP UIDENT
-- On EXCEPTION reduce production constant -> SHARP UIDENT
-- On EQ reduce production constant -> SHARP UIDENT
-- On EOF reduce production constant -> SHARP UIDENT
-- On ELSE reduce production constant -> SHARP UIDENT
-- On DOWNTO reduce production constant -> SHARP UIDENT
-- On DOT reduce production constant -> SHARP UIDENT
-- On DONE reduce production constant -> SHARP UIDENT
-- On DOLLAR reduce production constant -> SHARP UIDENT
-- On DO reduce production constant -> SHARP UIDENT
-- On COMMA reduce production constant -> SHARP UIDENT
-- On COLONEQUAL reduce production constant -> SHARP UIDENT
-- On COLONCOLON reduce production constant -> SHARP UIDENT
-- On COLON reduce production constant -> SHARP UIDENT
-- On CHAR reduce production constant -> SHARP UIDENT
-- On CASE reduce production constant -> SHARP UIDENT
-- On BELOW reduce production constant -> SHARP UIDENT
-- On BEGIN reduce production constant -> SHARP UIDENT
-- On BARBAR reduce production constant -> SHARP UIDENT
-- On BAR reduce production constant -> SHARP UIDENT
-- On ASSERT reduce production constant -> SHARP UIDENT
-- On AS reduce production constant -> SHARP UIDENT
-- On AND reduce production constant -> SHARP UIDENT
-- On AMPERAMPER reduce production constant -> SHARP UIDENT
-- On ABOVE reduce production constant -> SHARP UIDENT

State 34:
constant -> SHARP STRING . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> SHARP STRING
-- On WHILE reduce production constant -> SHARP STRING
-- On WHERE reduce production constant -> SHARP STRING
-- On WHEN reduce production constant -> SHARP STRING
-- On UNDERSCORE reduce production constant -> SHARP STRING
-- On UIDENT reduce production constant -> SHARP STRING
-- On TYPE reduce production constant -> SHARP STRING
-- On TRY reduce production constant -> SHARP STRING
-- On TO reduce production constant -> SHARP STRING
-- On THEN reduce production constant -> SHARP STRING
-- On STRING reduce production constant -> SHARP STRING
-- On STAR reduce production constant -> SHARP STRING
-- On SHARP reduce production constant -> SHARP STRING
-- On SEMISEMI reduce production constant -> SHARP STRING
-- On SEMI reduce production constant -> SHARP STRING
-- On RPAREN reduce production constant -> SHARP STRING
-- On RAISE reduce production constant -> SHARP STRING
-- On QUESTION reduce production constant -> SHARP STRING
-- On PREFIXOP reduce production constant -> SHARP STRING
-- On PLUS reduce production constant -> SHARP STRING
-- On OPEN reduce production constant -> SHARP STRING
-- On MODULE reduce production constant -> SHARP STRING
-- On MINUSGREATER reduce production constant -> SHARP STRING
-- On MINUS reduce production constant -> SHARP STRING
-- On MATCH reduce production constant -> SHARP STRING
-- On LVECTOR reduce production constant -> SHARP STRING
-- On LPAREN reduce production constant -> SHARP STRING
-- On LMATRIX reduce production constant -> SHARP STRING
-- On LIDENT reduce production constant -> SHARP STRING
-- On LET reduce production constant -> SHARP STRING
-- On LESSMINUS reduce production constant -> SHARP STRING
-- On LBRACKBAR reduce production constant -> SHARP STRING
-- On LBRACK reduce production constant -> SHARP STRING
-- On LBRACE reduce production constant -> SHARP STRING
-- On LAZY reduce production constant -> SHARP STRING
-- On INT reduce production constant -> SHARP STRING
-- On INFIXOP5R reduce production constant -> SHARP STRING
-- On INFIXOP5L reduce production constant -> SHARP STRING
-- On INFIXOP4R reduce production constant -> SHARP STRING
-- On INFIXOP4L reduce production constant -> SHARP STRING
-- On INFIXOP3R reduce production constant -> SHARP STRING
-- On INFIXOP3L reduce production constant -> SHARP STRING
-- On INFIXOP2R reduce production constant -> SHARP STRING
-- On INFIXOP2L reduce production constant -> SHARP STRING
-- On INFIXOP1R reduce production constant -> SHARP STRING
-- On INFIXOP1L reduce production constant -> SHARP STRING
-- On IN reduce production constant -> SHARP STRING
-- On IMAGINARY reduce production constant -> SHARP STRING
-- On IF reduce production constant -> SHARP STRING
-- On FUNCTION reduce production constant -> SHARP STRING
-- On FUN reduce production constant -> SHARP STRING
-- On FOR reduce production constant -> SHARP STRING
-- On FLOAT reduce production constant -> SHARP STRING
-- On EXCEPTION reduce production constant -> SHARP STRING
-- On EQ reduce production constant -> SHARP STRING
-- On EOF reduce production constant -> SHARP STRING
-- On ELSE reduce production constant -> SHARP STRING
-- On DOWNTO reduce production constant -> SHARP STRING
-- On DOT reduce production constant -> SHARP STRING
-- On DONE reduce production constant -> SHARP STRING
-- On DOLLAR reduce production constant -> SHARP STRING
-- On DO reduce production constant -> SHARP STRING
-- On COMMA reduce production constant -> SHARP STRING
-- On COLONEQUAL reduce production constant -> SHARP STRING
-- On COLONCOLON reduce production constant -> SHARP STRING
-- On COLON reduce production constant -> SHARP STRING
-- On CHAR reduce production constant -> SHARP STRING
-- On CASE reduce production constant -> SHARP STRING
-- On BELOW reduce production constant -> SHARP STRING
-- On BEGIN reduce production constant -> SHARP STRING
-- On BARBAR reduce production constant -> SHARP STRING
-- On BAR reduce production constant -> SHARP STRING
-- On ASSERT reduce production constant -> SHARP STRING
-- On AS reduce production constant -> SHARP STRING
-- On AND reduce production constant -> SHARP STRING
-- On AMPERAMPER reduce production constant -> SHARP STRING
-- On ABOVE reduce production constant -> SHARP STRING

State 35:
constant -> SHARP LIDENT . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> SHARP LIDENT
-- On WHILE reduce production constant -> SHARP LIDENT
-- On WHERE reduce production constant -> SHARP LIDENT
-- On WHEN reduce production constant -> SHARP LIDENT
-- On UNDERSCORE reduce production constant -> SHARP LIDENT
-- On UIDENT reduce production constant -> SHARP LIDENT
-- On TYPE reduce production constant -> SHARP LIDENT
-- On TRY reduce production constant -> SHARP LIDENT
-- On TO reduce production constant -> SHARP LIDENT
-- On THEN reduce production constant -> SHARP LIDENT
-- On STRING reduce production constant -> SHARP LIDENT
-- On STAR reduce production constant -> SHARP LIDENT
-- On SHARP reduce production constant -> SHARP LIDENT
-- On SEMISEMI reduce production constant -> SHARP LIDENT
-- On SEMI reduce production constant -> SHARP LIDENT
-- On RPAREN reduce production constant -> SHARP LIDENT
-- On RAISE reduce production constant -> SHARP LIDENT
-- On QUESTION reduce production constant -> SHARP LIDENT
-- On PREFIXOP reduce production constant -> SHARP LIDENT
-- On PLUS reduce production constant -> SHARP LIDENT
-- On OPEN reduce production constant -> SHARP LIDENT
-- On MODULE reduce production constant -> SHARP LIDENT
-- On MINUSGREATER reduce production constant -> SHARP LIDENT
-- On MINUS reduce production constant -> SHARP LIDENT
-- On MATCH reduce production constant -> SHARP LIDENT
-- On LVECTOR reduce production constant -> SHARP LIDENT
-- On LPAREN reduce production constant -> SHARP LIDENT
-- On LMATRIX reduce production constant -> SHARP LIDENT
-- On LIDENT reduce production constant -> SHARP LIDENT
-- On LET reduce production constant -> SHARP LIDENT
-- On LESSMINUS reduce production constant -> SHARP LIDENT
-- On LBRACKBAR reduce production constant -> SHARP LIDENT
-- On LBRACK reduce production constant -> SHARP LIDENT
-- On LBRACE reduce production constant -> SHARP LIDENT
-- On LAZY reduce production constant -> SHARP LIDENT
-- On INT reduce production constant -> SHARP LIDENT
-- On INFIXOP5R reduce production constant -> SHARP LIDENT
-- On INFIXOP5L reduce production constant -> SHARP LIDENT
-- On INFIXOP4R reduce production constant -> SHARP LIDENT
-- On INFIXOP4L reduce production constant -> SHARP LIDENT
-- On INFIXOP3R reduce production constant -> SHARP LIDENT
-- On INFIXOP3L reduce production constant -> SHARP LIDENT
-- On INFIXOP2R reduce production constant -> SHARP LIDENT
-- On INFIXOP2L reduce production constant -> SHARP LIDENT
-- On INFIXOP1R reduce production constant -> SHARP LIDENT
-- On INFIXOP1L reduce production constant -> SHARP LIDENT
-- On IN reduce production constant -> SHARP LIDENT
-- On IMAGINARY reduce production constant -> SHARP LIDENT
-- On IF reduce production constant -> SHARP LIDENT
-- On FUNCTION reduce production constant -> SHARP LIDENT
-- On FUN reduce production constant -> SHARP LIDENT
-- On FOR reduce production constant -> SHARP LIDENT
-- On FLOAT reduce production constant -> SHARP LIDENT
-- On EXCEPTION reduce production constant -> SHARP LIDENT
-- On EQ reduce production constant -> SHARP LIDENT
-- On EOF reduce production constant -> SHARP LIDENT
-- On ELSE reduce production constant -> SHARP LIDENT
-- On DOWNTO reduce production constant -> SHARP LIDENT
-- On DOT reduce production constant -> SHARP LIDENT
-- On DONE reduce production constant -> SHARP LIDENT
-- On DOLLAR reduce production constant -> SHARP LIDENT
-- On DO reduce production constant -> SHARP LIDENT
-- On COMMA reduce production constant -> SHARP LIDENT
-- On COLONEQUAL reduce production constant -> SHARP LIDENT
-- On COLONCOLON reduce production constant -> SHARP LIDENT
-- On COLON reduce production constant -> SHARP LIDENT
-- On CHAR reduce production constant -> SHARP LIDENT
-- On CASE reduce production constant -> SHARP LIDENT
-- On BELOW reduce production constant -> SHARP LIDENT
-- On BEGIN reduce production constant -> SHARP LIDENT
-- On BARBAR reduce production constant -> SHARP LIDENT
-- On BAR reduce production constant -> SHARP LIDENT
-- On ASSERT reduce production constant -> SHARP LIDENT
-- On AS reduce production constant -> SHARP LIDENT
-- On AND reduce production constant -> SHARP LIDENT
-- On AMPERAMPER reduce production constant -> SHARP LIDENT
-- On ABOVE reduce production constant -> SHARP LIDENT

State 36:
no_value_expr -> RAISE . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 900
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 37:
simple_expr -> PREFIXOP . simple_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On UIDENT shift to state 3
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 899
-- On constr_longident shift to state 414
-- On constant shift to state 415

State 38:
constant -> LVECTOR . RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LVECTOR . list_expr RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LVECTOR . list_expr error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RBRACK shift to state 133
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On list_expr shift to state 896
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 750
-- On expr shift to state 762
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754

State 39:
no_value_expr -> WHILE . expr DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 892
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 40:
value_expr -> PLUS . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 891
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 41:
value_expr -> MINUS . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 890
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 42:
value_expr -> MATCH . expr WITH opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> MATCH . expr_comma_list opt_comma WITH opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 43
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 69
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr_comma_list_element shift to state 836
-- On expr_comma_list shift to state 881
-- On expr shift to state 886
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On colonized_symbol shift to state 841

State 43:
colonized_symbol -> UIDENT . [ COLON ]
constr_longident -> UIDENT . DOT UIDENT [ WITH WHERE UIDENT STRING STAR SHARP QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERAMPER ]
constr_longident -> UIDENT . [ WITH WHERE UIDENT STRING STAR SHARP QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERAMPER ]
val_longident -> UIDENT . DOT val_ident [ WITH WHERE UIDENT STRING STAR SHARP QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERAMPER ]
-- On DOT shift to state 4
-- On WITH reduce production constr_longident -> UIDENT
-- On WHERE reduce production constr_longident -> UIDENT
-- On UIDENT reduce production constr_longident -> UIDENT
-- On STRING reduce production constr_longident -> UIDENT
-- On STAR reduce production constr_longident -> UIDENT
-- On SHARP reduce production constr_longident -> UIDENT
-- On QUESTION reduce production constr_longident -> UIDENT
-- On PREFIXOP reduce production constr_longident -> UIDENT
-- On PLUS reduce production constr_longident -> UIDENT
-- On MINUS reduce production constr_longident -> UIDENT
-- On LVECTOR reduce production constr_longident -> UIDENT
-- On LPAREN reduce production constr_longident -> UIDENT
-- On LMATRIX reduce production constr_longident -> UIDENT
-- On LIDENT reduce production constr_longident -> UIDENT
-- On LBRACKBAR reduce production constr_longident -> UIDENT
-- On LBRACK reduce production constr_longident -> UIDENT
-- On LBRACE reduce production constr_longident -> UIDENT
-- On INT reduce production constr_longident -> UIDENT
-- On INFIXOP5R reduce production constr_longident -> UIDENT
-- On INFIXOP5L reduce production constr_longident -> UIDENT
-- On INFIXOP4R reduce production constr_longident -> UIDENT
-- On INFIXOP4L reduce production constr_longident -> UIDENT
-- On INFIXOP3R reduce production constr_longident -> UIDENT
-- On INFIXOP3L reduce production constr_longident -> UIDENT
-- On INFIXOP2R reduce production constr_longident -> UIDENT
-- On INFIXOP2L reduce production constr_longident -> UIDENT
-- On INFIXOP1R reduce production constr_longident -> UIDENT
-- On INFIXOP1L reduce production constr_longident -> UIDENT
-- On IMAGINARY reduce production constr_longident -> UIDENT
-- On FLOAT reduce production constr_longident -> UIDENT
-- On EQ reduce production constr_longident -> UIDENT
-- On DOLLAR reduce production constr_longident -> UIDENT
-- On COMMA reduce production constr_longident -> UIDENT
-- On COLONEQUAL reduce production constr_longident -> UIDENT
-- On COLONCOLON reduce production constr_longident -> UIDENT
-- On COLON reduce production colonized_symbol -> UIDENT
-- On CHAR reduce production constr_longident -> UIDENT
-- On BEGIN reduce production constr_longident -> UIDENT
-- On BARBAR reduce production constr_longident -> UIDENT
-- On AMPERAMPER reduce production constr_longident -> UIDENT
** Conflict on DOT

State 44:
constant -> LPAREN . RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN . expr_comma_list opt_comma RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN . expr_comma_list BAR expr RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN . expr SEMI basic_seq_expr RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN . expr SEMI basic_seq_expr error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN . expr_comma_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
val_ident -> LPAREN . operator RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 7
-- On SHARP shift to state 80
-- On RPAREN shift to state 135
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 82
-- On PLUS shift to state 810
-- On MINUS shift to state 812
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On INFIXOP5R shift to state 12
-- On INFIXOP5L shift to state 13
-- On INFIXOP4R shift to state 14
-- On INFIXOP4L shift to state 15
-- On INFIXOP3R shift to state 16
-- On INFIXOP3L shift to state 17
-- On INFIXOP2R shift to state 18
-- On INFIXOP2L shift to state 19
-- On INFIXOP1R shift to state 20
-- On INFIXOP1L shift to state 21
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On EQ shift to state 22
-- On DOLLAR shift to state 239
-- On COLONEQUAL shift to state 24
-- On COLONCOLON shift to state 25
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On operator shift to state 26
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 869
-- On expr shift to state 876
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754

State 45:
value_expr -> WHERE . expr THEN expr ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> WHERE . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 864
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 46:
constr_longident -> UIDENT . DOT UIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
constr_longident -> UIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
val_longident -> UIDENT . DOT val_ident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On DOT shift to state 47
-- On error reduce production constr_longident -> UIDENT
-- On WHERE reduce production constr_longident -> UIDENT
-- On UIDENT reduce production constr_longident -> UIDENT
-- On THEN reduce production constr_longident -> UIDENT
-- On STRING reduce production constr_longident -> UIDENT
-- On STAR reduce production constr_longident -> UIDENT
-- On SHARP reduce production constr_longident -> UIDENT
-- On SEMI reduce production constr_longident -> UIDENT
-- On RPAREN reduce production constr_longident -> UIDENT
-- On RBRACK reduce production constr_longident -> UIDENT
-- On RBRACE reduce production constr_longident -> UIDENT
-- On QUESTION reduce production constr_longident -> UIDENT
-- On PREFIXOP reduce production constr_longident -> UIDENT
-- On PLUS reduce production constr_longident -> UIDENT
-- On MINUS reduce production constr_longident -> UIDENT
-- On LVECTOR reduce production constr_longident -> UIDENT
-- On LPAREN reduce production constr_longident -> UIDENT
-- On LMATRIX reduce production constr_longident -> UIDENT
-- On LIDENT reduce production constr_longident -> UIDENT
-- On LBRACKBAR reduce production constr_longident -> UIDENT
-- On LBRACK reduce production constr_longident -> UIDENT
-- On LBRACE reduce production constr_longident -> UIDENT
-- On INT reduce production constr_longident -> UIDENT
-- On INFIXOP5R reduce production constr_longident -> UIDENT
-- On INFIXOP5L reduce production constr_longident -> UIDENT
-- On INFIXOP4R reduce production constr_longident -> UIDENT
-- On INFIXOP4L reduce production constr_longident -> UIDENT
-- On INFIXOP3R reduce production constr_longident -> UIDENT
-- On INFIXOP3L reduce production constr_longident -> UIDENT
-- On INFIXOP2R reduce production constr_longident -> UIDENT
-- On INFIXOP2L reduce production constr_longident -> UIDENT
-- On INFIXOP1R reduce production constr_longident -> UIDENT
-- On INFIXOP1L reduce production constr_longident -> UIDENT
-- On IMAGINARY reduce production constr_longident -> UIDENT
-- On FLOAT reduce production constr_longident -> UIDENT
-- On EQ reduce production constr_longident -> UIDENT
-- On END reduce production constr_longident -> UIDENT
-- On ELSE reduce production constr_longident -> UIDENT
-- On DOTDOT reduce production constr_longident -> UIDENT
-- On DOLLAR reduce production constr_longident -> UIDENT
-- On COMMA reduce production constr_longident -> UIDENT
-- On COLONEQUAL reduce production constr_longident -> UIDENT
-- On COLONCOLON reduce production constr_longident -> UIDENT
-- On COLON reduce production constr_longident -> UIDENT
-- On CHAR reduce production constr_longident -> UIDENT
-- On BEGIN reduce production constr_longident -> UIDENT
-- On BARRBRACK reduce production constr_longident -> UIDENT
-- On BARCOLON reduce production constr_longident -> UIDENT
-- On BARBAR reduce production constr_longident -> UIDENT
-- On BAR reduce production constr_longident -> UIDENT
-- On AMPERAMPER reduce production constr_longident -> UIDENT
** Conflict on DOT

State 47:
constr_longident -> UIDENT DOT . UIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
val_longident -> UIDENT DOT . val_ident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On UIDENT shift to state 48
-- On LPAREN shift to state 49
-- On LIDENT shift to state 52
-- On val_ident shift to state 53

State 48:
constr_longident -> UIDENT DOT UIDENT . [ error WHERE WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT THEN SYMBOLPAT STRINGPAT STRING STAR STACKPAT SHARP SEMI RPAREN RECORDPAT REALPAT RBRACK RBRACE QUEUEPAT QUESTION PREFIXOP PLUS OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LMATRIX LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT EQ END ELSE DOTDOT DOT DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONEQUAL COLONCOLON COLON CHARPAT CHAR CARRAYPAT BOXPAT BEGIN BARRBRACK BARCOLON BARBAR BAR AS ARRAYPAT AMPERAMPER ]
-- On error reduce production constr_longident -> UIDENT DOT UIDENT
-- On WHERE reduce production constr_longident -> UIDENT DOT UIDENT
-- On WEAKARRAYPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On VECTORPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On UNDERSCORE reduce production constr_longident -> UIDENT DOT UIDENT
-- On UIDENT reduce production constr_longident -> UIDENT DOT UIDENT
-- On TUPLEPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On THEN reduce production constr_longident -> UIDENT DOT UIDENT
-- On SYMBOLPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On STRINGPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On STRING reduce production constr_longident -> UIDENT DOT UIDENT
-- On STAR reduce production constr_longident -> UIDENT DOT UIDENT
-- On STACKPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On SHARP reduce production constr_longident -> UIDENT DOT UIDENT
-- On SEMI reduce production constr_longident -> UIDENT DOT UIDENT
-- On RPAREN reduce production constr_longident -> UIDENT DOT UIDENT
-- On RECORDPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On REALPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On RBRACK reduce production constr_longident -> UIDENT DOT UIDENT
-- On RBRACE reduce production constr_longident -> UIDENT DOT UIDENT
-- On QUEUEPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On QUESTION reduce production constr_longident -> UIDENT DOT UIDENT
-- On PREFIXOP reduce production constr_longident -> UIDENT DOT UIDENT
-- On PLUS reduce production constr_longident -> UIDENT DOT UIDENT
-- On OUT_CHANNELPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On NUMBERPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On MINUS reduce production constr_longident -> UIDENT DOT UIDENT
-- On LVECTOR reduce production constr_longident -> UIDENT DOT UIDENT
-- On LPAREN reduce production constr_longident -> UIDENT DOT UIDENT
-- On LMATRIX reduce production constr_longident -> UIDENT DOT UIDENT
-- On LISTPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On LIDENT reduce production constr_longident -> UIDENT DOT UIDENT
-- On LBRACKBAR reduce production constr_longident -> UIDENT DOT UIDENT
-- On LBRACK reduce production constr_longident -> UIDENT DOT UIDENT
-- On LBRACE reduce production constr_longident -> UIDENT DOT UIDENT
-- On IN_CHANNELPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On INTPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On INT reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP5R reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP5L reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP4R reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP4L reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP3R reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP3L reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP2R reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP2L reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP1R reduce production constr_longident -> UIDENT DOT UIDENT
-- On INFIXOP1L reduce production constr_longident -> UIDENT DOT UIDENT
-- On IMAGINARY reduce production constr_longident -> UIDENT DOT UIDENT
-- On HASHTABLEPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On FLOATPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On FLOAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On FARRAYPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On EQ reduce production constr_longident -> UIDENT DOT UIDENT
-- On END reduce production constr_longident -> UIDENT DOT UIDENT
-- On ELSE reduce production constr_longident -> UIDENT DOT UIDENT
-- On DOTDOT reduce production constr_longident -> UIDENT DOT UIDENT
-- On DOT reduce production constr_longident -> UIDENT DOT UIDENT
-- On DOLLAR reduce production constr_longident -> UIDENT DOT UIDENT
-- On DIR_HANDLEPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On COMPLEXPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On COMMA reduce production constr_longident -> UIDENT DOT UIDENT
-- On COLONEQUAL reduce production constr_longident -> UIDENT DOT UIDENT
-- On COLONCOLON reduce production constr_longident -> UIDENT DOT UIDENT
-- On COLON reduce production constr_longident -> UIDENT DOT UIDENT
-- On CHARPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On CHAR reduce production constr_longident -> UIDENT DOT UIDENT
-- On CARRAYPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On BOXPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On BEGIN reduce production constr_longident -> UIDENT DOT UIDENT
-- On BARRBRACK reduce production constr_longident -> UIDENT DOT UIDENT
-- On BARCOLON reduce production constr_longident -> UIDENT DOT UIDENT
-- On BARBAR reduce production constr_longident -> UIDENT DOT UIDENT
-- On BAR reduce production constr_longident -> UIDENT DOT UIDENT
-- On AS reduce production constr_longident -> UIDENT DOT UIDENT
-- On ARRAYPAT reduce production constr_longident -> UIDENT DOT UIDENT
-- On AMPERAMPER reduce production constr_longident -> UIDENT DOT UIDENT

State 49:
val_ident -> LPAREN . operator RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On STAR shift to state 7
-- On SHARP shift to state 8
-- On PREFIXOP shift to state 9
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On INFIXOP5R shift to state 12
-- On INFIXOP5L shift to state 13
-- On INFIXOP4R shift to state 14
-- On INFIXOP4L shift to state 15
-- On INFIXOP3R shift to state 16
-- On INFIXOP3L shift to state 17
-- On INFIXOP2R shift to state 18
-- On INFIXOP2L shift to state 19
-- On INFIXOP1R shift to state 20
-- On INFIXOP1L shift to state 21
-- On EQ shift to state 22
-- On DOLLAR shift to state 23
-- On COLONEQUAL shift to state 24
-- On COLONCOLON shift to state 25
-- On operator shift to state 50

State 50:
val_ident -> LPAREN operator . RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On RPAREN shift to state 51

State 51:
val_ident -> LPAREN operator RPAREN . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production val_ident -> LPAREN operator RPAREN
-- On WHERE reduce production val_ident -> LPAREN operator RPAREN
-- On UIDENT reduce production val_ident -> LPAREN operator RPAREN
-- On THEN reduce production val_ident -> LPAREN operator RPAREN
-- On STRING reduce production val_ident -> LPAREN operator RPAREN
-- On STAR reduce production val_ident -> LPAREN operator RPAREN
-- On SHARP reduce production val_ident -> LPAREN operator RPAREN
-- On SEMI reduce production val_ident -> LPAREN operator RPAREN
-- On RPAREN reduce production val_ident -> LPAREN operator RPAREN
-- On RBRACK reduce production val_ident -> LPAREN operator RPAREN
-- On RBRACE reduce production val_ident -> LPAREN operator RPAREN
-- On QUESTION reduce production val_ident -> LPAREN operator RPAREN
-- On PREFIXOP reduce production val_ident -> LPAREN operator RPAREN
-- On PLUS reduce production val_ident -> LPAREN operator RPAREN
-- On MINUS reduce production val_ident -> LPAREN operator RPAREN
-- On LVECTOR reduce production val_ident -> LPAREN operator RPAREN
-- On LPAREN reduce production val_ident -> LPAREN operator RPAREN
-- On LMATRIX reduce production val_ident -> LPAREN operator RPAREN
-- On LIDENT reduce production val_ident -> LPAREN operator RPAREN
-- On LBRACKBAR reduce production val_ident -> LPAREN operator RPAREN
-- On LBRACK reduce production val_ident -> LPAREN operator RPAREN
-- On LBRACE reduce production val_ident -> LPAREN operator RPAREN
-- On INT reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP5R reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP5L reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP4R reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP4L reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP3R reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP3L reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP2R reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP2L reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP1R reduce production val_ident -> LPAREN operator RPAREN
-- On INFIXOP1L reduce production val_ident -> LPAREN operator RPAREN
-- On IMAGINARY reduce production val_ident -> LPAREN operator RPAREN
-- On FLOAT reduce production val_ident -> LPAREN operator RPAREN
-- On EQ reduce production val_ident -> LPAREN operator RPAREN
-- On END reduce production val_ident -> LPAREN operator RPAREN
-- On ELSE reduce production val_ident -> LPAREN operator RPAREN
-- On DOTDOT reduce production val_ident -> LPAREN operator RPAREN
-- On DOT reduce production val_ident -> LPAREN operator RPAREN
-- On DOLLAR reduce production val_ident -> LPAREN operator RPAREN
-- On COMMA reduce production val_ident -> LPAREN operator RPAREN
-- On COLONEQUAL reduce production val_ident -> LPAREN operator RPAREN
-- On COLONCOLON reduce production val_ident -> LPAREN operator RPAREN
-- On COLON reduce production val_ident -> LPAREN operator RPAREN
-- On CHAR reduce production val_ident -> LPAREN operator RPAREN
-- On BEGIN reduce production val_ident -> LPAREN operator RPAREN
-- On BARRBRACK reduce production val_ident -> LPAREN operator RPAREN
-- On BARCOLON reduce production val_ident -> LPAREN operator RPAREN
-- On BARBAR reduce production val_ident -> LPAREN operator RPAREN
-- On BAR reduce production val_ident -> LPAREN operator RPAREN
-- On AS reduce production val_ident -> LPAREN operator RPAREN
-- On AMPERAMPER reduce production val_ident -> LPAREN operator RPAREN

State 52:
val_ident -> LIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production val_ident -> LIDENT
-- On WHERE reduce production val_ident -> LIDENT
-- On UIDENT reduce production val_ident -> LIDENT
-- On THEN reduce production val_ident -> LIDENT
-- On STRING reduce production val_ident -> LIDENT
-- On STAR reduce production val_ident -> LIDENT
-- On SHARP reduce production val_ident -> LIDENT
-- On SEMI reduce production val_ident -> LIDENT
-- On RPAREN reduce production val_ident -> LIDENT
-- On RBRACK reduce production val_ident -> LIDENT
-- On RBRACE reduce production val_ident -> LIDENT
-- On QUESTION reduce production val_ident -> LIDENT
-- On PREFIXOP reduce production val_ident -> LIDENT
-- On PLUS reduce production val_ident -> LIDENT
-- On MINUS reduce production val_ident -> LIDENT
-- On LVECTOR reduce production val_ident -> LIDENT
-- On LPAREN reduce production val_ident -> LIDENT
-- On LMATRIX reduce production val_ident -> LIDENT
-- On LIDENT reduce production val_ident -> LIDENT
-- On LBRACKBAR reduce production val_ident -> LIDENT
-- On LBRACK reduce production val_ident -> LIDENT
-- On LBRACE reduce production val_ident -> LIDENT
-- On INT reduce production val_ident -> LIDENT
-- On INFIXOP5R reduce production val_ident -> LIDENT
-- On INFIXOP5L reduce production val_ident -> LIDENT
-- On INFIXOP4R reduce production val_ident -> LIDENT
-- On INFIXOP4L reduce production val_ident -> LIDENT
-- On INFIXOP3R reduce production val_ident -> LIDENT
-- On INFIXOP3L reduce production val_ident -> LIDENT
-- On INFIXOP2R reduce production val_ident -> LIDENT
-- On INFIXOP2L reduce production val_ident -> LIDENT
-- On INFIXOP1R reduce production val_ident -> LIDENT
-- On INFIXOP1L reduce production val_ident -> LIDENT
-- On IMAGINARY reduce production val_ident -> LIDENT
-- On FLOAT reduce production val_ident -> LIDENT
-- On EQ reduce production val_ident -> LIDENT
-- On END reduce production val_ident -> LIDENT
-- On ELSE reduce production val_ident -> LIDENT
-- On DOTDOT reduce production val_ident -> LIDENT
-- On DOT reduce production val_ident -> LIDENT
-- On DOLLAR reduce production val_ident -> LIDENT
-- On COMMA reduce production val_ident -> LIDENT
-- On COLONEQUAL reduce production val_ident -> LIDENT
-- On COLONCOLON reduce production val_ident -> LIDENT
-- On COLON reduce production val_ident -> LIDENT
-- On CHAR reduce production val_ident -> LIDENT
-- On BEGIN reduce production val_ident -> LIDENT
-- On BARRBRACK reduce production val_ident -> LIDENT
-- On BARCOLON reduce production val_ident -> LIDENT
-- On BARBAR reduce production val_ident -> LIDENT
-- On BAR reduce production val_ident -> LIDENT
-- On AS reduce production val_ident -> LIDENT
-- On AMPERAMPER reduce production val_ident -> LIDENT

State 53:
val_longident -> UIDENT DOT val_ident . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production val_longident -> UIDENT DOT val_ident
-- On WHERE reduce production val_longident -> UIDENT DOT val_ident
-- On UIDENT reduce production val_longident -> UIDENT DOT val_ident
-- On THEN reduce production val_longident -> UIDENT DOT val_ident
-- On STRING reduce production val_longident -> UIDENT DOT val_ident
-- On STAR reduce production val_longident -> UIDENT DOT val_ident
-- On SHARP reduce production val_longident -> UIDENT DOT val_ident
-- On SEMI reduce production val_longident -> UIDENT DOT val_ident
-- On RPAREN reduce production val_longident -> UIDENT DOT val_ident
-- On RBRACK reduce production val_longident -> UIDENT DOT val_ident
-- On RBRACE reduce production val_longident -> UIDENT DOT val_ident
-- On QUESTION reduce production val_longident -> UIDENT DOT val_ident
-- On PREFIXOP reduce production val_longident -> UIDENT DOT val_ident
-- On PLUS reduce production val_longident -> UIDENT DOT val_ident
-- On MINUS reduce production val_longident -> UIDENT DOT val_ident
-- On LVECTOR reduce production val_longident -> UIDENT DOT val_ident
-- On LPAREN reduce production val_longident -> UIDENT DOT val_ident
-- On LMATRIX reduce production val_longident -> UIDENT DOT val_ident
-- On LIDENT reduce production val_longident -> UIDENT DOT val_ident
-- On LBRACKBAR reduce production val_longident -> UIDENT DOT val_ident
-- On LBRACK reduce production val_longident -> UIDENT DOT val_ident
-- On LBRACE reduce production val_longident -> UIDENT DOT val_ident
-- On INT reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP5R reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP5L reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP4R reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP4L reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP3R reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP3L reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP2R reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP2L reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP1R reduce production val_longident -> UIDENT DOT val_ident
-- On INFIXOP1L reduce production val_longident -> UIDENT DOT val_ident
-- On IMAGINARY reduce production val_longident -> UIDENT DOT val_ident
-- On FLOAT reduce production val_longident -> UIDENT DOT val_ident
-- On EQ reduce production val_longident -> UIDENT DOT val_ident
-- On END reduce production val_longident -> UIDENT DOT val_ident
-- On ELSE reduce production val_longident -> UIDENT DOT val_ident
-- On DOTDOT reduce production val_longident -> UIDENT DOT val_ident
-- On DOT reduce production val_longident -> UIDENT DOT val_ident
-- On DOLLAR reduce production val_longident -> UIDENT DOT val_ident
-- On COMMA reduce production val_longident -> UIDENT DOT val_ident
-- On COLONEQUAL reduce production val_longident -> UIDENT DOT val_ident
-- On COLONCOLON reduce production val_longident -> UIDENT DOT val_ident
-- On COLON reduce production val_longident -> UIDENT DOT val_ident
-- On CHAR reduce production val_longident -> UIDENT DOT val_ident
-- On BEGIN reduce production val_longident -> UIDENT DOT val_ident
-- On BARRBRACK reduce production val_longident -> UIDENT DOT val_ident
-- On BARCOLON reduce production val_longident -> UIDENT DOT val_ident
-- On BARBAR reduce production val_longident -> UIDENT DOT val_ident
-- On BAR reduce production val_longident -> UIDENT DOT val_ident
-- On AMPERAMPER reduce production val_longident -> UIDENT DOT val_ident

State 54:
value_expr -> TRY . seq_expr WITH opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> TRY . seq_expr WITH error [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 859
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 55:
simple_expr -> LMATRIX . matrix_expr RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LMATRIX . matrix_expr error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On matrix_expr shift to state 856
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 808
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754

State 56:
colonized_symbol -> UIDENT . [ COLON ]
constr_longident -> UIDENT . DOT UIDENT [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN RBRACK QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
constr_longident -> UIDENT . [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN RBRACK QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
val_longident -> UIDENT . DOT val_ident [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN RBRACK QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On DOT shift to state 47
-- On error reduce production constr_longident -> UIDENT
-- On WHERE reduce production constr_longident -> UIDENT
-- On UIDENT reduce production constr_longident -> UIDENT
-- On STRING reduce production constr_longident -> UIDENT
-- On STAR reduce production constr_longident -> UIDENT
-- On SHARP reduce production constr_longident -> UIDENT
-- On SEMI reduce production constr_longident -> UIDENT
-- On RPAREN reduce production constr_longident -> UIDENT
-- On RBRACK reduce production constr_longident -> UIDENT
-- On QUESTION reduce production constr_longident -> UIDENT
-- On PREFIXOP reduce production constr_longident -> UIDENT
-- On PLUS reduce production constr_longident -> UIDENT
-- On MINUS reduce production constr_longident -> UIDENT
-- On LVECTOR reduce production constr_longident -> UIDENT
-- On LPAREN reduce production constr_longident -> UIDENT
-- On LMATRIX reduce production constr_longident -> UIDENT
-- On LIDENT reduce production constr_longident -> UIDENT
-- On LBRACKBAR reduce production constr_longident -> UIDENT
-- On LBRACK reduce production constr_longident -> UIDENT
-- On LBRACE reduce production constr_longident -> UIDENT
-- On INT reduce production constr_longident -> UIDENT
-- On INFIXOP5R reduce production constr_longident -> UIDENT
-- On INFIXOP5L reduce production constr_longident -> UIDENT
-- On INFIXOP4R reduce production constr_longident -> UIDENT
-- On INFIXOP4L reduce production constr_longident -> UIDENT
-- On INFIXOP3R reduce production constr_longident -> UIDENT
-- On INFIXOP3L reduce production constr_longident -> UIDENT
-- On INFIXOP2R reduce production constr_longident -> UIDENT
-- On INFIXOP2L reduce production constr_longident -> UIDENT
-- On INFIXOP1R reduce production constr_longident -> UIDENT
-- On INFIXOP1L reduce production constr_longident -> UIDENT
-- On IMAGINARY reduce production constr_longident -> UIDENT
-- On FLOAT reduce production constr_longident -> UIDENT
-- On EQ reduce production constr_longident -> UIDENT
-- On DOTDOT reduce production constr_longident -> UIDENT
-- On DOLLAR reduce production constr_longident -> UIDENT
-- On COMMA reduce production constr_longident -> UIDENT
-- On COLONEQUAL reduce production constr_longident -> UIDENT
-- On COLONCOLON reduce production constr_longident -> UIDENT
-- On COLON reduce production colonized_symbol -> UIDENT
-- On CHAR reduce production constr_longident -> UIDENT
-- On BEGIN reduce production constr_longident -> UIDENT
-- On BARRBRACK reduce production constr_longident -> UIDENT
-- On BARCOLON reduce production constr_longident -> UIDENT
-- On BARBAR reduce production constr_longident -> UIDENT
-- On BAR reduce production constr_longident -> UIDENT
-- On AMPERAMPER reduce production constr_longident -> UIDENT
** Conflict on DOT

State 57:
constant -> STRING . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> STRING
-- On WHERE reduce production constant -> STRING
-- On UIDENT reduce production constant -> STRING
-- On THEN reduce production constant -> STRING
-- On STRING reduce production constant -> STRING
-- On STAR reduce production constant -> STRING
-- On SHARP reduce production constant -> STRING
-- On SEMI reduce production constant -> STRING
-- On RPAREN reduce production constant -> STRING
-- On RBRACK reduce production constant -> STRING
-- On RBRACE reduce production constant -> STRING
-- On QUESTION reduce production constant -> STRING
-- On PREFIXOP reduce production constant -> STRING
-- On PLUS reduce production constant -> STRING
-- On MINUS reduce production constant -> STRING
-- On LVECTOR reduce production constant -> STRING
-- On LPAREN reduce production constant -> STRING
-- On LMATRIX reduce production constant -> STRING
-- On LIDENT reduce production constant -> STRING
-- On LBRACKBAR reduce production constant -> STRING
-- On LBRACK reduce production constant -> STRING
-- On LBRACE reduce production constant -> STRING
-- On INT reduce production constant -> STRING
-- On INFIXOP5R reduce production constant -> STRING
-- On INFIXOP5L reduce production constant -> STRING
-- On INFIXOP4R reduce production constant -> STRING
-- On INFIXOP4L reduce production constant -> STRING
-- On INFIXOP3R reduce production constant -> STRING
-- On INFIXOP3L reduce production constant -> STRING
-- On INFIXOP2R reduce production constant -> STRING
-- On INFIXOP2L reduce production constant -> STRING
-- On INFIXOP1R reduce production constant -> STRING
-- On INFIXOP1L reduce production constant -> STRING
-- On IMAGINARY reduce production constant -> STRING
-- On FLOAT reduce production constant -> STRING
-- On EQ reduce production constant -> STRING
-- On END reduce production constant -> STRING
-- On ELSE reduce production constant -> STRING
-- On DOTDOT reduce production constant -> STRING
-- On DOT reduce production constant -> STRING
-- On DOLLAR reduce production constant -> STRING
-- On COMMA reduce production constant -> STRING
-- On COLONEQUAL reduce production constant -> STRING
-- On COLONCOLON reduce production constant -> STRING
-- On COLON reduce production constant -> STRING
-- On CHAR reduce production constant -> STRING
-- On BEGIN reduce production constant -> STRING
-- On BARRBRACK reduce production constant -> STRING
-- On BARCOLON reduce production constant -> STRING
-- On BARBAR reduce production constant -> STRING
-- On BAR reduce production constant -> STRING
-- On AS reduce production constant -> STRING
-- On AMPERAMPER reduce production constant -> STRING

State 58:
constant -> SHARP . STRING [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
constant -> SHARP . LIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
constant -> SHARP . UIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On UIDENT shift to state 59
-- On STRING shift to state 60
-- On LIDENT shift to state 61

State 59:
constant -> SHARP UIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> SHARP UIDENT
-- On WHERE reduce production constant -> SHARP UIDENT
-- On UIDENT reduce production constant -> SHARP UIDENT
-- On THEN reduce production constant -> SHARP UIDENT
-- On STRING reduce production constant -> SHARP UIDENT
-- On STAR reduce production constant -> SHARP UIDENT
-- On SHARP reduce production constant -> SHARP UIDENT
-- On SEMI reduce production constant -> SHARP UIDENT
-- On RPAREN reduce production constant -> SHARP UIDENT
-- On RBRACK reduce production constant -> SHARP UIDENT
-- On RBRACE reduce production constant -> SHARP UIDENT
-- On QUESTION reduce production constant -> SHARP UIDENT
-- On PREFIXOP reduce production constant -> SHARP UIDENT
-- On PLUS reduce production constant -> SHARP UIDENT
-- On MINUS reduce production constant -> SHARP UIDENT
-- On LVECTOR reduce production constant -> SHARP UIDENT
-- On LPAREN reduce production constant -> SHARP UIDENT
-- On LMATRIX reduce production constant -> SHARP UIDENT
-- On LIDENT reduce production constant -> SHARP UIDENT
-- On LBRACKBAR reduce production constant -> SHARP UIDENT
-- On LBRACK reduce production constant -> SHARP UIDENT
-- On LBRACE reduce production constant -> SHARP UIDENT
-- On INT reduce production constant -> SHARP UIDENT
-- On INFIXOP5R reduce production constant -> SHARP UIDENT
-- On INFIXOP5L reduce production constant -> SHARP UIDENT
-- On INFIXOP4R reduce production constant -> SHARP UIDENT
-- On INFIXOP4L reduce production constant -> SHARP UIDENT
-- On INFIXOP3R reduce production constant -> SHARP UIDENT
-- On INFIXOP3L reduce production constant -> SHARP UIDENT
-- On INFIXOP2R reduce production constant -> SHARP UIDENT
-- On INFIXOP2L reduce production constant -> SHARP UIDENT
-- On INFIXOP1R reduce production constant -> SHARP UIDENT
-- On INFIXOP1L reduce production constant -> SHARP UIDENT
-- On IMAGINARY reduce production constant -> SHARP UIDENT
-- On FLOAT reduce production constant -> SHARP UIDENT
-- On EQ reduce production constant -> SHARP UIDENT
-- On END reduce production constant -> SHARP UIDENT
-- On ELSE reduce production constant -> SHARP UIDENT
-- On DOTDOT reduce production constant -> SHARP UIDENT
-- On DOT reduce production constant -> SHARP UIDENT
-- On DOLLAR reduce production constant -> SHARP UIDENT
-- On COMMA reduce production constant -> SHARP UIDENT
-- On COLONEQUAL reduce production constant -> SHARP UIDENT
-- On COLONCOLON reduce production constant -> SHARP UIDENT
-- On COLON reduce production constant -> SHARP UIDENT
-- On CHAR reduce production constant -> SHARP UIDENT
-- On BEGIN reduce production constant -> SHARP UIDENT
-- On BARRBRACK reduce production constant -> SHARP UIDENT
-- On BARCOLON reduce production constant -> SHARP UIDENT
-- On BARBAR reduce production constant -> SHARP UIDENT
-- On BAR reduce production constant -> SHARP UIDENT
-- On AS reduce production constant -> SHARP UIDENT
-- On AMPERAMPER reduce production constant -> SHARP UIDENT

State 60:
constant -> SHARP STRING . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> SHARP STRING
-- On WHERE reduce production constant -> SHARP STRING
-- On UIDENT reduce production constant -> SHARP STRING
-- On THEN reduce production constant -> SHARP STRING
-- On STRING reduce production constant -> SHARP STRING
-- On STAR reduce production constant -> SHARP STRING
-- On SHARP reduce production constant -> SHARP STRING
-- On SEMI reduce production constant -> SHARP STRING
-- On RPAREN reduce production constant -> SHARP STRING
-- On RBRACK reduce production constant -> SHARP STRING
-- On RBRACE reduce production constant -> SHARP STRING
-- On QUESTION reduce production constant -> SHARP STRING
-- On PREFIXOP reduce production constant -> SHARP STRING
-- On PLUS reduce production constant -> SHARP STRING
-- On MINUS reduce production constant -> SHARP STRING
-- On LVECTOR reduce production constant -> SHARP STRING
-- On LPAREN reduce production constant -> SHARP STRING
-- On LMATRIX reduce production constant -> SHARP STRING
-- On LIDENT reduce production constant -> SHARP STRING
-- On LBRACKBAR reduce production constant -> SHARP STRING
-- On LBRACK reduce production constant -> SHARP STRING
-- On LBRACE reduce production constant -> SHARP STRING
-- On INT reduce production constant -> SHARP STRING
-- On INFIXOP5R reduce production constant -> SHARP STRING
-- On INFIXOP5L reduce production constant -> SHARP STRING
-- On INFIXOP4R reduce production constant -> SHARP STRING
-- On INFIXOP4L reduce production constant -> SHARP STRING
-- On INFIXOP3R reduce production constant -> SHARP STRING
-- On INFIXOP3L reduce production constant -> SHARP STRING
-- On INFIXOP2R reduce production constant -> SHARP STRING
-- On INFIXOP2L reduce production constant -> SHARP STRING
-- On INFIXOP1R reduce production constant -> SHARP STRING
-- On INFIXOP1L reduce production constant -> SHARP STRING
-- On IMAGINARY reduce production constant -> SHARP STRING
-- On FLOAT reduce production constant -> SHARP STRING
-- On EQ reduce production constant -> SHARP STRING
-- On END reduce production constant -> SHARP STRING
-- On ELSE reduce production constant -> SHARP STRING
-- On DOTDOT reduce production constant -> SHARP STRING
-- On DOT reduce production constant -> SHARP STRING
-- On DOLLAR reduce production constant -> SHARP STRING
-- On COMMA reduce production constant -> SHARP STRING
-- On COLONEQUAL reduce production constant -> SHARP STRING
-- On COLONCOLON reduce production constant -> SHARP STRING
-- On COLON reduce production constant -> SHARP STRING
-- On CHAR reduce production constant -> SHARP STRING
-- On BEGIN reduce production constant -> SHARP STRING
-- On BARRBRACK reduce production constant -> SHARP STRING
-- On BARCOLON reduce production constant -> SHARP STRING
-- On BARBAR reduce production constant -> SHARP STRING
-- On BAR reduce production constant -> SHARP STRING
-- On AS reduce production constant -> SHARP STRING
-- On AMPERAMPER reduce production constant -> SHARP STRING

State 61:
constant -> SHARP LIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> SHARP LIDENT
-- On WHERE reduce production constant -> SHARP LIDENT
-- On UIDENT reduce production constant -> SHARP LIDENT
-- On THEN reduce production constant -> SHARP LIDENT
-- On STRING reduce production constant -> SHARP LIDENT
-- On STAR reduce production constant -> SHARP LIDENT
-- On SHARP reduce production constant -> SHARP LIDENT
-- On SEMI reduce production constant -> SHARP LIDENT
-- On RPAREN reduce production constant -> SHARP LIDENT
-- On RBRACK reduce production constant -> SHARP LIDENT
-- On RBRACE reduce production constant -> SHARP LIDENT
-- On QUESTION reduce production constant -> SHARP LIDENT
-- On PREFIXOP reduce production constant -> SHARP LIDENT
-- On PLUS reduce production constant -> SHARP LIDENT
-- On MINUS reduce production constant -> SHARP LIDENT
-- On LVECTOR reduce production constant -> SHARP LIDENT
-- On LPAREN reduce production constant -> SHARP LIDENT
-- On LMATRIX reduce production constant -> SHARP LIDENT
-- On LIDENT reduce production constant -> SHARP LIDENT
-- On LBRACKBAR reduce production constant -> SHARP LIDENT
-- On LBRACK reduce production constant -> SHARP LIDENT
-- On LBRACE reduce production constant -> SHARP LIDENT
-- On INT reduce production constant -> SHARP LIDENT
-- On INFIXOP5R reduce production constant -> SHARP LIDENT
-- On INFIXOP5L reduce production constant -> SHARP LIDENT
-- On INFIXOP4R reduce production constant -> SHARP LIDENT
-- On INFIXOP4L reduce production constant -> SHARP LIDENT
-- On INFIXOP3R reduce production constant -> SHARP LIDENT
-- On INFIXOP3L reduce production constant -> SHARP LIDENT
-- On INFIXOP2R reduce production constant -> SHARP LIDENT
-- On INFIXOP2L reduce production constant -> SHARP LIDENT
-- On INFIXOP1R reduce production constant -> SHARP LIDENT
-- On INFIXOP1L reduce production constant -> SHARP LIDENT
-- On IMAGINARY reduce production constant -> SHARP LIDENT
-- On FLOAT reduce production constant -> SHARP LIDENT
-- On EQ reduce production constant -> SHARP LIDENT
-- On END reduce production constant -> SHARP LIDENT
-- On ELSE reduce production constant -> SHARP LIDENT
-- On DOTDOT reduce production constant -> SHARP LIDENT
-- On DOT reduce production constant -> SHARP LIDENT
-- On DOLLAR reduce production constant -> SHARP LIDENT
-- On COMMA reduce production constant -> SHARP LIDENT
-- On COLONEQUAL reduce production constant -> SHARP LIDENT
-- On COLONCOLON reduce production constant -> SHARP LIDENT
-- On COLON reduce production constant -> SHARP LIDENT
-- On CHAR reduce production constant -> SHARP LIDENT
-- On BEGIN reduce production constant -> SHARP LIDENT
-- On BARRBRACK reduce production constant -> SHARP LIDENT
-- On BARCOLON reduce production constant -> SHARP LIDENT
-- On BARBAR reduce production constant -> SHARP LIDENT
-- On BAR reduce production constant -> SHARP LIDENT
-- On AS reduce production constant -> SHARP LIDENT
-- On AMPERAMPER reduce production constant -> SHARP LIDENT

State 62:
no_value_expr -> RAISE . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 855
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 63:
simple_expr -> PREFIXOP . simple_expr [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On UIDENT shift to state 46
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On PREFIXOP shift to state 63
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On BEGIN shift to state 111
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 809
-- On constr_longident shift to state 515
-- On constant shift to state 516

State 64:
constant -> LVECTOR . RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LVECTOR . list_expr RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LVECTOR . list_expr error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RBRACK shift to state 65
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On list_expr shift to state 852
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 750
-- On expr shift to state 762
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754

State 65:
constant -> LVECTOR RBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> LVECTOR RBRACK
-- On WHERE reduce production constant -> LVECTOR RBRACK
-- On UIDENT reduce production constant -> LVECTOR RBRACK
-- On THEN reduce production constant -> LVECTOR RBRACK
-- On STRING reduce production constant -> LVECTOR RBRACK
-- On STAR reduce production constant -> LVECTOR RBRACK
-- On SHARP reduce production constant -> LVECTOR RBRACK
-- On SEMI reduce production constant -> LVECTOR RBRACK
-- On RPAREN reduce production constant -> LVECTOR RBRACK
-- On RBRACK reduce production constant -> LVECTOR RBRACK
-- On RBRACE reduce production constant -> LVECTOR RBRACK
-- On QUESTION reduce production constant -> LVECTOR RBRACK
-- On PREFIXOP reduce production constant -> LVECTOR RBRACK
-- On PLUS reduce production constant -> LVECTOR RBRACK
-- On MINUS reduce production constant -> LVECTOR RBRACK
-- On LVECTOR reduce production constant -> LVECTOR RBRACK
-- On LPAREN reduce production constant -> LVECTOR RBRACK
-- On LMATRIX reduce production constant -> LVECTOR RBRACK
-- On LIDENT reduce production constant -> LVECTOR RBRACK
-- On LBRACKBAR reduce production constant -> LVECTOR RBRACK
-- On LBRACK reduce production constant -> LVECTOR RBRACK
-- On LBRACE reduce production constant -> LVECTOR RBRACK
-- On INT reduce production constant -> LVECTOR RBRACK
-- On INFIXOP5R reduce production constant -> LVECTOR RBRACK
-- On INFIXOP5L reduce production constant -> LVECTOR RBRACK
-- On INFIXOP4R reduce production constant -> LVECTOR RBRACK
-- On INFIXOP4L reduce production constant -> LVECTOR RBRACK
-- On INFIXOP3R reduce production constant -> LVECTOR RBRACK
-- On INFIXOP3L reduce production constant -> LVECTOR RBRACK
-- On INFIXOP2R reduce production constant -> LVECTOR RBRACK
-- On INFIXOP2L reduce production constant -> LVECTOR RBRACK
-- On INFIXOP1R reduce production constant -> LVECTOR RBRACK
-- On INFIXOP1L reduce production constant -> LVECTOR RBRACK
-- On IMAGINARY reduce production constant -> LVECTOR RBRACK
-- On FLOAT reduce production constant -> LVECTOR RBRACK
-- On EQ reduce production constant -> LVECTOR RBRACK
-- On END reduce production constant -> LVECTOR RBRACK
-- On ELSE reduce production constant -> LVECTOR RBRACK
-- On DOTDOT reduce production constant -> LVECTOR RBRACK
-- On DOT reduce production constant -> LVECTOR RBRACK
-- On DOLLAR reduce production constant -> LVECTOR RBRACK
-- On COMMA reduce production constant -> LVECTOR RBRACK
-- On COLONEQUAL reduce production constant -> LVECTOR RBRACK
-- On COLONCOLON reduce production constant -> LVECTOR RBRACK
-- On COLON reduce production constant -> LVECTOR RBRACK
-- On CHAR reduce production constant -> LVECTOR RBRACK
-- On BEGIN reduce production constant -> LVECTOR RBRACK
-- On BARRBRACK reduce production constant -> LVECTOR RBRACK
-- On BARCOLON reduce production constant -> LVECTOR RBRACK
-- On BARBAR reduce production constant -> LVECTOR RBRACK
-- On BAR reduce production constant -> LVECTOR RBRACK
-- On AS reduce production constant -> LVECTOR RBRACK
-- On AMPERAMPER reduce production constant -> LVECTOR RBRACK

State 66:
value_expr -> PLUS . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 811
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 67:
value_expr -> MINUS . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 813
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 68:
value_expr -> MATCH . expr WITH opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> MATCH . expr_comma_list opt_comma WITH opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 43
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 69
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr_comma_list_element shift to state 836
-- On expr_comma_list shift to state 837
-- On expr shift to state 848
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On colonized_symbol shift to state 841

State 69:
colonized_symbol -> LIDENT . [ COLON ]
val_ident -> LIDENT . [ WITH WHERE UIDENT STRING STAR SHARP QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERAMPER ]
-- On WITH reduce production val_ident -> LIDENT
-- On WHERE reduce production val_ident -> LIDENT
-- On UIDENT reduce production val_ident -> LIDENT
-- On STRING reduce production val_ident -> LIDENT
-- On STAR reduce production val_ident -> LIDENT
-- On SHARP reduce production val_ident -> LIDENT
-- On QUESTION reduce production val_ident -> LIDENT
-- On PREFIXOP reduce production val_ident -> LIDENT
-- On PLUS reduce production val_ident -> LIDENT
-- On MINUS reduce production val_ident -> LIDENT
-- On LVECTOR reduce production val_ident -> LIDENT
-- On LPAREN reduce production val_ident -> LIDENT
-- On LMATRIX reduce production val_ident -> LIDENT
-- On LIDENT reduce production val_ident -> LIDENT
-- On LBRACKBAR reduce production val_ident -> LIDENT
-- On LBRACK reduce production val_ident -> LIDENT
-- On LBRACE reduce production val_ident -> LIDENT
-- On INT reduce production val_ident -> LIDENT
-- On INFIXOP5R reduce production val_ident -> LIDENT
-- On INFIXOP5L reduce production val_ident -> LIDENT
-- On INFIXOP4R reduce production val_ident -> LIDENT
-- On INFIXOP4L reduce production val_ident -> LIDENT
-- On INFIXOP3R reduce production val_ident -> LIDENT
-- On INFIXOP3L reduce production val_ident -> LIDENT
-- On INFIXOP2R reduce production val_ident -> LIDENT
-- On INFIXOP2L reduce production val_ident -> LIDENT
-- On INFIXOP1R reduce production val_ident -> LIDENT
-- On INFIXOP1L reduce production val_ident -> LIDENT
-- On IMAGINARY reduce production val_ident -> LIDENT
-- On FLOAT reduce production val_ident -> LIDENT
-- On EQ reduce production val_ident -> LIDENT
-- On DOT reduce production val_ident -> LIDENT
-- On DOLLAR reduce production val_ident -> LIDENT
-- On COMMA reduce production val_ident -> LIDENT
-- On COLONEQUAL reduce production val_ident -> LIDENT
-- On COLONCOLON reduce production val_ident -> LIDENT
-- On COLON reduce production colonized_symbol -> LIDENT
-- On CHAR reduce production val_ident -> LIDENT
-- On BEGIN reduce production val_ident -> LIDENT
-- On BARBAR reduce production val_ident -> LIDENT
-- On AMPERAMPER reduce production val_ident -> LIDENT

State 70:
value_expr -> LET . rec_flag let_bindings IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> LET . MODULE mod_ident EQ mod_ident IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On REC shift to state 71
-- On MODULE shift to state 72
-- On rec_flag shift to state 832
-- On WEAKARRAYPAT reduce production rec_flag ->
-- On VECTORPAT reduce production rec_flag ->
-- On UNDERSCORE reduce production rec_flag ->
-- On UIDENT reduce production rec_flag ->
-- On TUPLEPAT reduce production rec_flag ->
-- On SYMBOLPAT reduce production rec_flag ->
-- On STRINGPAT reduce production rec_flag ->
-- On STRING reduce production rec_flag ->
-- On STACKPAT reduce production rec_flag ->
-- On SHARP reduce production rec_flag ->
-- On RECORDPAT reduce production rec_flag ->
-- On REALPAT reduce production rec_flag ->
-- On QUEUEPAT reduce production rec_flag ->
-- On OUT_CHANNELPAT reduce production rec_flag ->
-- On NUMBERPAT reduce production rec_flag ->
-- On MINUS reduce production rec_flag ->
-- On LVECTOR reduce production rec_flag ->
-- On LPAREN reduce production rec_flag ->
-- On LISTPAT reduce production rec_flag ->
-- On LIDENT reduce production rec_flag ->
-- On LBRACKBAR reduce production rec_flag ->
-- On LBRACK reduce production rec_flag ->
-- On LBRACE reduce production rec_flag ->
-- On IN_CHANNELPAT reduce production rec_flag ->
-- On INTPAT reduce production rec_flag ->
-- On INT reduce production rec_flag ->
-- On IMAGINARY reduce production rec_flag ->
-- On HASHTABLEPAT reduce production rec_flag ->
-- On FLOATPAT reduce production rec_flag ->
-- On FLOAT reduce production rec_flag ->
-- On FARRAYPAT reduce production rec_flag ->
-- On DOLLAR reduce production rec_flag ->
-- On DIR_HANDLEPAT reduce production rec_flag ->
-- On COMPLEXPAT reduce production rec_flag ->
-- On CHARPAT reduce production rec_flag ->
-- On CHAR reduce production rec_flag ->
-- On CARRAYPAT reduce production rec_flag ->
-- On BOXPAT reduce production rec_flag ->
-- On ARRAYPAT reduce production rec_flag ->
-- On AMPERREST reduce production rec_flag ->

State 71:
rec_flag -> REC . [ WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CARRAYPAT BOXPAT ARRAYPAT AMPERREST ]
-- On WEAKARRAYPAT reduce production rec_flag -> REC
-- On VECTORPAT reduce production rec_flag -> REC
-- On UNDERSCORE reduce production rec_flag -> REC
-- On UIDENT reduce production rec_flag -> REC
-- On TUPLEPAT reduce production rec_flag -> REC
-- On SYMBOLPAT reduce production rec_flag -> REC
-- On STRINGPAT reduce production rec_flag -> REC
-- On STRING reduce production rec_flag -> REC
-- On STACKPAT reduce production rec_flag -> REC
-- On SHARP reduce production rec_flag -> REC
-- On RECORDPAT reduce production rec_flag -> REC
-- On REALPAT reduce production rec_flag -> REC
-- On QUEUEPAT reduce production rec_flag -> REC
-- On OUT_CHANNELPAT reduce production rec_flag -> REC
-- On NUMBERPAT reduce production rec_flag -> REC
-- On MINUS reduce production rec_flag -> REC
-- On LVECTOR reduce production rec_flag -> REC
-- On LPAREN reduce production rec_flag -> REC
-- On LISTPAT reduce production rec_flag -> REC
-- On LIDENT reduce production rec_flag -> REC
-- On LBRACKBAR reduce production rec_flag -> REC
-- On LBRACK reduce production rec_flag -> REC
-- On LBRACE reduce production rec_flag -> REC
-- On IN_CHANNELPAT reduce production rec_flag -> REC
-- On INTPAT reduce production rec_flag -> REC
-- On INT reduce production rec_flag -> REC
-- On IMAGINARY reduce production rec_flag -> REC
-- On HASHTABLEPAT reduce production rec_flag -> REC
-- On FLOATPAT reduce production rec_flag -> REC
-- On FLOAT reduce production rec_flag -> REC
-- On FARRAYPAT reduce production rec_flag -> REC
-- On DOLLAR reduce production rec_flag -> REC
-- On DIR_HANDLEPAT reduce production rec_flag -> REC
-- On COMPLEXPAT reduce production rec_flag -> REC
-- On CHARPAT reduce production rec_flag -> REC
-- On CHAR reduce production rec_flag -> REC
-- On CARRAYPAT reduce production rec_flag -> REC
-- On BOXPAT reduce production rec_flag -> REC
-- On ARRAYPAT reduce production rec_flag -> REC
-- On AMPERREST reduce production rec_flag -> REC

State 72:
value_expr -> LET MODULE . mod_ident EQ mod_ident IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On UIDENT shift to state 73
-- On mod_ident shift to state 74

State 73:
mod_ident -> UIDENT . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE reduce production mod_ident -> UIDENT
-- On WHERE reduce production mod_ident -> UIDENT
-- On UIDENT reduce production mod_ident -> UIDENT
-- On TYPE reduce production mod_ident -> UIDENT
-- On TRY reduce production mod_ident -> UIDENT
-- On STRING reduce production mod_ident -> UIDENT
-- On SHARP reduce production mod_ident -> UIDENT
-- On SEMISEMI reduce production mod_ident -> UIDENT
-- On RAISE reduce production mod_ident -> UIDENT
-- On PREFIXOP reduce production mod_ident -> UIDENT
-- On PLUS reduce production mod_ident -> UIDENT
-- On OPEN reduce production mod_ident -> UIDENT
-- On MODULE reduce production mod_ident -> UIDENT
-- On MINUS reduce production mod_ident -> UIDENT
-- On MATCH reduce production mod_ident -> UIDENT
-- On LVECTOR reduce production mod_ident -> UIDENT
-- On LPAREN reduce production mod_ident -> UIDENT
-- On LMATRIX reduce production mod_ident -> UIDENT
-- On LIDENT reduce production mod_ident -> UIDENT
-- On LET reduce production mod_ident -> UIDENT
-- On LBRACKBAR reduce production mod_ident -> UIDENT
-- On LBRACK reduce production mod_ident -> UIDENT
-- On LBRACE reduce production mod_ident -> UIDENT
-- On LAZY reduce production mod_ident -> UIDENT
-- On INT reduce production mod_ident -> UIDENT
-- On IN reduce production mod_ident -> UIDENT
-- On IMAGINARY reduce production mod_ident -> UIDENT
-- On IF reduce production mod_ident -> UIDENT
-- On FUNCTION reduce production mod_ident -> UIDENT
-- On FUN reduce production mod_ident -> UIDENT
-- On FOR reduce production mod_ident -> UIDENT
-- On FLOAT reduce production mod_ident -> UIDENT
-- On EXCEPTION reduce production mod_ident -> UIDENT
-- On EQ reduce production mod_ident -> UIDENT
-- On EOF reduce production mod_ident -> UIDENT
-- On DOLLAR reduce production mod_ident -> UIDENT
-- On CHAR reduce production mod_ident -> UIDENT
-- On CASE reduce production mod_ident -> UIDENT
-- On BEGIN reduce production mod_ident -> UIDENT
-- On ASSERT reduce production mod_ident -> UIDENT

State 74:
value_expr -> LET MODULE mod_ident . EQ mod_ident IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On EQ shift to state 75

State 75:
value_expr -> LET MODULE mod_ident EQ . mod_ident IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On UIDENT shift to state 73
-- On mod_ident shift to state 76

State 76:
value_expr -> LET MODULE mod_ident EQ mod_ident . IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On IN shift to state 77

State 77:
value_expr -> LET MODULE mod_ident EQ mod_ident IN . seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 831
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 78:
constant -> LBRACKBAR . BARRBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACKBAR . expr_comma_list opt_comma BARRBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACKBAR . expr_comma_list opt_comma error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On BARRBRACK shift to state 139
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 827
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754

State 79:
constant -> LPAREN . RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN . expr_comma_list opt_comma RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN . expr_comma_list BAR expr RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN . expr SEMI basic_seq_expr RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN . expr SEMI basic_seq_expr error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN . expr_comma_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
val_ident -> LPAREN . operator RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 7
-- On SHARP shift to state 80
-- On RPAREN shift to state 81
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 82
-- On PLUS shift to state 810
-- On MINUS shift to state 812
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On INFIXOP5R shift to state 12
-- On INFIXOP5L shift to state 13
-- On INFIXOP4R shift to state 14
-- On INFIXOP4L shift to state 15
-- On INFIXOP3R shift to state 16
-- On INFIXOP3L shift to state 17
-- On INFIXOP2R shift to state 18
-- On INFIXOP2L shift to state 19
-- On INFIXOP1R shift to state 20
-- On INFIXOP1L shift to state 21
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On EQ shift to state 22
-- On DOLLAR shift to state 239
-- On COLONEQUAL shift to state 24
-- On COLONCOLON shift to state 25
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On operator shift to state 50
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 814
-- On expr shift to state 822
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754

State 80:
constant -> SHARP . STRING [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR BAR AS AMPERAMPER ]
constant -> SHARP . LIDENT [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR BAR AS AMPERAMPER ]
constant -> SHARP . UIDENT [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR BAR AS AMPERAMPER ]
operator -> SHARP . [ RPAREN ]
-- On UIDENT shift to state 59
-- On STRING shift to state 60
-- On LIDENT shift to state 61
-- On RPAREN reduce production operator -> SHARP

State 81:
constant -> LPAREN RPAREN . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> LPAREN RPAREN
-- On WHERE reduce production constant -> LPAREN RPAREN
-- On UIDENT reduce production constant -> LPAREN RPAREN
-- On THEN reduce production constant -> LPAREN RPAREN
-- On STRING reduce production constant -> LPAREN RPAREN
-- On STAR reduce production constant -> LPAREN RPAREN
-- On SHARP reduce production constant -> LPAREN RPAREN
-- On SEMI reduce production constant -> LPAREN RPAREN
-- On RPAREN reduce production constant -> LPAREN RPAREN
-- On RBRACK reduce production constant -> LPAREN RPAREN
-- On RBRACE reduce production constant -> LPAREN RPAREN
-- On QUESTION reduce production constant -> LPAREN RPAREN
-- On PREFIXOP reduce production constant -> LPAREN RPAREN
-- On PLUS reduce production constant -> LPAREN RPAREN
-- On MINUS reduce production constant -> LPAREN RPAREN
-- On LVECTOR reduce production constant -> LPAREN RPAREN
-- On LPAREN reduce production constant -> LPAREN RPAREN
-- On LMATRIX reduce production constant -> LPAREN RPAREN
-- On LIDENT reduce production constant -> LPAREN RPAREN
-- On LBRACKBAR reduce production constant -> LPAREN RPAREN
-- On LBRACK reduce production constant -> LPAREN RPAREN
-- On LBRACE reduce production constant -> LPAREN RPAREN
-- On INT reduce production constant -> LPAREN RPAREN
-- On INFIXOP5R reduce production constant -> LPAREN RPAREN
-- On INFIXOP5L reduce production constant -> LPAREN RPAREN
-- On INFIXOP4R reduce production constant -> LPAREN RPAREN
-- On INFIXOP4L reduce production constant -> LPAREN RPAREN
-- On INFIXOP3R reduce production constant -> LPAREN RPAREN
-- On INFIXOP3L reduce production constant -> LPAREN RPAREN
-- On INFIXOP2R reduce production constant -> LPAREN RPAREN
-- On INFIXOP2L reduce production constant -> LPAREN RPAREN
-- On INFIXOP1R reduce production constant -> LPAREN RPAREN
-- On INFIXOP1L reduce production constant -> LPAREN RPAREN
-- On IMAGINARY reduce production constant -> LPAREN RPAREN
-- On FLOAT reduce production constant -> LPAREN RPAREN
-- On EQ reduce production constant -> LPAREN RPAREN
-- On END reduce production constant -> LPAREN RPAREN
-- On ELSE reduce production constant -> LPAREN RPAREN
-- On DOTDOT reduce production constant -> LPAREN RPAREN
-- On DOT reduce production constant -> LPAREN RPAREN
-- On DOLLAR reduce production constant -> LPAREN RPAREN
-- On COMMA reduce production constant -> LPAREN RPAREN
-- On COLONEQUAL reduce production constant -> LPAREN RPAREN
-- On COLONCOLON reduce production constant -> LPAREN RPAREN
-- On COLON reduce production constant -> LPAREN RPAREN
-- On CHAR reduce production constant -> LPAREN RPAREN
-- On BEGIN reduce production constant -> LPAREN RPAREN
-- On BARRBRACK reduce production constant -> LPAREN RPAREN
-- On BARCOLON reduce production constant -> LPAREN RPAREN
-- On BARBAR reduce production constant -> LPAREN RPAREN
-- On BAR reduce production constant -> LPAREN RPAREN
-- On AS reduce production constant -> LPAREN RPAREN
-- On AMPERAMPER reduce production constant -> LPAREN RPAREN

State 82:
operator -> PREFIXOP . [ RPAREN ]
simple_expr -> PREFIXOP . simple_expr [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR BAR AMPERAMPER ]
-- On UIDENT shift to state 46
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On PREFIXOP shift to state 63
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On BEGIN shift to state 111
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 809
-- On constr_longident shift to state 515
-- On constant shift to state 516
-- On RPAREN reduce production operator -> PREFIXOP

State 83:
simple_expr -> LMATRIX . matrix_expr RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LMATRIX . matrix_expr error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On matrix_expr shift to state 802
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 808
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754

State 84:
colonized_symbol -> LIDENT . [ COLON ]
val_ident -> LIDENT . [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN RBRACK QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production val_ident -> LIDENT
-- On WHERE reduce production val_ident -> LIDENT
-- On UIDENT reduce production val_ident -> LIDENT
-- On STRING reduce production val_ident -> LIDENT
-- On STAR reduce production val_ident -> LIDENT
-- On SHARP reduce production val_ident -> LIDENT
-- On SEMI reduce production val_ident -> LIDENT
-- On RPAREN reduce production val_ident -> LIDENT
-- On RBRACK reduce production val_ident -> LIDENT
-- On QUESTION reduce production val_ident -> LIDENT
-- On PREFIXOP reduce production val_ident -> LIDENT
-- On PLUS reduce production val_ident -> LIDENT
-- On MINUS reduce production val_ident -> LIDENT
-- On LVECTOR reduce production val_ident -> LIDENT
-- On LPAREN reduce production val_ident -> LIDENT
-- On LMATRIX reduce production val_ident -> LIDENT
-- On LIDENT reduce production val_ident -> LIDENT
-- On LBRACKBAR reduce production val_ident -> LIDENT
-- On LBRACK reduce production val_ident -> LIDENT
-- On LBRACE reduce production val_ident -> LIDENT
-- On INT reduce production val_ident -> LIDENT
-- On INFIXOP5R reduce production val_ident -> LIDENT
-- On INFIXOP5L reduce production val_ident -> LIDENT
-- On INFIXOP4R reduce production val_ident -> LIDENT
-- On INFIXOP4L reduce production val_ident -> LIDENT
-- On INFIXOP3R reduce production val_ident -> LIDENT
-- On INFIXOP3L reduce production val_ident -> LIDENT
-- On INFIXOP2R reduce production val_ident -> LIDENT
-- On INFIXOP2L reduce production val_ident -> LIDENT
-- On INFIXOP1R reduce production val_ident -> LIDENT
-- On INFIXOP1L reduce production val_ident -> LIDENT
-- On IMAGINARY reduce production val_ident -> LIDENT
-- On FLOAT reduce production val_ident -> LIDENT
-- On EQ reduce production val_ident -> LIDENT
-- On DOTDOT reduce production val_ident -> LIDENT
-- On DOT reduce production val_ident -> LIDENT
-- On DOLLAR reduce production val_ident -> LIDENT
-- On COMMA reduce production val_ident -> LIDENT
-- On COLONEQUAL reduce production val_ident -> LIDENT
-- On COLONCOLON reduce production val_ident -> LIDENT
-- On COLON reduce production colonized_symbol -> LIDENT
-- On CHAR reduce production val_ident -> LIDENT
-- On BEGIN reduce production val_ident -> LIDENT
-- On BARRBRACK reduce production val_ident -> LIDENT
-- On BARCOLON reduce production val_ident -> LIDENT
-- On BARBAR reduce production val_ident -> LIDENT
-- On BAR reduce production val_ident -> LIDENT
-- On AMPERAMPER reduce production val_ident -> LIDENT

State 85:
value_expr -> LET . rec_flag let_bindings IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> LET . MODULE mod_ident EQ mod_ident IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On REC shift to state 71
-- On MODULE shift to state 86
-- On rec_flag shift to state 785
-- On WEAKARRAYPAT reduce production rec_flag ->
-- On VECTORPAT reduce production rec_flag ->
-- On UNDERSCORE reduce production rec_flag ->
-- On UIDENT reduce production rec_flag ->
-- On TUPLEPAT reduce production rec_flag ->
-- On SYMBOLPAT reduce production rec_flag ->
-- On STRINGPAT reduce production rec_flag ->
-- On STRING reduce production rec_flag ->
-- On STACKPAT reduce production rec_flag ->
-- On SHARP reduce production rec_flag ->
-- On RECORDPAT reduce production rec_flag ->
-- On REALPAT reduce production rec_flag ->
-- On QUEUEPAT reduce production rec_flag ->
-- On OUT_CHANNELPAT reduce production rec_flag ->
-- On NUMBERPAT reduce production rec_flag ->
-- On MINUS reduce production rec_flag ->
-- On LVECTOR reduce production rec_flag ->
-- On LPAREN reduce production rec_flag ->
-- On LISTPAT reduce production rec_flag ->
-- On LIDENT reduce production rec_flag ->
-- On LBRACKBAR reduce production rec_flag ->
-- On LBRACK reduce production rec_flag ->
-- On LBRACE reduce production rec_flag ->
-- On IN_CHANNELPAT reduce production rec_flag ->
-- On INTPAT reduce production rec_flag ->
-- On INT reduce production rec_flag ->
-- On IMAGINARY reduce production rec_flag ->
-- On HASHTABLEPAT reduce production rec_flag ->
-- On FLOATPAT reduce production rec_flag ->
-- On FLOAT reduce production rec_flag ->
-- On FARRAYPAT reduce production rec_flag ->
-- On DOLLAR reduce production rec_flag ->
-- On DIR_HANDLEPAT reduce production rec_flag ->
-- On COMPLEXPAT reduce production rec_flag ->
-- On CHARPAT reduce production rec_flag ->
-- On CHAR reduce production rec_flag ->
-- On CARRAYPAT reduce production rec_flag ->
-- On BOXPAT reduce production rec_flag ->
-- On ARRAYPAT reduce production rec_flag ->
-- On AMPERREST reduce production rec_flag ->

State 86:
value_expr -> LET MODULE . mod_ident EQ mod_ident IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On UIDENT shift to state 73
-- On mod_ident shift to state 87

State 87:
value_expr -> LET MODULE mod_ident . EQ mod_ident IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On EQ shift to state 88

State 88:
value_expr -> LET MODULE mod_ident EQ . mod_ident IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On UIDENT shift to state 73
-- On mod_ident shift to state 89

State 89:
value_expr -> LET MODULE mod_ident EQ mod_ident . IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On IN shift to state 90

State 90:
value_expr -> LET MODULE mod_ident EQ mod_ident IN . seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On seq_expr shift to state 784
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 629

State 91:
constant -> LBRACKBAR . BARRBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACKBAR . expr_comma_list opt_comma BARRBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACKBAR . expr_comma_list opt_comma error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On BARRBRACK shift to state 180
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 780
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754

State 92:
constant -> LBRACK . RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACK . list_expr RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACK . list_expr error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RBRACK shift to state 93
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On list_expr shift to state 777
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 750
-- On expr shift to state 762
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754

State 93:
constant -> LBRACK RBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> LBRACK RBRACK
-- On WHERE reduce production constant -> LBRACK RBRACK
-- On UIDENT reduce production constant -> LBRACK RBRACK
-- On THEN reduce production constant -> LBRACK RBRACK
-- On STRING reduce production constant -> LBRACK RBRACK
-- On STAR reduce production constant -> LBRACK RBRACK
-- On SHARP reduce production constant -> LBRACK RBRACK
-- On SEMI reduce production constant -> LBRACK RBRACK
-- On RPAREN reduce production constant -> LBRACK RBRACK
-- On RBRACK reduce production constant -> LBRACK RBRACK
-- On RBRACE reduce production constant -> LBRACK RBRACK
-- On QUESTION reduce production constant -> LBRACK RBRACK
-- On PREFIXOP reduce production constant -> LBRACK RBRACK
-- On PLUS reduce production constant -> LBRACK RBRACK
-- On MINUS reduce production constant -> LBRACK RBRACK
-- On LVECTOR reduce production constant -> LBRACK RBRACK
-- On LPAREN reduce production constant -> LBRACK RBRACK
-- On LMATRIX reduce production constant -> LBRACK RBRACK
-- On LIDENT reduce production constant -> LBRACK RBRACK
-- On LBRACKBAR reduce production constant -> LBRACK RBRACK
-- On LBRACK reduce production constant -> LBRACK RBRACK
-- On LBRACE reduce production constant -> LBRACK RBRACK
-- On INT reduce production constant -> LBRACK RBRACK
-- On INFIXOP5R reduce production constant -> LBRACK RBRACK
-- On INFIXOP5L reduce production constant -> LBRACK RBRACK
-- On INFIXOP4R reduce production constant -> LBRACK RBRACK
-- On INFIXOP4L reduce production constant -> LBRACK RBRACK
-- On INFIXOP3R reduce production constant -> LBRACK RBRACK
-- On INFIXOP3L reduce production constant -> LBRACK RBRACK
-- On INFIXOP2R reduce production constant -> LBRACK RBRACK
-- On INFIXOP2L reduce production constant -> LBRACK RBRACK
-- On INFIXOP1R reduce production constant -> LBRACK RBRACK
-- On INFIXOP1L reduce production constant -> LBRACK RBRACK
-- On IMAGINARY reduce production constant -> LBRACK RBRACK
-- On FLOAT reduce production constant -> LBRACK RBRACK
-- On EQ reduce production constant -> LBRACK RBRACK
-- On END reduce production constant -> LBRACK RBRACK
-- On ELSE reduce production constant -> LBRACK RBRACK
-- On DOTDOT reduce production constant -> LBRACK RBRACK
-- On DOT reduce production constant -> LBRACK RBRACK
-- On DOLLAR reduce production constant -> LBRACK RBRACK
-- On COMMA reduce production constant -> LBRACK RBRACK
-- On COLONEQUAL reduce production constant -> LBRACK RBRACK
-- On COLONCOLON reduce production constant -> LBRACK RBRACK
-- On COLON reduce production constant -> LBRACK RBRACK
-- On CHAR reduce production constant -> LBRACK RBRACK
-- On BEGIN reduce production constant -> LBRACK RBRACK
-- On BARRBRACK reduce production constant -> LBRACK RBRACK
-- On BARCOLON reduce production constant -> LBRACK RBRACK
-- On BARBAR reduce production constant -> LBRACK RBRACK
-- On BAR reduce production constant -> LBRACK RBRACK
-- On AS reduce production constant -> LBRACK RBRACK
-- On AMPERAMPER reduce production constant -> LBRACK RBRACK

State 94:
constant -> LBRACE . RBRACE [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACE . record_expr opt_comma RBRACE [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACE . record_expr opt_comma error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On UIDENT shift to state 95
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RBRACE shift to state 98
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 99
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 721
-- On record_expr shift to state 773
-- On lbl_expr_list shift to state 736
-- On label_longident shift to state 728
-- On constr_longident shift to state 414
-- On constant shift to state 415

State 95:
constr_longident -> UIDENT . DOT UIDENT [ WITH DOT ]
constr_longident -> UIDENT . [ WITH DOT ]
label_longident -> UIDENT . DOT LIDENT [ EQ ]
val_longident -> UIDENT . DOT val_ident [ WITH DOT ]
-- On DOT shift to state 96
-- On WITH reduce production constr_longident -> UIDENT
** Conflict on DOT

State 96:
constr_longident -> UIDENT DOT . UIDENT [ WITH DOT ]
label_longident -> UIDENT DOT . LIDENT [ EQ ]
val_longident -> UIDENT DOT . val_ident [ WITH DOT ]
-- On UIDENT shift to state 5
-- On LPAREN shift to state 6
-- On LIDENT shift to state 97
-- On val_ident shift to state 29

State 97:
label_longident -> UIDENT DOT LIDENT . [ EQ ]
val_ident -> LIDENT . [ WITH DOT ]
-- On WITH reduce production val_ident -> LIDENT
-- On EQ reduce production label_longident -> UIDENT DOT LIDENT
-- On DOT reduce production val_ident -> LIDENT

State 98:
constant -> LBRACE RBRACE . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> LBRACE RBRACE
-- On WHERE reduce production constant -> LBRACE RBRACE
-- On UIDENT reduce production constant -> LBRACE RBRACE
-- On THEN reduce production constant -> LBRACE RBRACE
-- On STRING reduce production constant -> LBRACE RBRACE
-- On STAR reduce production constant -> LBRACE RBRACE
-- On SHARP reduce production constant -> LBRACE RBRACE
-- On SEMI reduce production constant -> LBRACE RBRACE
-- On RPAREN reduce production constant -> LBRACE RBRACE
-- On RBRACK reduce production constant -> LBRACE RBRACE
-- On RBRACE reduce production constant -> LBRACE RBRACE
-- On QUESTION reduce production constant -> LBRACE RBRACE
-- On PREFIXOP reduce production constant -> LBRACE RBRACE
-- On PLUS reduce production constant -> LBRACE RBRACE
-- On MINUS reduce production constant -> LBRACE RBRACE
-- On LVECTOR reduce production constant -> LBRACE RBRACE
-- On LPAREN reduce production constant -> LBRACE RBRACE
-- On LMATRIX reduce production constant -> LBRACE RBRACE
-- On LIDENT reduce production constant -> LBRACE RBRACE
-- On LBRACKBAR reduce production constant -> LBRACE RBRACE
-- On LBRACK reduce production constant -> LBRACE RBRACE
-- On LBRACE reduce production constant -> LBRACE RBRACE
-- On INT reduce production constant -> LBRACE RBRACE
-- On INFIXOP5R reduce production constant -> LBRACE RBRACE
-- On INFIXOP5L reduce production constant -> LBRACE RBRACE
-- On INFIXOP4R reduce production constant -> LBRACE RBRACE
-- On INFIXOP4L reduce production constant -> LBRACE RBRACE
-- On INFIXOP3R reduce production constant -> LBRACE RBRACE
-- On INFIXOP3L reduce production constant -> LBRACE RBRACE
-- On INFIXOP2R reduce production constant -> LBRACE RBRACE
-- On INFIXOP2L reduce production constant -> LBRACE RBRACE
-- On INFIXOP1R reduce production constant -> LBRACE RBRACE
-- On INFIXOP1L reduce production constant -> LBRACE RBRACE
-- On IMAGINARY reduce production constant -> LBRACE RBRACE
-- On FLOAT reduce production constant -> LBRACE RBRACE
-- On EQ reduce production constant -> LBRACE RBRACE
-- On END reduce production constant -> LBRACE RBRACE
-- On ELSE reduce production constant -> LBRACE RBRACE
-- On DOTDOT reduce production constant -> LBRACE RBRACE
-- On DOT reduce production constant -> LBRACE RBRACE
-- On DOLLAR reduce production constant -> LBRACE RBRACE
-- On COMMA reduce production constant -> LBRACE RBRACE
-- On COLONEQUAL reduce production constant -> LBRACE RBRACE
-- On COLONCOLON reduce production constant -> LBRACE RBRACE
-- On COLON reduce production constant -> LBRACE RBRACE
-- On CHAR reduce production constant -> LBRACE RBRACE
-- On BEGIN reduce production constant -> LBRACE RBRACE
-- On BARRBRACK reduce production constant -> LBRACE RBRACE
-- On BARCOLON reduce production constant -> LBRACE RBRACE
-- On BARBAR reduce production constant -> LBRACE RBRACE
-- On BAR reduce production constant -> LBRACE RBRACE
-- On AS reduce production constant -> LBRACE RBRACE
-- On AMPERAMPER reduce production constant -> LBRACE RBRACE

State 99:
label_longident -> LIDENT . [ EQ ]
val_ident -> LIDENT . [ WITH DOT ]
-- On WITH reduce production val_ident -> LIDENT
-- On EQ reduce production label_longident -> LIDENT
-- On DOT reduce production val_ident -> LIDENT

State 100:
constant -> LBRACK . RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACK . list_expr RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACK . list_expr error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RBRACK shift to state 101
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On list_expr shift to state 746
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 750
-- On expr shift to state 762
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754

State 101:
constant -> LBRACK RBRACK . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> LBRACK RBRACK
-- On WHILE reduce production constant -> LBRACK RBRACK
-- On WHERE reduce production constant -> LBRACK RBRACK
-- On WHEN reduce production constant -> LBRACK RBRACK
-- On UNDERSCORE reduce production constant -> LBRACK RBRACK
-- On UIDENT reduce production constant -> LBRACK RBRACK
-- On TYPE reduce production constant -> LBRACK RBRACK
-- On TRY reduce production constant -> LBRACK RBRACK
-- On TO reduce production constant -> LBRACK RBRACK
-- On THEN reduce production constant -> LBRACK RBRACK
-- On STRING reduce production constant -> LBRACK RBRACK
-- On STAR reduce production constant -> LBRACK RBRACK
-- On SHARP reduce production constant -> LBRACK RBRACK
-- On SEMISEMI reduce production constant -> LBRACK RBRACK
-- On SEMI reduce production constant -> LBRACK RBRACK
-- On RPAREN reduce production constant -> LBRACK RBRACK
-- On RAISE reduce production constant -> LBRACK RBRACK
-- On QUESTION reduce production constant -> LBRACK RBRACK
-- On PREFIXOP reduce production constant -> LBRACK RBRACK
-- On PLUS reduce production constant -> LBRACK RBRACK
-- On OPEN reduce production constant -> LBRACK RBRACK
-- On MODULE reduce production constant -> LBRACK RBRACK
-- On MINUSGREATER reduce production constant -> LBRACK RBRACK
-- On MINUS reduce production constant -> LBRACK RBRACK
-- On MATCH reduce production constant -> LBRACK RBRACK
-- On LVECTOR reduce production constant -> LBRACK RBRACK
-- On LPAREN reduce production constant -> LBRACK RBRACK
-- On LMATRIX reduce production constant -> LBRACK RBRACK
-- On LIDENT reduce production constant -> LBRACK RBRACK
-- On LET reduce production constant -> LBRACK RBRACK
-- On LESSMINUS reduce production constant -> LBRACK RBRACK
-- On LBRACKBAR reduce production constant -> LBRACK RBRACK
-- On LBRACK reduce production constant -> LBRACK RBRACK
-- On LBRACE reduce production constant -> LBRACK RBRACK
-- On LAZY reduce production constant -> LBRACK RBRACK
-- On INT reduce production constant -> LBRACK RBRACK
-- On INFIXOP5R reduce production constant -> LBRACK RBRACK
-- On INFIXOP5L reduce production constant -> LBRACK RBRACK
-- On INFIXOP4R reduce production constant -> LBRACK RBRACK
-- On INFIXOP4L reduce production constant -> LBRACK RBRACK
-- On INFIXOP3R reduce production constant -> LBRACK RBRACK
-- On INFIXOP3L reduce production constant -> LBRACK RBRACK
-- On INFIXOP2R reduce production constant -> LBRACK RBRACK
-- On INFIXOP2L reduce production constant -> LBRACK RBRACK
-- On INFIXOP1R reduce production constant -> LBRACK RBRACK
-- On INFIXOP1L reduce production constant -> LBRACK RBRACK
-- On IN reduce production constant -> LBRACK RBRACK
-- On IMAGINARY reduce production constant -> LBRACK RBRACK
-- On IF reduce production constant -> LBRACK RBRACK
-- On FUNCTION reduce production constant -> LBRACK RBRACK
-- On FUN reduce production constant -> LBRACK RBRACK
-- On FOR reduce production constant -> LBRACK RBRACK
-- On FLOAT reduce production constant -> LBRACK RBRACK
-- On EXCEPTION reduce production constant -> LBRACK RBRACK
-- On EQ reduce production constant -> LBRACK RBRACK
-- On EOF reduce production constant -> LBRACK RBRACK
-- On ELSE reduce production constant -> LBRACK RBRACK
-- On DOWNTO reduce production constant -> LBRACK RBRACK
-- On DOT reduce production constant -> LBRACK RBRACK
-- On DONE reduce production constant -> LBRACK RBRACK
-- On DOLLAR reduce production constant -> LBRACK RBRACK
-- On DO reduce production constant -> LBRACK RBRACK
-- On COMMA reduce production constant -> LBRACK RBRACK
-- On COLONEQUAL reduce production constant -> LBRACK RBRACK
-- On COLONCOLON reduce production constant -> LBRACK RBRACK
-- On COLON reduce production constant -> LBRACK RBRACK
-- On CHAR reduce production constant -> LBRACK RBRACK
-- On CASE reduce production constant -> LBRACK RBRACK
-- On BELOW reduce production constant -> LBRACK RBRACK
-- On BEGIN reduce production constant -> LBRACK RBRACK
-- On BARBAR reduce production constant -> LBRACK RBRACK
-- On BAR reduce production constant -> LBRACK RBRACK
-- On ASSERT reduce production constant -> LBRACK RBRACK
-- On AS reduce production constant -> LBRACK RBRACK
-- On AND reduce production constant -> LBRACK RBRACK
-- On AMPERAMPER reduce production constant -> LBRACK RBRACK
-- On ABOVE reduce production constant -> LBRACK RBRACK

State 102:
value_expr -> LAZY . simple_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On UIDENT shift to state 46
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On PREFIXOP shift to state 63
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On BEGIN shift to state 111
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 745
-- On constr_longident shift to state 515
-- On constant shift to state 516

State 103:
constant -> INT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> INT
-- On WHERE reduce production constant -> INT
-- On UIDENT reduce production constant -> INT
-- On THEN reduce production constant -> INT
-- On STRING reduce production constant -> INT
-- On STAR reduce production constant -> INT
-- On SHARP reduce production constant -> INT
-- On SEMI reduce production constant -> INT
-- On RPAREN reduce production constant -> INT
-- On RBRACK reduce production constant -> INT
-- On RBRACE reduce production constant -> INT
-- On QUESTION reduce production constant -> INT
-- On PREFIXOP reduce production constant -> INT
-- On PLUS reduce production constant -> INT
-- On MINUS reduce production constant -> INT
-- On LVECTOR reduce production constant -> INT
-- On LPAREN reduce production constant -> INT
-- On LMATRIX reduce production constant -> INT
-- On LIDENT reduce production constant -> INT
-- On LBRACKBAR reduce production constant -> INT
-- On LBRACK reduce production constant -> INT
-- On LBRACE reduce production constant -> INT
-- On INT reduce production constant -> INT
-- On INFIXOP5R reduce production constant -> INT
-- On INFIXOP5L reduce production constant -> INT
-- On INFIXOP4R reduce production constant -> INT
-- On INFIXOP4L reduce production constant -> INT
-- On INFIXOP3R reduce production constant -> INT
-- On INFIXOP3L reduce production constant -> INT
-- On INFIXOP2R reduce production constant -> INT
-- On INFIXOP2L reduce production constant -> INT
-- On INFIXOP1R reduce production constant -> INT
-- On INFIXOP1L reduce production constant -> INT
-- On IMAGINARY reduce production constant -> INT
-- On FLOAT reduce production constant -> INT
-- On EQ reduce production constant -> INT
-- On END reduce production constant -> INT
-- On ELSE reduce production constant -> INT
-- On DOTDOT reduce production constant -> INT
-- On DOT reduce production constant -> INT
-- On DOLLAR reduce production constant -> INT
-- On COMMA reduce production constant -> INT
-- On COLONEQUAL reduce production constant -> INT
-- On COLONCOLON reduce production constant -> INT
-- On COLON reduce production constant -> INT
-- On CHAR reduce production constant -> INT
-- On BEGIN reduce production constant -> INT
-- On BARRBRACK reduce production constant -> INT
-- On BARCOLON reduce production constant -> INT
-- On BARBAR reduce production constant -> INT
-- On BAR reduce production constant -> INT
-- On AS reduce production constant -> INT
-- On AMPERAMPER reduce production constant -> INT

State 104:
constant -> IMAGINARY . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> IMAGINARY
-- On WHERE reduce production constant -> IMAGINARY
-- On UIDENT reduce production constant -> IMAGINARY
-- On THEN reduce production constant -> IMAGINARY
-- On STRING reduce production constant -> IMAGINARY
-- On STAR reduce production constant -> IMAGINARY
-- On SHARP reduce production constant -> IMAGINARY
-- On SEMI reduce production constant -> IMAGINARY
-- On RPAREN reduce production constant -> IMAGINARY
-- On RBRACK reduce production constant -> IMAGINARY
-- On RBRACE reduce production constant -> IMAGINARY
-- On QUESTION reduce production constant -> IMAGINARY
-- On PREFIXOP reduce production constant -> IMAGINARY
-- On PLUS reduce production constant -> IMAGINARY
-- On MINUS reduce production constant -> IMAGINARY
-- On LVECTOR reduce production constant -> IMAGINARY
-- On LPAREN reduce production constant -> IMAGINARY
-- On LMATRIX reduce production constant -> IMAGINARY
-- On LIDENT reduce production constant -> IMAGINARY
-- On LBRACKBAR reduce production constant -> IMAGINARY
-- On LBRACK reduce production constant -> IMAGINARY
-- On LBRACE reduce production constant -> IMAGINARY
-- On INT reduce production constant -> IMAGINARY
-- On INFIXOP5R reduce production constant -> IMAGINARY
-- On INFIXOP5L reduce production constant -> IMAGINARY
-- On INFIXOP4R reduce production constant -> IMAGINARY
-- On INFIXOP4L reduce production constant -> IMAGINARY
-- On INFIXOP3R reduce production constant -> IMAGINARY
-- On INFIXOP3L reduce production constant -> IMAGINARY
-- On INFIXOP2R reduce production constant -> IMAGINARY
-- On INFIXOP2L reduce production constant -> IMAGINARY
-- On INFIXOP1R reduce production constant -> IMAGINARY
-- On INFIXOP1L reduce production constant -> IMAGINARY
-- On IMAGINARY reduce production constant -> IMAGINARY
-- On FLOAT reduce production constant -> IMAGINARY
-- On EQ reduce production constant -> IMAGINARY
-- On END reduce production constant -> IMAGINARY
-- On ELSE reduce production constant -> IMAGINARY
-- On DOTDOT reduce production constant -> IMAGINARY
-- On DOT reduce production constant -> IMAGINARY
-- On DOLLAR reduce production constant -> IMAGINARY
-- On COMMA reduce production constant -> IMAGINARY
-- On COLONEQUAL reduce production constant -> IMAGINARY
-- On COLONCOLON reduce production constant -> IMAGINARY
-- On COLON reduce production constant -> IMAGINARY
-- On CHAR reduce production constant -> IMAGINARY
-- On BEGIN reduce production constant -> IMAGINARY
-- On BARRBRACK reduce production constant -> IMAGINARY
-- On BARCOLON reduce production constant -> IMAGINARY
-- On BARBAR reduce production constant -> IMAGINARY
-- On BAR reduce production constant -> IMAGINARY
-- On AS reduce production constant -> IMAGINARY
-- On AMPERAMPER reduce production constant -> IMAGINARY

State 105:
constant -> FLOAT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> FLOAT
-- On WHERE reduce production constant -> FLOAT
-- On UIDENT reduce production constant -> FLOAT
-- On THEN reduce production constant -> FLOAT
-- On STRING reduce production constant -> FLOAT
-- On STAR reduce production constant -> FLOAT
-- On SHARP reduce production constant -> FLOAT
-- On SEMI reduce production constant -> FLOAT
-- On RPAREN reduce production constant -> FLOAT
-- On RBRACK reduce production constant -> FLOAT
-- On RBRACE reduce production constant -> FLOAT
-- On QUESTION reduce production constant -> FLOAT
-- On PREFIXOP reduce production constant -> FLOAT
-- On PLUS reduce production constant -> FLOAT
-- On MINUS reduce production constant -> FLOAT
-- On LVECTOR reduce production constant -> FLOAT
-- On LPAREN reduce production constant -> FLOAT
-- On LMATRIX reduce production constant -> FLOAT
-- On LIDENT reduce production constant -> FLOAT
-- On LBRACKBAR reduce production constant -> FLOAT
-- On LBRACK reduce production constant -> FLOAT
-- On LBRACE reduce production constant -> FLOAT
-- On INT reduce production constant -> FLOAT
-- On INFIXOP5R reduce production constant -> FLOAT
-- On INFIXOP5L reduce production constant -> FLOAT
-- On INFIXOP4R reduce production constant -> FLOAT
-- On INFIXOP4L reduce production constant -> FLOAT
-- On INFIXOP3R reduce production constant -> FLOAT
-- On INFIXOP3L reduce production constant -> FLOAT
-- On INFIXOP2R reduce production constant -> FLOAT
-- On INFIXOP2L reduce production constant -> FLOAT
-- On INFIXOP1R reduce production constant -> FLOAT
-- On INFIXOP1L reduce production constant -> FLOAT
-- On IMAGINARY reduce production constant -> FLOAT
-- On FLOAT reduce production constant -> FLOAT
-- On EQ reduce production constant -> FLOAT
-- On END reduce production constant -> FLOAT
-- On ELSE reduce production constant -> FLOAT
-- On DOTDOT reduce production constant -> FLOAT
-- On DOT reduce production constant -> FLOAT
-- On DOLLAR reduce production constant -> FLOAT
-- On COMMA reduce production constant -> FLOAT
-- On COLONEQUAL reduce production constant -> FLOAT
-- On COLONCOLON reduce production constant -> FLOAT
-- On COLON reduce production constant -> FLOAT
-- On CHAR reduce production constant -> FLOAT
-- On BEGIN reduce production constant -> FLOAT
-- On BARRBRACK reduce production constant -> FLOAT
-- On BARCOLON reduce production constant -> FLOAT
-- On BARBAR reduce production constant -> FLOAT
-- On BAR reduce production constant -> FLOAT
-- On AS reduce production constant -> FLOAT
-- On AMPERAMPER reduce production constant -> FLOAT

State 106:
constant -> DOLLAR . STRING [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
constant -> DOLLAR . LIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
constant -> DOLLAR . UIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On UIDENT shift to state 107
-- On STRING shift to state 108
-- On LIDENT shift to state 109

State 107:
constant -> DOLLAR UIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> DOLLAR UIDENT
-- On WHERE reduce production constant -> DOLLAR UIDENT
-- On UIDENT reduce production constant -> DOLLAR UIDENT
-- On THEN reduce production constant -> DOLLAR UIDENT
-- On STRING reduce production constant -> DOLLAR UIDENT
-- On STAR reduce production constant -> DOLLAR UIDENT
-- On SHARP reduce production constant -> DOLLAR UIDENT
-- On SEMI reduce production constant -> DOLLAR UIDENT
-- On RPAREN reduce production constant -> DOLLAR UIDENT
-- On RBRACK reduce production constant -> DOLLAR UIDENT
-- On RBRACE reduce production constant -> DOLLAR UIDENT
-- On QUESTION reduce production constant -> DOLLAR UIDENT
-- On PREFIXOP reduce production constant -> DOLLAR UIDENT
-- On PLUS reduce production constant -> DOLLAR UIDENT
-- On MINUS reduce production constant -> DOLLAR UIDENT
-- On LVECTOR reduce production constant -> DOLLAR UIDENT
-- On LPAREN reduce production constant -> DOLLAR UIDENT
-- On LMATRIX reduce production constant -> DOLLAR UIDENT
-- On LIDENT reduce production constant -> DOLLAR UIDENT
-- On LBRACKBAR reduce production constant -> DOLLAR UIDENT
-- On LBRACK reduce production constant -> DOLLAR UIDENT
-- On LBRACE reduce production constant -> DOLLAR UIDENT
-- On INT reduce production constant -> DOLLAR UIDENT
-- On INFIXOP5R reduce production constant -> DOLLAR UIDENT
-- On INFIXOP5L reduce production constant -> DOLLAR UIDENT
-- On INFIXOP4R reduce production constant -> DOLLAR UIDENT
-- On INFIXOP4L reduce production constant -> DOLLAR UIDENT
-- On INFIXOP3R reduce production constant -> DOLLAR UIDENT
-- On INFIXOP3L reduce production constant -> DOLLAR UIDENT
-- On INFIXOP2R reduce production constant -> DOLLAR UIDENT
-- On INFIXOP2L reduce production constant -> DOLLAR UIDENT
-- On INFIXOP1R reduce production constant -> DOLLAR UIDENT
-- On INFIXOP1L reduce production constant -> DOLLAR UIDENT
-- On IMAGINARY reduce production constant -> DOLLAR UIDENT
-- On FLOAT reduce production constant -> DOLLAR UIDENT
-- On EQ reduce production constant -> DOLLAR UIDENT
-- On END reduce production constant -> DOLLAR UIDENT
-- On ELSE reduce production constant -> DOLLAR UIDENT
-- On DOTDOT reduce production constant -> DOLLAR UIDENT
-- On DOT reduce production constant -> DOLLAR UIDENT
-- On DOLLAR reduce production constant -> DOLLAR UIDENT
-- On COMMA reduce production constant -> DOLLAR UIDENT
-- On COLONEQUAL reduce production constant -> DOLLAR UIDENT
-- On COLONCOLON reduce production constant -> DOLLAR UIDENT
-- On COLON reduce production constant -> DOLLAR UIDENT
-- On CHAR reduce production constant -> DOLLAR UIDENT
-- On BEGIN reduce production constant -> DOLLAR UIDENT
-- On BARRBRACK reduce production constant -> DOLLAR UIDENT
-- On BARCOLON reduce production constant -> DOLLAR UIDENT
-- On BARBAR reduce production constant -> DOLLAR UIDENT
-- On BAR reduce production constant -> DOLLAR UIDENT
-- On AS reduce production constant -> DOLLAR UIDENT
-- On AMPERAMPER reduce production constant -> DOLLAR UIDENT

State 108:
constant -> DOLLAR STRING . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> DOLLAR STRING
-- On WHERE reduce production constant -> DOLLAR STRING
-- On UIDENT reduce production constant -> DOLLAR STRING
-- On THEN reduce production constant -> DOLLAR STRING
-- On STRING reduce production constant -> DOLLAR STRING
-- On STAR reduce production constant -> DOLLAR STRING
-- On SHARP reduce production constant -> DOLLAR STRING
-- On SEMI reduce production constant -> DOLLAR STRING
-- On RPAREN reduce production constant -> DOLLAR STRING
-- On RBRACK reduce production constant -> DOLLAR STRING
-- On RBRACE reduce production constant -> DOLLAR STRING
-- On QUESTION reduce production constant -> DOLLAR STRING
-- On PREFIXOP reduce production constant -> DOLLAR STRING
-- On PLUS reduce production constant -> DOLLAR STRING
-- On MINUS reduce production constant -> DOLLAR STRING
-- On LVECTOR reduce production constant -> DOLLAR STRING
-- On LPAREN reduce production constant -> DOLLAR STRING
-- On LMATRIX reduce production constant -> DOLLAR STRING
-- On LIDENT reduce production constant -> DOLLAR STRING
-- On LBRACKBAR reduce production constant -> DOLLAR STRING
-- On LBRACK reduce production constant -> DOLLAR STRING
-- On LBRACE reduce production constant -> DOLLAR STRING
-- On INT reduce production constant -> DOLLAR STRING
-- On INFIXOP5R reduce production constant -> DOLLAR STRING
-- On INFIXOP5L reduce production constant -> DOLLAR STRING
-- On INFIXOP4R reduce production constant -> DOLLAR STRING
-- On INFIXOP4L reduce production constant -> DOLLAR STRING
-- On INFIXOP3R reduce production constant -> DOLLAR STRING
-- On INFIXOP3L reduce production constant -> DOLLAR STRING
-- On INFIXOP2R reduce production constant -> DOLLAR STRING
-- On INFIXOP2L reduce production constant -> DOLLAR STRING
-- On INFIXOP1R reduce production constant -> DOLLAR STRING
-- On INFIXOP1L reduce production constant -> DOLLAR STRING
-- On IMAGINARY reduce production constant -> DOLLAR STRING
-- On FLOAT reduce production constant -> DOLLAR STRING
-- On EQ reduce production constant -> DOLLAR STRING
-- On END reduce production constant -> DOLLAR STRING
-- On ELSE reduce production constant -> DOLLAR STRING
-- On DOTDOT reduce production constant -> DOLLAR STRING
-- On DOT reduce production constant -> DOLLAR STRING
-- On DOLLAR reduce production constant -> DOLLAR STRING
-- On COMMA reduce production constant -> DOLLAR STRING
-- On COLONEQUAL reduce production constant -> DOLLAR STRING
-- On COLONCOLON reduce production constant -> DOLLAR STRING
-- On COLON reduce production constant -> DOLLAR STRING
-- On CHAR reduce production constant -> DOLLAR STRING
-- On BEGIN reduce production constant -> DOLLAR STRING
-- On BARRBRACK reduce production constant -> DOLLAR STRING
-- On BARCOLON reduce production constant -> DOLLAR STRING
-- On BARBAR reduce production constant -> DOLLAR STRING
-- On BAR reduce production constant -> DOLLAR STRING
-- On AS reduce production constant -> DOLLAR STRING
-- On AMPERAMPER reduce production constant -> DOLLAR STRING

State 109:
constant -> DOLLAR LIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> DOLLAR LIDENT
-- On WHERE reduce production constant -> DOLLAR LIDENT
-- On UIDENT reduce production constant -> DOLLAR LIDENT
-- On THEN reduce production constant -> DOLLAR LIDENT
-- On STRING reduce production constant -> DOLLAR LIDENT
-- On STAR reduce production constant -> DOLLAR LIDENT
-- On SHARP reduce production constant -> DOLLAR LIDENT
-- On SEMI reduce production constant -> DOLLAR LIDENT
-- On RPAREN reduce production constant -> DOLLAR LIDENT
-- On RBRACK reduce production constant -> DOLLAR LIDENT
-- On RBRACE reduce production constant -> DOLLAR LIDENT
-- On QUESTION reduce production constant -> DOLLAR LIDENT
-- On PREFIXOP reduce production constant -> DOLLAR LIDENT
-- On PLUS reduce production constant -> DOLLAR LIDENT
-- On MINUS reduce production constant -> DOLLAR LIDENT
-- On LVECTOR reduce production constant -> DOLLAR LIDENT
-- On LPAREN reduce production constant -> DOLLAR LIDENT
-- On LMATRIX reduce production constant -> DOLLAR LIDENT
-- On LIDENT reduce production constant -> DOLLAR LIDENT
-- On LBRACKBAR reduce production constant -> DOLLAR LIDENT
-- On LBRACK reduce production constant -> DOLLAR LIDENT
-- On LBRACE reduce production constant -> DOLLAR LIDENT
-- On INT reduce production constant -> DOLLAR LIDENT
-- On INFIXOP5R reduce production constant -> DOLLAR LIDENT
-- On INFIXOP5L reduce production constant -> DOLLAR LIDENT
-- On INFIXOP4R reduce production constant -> DOLLAR LIDENT
-- On INFIXOP4L reduce production constant -> DOLLAR LIDENT
-- On INFIXOP3R reduce production constant -> DOLLAR LIDENT
-- On INFIXOP3L reduce production constant -> DOLLAR LIDENT
-- On INFIXOP2R reduce production constant -> DOLLAR LIDENT
-- On INFIXOP2L reduce production constant -> DOLLAR LIDENT
-- On INFIXOP1R reduce production constant -> DOLLAR LIDENT
-- On INFIXOP1L reduce production constant -> DOLLAR LIDENT
-- On IMAGINARY reduce production constant -> DOLLAR LIDENT
-- On FLOAT reduce production constant -> DOLLAR LIDENT
-- On EQ reduce production constant -> DOLLAR LIDENT
-- On END reduce production constant -> DOLLAR LIDENT
-- On ELSE reduce production constant -> DOLLAR LIDENT
-- On DOTDOT reduce production constant -> DOLLAR LIDENT
-- On DOT reduce production constant -> DOLLAR LIDENT
-- On DOLLAR reduce production constant -> DOLLAR LIDENT
-- On COMMA reduce production constant -> DOLLAR LIDENT
-- On COLONEQUAL reduce production constant -> DOLLAR LIDENT
-- On COLONCOLON reduce production constant -> DOLLAR LIDENT
-- On COLON reduce production constant -> DOLLAR LIDENT
-- On CHAR reduce production constant -> DOLLAR LIDENT
-- On BEGIN reduce production constant -> DOLLAR LIDENT
-- On BARRBRACK reduce production constant -> DOLLAR LIDENT
-- On BARCOLON reduce production constant -> DOLLAR LIDENT
-- On BARBAR reduce production constant -> DOLLAR LIDENT
-- On BAR reduce production constant -> DOLLAR LIDENT
-- On AS reduce production constant -> DOLLAR LIDENT
-- On AMPERAMPER reduce production constant -> DOLLAR LIDENT

State 110:
constant -> CHAR . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> CHAR
-- On WHERE reduce production constant -> CHAR
-- On UIDENT reduce production constant -> CHAR
-- On THEN reduce production constant -> CHAR
-- On STRING reduce production constant -> CHAR
-- On STAR reduce production constant -> CHAR
-- On SHARP reduce production constant -> CHAR
-- On SEMI reduce production constant -> CHAR
-- On RPAREN reduce production constant -> CHAR
-- On RBRACK reduce production constant -> CHAR
-- On RBRACE reduce production constant -> CHAR
-- On QUESTION reduce production constant -> CHAR
-- On PREFIXOP reduce production constant -> CHAR
-- On PLUS reduce production constant -> CHAR
-- On MINUS reduce production constant -> CHAR
-- On LVECTOR reduce production constant -> CHAR
-- On LPAREN reduce production constant -> CHAR
-- On LMATRIX reduce production constant -> CHAR
-- On LIDENT reduce production constant -> CHAR
-- On LBRACKBAR reduce production constant -> CHAR
-- On LBRACK reduce production constant -> CHAR
-- On LBRACE reduce production constant -> CHAR
-- On INT reduce production constant -> CHAR
-- On INFIXOP5R reduce production constant -> CHAR
-- On INFIXOP5L reduce production constant -> CHAR
-- On INFIXOP4R reduce production constant -> CHAR
-- On INFIXOP4L reduce production constant -> CHAR
-- On INFIXOP3R reduce production constant -> CHAR
-- On INFIXOP3L reduce production constant -> CHAR
-- On INFIXOP2R reduce production constant -> CHAR
-- On INFIXOP2L reduce production constant -> CHAR
-- On INFIXOP1R reduce production constant -> CHAR
-- On INFIXOP1L reduce production constant -> CHAR
-- On IMAGINARY reduce production constant -> CHAR
-- On FLOAT reduce production constant -> CHAR
-- On EQ reduce production constant -> CHAR
-- On END reduce production constant -> CHAR
-- On ELSE reduce production constant -> CHAR
-- On DOTDOT reduce production constant -> CHAR
-- On DOT reduce production constant -> CHAR
-- On DOLLAR reduce production constant -> CHAR
-- On COMMA reduce production constant -> CHAR
-- On COLONEQUAL reduce production constant -> CHAR
-- On COLONCOLON reduce production constant -> CHAR
-- On COLON reduce production constant -> CHAR
-- On CHAR reduce production constant -> CHAR
-- On BEGIN reduce production constant -> CHAR
-- On BARRBRACK reduce production constant -> CHAR
-- On BARCOLON reduce production constant -> CHAR
-- On BARBAR reduce production constant -> CHAR
-- On BAR reduce production constant -> CHAR
-- On AS reduce production constant -> CHAR
-- On AMPERAMPER reduce production constant -> CHAR

State 111:
simple_expr -> BEGIN . seq_expr END [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> BEGIN . seq_expr error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On seq_expr shift to state 742
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 629

State 112:
value_expr -> IF . expr THEN expr ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> IF . expr THEN expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 737
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 113:
constant -> LBRACE . RBRACE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACE . record_expr opt_comma RBRACE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACE . record_expr opt_comma error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On UIDENT shift to state 95
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RBRACE shift to state 114
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 99
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 721
-- On record_expr shift to state 731
-- On lbl_expr_list shift to state 736
-- On label_longident shift to state 728
-- On constr_longident shift to state 414
-- On constant shift to state 415

State 114:
constant -> LBRACE RBRACE . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> LBRACE RBRACE
-- On WHILE reduce production constant -> LBRACE RBRACE
-- On WHERE reduce production constant -> LBRACE RBRACE
-- On WHEN reduce production constant -> LBRACE RBRACE
-- On UNDERSCORE reduce production constant -> LBRACE RBRACE
-- On UIDENT reduce production constant -> LBRACE RBRACE
-- On TYPE reduce production constant -> LBRACE RBRACE
-- On TRY reduce production constant -> LBRACE RBRACE
-- On TO reduce production constant -> LBRACE RBRACE
-- On THEN reduce production constant -> LBRACE RBRACE
-- On STRING reduce production constant -> LBRACE RBRACE
-- On STAR reduce production constant -> LBRACE RBRACE
-- On SHARP reduce production constant -> LBRACE RBRACE
-- On SEMISEMI reduce production constant -> LBRACE RBRACE
-- On SEMI reduce production constant -> LBRACE RBRACE
-- On RPAREN reduce production constant -> LBRACE RBRACE
-- On RAISE reduce production constant -> LBRACE RBRACE
-- On QUESTION reduce production constant -> LBRACE RBRACE
-- On PREFIXOP reduce production constant -> LBRACE RBRACE
-- On PLUS reduce production constant -> LBRACE RBRACE
-- On OPEN reduce production constant -> LBRACE RBRACE
-- On MODULE reduce production constant -> LBRACE RBRACE
-- On MINUSGREATER reduce production constant -> LBRACE RBRACE
-- On MINUS reduce production constant -> LBRACE RBRACE
-- On MATCH reduce production constant -> LBRACE RBRACE
-- On LVECTOR reduce production constant -> LBRACE RBRACE
-- On LPAREN reduce production constant -> LBRACE RBRACE
-- On LMATRIX reduce production constant -> LBRACE RBRACE
-- On LIDENT reduce production constant -> LBRACE RBRACE
-- On LET reduce production constant -> LBRACE RBRACE
-- On LESSMINUS reduce production constant -> LBRACE RBRACE
-- On LBRACKBAR reduce production constant -> LBRACE RBRACE
-- On LBRACK reduce production constant -> LBRACE RBRACE
-- On LBRACE reduce production constant -> LBRACE RBRACE
-- On LAZY reduce production constant -> LBRACE RBRACE
-- On INT reduce production constant -> LBRACE RBRACE
-- On INFIXOP5R reduce production constant -> LBRACE RBRACE
-- On INFIXOP5L reduce production constant -> LBRACE RBRACE
-- On INFIXOP4R reduce production constant -> LBRACE RBRACE
-- On INFIXOP4L reduce production constant -> LBRACE RBRACE
-- On INFIXOP3R reduce production constant -> LBRACE RBRACE
-- On INFIXOP3L reduce production constant -> LBRACE RBRACE
-- On INFIXOP2R reduce production constant -> LBRACE RBRACE
-- On INFIXOP2L reduce production constant -> LBRACE RBRACE
-- On INFIXOP1R reduce production constant -> LBRACE RBRACE
-- On INFIXOP1L reduce production constant -> LBRACE RBRACE
-- On IN reduce production constant -> LBRACE RBRACE
-- On IMAGINARY reduce production constant -> LBRACE RBRACE
-- On IF reduce production constant -> LBRACE RBRACE
-- On FUNCTION reduce production constant -> LBRACE RBRACE
-- On FUN reduce production constant -> LBRACE RBRACE
-- On FOR reduce production constant -> LBRACE RBRACE
-- On FLOAT reduce production constant -> LBRACE RBRACE
-- On EXCEPTION reduce production constant -> LBRACE RBRACE
-- On EQ reduce production constant -> LBRACE RBRACE
-- On EOF reduce production constant -> LBRACE RBRACE
-- On ELSE reduce production constant -> LBRACE RBRACE
-- On DOWNTO reduce production constant -> LBRACE RBRACE
-- On DOT reduce production constant -> LBRACE RBRACE
-- On DONE reduce production constant -> LBRACE RBRACE
-- On DOLLAR reduce production constant -> LBRACE RBRACE
-- On DO reduce production constant -> LBRACE RBRACE
-- On COMMA reduce production constant -> LBRACE RBRACE
-- On COLONEQUAL reduce production constant -> LBRACE RBRACE
-- On COLONCOLON reduce production constant -> LBRACE RBRACE
-- On COLON reduce production constant -> LBRACE RBRACE
-- On CHAR reduce production constant -> LBRACE RBRACE
-- On CASE reduce production constant -> LBRACE RBRACE
-- On BELOW reduce production constant -> LBRACE RBRACE
-- On BEGIN reduce production constant -> LBRACE RBRACE
-- On BARBAR reduce production constant -> LBRACE RBRACE
-- On BAR reduce production constant -> LBRACE RBRACE
-- On ASSERT reduce production constant -> LBRACE RBRACE
-- On AS reduce production constant -> LBRACE RBRACE
-- On AND reduce production constant -> LBRACE RBRACE
-- On AMPERAMPER reduce production constant -> LBRACE RBRACE
-- On ABOVE reduce production constant -> LBRACE RBRACE

State 115:
constant -> INT . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> INT
-- On WHILE reduce production constant -> INT
-- On WHERE reduce production constant -> INT
-- On WHEN reduce production constant -> INT
-- On UNDERSCORE reduce production constant -> INT
-- On UIDENT reduce production constant -> INT
-- On TYPE reduce production constant -> INT
-- On TRY reduce production constant -> INT
-- On TO reduce production constant -> INT
-- On THEN reduce production constant -> INT
-- On STRING reduce production constant -> INT
-- On STAR reduce production constant -> INT
-- On SHARP reduce production constant -> INT
-- On SEMISEMI reduce production constant -> INT
-- On SEMI reduce production constant -> INT
-- On RPAREN reduce production constant -> INT
-- On RAISE reduce production constant -> INT
-- On QUESTION reduce production constant -> INT
-- On PREFIXOP reduce production constant -> INT
-- On PLUS reduce production constant -> INT
-- On OPEN reduce production constant -> INT
-- On MODULE reduce production constant -> INT
-- On MINUSGREATER reduce production constant -> INT
-- On MINUS reduce production constant -> INT
-- On MATCH reduce production constant -> INT
-- On LVECTOR reduce production constant -> INT
-- On LPAREN reduce production constant -> INT
-- On LMATRIX reduce production constant -> INT
-- On LIDENT reduce production constant -> INT
-- On LET reduce production constant -> INT
-- On LESSMINUS reduce production constant -> INT
-- On LBRACKBAR reduce production constant -> INT
-- On LBRACK reduce production constant -> INT
-- On LBRACE reduce production constant -> INT
-- On LAZY reduce production constant -> INT
-- On INT reduce production constant -> INT
-- On INFIXOP5R reduce production constant -> INT
-- On INFIXOP5L reduce production constant -> INT
-- On INFIXOP4R reduce production constant -> INT
-- On INFIXOP4L reduce production constant -> INT
-- On INFIXOP3R reduce production constant -> INT
-- On INFIXOP3L reduce production constant -> INT
-- On INFIXOP2R reduce production constant -> INT
-- On INFIXOP2L reduce production constant -> INT
-- On INFIXOP1R reduce production constant -> INT
-- On INFIXOP1L reduce production constant -> INT
-- On IN reduce production constant -> INT
-- On IMAGINARY reduce production constant -> INT
-- On IF reduce production constant -> INT
-- On FUNCTION reduce production constant -> INT
-- On FUN reduce production constant -> INT
-- On FOR reduce production constant -> INT
-- On FLOAT reduce production constant -> INT
-- On EXCEPTION reduce production constant -> INT
-- On EQ reduce production constant -> INT
-- On EOF reduce production constant -> INT
-- On ELSE reduce production constant -> INT
-- On DOWNTO reduce production constant -> INT
-- On DOT reduce production constant -> INT
-- On DONE reduce production constant -> INT
-- On DOLLAR reduce production constant -> INT
-- On DO reduce production constant -> INT
-- On COMMA reduce production constant -> INT
-- On COLONEQUAL reduce production constant -> INT
-- On COLONCOLON reduce production constant -> INT
-- On COLON reduce production constant -> INT
-- On CHAR reduce production constant -> INT
-- On CASE reduce production constant -> INT
-- On BELOW reduce production constant -> INT
-- On BEGIN reduce production constant -> INT
-- On BARBAR reduce production constant -> INT
-- On BAR reduce production constant -> INT
-- On ASSERT reduce production constant -> INT
-- On AS reduce production constant -> INT
-- On AND reduce production constant -> INT
-- On AMPERAMPER reduce production constant -> INT
-- On ABOVE reduce production constant -> INT

State 116:
constant -> IMAGINARY . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> IMAGINARY
-- On WHILE reduce production constant -> IMAGINARY
-- On WHERE reduce production constant -> IMAGINARY
-- On WHEN reduce production constant -> IMAGINARY
-- On UNDERSCORE reduce production constant -> IMAGINARY
-- On UIDENT reduce production constant -> IMAGINARY
-- On TYPE reduce production constant -> IMAGINARY
-- On TRY reduce production constant -> IMAGINARY
-- On TO reduce production constant -> IMAGINARY
-- On THEN reduce production constant -> IMAGINARY
-- On STRING reduce production constant -> IMAGINARY
-- On STAR reduce production constant -> IMAGINARY
-- On SHARP reduce production constant -> IMAGINARY
-- On SEMISEMI reduce production constant -> IMAGINARY
-- On SEMI reduce production constant -> IMAGINARY
-- On RPAREN reduce production constant -> IMAGINARY
-- On RAISE reduce production constant -> IMAGINARY
-- On QUESTION reduce production constant -> IMAGINARY
-- On PREFIXOP reduce production constant -> IMAGINARY
-- On PLUS reduce production constant -> IMAGINARY
-- On OPEN reduce production constant -> IMAGINARY
-- On MODULE reduce production constant -> IMAGINARY
-- On MINUSGREATER reduce production constant -> IMAGINARY
-- On MINUS reduce production constant -> IMAGINARY
-- On MATCH reduce production constant -> IMAGINARY
-- On LVECTOR reduce production constant -> IMAGINARY
-- On LPAREN reduce production constant -> IMAGINARY
-- On LMATRIX reduce production constant -> IMAGINARY
-- On LIDENT reduce production constant -> IMAGINARY
-- On LET reduce production constant -> IMAGINARY
-- On LESSMINUS reduce production constant -> IMAGINARY
-- On LBRACKBAR reduce production constant -> IMAGINARY
-- On LBRACK reduce production constant -> IMAGINARY
-- On LBRACE reduce production constant -> IMAGINARY
-- On LAZY reduce production constant -> IMAGINARY
-- On INT reduce production constant -> IMAGINARY
-- On INFIXOP5R reduce production constant -> IMAGINARY
-- On INFIXOP5L reduce production constant -> IMAGINARY
-- On INFIXOP4R reduce production constant -> IMAGINARY
-- On INFIXOP4L reduce production constant -> IMAGINARY
-- On INFIXOP3R reduce production constant -> IMAGINARY
-- On INFIXOP3L reduce production constant -> IMAGINARY
-- On INFIXOP2R reduce production constant -> IMAGINARY
-- On INFIXOP2L reduce production constant -> IMAGINARY
-- On INFIXOP1R reduce production constant -> IMAGINARY
-- On INFIXOP1L reduce production constant -> IMAGINARY
-- On IN reduce production constant -> IMAGINARY
-- On IMAGINARY reduce production constant -> IMAGINARY
-- On IF reduce production constant -> IMAGINARY
-- On FUNCTION reduce production constant -> IMAGINARY
-- On FUN reduce production constant -> IMAGINARY
-- On FOR reduce production constant -> IMAGINARY
-- On FLOAT reduce production constant -> IMAGINARY
-- On EXCEPTION reduce production constant -> IMAGINARY
-- On EQ reduce production constant -> IMAGINARY
-- On EOF reduce production constant -> IMAGINARY
-- On ELSE reduce production constant -> IMAGINARY
-- On DOWNTO reduce production constant -> IMAGINARY
-- On DOT reduce production constant -> IMAGINARY
-- On DONE reduce production constant -> IMAGINARY
-- On DOLLAR reduce production constant -> IMAGINARY
-- On DO reduce production constant -> IMAGINARY
-- On COMMA reduce production constant -> IMAGINARY
-- On COLONEQUAL reduce production constant -> IMAGINARY
-- On COLONCOLON reduce production constant -> IMAGINARY
-- On COLON reduce production constant -> IMAGINARY
-- On CHAR reduce production constant -> IMAGINARY
-- On CASE reduce production constant -> IMAGINARY
-- On BELOW reduce production constant -> IMAGINARY
-- On BEGIN reduce production constant -> IMAGINARY
-- On BARBAR reduce production constant -> IMAGINARY
-- On BAR reduce production constant -> IMAGINARY
-- On ASSERT reduce production constant -> IMAGINARY
-- On AS reduce production constant -> IMAGINARY
-- On AND reduce production constant -> IMAGINARY
-- On AMPERAMPER reduce production constant -> IMAGINARY
-- On ABOVE reduce production constant -> IMAGINARY

State 117:
constant -> FLOAT . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> FLOAT
-- On WHILE reduce production constant -> FLOAT
-- On WHERE reduce production constant -> FLOAT
-- On WHEN reduce production constant -> FLOAT
-- On UNDERSCORE reduce production constant -> FLOAT
-- On UIDENT reduce production constant -> FLOAT
-- On TYPE reduce production constant -> FLOAT
-- On TRY reduce production constant -> FLOAT
-- On TO reduce production constant -> FLOAT
-- On THEN reduce production constant -> FLOAT
-- On STRING reduce production constant -> FLOAT
-- On STAR reduce production constant -> FLOAT
-- On SHARP reduce production constant -> FLOAT
-- On SEMISEMI reduce production constant -> FLOAT
-- On SEMI reduce production constant -> FLOAT
-- On RPAREN reduce production constant -> FLOAT
-- On RAISE reduce production constant -> FLOAT
-- On QUESTION reduce production constant -> FLOAT
-- On PREFIXOP reduce production constant -> FLOAT
-- On PLUS reduce production constant -> FLOAT
-- On OPEN reduce production constant -> FLOAT
-- On MODULE reduce production constant -> FLOAT
-- On MINUSGREATER reduce production constant -> FLOAT
-- On MINUS reduce production constant -> FLOAT
-- On MATCH reduce production constant -> FLOAT
-- On LVECTOR reduce production constant -> FLOAT
-- On LPAREN reduce production constant -> FLOAT
-- On LMATRIX reduce production constant -> FLOAT
-- On LIDENT reduce production constant -> FLOAT
-- On LET reduce production constant -> FLOAT
-- On LESSMINUS reduce production constant -> FLOAT
-- On LBRACKBAR reduce production constant -> FLOAT
-- On LBRACK reduce production constant -> FLOAT
-- On LBRACE reduce production constant -> FLOAT
-- On LAZY reduce production constant -> FLOAT
-- On INT reduce production constant -> FLOAT
-- On INFIXOP5R reduce production constant -> FLOAT
-- On INFIXOP5L reduce production constant -> FLOAT
-- On INFIXOP4R reduce production constant -> FLOAT
-- On INFIXOP4L reduce production constant -> FLOAT
-- On INFIXOP3R reduce production constant -> FLOAT
-- On INFIXOP3L reduce production constant -> FLOAT
-- On INFIXOP2R reduce production constant -> FLOAT
-- On INFIXOP2L reduce production constant -> FLOAT
-- On INFIXOP1R reduce production constant -> FLOAT
-- On INFIXOP1L reduce production constant -> FLOAT
-- On IN reduce production constant -> FLOAT
-- On IMAGINARY reduce production constant -> FLOAT
-- On IF reduce production constant -> FLOAT
-- On FUNCTION reduce production constant -> FLOAT
-- On FUN reduce production constant -> FLOAT
-- On FOR reduce production constant -> FLOAT
-- On FLOAT reduce production constant -> FLOAT
-- On EXCEPTION reduce production constant -> FLOAT
-- On EQ reduce production constant -> FLOAT
-- On EOF reduce production constant -> FLOAT
-- On ELSE reduce production constant -> FLOAT
-- On DOWNTO reduce production constant -> FLOAT
-- On DOT reduce production constant -> FLOAT
-- On DONE reduce production constant -> FLOAT
-- On DOLLAR reduce production constant -> FLOAT
-- On DO reduce production constant -> FLOAT
-- On COMMA reduce production constant -> FLOAT
-- On COLONEQUAL reduce production constant -> FLOAT
-- On COLONCOLON reduce production constant -> FLOAT
-- On COLON reduce production constant -> FLOAT
-- On CHAR reduce production constant -> FLOAT
-- On CASE reduce production constant -> FLOAT
-- On BELOW reduce production constant -> FLOAT
-- On BEGIN reduce production constant -> FLOAT
-- On BARBAR reduce production constant -> FLOAT
-- On BAR reduce production constant -> FLOAT
-- On ASSERT reduce production constant -> FLOAT
-- On AS reduce production constant -> FLOAT
-- On AND reduce production constant -> FLOAT
-- On AMPERAMPER reduce production constant -> FLOAT
-- On ABOVE reduce production constant -> FLOAT

State 118:
constant -> DOLLAR . STRING [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
constant -> DOLLAR . LIDENT [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
constant -> DOLLAR . UIDENT [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On UIDENT shift to state 119
-- On STRING shift to state 120
-- On LIDENT shift to state 121

State 119:
constant -> DOLLAR UIDENT . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> DOLLAR UIDENT
-- On WHILE reduce production constant -> DOLLAR UIDENT
-- On WHERE reduce production constant -> DOLLAR UIDENT
-- On WHEN reduce production constant -> DOLLAR UIDENT
-- On UNDERSCORE reduce production constant -> DOLLAR UIDENT
-- On UIDENT reduce production constant -> DOLLAR UIDENT
-- On TYPE reduce production constant -> DOLLAR UIDENT
-- On TRY reduce production constant -> DOLLAR UIDENT
-- On TO reduce production constant -> DOLLAR UIDENT
-- On THEN reduce production constant -> DOLLAR UIDENT
-- On STRING reduce production constant -> DOLLAR UIDENT
-- On STAR reduce production constant -> DOLLAR UIDENT
-- On SHARP reduce production constant -> DOLLAR UIDENT
-- On SEMISEMI reduce production constant -> DOLLAR UIDENT
-- On SEMI reduce production constant -> DOLLAR UIDENT
-- On RPAREN reduce production constant -> DOLLAR UIDENT
-- On RAISE reduce production constant -> DOLLAR UIDENT
-- On QUESTION reduce production constant -> DOLLAR UIDENT
-- On PREFIXOP reduce production constant -> DOLLAR UIDENT
-- On PLUS reduce production constant -> DOLLAR UIDENT
-- On OPEN reduce production constant -> DOLLAR UIDENT
-- On MODULE reduce production constant -> DOLLAR UIDENT
-- On MINUSGREATER reduce production constant -> DOLLAR UIDENT
-- On MINUS reduce production constant -> DOLLAR UIDENT
-- On MATCH reduce production constant -> DOLLAR UIDENT
-- On LVECTOR reduce production constant -> DOLLAR UIDENT
-- On LPAREN reduce production constant -> DOLLAR UIDENT
-- On LMATRIX reduce production constant -> DOLLAR UIDENT
-- On LIDENT reduce production constant -> DOLLAR UIDENT
-- On LET reduce production constant -> DOLLAR UIDENT
-- On LESSMINUS reduce production constant -> DOLLAR UIDENT
-- On LBRACKBAR reduce production constant -> DOLLAR UIDENT
-- On LBRACK reduce production constant -> DOLLAR UIDENT
-- On LBRACE reduce production constant -> DOLLAR UIDENT
-- On LAZY reduce production constant -> DOLLAR UIDENT
-- On INT reduce production constant -> DOLLAR UIDENT
-- On INFIXOP5R reduce production constant -> DOLLAR UIDENT
-- On INFIXOP5L reduce production constant -> DOLLAR UIDENT
-- On INFIXOP4R reduce production constant -> DOLLAR UIDENT
-- On INFIXOP4L reduce production constant -> DOLLAR UIDENT
-- On INFIXOP3R reduce production constant -> DOLLAR UIDENT
-- On INFIXOP3L reduce production constant -> DOLLAR UIDENT
-- On INFIXOP2R reduce production constant -> DOLLAR UIDENT
-- On INFIXOP2L reduce production constant -> DOLLAR UIDENT
-- On INFIXOP1R reduce production constant -> DOLLAR UIDENT
-- On INFIXOP1L reduce production constant -> DOLLAR UIDENT
-- On IN reduce production constant -> DOLLAR UIDENT
-- On IMAGINARY reduce production constant -> DOLLAR UIDENT
-- On IF reduce production constant -> DOLLAR UIDENT
-- On FUNCTION reduce production constant -> DOLLAR UIDENT
-- On FUN reduce production constant -> DOLLAR UIDENT
-- On FOR reduce production constant -> DOLLAR UIDENT
-- On FLOAT reduce production constant -> DOLLAR UIDENT
-- On EXCEPTION reduce production constant -> DOLLAR UIDENT
-- On EQ reduce production constant -> DOLLAR UIDENT
-- On EOF reduce production constant -> DOLLAR UIDENT
-- On ELSE reduce production constant -> DOLLAR UIDENT
-- On DOWNTO reduce production constant -> DOLLAR UIDENT
-- On DOT reduce production constant -> DOLLAR UIDENT
-- On DONE reduce production constant -> DOLLAR UIDENT
-- On DOLLAR reduce production constant -> DOLLAR UIDENT
-- On DO reduce production constant -> DOLLAR UIDENT
-- On COMMA reduce production constant -> DOLLAR UIDENT
-- On COLONEQUAL reduce production constant -> DOLLAR UIDENT
-- On COLONCOLON reduce production constant -> DOLLAR UIDENT
-- On COLON reduce production constant -> DOLLAR UIDENT
-- On CHAR reduce production constant -> DOLLAR UIDENT
-- On CASE reduce production constant -> DOLLAR UIDENT
-- On BELOW reduce production constant -> DOLLAR UIDENT
-- On BEGIN reduce production constant -> DOLLAR UIDENT
-- On BARBAR reduce production constant -> DOLLAR UIDENT
-- On BAR reduce production constant -> DOLLAR UIDENT
-- On ASSERT reduce production constant -> DOLLAR UIDENT
-- On AS reduce production constant -> DOLLAR UIDENT
-- On AND reduce production constant -> DOLLAR UIDENT
-- On AMPERAMPER reduce production constant -> DOLLAR UIDENT
-- On ABOVE reduce production constant -> DOLLAR UIDENT

State 120:
constant -> DOLLAR STRING . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> DOLLAR STRING
-- On WHILE reduce production constant -> DOLLAR STRING
-- On WHERE reduce production constant -> DOLLAR STRING
-- On WHEN reduce production constant -> DOLLAR STRING
-- On UNDERSCORE reduce production constant -> DOLLAR STRING
-- On UIDENT reduce production constant -> DOLLAR STRING
-- On TYPE reduce production constant -> DOLLAR STRING
-- On TRY reduce production constant -> DOLLAR STRING
-- On TO reduce production constant -> DOLLAR STRING
-- On THEN reduce production constant -> DOLLAR STRING
-- On STRING reduce production constant -> DOLLAR STRING
-- On STAR reduce production constant -> DOLLAR STRING
-- On SHARP reduce production constant -> DOLLAR STRING
-- On SEMISEMI reduce production constant -> DOLLAR STRING
-- On SEMI reduce production constant -> DOLLAR STRING
-- On RPAREN reduce production constant -> DOLLAR STRING
-- On RAISE reduce production constant -> DOLLAR STRING
-- On QUESTION reduce production constant -> DOLLAR STRING
-- On PREFIXOP reduce production constant -> DOLLAR STRING
-- On PLUS reduce production constant -> DOLLAR STRING
-- On OPEN reduce production constant -> DOLLAR STRING
-- On MODULE reduce production constant -> DOLLAR STRING
-- On MINUSGREATER reduce production constant -> DOLLAR STRING
-- On MINUS reduce production constant -> DOLLAR STRING
-- On MATCH reduce production constant -> DOLLAR STRING
-- On LVECTOR reduce production constant -> DOLLAR STRING
-- On LPAREN reduce production constant -> DOLLAR STRING
-- On LMATRIX reduce production constant -> DOLLAR STRING
-- On LIDENT reduce production constant -> DOLLAR STRING
-- On LET reduce production constant -> DOLLAR STRING
-- On LESSMINUS reduce production constant -> DOLLAR STRING
-- On LBRACKBAR reduce production constant -> DOLLAR STRING
-- On LBRACK reduce production constant -> DOLLAR STRING
-- On LBRACE reduce production constant -> DOLLAR STRING
-- On LAZY reduce production constant -> DOLLAR STRING
-- On INT reduce production constant -> DOLLAR STRING
-- On INFIXOP5R reduce production constant -> DOLLAR STRING
-- On INFIXOP5L reduce production constant -> DOLLAR STRING
-- On INFIXOP4R reduce production constant -> DOLLAR STRING
-- On INFIXOP4L reduce production constant -> DOLLAR STRING
-- On INFIXOP3R reduce production constant -> DOLLAR STRING
-- On INFIXOP3L reduce production constant -> DOLLAR STRING
-- On INFIXOP2R reduce production constant -> DOLLAR STRING
-- On INFIXOP2L reduce production constant -> DOLLAR STRING
-- On INFIXOP1R reduce production constant -> DOLLAR STRING
-- On INFIXOP1L reduce production constant -> DOLLAR STRING
-- On IN reduce production constant -> DOLLAR STRING
-- On IMAGINARY reduce production constant -> DOLLAR STRING
-- On IF reduce production constant -> DOLLAR STRING
-- On FUNCTION reduce production constant -> DOLLAR STRING
-- On FUN reduce production constant -> DOLLAR STRING
-- On FOR reduce production constant -> DOLLAR STRING
-- On FLOAT reduce production constant -> DOLLAR STRING
-- On EXCEPTION reduce production constant -> DOLLAR STRING
-- On EQ reduce production constant -> DOLLAR STRING
-- On EOF reduce production constant -> DOLLAR STRING
-- On ELSE reduce production constant -> DOLLAR STRING
-- On DOWNTO reduce production constant -> DOLLAR STRING
-- On DOT reduce production constant -> DOLLAR STRING
-- On DONE reduce production constant -> DOLLAR STRING
-- On DOLLAR reduce production constant -> DOLLAR STRING
-- On DO reduce production constant -> DOLLAR STRING
-- On COMMA reduce production constant -> DOLLAR STRING
-- On COLONEQUAL reduce production constant -> DOLLAR STRING
-- On COLONCOLON reduce production constant -> DOLLAR STRING
-- On COLON reduce production constant -> DOLLAR STRING
-- On CHAR reduce production constant -> DOLLAR STRING
-- On CASE reduce production constant -> DOLLAR STRING
-- On BELOW reduce production constant -> DOLLAR STRING
-- On BEGIN reduce production constant -> DOLLAR STRING
-- On BARBAR reduce production constant -> DOLLAR STRING
-- On BAR reduce production constant -> DOLLAR STRING
-- On ASSERT reduce production constant -> DOLLAR STRING
-- On AS reduce production constant -> DOLLAR STRING
-- On AND reduce production constant -> DOLLAR STRING
-- On AMPERAMPER reduce production constant -> DOLLAR STRING
-- On ABOVE reduce production constant -> DOLLAR STRING

State 121:
constant -> DOLLAR LIDENT . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> DOLLAR LIDENT
-- On WHILE reduce production constant -> DOLLAR LIDENT
-- On WHERE reduce production constant -> DOLLAR LIDENT
-- On WHEN reduce production constant -> DOLLAR LIDENT
-- On UNDERSCORE reduce production constant -> DOLLAR LIDENT
-- On UIDENT reduce production constant -> DOLLAR LIDENT
-- On TYPE reduce production constant -> DOLLAR LIDENT
-- On TRY reduce production constant -> DOLLAR LIDENT
-- On TO reduce production constant -> DOLLAR LIDENT
-- On THEN reduce production constant -> DOLLAR LIDENT
-- On STRING reduce production constant -> DOLLAR LIDENT
-- On STAR reduce production constant -> DOLLAR LIDENT
-- On SHARP reduce production constant -> DOLLAR LIDENT
-- On SEMISEMI reduce production constant -> DOLLAR LIDENT
-- On SEMI reduce production constant -> DOLLAR LIDENT
-- On RPAREN reduce production constant -> DOLLAR LIDENT
-- On RAISE reduce production constant -> DOLLAR LIDENT
-- On QUESTION reduce production constant -> DOLLAR LIDENT
-- On PREFIXOP reduce production constant -> DOLLAR LIDENT
-- On PLUS reduce production constant -> DOLLAR LIDENT
-- On OPEN reduce production constant -> DOLLAR LIDENT
-- On MODULE reduce production constant -> DOLLAR LIDENT
-- On MINUSGREATER reduce production constant -> DOLLAR LIDENT
-- On MINUS reduce production constant -> DOLLAR LIDENT
-- On MATCH reduce production constant -> DOLLAR LIDENT
-- On LVECTOR reduce production constant -> DOLLAR LIDENT
-- On LPAREN reduce production constant -> DOLLAR LIDENT
-- On LMATRIX reduce production constant -> DOLLAR LIDENT
-- On LIDENT reduce production constant -> DOLLAR LIDENT
-- On LET reduce production constant -> DOLLAR LIDENT
-- On LESSMINUS reduce production constant -> DOLLAR LIDENT
-- On LBRACKBAR reduce production constant -> DOLLAR LIDENT
-- On LBRACK reduce production constant -> DOLLAR LIDENT
-- On LBRACE reduce production constant -> DOLLAR LIDENT
-- On LAZY reduce production constant -> DOLLAR LIDENT
-- On INT reduce production constant -> DOLLAR LIDENT
-- On INFIXOP5R reduce production constant -> DOLLAR LIDENT
-- On INFIXOP5L reduce production constant -> DOLLAR LIDENT
-- On INFIXOP4R reduce production constant -> DOLLAR LIDENT
-- On INFIXOP4L reduce production constant -> DOLLAR LIDENT
-- On INFIXOP3R reduce production constant -> DOLLAR LIDENT
-- On INFIXOP3L reduce production constant -> DOLLAR LIDENT
-- On INFIXOP2R reduce production constant -> DOLLAR LIDENT
-- On INFIXOP2L reduce production constant -> DOLLAR LIDENT
-- On INFIXOP1R reduce production constant -> DOLLAR LIDENT
-- On INFIXOP1L reduce production constant -> DOLLAR LIDENT
-- On IN reduce production constant -> DOLLAR LIDENT
-- On IMAGINARY reduce production constant -> DOLLAR LIDENT
-- On IF reduce production constant -> DOLLAR LIDENT
-- On FUNCTION reduce production constant -> DOLLAR LIDENT
-- On FUN reduce production constant -> DOLLAR LIDENT
-- On FOR reduce production constant -> DOLLAR LIDENT
-- On FLOAT reduce production constant -> DOLLAR LIDENT
-- On EXCEPTION reduce production constant -> DOLLAR LIDENT
-- On EQ reduce production constant -> DOLLAR LIDENT
-- On EOF reduce production constant -> DOLLAR LIDENT
-- On ELSE reduce production constant -> DOLLAR LIDENT
-- On DOWNTO reduce production constant -> DOLLAR LIDENT
-- On DOT reduce production constant -> DOLLAR LIDENT
-- On DONE reduce production constant -> DOLLAR LIDENT
-- On DOLLAR reduce production constant -> DOLLAR LIDENT
-- On DO reduce production constant -> DOLLAR LIDENT
-- On COMMA reduce production constant -> DOLLAR LIDENT
-- On COLONEQUAL reduce production constant -> DOLLAR LIDENT
-- On COLONCOLON reduce production constant -> DOLLAR LIDENT
-- On COLON reduce production constant -> DOLLAR LIDENT
-- On CHAR reduce production constant -> DOLLAR LIDENT
-- On CASE reduce production constant -> DOLLAR LIDENT
-- On BELOW reduce production constant -> DOLLAR LIDENT
-- On BEGIN reduce production constant -> DOLLAR LIDENT
-- On BARBAR reduce production constant -> DOLLAR LIDENT
-- On BAR reduce production constant -> DOLLAR LIDENT
-- On ASSERT reduce production constant -> DOLLAR LIDENT
-- On AS reduce production constant -> DOLLAR LIDENT
-- On AND reduce production constant -> DOLLAR LIDENT
-- On AMPERAMPER reduce production constant -> DOLLAR LIDENT
-- On ABOVE reduce production constant -> DOLLAR LIDENT

State 122:
constant -> CHAR . [ WITH WHILE WHERE WHEN UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> CHAR
-- On WHILE reduce production constant -> CHAR
-- On WHERE reduce production constant -> CHAR
-- On WHEN reduce production constant -> CHAR
-- On UIDENT reduce production constant -> CHAR
-- On TYPE reduce production constant -> CHAR
-- On TRY reduce production constant -> CHAR
-- On TO reduce production constant -> CHAR
-- On THEN reduce production constant -> CHAR
-- On STRING reduce production constant -> CHAR
-- On STAR reduce production constant -> CHAR
-- On SHARP reduce production constant -> CHAR
-- On SEMISEMI reduce production constant -> CHAR
-- On SEMI reduce production constant -> CHAR
-- On RPAREN reduce production constant -> CHAR
-- On RAISE reduce production constant -> CHAR
-- On QUESTION reduce production constant -> CHAR
-- On PREFIXOP reduce production constant -> CHAR
-- On PLUS reduce production constant -> CHAR
-- On OPEN reduce production constant -> CHAR
-- On MODULE reduce production constant -> CHAR
-- On MINUSGREATER reduce production constant -> CHAR
-- On MINUS reduce production constant -> CHAR
-- On MATCH reduce production constant -> CHAR
-- On LVECTOR reduce production constant -> CHAR
-- On LPAREN reduce production constant -> CHAR
-- On LMATRIX reduce production constant -> CHAR
-- On LIDENT reduce production constant -> CHAR
-- On LET reduce production constant -> CHAR
-- On LESSMINUS reduce production constant -> CHAR
-- On LBRACKBAR reduce production constant -> CHAR
-- On LBRACK reduce production constant -> CHAR
-- On LBRACE reduce production constant -> CHAR
-- On LAZY reduce production constant -> CHAR
-- On INT reduce production constant -> CHAR
-- On INFIXOP5R reduce production constant -> CHAR
-- On INFIXOP5L reduce production constant -> CHAR
-- On INFIXOP4R reduce production constant -> CHAR
-- On INFIXOP4L reduce production constant -> CHAR
-- On INFIXOP3R reduce production constant -> CHAR
-- On INFIXOP3L reduce production constant -> CHAR
-- On INFIXOP2R reduce production constant -> CHAR
-- On INFIXOP2L reduce production constant -> CHAR
-- On INFIXOP1R reduce production constant -> CHAR
-- On INFIXOP1L reduce production constant -> CHAR
-- On IN reduce production constant -> CHAR
-- On IMAGINARY reduce production constant -> CHAR
-- On IF reduce production constant -> CHAR
-- On FUNCTION reduce production constant -> CHAR
-- On FUN reduce production constant -> CHAR
-- On FOR reduce production constant -> CHAR
-- On FLOAT reduce production constant -> CHAR
-- On EXCEPTION reduce production constant -> CHAR
-- On EQ reduce production constant -> CHAR
-- On EOF reduce production constant -> CHAR
-- On ELSE reduce production constant -> CHAR
-- On DOWNTO reduce production constant -> CHAR
-- On DOT reduce production constant -> CHAR
-- On DONE reduce production constant -> CHAR
-- On DOLLAR reduce production constant -> CHAR
-- On DO reduce production constant -> CHAR
-- On COMMA reduce production constant -> CHAR
-- On COLONEQUAL reduce production constant -> CHAR
-- On COLONCOLON reduce production constant -> CHAR
-- On COLON reduce production constant -> CHAR
-- On CHAR reduce production constant -> CHAR
-- On CASE reduce production constant -> CHAR
-- On BELOW reduce production constant -> CHAR
-- On BEGIN reduce production constant -> CHAR
-- On BARBAR reduce production constant -> CHAR
-- On BAR reduce production constant -> CHAR
-- On ASSERT reduce production constant -> CHAR
-- On AS reduce production constant -> CHAR
-- On AND reduce production constant -> CHAR
-- On AMPERAMPER reduce production constant -> CHAR
-- On ABOVE reduce production constant -> CHAR

State 123:
simple_expr -> BEGIN . seq_expr END [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> BEGIN . seq_expr error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On seq_expr shift to state 718
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 629

State 124:
value_expr -> FUNCTION . opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On BAR shift to state 125
-- On opt_bar shift to state 126
-- On WEAKARRAYPAT reduce production opt_bar ->
-- On VECTORPAT reduce production opt_bar ->
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TUPLEPAT reduce production opt_bar ->
-- On SYMBOLPAT reduce production opt_bar ->
-- On STRINGPAT reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On STACKPAT reduce production opt_bar ->
-- On SHARP reduce production opt_bar ->
-- On RECORDPAT reduce production opt_bar ->
-- On REALPAT reduce production opt_bar ->
-- On QUEUEPAT reduce production opt_bar ->
-- On OUT_CHANNELPAT reduce production opt_bar ->
-- On NUMBERPAT reduce production opt_bar ->
-- On MINUS reduce production opt_bar ->
-- On LVECTOR reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LISTPAT reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LBRACKBAR reduce production opt_bar ->
-- On LBRACK reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On IN_CHANNELPAT reduce production opt_bar ->
-- On INTPAT reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On IMAGINARY reduce production opt_bar ->
-- On HASHTABLEPAT reduce production opt_bar ->
-- On FLOATPAT reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On FARRAYPAT reduce production opt_bar ->
-- On DOLLAR reduce production opt_bar ->
-- On DIR_HANDLEPAT reduce production opt_bar ->
-- On COMPLEXPAT reduce production opt_bar ->
-- On CHARPAT reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->
-- On CARRAYPAT reduce production opt_bar ->
-- On BOXPAT reduce production opt_bar ->
-- On ARRAYPAT reduce production opt_bar ->
-- On AMPERREST reduce production opt_bar ->

State 125:
opt_bar -> BAR . [ WHILE WHERE WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT TRY SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RECORDPAT REALPAT RAISE QUEUEPAT PREFIXOP PLUS OUT_CHANNELPAT NUMBERPAT MINUS MATCH LVECTOR LPAREN LMATRIX LISTPAT LIDENT LET LBRACKBAR LBRACK LBRACE LAZY IN_CHANNELPAT INTPAT INT IMAGINARY IF HASHTABLEPAT FUNCTION FUN FOR FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT CHARPAT CHAR CASE CARRAYPAT BOXPAT BEGIN ASSERT ARRAYPAT AMPERREST ]
-- On WHILE reduce production opt_bar -> BAR
-- On WHERE reduce production opt_bar -> BAR
-- On WEAKARRAYPAT reduce production opt_bar -> BAR
-- On VECTORPAT reduce production opt_bar -> BAR
-- On UNDERSCORE reduce production opt_bar -> BAR
-- On UIDENT reduce production opt_bar -> BAR
-- On TUPLEPAT reduce production opt_bar -> BAR
-- On TRY reduce production opt_bar -> BAR
-- On SYMBOLPAT reduce production opt_bar -> BAR
-- On STRINGPAT reduce production opt_bar -> BAR
-- On STRING reduce production opt_bar -> BAR
-- On STACKPAT reduce production opt_bar -> BAR
-- On SHARP reduce production opt_bar -> BAR
-- On RECORDPAT reduce production opt_bar -> BAR
-- On REALPAT reduce production opt_bar -> BAR
-- On RAISE reduce production opt_bar -> BAR
-- On QUEUEPAT reduce production opt_bar -> BAR
-- On PREFIXOP reduce production opt_bar -> BAR
-- On PLUS reduce production opt_bar -> BAR
-- On OUT_CHANNELPAT reduce production opt_bar -> BAR
-- On NUMBERPAT reduce production opt_bar -> BAR
-- On MINUS reduce production opt_bar -> BAR
-- On MATCH reduce production opt_bar -> BAR
-- On LVECTOR reduce production opt_bar -> BAR
-- On LPAREN reduce production opt_bar -> BAR
-- On LMATRIX reduce production opt_bar -> BAR
-- On LISTPAT reduce production opt_bar -> BAR
-- On LIDENT reduce production opt_bar -> BAR
-- On LET reduce production opt_bar -> BAR
-- On LBRACKBAR reduce production opt_bar -> BAR
-- On LBRACK reduce production opt_bar -> BAR
-- On LBRACE reduce production opt_bar -> BAR
-- On LAZY reduce production opt_bar -> BAR
-- On IN_CHANNELPAT reduce production opt_bar -> BAR
-- On INTPAT reduce production opt_bar -> BAR
-- On INT reduce production opt_bar -> BAR
-- On IMAGINARY reduce production opt_bar -> BAR
-- On IF reduce production opt_bar -> BAR
-- On HASHTABLEPAT reduce production opt_bar -> BAR
-- On FUNCTION reduce production opt_bar -> BAR
-- On FUN reduce production opt_bar -> BAR
-- On FOR reduce production opt_bar -> BAR
-- On FLOATPAT reduce production opt_bar -> BAR
-- On FLOAT reduce production opt_bar -> BAR
-- On FARRAYPAT reduce production opt_bar -> BAR
-- On DOLLAR reduce production opt_bar -> BAR
-- On DIR_HANDLEPAT reduce production opt_bar -> BAR
-- On COMPLEXPAT reduce production opt_bar -> BAR
-- On CHARPAT reduce production opt_bar -> BAR
-- On CHAR reduce production opt_bar -> BAR
-- On CASE reduce production opt_bar -> BAR
-- On CARRAYPAT reduce production opt_bar -> BAR
-- On BOXPAT reduce production opt_bar -> BAR
-- On BEGIN reduce production opt_bar -> BAR
-- On ASSERT reduce production opt_bar -> BAR
-- On ARRAYPAT reduce production opt_bar -> BAR
-- On AMPERREST reduce production opt_bar -> BAR

State 126:
value_expr -> FUNCTION opt_bar . match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 710
-- On pattern shift to state 399
-- On match_cases shift to state 713
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 127:
built_in_constr -> WEAKARRAYPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 147

State 128:
simple_bi_pattern -> UNDERSCORE . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production simple_bi_pattern -> UNDERSCORE
-- On RPAREN reduce production simple_bi_pattern -> UNDERSCORE
-- On MINUSGREATER reduce production simple_bi_pattern -> UNDERSCORE
-- On LESSMINUS reduce production simple_bi_pattern -> UNDERSCORE
-- On EQ reduce production simple_bi_pattern -> UNDERSCORE
-- On COMMA reduce production simple_bi_pattern -> UNDERSCORE
-- On COLONCOLON reduce production simple_bi_pattern -> UNDERSCORE
-- On BARBAR reduce production simple_bi_pattern -> UNDERSCORE
-- On AS reduce production simple_bi_pattern -> UNDERSCORE

State 129:
signed_constant -> MINUS . INT [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
signed_constant -> MINUS . FLOAT [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On INT shift to state 130
-- On FLOAT shift to state 131

State 130:
signed_constant -> MINUS INT . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production signed_constant -> MINUS INT
-- On UNDERSCORE reduce production signed_constant -> MINUS INT
-- On UIDENT reduce production signed_constant -> MINUS INT
-- On STRING reduce production signed_constant -> MINUS INT
-- On SHARP reduce production signed_constant -> MINUS INT
-- On RPAREN reduce production signed_constant -> MINUS INT
-- On MINUSGREATER reduce production signed_constant -> MINUS INT
-- On MINUS reduce production signed_constant -> MINUS INT
-- On LVECTOR reduce production signed_constant -> MINUS INT
-- On LPAREN reduce production signed_constant -> MINUS INT
-- On LIDENT reduce production signed_constant -> MINUS INT
-- On LESSMINUS reduce production signed_constant -> MINUS INT
-- On LBRACKBAR reduce production signed_constant -> MINUS INT
-- On LBRACK reduce production signed_constant -> MINUS INT
-- On LBRACE reduce production signed_constant -> MINUS INT
-- On INT reduce production signed_constant -> MINUS INT
-- On IMAGINARY reduce production signed_constant -> MINUS INT
-- On FLOAT reduce production signed_constant -> MINUS INT
-- On EQ reduce production signed_constant -> MINUS INT
-- On DOLLAR reduce production signed_constant -> MINUS INT
-- On COMMA reduce production signed_constant -> MINUS INT
-- On COLONCOLON reduce production signed_constant -> MINUS INT
-- On CHAR reduce production signed_constant -> MINUS INT
-- On BARBAR reduce production signed_constant -> MINUS INT
-- On AS reduce production signed_constant -> MINUS INT

State 131:
signed_constant -> MINUS FLOAT . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production signed_constant -> MINUS FLOAT
-- On UNDERSCORE reduce production signed_constant -> MINUS FLOAT
-- On UIDENT reduce production signed_constant -> MINUS FLOAT
-- On STRING reduce production signed_constant -> MINUS FLOAT
-- On SHARP reduce production signed_constant -> MINUS FLOAT
-- On RPAREN reduce production signed_constant -> MINUS FLOAT
-- On MINUSGREATER reduce production signed_constant -> MINUS FLOAT
-- On MINUS reduce production signed_constant -> MINUS FLOAT
-- On LVECTOR reduce production signed_constant -> MINUS FLOAT
-- On LPAREN reduce production signed_constant -> MINUS FLOAT
-- On LIDENT reduce production signed_constant -> MINUS FLOAT
-- On LESSMINUS reduce production signed_constant -> MINUS FLOAT
-- On LBRACKBAR reduce production signed_constant -> MINUS FLOAT
-- On LBRACK reduce production signed_constant -> MINUS FLOAT
-- On LBRACE reduce production signed_constant -> MINUS FLOAT
-- On INT reduce production signed_constant -> MINUS FLOAT
-- On IMAGINARY reduce production signed_constant -> MINUS FLOAT
-- On FLOAT reduce production signed_constant -> MINUS FLOAT
-- On EQ reduce production signed_constant -> MINUS FLOAT
-- On DOLLAR reduce production signed_constant -> MINUS FLOAT
-- On COMMA reduce production signed_constant -> MINUS FLOAT
-- On COLONCOLON reduce production signed_constant -> MINUS FLOAT
-- On CHAR reduce production signed_constant -> MINUS FLOAT
-- On BARBAR reduce production signed_constant -> MINUS FLOAT
-- On AS reduce production signed_constant -> MINUS FLOAT

State 132:
constant -> LVECTOR . RBRACK [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On RBRACK shift to state 133

State 133:
constant -> LVECTOR RBRACK . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> LVECTOR RBRACK
-- On WHILE reduce production constant -> LVECTOR RBRACK
-- On WHERE reduce production constant -> LVECTOR RBRACK
-- On WHEN reduce production constant -> LVECTOR RBRACK
-- On UNDERSCORE reduce production constant -> LVECTOR RBRACK
-- On UIDENT reduce production constant -> LVECTOR RBRACK
-- On TYPE reduce production constant -> LVECTOR RBRACK
-- On TRY reduce production constant -> LVECTOR RBRACK
-- On TO reduce production constant -> LVECTOR RBRACK
-- On THEN reduce production constant -> LVECTOR RBRACK
-- On STRING reduce production constant -> LVECTOR RBRACK
-- On STAR reduce production constant -> LVECTOR RBRACK
-- On SHARP reduce production constant -> LVECTOR RBRACK
-- On SEMISEMI reduce production constant -> LVECTOR RBRACK
-- On SEMI reduce production constant -> LVECTOR RBRACK
-- On RPAREN reduce production constant -> LVECTOR RBRACK
-- On RAISE reduce production constant -> LVECTOR RBRACK
-- On QUESTION reduce production constant -> LVECTOR RBRACK
-- On PREFIXOP reduce production constant -> LVECTOR RBRACK
-- On PLUS reduce production constant -> LVECTOR RBRACK
-- On OPEN reduce production constant -> LVECTOR RBRACK
-- On MODULE reduce production constant -> LVECTOR RBRACK
-- On MINUSGREATER reduce production constant -> LVECTOR RBRACK
-- On MINUS reduce production constant -> LVECTOR RBRACK
-- On MATCH reduce production constant -> LVECTOR RBRACK
-- On LVECTOR reduce production constant -> LVECTOR RBRACK
-- On LPAREN reduce production constant -> LVECTOR RBRACK
-- On LMATRIX reduce production constant -> LVECTOR RBRACK
-- On LIDENT reduce production constant -> LVECTOR RBRACK
-- On LET reduce production constant -> LVECTOR RBRACK
-- On LESSMINUS reduce production constant -> LVECTOR RBRACK
-- On LBRACKBAR reduce production constant -> LVECTOR RBRACK
-- On LBRACK reduce production constant -> LVECTOR RBRACK
-- On LBRACE reduce production constant -> LVECTOR RBRACK
-- On LAZY reduce production constant -> LVECTOR RBRACK
-- On INT reduce production constant -> LVECTOR RBRACK
-- On INFIXOP5R reduce production constant -> LVECTOR RBRACK
-- On INFIXOP5L reduce production constant -> LVECTOR RBRACK
-- On INFIXOP4R reduce production constant -> LVECTOR RBRACK
-- On INFIXOP4L reduce production constant -> LVECTOR RBRACK
-- On INFIXOP3R reduce production constant -> LVECTOR RBRACK
-- On INFIXOP3L reduce production constant -> LVECTOR RBRACK
-- On INFIXOP2R reduce production constant -> LVECTOR RBRACK
-- On INFIXOP2L reduce production constant -> LVECTOR RBRACK
-- On INFIXOP1R reduce production constant -> LVECTOR RBRACK
-- On INFIXOP1L reduce production constant -> LVECTOR RBRACK
-- On IN reduce production constant -> LVECTOR RBRACK
-- On IMAGINARY reduce production constant -> LVECTOR RBRACK
-- On IF reduce production constant -> LVECTOR RBRACK
-- On FUNCTION reduce production constant -> LVECTOR RBRACK
-- On FUN reduce production constant -> LVECTOR RBRACK
-- On FOR reduce production constant -> LVECTOR RBRACK
-- On FLOAT reduce production constant -> LVECTOR RBRACK
-- On EXCEPTION reduce production constant -> LVECTOR RBRACK
-- On EQ reduce production constant -> LVECTOR RBRACK
-- On EOF reduce production constant -> LVECTOR RBRACK
-- On ELSE reduce production constant -> LVECTOR RBRACK
-- On DOWNTO reduce production constant -> LVECTOR RBRACK
-- On DOT reduce production constant -> LVECTOR RBRACK
-- On DONE reduce production constant -> LVECTOR RBRACK
-- On DOLLAR reduce production constant -> LVECTOR RBRACK
-- On DO reduce production constant -> LVECTOR RBRACK
-- On COMMA reduce production constant -> LVECTOR RBRACK
-- On COLONEQUAL reduce production constant -> LVECTOR RBRACK
-- On COLONCOLON reduce production constant -> LVECTOR RBRACK
-- On COLON reduce production constant -> LVECTOR RBRACK
-- On CHAR reduce production constant -> LVECTOR RBRACK
-- On CASE reduce production constant -> LVECTOR RBRACK
-- On BELOW reduce production constant -> LVECTOR RBRACK
-- On BEGIN reduce production constant -> LVECTOR RBRACK
-- On BARBAR reduce production constant -> LVECTOR RBRACK
-- On BAR reduce production constant -> LVECTOR RBRACK
-- On ASSERT reduce production constant -> LVECTOR RBRACK
-- On AS reduce production constant -> LVECTOR RBRACK
-- On AND reduce production constant -> LVECTOR RBRACK
-- On AMPERAMPER reduce production constant -> LVECTOR RBRACK
-- On ABOVE reduce production constant -> LVECTOR RBRACK

State 134:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
constant -> LPAREN . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RPAREN shift to state 135
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 136
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 142
-- On signed_constant shift to state 144
-- On constant shift to state 145

State 135:
constant -> LPAREN RPAREN . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> LPAREN RPAREN
-- On WHILE reduce production constant -> LPAREN RPAREN
-- On WHERE reduce production constant -> LPAREN RPAREN
-- On WHEN reduce production constant -> LPAREN RPAREN
-- On UNDERSCORE reduce production constant -> LPAREN RPAREN
-- On UIDENT reduce production constant -> LPAREN RPAREN
-- On TYPE reduce production constant -> LPAREN RPAREN
-- On TRY reduce production constant -> LPAREN RPAREN
-- On TO reduce production constant -> LPAREN RPAREN
-- On THEN reduce production constant -> LPAREN RPAREN
-- On STRING reduce production constant -> LPAREN RPAREN
-- On STAR reduce production constant -> LPAREN RPAREN
-- On SHARP reduce production constant -> LPAREN RPAREN
-- On SEMISEMI reduce production constant -> LPAREN RPAREN
-- On SEMI reduce production constant -> LPAREN RPAREN
-- On RPAREN reduce production constant -> LPAREN RPAREN
-- On RAISE reduce production constant -> LPAREN RPAREN
-- On QUESTION reduce production constant -> LPAREN RPAREN
-- On PREFIXOP reduce production constant -> LPAREN RPAREN
-- On PLUS reduce production constant -> LPAREN RPAREN
-- On OPEN reduce production constant -> LPAREN RPAREN
-- On MODULE reduce production constant -> LPAREN RPAREN
-- On MINUSGREATER reduce production constant -> LPAREN RPAREN
-- On MINUS reduce production constant -> LPAREN RPAREN
-- On MATCH reduce production constant -> LPAREN RPAREN
-- On LVECTOR reduce production constant -> LPAREN RPAREN
-- On LPAREN reduce production constant -> LPAREN RPAREN
-- On LMATRIX reduce production constant -> LPAREN RPAREN
-- On LIDENT reduce production constant -> LPAREN RPAREN
-- On LET reduce production constant -> LPAREN RPAREN
-- On LESSMINUS reduce production constant -> LPAREN RPAREN
-- On LBRACKBAR reduce production constant -> LPAREN RPAREN
-- On LBRACK reduce production constant -> LPAREN RPAREN
-- On LBRACE reduce production constant -> LPAREN RPAREN
-- On LAZY reduce production constant -> LPAREN RPAREN
-- On INT reduce production constant -> LPAREN RPAREN
-- On INFIXOP5R reduce production constant -> LPAREN RPAREN
-- On INFIXOP5L reduce production constant -> LPAREN RPAREN
-- On INFIXOP4R reduce production constant -> LPAREN RPAREN
-- On INFIXOP4L reduce production constant -> LPAREN RPAREN
-- On INFIXOP3R reduce production constant -> LPAREN RPAREN
-- On INFIXOP3L reduce production constant -> LPAREN RPAREN
-- On INFIXOP2R reduce production constant -> LPAREN RPAREN
-- On INFIXOP2L reduce production constant -> LPAREN RPAREN
-- On INFIXOP1R reduce production constant -> LPAREN RPAREN
-- On INFIXOP1L reduce production constant -> LPAREN RPAREN
-- On IN reduce production constant -> LPAREN RPAREN
-- On IMAGINARY reduce production constant -> LPAREN RPAREN
-- On IF reduce production constant -> LPAREN RPAREN
-- On FUNCTION reduce production constant -> LPAREN RPAREN
-- On FUN reduce production constant -> LPAREN RPAREN
-- On FOR reduce production constant -> LPAREN RPAREN
-- On FLOAT reduce production constant -> LPAREN RPAREN
-- On EXCEPTION reduce production constant -> LPAREN RPAREN
-- On EQ reduce production constant -> LPAREN RPAREN
-- On EOF reduce production constant -> LPAREN RPAREN
-- On ELSE reduce production constant -> LPAREN RPAREN
-- On DOWNTO reduce production constant -> LPAREN RPAREN
-- On DOT reduce production constant -> LPAREN RPAREN
-- On DONE reduce production constant -> LPAREN RPAREN
-- On DOLLAR reduce production constant -> LPAREN RPAREN
-- On DO reduce production constant -> LPAREN RPAREN
-- On COMMA reduce production constant -> LPAREN RPAREN
-- On COLONEQUAL reduce production constant -> LPAREN RPAREN
-- On COLONCOLON reduce production constant -> LPAREN RPAREN
-- On COLON reduce production constant -> LPAREN RPAREN
-- On CHAR reduce production constant -> LPAREN RPAREN
-- On CASE reduce production constant -> LPAREN RPAREN
-- On BELOW reduce production constant -> LPAREN RPAREN
-- On BEGIN reduce production constant -> LPAREN RPAREN
-- On BARBAR reduce production constant -> LPAREN RPAREN
-- On BAR reduce production constant -> LPAREN RPAREN
-- On ASSERT reduce production constant -> LPAREN RPAREN
-- On AS reduce production constant -> LPAREN RPAREN
-- On AND reduce production constant -> LPAREN RPAREN
-- On AMPERAMPER reduce production constant -> LPAREN RPAREN
-- On ABOVE reduce production constant -> LPAREN RPAREN

State 136:
constant -> LPAREN . RPAREN [ RPAREN ]
-- On RPAREN shift to state 135

State 137:
simple_bi_pattern -> LIDENT . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production simple_bi_pattern -> LIDENT
-- On RPAREN reduce production simple_bi_pattern -> LIDENT
-- On MINUSGREATER reduce production simple_bi_pattern -> LIDENT
-- On LESSMINUS reduce production simple_bi_pattern -> LIDENT
-- On EQ reduce production simple_bi_pattern -> LIDENT
-- On COMMA reduce production simple_bi_pattern -> LIDENT
-- On COLONCOLON reduce production simple_bi_pattern -> LIDENT
-- On BARBAR reduce production simple_bi_pattern -> LIDENT
-- On AS reduce production simple_bi_pattern -> LIDENT

State 138:
constant -> LBRACKBAR . BARRBRACK [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On BARRBRACK shift to state 139

State 139:
constant -> LBRACKBAR BARRBRACK . [ WITH WHILE WHERE WHEN UNDERSCORE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AS AND AMPERAMPER ABOVE ]
-- On WITH reduce production constant -> LBRACKBAR BARRBRACK
-- On WHILE reduce production constant -> LBRACKBAR BARRBRACK
-- On WHERE reduce production constant -> LBRACKBAR BARRBRACK
-- On WHEN reduce production constant -> LBRACKBAR BARRBRACK
-- On UNDERSCORE reduce production constant -> LBRACKBAR BARRBRACK
-- On UIDENT reduce production constant -> LBRACKBAR BARRBRACK
-- On TYPE reduce production constant -> LBRACKBAR BARRBRACK
-- On TRY reduce production constant -> LBRACKBAR BARRBRACK
-- On TO reduce production constant -> LBRACKBAR BARRBRACK
-- On THEN reduce production constant -> LBRACKBAR BARRBRACK
-- On STRING reduce production constant -> LBRACKBAR BARRBRACK
-- On STAR reduce production constant -> LBRACKBAR BARRBRACK
-- On SHARP reduce production constant -> LBRACKBAR BARRBRACK
-- On SEMISEMI reduce production constant -> LBRACKBAR BARRBRACK
-- On SEMI reduce production constant -> LBRACKBAR BARRBRACK
-- On RPAREN reduce production constant -> LBRACKBAR BARRBRACK
-- On RAISE reduce production constant -> LBRACKBAR BARRBRACK
-- On QUESTION reduce production constant -> LBRACKBAR BARRBRACK
-- On PREFIXOP reduce production constant -> LBRACKBAR BARRBRACK
-- On PLUS reduce production constant -> LBRACKBAR BARRBRACK
-- On OPEN reduce production constant -> LBRACKBAR BARRBRACK
-- On MODULE reduce production constant -> LBRACKBAR BARRBRACK
-- On MINUSGREATER reduce production constant -> LBRACKBAR BARRBRACK
-- On MINUS reduce production constant -> LBRACKBAR BARRBRACK
-- On MATCH reduce production constant -> LBRACKBAR BARRBRACK
-- On LVECTOR reduce production constant -> LBRACKBAR BARRBRACK
-- On LPAREN reduce production constant -> LBRACKBAR BARRBRACK
-- On LMATRIX reduce production constant -> LBRACKBAR BARRBRACK
-- On LIDENT reduce production constant -> LBRACKBAR BARRBRACK
-- On LET reduce production constant -> LBRACKBAR BARRBRACK
-- On LESSMINUS reduce production constant -> LBRACKBAR BARRBRACK
-- On LBRACKBAR reduce production constant -> LBRACKBAR BARRBRACK
-- On LBRACK reduce production constant -> LBRACKBAR BARRBRACK
-- On LBRACE reduce production constant -> LBRACKBAR BARRBRACK
-- On LAZY reduce production constant -> LBRACKBAR BARRBRACK
-- On INT reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP5R reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP5L reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP4R reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP4L reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP3R reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP3L reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP2R reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP2L reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP1R reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP1L reduce production constant -> LBRACKBAR BARRBRACK
-- On IN reduce production constant -> LBRACKBAR BARRBRACK
-- On IMAGINARY reduce production constant -> LBRACKBAR BARRBRACK
-- On IF reduce production constant -> LBRACKBAR BARRBRACK
-- On FUNCTION reduce production constant -> LBRACKBAR BARRBRACK
-- On FUN reduce production constant -> LBRACKBAR BARRBRACK
-- On FOR reduce production constant -> LBRACKBAR BARRBRACK
-- On FLOAT reduce production constant -> LBRACKBAR BARRBRACK
-- On EXCEPTION reduce production constant -> LBRACKBAR BARRBRACK
-- On EQ reduce production constant -> LBRACKBAR BARRBRACK
-- On EOF reduce production constant -> LBRACKBAR BARRBRACK
-- On ELSE reduce production constant -> LBRACKBAR BARRBRACK
-- On DOWNTO reduce production constant -> LBRACKBAR BARRBRACK
-- On DOT reduce production constant -> LBRACKBAR BARRBRACK
-- On DONE reduce production constant -> LBRACKBAR BARRBRACK
-- On DOLLAR reduce production constant -> LBRACKBAR BARRBRACK
-- On DO reduce production constant -> LBRACKBAR BARRBRACK
-- On COMMA reduce production constant -> LBRACKBAR BARRBRACK
-- On COLONEQUAL reduce production constant -> LBRACKBAR BARRBRACK
-- On COLONCOLON reduce production constant -> LBRACKBAR BARRBRACK
-- On COLON reduce production constant -> LBRACKBAR BARRBRACK
-- On CHAR reduce production constant -> LBRACKBAR BARRBRACK
-- On CASE reduce production constant -> LBRACKBAR BARRBRACK
-- On BELOW reduce production constant -> LBRACKBAR BARRBRACK
-- On BEGIN reduce production constant -> LBRACKBAR BARRBRACK
-- On BARBAR reduce production constant -> LBRACKBAR BARRBRACK
-- On BAR reduce production constant -> LBRACKBAR BARRBRACK
-- On ASSERT reduce production constant -> LBRACKBAR BARRBRACK
-- On AS reduce production constant -> LBRACKBAR BARRBRACK
-- On AND reduce production constant -> LBRACKBAR BARRBRACK
-- On AMPERAMPER reduce production constant -> LBRACKBAR BARRBRACK
-- On ABOVE reduce production constant -> LBRACKBAR BARRBRACK

State 140:
constant -> LBRACK . RBRACK [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On RBRACK shift to state 101

State 141:
constant -> LBRACE . RBRACE [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On RBRACE shift to state 114

State 142:
bi_pattern -> LPAREN simple_bi_pattern . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On RPAREN shift to state 143

State 143:
bi_pattern -> LPAREN simple_bi_pattern RPAREN . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On RPAREN reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On MINUSGREATER reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On LESSMINUS reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On EQ reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On COMMA reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On COLONCOLON reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On BARBAR reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On AS reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN

State 144:
simple_bi_pattern -> signed_constant . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production simple_bi_pattern -> signed_constant
-- On RPAREN reduce production simple_bi_pattern -> signed_constant
-- On MINUSGREATER reduce production simple_bi_pattern -> signed_constant
-- On LESSMINUS reduce production simple_bi_pattern -> signed_constant
-- On EQ reduce production simple_bi_pattern -> signed_constant
-- On COMMA reduce production simple_bi_pattern -> signed_constant
-- On COLONCOLON reduce production simple_bi_pattern -> signed_constant
-- On BARBAR reduce production simple_bi_pattern -> signed_constant
-- On AS reduce production simple_bi_pattern -> signed_constant

State 145:
signed_constant -> constant . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production signed_constant -> constant
-- On UNDERSCORE reduce production signed_constant -> constant
-- On UIDENT reduce production signed_constant -> constant
-- On STRING reduce production signed_constant -> constant
-- On SHARP reduce production signed_constant -> constant
-- On RPAREN reduce production signed_constant -> constant
-- On MINUSGREATER reduce production signed_constant -> constant
-- On MINUS reduce production signed_constant -> constant
-- On LVECTOR reduce production signed_constant -> constant
-- On LPAREN reduce production signed_constant -> constant
-- On LIDENT reduce production signed_constant -> constant
-- On LESSMINUS reduce production signed_constant -> constant
-- On LBRACKBAR reduce production signed_constant -> constant
-- On LBRACK reduce production signed_constant -> constant
-- On LBRACE reduce production signed_constant -> constant
-- On INT reduce production signed_constant -> constant
-- On IMAGINARY reduce production signed_constant -> constant
-- On FLOAT reduce production signed_constant -> constant
-- On EQ reduce production signed_constant -> constant
-- On DOLLAR reduce production signed_constant -> constant
-- On COMMA reduce production signed_constant -> constant
-- On COLONCOLON reduce production signed_constant -> constant
-- On CHAR reduce production signed_constant -> constant
-- On BARBAR reduce production signed_constant -> constant
-- On AS reduce production signed_constant -> constant

State 146:
bi_pattern -> simple_bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production bi_pattern -> simple_bi_pattern
-- On RPAREN reduce production bi_pattern -> simple_bi_pattern
-- On MINUSGREATER reduce production bi_pattern -> simple_bi_pattern
-- On LESSMINUS reduce production bi_pattern -> simple_bi_pattern
-- On EQ reduce production bi_pattern -> simple_bi_pattern
-- On COMMA reduce production bi_pattern -> simple_bi_pattern
-- On COLONCOLON reduce production bi_pattern -> simple_bi_pattern
-- On BARBAR reduce production bi_pattern -> simple_bi_pattern
-- On AS reduce production bi_pattern -> simple_bi_pattern

State 147:
built_in_constr -> WEAKARRAYPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On EQ reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On COMMA reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On AS reduce production built_in_constr -> WEAKARRAYPAT bi_pattern

State 148:
built_in_constr -> VECTORPAT . pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 709
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 149:
simple_pattern -> UNDERSCORE . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production simple_pattern -> UNDERSCORE
-- On UNDERSCORE reduce production simple_pattern -> UNDERSCORE
-- On UIDENT reduce production simple_pattern -> UNDERSCORE
-- On STRING reduce production simple_pattern -> UNDERSCORE
-- On SHARP reduce production simple_pattern -> UNDERSCORE
-- On RPAREN reduce production simple_pattern -> UNDERSCORE
-- On MINUSGREATER reduce production simple_pattern -> UNDERSCORE
-- On MINUS reduce production simple_pattern -> UNDERSCORE
-- On LVECTOR reduce production simple_pattern -> UNDERSCORE
-- On LPAREN reduce production simple_pattern -> UNDERSCORE
-- On LIDENT reduce production simple_pattern -> UNDERSCORE
-- On LESSMINUS reduce production simple_pattern -> UNDERSCORE
-- On LBRACKBAR reduce production simple_pattern -> UNDERSCORE
-- On LBRACK reduce production simple_pattern -> UNDERSCORE
-- On LBRACE reduce production simple_pattern -> UNDERSCORE
-- On INT reduce production simple_pattern -> UNDERSCORE
-- On IMAGINARY reduce production simple_pattern -> UNDERSCORE
-- On FLOAT reduce production simple_pattern -> UNDERSCORE
-- On EQ reduce production simple_pattern -> UNDERSCORE
-- On DOLLAR reduce production simple_pattern -> UNDERSCORE
-- On COMMA reduce production simple_pattern -> UNDERSCORE
-- On COLONCOLON reduce production simple_pattern -> UNDERSCORE
-- On CHAR reduce production simple_pattern -> UNDERSCORE
-- On BARBAR reduce production simple_pattern -> UNDERSCORE
-- On AS reduce production simple_pattern -> UNDERSCORE

State 150:
constr_longident -> UIDENT . DOT UIDENT [ WHEN WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RPAREN RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUSGREATER MINUS LVECTOR LPAREN LISTPAT LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT EQ DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONCOLON CHARPAT CHAR CARRAYPAT BOXPAT BARBAR AS ARRAYPAT ]
constr_longident -> UIDENT . [ WHEN WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RPAREN RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUSGREATER MINUS LVECTOR LPAREN LISTPAT LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT EQ DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONCOLON CHARPAT CHAR CARRAYPAT BOXPAT BARBAR AS ARRAYPAT ]
-- On DOT shift to state 151
-- On WHEN reduce production constr_longident -> UIDENT
-- On WEAKARRAYPAT reduce production constr_longident -> UIDENT
-- On VECTORPAT reduce production constr_longident -> UIDENT
-- On UNDERSCORE reduce production constr_longident -> UIDENT
-- On UIDENT reduce production constr_longident -> UIDENT
-- On TUPLEPAT reduce production constr_longident -> UIDENT
-- On SYMBOLPAT reduce production constr_longident -> UIDENT
-- On STRINGPAT reduce production constr_longident -> UIDENT
-- On STRING reduce production constr_longident -> UIDENT
-- On STACKPAT reduce production constr_longident -> UIDENT
-- On SHARP reduce production constr_longident -> UIDENT
-- On RPAREN reduce production constr_longident -> UIDENT
-- On RECORDPAT reduce production constr_longident -> UIDENT
-- On REALPAT reduce production constr_longident -> UIDENT
-- On QUEUEPAT reduce production constr_longident -> UIDENT
-- On OUT_CHANNELPAT reduce production constr_longident -> UIDENT
-- On NUMBERPAT reduce production constr_longident -> UIDENT
-- On MINUSGREATER reduce production constr_longident -> UIDENT
-- On MINUS reduce production constr_longident -> UIDENT
-- On LVECTOR reduce production constr_longident -> UIDENT
-- On LPAREN reduce production constr_longident -> UIDENT
-- On LISTPAT reduce production constr_longident -> UIDENT
-- On LIDENT reduce production constr_longident -> UIDENT
-- On LESSMINUS reduce production constr_longident -> UIDENT
-- On LBRACKBAR reduce production constr_longident -> UIDENT
-- On LBRACK reduce production constr_longident -> UIDENT
-- On LBRACE reduce production constr_longident -> UIDENT
-- On IN_CHANNELPAT reduce production constr_longident -> UIDENT
-- On INTPAT reduce production constr_longident -> UIDENT
-- On INT reduce production constr_longident -> UIDENT
-- On IMAGINARY reduce production constr_longident -> UIDENT
-- On HASHTABLEPAT reduce production constr_longident -> UIDENT
-- On FLOATPAT reduce production constr_longident -> UIDENT
-- On FLOAT reduce production constr_longident -> UIDENT
-- On FARRAYPAT reduce production constr_longident -> UIDENT
-- On EQ reduce production constr_longident -> UIDENT
-- On DOLLAR reduce production constr_longident -> UIDENT
-- On DIR_HANDLEPAT reduce production constr_longident -> UIDENT
-- On COMPLEXPAT reduce production constr_longident -> UIDENT
-- On COMMA reduce production constr_longident -> UIDENT
-- On COLONCOLON reduce production constr_longident -> UIDENT
-- On CHARPAT reduce production constr_longident -> UIDENT
-- On CHAR reduce production constr_longident -> UIDENT
-- On CARRAYPAT reduce production constr_longident -> UIDENT
-- On BOXPAT reduce production constr_longident -> UIDENT
-- On BARBAR reduce production constr_longident -> UIDENT
-- On AS reduce production constr_longident -> UIDENT
-- On ARRAYPAT reduce production constr_longident -> UIDENT

State 151:
constr_longident -> UIDENT DOT . UIDENT [ WHEN WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RPAREN RECORDPAT REALPAT QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUSGREATER MINUS LVECTOR LPAREN LISTPAT LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT EQ DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONCOLON CHARPAT CHAR CARRAYPAT BOXPAT BARBAR AS ARRAYPAT ]
-- On UIDENT shift to state 5

State 152:
built_in_constr -> TUPLEPAT . pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 708
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 153:
built_in_constr -> SYMBOLPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 154

State 154:
built_in_constr -> SYMBOLPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On EQ reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On COMMA reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On AS reduce production built_in_constr -> SYMBOLPAT bi_pattern

State 155:
built_in_constr -> STRINGPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 156

State 156:
built_in_constr -> STRINGPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> STRINGPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> STRINGPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> STRINGPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> STRINGPAT bi_pattern
-- On EQ reduce production built_in_constr -> STRINGPAT bi_pattern
-- On COMMA reduce production built_in_constr -> STRINGPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> STRINGPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> STRINGPAT bi_pattern
-- On AS reduce production built_in_constr -> STRINGPAT bi_pattern

State 157:
built_in_constr -> STACKPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 158

State 158:
built_in_constr -> STACKPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> STACKPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> STACKPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> STACKPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> STACKPAT bi_pattern
-- On EQ reduce production built_in_constr -> STACKPAT bi_pattern
-- On COMMA reduce production built_in_constr -> STACKPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> STACKPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> STACKPAT bi_pattern
-- On AS reduce production built_in_constr -> STACKPAT bi_pattern

State 159:
built_in_constr -> RECORDPAT . pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 707
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 160:
built_in_constr -> REALPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 161

State 161:
built_in_constr -> REALPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> REALPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> REALPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> REALPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> REALPAT bi_pattern
-- On EQ reduce production built_in_constr -> REALPAT bi_pattern
-- On COMMA reduce production built_in_constr -> REALPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> REALPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> REALPAT bi_pattern
-- On AS reduce production built_in_constr -> REALPAT bi_pattern

State 162:
built_in_constr -> QUEUEPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 163

State 163:
built_in_constr -> QUEUEPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On EQ reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On COMMA reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On AS reduce production built_in_constr -> QUEUEPAT bi_pattern

State 164:
built_in_constr -> OUT_CHANNELPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 165

State 165:
built_in_constr -> OUT_CHANNELPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On EQ reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On COMMA reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On AS reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern

State 166:
built_in_constr -> NUMBERPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 167

State 167:
built_in_constr -> NUMBERPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On EQ reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On COMMA reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On AS reduce production built_in_constr -> NUMBERPAT bi_pattern

State 168:
constant -> LVECTOR . RBRACK [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LVECTOR . list_pattern RBRACK [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LVECTOR . list_pattern error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On RBRACK shift to state 133
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOTDOTDOT shift to state 236
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 348
-- On pattern_comma_list shift to state 349
-- On pattern shift to state 355
-- On list_pattern shift to state 704
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360

State 169:
built_in_constr -> WEAKARRAYPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 186

State 170:
simple_bi_pattern -> UNDERSCORE . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_bi_pattern -> UNDERSCORE
-- On RPAREN reduce production simple_bi_pattern -> UNDERSCORE
-- On RBRACK reduce production simple_bi_pattern -> UNDERSCORE
-- On RBRACE reduce production simple_bi_pattern -> UNDERSCORE
-- On COMMA reduce production simple_bi_pattern -> UNDERSCORE
-- On COLONCOLON reduce production simple_bi_pattern -> UNDERSCORE
-- On BARBAR reduce production simple_bi_pattern -> UNDERSCORE
-- On BAR reduce production simple_bi_pattern -> UNDERSCORE
-- On AS reduce production simple_bi_pattern -> UNDERSCORE

State 171:
signed_constant -> MINUS . INT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
signed_constant -> MINUS . FLOAT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On INT shift to state 172
-- On FLOAT shift to state 173

State 172:
signed_constant -> MINUS INT . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production signed_constant -> MINUS INT
-- On RPAREN reduce production signed_constant -> MINUS INT
-- On RBRACK reduce production signed_constant -> MINUS INT
-- On RBRACE reduce production signed_constant -> MINUS INT
-- On COMMA reduce production signed_constant -> MINUS INT
-- On COLONCOLON reduce production signed_constant -> MINUS INT
-- On BARBAR reduce production signed_constant -> MINUS INT
-- On BAR reduce production signed_constant -> MINUS INT
-- On AS reduce production signed_constant -> MINUS INT

State 173:
signed_constant -> MINUS FLOAT . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production signed_constant -> MINUS FLOAT
-- On RPAREN reduce production signed_constant -> MINUS FLOAT
-- On RBRACK reduce production signed_constant -> MINUS FLOAT
-- On RBRACE reduce production signed_constant -> MINUS FLOAT
-- On COMMA reduce production signed_constant -> MINUS FLOAT
-- On COLONCOLON reduce production signed_constant -> MINUS FLOAT
-- On BARBAR reduce production signed_constant -> MINUS FLOAT
-- On BAR reduce production signed_constant -> MINUS FLOAT
-- On AS reduce production signed_constant -> MINUS FLOAT

State 174:
constant -> LVECTOR . RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On RBRACK shift to state 65

State 175:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
constant -> LPAREN . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RPAREN shift to state 81
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 136
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 176
-- On signed_constant shift to state 144
-- On constant shift to state 145

State 176:
bi_pattern -> LPAREN simple_bi_pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On RPAREN shift to state 177

State 177:
bi_pattern -> LPAREN simple_bi_pattern RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On RPAREN reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On RBRACK reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On RBRACE reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On COMMA reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On COLONCOLON reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On BARBAR reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On BAR reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN
-- On AS reduce production bi_pattern -> LPAREN simple_bi_pattern RPAREN

State 178:
simple_bi_pattern -> LIDENT . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_bi_pattern -> LIDENT
-- On RPAREN reduce production simple_bi_pattern -> LIDENT
-- On RBRACK reduce production simple_bi_pattern -> LIDENT
-- On RBRACE reduce production simple_bi_pattern -> LIDENT
-- On COMMA reduce production simple_bi_pattern -> LIDENT
-- On COLONCOLON reduce production simple_bi_pattern -> LIDENT
-- On BARBAR reduce production simple_bi_pattern -> LIDENT
-- On BAR reduce production simple_bi_pattern -> LIDENT
-- On AS reduce production simple_bi_pattern -> LIDENT

State 179:
constant -> LBRACKBAR . BARRBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On BARRBRACK shift to state 180

State 180:
constant -> LBRACKBAR BARRBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AS AMPERAMPER ]
-- On error reduce production constant -> LBRACKBAR BARRBRACK
-- On WHERE reduce production constant -> LBRACKBAR BARRBRACK
-- On UIDENT reduce production constant -> LBRACKBAR BARRBRACK
-- On THEN reduce production constant -> LBRACKBAR BARRBRACK
-- On STRING reduce production constant -> LBRACKBAR BARRBRACK
-- On STAR reduce production constant -> LBRACKBAR BARRBRACK
-- On SHARP reduce production constant -> LBRACKBAR BARRBRACK
-- On SEMI reduce production constant -> LBRACKBAR BARRBRACK
-- On RPAREN reduce production constant -> LBRACKBAR BARRBRACK
-- On RBRACK reduce production constant -> LBRACKBAR BARRBRACK
-- On RBRACE reduce production constant -> LBRACKBAR BARRBRACK
-- On QUESTION reduce production constant -> LBRACKBAR BARRBRACK
-- On PREFIXOP reduce production constant -> LBRACKBAR BARRBRACK
-- On PLUS reduce production constant -> LBRACKBAR BARRBRACK
-- On MINUS reduce production constant -> LBRACKBAR BARRBRACK
-- On LVECTOR reduce production constant -> LBRACKBAR BARRBRACK
-- On LPAREN reduce production constant -> LBRACKBAR BARRBRACK
-- On LMATRIX reduce production constant -> LBRACKBAR BARRBRACK
-- On LIDENT reduce production constant -> LBRACKBAR BARRBRACK
-- On LBRACKBAR reduce production constant -> LBRACKBAR BARRBRACK
-- On LBRACK reduce production constant -> LBRACKBAR BARRBRACK
-- On LBRACE reduce production constant -> LBRACKBAR BARRBRACK
-- On INT reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP5R reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP5L reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP4R reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP4L reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP3R reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP3L reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP2R reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP2L reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP1R reduce production constant -> LBRACKBAR BARRBRACK
-- On INFIXOP1L reduce production constant -> LBRACKBAR BARRBRACK
-- On IMAGINARY reduce production constant -> LBRACKBAR BARRBRACK
-- On FLOAT reduce production constant -> LBRACKBAR BARRBRACK
-- On EQ reduce production constant -> LBRACKBAR BARRBRACK
-- On END reduce production constant -> LBRACKBAR BARRBRACK
-- On ELSE reduce production constant -> LBRACKBAR BARRBRACK
-- On DOTDOT reduce production constant -> LBRACKBAR BARRBRACK
-- On DOT reduce production constant -> LBRACKBAR BARRBRACK
-- On DOLLAR reduce production constant -> LBRACKBAR BARRBRACK
-- On COMMA reduce production constant -> LBRACKBAR BARRBRACK
-- On COLONEQUAL reduce production constant -> LBRACKBAR BARRBRACK
-- On COLONCOLON reduce production constant -> LBRACKBAR BARRBRACK
-- On COLON reduce production constant -> LBRACKBAR BARRBRACK
-- On CHAR reduce production constant -> LBRACKBAR BARRBRACK
-- On BEGIN reduce production constant -> LBRACKBAR BARRBRACK
-- On BARRBRACK reduce production constant -> LBRACKBAR BARRBRACK
-- On BARCOLON reduce production constant -> LBRACKBAR BARRBRACK
-- On BARBAR reduce production constant -> LBRACKBAR BARRBRACK
-- On BAR reduce production constant -> LBRACKBAR BARRBRACK
-- On AS reduce production constant -> LBRACKBAR BARRBRACK
-- On AMPERAMPER reduce production constant -> LBRACKBAR BARRBRACK

State 181:
constant -> LBRACK . RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On RBRACK shift to state 93

State 182:
constant -> LBRACE . RBRACE [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On RBRACE shift to state 98

State 183:
bi_pattern -> simple_bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production bi_pattern -> simple_bi_pattern
-- On RPAREN reduce production bi_pattern -> simple_bi_pattern
-- On RBRACK reduce production bi_pattern -> simple_bi_pattern
-- On RBRACE reduce production bi_pattern -> simple_bi_pattern
-- On COMMA reduce production bi_pattern -> simple_bi_pattern
-- On COLONCOLON reduce production bi_pattern -> simple_bi_pattern
-- On BARBAR reduce production bi_pattern -> simple_bi_pattern
-- On BAR reduce production bi_pattern -> simple_bi_pattern
-- On AS reduce production bi_pattern -> simple_bi_pattern

State 184:
simple_bi_pattern -> signed_constant . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_bi_pattern -> signed_constant
-- On RPAREN reduce production simple_bi_pattern -> signed_constant
-- On RBRACK reduce production simple_bi_pattern -> signed_constant
-- On RBRACE reduce production simple_bi_pattern -> signed_constant
-- On COMMA reduce production simple_bi_pattern -> signed_constant
-- On COLONCOLON reduce production simple_bi_pattern -> signed_constant
-- On BARBAR reduce production simple_bi_pattern -> signed_constant
-- On BAR reduce production simple_bi_pattern -> signed_constant
-- On AS reduce production simple_bi_pattern -> signed_constant

State 185:
signed_constant -> constant . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production signed_constant -> constant
-- On RPAREN reduce production signed_constant -> constant
-- On RBRACK reduce production signed_constant -> constant
-- On RBRACE reduce production signed_constant -> constant
-- On COMMA reduce production signed_constant -> constant
-- On COLONCOLON reduce production signed_constant -> constant
-- On BARBAR reduce production signed_constant -> constant
-- On BAR reduce production signed_constant -> constant
-- On AS reduce production signed_constant -> constant

State 186:
built_in_constr -> WEAKARRAYPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On COMMA reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On BAR reduce production built_in_constr -> WEAKARRAYPAT bi_pattern
-- On AS reduce production built_in_constr -> WEAKARRAYPAT bi_pattern

State 187:
built_in_constr -> VECTORPAT . pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 703
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360

State 188:
simple_pattern -> UNDERSCORE . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_pattern -> UNDERSCORE
-- On RPAREN reduce production simple_pattern -> UNDERSCORE
-- On RBRACK reduce production simple_pattern -> UNDERSCORE
-- On RBRACE reduce production simple_pattern -> UNDERSCORE
-- On COMMA reduce production simple_pattern -> UNDERSCORE
-- On COLONCOLON reduce production simple_pattern -> UNDERSCORE
-- On BARBAR reduce production simple_pattern -> UNDERSCORE
-- On BAR reduce production simple_pattern -> UNDERSCORE
-- On AS reduce production simple_pattern -> UNDERSCORE

State 189:
constr_longident -> UIDENT . DOT UIDENT [ error WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RPAREN RECORDPAT REALPAT RBRACK RBRACE QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONCOLON CHARPAT CHAR CARRAYPAT BOXPAT BARBAR BAR AS ARRAYPAT ]
constr_longident -> UIDENT . [ error WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RPAREN RECORDPAT REALPAT RBRACK RBRACE QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONCOLON CHARPAT CHAR CARRAYPAT BOXPAT BARBAR BAR AS ARRAYPAT ]
-- On DOT shift to state 190
-- On error reduce production constr_longident -> UIDENT
-- On WEAKARRAYPAT reduce production constr_longident -> UIDENT
-- On VECTORPAT reduce production constr_longident -> UIDENT
-- On UNDERSCORE reduce production constr_longident -> UIDENT
-- On UIDENT reduce production constr_longident -> UIDENT
-- On TUPLEPAT reduce production constr_longident -> UIDENT
-- On SYMBOLPAT reduce production constr_longident -> UIDENT
-- On STRINGPAT reduce production constr_longident -> UIDENT
-- On STRING reduce production constr_longident -> UIDENT
-- On STACKPAT reduce production constr_longident -> UIDENT
-- On SHARP reduce production constr_longident -> UIDENT
-- On RPAREN reduce production constr_longident -> UIDENT
-- On RECORDPAT reduce production constr_longident -> UIDENT
-- On REALPAT reduce production constr_longident -> UIDENT
-- On RBRACK reduce production constr_longident -> UIDENT
-- On RBRACE reduce production constr_longident -> UIDENT
-- On QUEUEPAT reduce production constr_longident -> UIDENT
-- On OUT_CHANNELPAT reduce production constr_longident -> UIDENT
-- On NUMBERPAT reduce production constr_longident -> UIDENT
-- On MINUS reduce production constr_longident -> UIDENT
-- On LVECTOR reduce production constr_longident -> UIDENT
-- On LPAREN reduce production constr_longident -> UIDENT
-- On LISTPAT reduce production constr_longident -> UIDENT
-- On LIDENT reduce production constr_longident -> UIDENT
-- On LBRACKBAR reduce production constr_longident -> UIDENT
-- On LBRACK reduce production constr_longident -> UIDENT
-- On LBRACE reduce production constr_longident -> UIDENT
-- On IN_CHANNELPAT reduce production constr_longident -> UIDENT
-- On INTPAT reduce production constr_longident -> UIDENT
-- On INT reduce production constr_longident -> UIDENT
-- On IMAGINARY reduce production constr_longident -> UIDENT
-- On HASHTABLEPAT reduce production constr_longident -> UIDENT
-- On FLOATPAT reduce production constr_longident -> UIDENT
-- On FLOAT reduce production constr_longident -> UIDENT
-- On FARRAYPAT reduce production constr_longident -> UIDENT
-- On DOLLAR reduce production constr_longident -> UIDENT
-- On DIR_HANDLEPAT reduce production constr_longident -> UIDENT
-- On COMPLEXPAT reduce production constr_longident -> UIDENT
-- On COMMA reduce production constr_longident -> UIDENT
-- On COLONCOLON reduce production constr_longident -> UIDENT
-- On CHARPAT reduce production constr_longident -> UIDENT
-- On CHAR reduce production constr_longident -> UIDENT
-- On CARRAYPAT reduce production constr_longident -> UIDENT
-- On BOXPAT reduce production constr_longident -> UIDENT
-- On BARBAR reduce production constr_longident -> UIDENT
-- On BAR reduce production constr_longident -> UIDENT
-- On AS reduce production constr_longident -> UIDENT
-- On ARRAYPAT reduce production constr_longident -> UIDENT

State 190:
constr_longident -> UIDENT DOT . UIDENT [ error WEAKARRAYPAT VECTORPAT UNDERSCORE UIDENT TUPLEPAT SYMBOLPAT STRINGPAT STRING STACKPAT SHARP RPAREN RECORDPAT REALPAT RBRACK RBRACE QUEUEPAT OUT_CHANNELPAT NUMBERPAT MINUS LVECTOR LPAREN LISTPAT LIDENT LBRACKBAR LBRACK LBRACE IN_CHANNELPAT INTPAT INT IMAGINARY HASHTABLEPAT FLOATPAT FLOAT FARRAYPAT DOLLAR DIR_HANDLEPAT COMPLEXPAT COMMA COLONCOLON CHARPAT CHAR CARRAYPAT BOXPAT BARBAR BAR AS ARRAYPAT ]
-- On UIDENT shift to state 48

State 191:
built_in_constr -> TUPLEPAT . pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 702
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360

State 192:
built_in_constr -> SYMBOLPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 193

State 193:
built_in_constr -> SYMBOLPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On COMMA reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On BAR reduce production built_in_constr -> SYMBOLPAT bi_pattern
-- On AS reduce production built_in_constr -> SYMBOLPAT bi_pattern

State 194:
built_in_constr -> STRINGPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 195

State 195:
built_in_constr -> STRINGPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> STRINGPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> STRINGPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> STRINGPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> STRINGPAT bi_pattern
-- On COMMA reduce production built_in_constr -> STRINGPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> STRINGPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> STRINGPAT bi_pattern
-- On BAR reduce production built_in_constr -> STRINGPAT bi_pattern
-- On AS reduce production built_in_constr -> STRINGPAT bi_pattern

State 196:
built_in_constr -> STACKPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 197

State 197:
built_in_constr -> STACKPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> STACKPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> STACKPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> STACKPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> STACKPAT bi_pattern
-- On COMMA reduce production built_in_constr -> STACKPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> STACKPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> STACKPAT bi_pattern
-- On BAR reduce production built_in_constr -> STACKPAT bi_pattern
-- On AS reduce production built_in_constr -> STACKPAT bi_pattern

State 198:
built_in_constr -> RECORDPAT . pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 701
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360

State 199:
built_in_constr -> REALPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 200

State 200:
built_in_constr -> REALPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> REALPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> REALPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> REALPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> REALPAT bi_pattern
-- On COMMA reduce production built_in_constr -> REALPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> REALPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> REALPAT bi_pattern
-- On BAR reduce production built_in_constr -> REALPAT bi_pattern
-- On AS reduce production built_in_constr -> REALPAT bi_pattern

State 201:
built_in_constr -> QUEUEPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 202

State 202:
built_in_constr -> QUEUEPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On COMMA reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On BAR reduce production built_in_constr -> QUEUEPAT bi_pattern
-- On AS reduce production built_in_constr -> QUEUEPAT bi_pattern

State 203:
built_in_constr -> OUT_CHANNELPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 204

State 204:
built_in_constr -> OUT_CHANNELPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On COMMA reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On BAR reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern
-- On AS reduce production built_in_constr -> OUT_CHANNELPAT bi_pattern

State 205:
built_in_constr -> NUMBERPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 206

State 206:
built_in_constr -> NUMBERPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On COMMA reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On BAR reduce production built_in_constr -> NUMBERPAT bi_pattern
-- On AS reduce production built_in_constr -> NUMBERPAT bi_pattern

State 207:
constant -> LVECTOR . RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LVECTOR . list_pattern RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LVECTOR . list_pattern error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On RBRACK shift to state 65
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOTDOTDOT shift to state 236
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 348
-- On pattern_comma_list shift to state 349
-- On pattern shift to state 355
-- On list_pattern shift to state 698
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360

State 208:
constant -> LPAREN . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LPAREN . list_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LPAREN . pattern_comma_list COMMA param_tail RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LPAREN . param_tail RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LPAREN . list_pattern error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
val_ident -> LPAREN . operator RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STAR shift to state 7
-- On STACKPAT shift to state 196
-- On SHARP shift to state 80
-- On RPAREN shift to state 81
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On PREFIXOP shift to state 9
-- On PLUS shift to state 10
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 209
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On INFIXOP5R shift to state 12
-- On INFIXOP5L shift to state 13
-- On INFIXOP4R shift to state 14
-- On INFIXOP4L shift to state 15
-- On INFIXOP3R shift to state 16
-- On INFIXOP3L shift to state 17
-- On INFIXOP2R shift to state 18
-- On INFIXOP2L shift to state 19
-- On INFIXOP1R shift to state 20
-- On INFIXOP1L shift to state 21
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On EQ shift to state 22
-- On DOTDOTDOT shift to state 236
-- On DOLLAR shift to state 239
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On COLONEQUAL shift to state 24
-- On COLONCOLON shift to state 25
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On AMPEROPT shift to state 377
-- On AMPERKEY shift to state 666
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 348
-- On pattern_comma_list shift to state 689
-- On pattern shift to state 355
-- On param_tail shift to state 693
-- On operator shift to state 50
-- On list_pattern shift to state 695
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360

State 209:
operator -> MINUS . [ RPAREN ]
signed_constant -> MINUS . INT [ error RPAREN COMMA COLONCOLON BARBAR BAR AS ]
signed_constant -> MINUS . FLOAT [ error RPAREN COMMA COLONCOLON BARBAR BAR AS ]
-- On INT shift to state 172
-- On FLOAT shift to state 173
-- On RPAREN reduce production operator -> MINUS

State 210:
built_in_constr -> LISTPAT . pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 688
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360

State 211:
constant -> LBRACK . RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LBRACK . list_pattern RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LBRACK . list_pattern error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On RBRACK shift to state 93
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOTDOTDOT shift to state 236
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 348
-- On pattern_comma_list shift to state 349
-- On pattern shift to state 355
-- On list_pattern shift to state 685
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360

State 212:
constant -> LBRACE . RBRACE [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LBRACE . lbl_pattern_list opt_comma RBRACE [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LBRACE . lbl_pattern_list error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UIDENT shift to state 213
-- On RBRACE shift to state 98
-- On LIDENT shift to state 216
-- On lbl_pattern_list_element shift to state 217
-- On lbl_pattern_list shift to state 218
-- On label_longident shift to state 222

State 213:
label_longident -> UIDENT . DOT LIDENT [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On DOT shift to state 214

State 214:
label_longident -> UIDENT DOT . LIDENT [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On LIDENT shift to state 215

State 215:
label_longident -> UIDENT DOT LIDENT . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production label_longident -> UIDENT DOT LIDENT
-- On WHILE reduce production label_longident -> UIDENT DOT LIDENT
-- On WHERE reduce production label_longident -> UIDENT DOT LIDENT
-- On UIDENT reduce production label_longident -> UIDENT DOT LIDENT
-- On TYPE reduce production label_longident -> UIDENT DOT LIDENT
-- On TRY reduce production label_longident -> UIDENT DOT LIDENT
-- On TO reduce production label_longident -> UIDENT DOT LIDENT
-- On THEN reduce production label_longident -> UIDENT DOT LIDENT
-- On STRING reduce production label_longident -> UIDENT DOT LIDENT
-- On STAR reduce production label_longident -> UIDENT DOT LIDENT
-- On SHARP reduce production label_longident -> UIDENT DOT LIDENT
-- On SEMISEMI reduce production label_longident -> UIDENT DOT LIDENT
-- On SEMI reduce production label_longident -> UIDENT DOT LIDENT
-- On RPAREN reduce production label_longident -> UIDENT DOT LIDENT
-- On RAISE reduce production label_longident -> UIDENT DOT LIDENT
-- On QUESTION reduce production label_longident -> UIDENT DOT LIDENT
-- On PREFIXOP reduce production label_longident -> UIDENT DOT LIDENT
-- On PLUS reduce production label_longident -> UIDENT DOT LIDENT
-- On OPEN reduce production label_longident -> UIDENT DOT LIDENT
-- On MODULE reduce production label_longident -> UIDENT DOT LIDENT
-- On MINUSGREATER reduce production label_longident -> UIDENT DOT LIDENT
-- On MINUS reduce production label_longident -> UIDENT DOT LIDENT
-- On MATCH reduce production label_longident -> UIDENT DOT LIDENT
-- On LVECTOR reduce production label_longident -> UIDENT DOT LIDENT
-- On LPAREN reduce production label_longident -> UIDENT DOT LIDENT
-- On LMATRIX reduce production label_longident -> UIDENT DOT LIDENT
-- On LIDENT reduce production label_longident -> UIDENT DOT LIDENT
-- On LET reduce production label_longident -> UIDENT DOT LIDENT
-- On LESSMINUS reduce production label_longident -> UIDENT DOT LIDENT
-- On LBRACKBAR reduce production label_longident -> UIDENT DOT LIDENT
-- On LBRACK reduce production label_longident -> UIDENT DOT LIDENT
-- On LBRACE reduce production label_longident -> UIDENT DOT LIDENT
-- On LAZY reduce production label_longident -> UIDENT DOT LIDENT
-- On INT reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP5R reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP5L reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP4R reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP4L reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP3R reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP3L reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP2R reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP2L reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP1R reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP1L reduce production label_longident -> UIDENT DOT LIDENT
-- On IN reduce production label_longident -> UIDENT DOT LIDENT
-- On IMAGINARY reduce production label_longident -> UIDENT DOT LIDENT
-- On IF reduce production label_longident -> UIDENT DOT LIDENT
-- On FUNCTION reduce production label_longident -> UIDENT DOT LIDENT
-- On FUN reduce production label_longident -> UIDENT DOT LIDENT
-- On FOR reduce production label_longident -> UIDENT DOT LIDENT
-- On FLOAT reduce production label_longident -> UIDENT DOT LIDENT
-- On EXCEPTION reduce production label_longident -> UIDENT DOT LIDENT
-- On EQ reduce production label_longident -> UIDENT DOT LIDENT
-- On EOF reduce production label_longident -> UIDENT DOT LIDENT
-- On ELSE reduce production label_longident -> UIDENT DOT LIDENT
-- On DOWNTO reduce production label_longident -> UIDENT DOT LIDENT
-- On DOT reduce production label_longident -> UIDENT DOT LIDENT
-- On DONE reduce production label_longident -> UIDENT DOT LIDENT
-- On DOLLAR reduce production label_longident -> UIDENT DOT LIDENT
-- On DO reduce production label_longident -> UIDENT DOT LIDENT
-- On COMMA reduce production label_longident -> UIDENT DOT LIDENT
-- On COLONEQUAL reduce production label_longident -> UIDENT DOT LIDENT
-- On COLONCOLON reduce production label_longident -> UIDENT DOT LIDENT
-- On COLON reduce production label_longident -> UIDENT DOT LIDENT
-- On CHAR reduce production label_longident -> UIDENT DOT LIDENT
-- On CASE reduce production label_longident -> UIDENT DOT LIDENT
-- On BELOW reduce production label_longident -> UIDENT DOT LIDENT
-- On BEGIN reduce production label_longident -> UIDENT DOT LIDENT
-- On BARBAR reduce production label_longident -> UIDENT DOT LIDENT
-- On BAR reduce production label_longident -> UIDENT DOT LIDENT
-- On ASSERT reduce production label_longident -> UIDENT DOT LIDENT
-- On AND reduce production label_longident -> UIDENT DOT LIDENT
-- On AMPERAMPER reduce production label_longident -> UIDENT DOT LIDENT
-- On ABOVE reduce production label_longident -> UIDENT DOT LIDENT

State 216:
label_longident -> LIDENT . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LESSMINUS LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production label_longident -> LIDENT
-- On WHILE reduce production label_longident -> LIDENT
-- On WHERE reduce production label_longident -> LIDENT
-- On UIDENT reduce production label_longident -> LIDENT
-- On TYPE reduce production label_longident -> LIDENT
-- On TRY reduce production label_longident -> LIDENT
-- On TO reduce production label_longident -> LIDENT
-- On THEN reduce production label_longident -> LIDENT
-- On STRING reduce production label_longident -> LIDENT
-- On STAR reduce production label_longident -> LIDENT
-- On SHARP reduce production label_longident -> LIDENT
-- On SEMISEMI reduce production label_longident -> LIDENT
-- On SEMI reduce production label_longident -> LIDENT
-- On RPAREN reduce production label_longident -> LIDENT
-- On RAISE reduce production label_longident -> LIDENT
-- On QUESTION reduce production label_longident -> LIDENT
-- On PREFIXOP reduce production label_longident -> LIDENT
-- On PLUS reduce production label_longident -> LIDENT
-- On OPEN reduce production label_longident -> LIDENT
-- On MODULE reduce production label_longident -> LIDENT
-- On MINUSGREATER reduce production label_longident -> LIDENT
-- On MINUS reduce production label_longident -> LIDENT
-- On MATCH reduce production label_longident -> LIDENT
-- On LVECTOR reduce production label_longident -> LIDENT
-- On LPAREN reduce production label_longident -> LIDENT
-- On LMATRIX reduce production label_longident -> LIDENT
-- On LIDENT reduce production label_longident -> LIDENT
-- On LET reduce production label_longident -> LIDENT
-- On LESSMINUS reduce production label_longident -> LIDENT
-- On LBRACKBAR reduce production label_longident -> LIDENT
-- On LBRACK reduce production label_longident -> LIDENT
-- On LBRACE reduce production label_longident -> LIDENT
-- On LAZY reduce production label_longident -> LIDENT
-- On INT reduce production label_longident -> LIDENT
-- On INFIXOP5R reduce production label_longident -> LIDENT
-- On INFIXOP5L reduce production label_longident -> LIDENT
-- On INFIXOP4R reduce production label_longident -> LIDENT
-- On INFIXOP4L reduce production label_longident -> LIDENT
-- On INFIXOP3R reduce production label_longident -> LIDENT
-- On INFIXOP3L reduce production label_longident -> LIDENT
-- On INFIXOP2R reduce production label_longident -> LIDENT
-- On INFIXOP2L reduce production label_longident -> LIDENT
-- On INFIXOP1R reduce production label_longident -> LIDENT
-- On INFIXOP1L reduce production label_longident -> LIDENT
-- On IN reduce production label_longident -> LIDENT
-- On IMAGINARY reduce production label_longident -> LIDENT
-- On IF reduce production label_longident -> LIDENT
-- On FUNCTION reduce production label_longident -> LIDENT
-- On FUN reduce production label_longident -> LIDENT
-- On FOR reduce production label_longident -> LIDENT
-- On FLOAT reduce production label_longident -> LIDENT
-- On EXCEPTION reduce production label_longident -> LIDENT
-- On EQ reduce production label_longident -> LIDENT
-- On EOF reduce production label_longident -> LIDENT
-- On ELSE reduce production label_longident -> LIDENT
-- On DOWNTO reduce production label_longident -> LIDENT
-- On DOT reduce production label_longident -> LIDENT
-- On DONE reduce production label_longident -> LIDENT
-- On DOLLAR reduce production label_longident -> LIDENT
-- On DO reduce production label_longident -> LIDENT
-- On COMMA reduce production label_longident -> LIDENT
-- On COLONEQUAL reduce production label_longident -> LIDENT
-- On COLONCOLON reduce production label_longident -> LIDENT
-- On COLON reduce production label_longident -> LIDENT
-- On CHAR reduce production label_longident -> LIDENT
-- On CASE reduce production label_longident -> LIDENT
-- On BELOW reduce production label_longident -> LIDENT
-- On BEGIN reduce production label_longident -> LIDENT
-- On BARBAR reduce production label_longident -> LIDENT
-- On BAR reduce production label_longident -> LIDENT
-- On ASSERT reduce production label_longident -> LIDENT
-- On AND reduce production label_longident -> LIDENT
-- On AMPERAMPER reduce production label_longident -> LIDENT
-- On ABOVE reduce production label_longident -> LIDENT

State 217:
lbl_pattern_list -> lbl_pattern_list_element . [ error RBRACE COMMA ]
-- On error reduce production lbl_pattern_list -> lbl_pattern_list_element
-- On RBRACE reduce production lbl_pattern_list -> lbl_pattern_list_element
-- On COMMA reduce production lbl_pattern_list -> lbl_pattern_list_element

State 218:
lbl_pattern_list -> lbl_pattern_list . COMMA lbl_pattern_list_element [ error RBRACE COMMA ]
simple_pattern -> LBRACE lbl_pattern_list . opt_comma RBRACE [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LBRACE lbl_pattern_list . error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error shift to state 219
-- On COMMA shift to state 220
-- On opt_comma shift to state 683
-- On RBRACE reduce production opt_comma ->

State 219:
simple_pattern -> LBRACE lbl_pattern_list error . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On RPAREN reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On RBRACK reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On RBRACE reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On COMMA reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On COLONCOLON reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On BARBAR reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On BAR reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On AS reduce production simple_pattern -> LBRACE lbl_pattern_list error

State 220:
lbl_pattern_list -> lbl_pattern_list COMMA . lbl_pattern_list_element [ error RBRACE COMMA ]
opt_comma -> COMMA . [ RBRACE ]
-- On UIDENT shift to state 213
-- On LIDENT shift to state 216
-- On lbl_pattern_list_element shift to state 221
-- On label_longident shift to state 222
-- On RBRACE reduce production opt_comma -> COMMA

State 221:
lbl_pattern_list -> lbl_pattern_list COMMA lbl_pattern_list_element . [ error RBRACE COMMA ]
-- On error reduce production lbl_pattern_list -> lbl_pattern_list COMMA lbl_pattern_list_element
-- On RBRACE reduce production lbl_pattern_list -> lbl_pattern_list COMMA lbl_pattern_list_element
-- On COMMA reduce production lbl_pattern_list -> lbl_pattern_list COMMA lbl_pattern_list_element

State 222:
lbl_pattern_list_element -> label_longident . EQ pattern [ error RBRACE COMMA ]
-- On EQ shift to state 223

State 223:
lbl_pattern_list_element -> label_longident EQ . pattern [ error RBRACE COMMA ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 682
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360

State 224:
built_in_constr -> IN_CHANNELPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 225

State 225:
built_in_constr -> IN_CHANNELPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On COMMA reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On BAR reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On AS reduce production built_in_constr -> IN_CHANNELPAT bi_pattern

State 226:
built_in_constr -> INTPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 227

State 227:
built_in_constr -> INTPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> INTPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> INTPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> INTPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> INTPAT bi_pattern
-- On COMMA reduce production built_in_constr -> INTPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> INTPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> INTPAT bi_pattern
-- On BAR reduce production built_in_constr -> INTPAT bi_pattern
-- On AS reduce production built_in_constr -> INTPAT bi_pattern

State 228:
built_in_constr -> HASHTABLEPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 229

State 229:
built_in_constr -> HASHTABLEPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On COMMA reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On BAR reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On AS reduce production built_in_constr -> HASHTABLEPAT bi_pattern

State 230:
built_in_constr -> FLOATPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 231

State 231:
built_in_constr -> FLOATPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> FLOATPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> FLOATPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> FLOATPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> FLOATPAT bi_pattern
-- On COMMA reduce production built_in_constr -> FLOATPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> FLOATPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> FLOATPAT bi_pattern
-- On BAR reduce production built_in_constr -> FLOATPAT bi_pattern
-- On AS reduce production built_in_constr -> FLOATPAT bi_pattern

State 232:
built_in_constr -> FARRAYPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> FARRAYPAT . LPAREN pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 233
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 681

State 233:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> FARRAYPAT LPAREN . pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
constant -> LPAREN . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 81
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 176
-- On signed_constant shift to state 300
-- On pattern shift to state 677
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 234:
simple_bi_pattern -> UNDERSCORE . [ RPAREN ]
simple_pattern -> UNDERSCORE . [ COMMA COLONCOLON BARBAR AS ]
-- On RPAREN reduce production simple_bi_pattern -> UNDERSCORE
-- On COMMA reduce production simple_pattern -> UNDERSCORE
-- On COLONCOLON reduce production simple_pattern -> UNDERSCORE
-- On BARBAR reduce production simple_pattern -> UNDERSCORE
-- On AS reduce production simple_pattern -> UNDERSCORE

State 235:
constant -> LPAREN . RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LPAREN . list_pattern RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LPAREN . pattern_comma_list COMMA param_tail RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LPAREN . param_tail RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LPAREN . list_pattern error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
val_ident -> LPAREN . operator RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STAR shift to state 7
-- On STACKPAT shift to state 196
-- On SHARP shift to state 80
-- On RPAREN shift to state 135
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On PREFIXOP shift to state 9
-- On PLUS shift to state 10
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 209
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On INFIXOP5R shift to state 12
-- On INFIXOP5L shift to state 13
-- On INFIXOP4R shift to state 14
-- On INFIXOP4L shift to state 15
-- On INFIXOP3R shift to state 16
-- On INFIXOP3L shift to state 17
-- On INFIXOP2R shift to state 18
-- On INFIXOP2L shift to state 19
-- On INFIXOP1R shift to state 20
-- On INFIXOP1L shift to state 21
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On EQ shift to state 22
-- On DOTDOTDOT shift to state 236
-- On DOLLAR shift to state 239
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On COLONEQUAL shift to state 24
-- On COLONCOLON shift to state 25
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On AMPEROPT shift to state 377
-- On AMPERKEY shift to state 666
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 348
-- On pattern_comma_list shift to state 668
-- On pattern shift to state 355
-- On param_tail shift to state 672
-- On operator shift to state 26
-- On list_pattern shift to state 674
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360

State 236:
list_pattern -> DOTDOTDOT . AS LIDENT [ error RPAREN RBRACK ]
list_pattern -> DOTDOTDOT . [ error RPAREN RBRACK ]
-- On AS shift to state 237
-- On error reduce production list_pattern -> DOTDOTDOT
-- On RPAREN reduce production list_pattern -> DOTDOTDOT
-- On RBRACK reduce production list_pattern -> DOTDOTDOT

State 237:
list_pattern -> DOTDOTDOT AS . LIDENT [ error RPAREN RBRACK ]
-- On LIDENT shift to state 238

State 238:
list_pattern -> DOTDOTDOT AS LIDENT . [ error RPAREN RBRACK ]
-- On error reduce production list_pattern -> DOTDOTDOT AS LIDENT
-- On RPAREN reduce production list_pattern -> DOTDOTDOT AS LIDENT
-- On RBRACK reduce production list_pattern -> DOTDOTDOT AS LIDENT

State 239:
constant -> DOLLAR . STRING [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR BAR AS AMPERAMPER ]
constant -> DOLLAR . LIDENT [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR BAR AS AMPERAMPER ]
constant -> DOLLAR . UIDENT [ error WHERE UIDENT STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ DOT DOLLAR COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR BAR AS AMPERAMPER ]
operator -> DOLLAR . [ RPAREN ]
-- On UIDENT shift to state 107
-- On STRING shift to state 108
-- On LIDENT shift to state 109
-- On RPAREN reduce production operator -> DOLLAR

State 240:
built_in_constr -> DIR_HANDLEPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 241

State 241:
built_in_constr -> DIR_HANDLEPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On COMMA reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On BAR reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On AS reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern

State 242:
built_in_constr -> COMPLEXPAT . LPAREN bi_pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> COMPLEXPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 243
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 249

State 243:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> COMPLEXPAT LPAREN . bi_pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
constant -> LPAREN . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RPAREN shift to state 81
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 244
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 245

State 244:
bi_pattern -> simple_bi_pattern . [ COMMA ]
bi_pattern -> LPAREN simple_bi_pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On RPAREN shift to state 177
-- On COMMA reduce production bi_pattern -> simple_bi_pattern

State 245:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern . COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On COMMA shift to state 246

State 246:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA . bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 247

State 247:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On RPAREN shift to state 248

State 248:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On RPAREN reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On RBRACK reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On RBRACE reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On COMMA reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On COLONCOLON reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On BARBAR reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On BAR reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On AS reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN

State 249:
built_in_constr -> COMPLEXPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On COMMA reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On BAR reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On AS reduce production built_in_constr -> COMPLEXPAT bi_pattern

State 250:
built_in_constr -> CHARPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 175
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 251

State 251:
built_in_constr -> CHARPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> CHARPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> CHARPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> CHARPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> CHARPAT bi_pattern
-- On COMMA reduce production built_in_constr -> CHARPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> CHARPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> CHARPAT bi_pattern
-- On BAR reduce production built_in_constr -> CHARPAT bi_pattern
-- On AS reduce production built_in_constr -> CHARPAT bi_pattern

State 252:
constant -> CHAR . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> CHAR . DOTDOT CHAR [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On DOTDOT shift to state 253
-- On error reduce production constant -> CHAR
-- On RPAREN reduce production constant -> CHAR
-- On RBRACK reduce production constant -> CHAR
-- On RBRACE reduce production constant -> CHAR
-- On COMMA reduce production constant -> CHAR
-- On COLONCOLON reduce production constant -> CHAR
-- On BARBAR reduce production constant -> CHAR
-- On BAR reduce production constant -> CHAR
-- On AS reduce production constant -> CHAR

State 253:
simple_pattern -> CHAR DOTDOT . CHAR [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On CHAR shift to state 254

State 254:
simple_pattern -> CHAR DOTDOT CHAR . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On RPAREN reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On RBRACK reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On RBRACE reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On COMMA reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On COLONCOLON reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On BARBAR reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On BAR reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On AS reduce production simple_pattern -> CHAR DOTDOT CHAR

State 255:
built_in_constr -> CARRAYPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> CARRAYPAT . LPAREN pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 256
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 376

State 256:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> CARRAYPAT LPAREN . pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
constant -> LPAREN . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 81
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 176
-- On signed_constant shift to state 300
-- On pattern shift to state 372
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 257:
built_in_constr -> LISTPAT . pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 371
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 258:
constant -> LBRACK . RBRACK [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LBRACK . list_pattern RBRACK [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LBRACK . list_pattern error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On RBRACK shift to state 101
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOTDOTDOT shift to state 236
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 348
-- On pattern_comma_list shift to state 349
-- On pattern shift to state 355
-- On list_pattern shift to state 368
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360

State 259:
built_in_constr -> BOXPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> BOXPAT . LPAREN pattern COMMA pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 260
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 335

State 260:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> BOXPAT LPAREN . pattern COMMA pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
constant -> LPAREN . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 81
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 176
-- On signed_constant shift to state 300
-- On pattern shift to state 331
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 261:
simple_bi_pattern -> LIDENT . [ RPAREN ]
val_ident -> LIDENT . [ COMMA COLONCOLON BARBAR AS ]
-- On RPAREN reduce production simple_bi_pattern -> LIDENT
-- On COMMA reduce production val_ident -> LIDENT
-- On COLONCOLON reduce production val_ident -> LIDENT
-- On BARBAR reduce production val_ident -> LIDENT
-- On AS reduce production val_ident -> LIDENT

State 262:
constant -> LBRACE . RBRACE [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LBRACE . lbl_pattern_list opt_comma RBRACE [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LBRACE . lbl_pattern_list error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On UIDENT shift to state 213
-- On RBRACE shift to state 114
-- On LIDENT shift to state 216
-- On lbl_pattern_list_element shift to state 217
-- On lbl_pattern_list shift to state 263
-- On label_longident shift to state 222

State 263:
lbl_pattern_list -> lbl_pattern_list . COMMA lbl_pattern_list_element [ error RBRACE COMMA ]
simple_pattern -> LBRACE lbl_pattern_list . opt_comma RBRACE [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LBRACE lbl_pattern_list . error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On error shift to state 264
-- On COMMA shift to state 220
-- On opt_comma shift to state 265
-- On RBRACE reduce production opt_comma ->

State 264:
simple_pattern -> LBRACE lbl_pattern_list error . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On UNDERSCORE reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On UIDENT reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On STRING reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On SHARP reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On RPAREN reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On MINUSGREATER reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On MINUS reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On LVECTOR reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On LPAREN reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On LIDENT reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On LESSMINUS reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On LBRACKBAR reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On LBRACK reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On LBRACE reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On INT reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On IMAGINARY reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On FLOAT reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On EQ reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On DOLLAR reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On COMMA reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On COLONCOLON reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On CHAR reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On BARBAR reduce production simple_pattern -> LBRACE lbl_pattern_list error
-- On AS reduce production simple_pattern -> LBRACE lbl_pattern_list error

State 265:
simple_pattern -> LBRACE lbl_pattern_list opt_comma . RBRACE [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On RBRACE shift to state 266

State 266:
simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On UNDERSCORE reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On UIDENT reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On STRING reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On SHARP reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On RPAREN reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On MINUSGREATER reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On MINUS reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On LVECTOR reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On LPAREN reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On LIDENT reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On LESSMINUS reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On LBRACKBAR reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On LBRACK reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On LBRACE reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On INT reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On IMAGINARY reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On FLOAT reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On EQ reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On DOLLAR reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On COMMA reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On COLONCOLON reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On CHAR reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On BARBAR reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On AS reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE

State 267:
built_in_constr -> IN_CHANNELPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 268

State 268:
built_in_constr -> IN_CHANNELPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On EQ reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On COMMA reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> IN_CHANNELPAT bi_pattern
-- On AS reduce production built_in_constr -> IN_CHANNELPAT bi_pattern

State 269:
built_in_constr -> INTPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 270

State 270:
built_in_constr -> INTPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> INTPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> INTPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> INTPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> INTPAT bi_pattern
-- On EQ reduce production built_in_constr -> INTPAT bi_pattern
-- On COMMA reduce production built_in_constr -> INTPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> INTPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> INTPAT bi_pattern
-- On AS reduce production built_in_constr -> INTPAT bi_pattern

State 271:
built_in_constr -> HASHTABLEPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 272

State 272:
built_in_constr -> HASHTABLEPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On EQ reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On COMMA reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> HASHTABLEPAT bi_pattern
-- On AS reduce production built_in_constr -> HASHTABLEPAT bi_pattern

State 273:
built_in_constr -> FLOATPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 274

State 274:
built_in_constr -> FLOATPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> FLOATPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> FLOATPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> FLOATPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> FLOATPAT bi_pattern
-- On EQ reduce production built_in_constr -> FLOATPAT bi_pattern
-- On COMMA reduce production built_in_constr -> FLOATPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> FLOATPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> FLOATPAT bi_pattern
-- On AS reduce production built_in_constr -> FLOATPAT bi_pattern

State 275:
built_in_constr -> FARRAYPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> FARRAYPAT . LPAREN pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 276
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 330

State 276:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> FARRAYPAT LPAREN . pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
constant -> LPAREN . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 135
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 142
-- On signed_constant shift to state 300
-- On pattern shift to state 326
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 277:
built_in_constr -> DIR_HANDLEPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 278

State 278:
built_in_constr -> DIR_HANDLEPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On EQ reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On COMMA reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern
-- On AS reduce production built_in_constr -> DIR_HANDLEPAT bi_pattern

State 279:
built_in_constr -> COMPLEXPAT . LPAREN bi_pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> COMPLEXPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 280
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 286

State 280:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> COMPLEXPAT LPAREN . bi_pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
constant -> LPAREN . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RPAREN shift to state 135
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 281
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 282

State 281:
bi_pattern -> simple_bi_pattern . [ COMMA ]
bi_pattern -> LPAREN simple_bi_pattern . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On RPAREN shift to state 143
-- On COMMA reduce production bi_pattern -> simple_bi_pattern

State 282:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern . COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On COMMA shift to state 283

State 283:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA . bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 284

State 284:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On RPAREN shift to state 285

State 285:
built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On RPAREN reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On MINUSGREATER reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On LESSMINUS reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On EQ reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On COMMA reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On COLONCOLON reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On BARBAR reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN
-- On AS reduce production built_in_constr -> COMPLEXPAT LPAREN bi_pattern COMMA bi_pattern RPAREN

State 286:
built_in_constr -> COMPLEXPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On EQ reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On COMMA reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> COMPLEXPAT bi_pattern
-- On AS reduce production built_in_constr -> COMPLEXPAT bi_pattern

State 287:
built_in_constr -> CHARPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 288

State 288:
built_in_constr -> CHARPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> CHARPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> CHARPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> CHARPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> CHARPAT bi_pattern
-- On EQ reduce production built_in_constr -> CHARPAT bi_pattern
-- On COMMA reduce production built_in_constr -> CHARPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> CHARPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> CHARPAT bi_pattern
-- On AS reduce production built_in_constr -> CHARPAT bi_pattern

State 289:
constant -> CHAR . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> CHAR . DOTDOT CHAR [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On DOTDOT shift to state 290
-- On WHEN reduce production constant -> CHAR
-- On UNDERSCORE reduce production constant -> CHAR
-- On UIDENT reduce production constant -> CHAR
-- On STRING reduce production constant -> CHAR
-- On SHARP reduce production constant -> CHAR
-- On RPAREN reduce production constant -> CHAR
-- On MINUSGREATER reduce production constant -> CHAR
-- On MINUS reduce production constant -> CHAR
-- On LVECTOR reduce production constant -> CHAR
-- On LPAREN reduce production constant -> CHAR
-- On LIDENT reduce production constant -> CHAR
-- On LESSMINUS reduce production constant -> CHAR
-- On LBRACKBAR reduce production constant -> CHAR
-- On LBRACK reduce production constant -> CHAR
-- On LBRACE reduce production constant -> CHAR
-- On INT reduce production constant -> CHAR
-- On IMAGINARY reduce production constant -> CHAR
-- On FLOAT reduce production constant -> CHAR
-- On EQ reduce production constant -> CHAR
-- On DOLLAR reduce production constant -> CHAR
-- On COMMA reduce production constant -> CHAR
-- On COLONCOLON reduce production constant -> CHAR
-- On CHAR reduce production constant -> CHAR
-- On BARBAR reduce production constant -> CHAR
-- On AS reduce production constant -> CHAR

State 290:
simple_pattern -> CHAR DOTDOT . CHAR [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On CHAR shift to state 291

State 291:
simple_pattern -> CHAR DOTDOT CHAR . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On UNDERSCORE reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On UIDENT reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On STRING reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On SHARP reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On RPAREN reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On MINUSGREATER reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On MINUS reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On LVECTOR reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On LPAREN reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On LIDENT reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On LESSMINUS reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On LBRACKBAR reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On LBRACK reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On LBRACE reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On INT reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On IMAGINARY reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On FLOAT reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On EQ reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On DOLLAR reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On COMMA reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On COLONCOLON reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On CHAR reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On BARBAR reduce production simple_pattern -> CHAR DOTDOT CHAR
-- On AS reduce production simple_pattern -> CHAR DOTDOT CHAR

State 292:
built_in_constr -> CARRAYPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> CARRAYPAT . LPAREN pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 293
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 325

State 293:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> CARRAYPAT LPAREN . pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
constant -> LPAREN . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 135
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 142
-- On signed_constant shift to state 300
-- On pattern shift to state 321
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 294:
built_in_constr -> BOXPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> BOXPAT . LPAREN pattern COMMA pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 295
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 320

State 295:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> BOXPAT LPAREN . pattern COMMA pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
constant -> LPAREN . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 135
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 142
-- On signed_constant shift to state 300
-- On pattern shift to state 316
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 296:
built_in_constr -> ARRAYPAT . bi_pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> ARRAYPAT . LPAREN pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 297
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 315

State 297:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
built_in_constr -> ARRAYPAT LPAREN . pattern COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
constant -> LPAREN . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 135
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 142
-- On signed_constant shift to state 300
-- On pattern shift to state 301
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 298:
simple_pattern -> val_ident . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production simple_pattern -> val_ident
-- On UNDERSCORE reduce production simple_pattern -> val_ident
-- On UIDENT reduce production simple_pattern -> val_ident
-- On STRING reduce production simple_pattern -> val_ident
-- On SHARP reduce production simple_pattern -> val_ident
-- On RPAREN reduce production simple_pattern -> val_ident
-- On MINUSGREATER reduce production simple_pattern -> val_ident
-- On MINUS reduce production simple_pattern -> val_ident
-- On LVECTOR reduce production simple_pattern -> val_ident
-- On LPAREN reduce production simple_pattern -> val_ident
-- On LIDENT reduce production simple_pattern -> val_ident
-- On LESSMINUS reduce production simple_pattern -> val_ident
-- On LBRACKBAR reduce production simple_pattern -> val_ident
-- On LBRACK reduce production simple_pattern -> val_ident
-- On LBRACE reduce production simple_pattern -> val_ident
-- On INT reduce production simple_pattern -> val_ident
-- On IMAGINARY reduce production simple_pattern -> val_ident
-- On FLOAT reduce production simple_pattern -> val_ident
-- On EQ reduce production simple_pattern -> val_ident
-- On DOLLAR reduce production simple_pattern -> val_ident
-- On COMMA reduce production simple_pattern -> val_ident
-- On COLONCOLON reduce production simple_pattern -> val_ident
-- On CHAR reduce production simple_pattern -> val_ident
-- On BARBAR reduce production simple_pattern -> val_ident
-- On AS reduce production simple_pattern -> val_ident

State 299:
pattern -> simple_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production pattern -> simple_pattern
-- On RPAREN reduce production pattern -> simple_pattern
-- On MINUSGREATER reduce production pattern -> simple_pattern
-- On LESSMINUS reduce production pattern -> simple_pattern
-- On EQ reduce production pattern -> simple_pattern
-- On COMMA reduce production pattern -> simple_pattern
-- On COLONCOLON reduce production pattern -> simple_pattern
-- On BARBAR reduce production pattern -> simple_pattern
-- On AS reduce production pattern -> simple_pattern

State 300:
simple_bi_pattern -> signed_constant . [ RPAREN ]
simple_pattern -> signed_constant . [ COMMA COLONCOLON BARBAR AS ]
-- On RPAREN reduce production simple_bi_pattern -> signed_constant
-- On COMMA reduce production simple_pattern -> signed_constant
-- On COLONCOLON reduce production simple_pattern -> signed_constant
-- On BARBAR reduce production simple_pattern -> signed_constant
-- On AS reduce production simple_pattern -> signed_constant

State 301:
built_in_constr -> ARRAYPAT LPAREN pattern . COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
-- On COMMA shift to state 302
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313

State 302:
built_in_constr -> ARRAYPAT LPAREN pattern COMMA . bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 303

State 303:
built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On RPAREN shift to state 304

State 304:
built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On RPAREN reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On MINUSGREATER reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On LESSMINUS reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On EQ reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On COMMA reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On COLONCOLON reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On BARBAR reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On AS reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN

State 305:
pattern -> pattern COLONCOLON . pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 307
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 306:
simple_pattern -> signed_constant . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production simple_pattern -> signed_constant
-- On UNDERSCORE reduce production simple_pattern -> signed_constant
-- On UIDENT reduce production simple_pattern -> signed_constant
-- On STRING reduce production simple_pattern -> signed_constant
-- On SHARP reduce production simple_pattern -> signed_constant
-- On RPAREN reduce production simple_pattern -> signed_constant
-- On MINUSGREATER reduce production simple_pattern -> signed_constant
-- On MINUS reduce production simple_pattern -> signed_constant
-- On LVECTOR reduce production simple_pattern -> signed_constant
-- On LPAREN reduce production simple_pattern -> signed_constant
-- On LIDENT reduce production simple_pattern -> signed_constant
-- On LESSMINUS reduce production simple_pattern -> signed_constant
-- On LBRACKBAR reduce production simple_pattern -> signed_constant
-- On LBRACK reduce production simple_pattern -> signed_constant
-- On LBRACE reduce production simple_pattern -> signed_constant
-- On INT reduce production simple_pattern -> signed_constant
-- On IMAGINARY reduce production simple_pattern -> signed_constant
-- On FLOAT reduce production simple_pattern -> signed_constant
-- On EQ reduce production simple_pattern -> signed_constant
-- On DOLLAR reduce production simple_pattern -> signed_constant
-- On COMMA reduce production simple_pattern -> signed_constant
-- On COLONCOLON reduce production simple_pattern -> signed_constant
-- On CHAR reduce production simple_pattern -> signed_constant
-- On BARBAR reduce production simple_pattern -> signed_constant
-- On AS reduce production simple_pattern -> signed_constant

State 307:
pattern -> pattern . AS LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern COLONCOLON pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On COLONCOLON shift to state 305
-- On WHEN reduce production pattern -> pattern COLONCOLON pattern
-- On RPAREN reduce production pattern -> pattern COLONCOLON pattern
-- On MINUSGREATER reduce production pattern -> pattern COLONCOLON pattern
-- On LESSMINUS reduce production pattern -> pattern COLONCOLON pattern
-- On EQ reduce production pattern -> pattern COLONCOLON pattern
-- On COMMA reduce production pattern -> pattern COLONCOLON pattern
-- On BARBAR reduce production pattern -> pattern COLONCOLON pattern
-- On AS reduce production pattern -> pattern COLONCOLON pattern

State 308:
pattern -> constr_longident . pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
simple_pattern -> constr_longident . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 309
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
-- On WHEN reduce production simple_pattern -> constr_longident
-- On RPAREN reduce production simple_pattern -> constr_longident
-- On MINUSGREATER reduce production simple_pattern -> constr_longident
-- On LESSMINUS reduce production simple_pattern -> constr_longident
-- On EQ reduce production simple_pattern -> constr_longident
-- On COMMA reduce production simple_pattern -> constr_longident
-- On COLONCOLON reduce production simple_pattern -> constr_longident
-- On BARBAR reduce production simple_pattern -> constr_longident
-- On AS reduce production simple_pattern -> constr_longident

State 309:
pattern -> constr_longident pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production pattern -> constr_longident pattern
-- On RPAREN reduce production pattern -> constr_longident pattern
-- On MINUSGREATER reduce production pattern -> constr_longident pattern
-- On LESSMINUS reduce production pattern -> constr_longident pattern
-- On EQ reduce production pattern -> constr_longident pattern
-- On COMMA reduce production pattern -> constr_longident pattern
-- On COLONCOLON reduce production pattern -> constr_longident pattern
-- On BARBAR reduce production pattern -> constr_longident pattern
-- On AS reduce production pattern -> constr_longident pattern

State 310:
pattern -> built_in_constr . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production pattern -> built_in_constr
-- On RPAREN reduce production pattern -> built_in_constr
-- On MINUSGREATER reduce production pattern -> built_in_constr
-- On LESSMINUS reduce production pattern -> built_in_constr
-- On EQ reduce production pattern -> built_in_constr
-- On COMMA reduce production pattern -> built_in_constr
-- On COLONCOLON reduce production pattern -> built_in_constr
-- On BARBAR reduce production pattern -> built_in_constr
-- On AS reduce production pattern -> built_in_constr

State 311:
pattern -> pattern BARBAR . pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 312
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 312:
pattern -> pattern . AS LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern BARBAR pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On WHEN reduce production pattern -> pattern BARBAR pattern
-- On RPAREN reduce production pattern -> pattern BARBAR pattern
-- On MINUSGREATER reduce production pattern -> pattern BARBAR pattern
-- On LESSMINUS reduce production pattern -> pattern BARBAR pattern
-- On EQ reduce production pattern -> pattern BARBAR pattern
-- On COMMA reduce production pattern -> pattern BARBAR pattern
-- On AS reduce production pattern -> pattern BARBAR pattern

State 313:
pattern -> pattern AS . LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On LIDENT shift to state 314

State 314:
pattern -> pattern AS LIDENT . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production pattern -> pattern AS LIDENT
-- On RPAREN reduce production pattern -> pattern AS LIDENT
-- On MINUSGREATER reduce production pattern -> pattern AS LIDENT
-- On LESSMINUS reduce production pattern -> pattern AS LIDENT
-- On EQ reduce production pattern -> pattern AS LIDENT
-- On COMMA reduce production pattern -> pattern AS LIDENT
-- On COLONCOLON reduce production pattern -> pattern AS LIDENT
-- On BARBAR reduce production pattern -> pattern AS LIDENT
-- On AS reduce production pattern -> pattern AS LIDENT

State 315:
built_in_constr -> ARRAYPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On EQ reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On COMMA reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On AS reduce production built_in_constr -> ARRAYPAT bi_pattern

State 316:
built_in_constr -> BOXPAT LPAREN pattern . COMMA pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
-- On COMMA shift to state 317
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313

State 317:
built_in_constr -> BOXPAT LPAREN pattern COMMA . pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 318
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 318:
built_in_constr -> BOXPAT LPAREN pattern COMMA pattern . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ RPAREN COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ RPAREN COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ RPAREN COLONCOLON BARBAR AS ]
-- On RPAREN shift to state 319
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313

State 319:
built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On RPAREN reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On MINUSGREATER reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On LESSMINUS reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On EQ reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On COMMA reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On COLONCOLON reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On BARBAR reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On AS reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN

State 320:
built_in_constr -> BOXPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> BOXPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> BOXPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> BOXPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> BOXPAT bi_pattern
-- On EQ reduce production built_in_constr -> BOXPAT bi_pattern
-- On COMMA reduce production built_in_constr -> BOXPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> BOXPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> BOXPAT bi_pattern
-- On AS reduce production built_in_constr -> BOXPAT bi_pattern

State 321:
built_in_constr -> CARRAYPAT LPAREN pattern . COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
-- On COMMA shift to state 322
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313

State 322:
built_in_constr -> CARRAYPAT LPAREN pattern COMMA . bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 323

State 323:
built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On RPAREN shift to state 324

State 324:
built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On RPAREN reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On MINUSGREATER reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On LESSMINUS reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On EQ reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On COMMA reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On COLONCOLON reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On BARBAR reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On AS reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN

State 325:
built_in_constr -> CARRAYPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On EQ reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On COMMA reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On AS reduce production built_in_constr -> CARRAYPAT bi_pattern

State 326:
built_in_constr -> FARRAYPAT LPAREN pattern . COMMA bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
-- On COMMA shift to state 327
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313

State 327:
built_in_constr -> FARRAYPAT LPAREN pattern COMMA . bi_pattern RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 328

State 328:
built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern . RPAREN [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On RPAREN shift to state 329

State 329:
built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On RPAREN reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On MINUSGREATER reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On LESSMINUS reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On EQ reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On COMMA reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On COLONCOLON reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On BARBAR reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On AS reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN

State 330:
built_in_constr -> FARRAYPAT bi_pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On WHEN reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On MINUSGREATER reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On LESSMINUS reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On EQ reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On COMMA reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On AS reduce production built_in_constr -> FARRAYPAT bi_pattern

State 331:
built_in_constr -> BOXPAT LPAREN pattern . COMMA pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
-- On COMMA shift to state 332
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313

State 332:
built_in_constr -> BOXPAT LPAREN pattern COMMA . pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 333
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 333:
built_in_constr -> BOXPAT LPAREN pattern COMMA pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ RPAREN COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ RPAREN COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ RPAREN COLONCOLON BARBAR AS ]
-- On RPAREN shift to state 334
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313

State 334:
built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On RPAREN reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On RBRACK reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On RBRACE reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On COMMA reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On COLONCOLON reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On BARBAR reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On BAR reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN
-- On AS reduce production built_in_constr -> BOXPAT LPAREN pattern COMMA pattern RPAREN

State 335:
built_in_constr -> BOXPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> BOXPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> BOXPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> BOXPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> BOXPAT bi_pattern
-- On COMMA reduce production built_in_constr -> BOXPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> BOXPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> BOXPAT bi_pattern
-- On BAR reduce production built_in_constr -> BOXPAT bi_pattern
-- On AS reduce production built_in_constr -> BOXPAT bi_pattern

State 336:
built_in_constr -> ARRAYPAT . bi_pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> ARRAYPAT . LPAREN pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 170
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On MINUS shift to state 171
-- On LVECTOR shift to state 174
-- On LPAREN shift to state 337
-- On LIDENT shift to state 178
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 181
-- On LBRACE shift to state 182
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On simple_bi_pattern shift to state 183
-- On signed_constant shift to state 184
-- On constant shift to state 185
-- On bi_pattern shift to state 342

State 337:
bi_pattern -> LPAREN . simple_bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
built_in_constr -> ARRAYPAT LPAREN . pattern COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
constant -> LPAREN . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 234
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RPAREN shift to state 81
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 261
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On simple_bi_pattern shift to state 176
-- On signed_constant shift to state 300
-- On pattern shift to state 338
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 338:
built_in_constr -> ARRAYPAT LPAREN pattern . COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
-- On COMMA shift to state 339
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313

State 339:
built_in_constr -> ARRAYPAT LPAREN pattern COMMA . bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 340

State 340:
built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On RPAREN shift to state 341

State 341:
built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On RPAREN reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On RBRACK reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On RBRACE reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On COMMA reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On COLONCOLON reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On BARBAR reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On BAR reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On AS reduce production built_in_constr -> ARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN

State 342:
built_in_constr -> ARRAYPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On COMMA reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On BAR reduce production built_in_constr -> ARRAYPAT bi_pattern
-- On AS reduce production built_in_constr -> ARRAYPAT bi_pattern

State 343:
pattern_comma_list_element -> AMPERREST . LIDENT [ error RPAREN RBRACK COMMA BAR ]
-- On LIDENT shift to state 344

State 344:
pattern_comma_list_element -> AMPERREST LIDENT . [ error RPAREN RBRACK COMMA BAR ]
-- On error reduce production pattern_comma_list_element -> AMPERREST LIDENT
-- On RPAREN reduce production pattern_comma_list_element -> AMPERREST LIDENT
-- On RBRACK reduce production pattern_comma_list_element -> AMPERREST LIDENT
-- On COMMA reduce production pattern_comma_list_element -> AMPERREST LIDENT
-- On BAR reduce production pattern_comma_list_element -> AMPERREST LIDENT

State 345:
simple_pattern -> val_ident . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_pattern -> val_ident
-- On RPAREN reduce production simple_pattern -> val_ident
-- On RBRACK reduce production simple_pattern -> val_ident
-- On RBRACE reduce production simple_pattern -> val_ident
-- On COMMA reduce production simple_pattern -> val_ident
-- On COLONCOLON reduce production simple_pattern -> val_ident
-- On BARBAR reduce production simple_pattern -> val_ident
-- On BAR reduce production simple_pattern -> val_ident
-- On AS reduce production simple_pattern -> val_ident

State 346:
pattern -> simple_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production pattern -> simple_pattern
-- On RPAREN reduce production pattern -> simple_pattern
-- On RBRACK reduce production pattern -> simple_pattern
-- On RBRACE reduce production pattern -> simple_pattern
-- On COMMA reduce production pattern -> simple_pattern
-- On COLONCOLON reduce production pattern -> simple_pattern
-- On BARBAR reduce production pattern -> simple_pattern
-- On BAR reduce production pattern -> simple_pattern
-- On AS reduce production pattern -> simple_pattern

State 347:
simple_pattern -> signed_constant . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_pattern -> signed_constant
-- On RPAREN reduce production simple_pattern -> signed_constant
-- On RBRACK reduce production simple_pattern -> signed_constant
-- On RBRACE reduce production simple_pattern -> signed_constant
-- On COMMA reduce production simple_pattern -> signed_constant
-- On COLONCOLON reduce production simple_pattern -> signed_constant
-- On BARBAR reduce production simple_pattern -> signed_constant
-- On BAR reduce production simple_pattern -> signed_constant
-- On AS reduce production simple_pattern -> signed_constant

State 348:
pattern_comma_list -> pattern_comma_list_element . [ error RPAREN RBRACK COMMA BAR ]
-- On error reduce production pattern_comma_list -> pattern_comma_list_element
-- On RPAREN reduce production pattern_comma_list -> pattern_comma_list_element
-- On RBRACK reduce production pattern_comma_list -> pattern_comma_list_element
-- On COMMA reduce production pattern_comma_list -> pattern_comma_list_element
-- On BAR reduce production pattern_comma_list -> pattern_comma_list_element

State 349:
list_pattern -> pattern_comma_list . COMMA DOTDOTDOT AS LIDENT [ error RBRACK ]
list_pattern -> pattern_comma_list . COMMA DOTDOTDOT [ error RBRACK ]
list_pattern -> pattern_comma_list . BAR pattern [ error RBRACK ]
list_pattern -> pattern_comma_list . opt_comma [ error RBRACK ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ error RBRACK COMMA BAR ]
-- On COMMA shift to state 350
-- On BAR shift to state 365
-- On opt_comma shift to state 367
-- On error reduce production opt_comma ->
-- On RBRACK reduce production opt_comma ->

State 350:
list_pattern -> pattern_comma_list COMMA . DOTDOTDOT AS LIDENT [ error RBRACK ]
list_pattern -> pattern_comma_list COMMA . DOTDOTDOT [ error RBRACK ]
opt_comma -> COMMA . [ error RBRACK ]
pattern_comma_list -> pattern_comma_list COMMA . pattern_comma_list_element [ error RBRACK COMMA BAR ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOTDOTDOT shift to state 351
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 354
-- On pattern shift to state 355
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
-- On error reduce production opt_comma -> COMMA
-- On RBRACK reduce production opt_comma -> COMMA

State 351:
list_pattern -> pattern_comma_list COMMA DOTDOTDOT . AS LIDENT [ error RPAREN RBRACK ]
list_pattern -> pattern_comma_list COMMA DOTDOTDOT . [ error RPAREN RBRACK ]
-- On AS shift to state 352
-- On error reduce production list_pattern -> pattern_comma_list COMMA DOTDOTDOT
-- On RPAREN reduce production list_pattern -> pattern_comma_list COMMA DOTDOTDOT
-- On RBRACK reduce production list_pattern -> pattern_comma_list COMMA DOTDOTDOT

State 352:
list_pattern -> pattern_comma_list COMMA DOTDOTDOT AS . LIDENT [ error RPAREN RBRACK ]
-- On LIDENT shift to state 353

State 353:
list_pattern -> pattern_comma_list COMMA DOTDOTDOT AS LIDENT . [ error RPAREN RBRACK ]
-- On error reduce production list_pattern -> pattern_comma_list COMMA DOTDOTDOT AS LIDENT
-- On RPAREN reduce production list_pattern -> pattern_comma_list COMMA DOTDOTDOT AS LIDENT
-- On RBRACK reduce production list_pattern -> pattern_comma_list COMMA DOTDOTDOT AS LIDENT

State 354:
pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element . [ error RPAREN RBRACK COMMA BAR ]
-- On error reduce production pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element
-- On RPAREN reduce production pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element
-- On RBRACK reduce production pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element
-- On COMMA reduce production pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element
-- On BAR reduce production pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element

State 355:
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK COMMA COLONCOLON BARBAR BAR AS ]
pattern_comma_list_element -> pattern . [ error RPAREN RBRACK COMMA BAR ]
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On AS shift to state 363
-- On error reduce production pattern_comma_list_element -> pattern
-- On RPAREN reduce production pattern_comma_list_element -> pattern
-- On RBRACK reduce production pattern_comma_list_element -> pattern
-- On COMMA reduce production pattern_comma_list_element -> pattern
-- On BAR reduce production pattern_comma_list_element -> pattern

State 356:
pattern -> pattern COLONCOLON . pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 357
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360

State 357:
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern COLONCOLON pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On COLONCOLON shift to state 356
-- On error reduce production pattern -> pattern COLONCOLON pattern
-- On RPAREN reduce production pattern -> pattern COLONCOLON pattern
-- On RBRACK reduce production pattern -> pattern COLONCOLON pattern
-- On RBRACE reduce production pattern -> pattern COLONCOLON pattern
-- On COMMA reduce production pattern -> pattern COLONCOLON pattern
-- On BARBAR reduce production pattern -> pattern COLONCOLON pattern
-- On BAR reduce production pattern -> pattern COLONCOLON pattern
-- On AS reduce production pattern -> pattern COLONCOLON pattern

State 358:
pattern -> constr_longident . pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> constr_longident . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 359
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
-- On error reduce production simple_pattern -> constr_longident
-- On RPAREN reduce production simple_pattern -> constr_longident
-- On RBRACK reduce production simple_pattern -> constr_longident
-- On RBRACE reduce production simple_pattern -> constr_longident
-- On COMMA reduce production simple_pattern -> constr_longident
-- On COLONCOLON reduce production simple_pattern -> constr_longident
-- On BARBAR reduce production simple_pattern -> constr_longident
-- On BAR reduce production simple_pattern -> constr_longident
-- On AS reduce production simple_pattern -> constr_longident

State 359:
pattern -> constr_longident pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production pattern -> constr_longident pattern
-- On RPAREN reduce production pattern -> constr_longident pattern
-- On RBRACK reduce production pattern -> constr_longident pattern
-- On RBRACE reduce production pattern -> constr_longident pattern
-- On COMMA reduce production pattern -> constr_longident pattern
-- On COLONCOLON reduce production pattern -> constr_longident pattern
-- On BARBAR reduce production pattern -> constr_longident pattern
-- On BAR reduce production pattern -> constr_longident pattern
-- On AS reduce production pattern -> constr_longident pattern

State 360:
pattern -> built_in_constr . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production pattern -> built_in_constr
-- On RPAREN reduce production pattern -> built_in_constr
-- On RBRACK reduce production pattern -> built_in_constr
-- On RBRACE reduce production pattern -> built_in_constr
-- On COMMA reduce production pattern -> built_in_constr
-- On COLONCOLON reduce production pattern -> built_in_constr
-- On BARBAR reduce production pattern -> built_in_constr
-- On BAR reduce production pattern -> built_in_constr
-- On AS reduce production pattern -> built_in_constr

State 361:
pattern -> pattern BARBAR . pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 362
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360

State 362:
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern BARBAR pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On error reduce production pattern -> pattern BARBAR pattern
-- On RPAREN reduce production pattern -> pattern BARBAR pattern
-- On RBRACK reduce production pattern -> pattern BARBAR pattern
-- On RBRACE reduce production pattern -> pattern BARBAR pattern
-- On COMMA reduce production pattern -> pattern BARBAR pattern
-- On BAR reduce production pattern -> pattern BARBAR pattern
-- On AS reduce production pattern -> pattern BARBAR pattern

State 363:
pattern -> pattern AS . LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On LIDENT shift to state 364

State 364:
pattern -> pattern AS LIDENT . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production pattern -> pattern AS LIDENT
-- On RPAREN reduce production pattern -> pattern AS LIDENT
-- On RBRACK reduce production pattern -> pattern AS LIDENT
-- On RBRACE reduce production pattern -> pattern AS LIDENT
-- On COMMA reduce production pattern -> pattern AS LIDENT
-- On COLONCOLON reduce production pattern -> pattern AS LIDENT
-- On BARBAR reduce production pattern -> pattern AS LIDENT
-- On BAR reduce production pattern -> pattern AS LIDENT
-- On AS reduce production pattern -> pattern AS LIDENT

State 365:
list_pattern -> pattern_comma_list BAR . pattern [ error RPAREN RBRACK ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern shift to state 366
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360

State 366:
list_pattern -> pattern_comma_list BAR pattern . [ error RPAREN RBRACK ]
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK COLONCOLON BARBAR AS ]
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On AS shift to state 363
-- On error reduce production list_pattern -> pattern_comma_list BAR pattern
-- On RPAREN reduce production list_pattern -> pattern_comma_list BAR pattern
-- On RBRACK reduce production list_pattern -> pattern_comma_list BAR pattern

State 367:
list_pattern -> pattern_comma_list opt_comma . [ error RPAREN RBRACK ]
-- On error reduce production list_pattern -> pattern_comma_list opt_comma
-- On RPAREN reduce production list_pattern -> pattern_comma_list opt_comma
-- On RBRACK reduce production list_pattern -> pattern_comma_list opt_comma

State 368:
simple_pattern -> LBRACK list_pattern . RBRACK [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LBRACK list_pattern . error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On error shift to state 369
-- On RBRACK shift to state 370

State 369:
simple_pattern -> LBRACK list_pattern error . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production simple_pattern -> LBRACK list_pattern error
-- On UNDERSCORE reduce production simple_pattern -> LBRACK list_pattern error
-- On UIDENT reduce production simple_pattern -> LBRACK list_pattern error
-- On STRING reduce production simple_pattern -> LBRACK list_pattern error
-- On SHARP reduce production simple_pattern -> LBRACK list_pattern error
-- On RPAREN reduce production simple_pattern -> LBRACK list_pattern error
-- On MINUSGREATER reduce production simple_pattern -> LBRACK list_pattern error
-- On MINUS reduce production simple_pattern -> LBRACK list_pattern error
-- On LVECTOR reduce production simple_pattern -> LBRACK list_pattern error
-- On LPAREN reduce production simple_pattern -> LBRACK list_pattern error
-- On LIDENT reduce production simple_pattern -> LBRACK list_pattern error
-- On LESSMINUS reduce production simple_pattern -> LBRACK list_pattern error
-- On LBRACKBAR reduce production simple_pattern -> LBRACK list_pattern error
-- On LBRACK reduce production simple_pattern -> LBRACK list_pattern error
-- On LBRACE reduce production simple_pattern -> LBRACK list_pattern error
-- On INT reduce production simple_pattern -> LBRACK list_pattern error
-- On IMAGINARY reduce production simple_pattern -> LBRACK list_pattern error
-- On FLOAT reduce production simple_pattern -> LBRACK list_pattern error
-- On EQ reduce production simple_pattern -> LBRACK list_pattern error
-- On DOLLAR reduce production simple_pattern -> LBRACK list_pattern error
-- On COMMA reduce production simple_pattern -> LBRACK list_pattern error
-- On COLONCOLON reduce production simple_pattern -> LBRACK list_pattern error
-- On CHAR reduce production simple_pattern -> LBRACK list_pattern error
-- On BARBAR reduce production simple_pattern -> LBRACK list_pattern error
-- On AS reduce production simple_pattern -> LBRACK list_pattern error

State 370:
simple_pattern -> LBRACK list_pattern RBRACK . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On UNDERSCORE reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On UIDENT reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On STRING reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On SHARP reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On RPAREN reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On MINUSGREATER reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On MINUS reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On LVECTOR reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On LPAREN reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On LIDENT reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On LESSMINUS reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On LBRACKBAR reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On LBRACK reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On LBRACE reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On INT reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On IMAGINARY reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On FLOAT reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On EQ reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On DOLLAR reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On COMMA reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On COLONCOLON reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On CHAR reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On BARBAR reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On AS reduce production simple_pattern -> LBRACK list_pattern RBRACK

State 371:
built_in_constr -> LISTPAT pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
-- On WHEN reduce production built_in_constr -> LISTPAT pattern
-- On RPAREN reduce production built_in_constr -> LISTPAT pattern
-- On MINUSGREATER reduce production built_in_constr -> LISTPAT pattern
-- On LESSMINUS reduce production built_in_constr -> LISTPAT pattern
-- On EQ reduce production built_in_constr -> LISTPAT pattern
-- On COMMA reduce production built_in_constr -> LISTPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 372:
built_in_constr -> CARRAYPAT LPAREN pattern . COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
-- On COMMA shift to state 373
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313

State 373:
built_in_constr -> CARRAYPAT LPAREN pattern COMMA . bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 374

State 374:
built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On RPAREN shift to state 375

State 375:
built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On RPAREN reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On RBRACK reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On RBRACE reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On COMMA reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On COLONCOLON reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On BARBAR reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On BAR reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On AS reduce production built_in_constr -> CARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN

State 376:
built_in_constr -> CARRAYPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On COMMA reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On BAR reduce production built_in_constr -> CARRAYPAT bi_pattern
-- On AS reduce production built_in_constr -> CARRAYPAT bi_pattern

State 377:
param_tail -> AMPEROPT . option_pattern_list [ RPAREN ]
param_tail -> AMPEROPT . option_pattern_list COMMA AMPERKEY key_pattern [ RPAREN ]
-- On LIDENT shift to state 378
-- On AMPERREST shift to state 643
-- On option_pattern_list_element shift to state 645
-- On option_pattern_list shift to state 646

State 378:
option_pattern_list_element -> LIDENT . [ RPAREN COMMA ]
option_pattern_list_element -> LIDENT . EQ value_expr [ RPAREN COMMA ]
-- On EQ shift to state 379
-- On RPAREN reduce production option_pattern_list_element -> LIDENT
-- On COMMA reduce production option_pattern_list_element -> LIDENT

State 379:
option_pattern_list_element -> LIDENT EQ . value_expr [ RPAREN COMMA ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 641
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 642
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 380:
value_expr -> LAZY . simple_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On UIDENT shift to state 3
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 383
-- On constr_longident shift to state 414
-- On constant shift to state 415

State 381:
simple_expr -> val_longident . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> val_longident
-- On WHILE reduce production simple_expr -> val_longident
-- On WHERE reduce production simple_expr -> val_longident
-- On UIDENT reduce production simple_expr -> val_longident
-- On TYPE reduce production simple_expr -> val_longident
-- On TRY reduce production simple_expr -> val_longident
-- On TO reduce production simple_expr -> val_longident
-- On THEN reduce production simple_expr -> val_longident
-- On STRING reduce production simple_expr -> val_longident
-- On STAR reduce production simple_expr -> val_longident
-- On SHARP reduce production simple_expr -> val_longident
-- On SEMISEMI reduce production simple_expr -> val_longident
-- On SEMI reduce production simple_expr -> val_longident
-- On RPAREN reduce production simple_expr -> val_longident
-- On RAISE reduce production simple_expr -> val_longident
-- On QUESTION reduce production simple_expr -> val_longident
-- On PREFIXOP reduce production simple_expr -> val_longident
-- On PLUS reduce production simple_expr -> val_longident
-- On OPEN reduce production simple_expr -> val_longident
-- On MODULE reduce production simple_expr -> val_longident
-- On MINUSGREATER reduce production simple_expr -> val_longident
-- On MINUS reduce production simple_expr -> val_longident
-- On MATCH reduce production simple_expr -> val_longident
-- On LVECTOR reduce production simple_expr -> val_longident
-- On LPAREN reduce production simple_expr -> val_longident
-- On LMATRIX reduce production simple_expr -> val_longident
-- On LIDENT reduce production simple_expr -> val_longident
-- On LET reduce production simple_expr -> val_longident
-- On LBRACKBAR reduce production simple_expr -> val_longident
-- On LBRACK reduce production simple_expr -> val_longident
-- On LBRACE reduce production simple_expr -> val_longident
-- On LAZY reduce production simple_expr -> val_longident
-- On INT reduce production simple_expr -> val_longident
-- On INFIXOP5R reduce production simple_expr -> val_longident
-- On INFIXOP5L reduce production simple_expr -> val_longident
-- On INFIXOP4R reduce production simple_expr -> val_longident
-- On INFIXOP4L reduce production simple_expr -> val_longident
-- On INFIXOP3R reduce production simple_expr -> val_longident
-- On INFIXOP3L reduce production simple_expr -> val_longident
-- On INFIXOP2R reduce production simple_expr -> val_longident
-- On INFIXOP2L reduce production simple_expr -> val_longident
-- On INFIXOP1R reduce production simple_expr -> val_longident
-- On INFIXOP1L reduce production simple_expr -> val_longident
-- On IN reduce production simple_expr -> val_longident
-- On IMAGINARY reduce production simple_expr -> val_longident
-- On IF reduce production simple_expr -> val_longident
-- On FUNCTION reduce production simple_expr -> val_longident
-- On FUN reduce production simple_expr -> val_longident
-- On FOR reduce production simple_expr -> val_longident
-- On FLOAT reduce production simple_expr -> val_longident
-- On EXCEPTION reduce production simple_expr -> val_longident
-- On EQ reduce production simple_expr -> val_longident
-- On EOF reduce production simple_expr -> val_longident
-- On ELSE reduce production simple_expr -> val_longident
-- On DOWNTO reduce production simple_expr -> val_longident
-- On DOT reduce production simple_expr -> val_longident
-- On DONE reduce production simple_expr -> val_longident
-- On DOLLAR reduce production simple_expr -> val_longident
-- On DO reduce production simple_expr -> val_longident
-- On COMMA reduce production simple_expr -> val_longident
-- On COLONEQUAL reduce production simple_expr -> val_longident
-- On COLONCOLON reduce production simple_expr -> val_longident
-- On COLON reduce production simple_expr -> val_longident
-- On CHAR reduce production simple_expr -> val_longident
-- On CASE reduce production simple_expr -> val_longident
-- On BELOW reduce production simple_expr -> val_longident
-- On BEGIN reduce production simple_expr -> val_longident
-- On BARBAR reduce production simple_expr -> val_longident
-- On BAR reduce production simple_expr -> val_longident
-- On ASSERT reduce production simple_expr -> val_longident
-- On AND reduce production simple_expr -> val_longident
-- On AMPERAMPER reduce production simple_expr -> val_longident
-- On ABOVE reduce production simple_expr -> val_longident

State 382:
val_longident -> val_ident . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production val_longident -> val_ident
-- On WHILE reduce production val_longident -> val_ident
-- On WHERE reduce production val_longident -> val_ident
-- On UIDENT reduce production val_longident -> val_ident
-- On TYPE reduce production val_longident -> val_ident
-- On TRY reduce production val_longident -> val_ident
-- On TO reduce production val_longident -> val_ident
-- On THEN reduce production val_longident -> val_ident
-- On STRING reduce production val_longident -> val_ident
-- On STAR reduce production val_longident -> val_ident
-- On SHARP reduce production val_longident -> val_ident
-- On SEMISEMI reduce production val_longident -> val_ident
-- On SEMI reduce production val_longident -> val_ident
-- On RPAREN reduce production val_longident -> val_ident
-- On RAISE reduce production val_longident -> val_ident
-- On QUESTION reduce production val_longident -> val_ident
-- On PREFIXOP reduce production val_longident -> val_ident
-- On PLUS reduce production val_longident -> val_ident
-- On OPEN reduce production val_longident -> val_ident
-- On MODULE reduce production val_longident -> val_ident
-- On MINUSGREATER reduce production val_longident -> val_ident
-- On MINUS reduce production val_longident -> val_ident
-- On MATCH reduce production val_longident -> val_ident
-- On LVECTOR reduce production val_longident -> val_ident
-- On LPAREN reduce production val_longident -> val_ident
-- On LMATRIX reduce production val_longident -> val_ident
-- On LIDENT reduce production val_longident -> val_ident
-- On LET reduce production val_longident -> val_ident
-- On LBRACKBAR reduce production val_longident -> val_ident
-- On LBRACK reduce production val_longident -> val_ident
-- On LBRACE reduce production val_longident -> val_ident
-- On LAZY reduce production val_longident -> val_ident
-- On INT reduce production val_longident -> val_ident
-- On INFIXOP5R reduce production val_longident -> val_ident
-- On INFIXOP5L reduce production val_longident -> val_ident
-- On INFIXOP4R reduce production val_longident -> val_ident
-- On INFIXOP4L reduce production val_longident -> val_ident
-- On INFIXOP3R reduce production val_longident -> val_ident
-- On INFIXOP3L reduce production val_longident -> val_ident
-- On INFIXOP2R reduce production val_longident -> val_ident
-- On INFIXOP2L reduce production val_longident -> val_ident
-- On INFIXOP1R reduce production val_longident -> val_ident
-- On INFIXOP1L reduce production val_longident -> val_ident
-- On IN reduce production val_longident -> val_ident
-- On IMAGINARY reduce production val_longident -> val_ident
-- On IF reduce production val_longident -> val_ident
-- On FUNCTION reduce production val_longident -> val_ident
-- On FUN reduce production val_longident -> val_ident
-- On FOR reduce production val_longident -> val_ident
-- On FLOAT reduce production val_longident -> val_ident
-- On EXCEPTION reduce production val_longident -> val_ident
-- On EQ reduce production val_longident -> val_ident
-- On EOF reduce production val_longident -> val_ident
-- On ELSE reduce production val_longident -> val_ident
-- On DOWNTO reduce production val_longident -> val_ident
-- On DOT reduce production val_longident -> val_ident
-- On DONE reduce production val_longident -> val_ident
-- On DOLLAR reduce production val_longident -> val_ident
-- On DO reduce production val_longident -> val_ident
-- On COMMA reduce production val_longident -> val_ident
-- On COLONEQUAL reduce production val_longident -> val_ident
-- On COLONCOLON reduce production val_longident -> val_ident
-- On COLON reduce production val_longident -> val_ident
-- On CHAR reduce production val_longident -> val_ident
-- On CASE reduce production val_longident -> val_ident
-- On BELOW reduce production val_longident -> val_ident
-- On BEGIN reduce production val_longident -> val_ident
-- On BARBAR reduce production val_longident -> val_ident
-- On BAR reduce production val_longident -> val_ident
-- On ASSERT reduce production val_longident -> val_ident
-- On AND reduce production val_longident -> val_ident
-- On AMPERAMPER reduce production val_longident -> val_ident
-- On ABOVE reduce production val_longident -> val_ident

State 383:
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> LAZY simple_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On DOT shift to state 384
-- On WITH reduce production value_expr -> LAZY simple_expr
-- On WHILE reduce production value_expr -> LAZY simple_expr
-- On WHERE reduce production value_expr -> LAZY simple_expr
-- On UIDENT reduce production value_expr -> LAZY simple_expr
-- On TYPE reduce production value_expr -> LAZY simple_expr
-- On TRY reduce production value_expr -> LAZY simple_expr
-- On TO reduce production value_expr -> LAZY simple_expr
-- On THEN reduce production value_expr -> LAZY simple_expr
-- On STRING reduce production value_expr -> LAZY simple_expr
-- On STAR reduce production value_expr -> LAZY simple_expr
-- On SHARP reduce production value_expr -> LAZY simple_expr
-- On SEMISEMI reduce production value_expr -> LAZY simple_expr
-- On SEMI reduce production value_expr -> LAZY simple_expr
-- On RPAREN reduce production value_expr -> LAZY simple_expr
-- On RAISE reduce production value_expr -> LAZY simple_expr
-- On QUESTION reduce production value_expr -> LAZY simple_expr
-- On PREFIXOP reduce production value_expr -> LAZY simple_expr
-- On PLUS reduce production value_expr -> LAZY simple_expr
-- On OPEN reduce production value_expr -> LAZY simple_expr
-- On MODULE reduce production value_expr -> LAZY simple_expr
-- On MINUSGREATER reduce production value_expr -> LAZY simple_expr
-- On MINUS reduce production value_expr -> LAZY simple_expr
-- On MATCH reduce production value_expr -> LAZY simple_expr
-- On LVECTOR reduce production value_expr -> LAZY simple_expr
-- On LPAREN reduce production value_expr -> LAZY simple_expr
-- On LMATRIX reduce production value_expr -> LAZY simple_expr
-- On LIDENT reduce production value_expr -> LAZY simple_expr
-- On LET reduce production value_expr -> LAZY simple_expr
-- On LBRACKBAR reduce production value_expr -> LAZY simple_expr
-- On LBRACK reduce production value_expr -> LAZY simple_expr
-- On LBRACE reduce production value_expr -> LAZY simple_expr
-- On LAZY reduce production value_expr -> LAZY simple_expr
-- On INT reduce production value_expr -> LAZY simple_expr
-- On INFIXOP5R reduce production value_expr -> LAZY simple_expr
-- On INFIXOP5L reduce production value_expr -> LAZY simple_expr
-- On INFIXOP4R reduce production value_expr -> LAZY simple_expr
-- On INFIXOP4L reduce production value_expr -> LAZY simple_expr
-- On INFIXOP3R reduce production value_expr -> LAZY simple_expr
-- On INFIXOP3L reduce production value_expr -> LAZY simple_expr
-- On INFIXOP2R reduce production value_expr -> LAZY simple_expr
-- On INFIXOP2L reduce production value_expr -> LAZY simple_expr
-- On INFIXOP1R reduce production value_expr -> LAZY simple_expr
-- On INFIXOP1L reduce production value_expr -> LAZY simple_expr
-- On IN reduce production value_expr -> LAZY simple_expr
-- On IMAGINARY reduce production value_expr -> LAZY simple_expr
-- On IF reduce production value_expr -> LAZY simple_expr
-- On FUNCTION reduce production value_expr -> LAZY simple_expr
-- On FUN reduce production value_expr -> LAZY simple_expr
-- On FOR reduce production value_expr -> LAZY simple_expr
-- On FLOAT reduce production value_expr -> LAZY simple_expr
-- On EXCEPTION reduce production value_expr -> LAZY simple_expr
-- On EQ reduce production value_expr -> LAZY simple_expr
-- On EOF reduce production value_expr -> LAZY simple_expr
-- On ELSE reduce production value_expr -> LAZY simple_expr
-- On DOWNTO reduce production value_expr -> LAZY simple_expr
-- On DONE reduce production value_expr -> LAZY simple_expr
-- On DOLLAR reduce production value_expr -> LAZY simple_expr
-- On DO reduce production value_expr -> LAZY simple_expr
-- On COMMA reduce production value_expr -> LAZY simple_expr
-- On COLONEQUAL reduce production value_expr -> LAZY simple_expr
-- On COLONCOLON reduce production value_expr -> LAZY simple_expr
-- On COLON reduce production value_expr -> LAZY simple_expr
-- On CHAR reduce production value_expr -> LAZY simple_expr
-- On CASE reduce production value_expr -> LAZY simple_expr
-- On BELOW reduce production value_expr -> LAZY simple_expr
-- On BEGIN reduce production value_expr -> LAZY simple_expr
-- On BARBAR reduce production value_expr -> LAZY simple_expr
-- On BAR reduce production value_expr -> LAZY simple_expr
-- On ASSERT reduce production value_expr -> LAZY simple_expr
-- On AND reduce production value_expr -> LAZY simple_expr
-- On AMPERAMPER reduce production value_expr -> LAZY simple_expr
-- On ABOVE reduce production value_expr -> LAZY simple_expr

State 384:
simple_expr -> simple_expr DOT . label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT . LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT . LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On UIDENT shift to state 213
-- On LIDENT shift to state 216
-- On LBRACK shift to state 385
-- On label_longident shift to state 640

State 385:
simple_expr -> simple_expr DOT LBRACK . index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT LBRACK . index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 386
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOTDOT shift to state 482
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On index_list shift to state 638
-- On index shift to state 561
-- On expr shift to state 555
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 386:
index -> STAR . [ error RBRACK COMMA ]
-- On error reduce production index -> STAR
-- On RBRACK reduce production index -> STAR
-- On COMMA reduce production index -> STAR

State 387:
value_expr -> FUN . simple_pattern fun_def [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 388
-- On signed_constant shift to state 306
-- On constr_longident shift to state 609
-- On constant shift to state 145

State 388:
value_expr -> FUN simple_pattern . fun_def [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHEN shift to state 389
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUSGREATER shift to state 632
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 634
-- On signed_constant shift to state 306
-- On match_action shift to state 635
-- On fun_def shift to state 637
-- On constr_longident shift to state 609
-- On constant shift to state 145

State 389:
match_action -> WHEN . expr MINUSGREATER seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 625
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 390:
value_expr -> IF . expr THEN expr ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> IF . expr THEN expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 620
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 391:
value_expr -> FUNCTION . opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On BAR shift to state 125
-- On opt_bar shift to state 392
-- On WEAKARRAYPAT reduce production opt_bar ->
-- On VECTORPAT reduce production opt_bar ->
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TUPLEPAT reduce production opt_bar ->
-- On SYMBOLPAT reduce production opt_bar ->
-- On STRINGPAT reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On STACKPAT reduce production opt_bar ->
-- On SHARP reduce production opt_bar ->
-- On RECORDPAT reduce production opt_bar ->
-- On REALPAT reduce production opt_bar ->
-- On QUEUEPAT reduce production opt_bar ->
-- On OUT_CHANNELPAT reduce production opt_bar ->
-- On NUMBERPAT reduce production opt_bar ->
-- On MINUS reduce production opt_bar ->
-- On LVECTOR reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LISTPAT reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LBRACKBAR reduce production opt_bar ->
-- On LBRACK reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On IN_CHANNELPAT reduce production opt_bar ->
-- On INTPAT reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On IMAGINARY reduce production opt_bar ->
-- On HASHTABLEPAT reduce production opt_bar ->
-- On FLOATPAT reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On FARRAYPAT reduce production opt_bar ->
-- On DOLLAR reduce production opt_bar ->
-- On DIR_HANDLEPAT reduce production opt_bar ->
-- On COMPLEXPAT reduce production opt_bar ->
-- On CHARPAT reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->
-- On CARRAYPAT reduce production opt_bar ->
-- On BOXPAT reduce production opt_bar ->
-- On ARRAYPAT reduce production opt_bar ->
-- On AMPERREST reduce production opt_bar ->

State 392:
value_expr -> FUNCTION opt_bar . match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 396
-- On pattern shift to state 399
-- On match_cases shift to state 615
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 393:
pattern_comma_list_element -> AMPERREST . LIDENT [ WHEN MINUSGREATER EQ COMMA ]
-- On LIDENT shift to state 394

State 394:
pattern_comma_list_element -> AMPERREST LIDENT . [ WHEN MINUSGREATER EQ COMMA ]
-- On WHEN reduce production pattern_comma_list_element -> AMPERREST LIDENT
-- On MINUSGREATER reduce production pattern_comma_list_element -> AMPERREST LIDENT
-- On EQ reduce production pattern_comma_list_element -> AMPERREST LIDENT
-- On COMMA reduce production pattern_comma_list_element -> AMPERREST LIDENT

State 395:
pattern_comma_list -> pattern_comma_list_element . [ WHEN MINUSGREATER EQ COMMA ]
-- On WHEN reduce production pattern_comma_list -> pattern_comma_list_element
-- On MINUSGREATER reduce production pattern_comma_list -> pattern_comma_list_element
-- On EQ reduce production pattern_comma_list -> pattern_comma_list_element
-- On COMMA reduce production pattern_comma_list -> pattern_comma_list_element

State 396:
match_cases -> pattern_comma_list . opt_comma match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ WHEN MINUSGREATER COMMA ]
-- On COMMA shift to state 397
-- On opt_comma shift to state 400
-- On WHEN reduce production opt_comma ->
-- On MINUSGREATER reduce production opt_comma ->

State 397:
opt_comma -> COMMA . [ WHEN MINUSGREATER ]
pattern_comma_list -> pattern_comma_list COMMA . pattern_comma_list_element [ WHEN MINUSGREATER COMMA ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 398
-- On pattern shift to state 399
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310
-- On WHEN reduce production opt_comma -> COMMA
-- On MINUSGREATER reduce production opt_comma -> COMMA

State 398:
pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element . [ WHEN MINUSGREATER EQ COMMA ]
-- On WHEN reduce production pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element
-- On MINUSGREATER reduce production pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element
-- On EQ reduce production pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element
-- On COMMA reduce production pattern_comma_list -> pattern_comma_list COMMA pattern_comma_list_element

State 399:
pattern -> pattern . AS LIDENT [ WHEN MINUSGREATER EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN MINUSGREATER EQ COMMA COLONCOLON BARBAR AS ]
pattern_comma_list_element -> pattern . [ WHEN MINUSGREATER EQ COMMA ]
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
-- On WHEN reduce production pattern_comma_list_element -> pattern
-- On MINUSGREATER reduce production pattern_comma_list_element -> pattern
-- On EQ reduce production pattern_comma_list_element -> pattern
-- On COMMA reduce production pattern_comma_list_element -> pattern

State 400:
match_cases -> pattern_comma_list opt_comma . match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHEN shift to state 401
-- On MINUSGREATER shift to state 404
-- On match_action shift to state 614

State 401:
match_action -> WHEN . expr MINUSGREATER seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 611
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 402:
value_expr -> FUN . simple_pattern fun_def [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 403
-- On signed_constant shift to state 306
-- On constr_longident shift to state 609
-- On constant shift to state 145

State 403:
value_expr -> FUN simple_pattern . fun_def [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHEN shift to state 401
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUSGREATER shift to state 404
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 606
-- On signed_constant shift to state 306
-- On match_action shift to state 607
-- On fun_def shift to state 610
-- On constr_longident shift to state 609
-- On constant shift to state 145

State 404:
match_action -> MINUSGREATER . seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 605
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 405:
no_value_expr -> FOR . LIDENT EQ expr direction_flag expr DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On LIDENT shift to state 406

State 406:
no_value_expr -> FOR LIDENT . EQ expr direction_flag expr DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On EQ shift to state 407

State 407:
no_value_expr -> FOR LIDENT EQ . expr direction_flag expr DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 599
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 408:
value_expr -> CASE . opt_bar case_list [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On BAR shift to state 125
-- On opt_bar shift to state 409
-- On WHILE reduce production opt_bar ->
-- On WHERE reduce production opt_bar ->
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TRY reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On SHARP reduce production opt_bar ->
-- On RAISE reduce production opt_bar ->
-- On PREFIXOP reduce production opt_bar ->
-- On PLUS reduce production opt_bar ->
-- On MINUS reduce production opt_bar ->
-- On MATCH reduce production opt_bar ->
-- On LVECTOR reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LMATRIX reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LET reduce production opt_bar ->
-- On LBRACKBAR reduce production opt_bar ->
-- On LBRACK reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On LAZY reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On IMAGINARY reduce production opt_bar ->
-- On IF reduce production opt_bar ->
-- On FUNCTION reduce production opt_bar ->
-- On FUN reduce production opt_bar ->
-- On FOR reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On DOLLAR reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->
-- On CASE reduce production opt_bar ->
-- On BEGIN reduce production opt_bar ->
-- On ASSERT reduce production opt_bar ->

State 409:
value_expr -> CASE opt_bar . case_list [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UNDERSCORE shift to state 410
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On simple_case shift to state 592
-- On no_value_expr shift to state 423
-- On expr shift to state 593
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On case_list shift to state 596

State 410:
simple_case -> UNDERSCORE . MINUSGREATER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On MINUSGREATER shift to state 411

State 411:
simple_case -> UNDERSCORE MINUSGREATER . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 591
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 412:
no_value_expr -> ASSERT . simple_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On UIDENT shift to state 3
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 413
-- On constr_longident shift to state 414
-- On constant shift to state 415

State 413:
no_value_expr -> ASSERT simple_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On DOT shift to state 384
-- On WITH reduce production no_value_expr -> ASSERT simple_expr
-- On WHILE reduce production no_value_expr -> ASSERT simple_expr
-- On WHERE reduce production no_value_expr -> ASSERT simple_expr
-- On UIDENT reduce production no_value_expr -> ASSERT simple_expr
-- On TYPE reduce production no_value_expr -> ASSERT simple_expr
-- On TRY reduce production no_value_expr -> ASSERT simple_expr
-- On TO reduce production no_value_expr -> ASSERT simple_expr
-- On THEN reduce production no_value_expr -> ASSERT simple_expr
-- On STRING reduce production no_value_expr -> ASSERT simple_expr
-- On STAR reduce production no_value_expr -> ASSERT simple_expr
-- On SHARP reduce production no_value_expr -> ASSERT simple_expr
-- On SEMISEMI reduce production no_value_expr -> ASSERT simple_expr
-- On SEMI reduce production no_value_expr -> ASSERT simple_expr
-- On RPAREN reduce production no_value_expr -> ASSERT simple_expr
-- On RAISE reduce production no_value_expr -> ASSERT simple_expr
-- On QUESTION reduce production no_value_expr -> ASSERT simple_expr
-- On PREFIXOP reduce production no_value_expr -> ASSERT simple_expr
-- On PLUS reduce production no_value_expr -> ASSERT simple_expr
-- On OPEN reduce production no_value_expr -> ASSERT simple_expr
-- On MODULE reduce production no_value_expr -> ASSERT simple_expr
-- On MINUSGREATER reduce production no_value_expr -> ASSERT simple_expr
-- On MINUS reduce production no_value_expr -> ASSERT simple_expr
-- On MATCH reduce production no_value_expr -> ASSERT simple_expr
-- On LVECTOR reduce production no_value_expr -> ASSERT simple_expr
-- On LPAREN reduce production no_value_expr -> ASSERT simple_expr
-- On LMATRIX reduce production no_value_expr -> ASSERT simple_expr
-- On LIDENT reduce production no_value_expr -> ASSERT simple_expr
-- On LET reduce production no_value_expr -> ASSERT simple_expr
-- On LBRACKBAR reduce production no_value_expr -> ASSERT simple_expr
-- On LBRACK reduce production no_value_expr -> ASSERT simple_expr
-- On LBRACE reduce production no_value_expr -> ASSERT simple_expr
-- On LAZY reduce production no_value_expr -> ASSERT simple_expr
-- On INT reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP5R reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP5L reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP4R reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP4L reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP3R reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP3L reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP2R reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP2L reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP1R reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP1L reduce production no_value_expr -> ASSERT simple_expr
-- On IN reduce production no_value_expr -> ASSERT simple_expr
-- On IMAGINARY reduce production no_value_expr -> ASSERT simple_expr
-- On IF reduce production no_value_expr -> ASSERT simple_expr
-- On FUNCTION reduce production no_value_expr -> ASSERT simple_expr
-- On FUN reduce production no_value_expr -> ASSERT simple_expr
-- On FOR reduce production no_value_expr -> ASSERT simple_expr
-- On FLOAT reduce production no_value_expr -> ASSERT simple_expr
-- On EXCEPTION reduce production no_value_expr -> ASSERT simple_expr
-- On EQ reduce production no_value_expr -> ASSERT simple_expr
-- On EOF reduce production no_value_expr -> ASSERT simple_expr
-- On ELSE reduce production no_value_expr -> ASSERT simple_expr
-- On DOWNTO reduce production no_value_expr -> ASSERT simple_expr
-- On DONE reduce production no_value_expr -> ASSERT simple_expr
-- On DOLLAR reduce production no_value_expr -> ASSERT simple_expr
-- On DO reduce production no_value_expr -> ASSERT simple_expr
-- On COMMA reduce production no_value_expr -> ASSERT simple_expr
-- On COLONEQUAL reduce production no_value_expr -> ASSERT simple_expr
-- On COLONCOLON reduce production no_value_expr -> ASSERT simple_expr
-- On COLON reduce production no_value_expr -> ASSERT simple_expr
-- On CHAR reduce production no_value_expr -> ASSERT simple_expr
-- On CASE reduce production no_value_expr -> ASSERT simple_expr
-- On BELOW reduce production no_value_expr -> ASSERT simple_expr
-- On BEGIN reduce production no_value_expr -> ASSERT simple_expr
-- On BARBAR reduce production no_value_expr -> ASSERT simple_expr
-- On BAR reduce production no_value_expr -> ASSERT simple_expr
-- On ASSERT reduce production no_value_expr -> ASSERT simple_expr
-- On AND reduce production no_value_expr -> ASSERT simple_expr
-- On AMPERAMPER reduce production no_value_expr -> ASSERT simple_expr
-- On ABOVE reduce production no_value_expr -> ASSERT simple_expr

State 414:
simple_expr -> constr_longident . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> constr_longident
-- On WHILE reduce production simple_expr -> constr_longident
-- On WHERE reduce production simple_expr -> constr_longident
-- On UIDENT reduce production simple_expr -> constr_longident
-- On TYPE reduce production simple_expr -> constr_longident
-- On TRY reduce production simple_expr -> constr_longident
-- On TO reduce production simple_expr -> constr_longident
-- On THEN reduce production simple_expr -> constr_longident
-- On STRING reduce production simple_expr -> constr_longident
-- On STAR reduce production simple_expr -> constr_longident
-- On SHARP reduce production simple_expr -> constr_longident
-- On SEMISEMI reduce production simple_expr -> constr_longident
-- On SEMI reduce production simple_expr -> constr_longident
-- On RPAREN reduce production simple_expr -> constr_longident
-- On RAISE reduce production simple_expr -> constr_longident
-- On QUESTION reduce production simple_expr -> constr_longident
-- On PREFIXOP reduce production simple_expr -> constr_longident
-- On PLUS reduce production simple_expr -> constr_longident
-- On OPEN reduce production simple_expr -> constr_longident
-- On MODULE reduce production simple_expr -> constr_longident
-- On MINUSGREATER reduce production simple_expr -> constr_longident
-- On MINUS reduce production simple_expr -> constr_longident
-- On MATCH reduce production simple_expr -> constr_longident
-- On LVECTOR reduce production simple_expr -> constr_longident
-- On LPAREN reduce production simple_expr -> constr_longident
-- On LMATRIX reduce production simple_expr -> constr_longident
-- On LIDENT reduce production simple_expr -> constr_longident
-- On LET reduce production simple_expr -> constr_longident
-- On LBRACKBAR reduce production simple_expr -> constr_longident
-- On LBRACK reduce production simple_expr -> constr_longident
-- On LBRACE reduce production simple_expr -> constr_longident
-- On LAZY reduce production simple_expr -> constr_longident
-- On INT reduce production simple_expr -> constr_longident
-- On INFIXOP5R reduce production simple_expr -> constr_longident
-- On INFIXOP5L reduce production simple_expr -> constr_longident
-- On INFIXOP4R reduce production simple_expr -> constr_longident
-- On INFIXOP4L reduce production simple_expr -> constr_longident
-- On INFIXOP3R reduce production simple_expr -> constr_longident
-- On INFIXOP3L reduce production simple_expr -> constr_longident
-- On INFIXOP2R reduce production simple_expr -> constr_longident
-- On INFIXOP2L reduce production simple_expr -> constr_longident
-- On INFIXOP1R reduce production simple_expr -> constr_longident
-- On INFIXOP1L reduce production simple_expr -> constr_longident
-- On IN reduce production simple_expr -> constr_longident
-- On IMAGINARY reduce production simple_expr -> constr_longident
-- On IF reduce production simple_expr -> constr_longident
-- On FUNCTION reduce production simple_expr -> constr_longident
-- On FUN reduce production simple_expr -> constr_longident
-- On FOR reduce production simple_expr -> constr_longident
-- On FLOAT reduce production simple_expr -> constr_longident
-- On EXCEPTION reduce production simple_expr -> constr_longident
-- On EQ reduce production simple_expr -> constr_longident
-- On EOF reduce production simple_expr -> constr_longident
-- On ELSE reduce production simple_expr -> constr_longident
-- On DOWNTO reduce production simple_expr -> constr_longident
-- On DOT reduce production simple_expr -> constr_longident
-- On DONE reduce production simple_expr -> constr_longident
-- On DOLLAR reduce production simple_expr -> constr_longident
-- On DO reduce production simple_expr -> constr_longident
-- On COMMA reduce production simple_expr -> constr_longident
-- On COLONEQUAL reduce production simple_expr -> constr_longident
-- On COLONCOLON reduce production simple_expr -> constr_longident
-- On COLON reduce production simple_expr -> constr_longident
-- On CHAR reduce production simple_expr -> constr_longident
-- On CASE reduce production simple_expr -> constr_longident
-- On BELOW reduce production simple_expr -> constr_longident
-- On BEGIN reduce production simple_expr -> constr_longident
-- On BARBAR reduce production simple_expr -> constr_longident
-- On BAR reduce production simple_expr -> constr_longident
-- On ASSERT reduce production simple_expr -> constr_longident
-- On AND reduce production simple_expr -> constr_longident
-- On AMPERAMPER reduce production simple_expr -> constr_longident
-- On ABOVE reduce production simple_expr -> constr_longident

State 415:
simple_expr -> constant . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> constant
-- On WHILE reduce production simple_expr -> constant
-- On WHERE reduce production simple_expr -> constant
-- On UIDENT reduce production simple_expr -> constant
-- On TYPE reduce production simple_expr -> constant
-- On TRY reduce production simple_expr -> constant
-- On TO reduce production simple_expr -> constant
-- On THEN reduce production simple_expr -> constant
-- On STRING reduce production simple_expr -> constant
-- On STAR reduce production simple_expr -> constant
-- On SHARP reduce production simple_expr -> constant
-- On SEMISEMI reduce production simple_expr -> constant
-- On SEMI reduce production simple_expr -> constant
-- On RPAREN reduce production simple_expr -> constant
-- On RAISE reduce production simple_expr -> constant
-- On QUESTION reduce production simple_expr -> constant
-- On PREFIXOP reduce production simple_expr -> constant
-- On PLUS reduce production simple_expr -> constant
-- On OPEN reduce production simple_expr -> constant
-- On MODULE reduce production simple_expr -> constant
-- On MINUSGREATER reduce production simple_expr -> constant
-- On MINUS reduce production simple_expr -> constant
-- On MATCH reduce production simple_expr -> constant
-- On LVECTOR reduce production simple_expr -> constant
-- On LPAREN reduce production simple_expr -> constant
-- On LMATRIX reduce production simple_expr -> constant
-- On LIDENT reduce production simple_expr -> constant
-- On LET reduce production simple_expr -> constant
-- On LBRACKBAR reduce production simple_expr -> constant
-- On LBRACK reduce production simple_expr -> constant
-- On LBRACE reduce production simple_expr -> constant
-- On LAZY reduce production simple_expr -> constant
-- On INT reduce production simple_expr -> constant
-- On INFIXOP5R reduce production simple_expr -> constant
-- On INFIXOP5L reduce production simple_expr -> constant
-- On INFIXOP4R reduce production simple_expr -> constant
-- On INFIXOP4L reduce production simple_expr -> constant
-- On INFIXOP3R reduce production simple_expr -> constant
-- On INFIXOP3L reduce production simple_expr -> constant
-- On INFIXOP2R reduce production simple_expr -> constant
-- On INFIXOP2L reduce production simple_expr -> constant
-- On INFIXOP1R reduce production simple_expr -> constant
-- On INFIXOP1L reduce production simple_expr -> constant
-- On IN reduce production simple_expr -> constant
-- On IMAGINARY reduce production simple_expr -> constant
-- On IF reduce production simple_expr -> constant
-- On FUNCTION reduce production simple_expr -> constant
-- On FUN reduce production simple_expr -> constant
-- On FOR reduce production simple_expr -> constant
-- On FLOAT reduce production simple_expr -> constant
-- On EXCEPTION reduce production simple_expr -> constant
-- On EQ reduce production simple_expr -> constant
-- On EOF reduce production simple_expr -> constant
-- On ELSE reduce production simple_expr -> constant
-- On DOWNTO reduce production simple_expr -> constant
-- On DOT reduce production simple_expr -> constant
-- On DONE reduce production simple_expr -> constant
-- On DOLLAR reduce production simple_expr -> constant
-- On DO reduce production simple_expr -> constant
-- On COMMA reduce production simple_expr -> constant
-- On COLONEQUAL reduce production simple_expr -> constant
-- On COLONCOLON reduce production simple_expr -> constant
-- On COLON reduce production simple_expr -> constant
-- On CHAR reduce production simple_expr -> constant
-- On CASE reduce production simple_expr -> constant
-- On BELOW reduce production simple_expr -> constant
-- On BEGIN reduce production simple_expr -> constant
-- On BARBAR reduce production simple_expr -> constant
-- On BAR reduce production simple_expr -> constant
-- On ASSERT reduce production simple_expr -> constant
-- On AND reduce production simple_expr -> constant
-- On AMPERAMPER reduce production simple_expr -> constant
-- On ABOVE reduce production simple_expr -> constant

State 416:
expr -> value_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production expr -> value_expr
-- On WHILE reduce production expr -> value_expr
-- On WHERE reduce production expr -> value_expr
-- On UIDENT reduce production expr -> value_expr
-- On TYPE reduce production expr -> value_expr
-- On TRY reduce production expr -> value_expr
-- On TO reduce production expr -> value_expr
-- On THEN reduce production expr -> value_expr
-- On STRING reduce production expr -> value_expr
-- On STAR reduce production expr -> value_expr
-- On SHARP reduce production expr -> value_expr
-- On SEMISEMI reduce production expr -> value_expr
-- On SEMI reduce production expr -> value_expr
-- On RPAREN reduce production expr -> value_expr
-- On RAISE reduce production expr -> value_expr
-- On QUESTION reduce production expr -> value_expr
-- On PREFIXOP reduce production expr -> value_expr
-- On PLUS reduce production expr -> value_expr
-- On OPEN reduce production expr -> value_expr
-- On MODULE reduce production expr -> value_expr
-- On MINUSGREATER reduce production expr -> value_expr
-- On MINUS reduce production expr -> value_expr
-- On MATCH reduce production expr -> value_expr
-- On LVECTOR reduce production expr -> value_expr
-- On LPAREN reduce production expr -> value_expr
-- On LMATRIX reduce production expr -> value_expr
-- On LIDENT reduce production expr -> value_expr
-- On LET reduce production expr -> value_expr
-- On LBRACKBAR reduce production expr -> value_expr
-- On LBRACK reduce production expr -> value_expr
-- On LBRACE reduce production expr -> value_expr
-- On LAZY reduce production expr -> value_expr
-- On INT reduce production expr -> value_expr
-- On INFIXOP5R reduce production expr -> value_expr
-- On INFIXOP5L reduce production expr -> value_expr
-- On INFIXOP4R reduce production expr -> value_expr
-- On INFIXOP4L reduce production expr -> value_expr
-- On INFIXOP3R reduce production expr -> value_expr
-- On INFIXOP3L reduce production expr -> value_expr
-- On INFIXOP2R reduce production expr -> value_expr
-- On INFIXOP2L reduce production expr -> value_expr
-- On INFIXOP1R reduce production expr -> value_expr
-- On INFIXOP1L reduce production expr -> value_expr
-- On IN reduce production expr -> value_expr
-- On IMAGINARY reduce production expr -> value_expr
-- On IF reduce production expr -> value_expr
-- On FUNCTION reduce production expr -> value_expr
-- On FUN reduce production expr -> value_expr
-- On FOR reduce production expr -> value_expr
-- On FLOAT reduce production expr -> value_expr
-- On EXCEPTION reduce production expr -> value_expr
-- On EQ reduce production expr -> value_expr
-- On EOF reduce production expr -> value_expr
-- On ELSE reduce production expr -> value_expr
-- On DOWNTO reduce production expr -> value_expr
-- On DONE reduce production expr -> value_expr
-- On DOLLAR reduce production expr -> value_expr
-- On DO reduce production expr -> value_expr
-- On COMMA reduce production expr -> value_expr
-- On COLONEQUAL reduce production expr -> value_expr
-- On COLONCOLON reduce production expr -> value_expr
-- On COLON reduce production expr -> value_expr
-- On CHAR reduce production expr -> value_expr
-- On CASE reduce production expr -> value_expr
-- On BELOW reduce production expr -> value_expr
-- On BEGIN reduce production expr -> value_expr
-- On BARBAR reduce production expr -> value_expr
-- On BAR reduce production expr -> value_expr
-- On ASSERT reduce production expr -> value_expr
-- On AND reduce production expr -> value_expr
-- On AMPERAMPER reduce production expr -> value_expr
-- On ABOVE reduce production expr -> value_expr

State 417:
no_value_expr -> simple_expr . DOT label_longident LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> simple_expr . DOT LBRACK index_list RBRACK LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> simple_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> simple_expr . simple_expr_list [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On UIDENT shift to state 3
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOT shift to state 418
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr_list shift to state 588
-- On simple_expr shift to state 590
-- On constr_longident shift to state 414
-- On constant shift to state 415
-- On WITH reduce production value_expr -> simple_expr
-- On WHILE reduce production value_expr -> simple_expr
-- On WHERE reduce production value_expr -> simple_expr
-- On TYPE reduce production value_expr -> simple_expr
-- On TRY reduce production value_expr -> simple_expr
-- On TO reduce production value_expr -> simple_expr
-- On THEN reduce production value_expr -> simple_expr
-- On STAR reduce production value_expr -> simple_expr
-- On SEMISEMI reduce production value_expr -> simple_expr
-- On SEMI reduce production value_expr -> simple_expr
-- On RPAREN reduce production value_expr -> simple_expr
-- On RAISE reduce production value_expr -> simple_expr
-- On QUESTION reduce production value_expr -> simple_expr
-- On PLUS reduce production value_expr -> simple_expr
-- On OPEN reduce production value_expr -> simple_expr
-- On MODULE reduce production value_expr -> simple_expr
-- On MINUSGREATER reduce production value_expr -> simple_expr
-- On MINUS reduce production value_expr -> simple_expr
-- On MATCH reduce production value_expr -> simple_expr
-- On LET reduce production value_expr -> simple_expr
-- On LAZY reduce production value_expr -> simple_expr
-- On INFIXOP5R reduce production value_expr -> simple_expr
-- On INFIXOP5L reduce production value_expr -> simple_expr
-- On INFIXOP4R reduce production value_expr -> simple_expr
-- On INFIXOP4L reduce production value_expr -> simple_expr
-- On INFIXOP3R reduce production value_expr -> simple_expr
-- On INFIXOP3L reduce production value_expr -> simple_expr
-- On INFIXOP2R reduce production value_expr -> simple_expr
-- On INFIXOP2L reduce production value_expr -> simple_expr
-- On INFIXOP1R reduce production value_expr -> simple_expr
-- On INFIXOP1L reduce production value_expr -> simple_expr
-- On IN reduce production value_expr -> simple_expr
-- On IF reduce production value_expr -> simple_expr
-- On FUNCTION reduce production value_expr -> simple_expr
-- On FUN reduce production value_expr -> simple_expr
-- On FOR reduce production value_expr -> simple_expr
-- On EXCEPTION reduce production value_expr -> simple_expr
-- On EQ reduce production value_expr -> simple_expr
-- On EOF reduce production value_expr -> simple_expr
-- On ELSE reduce production value_expr -> simple_expr
-- On DOWNTO reduce production value_expr -> simple_expr
-- On DONE reduce production value_expr -> simple_expr
-- On DO reduce production value_expr -> simple_expr
-- On COMMA reduce production value_expr -> simple_expr
-- On COLONEQUAL reduce production value_expr -> simple_expr
-- On COLONCOLON reduce production value_expr -> simple_expr
-- On COLON reduce production value_expr -> simple_expr
-- On CASE reduce production value_expr -> simple_expr
-- On BELOW reduce production value_expr -> simple_expr
-- On BARBAR reduce production value_expr -> simple_expr
-- On BAR reduce production value_expr -> simple_expr
-- On ASSERT reduce production value_expr -> simple_expr
-- On AND reduce production value_expr -> simple_expr
-- On AMPERAMPER reduce production value_expr -> simple_expr
-- On ABOVE reduce production value_expr -> simple_expr
** Conflict on UIDENT STRING SHARP PREFIXOP LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT DOLLAR CHAR BEGIN

State 418:
no_value_expr -> simple_expr DOT . label_longident LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> simple_expr DOT . LBRACK index_list RBRACK LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT . label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT . LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT . LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On UIDENT shift to state 213
-- On LIDENT shift to state 216
-- On LBRACK shift to state 419
-- On label_longident shift to state 585

State 419:
no_value_expr -> simple_expr DOT LBRACK . index_list RBRACK LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT LBRACK . index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT LBRACK . index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 386
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOTDOT shift to state 482
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On index_list shift to state 580
-- On index shift to state 561
-- On expr shift to state 555
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 420:
no_value_expr -> FOR . LIDENT EQ expr direction_flag expr DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On LIDENT shift to state 421

State 421:
no_value_expr -> FOR LIDENT . EQ expr direction_flag expr DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On EQ shift to state 422

State 422:
no_value_expr -> FOR LIDENT EQ . expr direction_flag expr DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 424
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 423:
expr -> no_value_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production expr -> no_value_expr
-- On WHILE reduce production expr -> no_value_expr
-- On WHERE reduce production expr -> no_value_expr
-- On UIDENT reduce production expr -> no_value_expr
-- On TYPE reduce production expr -> no_value_expr
-- On TRY reduce production expr -> no_value_expr
-- On TO reduce production expr -> no_value_expr
-- On THEN reduce production expr -> no_value_expr
-- On STRING reduce production expr -> no_value_expr
-- On STAR reduce production expr -> no_value_expr
-- On SHARP reduce production expr -> no_value_expr
-- On SEMISEMI reduce production expr -> no_value_expr
-- On SEMI reduce production expr -> no_value_expr
-- On RPAREN reduce production expr -> no_value_expr
-- On RAISE reduce production expr -> no_value_expr
-- On QUESTION reduce production expr -> no_value_expr
-- On PREFIXOP reduce production expr -> no_value_expr
-- On PLUS reduce production expr -> no_value_expr
-- On OPEN reduce production expr -> no_value_expr
-- On MODULE reduce production expr -> no_value_expr
-- On MINUSGREATER reduce production expr -> no_value_expr
-- On MINUS reduce production expr -> no_value_expr
-- On MATCH reduce production expr -> no_value_expr
-- On LVECTOR reduce production expr -> no_value_expr
-- On LPAREN reduce production expr -> no_value_expr
-- On LMATRIX reduce production expr -> no_value_expr
-- On LIDENT reduce production expr -> no_value_expr
-- On LET reduce production expr -> no_value_expr
-- On LBRACKBAR reduce production expr -> no_value_expr
-- On LBRACK reduce production expr -> no_value_expr
-- On LBRACE reduce production expr -> no_value_expr
-- On LAZY reduce production expr -> no_value_expr
-- On INT reduce production expr -> no_value_expr
-- On INFIXOP5R reduce production expr -> no_value_expr
-- On INFIXOP5L reduce production expr -> no_value_expr
-- On INFIXOP4R reduce production expr -> no_value_expr
-- On INFIXOP4L reduce production expr -> no_value_expr
-- On INFIXOP3R reduce production expr -> no_value_expr
-- On INFIXOP3L reduce production expr -> no_value_expr
-- On INFIXOP2R reduce production expr -> no_value_expr
-- On INFIXOP2L reduce production expr -> no_value_expr
-- On INFIXOP1R reduce production expr -> no_value_expr
-- On INFIXOP1L reduce production expr -> no_value_expr
-- On IN reduce production expr -> no_value_expr
-- On IMAGINARY reduce production expr -> no_value_expr
-- On IF reduce production expr -> no_value_expr
-- On FUNCTION reduce production expr -> no_value_expr
-- On FUN reduce production expr -> no_value_expr
-- On FOR reduce production expr -> no_value_expr
-- On FLOAT reduce production expr -> no_value_expr
-- On EXCEPTION reduce production expr -> no_value_expr
-- On EQ reduce production expr -> no_value_expr
-- On EOF reduce production expr -> no_value_expr
-- On ELSE reduce production expr -> no_value_expr
-- On DOWNTO reduce production expr -> no_value_expr
-- On DONE reduce production expr -> no_value_expr
-- On DOLLAR reduce production expr -> no_value_expr
-- On DO reduce production expr -> no_value_expr
-- On COMMA reduce production expr -> no_value_expr
-- On COLONEQUAL reduce production expr -> no_value_expr
-- On COLONCOLON reduce production expr -> no_value_expr
-- On COLON reduce production expr -> no_value_expr
-- On CHAR reduce production expr -> no_value_expr
-- On CASE reduce production expr -> no_value_expr
-- On BELOW reduce production expr -> no_value_expr
-- On BEGIN reduce production expr -> no_value_expr
-- On BARBAR reduce production expr -> no_value_expr
-- On BAR reduce production expr -> no_value_expr
-- On ASSERT reduce production expr -> no_value_expr
-- On AND reduce production expr -> no_value_expr
-- On AMPERAMPER reduce production expr -> no_value_expr
-- On ABOVE reduce production expr -> no_value_expr

State 424:
no_value_expr -> FOR LIDENT EQ expr . direction_flag expr DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On TO shift to state 469
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On DOWNTO shift to state 470
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BELOW shift to state 471
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On ABOVE shift to state 472
-- On direction_flag shift to state 473

State 425:
value_expr -> expr WHERE . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 426
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 426:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr WHERE expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production value_expr -> expr WHERE expr
-- On WHILE reduce production value_expr -> expr WHERE expr
-- On UIDENT reduce production value_expr -> expr WHERE expr
-- On TYPE reduce production value_expr -> expr WHERE expr
-- On TRY reduce production value_expr -> expr WHERE expr
-- On TO reduce production value_expr -> expr WHERE expr
-- On THEN reduce production value_expr -> expr WHERE expr
-- On STRING reduce production value_expr -> expr WHERE expr
-- On SHARP reduce production value_expr -> expr WHERE expr
-- On SEMISEMI reduce production value_expr -> expr WHERE expr
-- On SEMI reduce production value_expr -> expr WHERE expr
-- On RPAREN reduce production value_expr -> expr WHERE expr
-- On RAISE reduce production value_expr -> expr WHERE expr
-- On PREFIXOP reduce production value_expr -> expr WHERE expr
-- On OPEN reduce production value_expr -> expr WHERE expr
-- On MODULE reduce production value_expr -> expr WHERE expr
-- On MINUSGREATER reduce production value_expr -> expr WHERE expr
-- On MATCH reduce production value_expr -> expr WHERE expr
-- On LVECTOR reduce production value_expr -> expr WHERE expr
-- On LPAREN reduce production value_expr -> expr WHERE expr
-- On LMATRIX reduce production value_expr -> expr WHERE expr
-- On LIDENT reduce production value_expr -> expr WHERE expr
-- On LET reduce production value_expr -> expr WHERE expr
-- On LBRACKBAR reduce production value_expr -> expr WHERE expr
-- On LBRACK reduce production value_expr -> expr WHERE expr
-- On LBRACE reduce production value_expr -> expr WHERE expr
-- On LAZY reduce production value_expr -> expr WHERE expr
-- On INT reduce production value_expr -> expr WHERE expr
-- On IN reduce production value_expr -> expr WHERE expr
-- On IMAGINARY reduce production value_expr -> expr WHERE expr
-- On IF reduce production value_expr -> expr WHERE expr
-- On FUNCTION reduce production value_expr -> expr WHERE expr
-- On FUN reduce production value_expr -> expr WHERE expr
-- On FOR reduce production value_expr -> expr WHERE expr
-- On FLOAT reduce production value_expr -> expr WHERE expr
-- On EXCEPTION reduce production value_expr -> expr WHERE expr
-- On EOF reduce production value_expr -> expr WHERE expr
-- On ELSE reduce production value_expr -> expr WHERE expr
-- On DOWNTO reduce production value_expr -> expr WHERE expr
-- On DONE reduce production value_expr -> expr WHERE expr
-- On DOLLAR reduce production value_expr -> expr WHERE expr
-- On DO reduce production value_expr -> expr WHERE expr
-- On COMMA reduce production value_expr -> expr WHERE expr
-- On COLON reduce production value_expr -> expr WHERE expr
-- On CHAR reduce production value_expr -> expr WHERE expr
-- On CASE reduce production value_expr -> expr WHERE expr
-- On BELOW reduce production value_expr -> expr WHERE expr
-- On BEGIN reduce production value_expr -> expr WHERE expr
-- On BAR reduce production value_expr -> expr WHERE expr
-- On ASSERT reduce production value_expr -> expr WHERE expr
-- On AND reduce production value_expr -> expr WHERE expr
-- On ABOVE reduce production value_expr -> expr WHERE expr
** Conflict on WHERE

State 427:
value_expr -> expr STAR . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 428
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 428:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr STAR expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On WITH reduce production value_expr -> expr STAR expr
-- On WHILE reduce production value_expr -> expr STAR expr
-- On UIDENT reduce production value_expr -> expr STAR expr
-- On TYPE reduce production value_expr -> expr STAR expr
-- On TRY reduce production value_expr -> expr STAR expr
-- On TO reduce production value_expr -> expr STAR expr
-- On THEN reduce production value_expr -> expr STAR expr
-- On STRING reduce production value_expr -> expr STAR expr
-- On STAR reduce production value_expr -> expr STAR expr
-- On SHARP reduce production value_expr -> expr STAR expr
-- On SEMISEMI reduce production value_expr -> expr STAR expr
-- On SEMI reduce production value_expr -> expr STAR expr
-- On RPAREN reduce production value_expr -> expr STAR expr
-- On RAISE reduce production value_expr -> expr STAR expr
-- On QUESTION reduce production value_expr -> expr STAR expr
-- On PREFIXOP reduce production value_expr -> expr STAR expr
-- On PLUS reduce production value_expr -> expr STAR expr
-- On OPEN reduce production value_expr -> expr STAR expr
-- On MODULE reduce production value_expr -> expr STAR expr
-- On MINUSGREATER reduce production value_expr -> expr STAR expr
-- On MINUS reduce production value_expr -> expr STAR expr
-- On MATCH reduce production value_expr -> expr STAR expr
-- On LVECTOR reduce production value_expr -> expr STAR expr
-- On LPAREN reduce production value_expr -> expr STAR expr
-- On LMATRIX reduce production value_expr -> expr STAR expr
-- On LIDENT reduce production value_expr -> expr STAR expr
-- On LET reduce production value_expr -> expr STAR expr
-- On LBRACKBAR reduce production value_expr -> expr STAR expr
-- On LBRACK reduce production value_expr -> expr STAR expr
-- On LBRACE reduce production value_expr -> expr STAR expr
-- On LAZY reduce production value_expr -> expr STAR expr
-- On INT reduce production value_expr -> expr STAR expr
-- On INFIXOP4L reduce production value_expr -> expr STAR expr
-- On INFIXOP3R reduce production value_expr -> expr STAR expr
-- On INFIXOP3L reduce production value_expr -> expr STAR expr
-- On INFIXOP2R reduce production value_expr -> expr STAR expr
-- On INFIXOP2L reduce production value_expr -> expr STAR expr
-- On INFIXOP1R reduce production value_expr -> expr STAR expr
-- On INFIXOP1L reduce production value_expr -> expr STAR expr
-- On IN reduce production value_expr -> expr STAR expr
-- On IMAGINARY reduce production value_expr -> expr STAR expr
-- On IF reduce production value_expr -> expr STAR expr
-- On FUNCTION reduce production value_expr -> expr STAR expr
-- On FUN reduce production value_expr -> expr STAR expr
-- On FOR reduce production value_expr -> expr STAR expr
-- On FLOAT reduce production value_expr -> expr STAR expr
-- On EXCEPTION reduce production value_expr -> expr STAR expr
-- On EQ reduce production value_expr -> expr STAR expr
-- On EOF reduce production value_expr -> expr STAR expr
-- On ELSE reduce production value_expr -> expr STAR expr
-- On DOWNTO reduce production value_expr -> expr STAR expr
-- On DONE reduce production value_expr -> expr STAR expr
-- On DOLLAR reduce production value_expr -> expr STAR expr
-- On DO reduce production value_expr -> expr STAR expr
-- On COMMA reduce production value_expr -> expr STAR expr
-- On COLONEQUAL reduce production value_expr -> expr STAR expr
-- On COLONCOLON reduce production value_expr -> expr STAR expr
-- On COLON reduce production value_expr -> expr STAR expr
-- On CHAR reduce production value_expr -> expr STAR expr
-- On CASE reduce production value_expr -> expr STAR expr
-- On BELOW reduce production value_expr -> expr STAR expr
-- On BEGIN reduce production value_expr -> expr STAR expr
-- On BARBAR reduce production value_expr -> expr STAR expr
-- On BAR reduce production value_expr -> expr STAR expr
-- On ASSERT reduce production value_expr -> expr STAR expr
-- On AND reduce production value_expr -> expr STAR expr
-- On AMPERAMPER reduce production value_expr -> expr STAR expr
-- On ABOVE reduce production value_expr -> expr STAR expr
** Conflict on WHERE

State 429:
value_expr -> expr INFIXOP5R . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 430
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 430:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP5R expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On INFIXOP5R shift to state 429
-- On WITH reduce production value_expr -> expr INFIXOP5R expr
-- On WHILE reduce production value_expr -> expr INFIXOP5R expr
-- On UIDENT reduce production value_expr -> expr INFIXOP5R expr
-- On TYPE reduce production value_expr -> expr INFIXOP5R expr
-- On TRY reduce production value_expr -> expr INFIXOP5R expr
-- On TO reduce production value_expr -> expr INFIXOP5R expr
-- On THEN reduce production value_expr -> expr INFIXOP5R expr
-- On STRING reduce production value_expr -> expr INFIXOP5R expr
-- On STAR reduce production value_expr -> expr INFIXOP5R expr
-- On SHARP reduce production value_expr -> expr INFIXOP5R expr
-- On SEMISEMI reduce production value_expr -> expr INFIXOP5R expr
-- On SEMI reduce production value_expr -> expr INFIXOP5R expr
-- On RPAREN reduce production value_expr -> expr INFIXOP5R expr
-- On RAISE reduce production value_expr -> expr INFIXOP5R expr
-- On QUESTION reduce production value_expr -> expr INFIXOP5R expr
-- On PREFIXOP reduce production value_expr -> expr INFIXOP5R expr
-- On PLUS reduce production value_expr -> expr INFIXOP5R expr
-- On OPEN reduce production value_expr -> expr INFIXOP5R expr
-- On MODULE reduce production value_expr -> expr INFIXOP5R expr
-- On MINUSGREATER reduce production value_expr -> expr INFIXOP5R expr
-- On MINUS reduce production value_expr -> expr INFIXOP5R expr
-- On MATCH reduce production value_expr -> expr INFIXOP5R expr
-- On LVECTOR reduce production value_expr -> expr INFIXOP5R expr
-- On LPAREN reduce production value_expr -> expr INFIXOP5R expr
-- On LMATRIX reduce production value_expr -> expr INFIXOP5R expr
-- On LIDENT reduce production value_expr -> expr INFIXOP5R expr
-- On LET reduce production value_expr -> expr INFIXOP5R expr
-- On LBRACKBAR reduce production value_expr -> expr INFIXOP5R expr
-- On LBRACK reduce production value_expr -> expr INFIXOP5R expr
-- On LBRACE reduce production value_expr -> expr INFIXOP5R expr
-- On LAZY reduce production value_expr -> expr INFIXOP5R expr
-- On INT reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP5L reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP4R reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP4L reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP3R reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP3L reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP2R reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP5R expr
-- On IN reduce production value_expr -> expr INFIXOP5R expr
-- On IMAGINARY reduce production value_expr -> expr INFIXOP5R expr
-- On IF reduce production value_expr -> expr INFIXOP5R expr
-- On FUNCTION reduce production value_expr -> expr INFIXOP5R expr
-- On FUN reduce production value_expr -> expr INFIXOP5R expr
-- On FOR reduce production value_expr -> expr INFIXOP5R expr
-- On FLOAT reduce production value_expr -> expr INFIXOP5R expr
-- On EXCEPTION reduce production value_expr -> expr INFIXOP5R expr
-- On EQ reduce production value_expr -> expr INFIXOP5R expr
-- On EOF reduce production value_expr -> expr INFIXOP5R expr
-- On ELSE reduce production value_expr -> expr INFIXOP5R expr
-- On DOWNTO reduce production value_expr -> expr INFIXOP5R expr
-- On DONE reduce production value_expr -> expr INFIXOP5R expr
-- On DOLLAR reduce production value_expr -> expr INFIXOP5R expr
-- On DO reduce production value_expr -> expr INFIXOP5R expr
-- On COMMA reduce production value_expr -> expr INFIXOP5R expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP5R expr
-- On COLONCOLON reduce production value_expr -> expr INFIXOP5R expr
-- On COLON reduce production value_expr -> expr INFIXOP5R expr
-- On CHAR reduce production value_expr -> expr INFIXOP5R expr
-- On CASE reduce production value_expr -> expr INFIXOP5R expr
-- On BELOW reduce production value_expr -> expr INFIXOP5R expr
-- On BEGIN reduce production value_expr -> expr INFIXOP5R expr
-- On BARBAR reduce production value_expr -> expr INFIXOP5R expr
-- On BAR reduce production value_expr -> expr INFIXOP5R expr
-- On ASSERT reduce production value_expr -> expr INFIXOP5R expr
-- On AND reduce production value_expr -> expr INFIXOP5R expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP5R expr
-- On ABOVE reduce production value_expr -> expr INFIXOP5R expr
** Conflict on WHERE

State 431:
simple_expr -> constr_longident . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> constr_longident . simple_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On UIDENT shift to state 3
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 432
-- On constr_longident shift to state 414
-- On constant shift to state 415
-- On WITH reduce production simple_expr -> constr_longident
-- On WHILE reduce production simple_expr -> constr_longident
-- On WHERE reduce production simple_expr -> constr_longident
-- On TYPE reduce production simple_expr -> constr_longident
-- On TRY reduce production simple_expr -> constr_longident
-- On TO reduce production simple_expr -> constr_longident
-- On THEN reduce production simple_expr -> constr_longident
-- On STAR reduce production simple_expr -> constr_longident
-- On SEMISEMI reduce production simple_expr -> constr_longident
-- On SEMI reduce production simple_expr -> constr_longident
-- On RPAREN reduce production simple_expr -> constr_longident
-- On RAISE reduce production simple_expr -> constr_longident
-- On QUESTION reduce production simple_expr -> constr_longident
-- On PLUS reduce production simple_expr -> constr_longident
-- On OPEN reduce production simple_expr -> constr_longident
-- On MODULE reduce production simple_expr -> constr_longident
-- On MINUSGREATER reduce production simple_expr -> constr_longident
-- On MINUS reduce production simple_expr -> constr_longident
-- On MATCH reduce production simple_expr -> constr_longident
-- On LET reduce production simple_expr -> constr_longident
-- On LAZY reduce production simple_expr -> constr_longident
-- On INFIXOP5R reduce production simple_expr -> constr_longident
-- On INFIXOP5L reduce production simple_expr -> constr_longident
-- On INFIXOP4R reduce production simple_expr -> constr_longident
-- On INFIXOP4L reduce production simple_expr -> constr_longident
-- On INFIXOP3R reduce production simple_expr -> constr_longident
-- On INFIXOP3L reduce production simple_expr -> constr_longident
-- On INFIXOP2R reduce production simple_expr -> constr_longident
-- On INFIXOP2L reduce production simple_expr -> constr_longident
-- On INFIXOP1R reduce production simple_expr -> constr_longident
-- On INFIXOP1L reduce production simple_expr -> constr_longident
-- On IN reduce production simple_expr -> constr_longident
-- On IF reduce production simple_expr -> constr_longident
-- On FUNCTION reduce production simple_expr -> constr_longident
-- On FUN reduce production simple_expr -> constr_longident
-- On FOR reduce production simple_expr -> constr_longident
-- On EXCEPTION reduce production simple_expr -> constr_longident
-- On EQ reduce production simple_expr -> constr_longident
-- On EOF reduce production simple_expr -> constr_longident
-- On ELSE reduce production simple_expr -> constr_longident
-- On DOWNTO reduce production simple_expr -> constr_longident
-- On DOT reduce production simple_expr -> constr_longident
-- On DONE reduce production simple_expr -> constr_longident
-- On DO reduce production simple_expr -> constr_longident
-- On COMMA reduce production simple_expr -> constr_longident
-- On COLONEQUAL reduce production simple_expr -> constr_longident
-- On COLONCOLON reduce production simple_expr -> constr_longident
-- On COLON reduce production simple_expr -> constr_longident
-- On CASE reduce production simple_expr -> constr_longident
-- On BELOW reduce production simple_expr -> constr_longident
-- On BARBAR reduce production simple_expr -> constr_longident
-- On BAR reduce production simple_expr -> constr_longident
-- On ASSERT reduce production simple_expr -> constr_longident
-- On AND reduce production simple_expr -> constr_longident
-- On AMPERAMPER reduce production simple_expr -> constr_longident
-- On ABOVE reduce production simple_expr -> constr_longident
** Conflict on UIDENT STRING SHARP PREFIXOP LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT DOLLAR CHAR BEGIN

State 432:
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> constr_longident simple_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On DOT shift to state 384
-- On WITH reduce production value_expr -> constr_longident simple_expr
-- On WHILE reduce production value_expr -> constr_longident simple_expr
-- On WHERE reduce production value_expr -> constr_longident simple_expr
-- On UIDENT reduce production value_expr -> constr_longident simple_expr
-- On TYPE reduce production value_expr -> constr_longident simple_expr
-- On TRY reduce production value_expr -> constr_longident simple_expr
-- On TO reduce production value_expr -> constr_longident simple_expr
-- On THEN reduce production value_expr -> constr_longident simple_expr
-- On STRING reduce production value_expr -> constr_longident simple_expr
-- On STAR reduce production value_expr -> constr_longident simple_expr
-- On SHARP reduce production value_expr -> constr_longident simple_expr
-- On SEMISEMI reduce production value_expr -> constr_longident simple_expr
-- On SEMI reduce production value_expr -> constr_longident simple_expr
-- On RPAREN reduce production value_expr -> constr_longident simple_expr
-- On RAISE reduce production value_expr -> constr_longident simple_expr
-- On QUESTION reduce production value_expr -> constr_longident simple_expr
-- On PREFIXOP reduce production value_expr -> constr_longident simple_expr
-- On PLUS reduce production value_expr -> constr_longident simple_expr
-- On OPEN reduce production value_expr -> constr_longident simple_expr
-- On MODULE reduce production value_expr -> constr_longident simple_expr
-- On MINUSGREATER reduce production value_expr -> constr_longident simple_expr
-- On MINUS reduce production value_expr -> constr_longident simple_expr
-- On MATCH reduce production value_expr -> constr_longident simple_expr
-- On LVECTOR reduce production value_expr -> constr_longident simple_expr
-- On LPAREN reduce production value_expr -> constr_longident simple_expr
-- On LMATRIX reduce production value_expr -> constr_longident simple_expr
-- On LIDENT reduce production value_expr -> constr_longident simple_expr
-- On LET reduce production value_expr -> constr_longident simple_expr
-- On LBRACKBAR reduce production value_expr -> constr_longident simple_expr
-- On LBRACK reduce production value_expr -> constr_longident simple_expr
-- On LBRACE reduce production value_expr -> constr_longident simple_expr
-- On LAZY reduce production value_expr -> constr_longident simple_expr
-- On INT reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP5R reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP5L reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP4R reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP4L reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP3R reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP3L reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP2R reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP2L reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP1R reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP1L reduce production value_expr -> constr_longident simple_expr
-- On IN reduce production value_expr -> constr_longident simple_expr
-- On IMAGINARY reduce production value_expr -> constr_longident simple_expr
-- On IF reduce production value_expr -> constr_longident simple_expr
-- On FUNCTION reduce production value_expr -> constr_longident simple_expr
-- On FUN reduce production value_expr -> constr_longident simple_expr
-- On FOR reduce production value_expr -> constr_longident simple_expr
-- On FLOAT reduce production value_expr -> constr_longident simple_expr
-- On EXCEPTION reduce production value_expr -> constr_longident simple_expr
-- On EQ reduce production value_expr -> constr_longident simple_expr
-- On EOF reduce production value_expr -> constr_longident simple_expr
-- On ELSE reduce production value_expr -> constr_longident simple_expr
-- On DOWNTO reduce production value_expr -> constr_longident simple_expr
-- On DONE reduce production value_expr -> constr_longident simple_expr
-- On DOLLAR reduce production value_expr -> constr_longident simple_expr
-- On DO reduce production value_expr -> constr_longident simple_expr
-- On COMMA reduce production value_expr -> constr_longident simple_expr
-- On COLONEQUAL reduce production value_expr -> constr_longident simple_expr
-- On COLONCOLON reduce production value_expr -> constr_longident simple_expr
-- On COLON reduce production value_expr -> constr_longident simple_expr
-- On CHAR reduce production value_expr -> constr_longident simple_expr
-- On CASE reduce production value_expr -> constr_longident simple_expr
-- On BELOW reduce production value_expr -> constr_longident simple_expr
-- On BEGIN reduce production value_expr -> constr_longident simple_expr
-- On BARBAR reduce production value_expr -> constr_longident simple_expr
-- On BAR reduce production value_expr -> constr_longident simple_expr
-- On ASSERT reduce production value_expr -> constr_longident simple_expr
-- On AND reduce production value_expr -> constr_longident simple_expr
-- On AMPERAMPER reduce production value_expr -> constr_longident simple_expr
-- On ABOVE reduce production value_expr -> constr_longident simple_expr

State 433:
value_expr -> expr INFIXOP5L . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 434
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 434:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP5L expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On INFIXOP5R shift to state 429
-- On WITH reduce production value_expr -> expr INFIXOP5L expr
-- On WHILE reduce production value_expr -> expr INFIXOP5L expr
-- On UIDENT reduce production value_expr -> expr INFIXOP5L expr
-- On TYPE reduce production value_expr -> expr INFIXOP5L expr
-- On TRY reduce production value_expr -> expr INFIXOP5L expr
-- On TO reduce production value_expr -> expr INFIXOP5L expr
-- On THEN reduce production value_expr -> expr INFIXOP5L expr
-- On STRING reduce production value_expr -> expr INFIXOP5L expr
-- On STAR reduce production value_expr -> expr INFIXOP5L expr
-- On SHARP reduce production value_expr -> expr INFIXOP5L expr
-- On SEMISEMI reduce production value_expr -> expr INFIXOP5L expr
-- On SEMI reduce production value_expr -> expr INFIXOP5L expr
-- On RPAREN reduce production value_expr -> expr INFIXOP5L expr
-- On RAISE reduce production value_expr -> expr INFIXOP5L expr
-- On QUESTION reduce production value_expr -> expr INFIXOP5L expr
-- On PREFIXOP reduce production value_expr -> expr INFIXOP5L expr
-- On PLUS reduce production value_expr -> expr INFIXOP5L expr
-- On OPEN reduce production value_expr -> expr INFIXOP5L expr
-- On MODULE reduce production value_expr -> expr INFIXOP5L expr
-- On MINUSGREATER reduce production value_expr -> expr INFIXOP5L expr
-- On MINUS reduce production value_expr -> expr INFIXOP5L expr
-- On MATCH reduce production value_expr -> expr INFIXOP5L expr
-- On LVECTOR reduce production value_expr -> expr INFIXOP5L expr
-- On LPAREN reduce production value_expr -> expr INFIXOP5L expr
-- On LMATRIX reduce production value_expr -> expr INFIXOP5L expr
-- On LIDENT reduce production value_expr -> expr INFIXOP5L expr
-- On LET reduce production value_expr -> expr INFIXOP5L expr
-- On LBRACKBAR reduce production value_expr -> expr INFIXOP5L expr
-- On LBRACK reduce production value_expr -> expr INFIXOP5L expr
-- On LBRACE reduce production value_expr -> expr INFIXOP5L expr
-- On LAZY reduce production value_expr -> expr INFIXOP5L expr
-- On INT reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP5L reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP4R reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP4L reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP3R reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP3L reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP2R reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP5L expr
-- On IN reduce production value_expr -> expr INFIXOP5L expr
-- On IMAGINARY reduce production value_expr -> expr INFIXOP5L expr
-- On IF reduce production value_expr -> expr INFIXOP5L expr
-- On FUNCTION reduce production value_expr -> expr INFIXOP5L expr
-- On FUN reduce production value_expr -> expr INFIXOP5L expr
-- On FOR reduce production value_expr -> expr INFIXOP5L expr
-- On FLOAT reduce production value_expr -> expr INFIXOP5L expr
-- On EXCEPTION reduce production value_expr -> expr INFIXOP5L expr
-- On EQ reduce production value_expr -> expr INFIXOP5L expr
-- On EOF reduce production value_expr -> expr INFIXOP5L expr
-- On ELSE reduce production value_expr -> expr INFIXOP5L expr
-- On DOWNTO reduce production value_expr -> expr INFIXOP5L expr
-- On DONE reduce production value_expr -> expr INFIXOP5L expr
-- On DOLLAR reduce production value_expr -> expr INFIXOP5L expr
-- On DO reduce production value_expr -> expr INFIXOP5L expr
-- On COMMA reduce production value_expr -> expr INFIXOP5L expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP5L expr
-- On COLONCOLON reduce production value_expr -> expr INFIXOP5L expr
-- On COLON reduce production value_expr -> expr INFIXOP5L expr
-- On CHAR reduce production value_expr -> expr INFIXOP5L expr
-- On CASE reduce production value_expr -> expr INFIXOP5L expr
-- On BELOW reduce production value_expr -> expr INFIXOP5L expr
-- On BEGIN reduce production value_expr -> expr INFIXOP5L expr
-- On BARBAR reduce production value_expr -> expr INFIXOP5L expr
-- On BAR reduce production value_expr -> expr INFIXOP5L expr
-- On ASSERT reduce production value_expr -> expr INFIXOP5L expr
-- On AND reduce production value_expr -> expr INFIXOP5L expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP5L expr
-- On ABOVE reduce production value_expr -> expr INFIXOP5L expr
** Conflict on WHERE

State 435:
value_expr -> expr INFIXOP4R . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 436
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 436:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP4R expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On WITH reduce production value_expr -> expr INFIXOP4R expr
-- On WHILE reduce production value_expr -> expr INFIXOP4R expr
-- On UIDENT reduce production value_expr -> expr INFIXOP4R expr
-- On TYPE reduce production value_expr -> expr INFIXOP4R expr
-- On TRY reduce production value_expr -> expr INFIXOP4R expr
-- On TO reduce production value_expr -> expr INFIXOP4R expr
-- On THEN reduce production value_expr -> expr INFIXOP4R expr
-- On STRING reduce production value_expr -> expr INFIXOP4R expr
-- On STAR reduce production value_expr -> expr INFIXOP4R expr
-- On SHARP reduce production value_expr -> expr INFIXOP4R expr
-- On SEMISEMI reduce production value_expr -> expr INFIXOP4R expr
-- On SEMI reduce production value_expr -> expr INFIXOP4R expr
-- On RPAREN reduce production value_expr -> expr INFIXOP4R expr
-- On RAISE reduce production value_expr -> expr INFIXOP4R expr
-- On QUESTION reduce production value_expr -> expr INFIXOP4R expr
-- On PREFIXOP reduce production value_expr -> expr INFIXOP4R expr
-- On PLUS reduce production value_expr -> expr INFIXOP4R expr
-- On OPEN reduce production value_expr -> expr INFIXOP4R expr
-- On MODULE reduce production value_expr -> expr INFIXOP4R expr
-- On MINUSGREATER reduce production value_expr -> expr INFIXOP4R expr
-- On MINUS reduce production value_expr -> expr INFIXOP4R expr
-- On MATCH reduce production value_expr -> expr INFIXOP4R expr
-- On LVECTOR reduce production value_expr -> expr INFIXOP4R expr
-- On LPAREN reduce production value_expr -> expr INFIXOP4R expr
-- On LMATRIX reduce production value_expr -> expr INFIXOP4R expr
-- On LIDENT reduce production value_expr -> expr INFIXOP4R expr
-- On LET reduce production value_expr -> expr INFIXOP4R expr
-- On LBRACKBAR reduce production value_expr -> expr INFIXOP4R expr
-- On LBRACK reduce production value_expr -> expr INFIXOP4R expr
-- On LBRACE reduce production value_expr -> expr INFIXOP4R expr
-- On LAZY reduce production value_expr -> expr INFIXOP4R expr
-- On INT reduce production value_expr -> expr INFIXOP4R expr
-- On INFIXOP4L reduce production value_expr -> expr INFIXOP4R expr
-- On INFIXOP3R reduce production value_expr -> expr INFIXOP4R expr
-- On INFIXOP3L reduce production value_expr -> expr INFIXOP4R expr
-- On INFIXOP2R reduce production value_expr -> expr INFIXOP4R expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP4R expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP4R expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP4R expr
-- On IN reduce production value_expr -> expr INFIXOP4R expr
-- On IMAGINARY reduce production value_expr -> expr INFIXOP4R expr
-- On IF reduce production value_expr -> expr INFIXOP4R expr
-- On FUNCTION reduce production value_expr -> expr INFIXOP4R expr
-- On FUN reduce production value_expr -> expr INFIXOP4R expr
-- On FOR reduce production value_expr -> expr INFIXOP4R expr
-- On FLOAT reduce production value_expr -> expr INFIXOP4R expr
-- On EXCEPTION reduce production value_expr -> expr INFIXOP4R expr
-- On EQ reduce production value_expr -> expr INFIXOP4R expr
-- On EOF reduce production value_expr -> expr INFIXOP4R expr
-- On ELSE reduce production value_expr -> expr INFIXOP4R expr
-- On DOWNTO reduce production value_expr -> expr INFIXOP4R expr
-- On DONE reduce production value_expr -> expr INFIXOP4R expr
-- On DOLLAR reduce production value_expr -> expr INFIXOP4R expr
-- On DO reduce production value_expr -> expr INFIXOP4R expr
-- On COMMA reduce production value_expr -> expr INFIXOP4R expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP4R expr
-- On COLONCOLON reduce production value_expr -> expr INFIXOP4R expr
-- On COLON reduce production value_expr -> expr INFIXOP4R expr
-- On CHAR reduce production value_expr -> expr INFIXOP4R expr
-- On CASE reduce production value_expr -> expr INFIXOP4R expr
-- On BELOW reduce production value_expr -> expr INFIXOP4R expr
-- On BEGIN reduce production value_expr -> expr INFIXOP4R expr
-- On BARBAR reduce production value_expr -> expr INFIXOP4R expr
-- On BAR reduce production value_expr -> expr INFIXOP4R expr
-- On ASSERT reduce production value_expr -> expr INFIXOP4R expr
-- On AND reduce production value_expr -> expr INFIXOP4R expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP4R expr
-- On ABOVE reduce production value_expr -> expr INFIXOP4R expr
** Conflict on WHERE

State 437:
value_expr -> expr QUESTION . expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 438
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 438:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr QUESTION expr . COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On COLON shift to state 467
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 439:
value_expr -> expr PLUS . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 440
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 440:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr PLUS expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On WITH reduce production value_expr -> expr PLUS expr
-- On WHILE reduce production value_expr -> expr PLUS expr
-- On UIDENT reduce production value_expr -> expr PLUS expr
-- On TYPE reduce production value_expr -> expr PLUS expr
-- On TRY reduce production value_expr -> expr PLUS expr
-- On TO reduce production value_expr -> expr PLUS expr
-- On THEN reduce production value_expr -> expr PLUS expr
-- On STRING reduce production value_expr -> expr PLUS expr
-- On SHARP reduce production value_expr -> expr PLUS expr
-- On SEMISEMI reduce production value_expr -> expr PLUS expr
-- On SEMI reduce production value_expr -> expr PLUS expr
-- On RPAREN reduce production value_expr -> expr PLUS expr
-- On RAISE reduce production value_expr -> expr PLUS expr
-- On QUESTION reduce production value_expr -> expr PLUS expr
-- On PREFIXOP reduce production value_expr -> expr PLUS expr
-- On PLUS reduce production value_expr -> expr PLUS expr
-- On OPEN reduce production value_expr -> expr PLUS expr
-- On MODULE reduce production value_expr -> expr PLUS expr
-- On MINUSGREATER reduce production value_expr -> expr PLUS expr
-- On MINUS reduce production value_expr -> expr PLUS expr
-- On MATCH reduce production value_expr -> expr PLUS expr
-- On LVECTOR reduce production value_expr -> expr PLUS expr
-- On LPAREN reduce production value_expr -> expr PLUS expr
-- On LMATRIX reduce production value_expr -> expr PLUS expr
-- On LIDENT reduce production value_expr -> expr PLUS expr
-- On LET reduce production value_expr -> expr PLUS expr
-- On LBRACKBAR reduce production value_expr -> expr PLUS expr
-- On LBRACK reduce production value_expr -> expr PLUS expr
-- On LBRACE reduce production value_expr -> expr PLUS expr
-- On LAZY reduce production value_expr -> expr PLUS expr
-- On INT reduce production value_expr -> expr PLUS expr
-- On INFIXOP3L reduce production value_expr -> expr PLUS expr
-- On INFIXOP2R reduce production value_expr -> expr PLUS expr
-- On INFIXOP2L reduce production value_expr -> expr PLUS expr
-- On INFIXOP1R reduce production value_expr -> expr PLUS expr
-- On INFIXOP1L reduce production value_expr -> expr PLUS expr
-- On IN reduce production value_expr -> expr PLUS expr
-- On IMAGINARY reduce production value_expr -> expr PLUS expr
-- On IF reduce production value_expr -> expr PLUS expr
-- On FUNCTION reduce production value_expr -> expr PLUS expr
-- On FUN reduce production value_expr -> expr PLUS expr
-- On FOR reduce production value_expr -> expr PLUS expr
-- On FLOAT reduce production value_expr -> expr PLUS expr
-- On EXCEPTION reduce production value_expr -> expr PLUS expr
-- On EQ reduce production value_expr -> expr PLUS expr
-- On EOF reduce production value_expr -> expr PLUS expr
-- On ELSE reduce production value_expr -> expr PLUS expr
-- On DOWNTO reduce production value_expr -> expr PLUS expr
-- On DONE reduce production value_expr -> expr PLUS expr
-- On DOLLAR reduce production value_expr -> expr PLUS expr
-- On DO reduce production value_expr -> expr PLUS expr
-- On COMMA reduce production value_expr -> expr PLUS expr
-- On COLONEQUAL reduce production value_expr -> expr PLUS expr
-- On COLONCOLON reduce production value_expr -> expr PLUS expr
-- On COLON reduce production value_expr -> expr PLUS expr
-- On CHAR reduce production value_expr -> expr PLUS expr
-- On CASE reduce production value_expr -> expr PLUS expr
-- On BELOW reduce production value_expr -> expr PLUS expr
-- On BEGIN reduce production value_expr -> expr PLUS expr
-- On BARBAR reduce production value_expr -> expr PLUS expr
-- On BAR reduce production value_expr -> expr PLUS expr
-- On ASSERT reduce production value_expr -> expr PLUS expr
-- On AND reduce production value_expr -> expr PLUS expr
-- On AMPERAMPER reduce production value_expr -> expr PLUS expr
-- On ABOVE reduce production value_expr -> expr PLUS expr
** Conflict on WHERE

State 441:
value_expr -> expr INFIXOP4L . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 442
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 442:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP4L expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On WITH reduce production value_expr -> expr INFIXOP4L expr
-- On WHILE reduce production value_expr -> expr INFIXOP4L expr
-- On UIDENT reduce production value_expr -> expr INFIXOP4L expr
-- On TYPE reduce production value_expr -> expr INFIXOP4L expr
-- On TRY reduce production value_expr -> expr INFIXOP4L expr
-- On TO reduce production value_expr -> expr INFIXOP4L expr
-- On THEN reduce production value_expr -> expr INFIXOP4L expr
-- On STRING reduce production value_expr -> expr INFIXOP4L expr
-- On STAR reduce production value_expr -> expr INFIXOP4L expr
-- On SHARP reduce production value_expr -> expr INFIXOP4L expr
-- On SEMISEMI reduce production value_expr -> expr INFIXOP4L expr
-- On SEMI reduce production value_expr -> expr INFIXOP4L expr
-- On RPAREN reduce production value_expr -> expr INFIXOP4L expr
-- On RAISE reduce production value_expr -> expr INFIXOP4L expr
-- On QUESTION reduce production value_expr -> expr INFIXOP4L expr
-- On PREFIXOP reduce production value_expr -> expr INFIXOP4L expr
-- On PLUS reduce production value_expr -> expr INFIXOP4L expr
-- On OPEN reduce production value_expr -> expr INFIXOP4L expr
-- On MODULE reduce production value_expr -> expr INFIXOP4L expr
-- On MINUSGREATER reduce production value_expr -> expr INFIXOP4L expr
-- On MINUS reduce production value_expr -> expr INFIXOP4L expr
-- On MATCH reduce production value_expr -> expr INFIXOP4L expr
-- On LVECTOR reduce production value_expr -> expr INFIXOP4L expr
-- On LPAREN reduce production value_expr -> expr INFIXOP4L expr
-- On LMATRIX reduce production value_expr -> expr INFIXOP4L expr
-- On LIDENT reduce production value_expr -> expr INFIXOP4L expr
-- On LET reduce production value_expr -> expr INFIXOP4L expr
-- On LBRACKBAR reduce production value_expr -> expr INFIXOP4L expr
-- On LBRACK reduce production value_expr -> expr INFIXOP4L expr
-- On LBRACE reduce production value_expr -> expr INFIXOP4L expr
-- On LAZY reduce production value_expr -> expr INFIXOP4L expr
-- On INT reduce production value_expr -> expr INFIXOP4L expr
-- On INFIXOP4L reduce production value_expr -> expr INFIXOP4L expr
-- On INFIXOP3R reduce production value_expr -> expr INFIXOP4L expr
-- On INFIXOP3L reduce production value_expr -> expr INFIXOP4L expr
-- On INFIXOP2R reduce production value_expr -> expr INFIXOP4L expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP4L expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP4L expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP4L expr
-- On IN reduce production value_expr -> expr INFIXOP4L expr
-- On IMAGINARY reduce production value_expr -> expr INFIXOP4L expr
-- On IF reduce production value_expr -> expr INFIXOP4L expr
-- On FUNCTION reduce production value_expr -> expr INFIXOP4L expr
-- On FUN reduce production value_expr -> expr INFIXOP4L expr
-- On FOR reduce production value_expr -> expr INFIXOP4L expr
-- On FLOAT reduce production value_expr -> expr INFIXOP4L expr
-- On EXCEPTION reduce production value_expr -> expr INFIXOP4L expr
-- On EQ reduce production value_expr -> expr INFIXOP4L expr
-- On EOF reduce production value_expr -> expr INFIXOP4L expr
-- On ELSE reduce production value_expr -> expr INFIXOP4L expr
-- On DOWNTO reduce production value_expr -> expr INFIXOP4L expr
-- On DONE reduce production value_expr -> expr INFIXOP4L expr
-- On DOLLAR reduce production value_expr -> expr INFIXOP4L expr
-- On DO reduce production value_expr -> expr INFIXOP4L expr
-- On COMMA reduce production value_expr -> expr INFIXOP4L expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP4L expr
-- On COLONCOLON reduce production value_expr -> expr INFIXOP4L expr
-- On COLON reduce production value_expr -> expr INFIXOP4L expr
-- On CHAR reduce production value_expr -> expr INFIXOP4L expr
-- On CASE reduce production value_expr -> expr INFIXOP4L expr
-- On BELOW reduce production value_expr -> expr INFIXOP4L expr
-- On BEGIN reduce production value_expr -> expr INFIXOP4L expr
-- On BARBAR reduce production value_expr -> expr INFIXOP4L expr
-- On BAR reduce production value_expr -> expr INFIXOP4L expr
-- On ASSERT reduce production value_expr -> expr INFIXOP4L expr
-- On AND reduce production value_expr -> expr INFIXOP4L expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP4L expr
-- On ABOVE reduce production value_expr -> expr INFIXOP4L expr
** Conflict on WHERE

State 443:
value_expr -> expr INFIXOP3R . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 444
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 444:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP3R expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On WITH reduce production value_expr -> expr INFIXOP3R expr
-- On WHILE reduce production value_expr -> expr INFIXOP3R expr
-- On UIDENT reduce production value_expr -> expr INFIXOP3R expr
-- On TYPE reduce production value_expr -> expr INFIXOP3R expr
-- On TRY reduce production value_expr -> expr INFIXOP3R expr
-- On TO reduce production value_expr -> expr INFIXOP3R expr
-- On THEN reduce production value_expr -> expr INFIXOP3R expr
-- On STRING reduce production value_expr -> expr INFIXOP3R expr
-- On SHARP reduce production value_expr -> expr INFIXOP3R expr
-- On SEMISEMI reduce production value_expr -> expr INFIXOP3R expr
-- On SEMI reduce production value_expr -> expr INFIXOP3R expr
-- On RPAREN reduce production value_expr -> expr INFIXOP3R expr
-- On RAISE reduce production value_expr -> expr INFIXOP3R expr
-- On QUESTION reduce production value_expr -> expr INFIXOP3R expr
-- On PREFIXOP reduce production value_expr -> expr INFIXOP3R expr
-- On PLUS reduce production value_expr -> expr INFIXOP3R expr
-- On OPEN reduce production value_expr -> expr INFIXOP3R expr
-- On MODULE reduce production value_expr -> expr INFIXOP3R expr
-- On MINUSGREATER reduce production value_expr -> expr INFIXOP3R expr
-- On MINUS reduce production value_expr -> expr INFIXOP3R expr
-- On MATCH reduce production value_expr -> expr INFIXOP3R expr
-- On LVECTOR reduce production value_expr -> expr INFIXOP3R expr
-- On LPAREN reduce production value_expr -> expr INFIXOP3R expr
-- On LMATRIX reduce production value_expr -> expr INFIXOP3R expr
-- On LIDENT reduce production value_expr -> expr INFIXOP3R expr
-- On LET reduce production value_expr -> expr INFIXOP3R expr
-- On LBRACKBAR reduce production value_expr -> expr INFIXOP3R expr
-- On LBRACK reduce production value_expr -> expr INFIXOP3R expr
-- On LBRACE reduce production value_expr -> expr INFIXOP3R expr
-- On LAZY reduce production value_expr -> expr INFIXOP3R expr
-- On INT reduce production value_expr -> expr INFIXOP3R expr
-- On INFIXOP3L reduce production value_expr -> expr INFIXOP3R expr
-- On INFIXOP2R reduce production value_expr -> expr INFIXOP3R expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP3R expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP3R expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP3R expr
-- On IN reduce production value_expr -> expr INFIXOP3R expr
-- On IMAGINARY reduce production value_expr -> expr INFIXOP3R expr
-- On IF reduce production value_expr -> expr INFIXOP3R expr
-- On FUNCTION reduce production value_expr -> expr INFIXOP3R expr
-- On FUN reduce production value_expr -> expr INFIXOP3R expr
-- On FOR reduce production value_expr -> expr INFIXOP3R expr
-- On FLOAT reduce production value_expr -> expr INFIXOP3R expr
-- On EXCEPTION reduce production value_expr -> expr INFIXOP3R expr
-- On EQ reduce production value_expr -> expr INFIXOP3R expr
-- On EOF reduce production value_expr -> expr INFIXOP3R expr
-- On ELSE reduce production value_expr -> expr INFIXOP3R expr
-- On DOWNTO reduce production value_expr -> expr INFIXOP3R expr
-- On DONE reduce production value_expr -> expr INFIXOP3R expr
-- On DOLLAR reduce production value_expr -> expr INFIXOP3R expr
-- On DO reduce production value_expr -> expr INFIXOP3R expr
-- On COMMA reduce production value_expr -> expr INFIXOP3R expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP3R expr
-- On COLONCOLON reduce production value_expr -> expr INFIXOP3R expr
-- On COLON reduce production value_expr -> expr INFIXOP3R expr
-- On CHAR reduce production value_expr -> expr INFIXOP3R expr
-- On CASE reduce production value_expr -> expr INFIXOP3R expr
-- On BELOW reduce production value_expr -> expr INFIXOP3R expr
-- On BEGIN reduce production value_expr -> expr INFIXOP3R expr
-- On BARBAR reduce production value_expr -> expr INFIXOP3R expr
-- On BAR reduce production value_expr -> expr INFIXOP3R expr
-- On ASSERT reduce production value_expr -> expr INFIXOP3R expr
-- On AND reduce production value_expr -> expr INFIXOP3R expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP3R expr
-- On ABOVE reduce production value_expr -> expr INFIXOP3R expr
** Conflict on WHERE

State 445:
value_expr -> expr MINUS . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 446
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 446:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr MINUS expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On WITH reduce production value_expr -> expr MINUS expr
-- On WHILE reduce production value_expr -> expr MINUS expr
-- On UIDENT reduce production value_expr -> expr MINUS expr
-- On TYPE reduce production value_expr -> expr MINUS expr
-- On TRY reduce production value_expr -> expr MINUS expr
-- On TO reduce production value_expr -> expr MINUS expr
-- On THEN reduce production value_expr -> expr MINUS expr
-- On STRING reduce production value_expr -> expr MINUS expr
-- On SHARP reduce production value_expr -> expr MINUS expr
-- On SEMISEMI reduce production value_expr -> expr MINUS expr
-- On SEMI reduce production value_expr -> expr MINUS expr
-- On RPAREN reduce production value_expr -> expr MINUS expr
-- On RAISE reduce production value_expr -> expr MINUS expr
-- On QUESTION reduce production value_expr -> expr MINUS expr
-- On PREFIXOP reduce production value_expr -> expr MINUS expr
-- On PLUS reduce production value_expr -> expr MINUS expr
-- On OPEN reduce production value_expr -> expr MINUS expr
-- On MODULE reduce production value_expr -> expr MINUS expr
-- On MINUSGREATER reduce production value_expr -> expr MINUS expr
-- On MINUS reduce production value_expr -> expr MINUS expr
-- On MATCH reduce production value_expr -> expr MINUS expr
-- On LVECTOR reduce production value_expr -> expr MINUS expr
-- On LPAREN reduce production value_expr -> expr MINUS expr
-- On LMATRIX reduce production value_expr -> expr MINUS expr
-- On LIDENT reduce production value_expr -> expr MINUS expr
-- On LET reduce production value_expr -> expr MINUS expr
-- On LBRACKBAR reduce production value_expr -> expr MINUS expr
-- On LBRACK reduce production value_expr -> expr MINUS expr
-- On LBRACE reduce production value_expr -> expr MINUS expr
-- On LAZY reduce production value_expr -> expr MINUS expr
-- On INT reduce production value_expr -> expr MINUS expr
-- On INFIXOP3L reduce production value_expr -> expr MINUS expr
-- On INFIXOP2R reduce production value_expr -> expr MINUS expr
-- On INFIXOP2L reduce production value_expr -> expr MINUS expr
-- On INFIXOP1R reduce production value_expr -> expr MINUS expr
-- On INFIXOP1L reduce production value_expr -> expr MINUS expr
-- On IN reduce production value_expr -> expr MINUS expr
-- On IMAGINARY reduce production value_expr -> expr MINUS expr
-- On IF reduce production value_expr -> expr MINUS expr
-- On FUNCTION reduce production value_expr -> expr MINUS expr
-- On FUN reduce production value_expr -> expr MINUS expr
-- On FOR reduce production value_expr -> expr MINUS expr
-- On FLOAT reduce production value_expr -> expr MINUS expr
-- On EXCEPTION reduce production value_expr -> expr MINUS expr
-- On EQ reduce production value_expr -> expr MINUS expr
-- On EOF reduce production value_expr -> expr MINUS expr
-- On ELSE reduce production value_expr -> expr MINUS expr
-- On DOWNTO reduce production value_expr -> expr MINUS expr
-- On DONE reduce production value_expr -> expr MINUS expr
-- On DOLLAR reduce production value_expr -> expr MINUS expr
-- On DO reduce production value_expr -> expr MINUS expr
-- On COMMA reduce production value_expr -> expr MINUS expr
-- On COLONEQUAL reduce production value_expr -> expr MINUS expr
-- On COLONCOLON reduce production value_expr -> expr MINUS expr
-- On COLON reduce production value_expr -> expr MINUS expr
-- On CHAR reduce production value_expr -> expr MINUS expr
-- On CASE reduce production value_expr -> expr MINUS expr
-- On BELOW reduce production value_expr -> expr MINUS expr
-- On BEGIN reduce production value_expr -> expr MINUS expr
-- On BARBAR reduce production value_expr -> expr MINUS expr
-- On BAR reduce production value_expr -> expr MINUS expr
-- On ASSERT reduce production value_expr -> expr MINUS expr
-- On AND reduce production value_expr -> expr MINUS expr
-- On AMPERAMPER reduce production value_expr -> expr MINUS expr
-- On ABOVE reduce production value_expr -> expr MINUS expr
** Conflict on WHERE

State 447:
value_expr -> expr INFIXOP3L . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 448
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 448:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP3L expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On WITH reduce production value_expr -> expr INFIXOP3L expr
-- On WHILE reduce production value_expr -> expr INFIXOP3L expr
-- On UIDENT reduce production value_expr -> expr INFIXOP3L expr
-- On TYPE reduce production value_expr -> expr INFIXOP3L expr
-- On TRY reduce production value_expr -> expr INFIXOP3L expr
-- On TO reduce production value_expr -> expr INFIXOP3L expr
-- On THEN reduce production value_expr -> expr INFIXOP3L expr
-- On STRING reduce production value_expr -> expr INFIXOP3L expr
-- On SHARP reduce production value_expr -> expr INFIXOP3L expr
-- On SEMISEMI reduce production value_expr -> expr INFIXOP3L expr
-- On SEMI reduce production value_expr -> expr INFIXOP3L expr
-- On RPAREN reduce production value_expr -> expr INFIXOP3L expr
-- On RAISE reduce production value_expr -> expr INFIXOP3L expr
-- On QUESTION reduce production value_expr -> expr INFIXOP3L expr
-- On PREFIXOP reduce production value_expr -> expr INFIXOP3L expr
-- On PLUS reduce production value_expr -> expr INFIXOP3L expr
-- On OPEN reduce production value_expr -> expr INFIXOP3L expr
-- On MODULE reduce production value_expr -> expr INFIXOP3L expr
-- On MINUSGREATER reduce production value_expr -> expr INFIXOP3L expr
-- On MINUS reduce production value_expr -> expr INFIXOP3L expr
-- On MATCH reduce production value_expr -> expr INFIXOP3L expr
-- On LVECTOR reduce production value_expr -> expr INFIXOP3L expr
-- On LPAREN reduce production value_expr -> expr INFIXOP3L expr
-- On LMATRIX reduce production value_expr -> expr INFIXOP3L expr
-- On LIDENT reduce production value_expr -> expr INFIXOP3L expr
-- On LET reduce production value_expr -> expr INFIXOP3L expr
-- On LBRACKBAR reduce production value_expr -> expr INFIXOP3L expr
-- On LBRACK reduce production value_expr -> expr INFIXOP3L expr
-- On LBRACE reduce production value_expr -> expr INFIXOP3L expr
-- On LAZY reduce production value_expr -> expr INFIXOP3L expr
-- On INT reduce production value_expr -> expr INFIXOP3L expr
-- On INFIXOP3L reduce production value_expr -> expr INFIXOP3L expr
-- On INFIXOP2R reduce production value_expr -> expr INFIXOP3L expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP3L expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP3L expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP3L expr
-- On IN reduce production value_expr -> expr INFIXOP3L expr
-- On IMAGINARY reduce production value_expr -> expr INFIXOP3L expr
-- On IF reduce production value_expr -> expr INFIXOP3L expr
-- On FUNCTION reduce production value_expr -> expr INFIXOP3L expr
-- On FUN reduce production value_expr -> expr INFIXOP3L expr
-- On FOR reduce production value_expr -> expr INFIXOP3L expr
-- On FLOAT reduce production value_expr -> expr INFIXOP3L expr
-- On EXCEPTION reduce production value_expr -> expr INFIXOP3L expr
-- On EQ reduce production value_expr -> expr INFIXOP3L expr
-- On EOF reduce production value_expr -> expr INFIXOP3L expr
-- On ELSE reduce production value_expr -> expr INFIXOP3L expr
-- On DOWNTO reduce production value_expr -> expr INFIXOP3L expr
-- On DONE reduce production value_expr -> expr INFIXOP3L expr
-- On DOLLAR reduce production value_expr -> expr INFIXOP3L expr
-- On DO reduce production value_expr -> expr INFIXOP3L expr
-- On COMMA reduce production value_expr -> expr INFIXOP3L expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP3L expr
-- On COLONCOLON reduce production value_expr -> expr INFIXOP3L expr
-- On COLON reduce production value_expr -> expr INFIXOP3L expr
-- On CHAR reduce production value_expr -> expr INFIXOP3L expr
-- On CASE reduce production value_expr -> expr INFIXOP3L expr
-- On BELOW reduce production value_expr -> expr INFIXOP3L expr
-- On BEGIN reduce production value_expr -> expr INFIXOP3L expr
-- On BARBAR reduce production value_expr -> expr INFIXOP3L expr
-- On BAR reduce production value_expr -> expr INFIXOP3L expr
-- On ASSERT reduce production value_expr -> expr INFIXOP3L expr
-- On AND reduce production value_expr -> expr INFIXOP3L expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP3L expr
-- On ABOVE reduce production value_expr -> expr INFIXOP3L expr
** Conflict on WHERE

State 449:
value_expr -> expr INFIXOP2R . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 450
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 450:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP2R expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On COLONCOLON shift to state 451
-- On WITH reduce production value_expr -> expr INFIXOP2R expr
-- On WHILE reduce production value_expr -> expr INFIXOP2R expr
-- On UIDENT reduce production value_expr -> expr INFIXOP2R expr
-- On TYPE reduce production value_expr -> expr INFIXOP2R expr
-- On TRY reduce production value_expr -> expr INFIXOP2R expr
-- On TO reduce production value_expr -> expr INFIXOP2R expr
-- On THEN reduce production value_expr -> expr INFIXOP2R expr
-- On STRING reduce production value_expr -> expr INFIXOP2R expr
-- On SHARP reduce production value_expr -> expr INFIXOP2R expr
-- On SEMISEMI reduce production value_expr -> expr INFIXOP2R expr
-- On SEMI reduce production value_expr -> expr INFIXOP2R expr
-- On RPAREN reduce production value_expr -> expr INFIXOP2R expr
-- On RAISE reduce production value_expr -> expr INFIXOP2R expr
-- On QUESTION reduce production value_expr -> expr INFIXOP2R expr
-- On PREFIXOP reduce production value_expr -> expr INFIXOP2R expr
-- On OPEN reduce production value_expr -> expr INFIXOP2R expr
-- On MODULE reduce production value_expr -> expr INFIXOP2R expr
-- On MINUSGREATER reduce production value_expr -> expr INFIXOP2R expr
-- On MATCH reduce production value_expr -> expr INFIXOP2R expr
-- On LVECTOR reduce production value_expr -> expr INFIXOP2R expr
-- On LPAREN reduce production value_expr -> expr INFIXOP2R expr
-- On LMATRIX reduce production value_expr -> expr INFIXOP2R expr
-- On LIDENT reduce production value_expr -> expr INFIXOP2R expr
-- On LET reduce production value_expr -> expr INFIXOP2R expr
-- On LBRACKBAR reduce production value_expr -> expr INFIXOP2R expr
-- On LBRACK reduce production value_expr -> expr INFIXOP2R expr
-- On LBRACE reduce production value_expr -> expr INFIXOP2R expr
-- On LAZY reduce production value_expr -> expr INFIXOP2R expr
-- On INT reduce production value_expr -> expr INFIXOP2R expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP2R expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP2R expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP2R expr
-- On IN reduce production value_expr -> expr INFIXOP2R expr
-- On IMAGINARY reduce production value_expr -> expr INFIXOP2R expr
-- On IF reduce production value_expr -> expr INFIXOP2R expr
-- On FUNCTION reduce production value_expr -> expr INFIXOP2R expr
-- On FUN reduce production value_expr -> expr INFIXOP2R expr
-- On FOR reduce production value_expr -> expr INFIXOP2R expr
-- On FLOAT reduce production value_expr -> expr INFIXOP2R expr
-- On EXCEPTION reduce production value_expr -> expr INFIXOP2R expr
-- On EQ reduce production value_expr -> expr INFIXOP2R expr
-- On EOF reduce production value_expr -> expr INFIXOP2R expr
-- On ELSE reduce production value_expr -> expr INFIXOP2R expr
-- On DOWNTO reduce production value_expr -> expr INFIXOP2R expr
-- On DONE reduce production value_expr -> expr INFIXOP2R expr
-- On DOLLAR reduce production value_expr -> expr INFIXOP2R expr
-- On DO reduce production value_expr -> expr INFIXOP2R expr
-- On COMMA reduce production value_expr -> expr INFIXOP2R expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP2R expr
-- On COLON reduce production value_expr -> expr INFIXOP2R expr
-- On CHAR reduce production value_expr -> expr INFIXOP2R expr
-- On CASE reduce production value_expr -> expr INFIXOP2R expr
-- On BELOW reduce production value_expr -> expr INFIXOP2R expr
-- On BEGIN reduce production value_expr -> expr INFIXOP2R expr
-- On BARBAR reduce production value_expr -> expr INFIXOP2R expr
-- On BAR reduce production value_expr -> expr INFIXOP2R expr
-- On ASSERT reduce production value_expr -> expr INFIXOP2R expr
-- On AND reduce production value_expr -> expr INFIXOP2R expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP2R expr
-- On ABOVE reduce production value_expr -> expr INFIXOP2R expr
** Conflict on WHERE

State 451:
value_expr -> expr COLONCOLON . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 452
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 452:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr COLONCOLON expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On COLONCOLON shift to state 451
-- On WITH reduce production value_expr -> expr COLONCOLON expr
-- On WHILE reduce production value_expr -> expr COLONCOLON expr
-- On UIDENT reduce production value_expr -> expr COLONCOLON expr
-- On TYPE reduce production value_expr -> expr COLONCOLON expr
-- On TRY reduce production value_expr -> expr COLONCOLON expr
-- On TO reduce production value_expr -> expr COLONCOLON expr
-- On THEN reduce production value_expr -> expr COLONCOLON expr
-- On STRING reduce production value_expr -> expr COLONCOLON expr
-- On SHARP reduce production value_expr -> expr COLONCOLON expr
-- On SEMISEMI reduce production value_expr -> expr COLONCOLON expr
-- On SEMI reduce production value_expr -> expr COLONCOLON expr
-- On RPAREN reduce production value_expr -> expr COLONCOLON expr
-- On RAISE reduce production value_expr -> expr COLONCOLON expr
-- On QUESTION reduce production value_expr -> expr COLONCOLON expr
-- On PREFIXOP reduce production value_expr -> expr COLONCOLON expr
-- On OPEN reduce production value_expr -> expr COLONCOLON expr
-- On MODULE reduce production value_expr -> expr COLONCOLON expr
-- On MINUSGREATER reduce production value_expr -> expr COLONCOLON expr
-- On MATCH reduce production value_expr -> expr COLONCOLON expr
-- On LVECTOR reduce production value_expr -> expr COLONCOLON expr
-- On LPAREN reduce production value_expr -> expr COLONCOLON expr
-- On LMATRIX reduce production value_expr -> expr COLONCOLON expr
-- On LIDENT reduce production value_expr -> expr COLONCOLON expr
-- On LET reduce production value_expr -> expr COLONCOLON expr
-- On LBRACKBAR reduce production value_expr -> expr COLONCOLON expr
-- On LBRACK reduce production value_expr -> expr COLONCOLON expr
-- On LBRACE reduce production value_expr -> expr COLONCOLON expr
-- On LAZY reduce production value_expr -> expr COLONCOLON expr
-- On INT reduce production value_expr -> expr COLONCOLON expr
-- On INFIXOP2R reduce production value_expr -> expr COLONCOLON expr
-- On INFIXOP2L reduce production value_expr -> expr COLONCOLON expr
-- On INFIXOP1R reduce production value_expr -> expr COLONCOLON expr
-- On INFIXOP1L reduce production value_expr -> expr COLONCOLON expr
-- On IN reduce production value_expr -> expr COLONCOLON expr
-- On IMAGINARY reduce production value_expr -> expr COLONCOLON expr
-- On IF reduce production value_expr -> expr COLONCOLON expr
-- On FUNCTION reduce production value_expr -> expr COLONCOLON expr
-- On FUN reduce production value_expr -> expr COLONCOLON expr
-- On FOR reduce production value_expr -> expr COLONCOLON expr
-- On FLOAT reduce production value_expr -> expr COLONCOLON expr
-- On EXCEPTION reduce production value_expr -> expr COLONCOLON expr
-- On EQ reduce production value_expr -> expr COLONCOLON expr
-- On EOF reduce production value_expr -> expr COLONCOLON expr
-- On ELSE reduce production value_expr -> expr COLONCOLON expr
-- On DOWNTO reduce production value_expr -> expr COLONCOLON expr
-- On DONE reduce production value_expr -> expr COLONCOLON expr
-- On DOLLAR reduce production value_expr -> expr COLONCOLON expr
-- On DO reduce production value_expr -> expr COLONCOLON expr
-- On COMMA reduce production value_expr -> expr COLONCOLON expr
-- On COLONEQUAL reduce production value_expr -> expr COLONCOLON expr
-- On COLON reduce production value_expr -> expr COLONCOLON expr
-- On CHAR reduce production value_expr -> expr COLONCOLON expr
-- On CASE reduce production value_expr -> expr COLONCOLON expr
-- On BELOW reduce production value_expr -> expr COLONCOLON expr
-- On BEGIN reduce production value_expr -> expr COLONCOLON expr
-- On BARBAR reduce production value_expr -> expr COLONCOLON expr
-- On BAR reduce production value_expr -> expr COLONCOLON expr
-- On ASSERT reduce production value_expr -> expr COLONCOLON expr
-- On AND reduce production value_expr -> expr COLONCOLON expr
-- On AMPERAMPER reduce production value_expr -> expr COLONCOLON expr
-- On ABOVE reduce production value_expr -> expr COLONCOLON expr
** Conflict on WHERE

State 453:
value_expr -> expr INFIXOP2L . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 454
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 454:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP2L expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On COLONCOLON shift to state 451
-- On WITH reduce production value_expr -> expr INFIXOP2L expr
-- On WHILE reduce production value_expr -> expr INFIXOP2L expr
-- On UIDENT reduce production value_expr -> expr INFIXOP2L expr
-- On TYPE reduce production value_expr -> expr INFIXOP2L expr
-- On TRY reduce production value_expr -> expr INFIXOP2L expr
-- On TO reduce production value_expr -> expr INFIXOP2L expr
-- On THEN reduce production value_expr -> expr INFIXOP2L expr
-- On STRING reduce production value_expr -> expr INFIXOP2L expr
-- On SHARP reduce production value_expr -> expr INFIXOP2L expr
-- On SEMISEMI reduce production value_expr -> expr INFIXOP2L expr
-- On SEMI reduce production value_expr -> expr INFIXOP2L expr
-- On RPAREN reduce production value_expr -> expr INFIXOP2L expr
-- On RAISE reduce production value_expr -> expr INFIXOP2L expr
-- On QUESTION reduce production value_expr -> expr INFIXOP2L expr
-- On PREFIXOP reduce production value_expr -> expr INFIXOP2L expr
-- On OPEN reduce production value_expr -> expr INFIXOP2L expr
-- On MODULE reduce production value_expr -> expr INFIXOP2L expr
-- On MINUSGREATER reduce production value_expr -> expr INFIXOP2L expr
-- On MATCH reduce production value_expr -> expr INFIXOP2L expr
-- On LVECTOR reduce production value_expr -> expr INFIXOP2L expr
-- On LPAREN reduce production value_expr -> expr INFIXOP2L expr
-- On LMATRIX reduce production value_expr -> expr INFIXOP2L expr
-- On LIDENT reduce production value_expr -> expr INFIXOP2L expr
-- On LET reduce production value_expr -> expr INFIXOP2L expr
-- On LBRACKBAR reduce production value_expr -> expr INFIXOP2L expr
-- On LBRACK reduce production value_expr -> expr INFIXOP2L expr
-- On LBRACE reduce production value_expr -> expr INFIXOP2L expr
-- On LAZY reduce production value_expr -> expr INFIXOP2L expr
-- On INT reduce production value_expr -> expr INFIXOP2L expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP2L expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP2L expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP2L expr
-- On IN reduce production value_expr -> expr INFIXOP2L expr
-- On IMAGINARY reduce production value_expr -> expr INFIXOP2L expr
-- On IF reduce production value_expr -> expr INFIXOP2L expr
-- On FUNCTION reduce production value_expr -> expr INFIXOP2L expr
-- On FUN reduce production value_expr -> expr INFIXOP2L expr
-- On FOR reduce production value_expr -> expr INFIXOP2L expr
-- On FLOAT reduce production value_expr -> expr INFIXOP2L expr
-- On EXCEPTION reduce production value_expr -> expr INFIXOP2L expr
-- On EQ reduce production value_expr -> expr INFIXOP2L expr
-- On EOF reduce production value_expr -> expr INFIXOP2L expr
-- On ELSE reduce production value_expr -> expr INFIXOP2L expr
-- On DOWNTO reduce production value_expr -> expr INFIXOP2L expr
-- On DONE reduce production value_expr -> expr INFIXOP2L expr
-- On DOLLAR reduce production value_expr -> expr INFIXOP2L expr
-- On DO reduce production value_expr -> expr INFIXOP2L expr
-- On COMMA reduce production value_expr -> expr INFIXOP2L expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP2L expr
-- On COLON reduce production value_expr -> expr INFIXOP2L expr
-- On CHAR reduce production value_expr -> expr INFIXOP2L expr
-- On CASE reduce production value_expr -> expr INFIXOP2L expr
-- On BELOW reduce production value_expr -> expr INFIXOP2L expr
-- On BEGIN reduce production value_expr -> expr INFIXOP2L expr
-- On BARBAR reduce production value_expr -> expr INFIXOP2L expr
-- On BAR reduce production value_expr -> expr INFIXOP2L expr
-- On ASSERT reduce production value_expr -> expr INFIXOP2L expr
-- On AND reduce production value_expr -> expr INFIXOP2L expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP2L expr
-- On ABOVE reduce production value_expr -> expr INFIXOP2L expr
** Conflict on WHERE

State 455:
value_expr -> expr INFIXOP1R . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 456
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 456:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP1R expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On COLONCOLON shift to state 451
-- On WITH reduce production value_expr -> expr INFIXOP1R expr
-- On WHILE reduce production value_expr -> expr INFIXOP1R expr
-- On UIDENT reduce production value_expr -> expr INFIXOP1R expr
-- On TYPE reduce production value_expr -> expr INFIXOP1R expr
-- On TRY reduce production value_expr -> expr INFIXOP1R expr
-- On TO reduce production value_expr -> expr INFIXOP1R expr
-- On THEN reduce production value_expr -> expr INFIXOP1R expr
-- On STRING reduce production value_expr -> expr INFIXOP1R expr
-- On SHARP reduce production value_expr -> expr INFIXOP1R expr
-- On SEMISEMI reduce production value_expr -> expr INFIXOP1R expr
-- On SEMI reduce production value_expr -> expr INFIXOP1R expr
-- On RPAREN reduce production value_expr -> expr INFIXOP1R expr
-- On RAISE reduce production value_expr -> expr INFIXOP1R expr
-- On QUESTION reduce production value_expr -> expr INFIXOP1R expr
-- On PREFIXOP reduce production value_expr -> expr INFIXOP1R expr
-- On OPEN reduce production value_expr -> expr INFIXOP1R expr
-- On MODULE reduce production value_expr -> expr INFIXOP1R expr
-- On MINUSGREATER reduce production value_expr -> expr INFIXOP1R expr
-- On MATCH reduce production value_expr -> expr INFIXOP1R expr
-- On LVECTOR reduce production value_expr -> expr INFIXOP1R expr
-- On LPAREN reduce production value_expr -> expr INFIXOP1R expr
-- On LMATRIX reduce production value_expr -> expr INFIXOP1R expr
-- On LIDENT reduce production value_expr -> expr INFIXOP1R expr
-- On LET reduce production value_expr -> expr INFIXOP1R expr
-- On LBRACKBAR reduce production value_expr -> expr INFIXOP1R expr
-- On LBRACK reduce production value_expr -> expr INFIXOP1R expr
-- On LBRACE reduce production value_expr -> expr INFIXOP1R expr
-- On LAZY reduce production value_expr -> expr INFIXOP1R expr
-- On INT reduce production value_expr -> expr INFIXOP1R expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP1R expr
-- On IN reduce production value_expr -> expr INFIXOP1R expr
-- On IMAGINARY reduce production value_expr -> expr INFIXOP1R expr
-- On IF reduce production value_expr -> expr INFIXOP1R expr
-- On FUNCTION reduce production value_expr -> expr INFIXOP1R expr
-- On FUN reduce production value_expr -> expr INFIXOP1R expr
-- On FOR reduce production value_expr -> expr INFIXOP1R expr
-- On FLOAT reduce production value_expr -> expr INFIXOP1R expr
-- On EXCEPTION reduce production value_expr -> expr INFIXOP1R expr
-- On EQ reduce production value_expr -> expr INFIXOP1R expr
-- On EOF reduce production value_expr -> expr INFIXOP1R expr
-- On ELSE reduce production value_expr -> expr INFIXOP1R expr
-- On DOWNTO reduce production value_expr -> expr INFIXOP1R expr
-- On DONE reduce production value_expr -> expr INFIXOP1R expr
-- On DOLLAR reduce production value_expr -> expr INFIXOP1R expr
-- On DO reduce production value_expr -> expr INFIXOP1R expr
-- On COMMA reduce production value_expr -> expr INFIXOP1R expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP1R expr
-- On COLON reduce production value_expr -> expr INFIXOP1R expr
-- On CHAR reduce production value_expr -> expr INFIXOP1R expr
-- On CASE reduce production value_expr -> expr INFIXOP1R expr
-- On BELOW reduce production value_expr -> expr INFIXOP1R expr
-- On BEGIN reduce production value_expr -> expr INFIXOP1R expr
-- On BARBAR reduce production value_expr -> expr INFIXOP1R expr
-- On BAR reduce production value_expr -> expr INFIXOP1R expr
-- On ASSERT reduce production value_expr -> expr INFIXOP1R expr
-- On AND reduce production value_expr -> expr INFIXOP1R expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP1R expr
-- On ABOVE reduce production value_expr -> expr INFIXOP1R expr
** Conflict on WHERE

State 457:
value_expr -> expr INFIXOP1L . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 458
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 458:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr INFIXOP1L expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On COLONCOLON shift to state 451
-- On WITH reduce production value_expr -> expr INFIXOP1L expr
-- On WHILE reduce production value_expr -> expr INFIXOP1L expr
-- On UIDENT reduce production value_expr -> expr INFIXOP1L expr
-- On TYPE reduce production value_expr -> expr INFIXOP1L expr
-- On TRY reduce production value_expr -> expr INFIXOP1L expr
-- On TO reduce production value_expr -> expr INFIXOP1L expr
-- On THEN reduce production value_expr -> expr INFIXOP1L expr
-- On STRING reduce production value_expr -> expr INFIXOP1L expr
-- On SHARP reduce production value_expr -> expr INFIXOP1L expr
-- On SEMISEMI reduce production value_expr -> expr INFIXOP1L expr
-- On SEMI reduce production value_expr -> expr INFIXOP1L expr
-- On RPAREN reduce production value_expr -> expr INFIXOP1L expr
-- On RAISE reduce production value_expr -> expr INFIXOP1L expr
-- On QUESTION reduce production value_expr -> expr INFIXOP1L expr
-- On PREFIXOP reduce production value_expr -> expr INFIXOP1L expr
-- On OPEN reduce production value_expr -> expr INFIXOP1L expr
-- On MODULE reduce production value_expr -> expr INFIXOP1L expr
-- On MINUSGREATER reduce production value_expr -> expr INFIXOP1L expr
-- On MATCH reduce production value_expr -> expr INFIXOP1L expr
-- On LVECTOR reduce production value_expr -> expr INFIXOP1L expr
-- On LPAREN reduce production value_expr -> expr INFIXOP1L expr
-- On LMATRIX reduce production value_expr -> expr INFIXOP1L expr
-- On LIDENT reduce production value_expr -> expr INFIXOP1L expr
-- On LET reduce production value_expr -> expr INFIXOP1L expr
-- On LBRACKBAR reduce production value_expr -> expr INFIXOP1L expr
-- On LBRACK reduce production value_expr -> expr INFIXOP1L expr
-- On LBRACE reduce production value_expr -> expr INFIXOP1L expr
-- On LAZY reduce production value_expr -> expr INFIXOP1L expr
-- On INT reduce production value_expr -> expr INFIXOP1L expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP1L expr
-- On IN reduce production value_expr -> expr INFIXOP1L expr
-- On IMAGINARY reduce production value_expr -> expr INFIXOP1L expr
-- On IF reduce production value_expr -> expr INFIXOP1L expr
-- On FUNCTION reduce production value_expr -> expr INFIXOP1L expr
-- On FUN reduce production value_expr -> expr INFIXOP1L expr
-- On FOR reduce production value_expr -> expr INFIXOP1L expr
-- On FLOAT reduce production value_expr -> expr INFIXOP1L expr
-- On EXCEPTION reduce production value_expr -> expr INFIXOP1L expr
-- On EQ reduce production value_expr -> expr INFIXOP1L expr
-- On EOF reduce production value_expr -> expr INFIXOP1L expr
-- On ELSE reduce production value_expr -> expr INFIXOP1L expr
-- On DOWNTO reduce production value_expr -> expr INFIXOP1L expr
-- On DONE reduce production value_expr -> expr INFIXOP1L expr
-- On DOLLAR reduce production value_expr -> expr INFIXOP1L expr
-- On DO reduce production value_expr -> expr INFIXOP1L expr
-- On COMMA reduce production value_expr -> expr INFIXOP1L expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP1L expr
-- On COLON reduce production value_expr -> expr INFIXOP1L expr
-- On CHAR reduce production value_expr -> expr INFIXOP1L expr
-- On CASE reduce production value_expr -> expr INFIXOP1L expr
-- On BELOW reduce production value_expr -> expr INFIXOP1L expr
-- On BEGIN reduce production value_expr -> expr INFIXOP1L expr
-- On BARBAR reduce production value_expr -> expr INFIXOP1L expr
-- On BAR reduce production value_expr -> expr INFIXOP1L expr
-- On ASSERT reduce production value_expr -> expr INFIXOP1L expr
-- On AND reduce production value_expr -> expr INFIXOP1L expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP1L expr
-- On ABOVE reduce production value_expr -> expr INFIXOP1L expr
** Conflict on WHERE

State 459:
value_expr -> expr EQ . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 460
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 460:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr EQ expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On COLONCOLON shift to state 451
-- On WITH reduce production value_expr -> expr EQ expr
-- On WHILE reduce production value_expr -> expr EQ expr
-- On UIDENT reduce production value_expr -> expr EQ expr
-- On TYPE reduce production value_expr -> expr EQ expr
-- On TRY reduce production value_expr -> expr EQ expr
-- On TO reduce production value_expr -> expr EQ expr
-- On THEN reduce production value_expr -> expr EQ expr
-- On STRING reduce production value_expr -> expr EQ expr
-- On SHARP reduce production value_expr -> expr EQ expr
-- On SEMISEMI reduce production value_expr -> expr EQ expr
-- On SEMI reduce production value_expr -> expr EQ expr
-- On RPAREN reduce production value_expr -> expr EQ expr
-- On RAISE reduce production value_expr -> expr EQ expr
-- On QUESTION reduce production value_expr -> expr EQ expr
-- On PREFIXOP reduce production value_expr -> expr EQ expr
-- On OPEN reduce production value_expr -> expr EQ expr
-- On MODULE reduce production value_expr -> expr EQ expr
-- On MINUSGREATER reduce production value_expr -> expr EQ expr
-- On MATCH reduce production value_expr -> expr EQ expr
-- On LVECTOR reduce production value_expr -> expr EQ expr
-- On LPAREN reduce production value_expr -> expr EQ expr
-- On LMATRIX reduce production value_expr -> expr EQ expr
-- On LIDENT reduce production value_expr -> expr EQ expr
-- On LET reduce production value_expr -> expr EQ expr
-- On LBRACKBAR reduce production value_expr -> expr EQ expr
-- On LBRACK reduce production value_expr -> expr EQ expr
-- On LBRACE reduce production value_expr -> expr EQ expr
-- On LAZY reduce production value_expr -> expr EQ expr
-- On INT reduce production value_expr -> expr EQ expr
-- On INFIXOP1L reduce production value_expr -> expr EQ expr
-- On IN reduce production value_expr -> expr EQ expr
-- On IMAGINARY reduce production value_expr -> expr EQ expr
-- On IF reduce production value_expr -> expr EQ expr
-- On FUNCTION reduce production value_expr -> expr EQ expr
-- On FUN reduce production value_expr -> expr EQ expr
-- On FOR reduce production value_expr -> expr EQ expr
-- On FLOAT reduce production value_expr -> expr EQ expr
-- On EXCEPTION reduce production value_expr -> expr EQ expr
-- On EQ reduce production value_expr -> expr EQ expr
-- On EOF reduce production value_expr -> expr EQ expr
-- On ELSE reduce production value_expr -> expr EQ expr
-- On DOWNTO reduce production value_expr -> expr EQ expr
-- On DONE reduce production value_expr -> expr EQ expr
-- On DOLLAR reduce production value_expr -> expr EQ expr
-- On DO reduce production value_expr -> expr EQ expr
-- On COMMA reduce production value_expr -> expr EQ expr
-- On COLONEQUAL reduce production value_expr -> expr EQ expr
-- On COLON reduce production value_expr -> expr EQ expr
-- On CHAR reduce production value_expr -> expr EQ expr
-- On CASE reduce production value_expr -> expr EQ expr
-- On BELOW reduce production value_expr -> expr EQ expr
-- On BEGIN reduce production value_expr -> expr EQ expr
-- On BARBAR reduce production value_expr -> expr EQ expr
-- On BAR reduce production value_expr -> expr EQ expr
-- On ASSERT reduce production value_expr -> expr EQ expr
-- On AND reduce production value_expr -> expr EQ expr
-- On AMPERAMPER reduce production value_expr -> expr EQ expr
-- On ABOVE reduce production value_expr -> expr EQ expr
** Conflict on WHERE

State 461:
no_value_expr -> expr COLONEQUAL . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 462
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 462:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr COLONEQUAL expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production no_value_expr -> expr COLONEQUAL expr
-- On WHILE reduce production no_value_expr -> expr COLONEQUAL expr
-- On UIDENT reduce production no_value_expr -> expr COLONEQUAL expr
-- On TYPE reduce production no_value_expr -> expr COLONEQUAL expr
-- On TRY reduce production no_value_expr -> expr COLONEQUAL expr
-- On TO reduce production no_value_expr -> expr COLONEQUAL expr
-- On THEN reduce production no_value_expr -> expr COLONEQUAL expr
-- On STRING reduce production no_value_expr -> expr COLONEQUAL expr
-- On SHARP reduce production no_value_expr -> expr COLONEQUAL expr
-- On SEMISEMI reduce production no_value_expr -> expr COLONEQUAL expr
-- On SEMI reduce production no_value_expr -> expr COLONEQUAL expr
-- On RPAREN reduce production no_value_expr -> expr COLONEQUAL expr
-- On RAISE reduce production no_value_expr -> expr COLONEQUAL expr
-- On PREFIXOP reduce production no_value_expr -> expr COLONEQUAL expr
-- On OPEN reduce production no_value_expr -> expr COLONEQUAL expr
-- On MODULE reduce production no_value_expr -> expr COLONEQUAL expr
-- On MINUSGREATER reduce production no_value_expr -> expr COLONEQUAL expr
-- On MATCH reduce production no_value_expr -> expr COLONEQUAL expr
-- On LVECTOR reduce production no_value_expr -> expr COLONEQUAL expr
-- On LPAREN reduce production no_value_expr -> expr COLONEQUAL expr
-- On LMATRIX reduce production no_value_expr -> expr COLONEQUAL expr
-- On LIDENT reduce production no_value_expr -> expr COLONEQUAL expr
-- On LET reduce production no_value_expr -> expr COLONEQUAL expr
-- On LBRACKBAR reduce production no_value_expr -> expr COLONEQUAL expr
-- On LBRACK reduce production no_value_expr -> expr COLONEQUAL expr
-- On LBRACE reduce production no_value_expr -> expr COLONEQUAL expr
-- On LAZY reduce production no_value_expr -> expr COLONEQUAL expr
-- On INT reduce production no_value_expr -> expr COLONEQUAL expr
-- On IN reduce production no_value_expr -> expr COLONEQUAL expr
-- On IMAGINARY reduce production no_value_expr -> expr COLONEQUAL expr
-- On IF reduce production no_value_expr -> expr COLONEQUAL expr
-- On FUNCTION reduce production no_value_expr -> expr COLONEQUAL expr
-- On FUN reduce production no_value_expr -> expr COLONEQUAL expr
-- On FOR reduce production no_value_expr -> expr COLONEQUAL expr
-- On FLOAT reduce production no_value_expr -> expr COLONEQUAL expr
-- On EXCEPTION reduce production no_value_expr -> expr COLONEQUAL expr
-- On EOF reduce production no_value_expr -> expr COLONEQUAL expr
-- On ELSE reduce production no_value_expr -> expr COLONEQUAL expr
-- On DOWNTO reduce production no_value_expr -> expr COLONEQUAL expr
-- On DONE reduce production no_value_expr -> expr COLONEQUAL expr
-- On DOLLAR reduce production no_value_expr -> expr COLONEQUAL expr
-- On DO reduce production no_value_expr -> expr COLONEQUAL expr
-- On COMMA reduce production no_value_expr -> expr COLONEQUAL expr
-- On COLON reduce production no_value_expr -> expr COLONEQUAL expr
-- On CHAR reduce production no_value_expr -> expr COLONEQUAL expr
-- On CASE reduce production no_value_expr -> expr COLONEQUAL expr
-- On BELOW reduce production no_value_expr -> expr COLONEQUAL expr
-- On BEGIN reduce production no_value_expr -> expr COLONEQUAL expr
-- On BAR reduce production no_value_expr -> expr COLONEQUAL expr
-- On ASSERT reduce production no_value_expr -> expr COLONEQUAL expr
-- On AND reduce production no_value_expr -> expr COLONEQUAL expr
-- On ABOVE reduce production no_value_expr -> expr COLONEQUAL expr
** Conflict on WHERE

State 463:
value_expr -> expr BARBAR . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 464
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 464:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr BARBAR expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production value_expr -> expr BARBAR expr
-- On WHILE reduce production value_expr -> expr BARBAR expr
-- On UIDENT reduce production value_expr -> expr BARBAR expr
-- On TYPE reduce production value_expr -> expr BARBAR expr
-- On TRY reduce production value_expr -> expr BARBAR expr
-- On TO reduce production value_expr -> expr BARBAR expr
-- On THEN reduce production value_expr -> expr BARBAR expr
-- On STRING reduce production value_expr -> expr BARBAR expr
-- On SHARP reduce production value_expr -> expr BARBAR expr
-- On SEMISEMI reduce production value_expr -> expr BARBAR expr
-- On SEMI reduce production value_expr -> expr BARBAR expr
-- On RPAREN reduce production value_expr -> expr BARBAR expr
-- On RAISE reduce production value_expr -> expr BARBAR expr
-- On QUESTION reduce production value_expr -> expr BARBAR expr
-- On PREFIXOP reduce production value_expr -> expr BARBAR expr
-- On OPEN reduce production value_expr -> expr BARBAR expr
-- On MODULE reduce production value_expr -> expr BARBAR expr
-- On MINUSGREATER reduce production value_expr -> expr BARBAR expr
-- On MATCH reduce production value_expr -> expr BARBAR expr
-- On LVECTOR reduce production value_expr -> expr BARBAR expr
-- On LPAREN reduce production value_expr -> expr BARBAR expr
-- On LMATRIX reduce production value_expr -> expr BARBAR expr
-- On LIDENT reduce production value_expr -> expr BARBAR expr
-- On LET reduce production value_expr -> expr BARBAR expr
-- On LBRACKBAR reduce production value_expr -> expr BARBAR expr
-- On LBRACK reduce production value_expr -> expr BARBAR expr
-- On LBRACE reduce production value_expr -> expr BARBAR expr
-- On LAZY reduce production value_expr -> expr BARBAR expr
-- On INT reduce production value_expr -> expr BARBAR expr
-- On IN reduce production value_expr -> expr BARBAR expr
-- On IMAGINARY reduce production value_expr -> expr BARBAR expr
-- On IF reduce production value_expr -> expr BARBAR expr
-- On FUNCTION reduce production value_expr -> expr BARBAR expr
-- On FUN reduce production value_expr -> expr BARBAR expr
-- On FOR reduce production value_expr -> expr BARBAR expr
-- On FLOAT reduce production value_expr -> expr BARBAR expr
-- On EXCEPTION reduce production value_expr -> expr BARBAR expr
-- On EOF reduce production value_expr -> expr BARBAR expr
-- On ELSE reduce production value_expr -> expr BARBAR expr
-- On DOWNTO reduce production value_expr -> expr BARBAR expr
-- On DONE reduce production value_expr -> expr BARBAR expr
-- On DOLLAR reduce production value_expr -> expr BARBAR expr
-- On DO reduce production value_expr -> expr BARBAR expr
-- On COMMA reduce production value_expr -> expr BARBAR expr
-- On COLONEQUAL reduce production value_expr -> expr BARBAR expr
-- On COLON reduce production value_expr -> expr BARBAR expr
-- On CHAR reduce production value_expr -> expr BARBAR expr
-- On CASE reduce production value_expr -> expr BARBAR expr
-- On BELOW reduce production value_expr -> expr BARBAR expr
-- On BEGIN reduce production value_expr -> expr BARBAR expr
-- On BAR reduce production value_expr -> expr BARBAR expr
-- On ASSERT reduce production value_expr -> expr BARBAR expr
-- On AND reduce production value_expr -> expr BARBAR expr
-- On ABOVE reduce production value_expr -> expr BARBAR expr
** Conflict on WHERE

State 465:
value_expr -> expr AMPERAMPER . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 466
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 466:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr AMPERAMPER expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONCOLON shift to state 451
-- On AMPERAMPER shift to state 465
-- On WITH reduce production value_expr -> expr AMPERAMPER expr
-- On WHILE reduce production value_expr -> expr AMPERAMPER expr
-- On UIDENT reduce production value_expr -> expr AMPERAMPER expr
-- On TYPE reduce production value_expr -> expr AMPERAMPER expr
-- On TRY reduce production value_expr -> expr AMPERAMPER expr
-- On TO reduce production value_expr -> expr AMPERAMPER expr
-- On THEN reduce production value_expr -> expr AMPERAMPER expr
-- On STRING reduce production value_expr -> expr AMPERAMPER expr
-- On SHARP reduce production value_expr -> expr AMPERAMPER expr
-- On SEMISEMI reduce production value_expr -> expr AMPERAMPER expr
-- On SEMI reduce production value_expr -> expr AMPERAMPER expr
-- On RPAREN reduce production value_expr -> expr AMPERAMPER expr
-- On RAISE reduce production value_expr -> expr AMPERAMPER expr
-- On QUESTION reduce production value_expr -> expr AMPERAMPER expr
-- On PREFIXOP reduce production value_expr -> expr AMPERAMPER expr
-- On OPEN reduce production value_expr -> expr AMPERAMPER expr
-- On MODULE reduce production value_expr -> expr AMPERAMPER expr
-- On MINUSGREATER reduce production value_expr -> expr AMPERAMPER expr
-- On MATCH reduce production value_expr -> expr AMPERAMPER expr
-- On LVECTOR reduce production value_expr -> expr AMPERAMPER expr
-- On LPAREN reduce production value_expr -> expr AMPERAMPER expr
-- On LMATRIX reduce production value_expr -> expr AMPERAMPER expr
-- On LIDENT reduce production value_expr -> expr AMPERAMPER expr
-- On LET reduce production value_expr -> expr AMPERAMPER expr
-- On LBRACKBAR reduce production value_expr -> expr AMPERAMPER expr
-- On LBRACK reduce production value_expr -> expr AMPERAMPER expr
-- On LBRACE reduce production value_expr -> expr AMPERAMPER expr
-- On LAZY reduce production value_expr -> expr AMPERAMPER expr
-- On INT reduce production value_expr -> expr AMPERAMPER expr
-- On IN reduce production value_expr -> expr AMPERAMPER expr
-- On IMAGINARY reduce production value_expr -> expr AMPERAMPER expr
-- On IF reduce production value_expr -> expr AMPERAMPER expr
-- On FUNCTION reduce production value_expr -> expr AMPERAMPER expr
-- On FUN reduce production value_expr -> expr AMPERAMPER expr
-- On FOR reduce production value_expr -> expr AMPERAMPER expr
-- On FLOAT reduce production value_expr -> expr AMPERAMPER expr
-- On EXCEPTION reduce production value_expr -> expr AMPERAMPER expr
-- On EOF reduce production value_expr -> expr AMPERAMPER expr
-- On ELSE reduce production value_expr -> expr AMPERAMPER expr
-- On DOWNTO reduce production value_expr -> expr AMPERAMPER expr
-- On DONE reduce production value_expr -> expr AMPERAMPER expr
-- On DOLLAR reduce production value_expr -> expr AMPERAMPER expr
-- On DO reduce production value_expr -> expr AMPERAMPER expr
-- On COMMA reduce production value_expr -> expr AMPERAMPER expr
-- On COLONEQUAL reduce production value_expr -> expr AMPERAMPER expr
-- On COLON reduce production value_expr -> expr AMPERAMPER expr
-- On CHAR reduce production value_expr -> expr AMPERAMPER expr
-- On CASE reduce production value_expr -> expr AMPERAMPER expr
-- On BELOW reduce production value_expr -> expr AMPERAMPER expr
-- On BEGIN reduce production value_expr -> expr AMPERAMPER expr
-- On BARBAR reduce production value_expr -> expr AMPERAMPER expr
-- On BAR reduce production value_expr -> expr AMPERAMPER expr
-- On ASSERT reduce production value_expr -> expr AMPERAMPER expr
-- On AND reduce production value_expr -> expr AMPERAMPER expr
-- On ABOVE reduce production value_expr -> expr AMPERAMPER expr
** Conflict on WHERE

State 467:
value_expr -> expr QUESTION expr COLON . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 468
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 468:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr QUESTION expr COLON expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production value_expr -> expr QUESTION expr COLON expr
-- On WHILE reduce production value_expr -> expr QUESTION expr COLON expr
-- On UIDENT reduce production value_expr -> expr QUESTION expr COLON expr
-- On TYPE reduce production value_expr -> expr QUESTION expr COLON expr
-- On TRY reduce production value_expr -> expr QUESTION expr COLON expr
-- On TO reduce production value_expr -> expr QUESTION expr COLON expr
-- On THEN reduce production value_expr -> expr QUESTION expr COLON expr
-- On STRING reduce production value_expr -> expr QUESTION expr COLON expr
-- On SHARP reduce production value_expr -> expr QUESTION expr COLON expr
-- On SEMISEMI reduce production value_expr -> expr QUESTION expr COLON expr
-- On SEMI reduce production value_expr -> expr QUESTION expr COLON expr
-- On RPAREN reduce production value_expr -> expr QUESTION expr COLON expr
-- On RAISE reduce production value_expr -> expr QUESTION expr COLON expr
-- On PREFIXOP reduce production value_expr -> expr QUESTION expr COLON expr
-- On OPEN reduce production value_expr -> expr QUESTION expr COLON expr
-- On MODULE reduce production value_expr -> expr QUESTION expr COLON expr
-- On MINUSGREATER reduce production value_expr -> expr QUESTION expr COLON expr
-- On MATCH reduce production value_expr -> expr QUESTION expr COLON expr
-- On LVECTOR reduce production value_expr -> expr QUESTION expr COLON expr
-- On LPAREN reduce production value_expr -> expr QUESTION expr COLON expr
-- On LMATRIX reduce production value_expr -> expr QUESTION expr COLON expr
-- On LIDENT reduce production value_expr -> expr QUESTION expr COLON expr
-- On LET reduce production value_expr -> expr QUESTION expr COLON expr
-- On LBRACKBAR reduce production value_expr -> expr QUESTION expr COLON expr
-- On LBRACK reduce production value_expr -> expr QUESTION expr COLON expr
-- On LBRACE reduce production value_expr -> expr QUESTION expr COLON expr
-- On LAZY reduce production value_expr -> expr QUESTION expr COLON expr
-- On INT reduce production value_expr -> expr QUESTION expr COLON expr
-- On IN reduce production value_expr -> expr QUESTION expr COLON expr
-- On IMAGINARY reduce production value_expr -> expr QUESTION expr COLON expr
-- On IF reduce production value_expr -> expr QUESTION expr COLON expr
-- On FUNCTION reduce production value_expr -> expr QUESTION expr COLON expr
-- On FUN reduce production value_expr -> expr QUESTION expr COLON expr
-- On FOR reduce production value_expr -> expr QUESTION expr COLON expr
-- On FLOAT reduce production value_expr -> expr QUESTION expr COLON expr
-- On EXCEPTION reduce production value_expr -> expr QUESTION expr COLON expr
-- On EOF reduce production value_expr -> expr QUESTION expr COLON expr
-- On ELSE reduce production value_expr -> expr QUESTION expr COLON expr
-- On DOWNTO reduce production value_expr -> expr QUESTION expr COLON expr
-- On DONE reduce production value_expr -> expr QUESTION expr COLON expr
-- On DOLLAR reduce production value_expr -> expr QUESTION expr COLON expr
-- On DO reduce production value_expr -> expr QUESTION expr COLON expr
-- On COMMA reduce production value_expr -> expr QUESTION expr COLON expr
-- On COLON reduce production value_expr -> expr QUESTION expr COLON expr
-- On CHAR reduce production value_expr -> expr QUESTION expr COLON expr
-- On CASE reduce production value_expr -> expr QUESTION expr COLON expr
-- On BELOW reduce production value_expr -> expr QUESTION expr COLON expr
-- On BEGIN reduce production value_expr -> expr QUESTION expr COLON expr
-- On BAR reduce production value_expr -> expr QUESTION expr COLON expr
-- On ASSERT reduce production value_expr -> expr QUESTION expr COLON expr
-- On AND reduce production value_expr -> expr QUESTION expr COLON expr
-- On ABOVE reduce production value_expr -> expr QUESTION expr COLON expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 469:
direction_flag -> TO . [ WHILE WHERE UIDENT TRY STRING SHARP RAISE PREFIXOP PLUS MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE reduce production direction_flag -> TO
-- On WHERE reduce production direction_flag -> TO
-- On UIDENT reduce production direction_flag -> TO
-- On TRY reduce production direction_flag -> TO
-- On STRING reduce production direction_flag -> TO
-- On SHARP reduce production direction_flag -> TO
-- On RAISE reduce production direction_flag -> TO
-- On PREFIXOP reduce production direction_flag -> TO
-- On PLUS reduce production direction_flag -> TO
-- On MINUS reduce production direction_flag -> TO
-- On MATCH reduce production direction_flag -> TO
-- On LVECTOR reduce production direction_flag -> TO
-- On LPAREN reduce production direction_flag -> TO
-- On LMATRIX reduce production direction_flag -> TO
-- On LIDENT reduce production direction_flag -> TO
-- On LET reduce production direction_flag -> TO
-- On LBRACKBAR reduce production direction_flag -> TO
-- On LBRACK reduce production direction_flag -> TO
-- On LBRACE reduce production direction_flag -> TO
-- On LAZY reduce production direction_flag -> TO
-- On INT reduce production direction_flag -> TO
-- On IMAGINARY reduce production direction_flag -> TO
-- On IF reduce production direction_flag -> TO
-- On FUNCTION reduce production direction_flag -> TO
-- On FUN reduce production direction_flag -> TO
-- On FOR reduce production direction_flag -> TO
-- On FLOAT reduce production direction_flag -> TO
-- On DOLLAR reduce production direction_flag -> TO
-- On CHAR reduce production direction_flag -> TO
-- On CASE reduce production direction_flag -> TO
-- On BEGIN reduce production direction_flag -> TO
-- On ASSERT reduce production direction_flag -> TO

State 470:
direction_flag -> DOWNTO . [ WHILE WHERE UIDENT TRY STRING SHARP RAISE PREFIXOP PLUS MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE reduce production direction_flag -> DOWNTO
-- On WHERE reduce production direction_flag -> DOWNTO
-- On UIDENT reduce production direction_flag -> DOWNTO
-- On TRY reduce production direction_flag -> DOWNTO
-- On STRING reduce production direction_flag -> DOWNTO
-- On SHARP reduce production direction_flag -> DOWNTO
-- On RAISE reduce production direction_flag -> DOWNTO
-- On PREFIXOP reduce production direction_flag -> DOWNTO
-- On PLUS reduce production direction_flag -> DOWNTO
-- On MINUS reduce production direction_flag -> DOWNTO
-- On MATCH reduce production direction_flag -> DOWNTO
-- On LVECTOR reduce production direction_flag -> DOWNTO
-- On LPAREN reduce production direction_flag -> DOWNTO
-- On LMATRIX reduce production direction_flag -> DOWNTO
-- On LIDENT reduce production direction_flag -> DOWNTO
-- On LET reduce production direction_flag -> DOWNTO
-- On LBRACKBAR reduce production direction_flag -> DOWNTO
-- On LBRACK reduce production direction_flag -> DOWNTO
-- On LBRACE reduce production direction_flag -> DOWNTO
-- On LAZY reduce production direction_flag -> DOWNTO
-- On INT reduce production direction_flag -> DOWNTO
-- On IMAGINARY reduce production direction_flag -> DOWNTO
-- On IF reduce production direction_flag -> DOWNTO
-- On FUNCTION reduce production direction_flag -> DOWNTO
-- On FUN reduce production direction_flag -> DOWNTO
-- On FOR reduce production direction_flag -> DOWNTO
-- On FLOAT reduce production direction_flag -> DOWNTO
-- On DOLLAR reduce production direction_flag -> DOWNTO
-- On CHAR reduce production direction_flag -> DOWNTO
-- On CASE reduce production direction_flag -> DOWNTO
-- On BEGIN reduce production direction_flag -> DOWNTO
-- On ASSERT reduce production direction_flag -> DOWNTO

State 471:
direction_flag -> BELOW . [ WHILE WHERE UIDENT TRY STRING SHARP RAISE PREFIXOP PLUS MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE reduce production direction_flag -> BELOW
-- On WHERE reduce production direction_flag -> BELOW
-- On UIDENT reduce production direction_flag -> BELOW
-- On TRY reduce production direction_flag -> BELOW
-- On STRING reduce production direction_flag -> BELOW
-- On SHARP reduce production direction_flag -> BELOW
-- On RAISE reduce production direction_flag -> BELOW
-- On PREFIXOP reduce production direction_flag -> BELOW
-- On PLUS reduce production direction_flag -> BELOW
-- On MINUS reduce production direction_flag -> BELOW
-- On MATCH reduce production direction_flag -> BELOW
-- On LVECTOR reduce production direction_flag -> BELOW
-- On LPAREN reduce production direction_flag -> BELOW
-- On LMATRIX reduce production direction_flag -> BELOW
-- On LIDENT reduce production direction_flag -> BELOW
-- On LET reduce production direction_flag -> BELOW
-- On LBRACKBAR reduce production direction_flag -> BELOW
-- On LBRACK reduce production direction_flag -> BELOW
-- On LBRACE reduce production direction_flag -> BELOW
-- On LAZY reduce production direction_flag -> BELOW
-- On INT reduce production direction_flag -> BELOW
-- On IMAGINARY reduce production direction_flag -> BELOW
-- On IF reduce production direction_flag -> BELOW
-- On FUNCTION reduce production direction_flag -> BELOW
-- On FUN reduce production direction_flag -> BELOW
-- On FOR reduce production direction_flag -> BELOW
-- On FLOAT reduce production direction_flag -> BELOW
-- On DOLLAR reduce production direction_flag -> BELOW
-- On CHAR reduce production direction_flag -> BELOW
-- On CASE reduce production direction_flag -> BELOW
-- On BEGIN reduce production direction_flag -> BELOW
-- On ASSERT reduce production direction_flag -> BELOW

State 472:
direction_flag -> ABOVE . [ WHILE WHERE UIDENT TRY STRING SHARP RAISE PREFIXOP PLUS MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE reduce production direction_flag -> ABOVE
-- On WHERE reduce production direction_flag -> ABOVE
-- On UIDENT reduce production direction_flag -> ABOVE
-- On TRY reduce production direction_flag -> ABOVE
-- On STRING reduce production direction_flag -> ABOVE
-- On SHARP reduce production direction_flag -> ABOVE
-- On RAISE reduce production direction_flag -> ABOVE
-- On PREFIXOP reduce production direction_flag -> ABOVE
-- On PLUS reduce production direction_flag -> ABOVE
-- On MINUS reduce production direction_flag -> ABOVE
-- On MATCH reduce production direction_flag -> ABOVE
-- On LVECTOR reduce production direction_flag -> ABOVE
-- On LPAREN reduce production direction_flag -> ABOVE
-- On LMATRIX reduce production direction_flag -> ABOVE
-- On LIDENT reduce production direction_flag -> ABOVE
-- On LET reduce production direction_flag -> ABOVE
-- On LBRACKBAR reduce production direction_flag -> ABOVE
-- On LBRACK reduce production direction_flag -> ABOVE
-- On LBRACE reduce production direction_flag -> ABOVE
-- On LAZY reduce production direction_flag -> ABOVE
-- On INT reduce production direction_flag -> ABOVE
-- On IMAGINARY reduce production direction_flag -> ABOVE
-- On IF reduce production direction_flag -> ABOVE
-- On FUNCTION reduce production direction_flag -> ABOVE
-- On FUN reduce production direction_flag -> ABOVE
-- On FOR reduce production direction_flag -> ABOVE
-- On FLOAT reduce production direction_flag -> ABOVE
-- On DOLLAR reduce production direction_flag -> ABOVE
-- On CHAR reduce production direction_flag -> ABOVE
-- On CASE reduce production direction_flag -> ABOVE
-- On BEGIN reduce production direction_flag -> ABOVE
-- On ASSERT reduce production direction_flag -> ABOVE

State 473:
no_value_expr -> FOR LIDENT EQ expr direction_flag . expr DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 474
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 474:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr . DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On DO shift to state 475
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 475:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO . seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 476
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 476:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr . DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On DONE shift to state 477

State 477:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On WHERE reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On THEN reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On STAR reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On SEMI reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On RPAREN reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On RBRACK reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On RBRACE reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On QUESTION reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On PLUS reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On MINUS reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP5R reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP5L reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP4R reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP4L reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP3R reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP3L reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP2R reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP2L reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP1R reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP1L reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On EQ reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On END reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On ELSE reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On DOTDOT reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On COMMA reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On COLONEQUAL reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On COLONCOLON reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On COLON reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On BARRBRACK reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On BARCOLON reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On BARBAR reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On BAR reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On AMPERAMPER reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE

State 478:
basic_seq_expr -> expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production basic_seq_expr -> expr
-- On WHILE reduce production basic_seq_expr -> expr
-- On UIDENT reduce production basic_seq_expr -> expr
-- On TYPE reduce production basic_seq_expr -> expr
-- On TRY reduce production basic_seq_expr -> expr
-- On TO reduce production basic_seq_expr -> expr
-- On THEN reduce production basic_seq_expr -> expr
-- On STRING reduce production basic_seq_expr -> expr
-- On SHARP reduce production basic_seq_expr -> expr
-- On SEMISEMI reduce production basic_seq_expr -> expr
-- On SEMI reduce production basic_seq_expr -> expr
-- On RPAREN reduce production basic_seq_expr -> expr
-- On RAISE reduce production basic_seq_expr -> expr
-- On PREFIXOP reduce production basic_seq_expr -> expr
-- On OPEN reduce production basic_seq_expr -> expr
-- On MODULE reduce production basic_seq_expr -> expr
-- On MINUSGREATER reduce production basic_seq_expr -> expr
-- On MATCH reduce production basic_seq_expr -> expr
-- On LVECTOR reduce production basic_seq_expr -> expr
-- On LPAREN reduce production basic_seq_expr -> expr
-- On LMATRIX reduce production basic_seq_expr -> expr
-- On LIDENT reduce production basic_seq_expr -> expr
-- On LET reduce production basic_seq_expr -> expr
-- On LBRACKBAR reduce production basic_seq_expr -> expr
-- On LBRACK reduce production basic_seq_expr -> expr
-- On LBRACE reduce production basic_seq_expr -> expr
-- On LAZY reduce production basic_seq_expr -> expr
-- On INT reduce production basic_seq_expr -> expr
-- On IN reduce production basic_seq_expr -> expr
-- On IMAGINARY reduce production basic_seq_expr -> expr
-- On IF reduce production basic_seq_expr -> expr
-- On FUNCTION reduce production basic_seq_expr -> expr
-- On FUN reduce production basic_seq_expr -> expr
-- On FOR reduce production basic_seq_expr -> expr
-- On FLOAT reduce production basic_seq_expr -> expr
-- On EXCEPTION reduce production basic_seq_expr -> expr
-- On EOF reduce production basic_seq_expr -> expr
-- On ELSE reduce production basic_seq_expr -> expr
-- On DOWNTO reduce production basic_seq_expr -> expr
-- On DONE reduce production basic_seq_expr -> expr
-- On DOLLAR reduce production basic_seq_expr -> expr
-- On DO reduce production basic_seq_expr -> expr
-- On COMMA reduce production basic_seq_expr -> expr
-- On COLON reduce production basic_seq_expr -> expr
-- On CHAR reduce production basic_seq_expr -> expr
-- On CASE reduce production basic_seq_expr -> expr
-- On BELOW reduce production basic_seq_expr -> expr
-- On BEGIN reduce production basic_seq_expr -> expr
-- On BAR reduce production basic_seq_expr -> expr
-- On ASSERT reduce production basic_seq_expr -> expr
-- On AND reduce production basic_seq_expr -> expr
-- On ABOVE reduce production basic_seq_expr -> expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 479:
basic_seq_expr -> basic_seq_expr . SEMI expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
basic_seq_expr -> basic_seq_expr . SEMI [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
seq_expr -> basic_seq_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On SEMI shift to state 480
-- On WITH reduce production seq_expr -> basic_seq_expr
-- On WHILE reduce production seq_expr -> basic_seq_expr
-- On WHERE reduce production seq_expr -> basic_seq_expr
-- On UIDENT reduce production seq_expr -> basic_seq_expr
-- On TYPE reduce production seq_expr -> basic_seq_expr
-- On TRY reduce production seq_expr -> basic_seq_expr
-- On TO reduce production seq_expr -> basic_seq_expr
-- On THEN reduce production seq_expr -> basic_seq_expr
-- On STRING reduce production seq_expr -> basic_seq_expr
-- On STAR reduce production seq_expr -> basic_seq_expr
-- On SHARP reduce production seq_expr -> basic_seq_expr
-- On SEMISEMI reduce production seq_expr -> basic_seq_expr
-- On RPAREN reduce production seq_expr -> basic_seq_expr
-- On RAISE reduce production seq_expr -> basic_seq_expr
-- On QUESTION reduce production seq_expr -> basic_seq_expr
-- On PREFIXOP reduce production seq_expr -> basic_seq_expr
-- On PLUS reduce production seq_expr -> basic_seq_expr
-- On OPEN reduce production seq_expr -> basic_seq_expr
-- On MODULE reduce production seq_expr -> basic_seq_expr
-- On MINUSGREATER reduce production seq_expr -> basic_seq_expr
-- On MINUS reduce production seq_expr -> basic_seq_expr
-- On MATCH reduce production seq_expr -> basic_seq_expr
-- On LVECTOR reduce production seq_expr -> basic_seq_expr
-- On LPAREN reduce production seq_expr -> basic_seq_expr
-- On LMATRIX reduce production seq_expr -> basic_seq_expr
-- On LIDENT reduce production seq_expr -> basic_seq_expr
-- On LET reduce production seq_expr -> basic_seq_expr
-- On LBRACKBAR reduce production seq_expr -> basic_seq_expr
-- On LBRACK reduce production seq_expr -> basic_seq_expr
-- On LBRACE reduce production seq_expr -> basic_seq_expr
-- On LAZY reduce production seq_expr -> basic_seq_expr
-- On INT reduce production seq_expr -> basic_seq_expr
-- On INFIXOP5R reduce production seq_expr -> basic_seq_expr
-- On INFIXOP5L reduce production seq_expr -> basic_seq_expr
-- On INFIXOP4R reduce production seq_expr -> basic_seq_expr
-- On INFIXOP4L reduce production seq_expr -> basic_seq_expr
-- On INFIXOP3R reduce production seq_expr -> basic_seq_expr
-- On INFIXOP3L reduce production seq_expr -> basic_seq_expr
-- On INFIXOP2R reduce production seq_expr -> basic_seq_expr
-- On INFIXOP2L reduce production seq_expr -> basic_seq_expr
-- On INFIXOP1R reduce production seq_expr -> basic_seq_expr
-- On INFIXOP1L reduce production seq_expr -> basic_seq_expr
-- On IN reduce production seq_expr -> basic_seq_expr
-- On IMAGINARY reduce production seq_expr -> basic_seq_expr
-- On IF reduce production seq_expr -> basic_seq_expr
-- On FUNCTION reduce production seq_expr -> basic_seq_expr
-- On FUN reduce production seq_expr -> basic_seq_expr
-- On FOR reduce production seq_expr -> basic_seq_expr
-- On FLOAT reduce production seq_expr -> basic_seq_expr
-- On EXCEPTION reduce production seq_expr -> basic_seq_expr
-- On EQ reduce production seq_expr -> basic_seq_expr
-- On EOF reduce production seq_expr -> basic_seq_expr
-- On ELSE reduce production seq_expr -> basic_seq_expr
-- On DOWNTO reduce production seq_expr -> basic_seq_expr
-- On DONE reduce production seq_expr -> basic_seq_expr
-- On DOLLAR reduce production seq_expr -> basic_seq_expr
-- On DO reduce production seq_expr -> basic_seq_expr
-- On COMMA reduce production seq_expr -> basic_seq_expr
-- On COLONEQUAL reduce production seq_expr -> basic_seq_expr
-- On COLONCOLON reduce production seq_expr -> basic_seq_expr
-- On COLON reduce production seq_expr -> basic_seq_expr
-- On CHAR reduce production seq_expr -> basic_seq_expr
-- On CASE reduce production seq_expr -> basic_seq_expr
-- On BELOW reduce production seq_expr -> basic_seq_expr
-- On BEGIN reduce production seq_expr -> basic_seq_expr
-- On BARBAR reduce production seq_expr -> basic_seq_expr
-- On BAR reduce production seq_expr -> basic_seq_expr
-- On ASSERT reduce production seq_expr -> basic_seq_expr
-- On AND reduce production seq_expr -> basic_seq_expr
-- On AMPERAMPER reduce production seq_expr -> basic_seq_expr
-- On ABOVE reduce production seq_expr -> basic_seq_expr
** Conflict on SEMI

State 480:
basic_seq_expr -> basic_seq_expr SEMI . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
basic_seq_expr -> basic_seq_expr SEMI . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 481
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On WITH reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On TYPE reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On TO reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On THEN reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On STAR reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On SEMISEMI reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On SEMI reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On RPAREN reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On QUESTION reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On OPEN reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On MODULE reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On MINUSGREATER reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP5R reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP5L reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP4R reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP4L reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP3R reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP3L reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP2R reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP2L reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP1R reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP1L reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On IN reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On EXCEPTION reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On EQ reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On EOF reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On ELSE reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On DOWNTO reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On DONE reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On DO reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On COMMA reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On COLONEQUAL reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On COLONCOLON reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On COLON reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On BELOW reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On BARBAR reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On BAR reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On AND reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On AMPERAMPER reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On ABOVE reduce production basic_seq_expr -> basic_seq_expr SEMI
** Conflict on WHILE WHERE UIDENT TRY STRING SHARP RAISE MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT

State 481:
basic_seq_expr -> basic_seq_expr SEMI expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On WHILE reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On UIDENT reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On TYPE reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On TRY reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On TO reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On THEN reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On STRING reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On SHARP reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On SEMISEMI reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On SEMI reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On RPAREN reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On RAISE reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On PREFIXOP reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On OPEN reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On MODULE reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On MINUSGREATER reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On MATCH reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On LVECTOR reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On LPAREN reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On LMATRIX reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On LIDENT reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On LET reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On LBRACKBAR reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On LBRACK reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On LBRACE reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On LAZY reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On INT reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On IN reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On IMAGINARY reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On IF reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On FUNCTION reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On FUN reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On FOR reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On FLOAT reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On EXCEPTION reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On EOF reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On ELSE reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On DOWNTO reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On DONE reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On DOLLAR reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On DO reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On COMMA reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On COLON reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On CHAR reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On CASE reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On BELOW reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On BEGIN reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On BAR reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On ASSERT reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On AND reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On ABOVE reduce production basic_seq_expr -> basic_seq_expr SEMI expr
** Conflict on WHERE

State 482:
index -> DOTDOT . [ error RBRACK COMMA ]
index -> DOTDOT . expr [ error RBRACK COMMA ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 579
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On error reduce production index -> DOTDOT
-- On RBRACK reduce production index -> DOTDOT
-- On COMMA reduce production index -> DOTDOT

State 483:
value_expr -> CASE . opt_bar case_list [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On BAR shift to state 125
-- On opt_bar shift to state 484
-- On WHILE reduce production opt_bar ->
-- On WHERE reduce production opt_bar ->
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TRY reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On SHARP reduce production opt_bar ->
-- On RAISE reduce production opt_bar ->
-- On PREFIXOP reduce production opt_bar ->
-- On PLUS reduce production opt_bar ->
-- On MINUS reduce production opt_bar ->
-- On MATCH reduce production opt_bar ->
-- On LVECTOR reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LMATRIX reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LET reduce production opt_bar ->
-- On LBRACKBAR reduce production opt_bar ->
-- On LBRACK reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On LAZY reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On IMAGINARY reduce production opt_bar ->
-- On IF reduce production opt_bar ->
-- On FUNCTION reduce production opt_bar ->
-- On FUN reduce production opt_bar ->
-- On FOR reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On DOLLAR reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->
-- On CASE reduce production opt_bar ->
-- On BEGIN reduce production opt_bar ->
-- On ASSERT reduce production opt_bar ->

State 484:
value_expr -> CASE opt_bar . case_list [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UNDERSCORE shift to state 485
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On simple_case shift to state 572
-- On no_value_expr shift to state 423
-- On expr shift to state 573
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On case_list shift to state 576

State 485:
simple_case -> UNDERSCORE . MINUSGREATER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On MINUSGREATER shift to state 486

State 486:
simple_case -> UNDERSCORE MINUSGREATER . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 571
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 487:
no_value_expr -> ASSERT . simple_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On UIDENT shift to state 46
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On PREFIXOP shift to state 63
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On BEGIN shift to state 111
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 490
-- On constr_longident shift to state 515
-- On constant shift to state 516

State 488:
simple_expr -> val_longident . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> val_longident
-- On WHERE reduce production simple_expr -> val_longident
-- On UIDENT reduce production simple_expr -> val_longident
-- On THEN reduce production simple_expr -> val_longident
-- On STRING reduce production simple_expr -> val_longident
-- On STAR reduce production simple_expr -> val_longident
-- On SHARP reduce production simple_expr -> val_longident
-- On SEMI reduce production simple_expr -> val_longident
-- On RPAREN reduce production simple_expr -> val_longident
-- On RBRACK reduce production simple_expr -> val_longident
-- On RBRACE reduce production simple_expr -> val_longident
-- On QUESTION reduce production simple_expr -> val_longident
-- On PREFIXOP reduce production simple_expr -> val_longident
-- On PLUS reduce production simple_expr -> val_longident
-- On MINUS reduce production simple_expr -> val_longident
-- On LVECTOR reduce production simple_expr -> val_longident
-- On LPAREN reduce production simple_expr -> val_longident
-- On LMATRIX reduce production simple_expr -> val_longident
-- On LIDENT reduce production simple_expr -> val_longident
-- On LBRACKBAR reduce production simple_expr -> val_longident
-- On LBRACK reduce production simple_expr -> val_longident
-- On LBRACE reduce production simple_expr -> val_longident
-- On INT reduce production simple_expr -> val_longident
-- On INFIXOP5R reduce production simple_expr -> val_longident
-- On INFIXOP5L reduce production simple_expr -> val_longident
-- On INFIXOP4R reduce production simple_expr -> val_longident
-- On INFIXOP4L reduce production simple_expr -> val_longident
-- On INFIXOP3R reduce production simple_expr -> val_longident
-- On INFIXOP3L reduce production simple_expr -> val_longident
-- On INFIXOP2R reduce production simple_expr -> val_longident
-- On INFIXOP2L reduce production simple_expr -> val_longident
-- On INFIXOP1R reduce production simple_expr -> val_longident
-- On INFIXOP1L reduce production simple_expr -> val_longident
-- On IMAGINARY reduce production simple_expr -> val_longident
-- On FLOAT reduce production simple_expr -> val_longident
-- On EQ reduce production simple_expr -> val_longident
-- On END reduce production simple_expr -> val_longident
-- On ELSE reduce production simple_expr -> val_longident
-- On DOTDOT reduce production simple_expr -> val_longident
-- On DOT reduce production simple_expr -> val_longident
-- On DOLLAR reduce production simple_expr -> val_longident
-- On COMMA reduce production simple_expr -> val_longident
-- On COLONEQUAL reduce production simple_expr -> val_longident
-- On COLONCOLON reduce production simple_expr -> val_longident
-- On COLON reduce production simple_expr -> val_longident
-- On CHAR reduce production simple_expr -> val_longident
-- On BEGIN reduce production simple_expr -> val_longident
-- On BARRBRACK reduce production simple_expr -> val_longident
-- On BARCOLON reduce production simple_expr -> val_longident
-- On BARBAR reduce production simple_expr -> val_longident
-- On BAR reduce production simple_expr -> val_longident
-- On AMPERAMPER reduce production simple_expr -> val_longident

State 489:
val_longident -> val_ident . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production val_longident -> val_ident
-- On WHERE reduce production val_longident -> val_ident
-- On UIDENT reduce production val_longident -> val_ident
-- On THEN reduce production val_longident -> val_ident
-- On STRING reduce production val_longident -> val_ident
-- On STAR reduce production val_longident -> val_ident
-- On SHARP reduce production val_longident -> val_ident
-- On SEMI reduce production val_longident -> val_ident
-- On RPAREN reduce production val_longident -> val_ident
-- On RBRACK reduce production val_longident -> val_ident
-- On RBRACE reduce production val_longident -> val_ident
-- On QUESTION reduce production val_longident -> val_ident
-- On PREFIXOP reduce production val_longident -> val_ident
-- On PLUS reduce production val_longident -> val_ident
-- On MINUS reduce production val_longident -> val_ident
-- On LVECTOR reduce production val_longident -> val_ident
-- On LPAREN reduce production val_longident -> val_ident
-- On LMATRIX reduce production val_longident -> val_ident
-- On LIDENT reduce production val_longident -> val_ident
-- On LBRACKBAR reduce production val_longident -> val_ident
-- On LBRACK reduce production val_longident -> val_ident
-- On LBRACE reduce production val_longident -> val_ident
-- On INT reduce production val_longident -> val_ident
-- On INFIXOP5R reduce production val_longident -> val_ident
-- On INFIXOP5L reduce production val_longident -> val_ident
-- On INFIXOP4R reduce production val_longident -> val_ident
-- On INFIXOP4L reduce production val_longident -> val_ident
-- On INFIXOP3R reduce production val_longident -> val_ident
-- On INFIXOP3L reduce production val_longident -> val_ident
-- On INFIXOP2R reduce production val_longident -> val_ident
-- On INFIXOP2L reduce production val_longident -> val_ident
-- On INFIXOP1R reduce production val_longident -> val_ident
-- On INFIXOP1L reduce production val_longident -> val_ident
-- On IMAGINARY reduce production val_longident -> val_ident
-- On FLOAT reduce production val_longident -> val_ident
-- On EQ reduce production val_longident -> val_ident
-- On END reduce production val_longident -> val_ident
-- On ELSE reduce production val_longident -> val_ident
-- On DOTDOT reduce production val_longident -> val_ident
-- On DOT reduce production val_longident -> val_ident
-- On DOLLAR reduce production val_longident -> val_ident
-- On COMMA reduce production val_longident -> val_ident
-- On COLONEQUAL reduce production val_longident -> val_ident
-- On COLONCOLON reduce production val_longident -> val_ident
-- On COLON reduce production val_longident -> val_ident
-- On CHAR reduce production val_longident -> val_ident
-- On BEGIN reduce production val_longident -> val_ident
-- On BARRBRACK reduce production val_longident -> val_ident
-- On BARCOLON reduce production val_longident -> val_ident
-- On BARBAR reduce production val_longident -> val_ident
-- On BAR reduce production val_longident -> val_ident
-- On AMPERAMPER reduce production val_longident -> val_ident

State 490:
no_value_expr -> ASSERT simple_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On DOT shift to state 491
-- On error reduce production no_value_expr -> ASSERT simple_expr
-- On WHERE reduce production no_value_expr -> ASSERT simple_expr
-- On THEN reduce production no_value_expr -> ASSERT simple_expr
-- On STAR reduce production no_value_expr -> ASSERT simple_expr
-- On SEMI reduce production no_value_expr -> ASSERT simple_expr
-- On RPAREN reduce production no_value_expr -> ASSERT simple_expr
-- On RBRACK reduce production no_value_expr -> ASSERT simple_expr
-- On RBRACE reduce production no_value_expr -> ASSERT simple_expr
-- On QUESTION reduce production no_value_expr -> ASSERT simple_expr
-- On PLUS reduce production no_value_expr -> ASSERT simple_expr
-- On MINUS reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP5R reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP5L reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP4R reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP4L reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP3R reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP3L reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP2R reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP2L reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP1R reduce production no_value_expr -> ASSERT simple_expr
-- On INFIXOP1L reduce production no_value_expr -> ASSERT simple_expr
-- On EQ reduce production no_value_expr -> ASSERT simple_expr
-- On END reduce production no_value_expr -> ASSERT simple_expr
-- On ELSE reduce production no_value_expr -> ASSERT simple_expr
-- On DOTDOT reduce production no_value_expr -> ASSERT simple_expr
-- On COMMA reduce production no_value_expr -> ASSERT simple_expr
-- On COLONEQUAL reduce production no_value_expr -> ASSERT simple_expr
-- On COLONCOLON reduce production no_value_expr -> ASSERT simple_expr
-- On COLON reduce production no_value_expr -> ASSERT simple_expr
-- On BARRBRACK reduce production no_value_expr -> ASSERT simple_expr
-- On BARCOLON reduce production no_value_expr -> ASSERT simple_expr
-- On BARBAR reduce production no_value_expr -> ASSERT simple_expr
-- On BAR reduce production no_value_expr -> ASSERT simple_expr
-- On AMPERAMPER reduce production no_value_expr -> ASSERT simple_expr

State 491:
simple_expr -> simple_expr DOT . label_longident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACK index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACK index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On UIDENT shift to state 492
-- On LIDENT shift to state 495
-- On LBRACK shift to state 496
-- On label_longident shift to state 570

State 492:
label_longident -> UIDENT . DOT LIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUSGREATER MINUS LVECTOR LPAREN LMATRIX LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On DOT shift to state 493

State 493:
label_longident -> UIDENT DOT . LIDENT [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUSGREATER MINUS LVECTOR LPAREN LMATRIX LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On LIDENT shift to state 494

State 494:
label_longident -> UIDENT DOT LIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUSGREATER MINUS LVECTOR LPAREN LMATRIX LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production label_longident -> UIDENT DOT LIDENT
-- On WHERE reduce production label_longident -> UIDENT DOT LIDENT
-- On UIDENT reduce production label_longident -> UIDENT DOT LIDENT
-- On THEN reduce production label_longident -> UIDENT DOT LIDENT
-- On STRING reduce production label_longident -> UIDENT DOT LIDENT
-- On STAR reduce production label_longident -> UIDENT DOT LIDENT
-- On SHARP reduce production label_longident -> UIDENT DOT LIDENT
-- On SEMI reduce production label_longident -> UIDENT DOT LIDENT
-- On RPAREN reduce production label_longident -> UIDENT DOT LIDENT
-- On RBRACK reduce production label_longident -> UIDENT DOT LIDENT
-- On RBRACE reduce production label_longident -> UIDENT DOT LIDENT
-- On QUESTION reduce production label_longident -> UIDENT DOT LIDENT
-- On PREFIXOP reduce production label_longident -> UIDENT DOT LIDENT
-- On PLUS reduce production label_longident -> UIDENT DOT LIDENT
-- On MINUSGREATER reduce production label_longident -> UIDENT DOT LIDENT
-- On MINUS reduce production label_longident -> UIDENT DOT LIDENT
-- On LVECTOR reduce production label_longident -> UIDENT DOT LIDENT
-- On LPAREN reduce production label_longident -> UIDENT DOT LIDENT
-- On LMATRIX reduce production label_longident -> UIDENT DOT LIDENT
-- On LIDENT reduce production label_longident -> UIDENT DOT LIDENT
-- On LESSMINUS reduce production label_longident -> UIDENT DOT LIDENT
-- On LBRACKBAR reduce production label_longident -> UIDENT DOT LIDENT
-- On LBRACK reduce production label_longident -> UIDENT DOT LIDENT
-- On LBRACE reduce production label_longident -> UIDENT DOT LIDENT
-- On INT reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP5R reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP5L reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP4R reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP4L reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP3R reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP3L reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP2R reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP2L reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP1R reduce production label_longident -> UIDENT DOT LIDENT
-- On INFIXOP1L reduce production label_longident -> UIDENT DOT LIDENT
-- On IMAGINARY reduce production label_longident -> UIDENT DOT LIDENT
-- On FLOAT reduce production label_longident -> UIDENT DOT LIDENT
-- On EQ reduce production label_longident -> UIDENT DOT LIDENT
-- On END reduce production label_longident -> UIDENT DOT LIDENT
-- On ELSE reduce production label_longident -> UIDENT DOT LIDENT
-- On DOTDOT reduce production label_longident -> UIDENT DOT LIDENT
-- On DOT reduce production label_longident -> UIDENT DOT LIDENT
-- On DOLLAR reduce production label_longident -> UIDENT DOT LIDENT
-- On COMMA reduce production label_longident -> UIDENT DOT LIDENT
-- On COLONEQUAL reduce production label_longident -> UIDENT DOT LIDENT
-- On COLONCOLON reduce production label_longident -> UIDENT DOT LIDENT
-- On COLON reduce production label_longident -> UIDENT DOT LIDENT
-- On CHAR reduce production label_longident -> UIDENT DOT LIDENT
-- On BEGIN reduce production label_longident -> UIDENT DOT LIDENT
-- On BARRBRACK reduce production label_longident -> UIDENT DOT LIDENT
-- On BARCOLON reduce production label_longident -> UIDENT DOT LIDENT
-- On BARBAR reduce production label_longident -> UIDENT DOT LIDENT
-- On BAR reduce production label_longident -> UIDENT DOT LIDENT
-- On AMPERAMPER reduce production label_longident -> UIDENT DOT LIDENT

State 495:
label_longident -> LIDENT . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUSGREATER MINUS LVECTOR LPAREN LMATRIX LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production label_longident -> LIDENT
-- On WHERE reduce production label_longident -> LIDENT
-- On UIDENT reduce production label_longident -> LIDENT
-- On THEN reduce production label_longident -> LIDENT
-- On STRING reduce production label_longident -> LIDENT
-- On STAR reduce production label_longident -> LIDENT
-- On SHARP reduce production label_longident -> LIDENT
-- On SEMI reduce production label_longident -> LIDENT
-- On RPAREN reduce production label_longident -> LIDENT
-- On RBRACK reduce production label_longident -> LIDENT
-- On RBRACE reduce production label_longident -> LIDENT
-- On QUESTION reduce production label_longident -> LIDENT
-- On PREFIXOP reduce production label_longident -> LIDENT
-- On PLUS reduce production label_longident -> LIDENT
-- On MINUSGREATER reduce production label_longident -> LIDENT
-- On MINUS reduce production label_longident -> LIDENT
-- On LVECTOR reduce production label_longident -> LIDENT
-- On LPAREN reduce production label_longident -> LIDENT
-- On LMATRIX reduce production label_longident -> LIDENT
-- On LIDENT reduce production label_longident -> LIDENT
-- On LESSMINUS reduce production label_longident -> LIDENT
-- On LBRACKBAR reduce production label_longident -> LIDENT
-- On LBRACK reduce production label_longident -> LIDENT
-- On LBRACE reduce production label_longident -> LIDENT
-- On INT reduce production label_longident -> LIDENT
-- On INFIXOP5R reduce production label_longident -> LIDENT
-- On INFIXOP5L reduce production label_longident -> LIDENT
-- On INFIXOP4R reduce production label_longident -> LIDENT
-- On INFIXOP4L reduce production label_longident -> LIDENT
-- On INFIXOP3R reduce production label_longident -> LIDENT
-- On INFIXOP3L reduce production label_longident -> LIDENT
-- On INFIXOP2R reduce production label_longident -> LIDENT
-- On INFIXOP2L reduce production label_longident -> LIDENT
-- On INFIXOP1R reduce production label_longident -> LIDENT
-- On INFIXOP1L reduce production label_longident -> LIDENT
-- On IMAGINARY reduce production label_longident -> LIDENT
-- On FLOAT reduce production label_longident -> LIDENT
-- On EQ reduce production label_longident -> LIDENT
-- On END reduce production label_longident -> LIDENT
-- On ELSE reduce production label_longident -> LIDENT
-- On DOTDOT reduce production label_longident -> LIDENT
-- On DOT reduce production label_longident -> LIDENT
-- On DOLLAR reduce production label_longident -> LIDENT
-- On COMMA reduce production label_longident -> LIDENT
-- On COLONEQUAL reduce production label_longident -> LIDENT
-- On COLONCOLON reduce production label_longident -> LIDENT
-- On COLON reduce production label_longident -> LIDENT
-- On CHAR reduce production label_longident -> LIDENT
-- On BEGIN reduce production label_longident -> LIDENT
-- On BARRBRACK reduce production label_longident -> LIDENT
-- On BARCOLON reduce production label_longident -> LIDENT
-- On BARBAR reduce production label_longident -> LIDENT
-- On BAR reduce production label_longident -> LIDENT
-- On AMPERAMPER reduce production label_longident -> LIDENT

State 496:
simple_expr -> simple_expr DOT LBRACK . index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACK . index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 386
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOTDOT shift to state 482
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On index_list shift to state 568
-- On index shift to state 561
-- On expr shift to state 555
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 497:
expr -> value_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production expr -> value_expr
-- On WHERE reduce production expr -> value_expr
-- On THEN reduce production expr -> value_expr
-- On STAR reduce production expr -> value_expr
-- On SEMI reduce production expr -> value_expr
-- On RPAREN reduce production expr -> value_expr
-- On RBRACK reduce production expr -> value_expr
-- On RBRACE reduce production expr -> value_expr
-- On QUESTION reduce production expr -> value_expr
-- On PLUS reduce production expr -> value_expr
-- On MINUS reduce production expr -> value_expr
-- On INFIXOP5R reduce production expr -> value_expr
-- On INFIXOP5L reduce production expr -> value_expr
-- On INFIXOP4R reduce production expr -> value_expr
-- On INFIXOP4L reduce production expr -> value_expr
-- On INFIXOP3R reduce production expr -> value_expr
-- On INFIXOP3L reduce production expr -> value_expr
-- On INFIXOP2R reduce production expr -> value_expr
-- On INFIXOP2L reduce production expr -> value_expr
-- On INFIXOP1R reduce production expr -> value_expr
-- On INFIXOP1L reduce production expr -> value_expr
-- On EQ reduce production expr -> value_expr
-- On END reduce production expr -> value_expr
-- On ELSE reduce production expr -> value_expr
-- On DOTDOT reduce production expr -> value_expr
-- On COMMA reduce production expr -> value_expr
-- On COLONEQUAL reduce production expr -> value_expr
-- On COLONCOLON reduce production expr -> value_expr
-- On COLON reduce production expr -> value_expr
-- On BARRBRACK reduce production expr -> value_expr
-- On BARCOLON reduce production expr -> value_expr
-- On BARBAR reduce production expr -> value_expr
-- On BAR reduce production expr -> value_expr
-- On AMPERAMPER reduce production expr -> value_expr

State 498:
no_value_expr -> simple_expr . DOT label_longident LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> simple_expr . DOT LBRACK index_list RBRACK LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> simple_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> simple_expr . simple_expr_list [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On UIDENT shift to state 46
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On PREFIXOP shift to state 63
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOT shift to state 499
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On BEGIN shift to state 111
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr_list shift to state 565
-- On simple_expr shift to state 567
-- On constr_longident shift to state 515
-- On constant shift to state 516
-- On error reduce production value_expr -> simple_expr
-- On WHERE reduce production value_expr -> simple_expr
-- On THEN reduce production value_expr -> simple_expr
-- On STAR reduce production value_expr -> simple_expr
-- On SEMI reduce production value_expr -> simple_expr
-- On RPAREN reduce production value_expr -> simple_expr
-- On RBRACK reduce production value_expr -> simple_expr
-- On RBRACE reduce production value_expr -> simple_expr
-- On QUESTION reduce production value_expr -> simple_expr
-- On PLUS reduce production value_expr -> simple_expr
-- On MINUS reduce production value_expr -> simple_expr
-- On INFIXOP5R reduce production value_expr -> simple_expr
-- On INFIXOP5L reduce production value_expr -> simple_expr
-- On INFIXOP4R reduce production value_expr -> simple_expr
-- On INFIXOP4L reduce production value_expr -> simple_expr
-- On INFIXOP3R reduce production value_expr -> simple_expr
-- On INFIXOP3L reduce production value_expr -> simple_expr
-- On INFIXOP2R reduce production value_expr -> simple_expr
-- On INFIXOP2L reduce production value_expr -> simple_expr
-- On INFIXOP1R reduce production value_expr -> simple_expr
-- On INFIXOP1L reduce production value_expr -> simple_expr
-- On EQ reduce production value_expr -> simple_expr
-- On END reduce production value_expr -> simple_expr
-- On ELSE reduce production value_expr -> simple_expr
-- On DOTDOT reduce production value_expr -> simple_expr
-- On COMMA reduce production value_expr -> simple_expr
-- On COLONEQUAL reduce production value_expr -> simple_expr
-- On COLONCOLON reduce production value_expr -> simple_expr
-- On COLON reduce production value_expr -> simple_expr
-- On BARRBRACK reduce production value_expr -> simple_expr
-- On BARCOLON reduce production value_expr -> simple_expr
-- On BARBAR reduce production value_expr -> simple_expr
-- On BAR reduce production value_expr -> simple_expr
-- On AMPERAMPER reduce production value_expr -> simple_expr

State 499:
no_value_expr -> simple_expr DOT . label_longident LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> simple_expr DOT . LBRACK index_list RBRACK LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT . label_longident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACK index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACK index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On UIDENT shift to state 492
-- On LIDENT shift to state 495
-- On LBRACK shift to state 500
-- On label_longident shift to state 562

State 500:
no_value_expr -> simple_expr DOT LBRACK . index_list RBRACK LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACK . index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACK . index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 386
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOTDOT shift to state 482
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On index_list shift to state 502
-- On index shift to state 561
-- On expr shift to state 555
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 501:
expr -> no_value_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production expr -> no_value_expr
-- On WHERE reduce production expr -> no_value_expr
-- On THEN reduce production expr -> no_value_expr
-- On STAR reduce production expr -> no_value_expr
-- On SEMI reduce production expr -> no_value_expr
-- On RPAREN reduce production expr -> no_value_expr
-- On RBRACK reduce production expr -> no_value_expr
-- On RBRACE reduce production expr -> no_value_expr
-- On QUESTION reduce production expr -> no_value_expr
-- On PLUS reduce production expr -> no_value_expr
-- On MINUS reduce production expr -> no_value_expr
-- On INFIXOP5R reduce production expr -> no_value_expr
-- On INFIXOP5L reduce production expr -> no_value_expr
-- On INFIXOP4R reduce production expr -> no_value_expr
-- On INFIXOP4L reduce production expr -> no_value_expr
-- On INFIXOP3R reduce production expr -> no_value_expr
-- On INFIXOP3L reduce production expr -> no_value_expr
-- On INFIXOP2R reduce production expr -> no_value_expr
-- On INFIXOP2L reduce production expr -> no_value_expr
-- On INFIXOP1R reduce production expr -> no_value_expr
-- On INFIXOP1L reduce production expr -> no_value_expr
-- On EQ reduce production expr -> no_value_expr
-- On END reduce production expr -> no_value_expr
-- On ELSE reduce production expr -> no_value_expr
-- On DOTDOT reduce production expr -> no_value_expr
-- On COMMA reduce production expr -> no_value_expr
-- On COLONEQUAL reduce production expr -> no_value_expr
-- On COLONCOLON reduce production expr -> no_value_expr
-- On COLON reduce production expr -> no_value_expr
-- On BARRBRACK reduce production expr -> no_value_expr
-- On BARCOLON reduce production expr -> no_value_expr
-- On BARBAR reduce production expr -> no_value_expr
-- On BAR reduce production expr -> no_value_expr
-- On AMPERAMPER reduce production expr -> no_value_expr

State 502:
index_list -> index_list . COMMA index [ error RBRACK COMMA ]
no_value_expr -> simple_expr DOT LBRACK index_list . RBRACK LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACK index_list . RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACK index_list . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error shift to state 503
-- On RBRACK shift to state 504
-- On COMMA shift to state 553

State 503:
simple_expr -> simple_expr DOT LBRACK index_list error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On WHERE reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On UIDENT reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On THEN reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On STRING reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On STAR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On SHARP reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On SEMI reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On RPAREN reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On RBRACK reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On RBRACE reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On QUESTION reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On PLUS reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On MINUS reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LVECTOR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LPAREN reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LMATRIX reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LIDENT reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LBRACKBAR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LBRACK reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LBRACE reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INT reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP5R reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP5L reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP4R reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP4L reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP3R reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP3L reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP2R reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP2L reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP1R reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP1L reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On IMAGINARY reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On FLOAT reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On EQ reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On END reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On ELSE reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On DOTDOT reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On DOT reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On DOLLAR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On COMMA reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On COLON reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On CHAR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On BEGIN reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On BARRBRACK reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On BARCOLON reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On BARBAR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On BAR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT LBRACK index_list error

State 504:
no_value_expr -> simple_expr DOT LBRACK index_list RBRACK . LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACK index_list RBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On LESSMINUS shift to state 505
-- On error reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On WHERE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On UIDENT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On THEN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On STRING reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On STAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On SHARP reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On SEMI reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On RPAREN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On RBRACK reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On RBRACE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On QUESTION reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On PLUS reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On MINUS reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LVECTOR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LPAREN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LMATRIX reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LIDENT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LBRACKBAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LBRACK reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LBRACE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP5R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP5L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP4R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP4L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP3R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP3L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP2R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP2L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP1R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP1L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On IMAGINARY reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On FLOAT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On EQ reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On END reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On ELSE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DOTDOT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DOT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DOLLAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COMMA reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COLON reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On CHAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BEGIN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BARRBRACK reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BARCOLON reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BARBAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK

State 505:
no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 506
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 506:
no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On THEN reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On SEMI reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On RPAREN reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On RBRACK reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On RBRACE reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On END reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On ELSE reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On DOTDOT reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On COMMA reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On COLON reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On BARRBRACK reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On BARCOLON reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On BAR reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
** Conflict on WHERE

State 507:
value_expr -> expr WHERE . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 508
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 508:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr WHERE expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production value_expr -> expr WHERE expr
-- On THEN reduce production value_expr -> expr WHERE expr
-- On SEMI reduce production value_expr -> expr WHERE expr
-- On RPAREN reduce production value_expr -> expr WHERE expr
-- On RBRACK reduce production value_expr -> expr WHERE expr
-- On RBRACE reduce production value_expr -> expr WHERE expr
-- On END reduce production value_expr -> expr WHERE expr
-- On ELSE reduce production value_expr -> expr WHERE expr
-- On DOTDOT reduce production value_expr -> expr WHERE expr
-- On COMMA reduce production value_expr -> expr WHERE expr
-- On COLON reduce production value_expr -> expr WHERE expr
-- On BARRBRACK reduce production value_expr -> expr WHERE expr
-- On BARCOLON reduce production value_expr -> expr WHERE expr
-- On BAR reduce production value_expr -> expr WHERE expr
** Conflict on WHERE

State 509:
value_expr -> expr STAR . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 510
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 510:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr STAR expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On error reduce production value_expr -> expr STAR expr
-- On THEN reduce production value_expr -> expr STAR expr
-- On STAR reduce production value_expr -> expr STAR expr
-- On SEMI reduce production value_expr -> expr STAR expr
-- On RPAREN reduce production value_expr -> expr STAR expr
-- On RBRACK reduce production value_expr -> expr STAR expr
-- On RBRACE reduce production value_expr -> expr STAR expr
-- On QUESTION reduce production value_expr -> expr STAR expr
-- On PLUS reduce production value_expr -> expr STAR expr
-- On MINUS reduce production value_expr -> expr STAR expr
-- On INFIXOP4L reduce production value_expr -> expr STAR expr
-- On INFIXOP3R reduce production value_expr -> expr STAR expr
-- On INFIXOP3L reduce production value_expr -> expr STAR expr
-- On INFIXOP2R reduce production value_expr -> expr STAR expr
-- On INFIXOP2L reduce production value_expr -> expr STAR expr
-- On INFIXOP1R reduce production value_expr -> expr STAR expr
-- On INFIXOP1L reduce production value_expr -> expr STAR expr
-- On EQ reduce production value_expr -> expr STAR expr
-- On END reduce production value_expr -> expr STAR expr
-- On ELSE reduce production value_expr -> expr STAR expr
-- On DOTDOT reduce production value_expr -> expr STAR expr
-- On COMMA reduce production value_expr -> expr STAR expr
-- On COLONEQUAL reduce production value_expr -> expr STAR expr
-- On COLONCOLON reduce production value_expr -> expr STAR expr
-- On COLON reduce production value_expr -> expr STAR expr
-- On BARRBRACK reduce production value_expr -> expr STAR expr
-- On BARCOLON reduce production value_expr -> expr STAR expr
-- On BARBAR reduce production value_expr -> expr STAR expr
-- On BAR reduce production value_expr -> expr STAR expr
-- On AMPERAMPER reduce production value_expr -> expr STAR expr
** Conflict on WHERE

State 511:
value_expr -> expr INFIXOP5R . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 512
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 512:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP5R expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On INFIXOP5R shift to state 511
-- On error reduce production value_expr -> expr INFIXOP5R expr
-- On THEN reduce production value_expr -> expr INFIXOP5R expr
-- On STAR reduce production value_expr -> expr INFIXOP5R expr
-- On SEMI reduce production value_expr -> expr INFIXOP5R expr
-- On RPAREN reduce production value_expr -> expr INFIXOP5R expr
-- On RBRACK reduce production value_expr -> expr INFIXOP5R expr
-- On RBRACE reduce production value_expr -> expr INFIXOP5R expr
-- On QUESTION reduce production value_expr -> expr INFIXOP5R expr
-- On PLUS reduce production value_expr -> expr INFIXOP5R expr
-- On MINUS reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP5L reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP4R reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP4L reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP3R reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP3L reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP2R reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP5R expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP5R expr
-- On EQ reduce production value_expr -> expr INFIXOP5R expr
-- On END reduce production value_expr -> expr INFIXOP5R expr
-- On ELSE reduce production value_expr -> expr INFIXOP5R expr
-- On DOTDOT reduce production value_expr -> expr INFIXOP5R expr
-- On COMMA reduce production value_expr -> expr INFIXOP5R expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP5R expr
-- On COLONCOLON reduce production value_expr -> expr INFIXOP5R expr
-- On COLON reduce production value_expr -> expr INFIXOP5R expr
-- On BARRBRACK reduce production value_expr -> expr INFIXOP5R expr
-- On BARCOLON reduce production value_expr -> expr INFIXOP5R expr
-- On BARBAR reduce production value_expr -> expr INFIXOP5R expr
-- On BAR reduce production value_expr -> expr INFIXOP5R expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP5R expr
** Conflict on WHERE

State 513:
simple_expr -> constr_longident . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> constr_longident . simple_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On UIDENT shift to state 46
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On PREFIXOP shift to state 63
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On BEGIN shift to state 111
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 514
-- On constr_longident shift to state 515
-- On constant shift to state 516
-- On error reduce production simple_expr -> constr_longident
-- On WHERE reduce production simple_expr -> constr_longident
-- On THEN reduce production simple_expr -> constr_longident
-- On STAR reduce production simple_expr -> constr_longident
-- On SEMI reduce production simple_expr -> constr_longident
-- On RPAREN reduce production simple_expr -> constr_longident
-- On RBRACK reduce production simple_expr -> constr_longident
-- On RBRACE reduce production simple_expr -> constr_longident
-- On QUESTION reduce production simple_expr -> constr_longident
-- On PLUS reduce production simple_expr -> constr_longident
-- On MINUS reduce production simple_expr -> constr_longident
-- On INFIXOP5R reduce production simple_expr -> constr_longident
-- On INFIXOP5L reduce production simple_expr -> constr_longident
-- On INFIXOP4R reduce production simple_expr -> constr_longident
-- On INFIXOP4L reduce production simple_expr -> constr_longident
-- On INFIXOP3R reduce production simple_expr -> constr_longident
-- On INFIXOP3L reduce production simple_expr -> constr_longident
-- On INFIXOP2R reduce production simple_expr -> constr_longident
-- On INFIXOP2L reduce production simple_expr -> constr_longident
-- On INFIXOP1R reduce production simple_expr -> constr_longident
-- On INFIXOP1L reduce production simple_expr -> constr_longident
-- On EQ reduce production simple_expr -> constr_longident
-- On END reduce production simple_expr -> constr_longident
-- On ELSE reduce production simple_expr -> constr_longident
-- On DOTDOT reduce production simple_expr -> constr_longident
-- On DOT reduce production simple_expr -> constr_longident
-- On COMMA reduce production simple_expr -> constr_longident
-- On COLONEQUAL reduce production simple_expr -> constr_longident
-- On COLONCOLON reduce production simple_expr -> constr_longident
-- On COLON reduce production simple_expr -> constr_longident
-- On BARRBRACK reduce production simple_expr -> constr_longident
-- On BARCOLON reduce production simple_expr -> constr_longident
-- On BARBAR reduce production simple_expr -> constr_longident
-- On BAR reduce production simple_expr -> constr_longident
-- On AMPERAMPER reduce production simple_expr -> constr_longident
** Conflict on UIDENT STRING SHARP PREFIXOP LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT DOLLAR CHAR BEGIN

State 514:
simple_expr -> simple_expr . DOT label_longident [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> constr_longident simple_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On DOT shift to state 491
-- On error reduce production value_expr -> constr_longident simple_expr
-- On WHERE reduce production value_expr -> constr_longident simple_expr
-- On THEN reduce production value_expr -> constr_longident simple_expr
-- On STAR reduce production value_expr -> constr_longident simple_expr
-- On SEMI reduce production value_expr -> constr_longident simple_expr
-- On RPAREN reduce production value_expr -> constr_longident simple_expr
-- On RBRACK reduce production value_expr -> constr_longident simple_expr
-- On RBRACE reduce production value_expr -> constr_longident simple_expr
-- On QUESTION reduce production value_expr -> constr_longident simple_expr
-- On PLUS reduce production value_expr -> constr_longident simple_expr
-- On MINUS reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP5R reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP5L reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP4R reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP4L reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP3R reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP3L reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP2R reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP2L reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP1R reduce production value_expr -> constr_longident simple_expr
-- On INFIXOP1L reduce production value_expr -> constr_longident simple_expr
-- On EQ reduce production value_expr -> constr_longident simple_expr
-- On END reduce production value_expr -> constr_longident simple_expr
-- On ELSE reduce production value_expr -> constr_longident simple_expr
-- On DOTDOT reduce production value_expr -> constr_longident simple_expr
-- On COMMA reduce production value_expr -> constr_longident simple_expr
-- On COLONEQUAL reduce production value_expr -> constr_longident simple_expr
-- On COLONCOLON reduce production value_expr -> constr_longident simple_expr
-- On COLON reduce production value_expr -> constr_longident simple_expr
-- On BARRBRACK reduce production value_expr -> constr_longident simple_expr
-- On BARCOLON reduce production value_expr -> constr_longident simple_expr
-- On BARBAR reduce production value_expr -> constr_longident simple_expr
-- On BAR reduce production value_expr -> constr_longident simple_expr
-- On AMPERAMPER reduce production value_expr -> constr_longident simple_expr

State 515:
simple_expr -> constr_longident . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> constr_longident
-- On WHERE reduce production simple_expr -> constr_longident
-- On UIDENT reduce production simple_expr -> constr_longident
-- On THEN reduce production simple_expr -> constr_longident
-- On STRING reduce production simple_expr -> constr_longident
-- On STAR reduce production simple_expr -> constr_longident
-- On SHARP reduce production simple_expr -> constr_longident
-- On SEMI reduce production simple_expr -> constr_longident
-- On RPAREN reduce production simple_expr -> constr_longident
-- On RBRACK reduce production simple_expr -> constr_longident
-- On RBRACE reduce production simple_expr -> constr_longident
-- On QUESTION reduce production simple_expr -> constr_longident
-- On PREFIXOP reduce production simple_expr -> constr_longident
-- On PLUS reduce production simple_expr -> constr_longident
-- On MINUS reduce production simple_expr -> constr_longident
-- On LVECTOR reduce production simple_expr -> constr_longident
-- On LPAREN reduce production simple_expr -> constr_longident
-- On LMATRIX reduce production simple_expr -> constr_longident
-- On LIDENT reduce production simple_expr -> constr_longident
-- On LBRACKBAR reduce production simple_expr -> constr_longident
-- On LBRACK reduce production simple_expr -> constr_longident
-- On LBRACE reduce production simple_expr -> constr_longident
-- On INT reduce production simple_expr -> constr_longident
-- On INFIXOP5R reduce production simple_expr -> constr_longident
-- On INFIXOP5L reduce production simple_expr -> constr_longident
-- On INFIXOP4R reduce production simple_expr -> constr_longident
-- On INFIXOP4L reduce production simple_expr -> constr_longident
-- On INFIXOP3R reduce production simple_expr -> constr_longident
-- On INFIXOP3L reduce production simple_expr -> constr_longident
-- On INFIXOP2R reduce production simple_expr -> constr_longident
-- On INFIXOP2L reduce production simple_expr -> constr_longident
-- On INFIXOP1R reduce production simple_expr -> constr_longident
-- On INFIXOP1L reduce production simple_expr -> constr_longident
-- On IMAGINARY reduce production simple_expr -> constr_longident
-- On FLOAT reduce production simple_expr -> constr_longident
-- On EQ reduce production simple_expr -> constr_longident
-- On END reduce production simple_expr -> constr_longident
-- On ELSE reduce production simple_expr -> constr_longident
-- On DOTDOT reduce production simple_expr -> constr_longident
-- On DOT reduce production simple_expr -> constr_longident
-- On DOLLAR reduce production simple_expr -> constr_longident
-- On COMMA reduce production simple_expr -> constr_longident
-- On COLONEQUAL reduce production simple_expr -> constr_longident
-- On COLONCOLON reduce production simple_expr -> constr_longident
-- On COLON reduce production simple_expr -> constr_longident
-- On CHAR reduce production simple_expr -> constr_longident
-- On BEGIN reduce production simple_expr -> constr_longident
-- On BARRBRACK reduce production simple_expr -> constr_longident
-- On BARCOLON reduce production simple_expr -> constr_longident
-- On BARBAR reduce production simple_expr -> constr_longident
-- On BAR reduce production simple_expr -> constr_longident
-- On AMPERAMPER reduce production simple_expr -> constr_longident

State 516:
simple_expr -> constant . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> constant
-- On WHERE reduce production simple_expr -> constant
-- On UIDENT reduce production simple_expr -> constant
-- On THEN reduce production simple_expr -> constant
-- On STRING reduce production simple_expr -> constant
-- On STAR reduce production simple_expr -> constant
-- On SHARP reduce production simple_expr -> constant
-- On SEMI reduce production simple_expr -> constant
-- On RPAREN reduce production simple_expr -> constant
-- On RBRACK reduce production simple_expr -> constant
-- On RBRACE reduce production simple_expr -> constant
-- On QUESTION reduce production simple_expr -> constant
-- On PREFIXOP reduce production simple_expr -> constant
-- On PLUS reduce production simple_expr -> constant
-- On MINUS reduce production simple_expr -> constant
-- On LVECTOR reduce production simple_expr -> constant
-- On LPAREN reduce production simple_expr -> constant
-- On LMATRIX reduce production simple_expr -> constant
-- On LIDENT reduce production simple_expr -> constant
-- On LBRACKBAR reduce production simple_expr -> constant
-- On LBRACK reduce production simple_expr -> constant
-- On LBRACE reduce production simple_expr -> constant
-- On INT reduce production simple_expr -> constant
-- On INFIXOP5R reduce production simple_expr -> constant
-- On INFIXOP5L reduce production simple_expr -> constant
-- On INFIXOP4R reduce production simple_expr -> constant
-- On INFIXOP4L reduce production simple_expr -> constant
-- On INFIXOP3R reduce production simple_expr -> constant
-- On INFIXOP3L reduce production simple_expr -> constant
-- On INFIXOP2R reduce production simple_expr -> constant
-- On INFIXOP2L reduce production simple_expr -> constant
-- On INFIXOP1R reduce production simple_expr -> constant
-- On INFIXOP1L reduce production simple_expr -> constant
-- On IMAGINARY reduce production simple_expr -> constant
-- On FLOAT reduce production simple_expr -> constant
-- On EQ reduce production simple_expr -> constant
-- On END reduce production simple_expr -> constant
-- On ELSE reduce production simple_expr -> constant
-- On DOTDOT reduce production simple_expr -> constant
-- On DOT reduce production simple_expr -> constant
-- On DOLLAR reduce production simple_expr -> constant
-- On COMMA reduce production simple_expr -> constant
-- On COLONEQUAL reduce production simple_expr -> constant
-- On COLONCOLON reduce production simple_expr -> constant
-- On COLON reduce production simple_expr -> constant
-- On CHAR reduce production simple_expr -> constant
-- On BEGIN reduce production simple_expr -> constant
-- On BARRBRACK reduce production simple_expr -> constant
-- On BARCOLON reduce production simple_expr -> constant
-- On BARBAR reduce production simple_expr -> constant
-- On BAR reduce production simple_expr -> constant
-- On AMPERAMPER reduce production simple_expr -> constant

State 517:
value_expr -> expr INFIXOP5L . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 518
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 518:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP5L expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On INFIXOP5R shift to state 511
-- On error reduce production value_expr -> expr INFIXOP5L expr
-- On THEN reduce production value_expr -> expr INFIXOP5L expr
-- On STAR reduce production value_expr -> expr INFIXOP5L expr
-- On SEMI reduce production value_expr -> expr INFIXOP5L expr
-- On RPAREN reduce production value_expr -> expr INFIXOP5L expr
-- On RBRACK reduce production value_expr -> expr INFIXOP5L expr
-- On RBRACE reduce production value_expr -> expr INFIXOP5L expr
-- On QUESTION reduce production value_expr -> expr INFIXOP5L expr
-- On PLUS reduce production value_expr -> expr INFIXOP5L expr
-- On MINUS reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP5L reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP4R reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP4L reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP3R reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP3L reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP2R reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP5L expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP5L expr
-- On EQ reduce production value_expr -> expr INFIXOP5L expr
-- On END reduce production value_expr -> expr INFIXOP5L expr
-- On ELSE reduce production value_expr -> expr INFIXOP5L expr
-- On DOTDOT reduce production value_expr -> expr INFIXOP5L expr
-- On COMMA reduce production value_expr -> expr INFIXOP5L expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP5L expr
-- On COLONCOLON reduce production value_expr -> expr INFIXOP5L expr
-- On COLON reduce production value_expr -> expr INFIXOP5L expr
-- On BARRBRACK reduce production value_expr -> expr INFIXOP5L expr
-- On BARCOLON reduce production value_expr -> expr INFIXOP5L expr
-- On BARBAR reduce production value_expr -> expr INFIXOP5L expr
-- On BAR reduce production value_expr -> expr INFIXOP5L expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP5L expr
** Conflict on WHERE

State 519:
value_expr -> expr INFIXOP4R . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 520
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 520:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP4R expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On error reduce production value_expr -> expr INFIXOP4R expr
-- On THEN reduce production value_expr -> expr INFIXOP4R expr
-- On STAR reduce production value_expr -> expr INFIXOP4R expr
-- On SEMI reduce production value_expr -> expr INFIXOP4R expr
-- On RPAREN reduce production value_expr -> expr INFIXOP4R expr
-- On RBRACK reduce production value_expr -> expr INFIXOP4R expr
-- On RBRACE reduce production value_expr -> expr INFIXOP4R expr
-- On QUESTION reduce production value_expr -> expr INFIXOP4R expr
-- On PLUS reduce production value_expr -> expr INFIXOP4R expr
-- On MINUS reduce production value_expr -> expr INFIXOP4R expr
-- On INFIXOP4L reduce production value_expr -> expr INFIXOP4R expr
-- On INFIXOP3R reduce production value_expr -> expr INFIXOP4R expr
-- On INFIXOP3L reduce production value_expr -> expr INFIXOP4R expr
-- On INFIXOP2R reduce production value_expr -> expr INFIXOP4R expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP4R expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP4R expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP4R expr
-- On EQ reduce production value_expr -> expr INFIXOP4R expr
-- On END reduce production value_expr -> expr INFIXOP4R expr
-- On ELSE reduce production value_expr -> expr INFIXOP4R expr
-- On DOTDOT reduce production value_expr -> expr INFIXOP4R expr
-- On COMMA reduce production value_expr -> expr INFIXOP4R expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP4R expr
-- On COLONCOLON reduce production value_expr -> expr INFIXOP4R expr
-- On COLON reduce production value_expr -> expr INFIXOP4R expr
-- On BARRBRACK reduce production value_expr -> expr INFIXOP4R expr
-- On BARCOLON reduce production value_expr -> expr INFIXOP4R expr
-- On BARBAR reduce production value_expr -> expr INFIXOP4R expr
-- On BAR reduce production value_expr -> expr INFIXOP4R expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP4R expr
** Conflict on WHERE

State 521:
value_expr -> expr QUESTION . expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 522
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 522:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr QUESTION expr . COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On COLON shift to state 523
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 523:
value_expr -> expr QUESTION expr COLON . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 524
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 524:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr QUESTION expr COLON expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production value_expr -> expr QUESTION expr COLON expr
-- On THEN reduce production value_expr -> expr QUESTION expr COLON expr
-- On SEMI reduce production value_expr -> expr QUESTION expr COLON expr
-- On RPAREN reduce production value_expr -> expr QUESTION expr COLON expr
-- On RBRACK reduce production value_expr -> expr QUESTION expr COLON expr
-- On RBRACE reduce production value_expr -> expr QUESTION expr COLON expr
-- On END reduce production value_expr -> expr QUESTION expr COLON expr
-- On ELSE reduce production value_expr -> expr QUESTION expr COLON expr
-- On DOTDOT reduce production value_expr -> expr QUESTION expr COLON expr
-- On COMMA reduce production value_expr -> expr QUESTION expr COLON expr
-- On COLON reduce production value_expr -> expr QUESTION expr COLON expr
-- On BARRBRACK reduce production value_expr -> expr QUESTION expr COLON expr
-- On BARCOLON reduce production value_expr -> expr QUESTION expr COLON expr
-- On BAR reduce production value_expr -> expr QUESTION expr COLON expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 525:
value_expr -> expr PLUS . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 526
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 526:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr PLUS expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On error reduce production value_expr -> expr PLUS expr
-- On THEN reduce production value_expr -> expr PLUS expr
-- On SEMI reduce production value_expr -> expr PLUS expr
-- On RPAREN reduce production value_expr -> expr PLUS expr
-- On RBRACK reduce production value_expr -> expr PLUS expr
-- On RBRACE reduce production value_expr -> expr PLUS expr
-- On QUESTION reduce production value_expr -> expr PLUS expr
-- On PLUS reduce production value_expr -> expr PLUS expr
-- On MINUS reduce production value_expr -> expr PLUS expr
-- On INFIXOP3L reduce production value_expr -> expr PLUS expr
-- On INFIXOP2R reduce production value_expr -> expr PLUS expr
-- On INFIXOP2L reduce production value_expr -> expr PLUS expr
-- On INFIXOP1R reduce production value_expr -> expr PLUS expr
-- On INFIXOP1L reduce production value_expr -> expr PLUS expr
-- On EQ reduce production value_expr -> expr PLUS expr
-- On END reduce production value_expr -> expr PLUS expr
-- On ELSE reduce production value_expr -> expr PLUS expr
-- On DOTDOT reduce production value_expr -> expr PLUS expr
-- On COMMA reduce production value_expr -> expr PLUS expr
-- On COLONEQUAL reduce production value_expr -> expr PLUS expr
-- On COLONCOLON reduce production value_expr -> expr PLUS expr
-- On COLON reduce production value_expr -> expr PLUS expr
-- On BARRBRACK reduce production value_expr -> expr PLUS expr
-- On BARCOLON reduce production value_expr -> expr PLUS expr
-- On BARBAR reduce production value_expr -> expr PLUS expr
-- On BAR reduce production value_expr -> expr PLUS expr
-- On AMPERAMPER reduce production value_expr -> expr PLUS expr
** Conflict on WHERE

State 527:
value_expr -> expr INFIXOP4L . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 528
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 528:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP4L expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On error reduce production value_expr -> expr INFIXOP4L expr
-- On THEN reduce production value_expr -> expr INFIXOP4L expr
-- On STAR reduce production value_expr -> expr INFIXOP4L expr
-- On SEMI reduce production value_expr -> expr INFIXOP4L expr
-- On RPAREN reduce production value_expr -> expr INFIXOP4L expr
-- On RBRACK reduce production value_expr -> expr INFIXOP4L expr
-- On RBRACE reduce production value_expr -> expr INFIXOP4L expr
-- On QUESTION reduce production value_expr -> expr INFIXOP4L expr
-- On PLUS reduce production value_expr -> expr INFIXOP4L expr
-- On MINUS reduce production value_expr -> expr INFIXOP4L expr
-- On INFIXOP4L reduce production value_expr -> expr INFIXOP4L expr
-- On INFIXOP3R reduce production value_expr -> expr INFIXOP4L expr
-- On INFIXOP3L reduce production value_expr -> expr INFIXOP4L expr
-- On INFIXOP2R reduce production value_expr -> expr INFIXOP4L expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP4L expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP4L expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP4L expr
-- On EQ reduce production value_expr -> expr INFIXOP4L expr
-- On END reduce production value_expr -> expr INFIXOP4L expr
-- On ELSE reduce production value_expr -> expr INFIXOP4L expr
-- On DOTDOT reduce production value_expr -> expr INFIXOP4L expr
-- On COMMA reduce production value_expr -> expr INFIXOP4L expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP4L expr
-- On COLONCOLON reduce production value_expr -> expr INFIXOP4L expr
-- On COLON reduce production value_expr -> expr INFIXOP4L expr
-- On BARRBRACK reduce production value_expr -> expr INFIXOP4L expr
-- On BARCOLON reduce production value_expr -> expr INFIXOP4L expr
-- On BARBAR reduce production value_expr -> expr INFIXOP4L expr
-- On BAR reduce production value_expr -> expr INFIXOP4L expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP4L expr
** Conflict on WHERE

State 529:
value_expr -> expr INFIXOP3R . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 530
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 530:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP3R expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On error reduce production value_expr -> expr INFIXOP3R expr
-- On THEN reduce production value_expr -> expr INFIXOP3R expr
-- On SEMI reduce production value_expr -> expr INFIXOP3R expr
-- On RPAREN reduce production value_expr -> expr INFIXOP3R expr
-- On RBRACK reduce production value_expr -> expr INFIXOP3R expr
-- On RBRACE reduce production value_expr -> expr INFIXOP3R expr
-- On QUESTION reduce production value_expr -> expr INFIXOP3R expr
-- On PLUS reduce production value_expr -> expr INFIXOP3R expr
-- On MINUS reduce production value_expr -> expr INFIXOP3R expr
-- On INFIXOP3L reduce production value_expr -> expr INFIXOP3R expr
-- On INFIXOP2R reduce production value_expr -> expr INFIXOP3R expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP3R expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP3R expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP3R expr
-- On EQ reduce production value_expr -> expr INFIXOP3R expr
-- On END reduce production value_expr -> expr INFIXOP3R expr
-- On ELSE reduce production value_expr -> expr INFIXOP3R expr
-- On DOTDOT reduce production value_expr -> expr INFIXOP3R expr
-- On COMMA reduce production value_expr -> expr INFIXOP3R expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP3R expr
-- On COLONCOLON reduce production value_expr -> expr INFIXOP3R expr
-- On COLON reduce production value_expr -> expr INFIXOP3R expr
-- On BARRBRACK reduce production value_expr -> expr INFIXOP3R expr
-- On BARCOLON reduce production value_expr -> expr INFIXOP3R expr
-- On BARBAR reduce production value_expr -> expr INFIXOP3R expr
-- On BAR reduce production value_expr -> expr INFIXOP3R expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP3R expr
** Conflict on WHERE

State 531:
value_expr -> expr MINUS . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 532
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 532:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr MINUS expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On error reduce production value_expr -> expr MINUS expr
-- On THEN reduce production value_expr -> expr MINUS expr
-- On SEMI reduce production value_expr -> expr MINUS expr
-- On RPAREN reduce production value_expr -> expr MINUS expr
-- On RBRACK reduce production value_expr -> expr MINUS expr
-- On RBRACE reduce production value_expr -> expr MINUS expr
-- On QUESTION reduce production value_expr -> expr MINUS expr
-- On PLUS reduce production value_expr -> expr MINUS expr
-- On MINUS reduce production value_expr -> expr MINUS expr
-- On INFIXOP3L reduce production value_expr -> expr MINUS expr
-- On INFIXOP2R reduce production value_expr -> expr MINUS expr
-- On INFIXOP2L reduce production value_expr -> expr MINUS expr
-- On INFIXOP1R reduce production value_expr -> expr MINUS expr
-- On INFIXOP1L reduce production value_expr -> expr MINUS expr
-- On EQ reduce production value_expr -> expr MINUS expr
-- On END reduce production value_expr -> expr MINUS expr
-- On ELSE reduce production value_expr -> expr MINUS expr
-- On DOTDOT reduce production value_expr -> expr MINUS expr
-- On COMMA reduce production value_expr -> expr MINUS expr
-- On COLONEQUAL reduce production value_expr -> expr MINUS expr
-- On COLONCOLON reduce production value_expr -> expr MINUS expr
-- On COLON reduce production value_expr -> expr MINUS expr
-- On BARRBRACK reduce production value_expr -> expr MINUS expr
-- On BARCOLON reduce production value_expr -> expr MINUS expr
-- On BARBAR reduce production value_expr -> expr MINUS expr
-- On BAR reduce production value_expr -> expr MINUS expr
-- On AMPERAMPER reduce production value_expr -> expr MINUS expr
** Conflict on WHERE

State 533:
value_expr -> expr INFIXOP3L . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 534
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 534:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP3L expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On error reduce production value_expr -> expr INFIXOP3L expr
-- On THEN reduce production value_expr -> expr INFIXOP3L expr
-- On SEMI reduce production value_expr -> expr INFIXOP3L expr
-- On RPAREN reduce production value_expr -> expr INFIXOP3L expr
-- On RBRACK reduce production value_expr -> expr INFIXOP3L expr
-- On RBRACE reduce production value_expr -> expr INFIXOP3L expr
-- On QUESTION reduce production value_expr -> expr INFIXOP3L expr
-- On PLUS reduce production value_expr -> expr INFIXOP3L expr
-- On MINUS reduce production value_expr -> expr INFIXOP3L expr
-- On INFIXOP3L reduce production value_expr -> expr INFIXOP3L expr
-- On INFIXOP2R reduce production value_expr -> expr INFIXOP3L expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP3L expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP3L expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP3L expr
-- On EQ reduce production value_expr -> expr INFIXOP3L expr
-- On END reduce production value_expr -> expr INFIXOP3L expr
-- On ELSE reduce production value_expr -> expr INFIXOP3L expr
-- On DOTDOT reduce production value_expr -> expr INFIXOP3L expr
-- On COMMA reduce production value_expr -> expr INFIXOP3L expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP3L expr
-- On COLONCOLON reduce production value_expr -> expr INFIXOP3L expr
-- On COLON reduce production value_expr -> expr INFIXOP3L expr
-- On BARRBRACK reduce production value_expr -> expr INFIXOP3L expr
-- On BARCOLON reduce production value_expr -> expr INFIXOP3L expr
-- On BARBAR reduce production value_expr -> expr INFIXOP3L expr
-- On BAR reduce production value_expr -> expr INFIXOP3L expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP3L expr
** Conflict on WHERE

State 535:
value_expr -> expr INFIXOP2R . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 536
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 536:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP2R expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On COLONCOLON shift to state 537
-- On error reduce production value_expr -> expr INFIXOP2R expr
-- On THEN reduce production value_expr -> expr INFIXOP2R expr
-- On SEMI reduce production value_expr -> expr INFIXOP2R expr
-- On RPAREN reduce production value_expr -> expr INFIXOP2R expr
-- On RBRACK reduce production value_expr -> expr INFIXOP2R expr
-- On RBRACE reduce production value_expr -> expr INFIXOP2R expr
-- On QUESTION reduce production value_expr -> expr INFIXOP2R expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP2R expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP2R expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP2R expr
-- On EQ reduce production value_expr -> expr INFIXOP2R expr
-- On END reduce production value_expr -> expr INFIXOP2R expr
-- On ELSE reduce production value_expr -> expr INFIXOP2R expr
-- On DOTDOT reduce production value_expr -> expr INFIXOP2R expr
-- On COMMA reduce production value_expr -> expr INFIXOP2R expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP2R expr
-- On COLON reduce production value_expr -> expr INFIXOP2R expr
-- On BARRBRACK reduce production value_expr -> expr INFIXOP2R expr
-- On BARCOLON reduce production value_expr -> expr INFIXOP2R expr
-- On BARBAR reduce production value_expr -> expr INFIXOP2R expr
-- On BAR reduce production value_expr -> expr INFIXOP2R expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP2R expr
** Conflict on WHERE

State 537:
value_expr -> expr COLONCOLON . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 538
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 538:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr COLONCOLON expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On COLONCOLON shift to state 537
-- On error reduce production value_expr -> expr COLONCOLON expr
-- On THEN reduce production value_expr -> expr COLONCOLON expr
-- On SEMI reduce production value_expr -> expr COLONCOLON expr
-- On RPAREN reduce production value_expr -> expr COLONCOLON expr
-- On RBRACK reduce production value_expr -> expr COLONCOLON expr
-- On RBRACE reduce production value_expr -> expr COLONCOLON expr
-- On QUESTION reduce production value_expr -> expr COLONCOLON expr
-- On INFIXOP2R reduce production value_expr -> expr COLONCOLON expr
-- On INFIXOP2L reduce production value_expr -> expr COLONCOLON expr
-- On INFIXOP1R reduce production value_expr -> expr COLONCOLON expr
-- On INFIXOP1L reduce production value_expr -> expr COLONCOLON expr
-- On EQ reduce production value_expr -> expr COLONCOLON expr
-- On END reduce production value_expr -> expr COLONCOLON expr
-- On ELSE reduce production value_expr -> expr COLONCOLON expr
-- On DOTDOT reduce production value_expr -> expr COLONCOLON expr
-- On COMMA reduce production value_expr -> expr COLONCOLON expr
-- On COLONEQUAL reduce production value_expr -> expr COLONCOLON expr
-- On COLON reduce production value_expr -> expr COLONCOLON expr
-- On BARRBRACK reduce production value_expr -> expr COLONCOLON expr
-- On BARCOLON reduce production value_expr -> expr COLONCOLON expr
-- On BARBAR reduce production value_expr -> expr COLONCOLON expr
-- On BAR reduce production value_expr -> expr COLONCOLON expr
-- On AMPERAMPER reduce production value_expr -> expr COLONCOLON expr
** Conflict on WHERE

State 539:
value_expr -> expr INFIXOP2L . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 540
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 540:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP2L expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On COLONCOLON shift to state 537
-- On error reduce production value_expr -> expr INFIXOP2L expr
-- On THEN reduce production value_expr -> expr INFIXOP2L expr
-- On SEMI reduce production value_expr -> expr INFIXOP2L expr
-- On RPAREN reduce production value_expr -> expr INFIXOP2L expr
-- On RBRACK reduce production value_expr -> expr INFIXOP2L expr
-- On RBRACE reduce production value_expr -> expr INFIXOP2L expr
-- On QUESTION reduce production value_expr -> expr INFIXOP2L expr
-- On INFIXOP2L reduce production value_expr -> expr INFIXOP2L expr
-- On INFIXOP1R reduce production value_expr -> expr INFIXOP2L expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP2L expr
-- On EQ reduce production value_expr -> expr INFIXOP2L expr
-- On END reduce production value_expr -> expr INFIXOP2L expr
-- On ELSE reduce production value_expr -> expr INFIXOP2L expr
-- On DOTDOT reduce production value_expr -> expr INFIXOP2L expr
-- On COMMA reduce production value_expr -> expr INFIXOP2L expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP2L expr
-- On COLON reduce production value_expr -> expr INFIXOP2L expr
-- On BARRBRACK reduce production value_expr -> expr INFIXOP2L expr
-- On BARCOLON reduce production value_expr -> expr INFIXOP2L expr
-- On BARBAR reduce production value_expr -> expr INFIXOP2L expr
-- On BAR reduce production value_expr -> expr INFIXOP2L expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP2L expr
** Conflict on WHERE

State 541:
value_expr -> expr INFIXOP1R . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 542
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 542:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP1R expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On COLONCOLON shift to state 537
-- On error reduce production value_expr -> expr INFIXOP1R expr
-- On THEN reduce production value_expr -> expr INFIXOP1R expr
-- On SEMI reduce production value_expr -> expr INFIXOP1R expr
-- On RPAREN reduce production value_expr -> expr INFIXOP1R expr
-- On RBRACK reduce production value_expr -> expr INFIXOP1R expr
-- On RBRACE reduce production value_expr -> expr INFIXOP1R expr
-- On QUESTION reduce production value_expr -> expr INFIXOP1R expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP1R expr
-- On EQ reduce production value_expr -> expr INFIXOP1R expr
-- On END reduce production value_expr -> expr INFIXOP1R expr
-- On ELSE reduce production value_expr -> expr INFIXOP1R expr
-- On DOTDOT reduce production value_expr -> expr INFIXOP1R expr
-- On COMMA reduce production value_expr -> expr INFIXOP1R expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP1R expr
-- On COLON reduce production value_expr -> expr INFIXOP1R expr
-- On BARRBRACK reduce production value_expr -> expr INFIXOP1R expr
-- On BARCOLON reduce production value_expr -> expr INFIXOP1R expr
-- On BARBAR reduce production value_expr -> expr INFIXOP1R expr
-- On BAR reduce production value_expr -> expr INFIXOP1R expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP1R expr
** Conflict on WHERE

State 543:
value_expr -> expr INFIXOP1L . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 544
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 544:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr INFIXOP1L expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On COLONCOLON shift to state 537
-- On error reduce production value_expr -> expr INFIXOP1L expr
-- On THEN reduce production value_expr -> expr INFIXOP1L expr
-- On SEMI reduce production value_expr -> expr INFIXOP1L expr
-- On RPAREN reduce production value_expr -> expr INFIXOP1L expr
-- On RBRACK reduce production value_expr -> expr INFIXOP1L expr
-- On RBRACE reduce production value_expr -> expr INFIXOP1L expr
-- On QUESTION reduce production value_expr -> expr INFIXOP1L expr
-- On INFIXOP1L reduce production value_expr -> expr INFIXOP1L expr
-- On EQ reduce production value_expr -> expr INFIXOP1L expr
-- On END reduce production value_expr -> expr INFIXOP1L expr
-- On ELSE reduce production value_expr -> expr INFIXOP1L expr
-- On DOTDOT reduce production value_expr -> expr INFIXOP1L expr
-- On COMMA reduce production value_expr -> expr INFIXOP1L expr
-- On COLONEQUAL reduce production value_expr -> expr INFIXOP1L expr
-- On COLON reduce production value_expr -> expr INFIXOP1L expr
-- On BARRBRACK reduce production value_expr -> expr INFIXOP1L expr
-- On BARCOLON reduce production value_expr -> expr INFIXOP1L expr
-- On BARBAR reduce production value_expr -> expr INFIXOP1L expr
-- On BAR reduce production value_expr -> expr INFIXOP1L expr
-- On AMPERAMPER reduce production value_expr -> expr INFIXOP1L expr
** Conflict on WHERE

State 545:
value_expr -> expr EQ . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 546
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 546:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr EQ expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On COLONCOLON shift to state 537
-- On error reduce production value_expr -> expr EQ expr
-- On THEN reduce production value_expr -> expr EQ expr
-- On SEMI reduce production value_expr -> expr EQ expr
-- On RPAREN reduce production value_expr -> expr EQ expr
-- On RBRACK reduce production value_expr -> expr EQ expr
-- On RBRACE reduce production value_expr -> expr EQ expr
-- On QUESTION reduce production value_expr -> expr EQ expr
-- On INFIXOP1L reduce production value_expr -> expr EQ expr
-- On EQ reduce production value_expr -> expr EQ expr
-- On END reduce production value_expr -> expr EQ expr
-- On ELSE reduce production value_expr -> expr EQ expr
-- On DOTDOT reduce production value_expr -> expr EQ expr
-- On COMMA reduce production value_expr -> expr EQ expr
-- On COLONEQUAL reduce production value_expr -> expr EQ expr
-- On COLON reduce production value_expr -> expr EQ expr
-- On BARRBRACK reduce production value_expr -> expr EQ expr
-- On BARCOLON reduce production value_expr -> expr EQ expr
-- On BARBAR reduce production value_expr -> expr EQ expr
-- On BAR reduce production value_expr -> expr EQ expr
-- On AMPERAMPER reduce production value_expr -> expr EQ expr
** Conflict on WHERE

State 547:
no_value_expr -> expr COLONEQUAL . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 548
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 548:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr COLONEQUAL expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production no_value_expr -> expr COLONEQUAL expr
-- On THEN reduce production no_value_expr -> expr COLONEQUAL expr
-- On SEMI reduce production no_value_expr -> expr COLONEQUAL expr
-- On RPAREN reduce production no_value_expr -> expr COLONEQUAL expr
-- On RBRACK reduce production no_value_expr -> expr COLONEQUAL expr
-- On RBRACE reduce production no_value_expr -> expr COLONEQUAL expr
-- On END reduce production no_value_expr -> expr COLONEQUAL expr
-- On ELSE reduce production no_value_expr -> expr COLONEQUAL expr
-- On DOTDOT reduce production no_value_expr -> expr COLONEQUAL expr
-- On COMMA reduce production no_value_expr -> expr COLONEQUAL expr
-- On COLON reduce production no_value_expr -> expr COLONEQUAL expr
-- On BARRBRACK reduce production no_value_expr -> expr COLONEQUAL expr
-- On BARCOLON reduce production no_value_expr -> expr COLONEQUAL expr
-- On BAR reduce production no_value_expr -> expr COLONEQUAL expr
** Conflict on WHERE

State 549:
value_expr -> expr BARBAR . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 550
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 550:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr BARBAR expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production value_expr -> expr BARBAR expr
-- On THEN reduce production value_expr -> expr BARBAR expr
-- On SEMI reduce production value_expr -> expr BARBAR expr
-- On RPAREN reduce production value_expr -> expr BARBAR expr
-- On RBRACK reduce production value_expr -> expr BARBAR expr
-- On RBRACE reduce production value_expr -> expr BARBAR expr
-- On QUESTION reduce production value_expr -> expr BARBAR expr
-- On END reduce production value_expr -> expr BARBAR expr
-- On ELSE reduce production value_expr -> expr BARBAR expr
-- On DOTDOT reduce production value_expr -> expr BARBAR expr
-- On COMMA reduce production value_expr -> expr BARBAR expr
-- On COLONEQUAL reduce production value_expr -> expr BARBAR expr
-- On COLON reduce production value_expr -> expr BARBAR expr
-- On BARRBRACK reduce production value_expr -> expr BARBAR expr
-- On BARCOLON reduce production value_expr -> expr BARBAR expr
-- On BAR reduce production value_expr -> expr BARBAR expr
** Conflict on WHERE

State 551:
value_expr -> expr AMPERAMPER . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 552
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 552:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr AMPERAMPER expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONCOLON shift to state 537
-- On AMPERAMPER shift to state 551
-- On error reduce production value_expr -> expr AMPERAMPER expr
-- On THEN reduce production value_expr -> expr AMPERAMPER expr
-- On SEMI reduce production value_expr -> expr AMPERAMPER expr
-- On RPAREN reduce production value_expr -> expr AMPERAMPER expr
-- On RBRACK reduce production value_expr -> expr AMPERAMPER expr
-- On RBRACE reduce production value_expr -> expr AMPERAMPER expr
-- On QUESTION reduce production value_expr -> expr AMPERAMPER expr
-- On END reduce production value_expr -> expr AMPERAMPER expr
-- On ELSE reduce production value_expr -> expr AMPERAMPER expr
-- On DOTDOT reduce production value_expr -> expr AMPERAMPER expr
-- On COMMA reduce production value_expr -> expr AMPERAMPER expr
-- On COLONEQUAL reduce production value_expr -> expr AMPERAMPER expr
-- On COLON reduce production value_expr -> expr AMPERAMPER expr
-- On BARRBRACK reduce production value_expr -> expr AMPERAMPER expr
-- On BARCOLON reduce production value_expr -> expr AMPERAMPER expr
-- On BARBAR reduce production value_expr -> expr AMPERAMPER expr
-- On BAR reduce production value_expr -> expr AMPERAMPER expr
** Conflict on WHERE

State 553:
index_list -> index_list COMMA . index [ error RBRACK COMMA ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 386
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOTDOT shift to state 482
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On index shift to state 554
-- On expr shift to state 555
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 554:
index_list -> index_list COMMA index . [ error RBRACK COMMA ]
-- On error reduce production index_list -> index_list COMMA index
-- On RBRACK reduce production index_list -> index_list COMMA index
-- On COMMA reduce production index_list -> index_list COMMA index

State 555:
index -> expr . [ error RBRACK COMMA ]
index -> expr . COLON expr [ error RBRACK COMMA ]
index -> expr . COLON STAR [ error RBRACK COMMA ]
index -> expr . DOTDOT expr [ error RBRACK COMMA ]
index -> expr . DOTDOT [ error RBRACK COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On DOTDOT shift to state 556
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On COLON shift to state 558
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production index -> expr
-- On RBRACK reduce production index -> expr
-- On COMMA reduce production index -> expr

State 556:
index -> expr DOTDOT . expr [ error RBRACK COMMA ]
index -> expr DOTDOT . [ error RBRACK COMMA ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 557
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On error reduce production index -> expr DOTDOT
-- On RBRACK reduce production index -> expr DOTDOT
-- On COMMA reduce production index -> expr DOTDOT

State 557:
index -> expr DOTDOT expr . [ error RBRACK COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production index -> expr DOTDOT expr
-- On RBRACK reduce production index -> expr DOTDOT expr
-- On COMMA reduce production index -> expr DOTDOT expr

State 558:
index -> expr COLON . expr [ error RBRACK COMMA ]
index -> expr COLON . STAR [ error RBRACK COMMA ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On STAR shift to state 559
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 560
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 559:
index -> expr COLON STAR . [ error RBRACK COMMA ]
-- On error reduce production index -> expr COLON STAR
-- On RBRACK reduce production index -> expr COLON STAR
-- On COMMA reduce production index -> expr COLON STAR

State 560:
index -> expr COLON expr . [ error RBRACK COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production index -> expr COLON expr
-- On RBRACK reduce production index -> expr COLON expr
-- On COMMA reduce production index -> expr COLON expr

State 561:
index_list -> index . [ error RBRACK COMMA ]
-- On error reduce production index_list -> index
-- On RBRACK reduce production index_list -> index
-- On COMMA reduce production index_list -> index

State 562:
no_value_expr -> simple_expr DOT label_longident . LESSMINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT label_longident . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On LESSMINUS shift to state 563
-- On error reduce production simple_expr -> simple_expr DOT label_longident
-- On WHERE reduce production simple_expr -> simple_expr DOT label_longident
-- On UIDENT reduce production simple_expr -> simple_expr DOT label_longident
-- On THEN reduce production simple_expr -> simple_expr DOT label_longident
-- On STRING reduce production simple_expr -> simple_expr DOT label_longident
-- On STAR reduce production simple_expr -> simple_expr DOT label_longident
-- On SHARP reduce production simple_expr -> simple_expr DOT label_longident
-- On SEMI reduce production simple_expr -> simple_expr DOT label_longident
-- On RPAREN reduce production simple_expr -> simple_expr DOT label_longident
-- On RBRACK reduce production simple_expr -> simple_expr DOT label_longident
-- On RBRACE reduce production simple_expr -> simple_expr DOT label_longident
-- On QUESTION reduce production simple_expr -> simple_expr DOT label_longident
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT label_longident
-- On PLUS reduce production simple_expr -> simple_expr DOT label_longident
-- On MINUS reduce production simple_expr -> simple_expr DOT label_longident
-- On LVECTOR reduce production simple_expr -> simple_expr DOT label_longident
-- On LPAREN reduce production simple_expr -> simple_expr DOT label_longident
-- On LMATRIX reduce production simple_expr -> simple_expr DOT label_longident
-- On LIDENT reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACKBAR reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACK reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACE reduce production simple_expr -> simple_expr DOT label_longident
-- On INT reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP5R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP5L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP4R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP4L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP3R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP3L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP2R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP2L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP1R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP1L reduce production simple_expr -> simple_expr DOT label_longident
-- On IMAGINARY reduce production simple_expr -> simple_expr DOT label_longident
-- On FLOAT reduce production simple_expr -> simple_expr DOT label_longident
-- On EQ reduce production simple_expr -> simple_expr DOT label_longident
-- On END reduce production simple_expr -> simple_expr DOT label_longident
-- On ELSE reduce production simple_expr -> simple_expr DOT label_longident
-- On DOTDOT reduce production simple_expr -> simple_expr DOT label_longident
-- On DOT reduce production simple_expr -> simple_expr DOT label_longident
-- On DOLLAR reduce production simple_expr -> simple_expr DOT label_longident
-- On COMMA reduce production simple_expr -> simple_expr DOT label_longident
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT label_longident
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT label_longident
-- On COLON reduce production simple_expr -> simple_expr DOT label_longident
-- On CHAR reduce production simple_expr -> simple_expr DOT label_longident
-- On BEGIN reduce production simple_expr -> simple_expr DOT label_longident
-- On BARRBRACK reduce production simple_expr -> simple_expr DOT label_longident
-- On BARCOLON reduce production simple_expr -> simple_expr DOT label_longident
-- On BARBAR reduce production simple_expr -> simple_expr DOT label_longident
-- On BAR reduce production simple_expr -> simple_expr DOT label_longident
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT label_longident

State 563:
no_value_expr -> simple_expr DOT label_longident LESSMINUS . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 564
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 564:
no_value_expr -> simple_expr DOT label_longident LESSMINUS expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On THEN reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On SEMI reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On RPAREN reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On RBRACK reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On RBRACE reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On END reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On ELSE reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On DOTDOT reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On COMMA reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On COLON reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On BARRBRACK reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On BARCOLON reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On BAR reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
** Conflict on WHERE

State 565:
simple_expr_list -> simple_expr_list . simple_expr [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> simple_expr simple_expr_list . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On UIDENT shift to state 46
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On PREFIXOP shift to state 63
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On BEGIN shift to state 111
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 566
-- On constr_longident shift to state 515
-- On constant shift to state 516
-- On error reduce production value_expr -> simple_expr simple_expr_list
-- On WHERE reduce production value_expr -> simple_expr simple_expr_list
-- On THEN reduce production value_expr -> simple_expr simple_expr_list
-- On STAR reduce production value_expr -> simple_expr simple_expr_list
-- On SEMI reduce production value_expr -> simple_expr simple_expr_list
-- On RPAREN reduce production value_expr -> simple_expr simple_expr_list
-- On RBRACK reduce production value_expr -> simple_expr simple_expr_list
-- On RBRACE reduce production value_expr -> simple_expr simple_expr_list
-- On QUESTION reduce production value_expr -> simple_expr simple_expr_list
-- On PLUS reduce production value_expr -> simple_expr simple_expr_list
-- On MINUS reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP5R reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP5L reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP4R reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP4L reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP3R reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP3L reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP2R reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP2L reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP1R reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP1L reduce production value_expr -> simple_expr simple_expr_list
-- On EQ reduce production value_expr -> simple_expr simple_expr_list
-- On END reduce production value_expr -> simple_expr simple_expr_list
-- On ELSE reduce production value_expr -> simple_expr simple_expr_list
-- On DOTDOT reduce production value_expr -> simple_expr simple_expr_list
-- On COMMA reduce production value_expr -> simple_expr simple_expr_list
-- On COLONEQUAL reduce production value_expr -> simple_expr simple_expr_list
-- On COLONCOLON reduce production value_expr -> simple_expr simple_expr_list
-- On COLON reduce production value_expr -> simple_expr simple_expr_list
-- On BARRBRACK reduce production value_expr -> simple_expr simple_expr_list
-- On BARCOLON reduce production value_expr -> simple_expr simple_expr_list
-- On BARBAR reduce production value_expr -> simple_expr simple_expr_list
-- On BAR reduce production value_expr -> simple_expr simple_expr_list
-- On AMPERAMPER reduce production value_expr -> simple_expr simple_expr_list

State 566:
simple_expr -> simple_expr . DOT label_longident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr_list -> simple_expr_list simple_expr . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On DOT shift to state 491
-- On error reduce production simple_expr_list -> simple_expr_list simple_expr
-- On WHERE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On UIDENT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On THEN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On STRING reduce production simple_expr_list -> simple_expr_list simple_expr
-- On STAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On SHARP reduce production simple_expr_list -> simple_expr_list simple_expr
-- On SEMI reduce production simple_expr_list -> simple_expr_list simple_expr
-- On RPAREN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On RBRACK reduce production simple_expr_list -> simple_expr_list simple_expr
-- On RBRACE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On QUESTION reduce production simple_expr_list -> simple_expr_list simple_expr
-- On PREFIXOP reduce production simple_expr_list -> simple_expr_list simple_expr
-- On PLUS reduce production simple_expr_list -> simple_expr_list simple_expr
-- On MINUS reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LVECTOR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LPAREN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LMATRIX reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LIDENT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACKBAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACK reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP5R reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP5L reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP4R reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP4L reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP3R reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP3L reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP2R reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP2L reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP1R reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP1L reduce production simple_expr_list -> simple_expr_list simple_expr
-- On IMAGINARY reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FLOAT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On EQ reduce production simple_expr_list -> simple_expr_list simple_expr
-- On END reduce production simple_expr_list -> simple_expr_list simple_expr
-- On ELSE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On DOTDOT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On DOLLAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COMMA reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COLONEQUAL reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COLONCOLON reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COLON reduce production simple_expr_list -> simple_expr_list simple_expr
-- On CHAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BEGIN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BARRBRACK reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BARCOLON reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BARBAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On AMPERAMPER reduce production simple_expr_list -> simple_expr_list simple_expr

State 567:
simple_expr -> simple_expr . DOT label_longident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr_list -> simple_expr . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On DOT shift to state 491
-- On error reduce production simple_expr_list -> simple_expr
-- On WHERE reduce production simple_expr_list -> simple_expr
-- On UIDENT reduce production simple_expr_list -> simple_expr
-- On THEN reduce production simple_expr_list -> simple_expr
-- On STRING reduce production simple_expr_list -> simple_expr
-- On STAR reduce production simple_expr_list -> simple_expr
-- On SHARP reduce production simple_expr_list -> simple_expr
-- On SEMI reduce production simple_expr_list -> simple_expr
-- On RPAREN reduce production simple_expr_list -> simple_expr
-- On RBRACK reduce production simple_expr_list -> simple_expr
-- On RBRACE reduce production simple_expr_list -> simple_expr
-- On QUESTION reduce production simple_expr_list -> simple_expr
-- On PREFIXOP reduce production simple_expr_list -> simple_expr
-- On PLUS reduce production simple_expr_list -> simple_expr
-- On MINUS reduce production simple_expr_list -> simple_expr
-- On LVECTOR reduce production simple_expr_list -> simple_expr
-- On LPAREN reduce production simple_expr_list -> simple_expr
-- On LMATRIX reduce production simple_expr_list -> simple_expr
-- On LIDENT reduce production simple_expr_list -> simple_expr
-- On LBRACKBAR reduce production simple_expr_list -> simple_expr
-- On LBRACK reduce production simple_expr_list -> simple_expr
-- On LBRACE reduce production simple_expr_list -> simple_expr
-- On INT reduce production simple_expr_list -> simple_expr
-- On INFIXOP5R reduce production simple_expr_list -> simple_expr
-- On INFIXOP5L reduce production simple_expr_list -> simple_expr
-- On INFIXOP4R reduce production simple_expr_list -> simple_expr
-- On INFIXOP4L reduce production simple_expr_list -> simple_expr
-- On INFIXOP3R reduce production simple_expr_list -> simple_expr
-- On INFIXOP3L reduce production simple_expr_list -> simple_expr
-- On INFIXOP2R reduce production simple_expr_list -> simple_expr
-- On INFIXOP2L reduce production simple_expr_list -> simple_expr
-- On INFIXOP1R reduce production simple_expr_list -> simple_expr
-- On INFIXOP1L reduce production simple_expr_list -> simple_expr
-- On IMAGINARY reduce production simple_expr_list -> simple_expr
-- On FLOAT reduce production simple_expr_list -> simple_expr
-- On EQ reduce production simple_expr_list -> simple_expr
-- On END reduce production simple_expr_list -> simple_expr
-- On ELSE reduce production simple_expr_list -> simple_expr
-- On DOTDOT reduce production simple_expr_list -> simple_expr
-- On DOLLAR reduce production simple_expr_list -> simple_expr
-- On COMMA reduce production simple_expr_list -> simple_expr
-- On COLONEQUAL reduce production simple_expr_list -> simple_expr
-- On COLONCOLON reduce production simple_expr_list -> simple_expr
-- On COLON reduce production simple_expr_list -> simple_expr
-- On CHAR reduce production simple_expr_list -> simple_expr
-- On BEGIN reduce production simple_expr_list -> simple_expr
-- On BARRBRACK reduce production simple_expr_list -> simple_expr
-- On BARCOLON reduce production simple_expr_list -> simple_expr
-- On BARBAR reduce production simple_expr_list -> simple_expr
-- On BAR reduce production simple_expr_list -> simple_expr
-- On AMPERAMPER reduce production simple_expr_list -> simple_expr

State 568:
index_list -> index_list . COMMA index [ error RBRACK COMMA ]
simple_expr -> simple_expr DOT LBRACK index_list . RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACK index_list . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error shift to state 503
-- On RBRACK shift to state 569
-- On COMMA shift to state 553

State 569:
simple_expr -> simple_expr DOT LBRACK index_list RBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On WHERE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On UIDENT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On THEN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On STRING reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On STAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On SHARP reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On SEMI reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On RPAREN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On RBRACK reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On RBRACE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On QUESTION reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On PLUS reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On MINUS reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LVECTOR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LPAREN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LMATRIX reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LIDENT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LBRACKBAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LBRACK reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LBRACE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP5R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP5L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP4R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP4L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP3R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP3L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP2R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP2L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP1R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP1L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On IMAGINARY reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On FLOAT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On EQ reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On END reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On ELSE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DOTDOT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DOT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DOLLAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COMMA reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COLON reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On CHAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BEGIN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BARRBRACK reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BARCOLON reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BARBAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK

State 570:
simple_expr -> simple_expr DOT label_longident . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> simple_expr DOT label_longident
-- On WHERE reduce production simple_expr -> simple_expr DOT label_longident
-- On UIDENT reduce production simple_expr -> simple_expr DOT label_longident
-- On THEN reduce production simple_expr -> simple_expr DOT label_longident
-- On STRING reduce production simple_expr -> simple_expr DOT label_longident
-- On STAR reduce production simple_expr -> simple_expr DOT label_longident
-- On SHARP reduce production simple_expr -> simple_expr DOT label_longident
-- On SEMI reduce production simple_expr -> simple_expr DOT label_longident
-- On RPAREN reduce production simple_expr -> simple_expr DOT label_longident
-- On RBRACK reduce production simple_expr -> simple_expr DOT label_longident
-- On RBRACE reduce production simple_expr -> simple_expr DOT label_longident
-- On QUESTION reduce production simple_expr -> simple_expr DOT label_longident
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT label_longident
-- On PLUS reduce production simple_expr -> simple_expr DOT label_longident
-- On MINUS reduce production simple_expr -> simple_expr DOT label_longident
-- On LVECTOR reduce production simple_expr -> simple_expr DOT label_longident
-- On LPAREN reduce production simple_expr -> simple_expr DOT label_longident
-- On LMATRIX reduce production simple_expr -> simple_expr DOT label_longident
-- On LIDENT reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACKBAR reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACK reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACE reduce production simple_expr -> simple_expr DOT label_longident
-- On INT reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP5R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP5L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP4R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP4L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP3R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP3L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP2R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP2L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP1R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP1L reduce production simple_expr -> simple_expr DOT label_longident
-- On IMAGINARY reduce production simple_expr -> simple_expr DOT label_longident
-- On FLOAT reduce production simple_expr -> simple_expr DOT label_longident
-- On EQ reduce production simple_expr -> simple_expr DOT label_longident
-- On END reduce production simple_expr -> simple_expr DOT label_longident
-- On ELSE reduce production simple_expr -> simple_expr DOT label_longident
-- On DOTDOT reduce production simple_expr -> simple_expr DOT label_longident
-- On DOT reduce production simple_expr -> simple_expr DOT label_longident
-- On DOLLAR reduce production simple_expr -> simple_expr DOT label_longident
-- On COMMA reduce production simple_expr -> simple_expr DOT label_longident
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT label_longident
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT label_longident
-- On COLON reduce production simple_expr -> simple_expr DOT label_longident
-- On CHAR reduce production simple_expr -> simple_expr DOT label_longident
-- On BEGIN reduce production simple_expr -> simple_expr DOT label_longident
-- On BARRBRACK reduce production simple_expr -> simple_expr DOT label_longident
-- On BARCOLON reduce production simple_expr -> simple_expr DOT label_longident
-- On BARBAR reduce production simple_expr -> simple_expr DOT label_longident
-- On BAR reduce production simple_expr -> simple_expr DOT label_longident
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT label_longident

State 571:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_case -> UNDERSCORE MINUSGREATER expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On THEN reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On SEMI reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On RPAREN reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On RBRACK reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On RBRACE reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On END reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On ELSE reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On DOTDOT reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On COMMA reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On COLON reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On BARRBRACK reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On BARCOLON reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On BAR reduce production simple_case -> UNDERSCORE MINUSGREATER expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 572:
case_list -> simple_case . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production case_list -> simple_case
-- On WHERE reduce production case_list -> simple_case
-- On THEN reduce production case_list -> simple_case
-- On STAR reduce production case_list -> simple_case
-- On SEMI reduce production case_list -> simple_case
-- On RPAREN reduce production case_list -> simple_case
-- On RBRACK reduce production case_list -> simple_case
-- On RBRACE reduce production case_list -> simple_case
-- On QUESTION reduce production case_list -> simple_case
-- On PLUS reduce production case_list -> simple_case
-- On MINUS reduce production case_list -> simple_case
-- On INFIXOP5R reduce production case_list -> simple_case
-- On INFIXOP5L reduce production case_list -> simple_case
-- On INFIXOP4R reduce production case_list -> simple_case
-- On INFIXOP4L reduce production case_list -> simple_case
-- On INFIXOP3R reduce production case_list -> simple_case
-- On INFIXOP3L reduce production case_list -> simple_case
-- On INFIXOP2R reduce production case_list -> simple_case
-- On INFIXOP2L reduce production case_list -> simple_case
-- On INFIXOP1R reduce production case_list -> simple_case
-- On INFIXOP1L reduce production case_list -> simple_case
-- On EQ reduce production case_list -> simple_case
-- On END reduce production case_list -> simple_case
-- On ELSE reduce production case_list -> simple_case
-- On DOTDOT reduce production case_list -> simple_case
-- On COMMA reduce production case_list -> simple_case
-- On COLONEQUAL reduce production case_list -> simple_case
-- On COLONCOLON reduce production case_list -> simple_case
-- On COLON reduce production case_list -> simple_case
-- On BARRBRACK reduce production case_list -> simple_case
-- On BARCOLON reduce production case_list -> simple_case
-- On BARBAR reduce production case_list -> simple_case
-- On BAR reduce production case_list -> simple_case
-- On AMPERAMPER reduce production case_list -> simple_case

State 573:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
simple_case -> expr . MINUSGREATER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUSGREATER shift to state 574
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 574:
simple_case -> expr MINUSGREATER . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 575
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 575:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_case -> expr MINUSGREATER expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production simple_case -> expr MINUSGREATER expr
-- On THEN reduce production simple_case -> expr MINUSGREATER expr
-- On SEMI reduce production simple_case -> expr MINUSGREATER expr
-- On RPAREN reduce production simple_case -> expr MINUSGREATER expr
-- On RBRACK reduce production simple_case -> expr MINUSGREATER expr
-- On RBRACE reduce production simple_case -> expr MINUSGREATER expr
-- On END reduce production simple_case -> expr MINUSGREATER expr
-- On ELSE reduce production simple_case -> expr MINUSGREATER expr
-- On DOTDOT reduce production simple_case -> expr MINUSGREATER expr
-- On COMMA reduce production simple_case -> expr MINUSGREATER expr
-- On COLON reduce production simple_case -> expr MINUSGREATER expr
-- On BARRBRACK reduce production simple_case -> expr MINUSGREATER expr
-- On BARCOLON reduce production simple_case -> expr MINUSGREATER expr
-- On BAR reduce production simple_case -> expr MINUSGREATER expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 576:
case_list -> case_list . BAR simple_case [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> CASE opt_bar case_list . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On BAR shift to state 577
-- On error reduce production value_expr -> CASE opt_bar case_list
-- On WHERE reduce production value_expr -> CASE opt_bar case_list
-- On THEN reduce production value_expr -> CASE opt_bar case_list
-- On STAR reduce production value_expr -> CASE opt_bar case_list
-- On SEMI reduce production value_expr -> CASE opt_bar case_list
-- On RPAREN reduce production value_expr -> CASE opt_bar case_list
-- On RBRACK reduce production value_expr -> CASE opt_bar case_list
-- On RBRACE reduce production value_expr -> CASE opt_bar case_list
-- On QUESTION reduce production value_expr -> CASE opt_bar case_list
-- On PLUS reduce production value_expr -> CASE opt_bar case_list
-- On MINUS reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP5R reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP5L reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP4R reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP4L reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP3R reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP3L reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP2R reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP2L reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP1R reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP1L reduce production value_expr -> CASE opt_bar case_list
-- On EQ reduce production value_expr -> CASE opt_bar case_list
-- On END reduce production value_expr -> CASE opt_bar case_list
-- On ELSE reduce production value_expr -> CASE opt_bar case_list
-- On DOTDOT reduce production value_expr -> CASE opt_bar case_list
-- On COMMA reduce production value_expr -> CASE opt_bar case_list
-- On COLONEQUAL reduce production value_expr -> CASE opt_bar case_list
-- On COLONCOLON reduce production value_expr -> CASE opt_bar case_list
-- On COLON reduce production value_expr -> CASE opt_bar case_list
-- On BARRBRACK reduce production value_expr -> CASE opt_bar case_list
-- On BARCOLON reduce production value_expr -> CASE opt_bar case_list
-- On BARBAR reduce production value_expr -> CASE opt_bar case_list
-- On AMPERAMPER reduce production value_expr -> CASE opt_bar case_list
** Conflict on BAR

State 577:
case_list -> case_list BAR . simple_case [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UNDERSCORE shift to state 485
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On simple_case shift to state 578
-- On no_value_expr shift to state 423
-- On expr shift to state 573
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 578:
case_list -> case_list BAR simple_case . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production case_list -> case_list BAR simple_case
-- On WHERE reduce production case_list -> case_list BAR simple_case
-- On THEN reduce production case_list -> case_list BAR simple_case
-- On STAR reduce production case_list -> case_list BAR simple_case
-- On SEMI reduce production case_list -> case_list BAR simple_case
-- On RPAREN reduce production case_list -> case_list BAR simple_case
-- On RBRACK reduce production case_list -> case_list BAR simple_case
-- On RBRACE reduce production case_list -> case_list BAR simple_case
-- On QUESTION reduce production case_list -> case_list BAR simple_case
-- On PLUS reduce production case_list -> case_list BAR simple_case
-- On MINUS reduce production case_list -> case_list BAR simple_case
-- On INFIXOP5R reduce production case_list -> case_list BAR simple_case
-- On INFIXOP5L reduce production case_list -> case_list BAR simple_case
-- On INFIXOP4R reduce production case_list -> case_list BAR simple_case
-- On INFIXOP4L reduce production case_list -> case_list BAR simple_case
-- On INFIXOP3R reduce production case_list -> case_list BAR simple_case
-- On INFIXOP3L reduce production case_list -> case_list BAR simple_case
-- On INFIXOP2R reduce production case_list -> case_list BAR simple_case
-- On INFIXOP2L reduce production case_list -> case_list BAR simple_case
-- On INFIXOP1R reduce production case_list -> case_list BAR simple_case
-- On INFIXOP1L reduce production case_list -> case_list BAR simple_case
-- On EQ reduce production case_list -> case_list BAR simple_case
-- On END reduce production case_list -> case_list BAR simple_case
-- On ELSE reduce production case_list -> case_list BAR simple_case
-- On DOTDOT reduce production case_list -> case_list BAR simple_case
-- On COMMA reduce production case_list -> case_list BAR simple_case
-- On COLONEQUAL reduce production case_list -> case_list BAR simple_case
-- On COLONCOLON reduce production case_list -> case_list BAR simple_case
-- On COLON reduce production case_list -> case_list BAR simple_case
-- On BARRBRACK reduce production case_list -> case_list BAR simple_case
-- On BARCOLON reduce production case_list -> case_list BAR simple_case
-- On BARBAR reduce production case_list -> case_list BAR simple_case
-- On BAR reduce production case_list -> case_list BAR simple_case
-- On AMPERAMPER reduce production case_list -> case_list BAR simple_case

State 579:
index -> DOTDOT expr . [ error RBRACK COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production index -> DOTDOT expr
-- On RBRACK reduce production index -> DOTDOT expr
-- On COMMA reduce production index -> DOTDOT expr

State 580:
index_list -> index_list . COMMA index [ error RBRACK COMMA ]
no_value_expr -> simple_expr DOT LBRACK index_list . RBRACK LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT LBRACK index_list . RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT LBRACK index_list . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On error shift to state 581
-- On RBRACK shift to state 582
-- On COMMA shift to state 553

State 581:
simple_expr -> simple_expr DOT LBRACK index_list error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On WHILE reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On WHERE reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On UIDENT reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On TYPE reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On TRY reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On TO reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On THEN reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On STRING reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On STAR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On SHARP reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On SEMISEMI reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On SEMI reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On RPAREN reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On RAISE reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On QUESTION reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On PLUS reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On OPEN reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On MODULE reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On MINUSGREATER reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On MINUS reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On MATCH reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LVECTOR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LPAREN reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LMATRIX reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LIDENT reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LET reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LBRACKBAR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LBRACK reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LBRACE reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On LAZY reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INT reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP5R reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP5L reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP4R reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP4L reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP3R reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP3L reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP2R reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP2L reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP1R reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On INFIXOP1L reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On IN reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On IMAGINARY reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On IF reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On FUNCTION reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On FUN reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On FOR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On FLOAT reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On EXCEPTION reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On EQ reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On EOF reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On ELSE reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On DOWNTO reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On DOT reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On DONE reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On DOLLAR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On DO reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On COMMA reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On COLON reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On CHAR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On CASE reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On BELOW reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On BEGIN reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On BARBAR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On BAR reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On ASSERT reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On AND reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT LBRACK index_list error
-- On ABOVE reduce production simple_expr -> simple_expr DOT LBRACK index_list error

State 582:
no_value_expr -> simple_expr DOT LBRACK index_list RBRACK . LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT LBRACK index_list RBRACK . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On LESSMINUS shift to state 583
-- On WITH reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On WHILE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On WHERE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On UIDENT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On TYPE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On TRY reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On TO reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On THEN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On STRING reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On STAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On SHARP reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On SEMISEMI reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On SEMI reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On RPAREN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On RAISE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On QUESTION reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On PLUS reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On OPEN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On MODULE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On MINUSGREATER reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On MINUS reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On MATCH reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LVECTOR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LPAREN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LMATRIX reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LIDENT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LET reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LBRACKBAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LBRACK reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LBRACE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LAZY reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP5R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP5L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP4R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP4L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP3R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP3L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP2R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP2L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP1R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP1L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On IN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On IMAGINARY reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On IF reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On FUNCTION reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On FUN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On FOR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On FLOAT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On EXCEPTION reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On EQ reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On EOF reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On ELSE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DOWNTO reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DOT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DONE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DOLLAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DO reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COMMA reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COLON reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On CHAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On CASE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BELOW reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BEGIN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BARBAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On ASSERT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On AND reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On ABOVE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK

State 583:
no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 584
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 584:
no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On WHILE reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On UIDENT reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On TYPE reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On TRY reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On TO reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On THEN reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On STRING reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On SHARP reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On SEMISEMI reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On SEMI reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On RPAREN reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On RAISE reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On PREFIXOP reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On OPEN reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On MODULE reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On MINUSGREATER reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On MATCH reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On LVECTOR reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On LPAREN reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On LMATRIX reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On LIDENT reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On LET reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On LBRACKBAR reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On LBRACK reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On LBRACE reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On LAZY reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On INT reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On IN reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On IMAGINARY reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On IF reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On FUNCTION reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On FUN reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On FOR reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On FLOAT reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On EXCEPTION reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On EOF reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On ELSE reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On DOWNTO reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On DONE reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On DOLLAR reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On DO reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On COMMA reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On COLON reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On CHAR reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On CASE reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On BELOW reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On BEGIN reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On BAR reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On ASSERT reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On AND reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
-- On ABOVE reduce production no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
** Conflict on WHERE

State 585:
no_value_expr -> simple_expr DOT label_longident . LESSMINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT label_longident . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On LESSMINUS shift to state 586
-- On WITH reduce production simple_expr -> simple_expr DOT label_longident
-- On WHILE reduce production simple_expr -> simple_expr DOT label_longident
-- On WHERE reduce production simple_expr -> simple_expr DOT label_longident
-- On UIDENT reduce production simple_expr -> simple_expr DOT label_longident
-- On TYPE reduce production simple_expr -> simple_expr DOT label_longident
-- On TRY reduce production simple_expr -> simple_expr DOT label_longident
-- On TO reduce production simple_expr -> simple_expr DOT label_longident
-- On THEN reduce production simple_expr -> simple_expr DOT label_longident
-- On STRING reduce production simple_expr -> simple_expr DOT label_longident
-- On STAR reduce production simple_expr -> simple_expr DOT label_longident
-- On SHARP reduce production simple_expr -> simple_expr DOT label_longident
-- On SEMISEMI reduce production simple_expr -> simple_expr DOT label_longident
-- On SEMI reduce production simple_expr -> simple_expr DOT label_longident
-- On RPAREN reduce production simple_expr -> simple_expr DOT label_longident
-- On RAISE reduce production simple_expr -> simple_expr DOT label_longident
-- On QUESTION reduce production simple_expr -> simple_expr DOT label_longident
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT label_longident
-- On PLUS reduce production simple_expr -> simple_expr DOT label_longident
-- On OPEN reduce production simple_expr -> simple_expr DOT label_longident
-- On MODULE reduce production simple_expr -> simple_expr DOT label_longident
-- On MINUSGREATER reduce production simple_expr -> simple_expr DOT label_longident
-- On MINUS reduce production simple_expr -> simple_expr DOT label_longident
-- On MATCH reduce production simple_expr -> simple_expr DOT label_longident
-- On LVECTOR reduce production simple_expr -> simple_expr DOT label_longident
-- On LPAREN reduce production simple_expr -> simple_expr DOT label_longident
-- On LMATRIX reduce production simple_expr -> simple_expr DOT label_longident
-- On LIDENT reduce production simple_expr -> simple_expr DOT label_longident
-- On LET reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACKBAR reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACK reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACE reduce production simple_expr -> simple_expr DOT label_longident
-- On LAZY reduce production simple_expr -> simple_expr DOT label_longident
-- On INT reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP5R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP5L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP4R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP4L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP3R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP3L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP2R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP2L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP1R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP1L reduce production simple_expr -> simple_expr DOT label_longident
-- On IN reduce production simple_expr -> simple_expr DOT label_longident
-- On IMAGINARY reduce production simple_expr -> simple_expr DOT label_longident
-- On IF reduce production simple_expr -> simple_expr DOT label_longident
-- On FUNCTION reduce production simple_expr -> simple_expr DOT label_longident
-- On FUN reduce production simple_expr -> simple_expr DOT label_longident
-- On FOR reduce production simple_expr -> simple_expr DOT label_longident
-- On FLOAT reduce production simple_expr -> simple_expr DOT label_longident
-- On EXCEPTION reduce production simple_expr -> simple_expr DOT label_longident
-- On EQ reduce production simple_expr -> simple_expr DOT label_longident
-- On EOF reduce production simple_expr -> simple_expr DOT label_longident
-- On ELSE reduce production simple_expr -> simple_expr DOT label_longident
-- On DOWNTO reduce production simple_expr -> simple_expr DOT label_longident
-- On DOT reduce production simple_expr -> simple_expr DOT label_longident
-- On DONE reduce production simple_expr -> simple_expr DOT label_longident
-- On DOLLAR reduce production simple_expr -> simple_expr DOT label_longident
-- On DO reduce production simple_expr -> simple_expr DOT label_longident
-- On COMMA reduce production simple_expr -> simple_expr DOT label_longident
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT label_longident
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT label_longident
-- On COLON reduce production simple_expr -> simple_expr DOT label_longident
-- On CHAR reduce production simple_expr -> simple_expr DOT label_longident
-- On CASE reduce production simple_expr -> simple_expr DOT label_longident
-- On BELOW reduce production simple_expr -> simple_expr DOT label_longident
-- On BEGIN reduce production simple_expr -> simple_expr DOT label_longident
-- On BARBAR reduce production simple_expr -> simple_expr DOT label_longident
-- On BAR reduce production simple_expr -> simple_expr DOT label_longident
-- On ASSERT reduce production simple_expr -> simple_expr DOT label_longident
-- On AND reduce production simple_expr -> simple_expr DOT label_longident
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT label_longident
-- On ABOVE reduce production simple_expr -> simple_expr DOT label_longident

State 586:
no_value_expr -> simple_expr DOT label_longident LESSMINUS . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 587
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 587:
no_value_expr -> simple_expr DOT label_longident LESSMINUS expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On WHILE reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On UIDENT reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On TYPE reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On TRY reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On TO reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On THEN reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On STRING reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On SHARP reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On SEMISEMI reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On SEMI reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On RPAREN reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On RAISE reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On PREFIXOP reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On OPEN reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On MODULE reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On MINUSGREATER reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On MATCH reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LVECTOR reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LPAREN reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LMATRIX reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LIDENT reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LET reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACKBAR reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACK reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACE reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LAZY reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On INT reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On IN reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On IMAGINARY reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On IF reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On FUNCTION reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On FUN reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On FOR reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On FLOAT reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On EXCEPTION reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On EOF reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On ELSE reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On DOWNTO reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On DONE reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On DOLLAR reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On DO reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On COMMA reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On COLON reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On CHAR reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On CASE reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On BELOW reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On BEGIN reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On BAR reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On ASSERT reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On AND reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
-- On ABOVE reduce production no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
** Conflict on WHERE

State 588:
simple_expr_list -> simple_expr_list . simple_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> simple_expr simple_expr_list . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On UIDENT shift to state 3
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On PREFIXOP shift to state 37
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On BEGIN shift to state 123
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 589
-- On constr_longident shift to state 414
-- On constant shift to state 415
-- On WITH reduce production value_expr -> simple_expr simple_expr_list
-- On WHILE reduce production value_expr -> simple_expr simple_expr_list
-- On WHERE reduce production value_expr -> simple_expr simple_expr_list
-- On TYPE reduce production value_expr -> simple_expr simple_expr_list
-- On TRY reduce production value_expr -> simple_expr simple_expr_list
-- On TO reduce production value_expr -> simple_expr simple_expr_list
-- On THEN reduce production value_expr -> simple_expr simple_expr_list
-- On STAR reduce production value_expr -> simple_expr simple_expr_list
-- On SEMISEMI reduce production value_expr -> simple_expr simple_expr_list
-- On SEMI reduce production value_expr -> simple_expr simple_expr_list
-- On RPAREN reduce production value_expr -> simple_expr simple_expr_list
-- On RAISE reduce production value_expr -> simple_expr simple_expr_list
-- On QUESTION reduce production value_expr -> simple_expr simple_expr_list
-- On PLUS reduce production value_expr -> simple_expr simple_expr_list
-- On OPEN reduce production value_expr -> simple_expr simple_expr_list
-- On MODULE reduce production value_expr -> simple_expr simple_expr_list
-- On MINUSGREATER reduce production value_expr -> simple_expr simple_expr_list
-- On MINUS reduce production value_expr -> simple_expr simple_expr_list
-- On MATCH reduce production value_expr -> simple_expr simple_expr_list
-- On LET reduce production value_expr -> simple_expr simple_expr_list
-- On LAZY reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP5R reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP5L reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP4R reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP4L reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP3R reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP3L reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP2R reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP2L reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP1R reduce production value_expr -> simple_expr simple_expr_list
-- On INFIXOP1L reduce production value_expr -> simple_expr simple_expr_list
-- On IN reduce production value_expr -> simple_expr simple_expr_list
-- On IF reduce production value_expr -> simple_expr simple_expr_list
-- On FUNCTION reduce production value_expr -> simple_expr simple_expr_list
-- On FUN reduce production value_expr -> simple_expr simple_expr_list
-- On FOR reduce production value_expr -> simple_expr simple_expr_list
-- On EXCEPTION reduce production value_expr -> simple_expr simple_expr_list
-- On EQ reduce production value_expr -> simple_expr simple_expr_list
-- On EOF reduce production value_expr -> simple_expr simple_expr_list
-- On ELSE reduce production value_expr -> simple_expr simple_expr_list
-- On DOWNTO reduce production value_expr -> simple_expr simple_expr_list
-- On DONE reduce production value_expr -> simple_expr simple_expr_list
-- On DO reduce production value_expr -> simple_expr simple_expr_list
-- On COMMA reduce production value_expr -> simple_expr simple_expr_list
-- On COLONEQUAL reduce production value_expr -> simple_expr simple_expr_list
-- On COLONCOLON reduce production value_expr -> simple_expr simple_expr_list
-- On COLON reduce production value_expr -> simple_expr simple_expr_list
-- On CASE reduce production value_expr -> simple_expr simple_expr_list
-- On BELOW reduce production value_expr -> simple_expr simple_expr_list
-- On BARBAR reduce production value_expr -> simple_expr simple_expr_list
-- On BAR reduce production value_expr -> simple_expr simple_expr_list
-- On ASSERT reduce production value_expr -> simple_expr simple_expr_list
-- On AND reduce production value_expr -> simple_expr simple_expr_list
-- On AMPERAMPER reduce production value_expr -> simple_expr simple_expr_list
-- On ABOVE reduce production value_expr -> simple_expr simple_expr_list
** Conflict on UIDENT STRING SHARP LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT DOLLAR CHAR BEGIN

State 589:
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr_list -> simple_expr_list simple_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On DOT shift to state 384
-- On WITH reduce production simple_expr_list -> simple_expr_list simple_expr
-- On WHILE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On WHERE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On UIDENT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On TYPE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On TRY reduce production simple_expr_list -> simple_expr_list simple_expr
-- On TO reduce production simple_expr_list -> simple_expr_list simple_expr
-- On THEN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On STRING reduce production simple_expr_list -> simple_expr_list simple_expr
-- On STAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On SHARP reduce production simple_expr_list -> simple_expr_list simple_expr
-- On SEMISEMI reduce production simple_expr_list -> simple_expr_list simple_expr
-- On SEMI reduce production simple_expr_list -> simple_expr_list simple_expr
-- On RPAREN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On RAISE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On QUESTION reduce production simple_expr_list -> simple_expr_list simple_expr
-- On PREFIXOP reduce production simple_expr_list -> simple_expr_list simple_expr
-- On PLUS reduce production simple_expr_list -> simple_expr_list simple_expr
-- On OPEN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On MODULE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On MINUSGREATER reduce production simple_expr_list -> simple_expr_list simple_expr
-- On MINUS reduce production simple_expr_list -> simple_expr_list simple_expr
-- On MATCH reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LVECTOR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LPAREN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LMATRIX reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LIDENT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LET reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACKBAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACK reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LAZY reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP5R reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP5L reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP4R reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP4L reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP3R reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP3L reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP2R reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP2L reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP1R reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP1L reduce production simple_expr_list -> simple_expr_list simple_expr
-- On IN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On IMAGINARY reduce production simple_expr_list -> simple_expr_list simple_expr
-- On IF reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FUNCTION reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FUN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FOR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FLOAT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On EXCEPTION reduce production simple_expr_list -> simple_expr_list simple_expr
-- On EQ reduce production simple_expr_list -> simple_expr_list simple_expr
-- On EOF reduce production simple_expr_list -> simple_expr_list simple_expr
-- On ELSE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On DOWNTO reduce production simple_expr_list -> simple_expr_list simple_expr
-- On DONE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On DOLLAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On DO reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COMMA reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COLONEQUAL reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COLONCOLON reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COLON reduce production simple_expr_list -> simple_expr_list simple_expr
-- On CHAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On CASE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BELOW reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BEGIN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BARBAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On ASSERT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On AND reduce production simple_expr_list -> simple_expr_list simple_expr
-- On AMPERAMPER reduce production simple_expr_list -> simple_expr_list simple_expr
-- On ABOVE reduce production simple_expr_list -> simple_expr_list simple_expr

State 590:
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr_list -> simple_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On DOT shift to state 384
-- On WITH reduce production simple_expr_list -> simple_expr
-- On WHILE reduce production simple_expr_list -> simple_expr
-- On WHERE reduce production simple_expr_list -> simple_expr
-- On UIDENT reduce production simple_expr_list -> simple_expr
-- On TYPE reduce production simple_expr_list -> simple_expr
-- On TRY reduce production simple_expr_list -> simple_expr
-- On TO reduce production simple_expr_list -> simple_expr
-- On THEN reduce production simple_expr_list -> simple_expr
-- On STRING reduce production simple_expr_list -> simple_expr
-- On STAR reduce production simple_expr_list -> simple_expr
-- On SHARP reduce production simple_expr_list -> simple_expr
-- On SEMISEMI reduce production simple_expr_list -> simple_expr
-- On SEMI reduce production simple_expr_list -> simple_expr
-- On RPAREN reduce production simple_expr_list -> simple_expr
-- On RAISE reduce production simple_expr_list -> simple_expr
-- On QUESTION reduce production simple_expr_list -> simple_expr
-- On PREFIXOP reduce production simple_expr_list -> simple_expr
-- On PLUS reduce production simple_expr_list -> simple_expr
-- On OPEN reduce production simple_expr_list -> simple_expr
-- On MODULE reduce production simple_expr_list -> simple_expr
-- On MINUSGREATER reduce production simple_expr_list -> simple_expr
-- On MINUS reduce production simple_expr_list -> simple_expr
-- On MATCH reduce production simple_expr_list -> simple_expr
-- On LVECTOR reduce production simple_expr_list -> simple_expr
-- On LPAREN reduce production simple_expr_list -> simple_expr
-- On LMATRIX reduce production simple_expr_list -> simple_expr
-- On LIDENT reduce production simple_expr_list -> simple_expr
-- On LET reduce production simple_expr_list -> simple_expr
-- On LBRACKBAR reduce production simple_expr_list -> simple_expr
-- On LBRACK reduce production simple_expr_list -> simple_expr
-- On LBRACE reduce production simple_expr_list -> simple_expr
-- On LAZY reduce production simple_expr_list -> simple_expr
-- On INT reduce production simple_expr_list -> simple_expr
-- On INFIXOP5R reduce production simple_expr_list -> simple_expr
-- On INFIXOP5L reduce production simple_expr_list -> simple_expr
-- On INFIXOP4R reduce production simple_expr_list -> simple_expr
-- On INFIXOP4L reduce production simple_expr_list -> simple_expr
-- On INFIXOP3R reduce production simple_expr_list -> simple_expr
-- On INFIXOP3L reduce production simple_expr_list -> simple_expr
-- On INFIXOP2R reduce production simple_expr_list -> simple_expr
-- On INFIXOP2L reduce production simple_expr_list -> simple_expr
-- On INFIXOP1R reduce production simple_expr_list -> simple_expr
-- On INFIXOP1L reduce production simple_expr_list -> simple_expr
-- On IN reduce production simple_expr_list -> simple_expr
-- On IMAGINARY reduce production simple_expr_list -> simple_expr
-- On IF reduce production simple_expr_list -> simple_expr
-- On FUNCTION reduce production simple_expr_list -> simple_expr
-- On FUN reduce production simple_expr_list -> simple_expr
-- On FOR reduce production simple_expr_list -> simple_expr
-- On FLOAT reduce production simple_expr_list -> simple_expr
-- On EXCEPTION reduce production simple_expr_list -> simple_expr
-- On EQ reduce production simple_expr_list -> simple_expr
-- On EOF reduce production simple_expr_list -> simple_expr
-- On ELSE reduce production simple_expr_list -> simple_expr
-- On DOWNTO reduce production simple_expr_list -> simple_expr
-- On DONE reduce production simple_expr_list -> simple_expr
-- On DOLLAR reduce production simple_expr_list -> simple_expr
-- On DO reduce production simple_expr_list -> simple_expr
-- On COMMA reduce production simple_expr_list -> simple_expr
-- On COLONEQUAL reduce production simple_expr_list -> simple_expr
-- On COLONCOLON reduce production simple_expr_list -> simple_expr
-- On COLON reduce production simple_expr_list -> simple_expr
-- On CHAR reduce production simple_expr_list -> simple_expr
-- On CASE reduce production simple_expr_list -> simple_expr
-- On BELOW reduce production simple_expr_list -> simple_expr
-- On BEGIN reduce production simple_expr_list -> simple_expr
-- On BARBAR reduce production simple_expr_list -> simple_expr
-- On BAR reduce production simple_expr_list -> simple_expr
-- On ASSERT reduce production simple_expr_list -> simple_expr
-- On AND reduce production simple_expr_list -> simple_expr
-- On AMPERAMPER reduce production simple_expr_list -> simple_expr
-- On ABOVE reduce production simple_expr_list -> simple_expr

State 591:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_case -> UNDERSCORE MINUSGREATER expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On WHILE reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On UIDENT reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On TYPE reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On TRY reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On TO reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On THEN reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On STRING reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On SHARP reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On SEMISEMI reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On SEMI reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On RPAREN reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On RAISE reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On PREFIXOP reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On OPEN reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On MODULE reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On MINUSGREATER reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On MATCH reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On LVECTOR reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On LPAREN reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On LMATRIX reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On LIDENT reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On LET reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On LBRACKBAR reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On LBRACK reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On LBRACE reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On LAZY reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On INT reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On IN reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On IMAGINARY reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On IF reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On FUNCTION reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On FUN reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On FOR reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On FLOAT reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On EXCEPTION reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On EOF reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On ELSE reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On DOWNTO reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On DONE reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On DOLLAR reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On DO reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On COMMA reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On COLON reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On CHAR reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On CASE reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On BELOW reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On BEGIN reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On BAR reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On ASSERT reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On AND reduce production simple_case -> UNDERSCORE MINUSGREATER expr
-- On ABOVE reduce production simple_case -> UNDERSCORE MINUSGREATER expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 592:
case_list -> simple_case . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production case_list -> simple_case
-- On WHILE reduce production case_list -> simple_case
-- On WHERE reduce production case_list -> simple_case
-- On UIDENT reduce production case_list -> simple_case
-- On TYPE reduce production case_list -> simple_case
-- On TRY reduce production case_list -> simple_case
-- On TO reduce production case_list -> simple_case
-- On THEN reduce production case_list -> simple_case
-- On STRING reduce production case_list -> simple_case
-- On STAR reduce production case_list -> simple_case
-- On SHARP reduce production case_list -> simple_case
-- On SEMISEMI reduce production case_list -> simple_case
-- On SEMI reduce production case_list -> simple_case
-- On RPAREN reduce production case_list -> simple_case
-- On RAISE reduce production case_list -> simple_case
-- On QUESTION reduce production case_list -> simple_case
-- On PREFIXOP reduce production case_list -> simple_case
-- On PLUS reduce production case_list -> simple_case
-- On OPEN reduce production case_list -> simple_case
-- On MODULE reduce production case_list -> simple_case
-- On MINUSGREATER reduce production case_list -> simple_case
-- On MINUS reduce production case_list -> simple_case
-- On MATCH reduce production case_list -> simple_case
-- On LVECTOR reduce production case_list -> simple_case
-- On LPAREN reduce production case_list -> simple_case
-- On LMATRIX reduce production case_list -> simple_case
-- On LIDENT reduce production case_list -> simple_case
-- On LET reduce production case_list -> simple_case
-- On LBRACKBAR reduce production case_list -> simple_case
-- On LBRACK reduce production case_list -> simple_case
-- On LBRACE reduce production case_list -> simple_case
-- On LAZY reduce production case_list -> simple_case
-- On INT reduce production case_list -> simple_case
-- On INFIXOP5R reduce production case_list -> simple_case
-- On INFIXOP5L reduce production case_list -> simple_case
-- On INFIXOP4R reduce production case_list -> simple_case
-- On INFIXOP4L reduce production case_list -> simple_case
-- On INFIXOP3R reduce production case_list -> simple_case
-- On INFIXOP3L reduce production case_list -> simple_case
-- On INFIXOP2R reduce production case_list -> simple_case
-- On INFIXOP2L reduce production case_list -> simple_case
-- On INFIXOP1R reduce production case_list -> simple_case
-- On INFIXOP1L reduce production case_list -> simple_case
-- On IN reduce production case_list -> simple_case
-- On IMAGINARY reduce production case_list -> simple_case
-- On IF reduce production case_list -> simple_case
-- On FUNCTION reduce production case_list -> simple_case
-- On FUN reduce production case_list -> simple_case
-- On FOR reduce production case_list -> simple_case
-- On FLOAT reduce production case_list -> simple_case
-- On EXCEPTION reduce production case_list -> simple_case
-- On EQ reduce production case_list -> simple_case
-- On EOF reduce production case_list -> simple_case
-- On ELSE reduce production case_list -> simple_case
-- On DOWNTO reduce production case_list -> simple_case
-- On DONE reduce production case_list -> simple_case
-- On DOLLAR reduce production case_list -> simple_case
-- On DO reduce production case_list -> simple_case
-- On COMMA reduce production case_list -> simple_case
-- On COLONEQUAL reduce production case_list -> simple_case
-- On COLONCOLON reduce production case_list -> simple_case
-- On COLON reduce production case_list -> simple_case
-- On CHAR reduce production case_list -> simple_case
-- On CASE reduce production case_list -> simple_case
-- On BELOW reduce production case_list -> simple_case
-- On BEGIN reduce production case_list -> simple_case
-- On BARBAR reduce production case_list -> simple_case
-- On BAR reduce production case_list -> simple_case
-- On ASSERT reduce production case_list -> simple_case
-- On AND reduce production case_list -> simple_case
-- On AMPERAMPER reduce production case_list -> simple_case
-- On ABOVE reduce production case_list -> simple_case

State 593:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
simple_case -> expr . MINUSGREATER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUSGREATER shift to state 594
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 594:
simple_case -> expr MINUSGREATER . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 595
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 595:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_case -> expr MINUSGREATER expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production simple_case -> expr MINUSGREATER expr
-- On WHILE reduce production simple_case -> expr MINUSGREATER expr
-- On UIDENT reduce production simple_case -> expr MINUSGREATER expr
-- On TYPE reduce production simple_case -> expr MINUSGREATER expr
-- On TRY reduce production simple_case -> expr MINUSGREATER expr
-- On TO reduce production simple_case -> expr MINUSGREATER expr
-- On THEN reduce production simple_case -> expr MINUSGREATER expr
-- On STRING reduce production simple_case -> expr MINUSGREATER expr
-- On SHARP reduce production simple_case -> expr MINUSGREATER expr
-- On SEMISEMI reduce production simple_case -> expr MINUSGREATER expr
-- On SEMI reduce production simple_case -> expr MINUSGREATER expr
-- On RPAREN reduce production simple_case -> expr MINUSGREATER expr
-- On RAISE reduce production simple_case -> expr MINUSGREATER expr
-- On PREFIXOP reduce production simple_case -> expr MINUSGREATER expr
-- On OPEN reduce production simple_case -> expr MINUSGREATER expr
-- On MODULE reduce production simple_case -> expr MINUSGREATER expr
-- On MINUSGREATER reduce production simple_case -> expr MINUSGREATER expr
-- On MATCH reduce production simple_case -> expr MINUSGREATER expr
-- On LVECTOR reduce production simple_case -> expr MINUSGREATER expr
-- On LPAREN reduce production simple_case -> expr MINUSGREATER expr
-- On LMATRIX reduce production simple_case -> expr MINUSGREATER expr
-- On LIDENT reduce production simple_case -> expr MINUSGREATER expr
-- On LET reduce production simple_case -> expr MINUSGREATER expr
-- On LBRACKBAR reduce production simple_case -> expr MINUSGREATER expr
-- On LBRACK reduce production simple_case -> expr MINUSGREATER expr
-- On LBRACE reduce production simple_case -> expr MINUSGREATER expr
-- On LAZY reduce production simple_case -> expr MINUSGREATER expr
-- On INT reduce production simple_case -> expr MINUSGREATER expr
-- On IN reduce production simple_case -> expr MINUSGREATER expr
-- On IMAGINARY reduce production simple_case -> expr MINUSGREATER expr
-- On IF reduce production simple_case -> expr MINUSGREATER expr
-- On FUNCTION reduce production simple_case -> expr MINUSGREATER expr
-- On FUN reduce production simple_case -> expr MINUSGREATER expr
-- On FOR reduce production simple_case -> expr MINUSGREATER expr
-- On FLOAT reduce production simple_case -> expr MINUSGREATER expr
-- On EXCEPTION reduce production simple_case -> expr MINUSGREATER expr
-- On EOF reduce production simple_case -> expr MINUSGREATER expr
-- On ELSE reduce production simple_case -> expr MINUSGREATER expr
-- On DOWNTO reduce production simple_case -> expr MINUSGREATER expr
-- On DONE reduce production simple_case -> expr MINUSGREATER expr
-- On DOLLAR reduce production simple_case -> expr MINUSGREATER expr
-- On DO reduce production simple_case -> expr MINUSGREATER expr
-- On COMMA reduce production simple_case -> expr MINUSGREATER expr
-- On COLON reduce production simple_case -> expr MINUSGREATER expr
-- On CHAR reduce production simple_case -> expr MINUSGREATER expr
-- On CASE reduce production simple_case -> expr MINUSGREATER expr
-- On BELOW reduce production simple_case -> expr MINUSGREATER expr
-- On BEGIN reduce production simple_case -> expr MINUSGREATER expr
-- On BAR reduce production simple_case -> expr MINUSGREATER expr
-- On ASSERT reduce production simple_case -> expr MINUSGREATER expr
-- On AND reduce production simple_case -> expr MINUSGREATER expr
-- On ABOVE reduce production simple_case -> expr MINUSGREATER expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 596:
case_list -> case_list . BAR simple_case [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> CASE opt_bar case_list . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On BAR shift to state 597
-- On WITH reduce production value_expr -> CASE opt_bar case_list
-- On WHILE reduce production value_expr -> CASE opt_bar case_list
-- On WHERE reduce production value_expr -> CASE opt_bar case_list
-- On UIDENT reduce production value_expr -> CASE opt_bar case_list
-- On TYPE reduce production value_expr -> CASE opt_bar case_list
-- On TRY reduce production value_expr -> CASE opt_bar case_list
-- On TO reduce production value_expr -> CASE opt_bar case_list
-- On THEN reduce production value_expr -> CASE opt_bar case_list
-- On STRING reduce production value_expr -> CASE opt_bar case_list
-- On STAR reduce production value_expr -> CASE opt_bar case_list
-- On SHARP reduce production value_expr -> CASE opt_bar case_list
-- On SEMISEMI reduce production value_expr -> CASE opt_bar case_list
-- On SEMI reduce production value_expr -> CASE opt_bar case_list
-- On RPAREN reduce production value_expr -> CASE opt_bar case_list
-- On RAISE reduce production value_expr -> CASE opt_bar case_list
-- On QUESTION reduce production value_expr -> CASE opt_bar case_list
-- On PREFIXOP reduce production value_expr -> CASE opt_bar case_list
-- On PLUS reduce production value_expr -> CASE opt_bar case_list
-- On OPEN reduce production value_expr -> CASE opt_bar case_list
-- On MODULE reduce production value_expr -> CASE opt_bar case_list
-- On MINUSGREATER reduce production value_expr -> CASE opt_bar case_list
-- On MINUS reduce production value_expr -> CASE opt_bar case_list
-- On MATCH reduce production value_expr -> CASE opt_bar case_list
-- On LVECTOR reduce production value_expr -> CASE opt_bar case_list
-- On LPAREN reduce production value_expr -> CASE opt_bar case_list
-- On LMATRIX reduce production value_expr -> CASE opt_bar case_list
-- On LIDENT reduce production value_expr -> CASE opt_bar case_list
-- On LET reduce production value_expr -> CASE opt_bar case_list
-- On LBRACKBAR reduce production value_expr -> CASE opt_bar case_list
-- On LBRACK reduce production value_expr -> CASE opt_bar case_list
-- On LBRACE reduce production value_expr -> CASE opt_bar case_list
-- On LAZY reduce production value_expr -> CASE opt_bar case_list
-- On INT reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP5R reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP5L reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP4R reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP4L reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP3R reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP3L reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP2R reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP2L reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP1R reduce production value_expr -> CASE opt_bar case_list
-- On INFIXOP1L reduce production value_expr -> CASE opt_bar case_list
-- On IN reduce production value_expr -> CASE opt_bar case_list
-- On IMAGINARY reduce production value_expr -> CASE opt_bar case_list
-- On IF reduce production value_expr -> CASE opt_bar case_list
-- On FUNCTION reduce production value_expr -> CASE opt_bar case_list
-- On FUN reduce production value_expr -> CASE opt_bar case_list
-- On FOR reduce production value_expr -> CASE opt_bar case_list
-- On FLOAT reduce production value_expr -> CASE opt_bar case_list
-- On EXCEPTION reduce production value_expr -> CASE opt_bar case_list
-- On EQ reduce production value_expr -> CASE opt_bar case_list
-- On EOF reduce production value_expr -> CASE opt_bar case_list
-- On ELSE reduce production value_expr -> CASE opt_bar case_list
-- On DOWNTO reduce production value_expr -> CASE opt_bar case_list
-- On DONE reduce production value_expr -> CASE opt_bar case_list
-- On DOLLAR reduce production value_expr -> CASE opt_bar case_list
-- On DO reduce production value_expr -> CASE opt_bar case_list
-- On COMMA reduce production value_expr -> CASE opt_bar case_list
-- On COLONEQUAL reduce production value_expr -> CASE opt_bar case_list
-- On COLONCOLON reduce production value_expr -> CASE opt_bar case_list
-- On COLON reduce production value_expr -> CASE opt_bar case_list
-- On CHAR reduce production value_expr -> CASE opt_bar case_list
-- On CASE reduce production value_expr -> CASE opt_bar case_list
-- On BELOW reduce production value_expr -> CASE opt_bar case_list
-- On BEGIN reduce production value_expr -> CASE opt_bar case_list
-- On BARBAR reduce production value_expr -> CASE opt_bar case_list
-- On ASSERT reduce production value_expr -> CASE opt_bar case_list
-- On AND reduce production value_expr -> CASE opt_bar case_list
-- On AMPERAMPER reduce production value_expr -> CASE opt_bar case_list
-- On ABOVE reduce production value_expr -> CASE opt_bar case_list
** Conflict on BAR

State 597:
case_list -> case_list BAR . simple_case [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UNDERSCORE shift to state 410
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On simple_case shift to state 598
-- On no_value_expr shift to state 423
-- On expr shift to state 593
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 598:
case_list -> case_list BAR simple_case . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production case_list -> case_list BAR simple_case
-- On WHILE reduce production case_list -> case_list BAR simple_case
-- On WHERE reduce production case_list -> case_list BAR simple_case
-- On UIDENT reduce production case_list -> case_list BAR simple_case
-- On TYPE reduce production case_list -> case_list BAR simple_case
-- On TRY reduce production case_list -> case_list BAR simple_case
-- On TO reduce production case_list -> case_list BAR simple_case
-- On THEN reduce production case_list -> case_list BAR simple_case
-- On STRING reduce production case_list -> case_list BAR simple_case
-- On STAR reduce production case_list -> case_list BAR simple_case
-- On SHARP reduce production case_list -> case_list BAR simple_case
-- On SEMISEMI reduce production case_list -> case_list BAR simple_case
-- On SEMI reduce production case_list -> case_list BAR simple_case
-- On RPAREN reduce production case_list -> case_list BAR simple_case
-- On RAISE reduce production case_list -> case_list BAR simple_case
-- On QUESTION reduce production case_list -> case_list BAR simple_case
-- On PREFIXOP reduce production case_list -> case_list BAR simple_case
-- On PLUS reduce production case_list -> case_list BAR simple_case
-- On OPEN reduce production case_list -> case_list BAR simple_case
-- On MODULE reduce production case_list -> case_list BAR simple_case
-- On MINUSGREATER reduce production case_list -> case_list BAR simple_case
-- On MINUS reduce production case_list -> case_list BAR simple_case
-- On MATCH reduce production case_list -> case_list BAR simple_case
-- On LVECTOR reduce production case_list -> case_list BAR simple_case
-- On LPAREN reduce production case_list -> case_list BAR simple_case
-- On LMATRIX reduce production case_list -> case_list BAR simple_case
-- On LIDENT reduce production case_list -> case_list BAR simple_case
-- On LET reduce production case_list -> case_list BAR simple_case
-- On LBRACKBAR reduce production case_list -> case_list BAR simple_case
-- On LBRACK reduce production case_list -> case_list BAR simple_case
-- On LBRACE reduce production case_list -> case_list BAR simple_case
-- On LAZY reduce production case_list -> case_list BAR simple_case
-- On INT reduce production case_list -> case_list BAR simple_case
-- On INFIXOP5R reduce production case_list -> case_list BAR simple_case
-- On INFIXOP5L reduce production case_list -> case_list BAR simple_case
-- On INFIXOP4R reduce production case_list -> case_list BAR simple_case
-- On INFIXOP4L reduce production case_list -> case_list BAR simple_case
-- On INFIXOP3R reduce production case_list -> case_list BAR simple_case
-- On INFIXOP3L reduce production case_list -> case_list BAR simple_case
-- On INFIXOP2R reduce production case_list -> case_list BAR simple_case
-- On INFIXOP2L reduce production case_list -> case_list BAR simple_case
-- On INFIXOP1R reduce production case_list -> case_list BAR simple_case
-- On INFIXOP1L reduce production case_list -> case_list BAR simple_case
-- On IN reduce production case_list -> case_list BAR simple_case
-- On IMAGINARY reduce production case_list -> case_list BAR simple_case
-- On IF reduce production case_list -> case_list BAR simple_case
-- On FUNCTION reduce production case_list -> case_list BAR simple_case
-- On FUN reduce production case_list -> case_list BAR simple_case
-- On FOR reduce production case_list -> case_list BAR simple_case
-- On FLOAT reduce production case_list -> case_list BAR simple_case
-- On EXCEPTION reduce production case_list -> case_list BAR simple_case
-- On EQ reduce production case_list -> case_list BAR simple_case
-- On EOF reduce production case_list -> case_list BAR simple_case
-- On ELSE reduce production case_list -> case_list BAR simple_case
-- On DOWNTO reduce production case_list -> case_list BAR simple_case
-- On DONE reduce production case_list -> case_list BAR simple_case
-- On DOLLAR reduce production case_list -> case_list BAR simple_case
-- On DO reduce production case_list -> case_list BAR simple_case
-- On COMMA reduce production case_list -> case_list BAR simple_case
-- On COLONEQUAL reduce production case_list -> case_list BAR simple_case
-- On COLONCOLON reduce production case_list -> case_list BAR simple_case
-- On COLON reduce production case_list -> case_list BAR simple_case
-- On CHAR reduce production case_list -> case_list BAR simple_case
-- On CASE reduce production case_list -> case_list BAR simple_case
-- On BELOW reduce production case_list -> case_list BAR simple_case
-- On BEGIN reduce production case_list -> case_list BAR simple_case
-- On BARBAR reduce production case_list -> case_list BAR simple_case
-- On BAR reduce production case_list -> case_list BAR simple_case
-- On ASSERT reduce production case_list -> case_list BAR simple_case
-- On AND reduce production case_list -> case_list BAR simple_case
-- On AMPERAMPER reduce production case_list -> case_list BAR simple_case
-- On ABOVE reduce production case_list -> case_list BAR simple_case

State 599:
no_value_expr -> FOR LIDENT EQ expr . direction_flag expr DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WHERE TO STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOWNTO COLONEQUAL COLONCOLON BELOW BARBAR AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On TO shift to state 469
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On DOWNTO shift to state 470
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BELOW shift to state 471
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On ABOVE shift to state 472
-- On direction_flag shift to state 600

State 600:
no_value_expr -> FOR LIDENT EQ expr direction_flag . expr DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 601
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 601:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr . DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On DO shift to state 602
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 602:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO . seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 603
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 603:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr . DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On DONE shift to state 604

State 604:
no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On WHILE reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On WHERE reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On UIDENT reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On TYPE reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On TRY reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On TO reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On THEN reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On STRING reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On STAR reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On SHARP reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On SEMISEMI reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On SEMI reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On RPAREN reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On RAISE reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On QUESTION reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On PREFIXOP reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On PLUS reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On OPEN reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On MODULE reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On MINUSGREATER reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On MINUS reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On MATCH reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On LVECTOR reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On LPAREN reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On LMATRIX reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On LIDENT reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On LET reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On LBRACKBAR reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On LBRACK reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On LBRACE reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On LAZY reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INT reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP5R reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP5L reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP4R reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP4L reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP3R reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP3L reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP2R reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP2L reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP1R reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On INFIXOP1L reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On IN reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On IMAGINARY reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On IF reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On FUNCTION reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On FUN reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On FOR reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On FLOAT reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On EXCEPTION reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On EQ reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On EOF reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On ELSE reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On DOWNTO reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On DONE reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On DOLLAR reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On DO reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On COMMA reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On COLONEQUAL reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On COLONCOLON reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On COLON reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On CHAR reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On CASE reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On BELOW reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On BEGIN reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On BARBAR reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On BAR reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On ASSERT reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On AND reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On AMPERAMPER reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE
-- On ABOVE reduce production no_value_expr -> FOR LIDENT EQ expr direction_flag expr DO seq_expr DONE

State 605:
match_action -> MINUSGREATER seq_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production match_action -> MINUSGREATER seq_expr
-- On WHILE reduce production match_action -> MINUSGREATER seq_expr
-- On WHERE reduce production match_action -> MINUSGREATER seq_expr
-- On UIDENT reduce production match_action -> MINUSGREATER seq_expr
-- On TYPE reduce production match_action -> MINUSGREATER seq_expr
-- On TRY reduce production match_action -> MINUSGREATER seq_expr
-- On TO reduce production match_action -> MINUSGREATER seq_expr
-- On THEN reduce production match_action -> MINUSGREATER seq_expr
-- On STRING reduce production match_action -> MINUSGREATER seq_expr
-- On STAR reduce production match_action -> MINUSGREATER seq_expr
-- On SHARP reduce production match_action -> MINUSGREATER seq_expr
-- On SEMISEMI reduce production match_action -> MINUSGREATER seq_expr
-- On SEMI reduce production match_action -> MINUSGREATER seq_expr
-- On RPAREN reduce production match_action -> MINUSGREATER seq_expr
-- On RAISE reduce production match_action -> MINUSGREATER seq_expr
-- On QUESTION reduce production match_action -> MINUSGREATER seq_expr
-- On PREFIXOP reduce production match_action -> MINUSGREATER seq_expr
-- On PLUS reduce production match_action -> MINUSGREATER seq_expr
-- On OPEN reduce production match_action -> MINUSGREATER seq_expr
-- On MODULE reduce production match_action -> MINUSGREATER seq_expr
-- On MINUSGREATER reduce production match_action -> MINUSGREATER seq_expr
-- On MINUS reduce production match_action -> MINUSGREATER seq_expr
-- On MATCH reduce production match_action -> MINUSGREATER seq_expr
-- On LVECTOR reduce production match_action -> MINUSGREATER seq_expr
-- On LPAREN reduce production match_action -> MINUSGREATER seq_expr
-- On LMATRIX reduce production match_action -> MINUSGREATER seq_expr
-- On LIDENT reduce production match_action -> MINUSGREATER seq_expr
-- On LET reduce production match_action -> MINUSGREATER seq_expr
-- On LBRACKBAR reduce production match_action -> MINUSGREATER seq_expr
-- On LBRACK reduce production match_action -> MINUSGREATER seq_expr
-- On LBRACE reduce production match_action -> MINUSGREATER seq_expr
-- On LAZY reduce production match_action -> MINUSGREATER seq_expr
-- On INT reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP5R reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP5L reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP4R reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP4L reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP3R reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP3L reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP2R reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP2L reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP1R reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP1L reduce production match_action -> MINUSGREATER seq_expr
-- On IN reduce production match_action -> MINUSGREATER seq_expr
-- On IMAGINARY reduce production match_action -> MINUSGREATER seq_expr
-- On IF reduce production match_action -> MINUSGREATER seq_expr
-- On FUNCTION reduce production match_action -> MINUSGREATER seq_expr
-- On FUN reduce production match_action -> MINUSGREATER seq_expr
-- On FOR reduce production match_action -> MINUSGREATER seq_expr
-- On FLOAT reduce production match_action -> MINUSGREATER seq_expr
-- On EXCEPTION reduce production match_action -> MINUSGREATER seq_expr
-- On EQ reduce production match_action -> MINUSGREATER seq_expr
-- On EOF reduce production match_action -> MINUSGREATER seq_expr
-- On ELSE reduce production match_action -> MINUSGREATER seq_expr
-- On DOWNTO reduce production match_action -> MINUSGREATER seq_expr
-- On DONE reduce production match_action -> MINUSGREATER seq_expr
-- On DOLLAR reduce production match_action -> MINUSGREATER seq_expr
-- On DO reduce production match_action -> MINUSGREATER seq_expr
-- On COMMA reduce production match_action -> MINUSGREATER seq_expr
-- On COLONEQUAL reduce production match_action -> MINUSGREATER seq_expr
-- On COLONCOLON reduce production match_action -> MINUSGREATER seq_expr
-- On COLON reduce production match_action -> MINUSGREATER seq_expr
-- On CHAR reduce production match_action -> MINUSGREATER seq_expr
-- On CASE reduce production match_action -> MINUSGREATER seq_expr
-- On BELOW reduce production match_action -> MINUSGREATER seq_expr
-- On BEGIN reduce production match_action -> MINUSGREATER seq_expr
-- On BARBAR reduce production match_action -> MINUSGREATER seq_expr
-- On BAR reduce production match_action -> MINUSGREATER seq_expr
-- On ASSERT reduce production match_action -> MINUSGREATER seq_expr
-- On AND reduce production match_action -> MINUSGREATER seq_expr
-- On AMPERAMPER reduce production match_action -> MINUSGREATER seq_expr
-- On ABOVE reduce production match_action -> MINUSGREATER seq_expr

State 606:
fun_def -> simple_pattern . fun_def [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHEN shift to state 401
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUSGREATER shift to state 404
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 606
-- On signed_constant shift to state 306
-- On match_action shift to state 607
-- On fun_def shift to state 608
-- On constr_longident shift to state 609
-- On constant shift to state 145

State 607:
fun_def -> match_action . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production fun_def -> match_action
-- On WHILE reduce production fun_def -> match_action
-- On WHERE reduce production fun_def -> match_action
-- On UIDENT reduce production fun_def -> match_action
-- On TYPE reduce production fun_def -> match_action
-- On TRY reduce production fun_def -> match_action
-- On TO reduce production fun_def -> match_action
-- On THEN reduce production fun_def -> match_action
-- On STRING reduce production fun_def -> match_action
-- On STAR reduce production fun_def -> match_action
-- On SHARP reduce production fun_def -> match_action
-- On SEMISEMI reduce production fun_def -> match_action
-- On SEMI reduce production fun_def -> match_action
-- On RPAREN reduce production fun_def -> match_action
-- On RAISE reduce production fun_def -> match_action
-- On QUESTION reduce production fun_def -> match_action
-- On PREFIXOP reduce production fun_def -> match_action
-- On PLUS reduce production fun_def -> match_action
-- On OPEN reduce production fun_def -> match_action
-- On MODULE reduce production fun_def -> match_action
-- On MINUSGREATER reduce production fun_def -> match_action
-- On MINUS reduce production fun_def -> match_action
-- On MATCH reduce production fun_def -> match_action
-- On LVECTOR reduce production fun_def -> match_action
-- On LPAREN reduce production fun_def -> match_action
-- On LMATRIX reduce production fun_def -> match_action
-- On LIDENT reduce production fun_def -> match_action
-- On LET reduce production fun_def -> match_action
-- On LBRACKBAR reduce production fun_def -> match_action
-- On LBRACK reduce production fun_def -> match_action
-- On LBRACE reduce production fun_def -> match_action
-- On LAZY reduce production fun_def -> match_action
-- On INT reduce production fun_def -> match_action
-- On INFIXOP5R reduce production fun_def -> match_action
-- On INFIXOP5L reduce production fun_def -> match_action
-- On INFIXOP4R reduce production fun_def -> match_action
-- On INFIXOP4L reduce production fun_def -> match_action
-- On INFIXOP3R reduce production fun_def -> match_action
-- On INFIXOP3L reduce production fun_def -> match_action
-- On INFIXOP2R reduce production fun_def -> match_action
-- On INFIXOP2L reduce production fun_def -> match_action
-- On INFIXOP1R reduce production fun_def -> match_action
-- On INFIXOP1L reduce production fun_def -> match_action
-- On IN reduce production fun_def -> match_action
-- On IMAGINARY reduce production fun_def -> match_action
-- On IF reduce production fun_def -> match_action
-- On FUNCTION reduce production fun_def -> match_action
-- On FUN reduce production fun_def -> match_action
-- On FOR reduce production fun_def -> match_action
-- On FLOAT reduce production fun_def -> match_action
-- On EXCEPTION reduce production fun_def -> match_action
-- On EQ reduce production fun_def -> match_action
-- On EOF reduce production fun_def -> match_action
-- On ELSE reduce production fun_def -> match_action
-- On DOWNTO reduce production fun_def -> match_action
-- On DONE reduce production fun_def -> match_action
-- On DOLLAR reduce production fun_def -> match_action
-- On DO reduce production fun_def -> match_action
-- On COMMA reduce production fun_def -> match_action
-- On COLONEQUAL reduce production fun_def -> match_action
-- On COLONCOLON reduce production fun_def -> match_action
-- On COLON reduce production fun_def -> match_action
-- On CHAR reduce production fun_def -> match_action
-- On CASE reduce production fun_def -> match_action
-- On BELOW reduce production fun_def -> match_action
-- On BEGIN reduce production fun_def -> match_action
-- On BARBAR reduce production fun_def -> match_action
-- On BAR reduce production fun_def -> match_action
-- On ASSERT reduce production fun_def -> match_action
-- On AND reduce production fun_def -> match_action
-- On AMPERAMPER reduce production fun_def -> match_action
-- On ABOVE reduce production fun_def -> match_action

State 608:
fun_def -> simple_pattern fun_def . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production fun_def -> simple_pattern fun_def
-- On WHILE reduce production fun_def -> simple_pattern fun_def
-- On WHERE reduce production fun_def -> simple_pattern fun_def
-- On UIDENT reduce production fun_def -> simple_pattern fun_def
-- On TYPE reduce production fun_def -> simple_pattern fun_def
-- On TRY reduce production fun_def -> simple_pattern fun_def
-- On TO reduce production fun_def -> simple_pattern fun_def
-- On THEN reduce production fun_def -> simple_pattern fun_def
-- On STRING reduce production fun_def -> simple_pattern fun_def
-- On STAR reduce production fun_def -> simple_pattern fun_def
-- On SHARP reduce production fun_def -> simple_pattern fun_def
-- On SEMISEMI reduce production fun_def -> simple_pattern fun_def
-- On SEMI reduce production fun_def -> simple_pattern fun_def
-- On RPAREN reduce production fun_def -> simple_pattern fun_def
-- On RAISE reduce production fun_def -> simple_pattern fun_def
-- On QUESTION reduce production fun_def -> simple_pattern fun_def
-- On PREFIXOP reduce production fun_def -> simple_pattern fun_def
-- On PLUS reduce production fun_def -> simple_pattern fun_def
-- On OPEN reduce production fun_def -> simple_pattern fun_def
-- On MODULE reduce production fun_def -> simple_pattern fun_def
-- On MINUSGREATER reduce production fun_def -> simple_pattern fun_def
-- On MINUS reduce production fun_def -> simple_pattern fun_def
-- On MATCH reduce production fun_def -> simple_pattern fun_def
-- On LVECTOR reduce production fun_def -> simple_pattern fun_def
-- On LPAREN reduce production fun_def -> simple_pattern fun_def
-- On LMATRIX reduce production fun_def -> simple_pattern fun_def
-- On LIDENT reduce production fun_def -> simple_pattern fun_def
-- On LET reduce production fun_def -> simple_pattern fun_def
-- On LBRACKBAR reduce production fun_def -> simple_pattern fun_def
-- On LBRACK reduce production fun_def -> simple_pattern fun_def
-- On LBRACE reduce production fun_def -> simple_pattern fun_def
-- On LAZY reduce production fun_def -> simple_pattern fun_def
-- On INT reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP5R reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP5L reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP4R reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP4L reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP3R reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP3L reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP2R reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP2L reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP1R reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP1L reduce production fun_def -> simple_pattern fun_def
-- On IN reduce production fun_def -> simple_pattern fun_def
-- On IMAGINARY reduce production fun_def -> simple_pattern fun_def
-- On IF reduce production fun_def -> simple_pattern fun_def
-- On FUNCTION reduce production fun_def -> simple_pattern fun_def
-- On FUN reduce production fun_def -> simple_pattern fun_def
-- On FOR reduce production fun_def -> simple_pattern fun_def
-- On FLOAT reduce production fun_def -> simple_pattern fun_def
-- On EXCEPTION reduce production fun_def -> simple_pattern fun_def
-- On EQ reduce production fun_def -> simple_pattern fun_def
-- On EOF reduce production fun_def -> simple_pattern fun_def
-- On ELSE reduce production fun_def -> simple_pattern fun_def
-- On DOWNTO reduce production fun_def -> simple_pattern fun_def
-- On DONE reduce production fun_def -> simple_pattern fun_def
-- On DOLLAR reduce production fun_def -> simple_pattern fun_def
-- On DO reduce production fun_def -> simple_pattern fun_def
-- On COMMA reduce production fun_def -> simple_pattern fun_def
-- On COLONEQUAL reduce production fun_def -> simple_pattern fun_def
-- On COLONCOLON reduce production fun_def -> simple_pattern fun_def
-- On COLON reduce production fun_def -> simple_pattern fun_def
-- On CHAR reduce production fun_def -> simple_pattern fun_def
-- On CASE reduce production fun_def -> simple_pattern fun_def
-- On BELOW reduce production fun_def -> simple_pattern fun_def
-- On BEGIN reduce production fun_def -> simple_pattern fun_def
-- On BARBAR reduce production fun_def -> simple_pattern fun_def
-- On BAR reduce production fun_def -> simple_pattern fun_def
-- On ASSERT reduce production fun_def -> simple_pattern fun_def
-- On AND reduce production fun_def -> simple_pattern fun_def
-- On AMPERAMPER reduce production fun_def -> simple_pattern fun_def
-- On ABOVE reduce production fun_def -> simple_pattern fun_def

State 609:
simple_pattern -> constr_longident . [ WHEN UNDERSCORE UIDENT STRING SHARP MINUSGREATER MINUS LVECTOR LPAREN LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR CHAR ]
-- On WHEN reduce production simple_pattern -> constr_longident
-- On UNDERSCORE reduce production simple_pattern -> constr_longident
-- On UIDENT reduce production simple_pattern -> constr_longident
-- On STRING reduce production simple_pattern -> constr_longident
-- On SHARP reduce production simple_pattern -> constr_longident
-- On MINUSGREATER reduce production simple_pattern -> constr_longident
-- On MINUS reduce production simple_pattern -> constr_longident
-- On LVECTOR reduce production simple_pattern -> constr_longident
-- On LPAREN reduce production simple_pattern -> constr_longident
-- On LIDENT reduce production simple_pattern -> constr_longident
-- On LBRACKBAR reduce production simple_pattern -> constr_longident
-- On LBRACK reduce production simple_pattern -> constr_longident
-- On LBRACE reduce production simple_pattern -> constr_longident
-- On INT reduce production simple_pattern -> constr_longident
-- On IMAGINARY reduce production simple_pattern -> constr_longident
-- On FLOAT reduce production simple_pattern -> constr_longident
-- On EQ reduce production simple_pattern -> constr_longident
-- On DOLLAR reduce production simple_pattern -> constr_longident
-- On CHAR reduce production simple_pattern -> constr_longident

State 610:
value_expr -> FUN simple_pattern fun_def . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production value_expr -> FUN simple_pattern fun_def
-- On WHILE reduce production value_expr -> FUN simple_pattern fun_def
-- On WHERE reduce production value_expr -> FUN simple_pattern fun_def
-- On UIDENT reduce production value_expr -> FUN simple_pattern fun_def
-- On TYPE reduce production value_expr -> FUN simple_pattern fun_def
-- On TRY reduce production value_expr -> FUN simple_pattern fun_def
-- On TO reduce production value_expr -> FUN simple_pattern fun_def
-- On THEN reduce production value_expr -> FUN simple_pattern fun_def
-- On STRING reduce production value_expr -> FUN simple_pattern fun_def
-- On STAR reduce production value_expr -> FUN simple_pattern fun_def
-- On SHARP reduce production value_expr -> FUN simple_pattern fun_def
-- On SEMISEMI reduce production value_expr -> FUN simple_pattern fun_def
-- On SEMI reduce production value_expr -> FUN simple_pattern fun_def
-- On RPAREN reduce production value_expr -> FUN simple_pattern fun_def
-- On RAISE reduce production value_expr -> FUN simple_pattern fun_def
-- On QUESTION reduce production value_expr -> FUN simple_pattern fun_def
-- On PREFIXOP reduce production value_expr -> FUN simple_pattern fun_def
-- On PLUS reduce production value_expr -> FUN simple_pattern fun_def
-- On OPEN reduce production value_expr -> FUN simple_pattern fun_def
-- On MODULE reduce production value_expr -> FUN simple_pattern fun_def
-- On MINUSGREATER reduce production value_expr -> FUN simple_pattern fun_def
-- On MINUS reduce production value_expr -> FUN simple_pattern fun_def
-- On MATCH reduce production value_expr -> FUN simple_pattern fun_def
-- On LVECTOR reduce production value_expr -> FUN simple_pattern fun_def
-- On LPAREN reduce production value_expr -> FUN simple_pattern fun_def
-- On LMATRIX reduce production value_expr -> FUN simple_pattern fun_def
-- On LIDENT reduce production value_expr -> FUN simple_pattern fun_def
-- On LET reduce production value_expr -> FUN simple_pattern fun_def
-- On LBRACKBAR reduce production value_expr -> FUN simple_pattern fun_def
-- On LBRACK reduce production value_expr -> FUN simple_pattern fun_def
-- On LBRACE reduce production value_expr -> FUN simple_pattern fun_def
-- On LAZY reduce production value_expr -> FUN simple_pattern fun_def
-- On INT reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP5R reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP5L reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP4R reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP4L reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP3R reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP3L reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP2R reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP2L reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP1R reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP1L reduce production value_expr -> FUN simple_pattern fun_def
-- On IN reduce production value_expr -> FUN simple_pattern fun_def
-- On IMAGINARY reduce production value_expr -> FUN simple_pattern fun_def
-- On IF reduce production value_expr -> FUN simple_pattern fun_def
-- On FUNCTION reduce production value_expr -> FUN simple_pattern fun_def
-- On FUN reduce production value_expr -> FUN simple_pattern fun_def
-- On FOR reduce production value_expr -> FUN simple_pattern fun_def
-- On FLOAT reduce production value_expr -> FUN simple_pattern fun_def
-- On EXCEPTION reduce production value_expr -> FUN simple_pattern fun_def
-- On EQ reduce production value_expr -> FUN simple_pattern fun_def
-- On EOF reduce production value_expr -> FUN simple_pattern fun_def
-- On ELSE reduce production value_expr -> FUN simple_pattern fun_def
-- On DOWNTO reduce production value_expr -> FUN simple_pattern fun_def
-- On DONE reduce production value_expr -> FUN simple_pattern fun_def
-- On DOLLAR reduce production value_expr -> FUN simple_pattern fun_def
-- On DO reduce production value_expr -> FUN simple_pattern fun_def
-- On COMMA reduce production value_expr -> FUN simple_pattern fun_def
-- On COLONEQUAL reduce production value_expr -> FUN simple_pattern fun_def
-- On COLONCOLON reduce production value_expr -> FUN simple_pattern fun_def
-- On COLON reduce production value_expr -> FUN simple_pattern fun_def
-- On CHAR reduce production value_expr -> FUN simple_pattern fun_def
-- On CASE reduce production value_expr -> FUN simple_pattern fun_def
-- On BELOW reduce production value_expr -> FUN simple_pattern fun_def
-- On BEGIN reduce production value_expr -> FUN simple_pattern fun_def
-- On BARBAR reduce production value_expr -> FUN simple_pattern fun_def
-- On BAR reduce production value_expr -> FUN simple_pattern fun_def
-- On ASSERT reduce production value_expr -> FUN simple_pattern fun_def
-- On AND reduce production value_expr -> FUN simple_pattern fun_def
-- On AMPERAMPER reduce production value_expr -> FUN simple_pattern fun_def
-- On ABOVE reduce production value_expr -> FUN simple_pattern fun_def

State 611:
match_action -> WHEN expr . MINUSGREATER seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUSGREATER shift to state 612
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 612:
match_action -> WHEN expr MINUSGREATER . seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 613
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 613:
match_action -> WHEN expr MINUSGREATER seq_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On WHILE reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On WHERE reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On UIDENT reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On TYPE reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On TRY reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On TO reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On THEN reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On STRING reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On STAR reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On SHARP reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On SEMISEMI reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On SEMI reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On RPAREN reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On RAISE reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On QUESTION reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On PREFIXOP reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On PLUS reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On OPEN reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On MODULE reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On MINUSGREATER reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On MINUS reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On MATCH reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On LVECTOR reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On LPAREN reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On LMATRIX reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On LIDENT reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On LET reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On LBRACKBAR reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On LBRACK reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On LBRACE reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On LAZY reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INT reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP5R reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP5L reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP4R reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP4L reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP3R reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP3L reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP2R reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP2L reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP1R reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP1L reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On IN reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On IMAGINARY reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On IF reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On FUNCTION reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On FUN reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On FOR reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On FLOAT reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On EXCEPTION reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On EQ reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On EOF reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On ELSE reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On DOWNTO reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On DONE reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On DOLLAR reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On DO reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On COMMA reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On COLONEQUAL reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On COLONCOLON reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On COLON reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On CHAR reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On CASE reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On BELOW reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On BEGIN reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On BARBAR reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On BAR reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On ASSERT reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On AND reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On AMPERAMPER reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On ABOVE reduce production match_action -> WHEN expr MINUSGREATER seq_expr

State 614:
match_cases -> pattern_comma_list opt_comma match_action . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On WHILE reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On WHERE reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On UIDENT reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On TYPE reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On TRY reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On TO reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On THEN reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On STRING reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On STAR reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On SHARP reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On SEMISEMI reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On SEMI reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On RPAREN reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On RAISE reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On QUESTION reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On PREFIXOP reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On PLUS reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On OPEN reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On MODULE reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On MINUSGREATER reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On MINUS reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On MATCH reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On LVECTOR reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On LPAREN reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On LMATRIX reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On LIDENT reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On LET reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On LBRACKBAR reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On LBRACK reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On LBRACE reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On LAZY reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INT reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP5R reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP5L reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP4R reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP4L reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP3R reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP3L reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP2R reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP2L reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP1R reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP1L reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On IN reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On IMAGINARY reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On IF reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On FUNCTION reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On FUN reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On FOR reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On FLOAT reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On EXCEPTION reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On EQ reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On EOF reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On ELSE reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On DOWNTO reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On DONE reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On DOLLAR reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On DO reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On COMMA reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On COLONEQUAL reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On COLONCOLON reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On COLON reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On CHAR reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On CASE reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On BELOW reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On BEGIN reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On BARBAR reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On BAR reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On ASSERT reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On AND reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On AMPERAMPER reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On ABOVE reduce production match_cases -> pattern_comma_list opt_comma match_action

State 615:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> FUNCTION opt_bar match_cases . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On BAR shift to state 616
-- On WITH reduce production value_expr -> FUNCTION opt_bar match_cases
-- On WHILE reduce production value_expr -> FUNCTION opt_bar match_cases
-- On WHERE reduce production value_expr -> FUNCTION opt_bar match_cases
-- On UIDENT reduce production value_expr -> FUNCTION opt_bar match_cases
-- On TYPE reduce production value_expr -> FUNCTION opt_bar match_cases
-- On TRY reduce production value_expr -> FUNCTION opt_bar match_cases
-- On TO reduce production value_expr -> FUNCTION opt_bar match_cases
-- On THEN reduce production value_expr -> FUNCTION opt_bar match_cases
-- On STRING reduce production value_expr -> FUNCTION opt_bar match_cases
-- On STAR reduce production value_expr -> FUNCTION opt_bar match_cases
-- On SHARP reduce production value_expr -> FUNCTION opt_bar match_cases
-- On SEMISEMI reduce production value_expr -> FUNCTION opt_bar match_cases
-- On SEMI reduce production value_expr -> FUNCTION opt_bar match_cases
-- On RPAREN reduce production value_expr -> FUNCTION opt_bar match_cases
-- On RAISE reduce production value_expr -> FUNCTION opt_bar match_cases
-- On QUESTION reduce production value_expr -> FUNCTION opt_bar match_cases
-- On PREFIXOP reduce production value_expr -> FUNCTION opt_bar match_cases
-- On PLUS reduce production value_expr -> FUNCTION opt_bar match_cases
-- On OPEN reduce production value_expr -> FUNCTION opt_bar match_cases
-- On MODULE reduce production value_expr -> FUNCTION opt_bar match_cases
-- On MINUSGREATER reduce production value_expr -> FUNCTION opt_bar match_cases
-- On MINUS reduce production value_expr -> FUNCTION opt_bar match_cases
-- On MATCH reduce production value_expr -> FUNCTION opt_bar match_cases
-- On LVECTOR reduce production value_expr -> FUNCTION opt_bar match_cases
-- On LPAREN reduce production value_expr -> FUNCTION opt_bar match_cases
-- On LMATRIX reduce production value_expr -> FUNCTION opt_bar match_cases
-- On LIDENT reduce production value_expr -> FUNCTION opt_bar match_cases
-- On LET reduce production value_expr -> FUNCTION opt_bar match_cases
-- On LBRACKBAR reduce production value_expr -> FUNCTION opt_bar match_cases
-- On LBRACK reduce production value_expr -> FUNCTION opt_bar match_cases
-- On LBRACE reduce production value_expr -> FUNCTION opt_bar match_cases
-- On LAZY reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INT reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP5R reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP5L reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP4R reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP4L reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP3R reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP3L reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP2R reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP2L reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP1R reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP1L reduce production value_expr -> FUNCTION opt_bar match_cases
-- On IN reduce production value_expr -> FUNCTION opt_bar match_cases
-- On IMAGINARY reduce production value_expr -> FUNCTION opt_bar match_cases
-- On IF reduce production value_expr -> FUNCTION opt_bar match_cases
-- On FUNCTION reduce production value_expr -> FUNCTION opt_bar match_cases
-- On FUN reduce production value_expr -> FUNCTION opt_bar match_cases
-- On FOR reduce production value_expr -> FUNCTION opt_bar match_cases
-- On FLOAT reduce production value_expr -> FUNCTION opt_bar match_cases
-- On EXCEPTION reduce production value_expr -> FUNCTION opt_bar match_cases
-- On EQ reduce production value_expr -> FUNCTION opt_bar match_cases
-- On EOF reduce production value_expr -> FUNCTION opt_bar match_cases
-- On ELSE reduce production value_expr -> FUNCTION opt_bar match_cases
-- On DOWNTO reduce production value_expr -> FUNCTION opt_bar match_cases
-- On DONE reduce production value_expr -> FUNCTION opt_bar match_cases
-- On DOLLAR reduce production value_expr -> FUNCTION opt_bar match_cases
-- On DO reduce production value_expr -> FUNCTION opt_bar match_cases
-- On COMMA reduce production value_expr -> FUNCTION opt_bar match_cases
-- On COLONEQUAL reduce production value_expr -> FUNCTION opt_bar match_cases
-- On COLONCOLON reduce production value_expr -> FUNCTION opt_bar match_cases
-- On COLON reduce production value_expr -> FUNCTION opt_bar match_cases
-- On CHAR reduce production value_expr -> FUNCTION opt_bar match_cases
-- On CASE reduce production value_expr -> FUNCTION opt_bar match_cases
-- On BELOW reduce production value_expr -> FUNCTION opt_bar match_cases
-- On BEGIN reduce production value_expr -> FUNCTION opt_bar match_cases
-- On BARBAR reduce production value_expr -> FUNCTION opt_bar match_cases
-- On ASSERT reduce production value_expr -> FUNCTION opt_bar match_cases
-- On AND reduce production value_expr -> FUNCTION opt_bar match_cases
-- On AMPERAMPER reduce production value_expr -> FUNCTION opt_bar match_cases
-- On ABOVE reduce production value_expr -> FUNCTION opt_bar match_cases

State 616:
match_cases -> match_cases BAR . pattern_comma_list opt_comma match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 617
-- On pattern shift to state 399
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 617:
match_cases -> match_cases BAR pattern_comma_list . opt_comma match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ WHEN MINUSGREATER COMMA ]
-- On COMMA shift to state 397
-- On opt_comma shift to state 618
-- On WHEN reduce production opt_comma ->
-- On MINUSGREATER reduce production opt_comma ->

State 618:
match_cases -> match_cases BAR pattern_comma_list opt_comma . match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHEN shift to state 401
-- On MINUSGREATER shift to state 404
-- On match_action shift to state 619

State 619:
match_cases -> match_cases BAR pattern_comma_list opt_comma match_action . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On WHILE reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On WHERE reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On UIDENT reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On TYPE reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On TRY reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On TO reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On THEN reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On STRING reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On STAR reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On SHARP reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On SEMISEMI reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On SEMI reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On RPAREN reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On RAISE reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On QUESTION reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On PREFIXOP reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On PLUS reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On OPEN reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On MODULE reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On MINUSGREATER reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On MINUS reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On MATCH reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On LVECTOR reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On LPAREN reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On LMATRIX reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On LIDENT reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On LET reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On LBRACKBAR reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On LBRACK reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On LBRACE reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On LAZY reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INT reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP5R reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP5L reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP4R reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP4L reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP3R reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP3L reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP2R reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP2L reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP1R reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP1L reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On IN reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On IMAGINARY reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On IF reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On FUNCTION reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On FUN reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On FOR reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On FLOAT reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On EXCEPTION reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On EQ reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On EOF reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On ELSE reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On DOWNTO reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On DONE reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On DOLLAR reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On DO reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On COMMA reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On COLONEQUAL reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On COLONCOLON reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On COLON reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On CHAR reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On CASE reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On BELOW reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On BEGIN reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On BARBAR reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On BAR reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On ASSERT reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On AND reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On AMPERAMPER reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On ABOVE reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action

State 620:
no_value_expr -> expr . COLONEQUAL expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> IF expr . THEN expr ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> IF expr . THEN expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On THEN shift to state 621
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 621:
value_expr -> IF expr THEN . expr ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> IF expr THEN . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 622
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 622:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> IF expr THEN expr . ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> IF expr THEN expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On ELSE shift to state 623
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production value_expr -> IF expr THEN expr
-- On WHILE reduce production value_expr -> IF expr THEN expr
-- On UIDENT reduce production value_expr -> IF expr THEN expr
-- On TYPE reduce production value_expr -> IF expr THEN expr
-- On TRY reduce production value_expr -> IF expr THEN expr
-- On TO reduce production value_expr -> IF expr THEN expr
-- On THEN reduce production value_expr -> IF expr THEN expr
-- On STRING reduce production value_expr -> IF expr THEN expr
-- On SHARP reduce production value_expr -> IF expr THEN expr
-- On SEMISEMI reduce production value_expr -> IF expr THEN expr
-- On SEMI reduce production value_expr -> IF expr THEN expr
-- On RPAREN reduce production value_expr -> IF expr THEN expr
-- On RAISE reduce production value_expr -> IF expr THEN expr
-- On PREFIXOP reduce production value_expr -> IF expr THEN expr
-- On OPEN reduce production value_expr -> IF expr THEN expr
-- On MODULE reduce production value_expr -> IF expr THEN expr
-- On MINUSGREATER reduce production value_expr -> IF expr THEN expr
-- On MATCH reduce production value_expr -> IF expr THEN expr
-- On LVECTOR reduce production value_expr -> IF expr THEN expr
-- On LPAREN reduce production value_expr -> IF expr THEN expr
-- On LMATRIX reduce production value_expr -> IF expr THEN expr
-- On LIDENT reduce production value_expr -> IF expr THEN expr
-- On LET reduce production value_expr -> IF expr THEN expr
-- On LBRACKBAR reduce production value_expr -> IF expr THEN expr
-- On LBRACK reduce production value_expr -> IF expr THEN expr
-- On LBRACE reduce production value_expr -> IF expr THEN expr
-- On LAZY reduce production value_expr -> IF expr THEN expr
-- On INT reduce production value_expr -> IF expr THEN expr
-- On IN reduce production value_expr -> IF expr THEN expr
-- On IMAGINARY reduce production value_expr -> IF expr THEN expr
-- On IF reduce production value_expr -> IF expr THEN expr
-- On FUNCTION reduce production value_expr -> IF expr THEN expr
-- On FUN reduce production value_expr -> IF expr THEN expr
-- On FOR reduce production value_expr -> IF expr THEN expr
-- On FLOAT reduce production value_expr -> IF expr THEN expr
-- On EXCEPTION reduce production value_expr -> IF expr THEN expr
-- On EOF reduce production value_expr -> IF expr THEN expr
-- On DOWNTO reduce production value_expr -> IF expr THEN expr
-- On DONE reduce production value_expr -> IF expr THEN expr
-- On DOLLAR reduce production value_expr -> IF expr THEN expr
-- On DO reduce production value_expr -> IF expr THEN expr
-- On COMMA reduce production value_expr -> IF expr THEN expr
-- On COLON reduce production value_expr -> IF expr THEN expr
-- On CHAR reduce production value_expr -> IF expr THEN expr
-- On CASE reduce production value_expr -> IF expr THEN expr
-- On BELOW reduce production value_expr -> IF expr THEN expr
-- On BEGIN reduce production value_expr -> IF expr THEN expr
-- On BAR reduce production value_expr -> IF expr THEN expr
-- On ASSERT reduce production value_expr -> IF expr THEN expr
-- On AND reduce production value_expr -> IF expr THEN expr
-- On ABOVE reduce production value_expr -> IF expr THEN expr
** Conflict on WHERE ELSE

State 623:
value_expr -> IF expr THEN expr ELSE . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 624
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 624:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> IF expr THEN expr ELSE expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production value_expr -> IF expr THEN expr ELSE expr
-- On WHILE reduce production value_expr -> IF expr THEN expr ELSE expr
-- On UIDENT reduce production value_expr -> IF expr THEN expr ELSE expr
-- On TYPE reduce production value_expr -> IF expr THEN expr ELSE expr
-- On TRY reduce production value_expr -> IF expr THEN expr ELSE expr
-- On TO reduce production value_expr -> IF expr THEN expr ELSE expr
-- On THEN reduce production value_expr -> IF expr THEN expr ELSE expr
-- On STRING reduce production value_expr -> IF expr THEN expr ELSE expr
-- On SHARP reduce production value_expr -> IF expr THEN expr ELSE expr
-- On SEMISEMI reduce production value_expr -> IF expr THEN expr ELSE expr
-- On SEMI reduce production value_expr -> IF expr THEN expr ELSE expr
-- On RPAREN reduce production value_expr -> IF expr THEN expr ELSE expr
-- On RAISE reduce production value_expr -> IF expr THEN expr ELSE expr
-- On PREFIXOP reduce production value_expr -> IF expr THEN expr ELSE expr
-- On OPEN reduce production value_expr -> IF expr THEN expr ELSE expr
-- On MODULE reduce production value_expr -> IF expr THEN expr ELSE expr
-- On MINUSGREATER reduce production value_expr -> IF expr THEN expr ELSE expr
-- On MATCH reduce production value_expr -> IF expr THEN expr ELSE expr
-- On LVECTOR reduce production value_expr -> IF expr THEN expr ELSE expr
-- On LPAREN reduce production value_expr -> IF expr THEN expr ELSE expr
-- On LMATRIX reduce production value_expr -> IF expr THEN expr ELSE expr
-- On LIDENT reduce production value_expr -> IF expr THEN expr ELSE expr
-- On LET reduce production value_expr -> IF expr THEN expr ELSE expr
-- On LBRACKBAR reduce production value_expr -> IF expr THEN expr ELSE expr
-- On LBRACK reduce production value_expr -> IF expr THEN expr ELSE expr
-- On LBRACE reduce production value_expr -> IF expr THEN expr ELSE expr
-- On LAZY reduce production value_expr -> IF expr THEN expr ELSE expr
-- On INT reduce production value_expr -> IF expr THEN expr ELSE expr
-- On IN reduce production value_expr -> IF expr THEN expr ELSE expr
-- On IMAGINARY reduce production value_expr -> IF expr THEN expr ELSE expr
-- On IF reduce production value_expr -> IF expr THEN expr ELSE expr
-- On FUNCTION reduce production value_expr -> IF expr THEN expr ELSE expr
-- On FUN reduce production value_expr -> IF expr THEN expr ELSE expr
-- On FOR reduce production value_expr -> IF expr THEN expr ELSE expr
-- On FLOAT reduce production value_expr -> IF expr THEN expr ELSE expr
-- On EXCEPTION reduce production value_expr -> IF expr THEN expr ELSE expr
-- On EOF reduce production value_expr -> IF expr THEN expr ELSE expr
-- On ELSE reduce production value_expr -> IF expr THEN expr ELSE expr
-- On DOWNTO reduce production value_expr -> IF expr THEN expr ELSE expr
-- On DONE reduce production value_expr -> IF expr THEN expr ELSE expr
-- On DOLLAR reduce production value_expr -> IF expr THEN expr ELSE expr
-- On DO reduce production value_expr -> IF expr THEN expr ELSE expr
-- On COMMA reduce production value_expr -> IF expr THEN expr ELSE expr
-- On COLON reduce production value_expr -> IF expr THEN expr ELSE expr
-- On CHAR reduce production value_expr -> IF expr THEN expr ELSE expr
-- On CASE reduce production value_expr -> IF expr THEN expr ELSE expr
-- On BELOW reduce production value_expr -> IF expr THEN expr ELSE expr
-- On BEGIN reduce production value_expr -> IF expr THEN expr ELSE expr
-- On BAR reduce production value_expr -> IF expr THEN expr ELSE expr
-- On ASSERT reduce production value_expr -> IF expr THEN expr ELSE expr
-- On AND reduce production value_expr -> IF expr THEN expr ELSE expr
-- On ABOVE reduce production value_expr -> IF expr THEN expr ELSE expr
** Conflict on WHERE

State 625:
match_action -> WHEN expr . MINUSGREATER seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUSGREATER MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUSGREATER shift to state 626
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 626:
match_action -> WHEN expr MINUSGREATER . seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On seq_expr shift to state 627
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 629

State 627:
match_action -> WHEN expr MINUSGREATER seq_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On WHERE reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On THEN reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On STAR reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On SEMI reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On RPAREN reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On RBRACK reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On RBRACE reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On QUESTION reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On PLUS reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On MINUS reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP5R reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP5L reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP4R reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP4L reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP3R reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP3L reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP2R reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP2L reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP1R reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On INFIXOP1L reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On EQ reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On END reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On ELSE reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On DOTDOT reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On COMMA reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On COLONEQUAL reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On COLONCOLON reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On COLON reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On BARRBRACK reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On BARCOLON reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On BARBAR reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On BAR reduce production match_action -> WHEN expr MINUSGREATER seq_expr
-- On AMPERAMPER reduce production match_action -> WHEN expr MINUSGREATER seq_expr

State 628:
basic_seq_expr -> expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production basic_seq_expr -> expr
-- On THEN reduce production basic_seq_expr -> expr
-- On SEMI reduce production basic_seq_expr -> expr
-- On RPAREN reduce production basic_seq_expr -> expr
-- On RBRACK reduce production basic_seq_expr -> expr
-- On RBRACE reduce production basic_seq_expr -> expr
-- On END reduce production basic_seq_expr -> expr
-- On ELSE reduce production basic_seq_expr -> expr
-- On DOTDOT reduce production basic_seq_expr -> expr
-- On COMMA reduce production basic_seq_expr -> expr
-- On COLON reduce production basic_seq_expr -> expr
-- On BARRBRACK reduce production basic_seq_expr -> expr
-- On BARCOLON reduce production basic_seq_expr -> expr
-- On BAR reduce production basic_seq_expr -> expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 629:
basic_seq_expr -> basic_seq_expr . SEMI expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
basic_seq_expr -> basic_seq_expr . SEMI [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
seq_expr -> basic_seq_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On SEMI shift to state 630
-- On error reduce production seq_expr -> basic_seq_expr
-- On WHERE reduce production seq_expr -> basic_seq_expr
-- On THEN reduce production seq_expr -> basic_seq_expr
-- On STAR reduce production seq_expr -> basic_seq_expr
-- On RPAREN reduce production seq_expr -> basic_seq_expr
-- On RBRACK reduce production seq_expr -> basic_seq_expr
-- On RBRACE reduce production seq_expr -> basic_seq_expr
-- On QUESTION reduce production seq_expr -> basic_seq_expr
-- On PLUS reduce production seq_expr -> basic_seq_expr
-- On MINUS reduce production seq_expr -> basic_seq_expr
-- On INFIXOP5R reduce production seq_expr -> basic_seq_expr
-- On INFIXOP5L reduce production seq_expr -> basic_seq_expr
-- On INFIXOP4R reduce production seq_expr -> basic_seq_expr
-- On INFIXOP4L reduce production seq_expr -> basic_seq_expr
-- On INFIXOP3R reduce production seq_expr -> basic_seq_expr
-- On INFIXOP3L reduce production seq_expr -> basic_seq_expr
-- On INFIXOP2R reduce production seq_expr -> basic_seq_expr
-- On INFIXOP2L reduce production seq_expr -> basic_seq_expr
-- On INFIXOP1R reduce production seq_expr -> basic_seq_expr
-- On INFIXOP1L reduce production seq_expr -> basic_seq_expr
-- On EQ reduce production seq_expr -> basic_seq_expr
-- On END reduce production seq_expr -> basic_seq_expr
-- On ELSE reduce production seq_expr -> basic_seq_expr
-- On DOTDOT reduce production seq_expr -> basic_seq_expr
-- On COMMA reduce production seq_expr -> basic_seq_expr
-- On COLONEQUAL reduce production seq_expr -> basic_seq_expr
-- On COLONCOLON reduce production seq_expr -> basic_seq_expr
-- On COLON reduce production seq_expr -> basic_seq_expr
-- On BARRBRACK reduce production seq_expr -> basic_seq_expr
-- On BARCOLON reduce production seq_expr -> basic_seq_expr
-- On BARBAR reduce production seq_expr -> basic_seq_expr
-- On BAR reduce production seq_expr -> basic_seq_expr
-- On AMPERAMPER reduce production seq_expr -> basic_seq_expr
** Conflict on SEMI

State 630:
basic_seq_expr -> basic_seq_expr SEMI . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
basic_seq_expr -> basic_seq_expr SEMI . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 631
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On error reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On THEN reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On STAR reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On SEMI reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On RPAREN reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On RBRACK reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On RBRACE reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On QUESTION reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP5R reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP5L reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP4R reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP4L reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP3R reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP3L reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP2R reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP2L reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP1R reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On INFIXOP1L reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On EQ reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On END reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On ELSE reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On DOTDOT reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On COMMA reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On COLONEQUAL reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On COLONCOLON reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On COLON reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On BARRBRACK reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On BARCOLON reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On BARBAR reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On BAR reduce production basic_seq_expr -> basic_seq_expr SEMI
-- On AMPERAMPER reduce production basic_seq_expr -> basic_seq_expr SEMI
** Conflict on WHERE

State 631:
basic_seq_expr -> basic_seq_expr SEMI expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On THEN reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On SEMI reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On RPAREN reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On RBRACK reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On RBRACE reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On END reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On ELSE reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On DOTDOT reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On COMMA reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On COLON reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On BARRBRACK reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On BARCOLON reduce production basic_seq_expr -> basic_seq_expr SEMI expr
-- On BAR reduce production basic_seq_expr -> basic_seq_expr SEMI expr
** Conflict on WHERE

State 632:
match_action -> MINUSGREATER . seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On seq_expr shift to state 633
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 629

State 633:
match_action -> MINUSGREATER seq_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production match_action -> MINUSGREATER seq_expr
-- On WHERE reduce production match_action -> MINUSGREATER seq_expr
-- On THEN reduce production match_action -> MINUSGREATER seq_expr
-- On STAR reduce production match_action -> MINUSGREATER seq_expr
-- On SEMI reduce production match_action -> MINUSGREATER seq_expr
-- On RPAREN reduce production match_action -> MINUSGREATER seq_expr
-- On RBRACK reduce production match_action -> MINUSGREATER seq_expr
-- On RBRACE reduce production match_action -> MINUSGREATER seq_expr
-- On QUESTION reduce production match_action -> MINUSGREATER seq_expr
-- On PLUS reduce production match_action -> MINUSGREATER seq_expr
-- On MINUS reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP5R reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP5L reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP4R reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP4L reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP3R reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP3L reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP2R reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP2L reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP1R reduce production match_action -> MINUSGREATER seq_expr
-- On INFIXOP1L reduce production match_action -> MINUSGREATER seq_expr
-- On EQ reduce production match_action -> MINUSGREATER seq_expr
-- On END reduce production match_action -> MINUSGREATER seq_expr
-- On ELSE reduce production match_action -> MINUSGREATER seq_expr
-- On DOTDOT reduce production match_action -> MINUSGREATER seq_expr
-- On COMMA reduce production match_action -> MINUSGREATER seq_expr
-- On COLONEQUAL reduce production match_action -> MINUSGREATER seq_expr
-- On COLONCOLON reduce production match_action -> MINUSGREATER seq_expr
-- On COLON reduce production match_action -> MINUSGREATER seq_expr
-- On BARRBRACK reduce production match_action -> MINUSGREATER seq_expr
-- On BARCOLON reduce production match_action -> MINUSGREATER seq_expr
-- On BARBAR reduce production match_action -> MINUSGREATER seq_expr
-- On BAR reduce production match_action -> MINUSGREATER seq_expr
-- On AMPERAMPER reduce production match_action -> MINUSGREATER seq_expr

State 634:
fun_def -> simple_pattern . fun_def [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHEN shift to state 389
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUSGREATER shift to state 632
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 634
-- On signed_constant shift to state 306
-- On match_action shift to state 635
-- On fun_def shift to state 636
-- On constr_longident shift to state 609
-- On constant shift to state 145

State 635:
fun_def -> match_action . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production fun_def -> match_action
-- On WHERE reduce production fun_def -> match_action
-- On THEN reduce production fun_def -> match_action
-- On STAR reduce production fun_def -> match_action
-- On SEMI reduce production fun_def -> match_action
-- On RPAREN reduce production fun_def -> match_action
-- On RBRACK reduce production fun_def -> match_action
-- On RBRACE reduce production fun_def -> match_action
-- On QUESTION reduce production fun_def -> match_action
-- On PLUS reduce production fun_def -> match_action
-- On MINUS reduce production fun_def -> match_action
-- On INFIXOP5R reduce production fun_def -> match_action
-- On INFIXOP5L reduce production fun_def -> match_action
-- On INFIXOP4R reduce production fun_def -> match_action
-- On INFIXOP4L reduce production fun_def -> match_action
-- On INFIXOP3R reduce production fun_def -> match_action
-- On INFIXOP3L reduce production fun_def -> match_action
-- On INFIXOP2R reduce production fun_def -> match_action
-- On INFIXOP2L reduce production fun_def -> match_action
-- On INFIXOP1R reduce production fun_def -> match_action
-- On INFIXOP1L reduce production fun_def -> match_action
-- On EQ reduce production fun_def -> match_action
-- On END reduce production fun_def -> match_action
-- On ELSE reduce production fun_def -> match_action
-- On DOTDOT reduce production fun_def -> match_action
-- On COMMA reduce production fun_def -> match_action
-- On COLONEQUAL reduce production fun_def -> match_action
-- On COLONCOLON reduce production fun_def -> match_action
-- On COLON reduce production fun_def -> match_action
-- On BARRBRACK reduce production fun_def -> match_action
-- On BARCOLON reduce production fun_def -> match_action
-- On BARBAR reduce production fun_def -> match_action
-- On BAR reduce production fun_def -> match_action
-- On AMPERAMPER reduce production fun_def -> match_action

State 636:
fun_def -> simple_pattern fun_def . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production fun_def -> simple_pattern fun_def
-- On WHERE reduce production fun_def -> simple_pattern fun_def
-- On THEN reduce production fun_def -> simple_pattern fun_def
-- On STAR reduce production fun_def -> simple_pattern fun_def
-- On SEMI reduce production fun_def -> simple_pattern fun_def
-- On RPAREN reduce production fun_def -> simple_pattern fun_def
-- On RBRACK reduce production fun_def -> simple_pattern fun_def
-- On RBRACE reduce production fun_def -> simple_pattern fun_def
-- On QUESTION reduce production fun_def -> simple_pattern fun_def
-- On PLUS reduce production fun_def -> simple_pattern fun_def
-- On MINUS reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP5R reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP5L reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP4R reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP4L reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP3R reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP3L reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP2R reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP2L reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP1R reduce production fun_def -> simple_pattern fun_def
-- On INFIXOP1L reduce production fun_def -> simple_pattern fun_def
-- On EQ reduce production fun_def -> simple_pattern fun_def
-- On END reduce production fun_def -> simple_pattern fun_def
-- On ELSE reduce production fun_def -> simple_pattern fun_def
-- On DOTDOT reduce production fun_def -> simple_pattern fun_def
-- On COMMA reduce production fun_def -> simple_pattern fun_def
-- On COLONEQUAL reduce production fun_def -> simple_pattern fun_def
-- On COLONCOLON reduce production fun_def -> simple_pattern fun_def
-- On COLON reduce production fun_def -> simple_pattern fun_def
-- On BARRBRACK reduce production fun_def -> simple_pattern fun_def
-- On BARCOLON reduce production fun_def -> simple_pattern fun_def
-- On BARBAR reduce production fun_def -> simple_pattern fun_def
-- On BAR reduce production fun_def -> simple_pattern fun_def
-- On AMPERAMPER reduce production fun_def -> simple_pattern fun_def

State 637:
value_expr -> FUN simple_pattern fun_def . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production value_expr -> FUN simple_pattern fun_def
-- On WHERE reduce production value_expr -> FUN simple_pattern fun_def
-- On THEN reduce production value_expr -> FUN simple_pattern fun_def
-- On STAR reduce production value_expr -> FUN simple_pattern fun_def
-- On SEMI reduce production value_expr -> FUN simple_pattern fun_def
-- On RPAREN reduce production value_expr -> FUN simple_pattern fun_def
-- On RBRACK reduce production value_expr -> FUN simple_pattern fun_def
-- On RBRACE reduce production value_expr -> FUN simple_pattern fun_def
-- On QUESTION reduce production value_expr -> FUN simple_pattern fun_def
-- On PLUS reduce production value_expr -> FUN simple_pattern fun_def
-- On MINUS reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP5R reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP5L reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP4R reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP4L reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP3R reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP3L reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP2R reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP2L reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP1R reduce production value_expr -> FUN simple_pattern fun_def
-- On INFIXOP1L reduce production value_expr -> FUN simple_pattern fun_def
-- On EQ reduce production value_expr -> FUN simple_pattern fun_def
-- On END reduce production value_expr -> FUN simple_pattern fun_def
-- On ELSE reduce production value_expr -> FUN simple_pattern fun_def
-- On DOTDOT reduce production value_expr -> FUN simple_pattern fun_def
-- On COMMA reduce production value_expr -> FUN simple_pattern fun_def
-- On COLONEQUAL reduce production value_expr -> FUN simple_pattern fun_def
-- On COLONCOLON reduce production value_expr -> FUN simple_pattern fun_def
-- On COLON reduce production value_expr -> FUN simple_pattern fun_def
-- On BARRBRACK reduce production value_expr -> FUN simple_pattern fun_def
-- On BARCOLON reduce production value_expr -> FUN simple_pattern fun_def
-- On BARBAR reduce production value_expr -> FUN simple_pattern fun_def
-- On BAR reduce production value_expr -> FUN simple_pattern fun_def
-- On AMPERAMPER reduce production value_expr -> FUN simple_pattern fun_def

State 638:
index_list -> index_list . COMMA index [ error RBRACK COMMA ]
simple_expr -> simple_expr DOT LBRACK index_list . RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr DOT LBRACK index_list . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On error shift to state 581
-- On RBRACK shift to state 639
-- On COMMA shift to state 553

State 639:
simple_expr -> simple_expr DOT LBRACK index_list RBRACK . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On WHILE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On WHERE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On UIDENT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On TYPE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On TRY reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On TO reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On THEN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On STRING reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On STAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On SHARP reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On SEMISEMI reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On SEMI reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On RPAREN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On RAISE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On QUESTION reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On PLUS reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On OPEN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On MODULE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On MINUSGREATER reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On MINUS reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On MATCH reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LVECTOR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LPAREN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LMATRIX reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LIDENT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LET reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LBRACKBAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LBRACK reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LBRACE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On LAZY reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP5R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP5L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP4R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP4L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP3R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP3L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP2R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP2L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP1R reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On INFIXOP1L reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On IN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On IMAGINARY reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On IF reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On FUNCTION reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On FUN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On FOR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On FLOAT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On EXCEPTION reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On EQ reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On EOF reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On ELSE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DOWNTO reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DOT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DONE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DOLLAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On DO reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COMMA reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On COLON reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On CHAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On CASE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BELOW reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BEGIN reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BARBAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On BAR reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On ASSERT reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On AND reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK
-- On ABOVE reduce production simple_expr -> simple_expr DOT LBRACK index_list RBRACK

State 640:
simple_expr -> simple_expr DOT label_longident . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> simple_expr DOT label_longident
-- On WHILE reduce production simple_expr -> simple_expr DOT label_longident
-- On WHERE reduce production simple_expr -> simple_expr DOT label_longident
-- On UIDENT reduce production simple_expr -> simple_expr DOT label_longident
-- On TYPE reduce production simple_expr -> simple_expr DOT label_longident
-- On TRY reduce production simple_expr -> simple_expr DOT label_longident
-- On TO reduce production simple_expr -> simple_expr DOT label_longident
-- On THEN reduce production simple_expr -> simple_expr DOT label_longident
-- On STRING reduce production simple_expr -> simple_expr DOT label_longident
-- On STAR reduce production simple_expr -> simple_expr DOT label_longident
-- On SHARP reduce production simple_expr -> simple_expr DOT label_longident
-- On SEMISEMI reduce production simple_expr -> simple_expr DOT label_longident
-- On SEMI reduce production simple_expr -> simple_expr DOT label_longident
-- On RPAREN reduce production simple_expr -> simple_expr DOT label_longident
-- On RAISE reduce production simple_expr -> simple_expr DOT label_longident
-- On QUESTION reduce production simple_expr -> simple_expr DOT label_longident
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT label_longident
-- On PLUS reduce production simple_expr -> simple_expr DOT label_longident
-- On OPEN reduce production simple_expr -> simple_expr DOT label_longident
-- On MODULE reduce production simple_expr -> simple_expr DOT label_longident
-- On MINUSGREATER reduce production simple_expr -> simple_expr DOT label_longident
-- On MINUS reduce production simple_expr -> simple_expr DOT label_longident
-- On MATCH reduce production simple_expr -> simple_expr DOT label_longident
-- On LVECTOR reduce production simple_expr -> simple_expr DOT label_longident
-- On LPAREN reduce production simple_expr -> simple_expr DOT label_longident
-- On LMATRIX reduce production simple_expr -> simple_expr DOT label_longident
-- On LIDENT reduce production simple_expr -> simple_expr DOT label_longident
-- On LET reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACKBAR reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACK reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACE reduce production simple_expr -> simple_expr DOT label_longident
-- On LAZY reduce production simple_expr -> simple_expr DOT label_longident
-- On INT reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP5R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP5L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP4R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP4L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP3R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP3L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP2R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP2L reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP1R reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP1L reduce production simple_expr -> simple_expr DOT label_longident
-- On IN reduce production simple_expr -> simple_expr DOT label_longident
-- On IMAGINARY reduce production simple_expr -> simple_expr DOT label_longident
-- On IF reduce production simple_expr -> simple_expr DOT label_longident
-- On FUNCTION reduce production simple_expr -> simple_expr DOT label_longident
-- On FUN reduce production simple_expr -> simple_expr DOT label_longident
-- On FOR reduce production simple_expr -> simple_expr DOT label_longident
-- On FLOAT reduce production simple_expr -> simple_expr DOT label_longident
-- On EXCEPTION reduce production simple_expr -> simple_expr DOT label_longident
-- On EQ reduce production simple_expr -> simple_expr DOT label_longident
-- On EOF reduce production simple_expr -> simple_expr DOT label_longident
-- On ELSE reduce production simple_expr -> simple_expr DOT label_longident
-- On DOWNTO reduce production simple_expr -> simple_expr DOT label_longident
-- On DOT reduce production simple_expr -> simple_expr DOT label_longident
-- On DONE reduce production simple_expr -> simple_expr DOT label_longident
-- On DOLLAR reduce production simple_expr -> simple_expr DOT label_longident
-- On DO reduce production simple_expr -> simple_expr DOT label_longident
-- On COMMA reduce production simple_expr -> simple_expr DOT label_longident
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT label_longident
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT label_longident
-- On COLON reduce production simple_expr -> simple_expr DOT label_longident
-- On CHAR reduce production simple_expr -> simple_expr DOT label_longident
-- On CASE reduce production simple_expr -> simple_expr DOT label_longident
-- On BELOW reduce production simple_expr -> simple_expr DOT label_longident
-- On BEGIN reduce production simple_expr -> simple_expr DOT label_longident
-- On BARBAR reduce production simple_expr -> simple_expr DOT label_longident
-- On BAR reduce production simple_expr -> simple_expr DOT label_longident
-- On ASSERT reduce production simple_expr -> simple_expr DOT label_longident
-- On AND reduce production simple_expr -> simple_expr DOT label_longident
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT label_longident
-- On ABOVE reduce production simple_expr -> simple_expr DOT label_longident

State 641:
expr -> value_expr . [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
option_pattern_list_element -> LIDENT EQ value_expr . [ RPAREN COMMA ]
-- On WHERE reduce production expr -> value_expr
-- On STAR reduce production expr -> value_expr
-- On RPAREN reduce production option_pattern_list_element -> LIDENT EQ value_expr
-- On QUESTION reduce production expr -> value_expr
-- On PLUS reduce production expr -> value_expr
-- On MINUS reduce production expr -> value_expr
-- On INFIXOP5R reduce production expr -> value_expr
-- On INFIXOP5L reduce production expr -> value_expr
-- On INFIXOP4R reduce production expr -> value_expr
-- On INFIXOP4L reduce production expr -> value_expr
-- On INFIXOP3R reduce production expr -> value_expr
-- On INFIXOP3L reduce production expr -> value_expr
-- On INFIXOP2R reduce production expr -> value_expr
-- On INFIXOP2L reduce production expr -> value_expr
-- On INFIXOP1R reduce production expr -> value_expr
-- On INFIXOP1L reduce production expr -> value_expr
-- On EQ reduce production expr -> value_expr
-- On COMMA reduce production option_pattern_list_element -> LIDENT EQ value_expr
-- On COLONEQUAL reduce production expr -> value_expr
-- On COLONCOLON reduce production expr -> value_expr
-- On BARBAR reduce production expr -> value_expr
-- On AMPERAMPER reduce production expr -> value_expr

State 642:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 643:
option_pattern_list_element -> AMPERREST . LIDENT [ RPAREN COMMA ]
-- On LIDENT shift to state 644

State 644:
option_pattern_list_element -> AMPERREST LIDENT . [ RPAREN COMMA ]
-- On RPAREN reduce production option_pattern_list_element -> AMPERREST LIDENT
-- On COMMA reduce production option_pattern_list_element -> AMPERREST LIDENT

State 645:
option_pattern_list -> option_pattern_list_element . [ RPAREN COMMA ]
-- On RPAREN reduce production option_pattern_list -> option_pattern_list_element
-- On COMMA reduce production option_pattern_list -> option_pattern_list_element

State 646:
option_pattern_list -> option_pattern_list . COMMA option_pattern_list_element [ RPAREN COMMA ]
param_tail -> AMPEROPT option_pattern_list . [ RPAREN ]
param_tail -> AMPEROPT option_pattern_list . COMMA AMPERKEY key_pattern [ RPAREN ]
-- On COMMA shift to state 647
-- On RPAREN reduce production param_tail -> AMPEROPT option_pattern_list

State 647:
option_pattern_list -> option_pattern_list COMMA . option_pattern_list_element [ RPAREN COMMA ]
param_tail -> AMPEROPT option_pattern_list COMMA . AMPERKEY key_pattern [ RPAREN ]
-- On LIDENT shift to state 378
-- On AMPERREST shift to state 643
-- On AMPERKEY shift to state 648
-- On option_pattern_list_element shift to state 665

State 648:
param_tail -> AMPEROPT option_pattern_list COMMA AMPERKEY . key_pattern [ RPAREN ]
-- On LIDENT shift to state 649
-- On DOTDOTDOT shift to state 652
-- On AMPERREST shift to state 655
-- On key_pattern_list_element shift to state 657
-- On key_pattern_list shift to state 658
-- On key_pattern shift to state 664

State 649:
key_pattern_list_element -> LIDENT . [ RPAREN COMMA ]
key_pattern_list_element -> LIDENT . EQ value_expr [ RPAREN COMMA ]
-- On EQ shift to state 650
-- On RPAREN reduce production key_pattern_list_element -> LIDENT
-- On COMMA reduce production key_pattern_list_element -> LIDENT

State 650:
key_pattern_list_element -> LIDENT EQ . value_expr [ RPAREN COMMA ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 651
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 642
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 651:
expr -> value_expr . [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
key_pattern_list_element -> LIDENT EQ value_expr . [ RPAREN COMMA ]
-- On WHERE reduce production expr -> value_expr
-- On STAR reduce production expr -> value_expr
-- On RPAREN reduce production key_pattern_list_element -> LIDENT EQ value_expr
-- On QUESTION reduce production expr -> value_expr
-- On PLUS reduce production expr -> value_expr
-- On MINUS reduce production expr -> value_expr
-- On INFIXOP5R reduce production expr -> value_expr
-- On INFIXOP5L reduce production expr -> value_expr
-- On INFIXOP4R reduce production expr -> value_expr
-- On INFIXOP4L reduce production expr -> value_expr
-- On INFIXOP3R reduce production expr -> value_expr
-- On INFIXOP3L reduce production expr -> value_expr
-- On INFIXOP2R reduce production expr -> value_expr
-- On INFIXOP2L reduce production expr -> value_expr
-- On INFIXOP1R reduce production expr -> value_expr
-- On INFIXOP1L reduce production expr -> value_expr
-- On EQ reduce production expr -> value_expr
-- On COMMA reduce production key_pattern_list_element -> LIDENT EQ value_expr
-- On COLONEQUAL reduce production expr -> value_expr
-- On COLONCOLON reduce production expr -> value_expr
-- On BARBAR reduce production expr -> value_expr
-- On AMPERAMPER reduce production expr -> value_expr

State 652:
key_pattern -> DOTDOTDOT . [ RPAREN ]
key_pattern -> DOTDOTDOT . AS LIDENT [ RPAREN ]
-- On AS shift to state 653
-- On RPAREN reduce production key_pattern -> DOTDOTDOT

State 653:
key_pattern -> DOTDOTDOT AS . LIDENT [ RPAREN ]
-- On LIDENT shift to state 654

State 654:
key_pattern -> DOTDOTDOT AS LIDENT . [ RPAREN ]
-- On RPAREN reduce production key_pattern -> DOTDOTDOT AS LIDENT

State 655:
key_pattern_list_element -> AMPERREST . LIDENT [ RPAREN COMMA ]
-- On LIDENT shift to state 656

State 656:
key_pattern_list_element -> AMPERREST LIDENT . [ RPAREN COMMA ]
-- On RPAREN reduce production key_pattern_list_element -> AMPERREST LIDENT
-- On COMMA reduce production key_pattern_list_element -> AMPERREST LIDENT

State 657:
key_pattern_list -> key_pattern_list_element . [ RPAREN COMMA ]
-- On RPAREN reduce production key_pattern_list -> key_pattern_list_element
-- On COMMA reduce production key_pattern_list -> key_pattern_list_element

State 658:
key_pattern -> key_pattern_list . [ RPAREN ]
key_pattern -> key_pattern_list . COMMA DOTDOTDOT [ RPAREN ]
key_pattern -> key_pattern_list . COMMA DOTDOTDOT AS LIDENT [ RPAREN ]
key_pattern_list -> key_pattern_list . COMMA key_pattern_list_element [ RPAREN COMMA ]
-- On COMMA shift to state 659
-- On RPAREN reduce production key_pattern -> key_pattern_list

State 659:
key_pattern -> key_pattern_list COMMA . DOTDOTDOT [ RPAREN ]
key_pattern -> key_pattern_list COMMA . DOTDOTDOT AS LIDENT [ RPAREN ]
key_pattern_list -> key_pattern_list COMMA . key_pattern_list_element [ RPAREN COMMA ]
-- On LIDENT shift to state 649
-- On DOTDOTDOT shift to state 660
-- On AMPERREST shift to state 655
-- On key_pattern_list_element shift to state 663

State 660:
key_pattern -> key_pattern_list COMMA DOTDOTDOT . [ RPAREN ]
key_pattern -> key_pattern_list COMMA DOTDOTDOT . AS LIDENT [ RPAREN ]
-- On AS shift to state 661
-- On RPAREN reduce production key_pattern -> key_pattern_list COMMA DOTDOTDOT

State 661:
key_pattern -> key_pattern_list COMMA DOTDOTDOT AS . LIDENT [ RPAREN ]
-- On LIDENT shift to state 662

State 662:
key_pattern -> key_pattern_list COMMA DOTDOTDOT AS LIDENT . [ RPAREN ]
-- On RPAREN reduce production key_pattern -> key_pattern_list COMMA DOTDOTDOT AS LIDENT

State 663:
key_pattern_list -> key_pattern_list COMMA key_pattern_list_element . [ RPAREN COMMA ]
-- On RPAREN reduce production key_pattern_list -> key_pattern_list COMMA key_pattern_list_element
-- On COMMA reduce production key_pattern_list -> key_pattern_list COMMA key_pattern_list_element

State 664:
param_tail -> AMPEROPT option_pattern_list COMMA AMPERKEY key_pattern . [ RPAREN ]
-- On RPAREN reduce production param_tail -> AMPEROPT option_pattern_list COMMA AMPERKEY key_pattern

State 665:
option_pattern_list -> option_pattern_list COMMA option_pattern_list_element . [ RPAREN COMMA ]
-- On RPAREN reduce production option_pattern_list -> option_pattern_list COMMA option_pattern_list_element
-- On COMMA reduce production option_pattern_list -> option_pattern_list COMMA option_pattern_list_element

State 666:
param_tail -> AMPERKEY . key_pattern [ RPAREN ]
-- On LIDENT shift to state 649
-- On DOTDOTDOT shift to state 652
-- On AMPERREST shift to state 655
-- On key_pattern_list_element shift to state 657
-- On key_pattern_list shift to state 658
-- On key_pattern shift to state 667

State 667:
param_tail -> AMPERKEY key_pattern . [ RPAREN ]
-- On RPAREN reduce production param_tail -> AMPERKEY key_pattern

State 668:
list_pattern -> pattern_comma_list . COMMA DOTDOTDOT AS LIDENT [ error RPAREN ]
list_pattern -> pattern_comma_list . COMMA DOTDOTDOT [ error RPAREN ]
list_pattern -> pattern_comma_list . BAR pattern [ error RPAREN ]
list_pattern -> pattern_comma_list . opt_comma [ error RPAREN ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ error RPAREN COMMA BAR ]
simple_pattern -> LPAREN pattern_comma_list . COMMA param_tail RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On COMMA shift to state 669
-- On BAR shift to state 365
-- On opt_comma shift to state 367
-- On error reduce production opt_comma ->
-- On RPAREN reduce production opt_comma ->

State 669:
list_pattern -> pattern_comma_list COMMA . DOTDOTDOT AS LIDENT [ error RPAREN ]
list_pattern -> pattern_comma_list COMMA . DOTDOTDOT [ error RPAREN ]
opt_comma -> COMMA . [ error RPAREN ]
pattern_comma_list -> pattern_comma_list COMMA . pattern_comma_list_element [ error RPAREN COMMA BAR ]
simple_pattern -> LPAREN pattern_comma_list COMMA . param_tail RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOTDOTDOT shift to state 351
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On AMPEROPT shift to state 377
-- On AMPERKEY shift to state 666
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 354
-- On pattern shift to state 355
-- On param_tail shift to state 670
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
-- On error reduce production opt_comma -> COMMA
-- On RPAREN reduce production opt_comma -> COMMA

State 670:
simple_pattern -> LPAREN pattern_comma_list COMMA param_tail . RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On RPAREN shift to state 671

State 671:
simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On UNDERSCORE reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On UIDENT reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On STRING reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On SHARP reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On RPAREN reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On MINUSGREATER reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On MINUS reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On LVECTOR reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On LPAREN reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On LIDENT reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On LESSMINUS reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On LBRACKBAR reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On LBRACK reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On LBRACE reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On INT reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On IMAGINARY reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On FLOAT reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On EQ reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On DOLLAR reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On COMMA reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On COLONCOLON reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On CHAR reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On BARBAR reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On AS reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN

State 672:
simple_pattern -> LPAREN param_tail . RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On RPAREN shift to state 673

State 673:
simple_pattern -> LPAREN param_tail RPAREN . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On UNDERSCORE reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On UIDENT reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On STRING reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On SHARP reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On RPAREN reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On MINUSGREATER reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On MINUS reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On LVECTOR reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On LPAREN reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On LIDENT reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On LESSMINUS reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On LBRACKBAR reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On LBRACK reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On LBRACE reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On INT reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On IMAGINARY reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On FLOAT reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On EQ reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On DOLLAR reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On COMMA reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On COLONCOLON reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On CHAR reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On BARBAR reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On AS reduce production simple_pattern -> LPAREN param_tail RPAREN

State 674:
simple_pattern -> LPAREN list_pattern . RPAREN [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LPAREN list_pattern . error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On error shift to state 675
-- On RPAREN shift to state 676

State 675:
simple_pattern -> LPAREN list_pattern error . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production simple_pattern -> LPAREN list_pattern error
-- On UNDERSCORE reduce production simple_pattern -> LPAREN list_pattern error
-- On UIDENT reduce production simple_pattern -> LPAREN list_pattern error
-- On STRING reduce production simple_pattern -> LPAREN list_pattern error
-- On SHARP reduce production simple_pattern -> LPAREN list_pattern error
-- On RPAREN reduce production simple_pattern -> LPAREN list_pattern error
-- On MINUSGREATER reduce production simple_pattern -> LPAREN list_pattern error
-- On MINUS reduce production simple_pattern -> LPAREN list_pattern error
-- On LVECTOR reduce production simple_pattern -> LPAREN list_pattern error
-- On LPAREN reduce production simple_pattern -> LPAREN list_pattern error
-- On LIDENT reduce production simple_pattern -> LPAREN list_pattern error
-- On LESSMINUS reduce production simple_pattern -> LPAREN list_pattern error
-- On LBRACKBAR reduce production simple_pattern -> LPAREN list_pattern error
-- On LBRACK reduce production simple_pattern -> LPAREN list_pattern error
-- On LBRACE reduce production simple_pattern -> LPAREN list_pattern error
-- On INT reduce production simple_pattern -> LPAREN list_pattern error
-- On IMAGINARY reduce production simple_pattern -> LPAREN list_pattern error
-- On FLOAT reduce production simple_pattern -> LPAREN list_pattern error
-- On EQ reduce production simple_pattern -> LPAREN list_pattern error
-- On DOLLAR reduce production simple_pattern -> LPAREN list_pattern error
-- On COMMA reduce production simple_pattern -> LPAREN list_pattern error
-- On COLONCOLON reduce production simple_pattern -> LPAREN list_pattern error
-- On CHAR reduce production simple_pattern -> LPAREN list_pattern error
-- On BARBAR reduce production simple_pattern -> LPAREN list_pattern error
-- On AS reduce production simple_pattern -> LPAREN list_pattern error

State 676:
simple_pattern -> LPAREN list_pattern RPAREN . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On UNDERSCORE reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On UIDENT reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On STRING reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On SHARP reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On RPAREN reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On MINUSGREATER reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On MINUS reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On LVECTOR reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On LPAREN reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On LIDENT reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On LESSMINUS reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On LBRACKBAR reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On LBRACK reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On LBRACE reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On INT reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On IMAGINARY reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On FLOAT reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On EQ reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On DOLLAR reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On COMMA reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On COLONCOLON reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On CHAR reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On BARBAR reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On AS reduce production simple_pattern -> LPAREN list_pattern RPAREN

State 677:
built_in_constr -> FARRAYPAT LPAREN pattern . COMMA bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ COMMA COLONCOLON BARBAR AS ]
-- On COMMA shift to state 678
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313

State 678:
built_in_constr -> FARRAYPAT LPAREN pattern COMMA . bi_pattern RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On UNDERSCORE shift to state 128
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 132
-- On LPAREN shift to state 134
-- On LIDENT shift to state 137
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 140
-- On LBRACE shift to state 141
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On simple_bi_pattern shift to state 146
-- On signed_constant shift to state 144
-- On constant shift to state 145
-- On bi_pattern shift to state 679

State 679:
built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On RPAREN shift to state 680

State 680:
built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On RPAREN reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On RBRACK reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On RBRACE reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On COMMA reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On COLONCOLON reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On BARBAR reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On BAR reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN
-- On AS reduce production built_in_constr -> FARRAYPAT LPAREN pattern COMMA bi_pattern RPAREN

State 681:
built_in_constr -> FARRAYPAT bi_pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On RPAREN reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On RBRACK reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On RBRACE reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On COMMA reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On COLONCOLON reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On BARBAR reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On BAR reduce production built_in_constr -> FARRAYPAT bi_pattern
-- On AS reduce production built_in_constr -> FARRAYPAT bi_pattern

State 682:
lbl_pattern_list_element -> label_longident EQ pattern . [ error RBRACE COMMA ]
pattern -> pattern . AS LIDENT [ error RBRACE COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RBRACE COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ error RBRACE COMMA COLONCOLON BARBAR AS ]
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On AS shift to state 363
-- On error reduce production lbl_pattern_list_element -> label_longident EQ pattern
-- On RBRACE reduce production lbl_pattern_list_element -> label_longident EQ pattern
-- On COMMA reduce production lbl_pattern_list_element -> label_longident EQ pattern

State 683:
simple_pattern -> LBRACE lbl_pattern_list opt_comma . RBRACE [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On RBRACE shift to state 684

State 684:
simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On RPAREN reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On RBRACK reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On RBRACE reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On COMMA reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On COLONCOLON reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On BARBAR reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On BAR reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE
-- On AS reduce production simple_pattern -> LBRACE lbl_pattern_list opt_comma RBRACE

State 685:
simple_pattern -> LBRACK list_pattern . RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LBRACK list_pattern . error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error shift to state 686
-- On RBRACK shift to state 687

State 686:
simple_pattern -> LBRACK list_pattern error . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_pattern -> LBRACK list_pattern error
-- On RPAREN reduce production simple_pattern -> LBRACK list_pattern error
-- On RBRACK reduce production simple_pattern -> LBRACK list_pattern error
-- On RBRACE reduce production simple_pattern -> LBRACK list_pattern error
-- On COMMA reduce production simple_pattern -> LBRACK list_pattern error
-- On COLONCOLON reduce production simple_pattern -> LBRACK list_pattern error
-- On BARBAR reduce production simple_pattern -> LBRACK list_pattern error
-- On BAR reduce production simple_pattern -> LBRACK list_pattern error
-- On AS reduce production simple_pattern -> LBRACK list_pattern error

State 687:
simple_pattern -> LBRACK list_pattern RBRACK . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On RPAREN reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On RBRACK reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On RBRACE reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On COMMA reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On COLONCOLON reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On BARBAR reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On BAR reduce production simple_pattern -> LBRACK list_pattern RBRACK
-- On AS reduce production simple_pattern -> LBRACK list_pattern RBRACK

State 688:
built_in_constr -> LISTPAT pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On AS shift to state 363
-- On error reduce production built_in_constr -> LISTPAT pattern
-- On RPAREN reduce production built_in_constr -> LISTPAT pattern
-- On RBRACK reduce production built_in_constr -> LISTPAT pattern
-- On RBRACE reduce production built_in_constr -> LISTPAT pattern
-- On COMMA reduce production built_in_constr -> LISTPAT pattern
-- On BAR reduce production built_in_constr -> LISTPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 689:
list_pattern -> pattern_comma_list . COMMA DOTDOTDOT AS LIDENT [ error RPAREN ]
list_pattern -> pattern_comma_list . COMMA DOTDOTDOT [ error RPAREN ]
list_pattern -> pattern_comma_list . BAR pattern [ error RPAREN ]
list_pattern -> pattern_comma_list . opt_comma [ error RPAREN ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ error RPAREN COMMA BAR ]
simple_pattern -> LPAREN pattern_comma_list . COMMA param_tail RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On COMMA shift to state 690
-- On BAR shift to state 365
-- On opt_comma shift to state 367
-- On error reduce production opt_comma ->
-- On RPAREN reduce production opt_comma ->

State 690:
list_pattern -> pattern_comma_list COMMA . DOTDOTDOT AS LIDENT [ error RPAREN ]
list_pattern -> pattern_comma_list COMMA . DOTDOTDOT [ error RPAREN ]
opt_comma -> COMMA . [ error RPAREN ]
pattern_comma_list -> pattern_comma_list COMMA . pattern_comma_list_element [ error RPAREN COMMA BAR ]
simple_pattern -> LPAREN pattern_comma_list COMMA . param_tail RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On WEAKARRAYPAT shift to state 169
-- On VECTORPAT shift to state 187
-- On UNDERSCORE shift to state 188
-- On UIDENT shift to state 189
-- On TUPLEPAT shift to state 191
-- On SYMBOLPAT shift to state 192
-- On STRINGPAT shift to state 194
-- On STRING shift to state 57
-- On STACKPAT shift to state 196
-- On SHARP shift to state 58
-- On RECORDPAT shift to state 198
-- On REALPAT shift to state 199
-- On QUEUEPAT shift to state 201
-- On OUT_CHANNELPAT shift to state 203
-- On NUMBERPAT shift to state 205
-- On MINUS shift to state 171
-- On LVECTOR shift to state 207
-- On LPAREN shift to state 208
-- On LISTPAT shift to state 210
-- On LIDENT shift to state 52
-- On LBRACKBAR shift to state 179
-- On LBRACK shift to state 211
-- On LBRACE shift to state 212
-- On IN_CHANNELPAT shift to state 224
-- On INTPAT shift to state 226
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On HASHTABLEPAT shift to state 228
-- On FLOATPAT shift to state 230
-- On FLOAT shift to state 105
-- On FARRAYPAT shift to state 232
-- On DOTDOTDOT shift to state 351
-- On DOLLAR shift to state 106
-- On DIR_HANDLEPAT shift to state 240
-- On COMPLEXPAT shift to state 242
-- On CHARPAT shift to state 250
-- On CHAR shift to state 252
-- On CARRAYPAT shift to state 255
-- On BOXPAT shift to state 259
-- On ARRAYPAT shift to state 336
-- On AMPERREST shift to state 343
-- On AMPEROPT shift to state 377
-- On AMPERKEY shift to state 666
-- On val_ident shift to state 345
-- On simple_pattern shift to state 346
-- On signed_constant shift to state 347
-- On pattern_comma_list_element shift to state 354
-- On pattern shift to state 355
-- On param_tail shift to state 691
-- On constr_longident shift to state 358
-- On constant shift to state 185
-- On built_in_constr shift to state 360
-- On error reduce production opt_comma -> COMMA
-- On RPAREN reduce production opt_comma -> COMMA

State 691:
simple_pattern -> LPAREN pattern_comma_list COMMA param_tail . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On RPAREN shift to state 692

State 692:
simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On RPAREN reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On RBRACK reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On RBRACE reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On COMMA reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On COLONCOLON reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On BARBAR reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On BAR reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN
-- On AS reduce production simple_pattern -> LPAREN pattern_comma_list COMMA param_tail RPAREN

State 693:
simple_pattern -> LPAREN param_tail . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On RPAREN shift to state 694

State 694:
simple_pattern -> LPAREN param_tail RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On RPAREN reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On RBRACK reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On RBRACE reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On COMMA reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On COLONCOLON reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On BARBAR reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On BAR reduce production simple_pattern -> LPAREN param_tail RPAREN
-- On AS reduce production simple_pattern -> LPAREN param_tail RPAREN

State 695:
simple_pattern -> LPAREN list_pattern . RPAREN [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LPAREN list_pattern . error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error shift to state 696
-- On RPAREN shift to state 697

State 696:
simple_pattern -> LPAREN list_pattern error . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_pattern -> LPAREN list_pattern error
-- On RPAREN reduce production simple_pattern -> LPAREN list_pattern error
-- On RBRACK reduce production simple_pattern -> LPAREN list_pattern error
-- On RBRACE reduce production simple_pattern -> LPAREN list_pattern error
-- On COMMA reduce production simple_pattern -> LPAREN list_pattern error
-- On COLONCOLON reduce production simple_pattern -> LPAREN list_pattern error
-- On BARBAR reduce production simple_pattern -> LPAREN list_pattern error
-- On BAR reduce production simple_pattern -> LPAREN list_pattern error
-- On AS reduce production simple_pattern -> LPAREN list_pattern error

State 697:
simple_pattern -> LPAREN list_pattern RPAREN . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On RPAREN reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On RBRACK reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On RBRACE reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On COMMA reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On COLONCOLON reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On BARBAR reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On BAR reduce production simple_pattern -> LPAREN list_pattern RPAREN
-- On AS reduce production simple_pattern -> LPAREN list_pattern RPAREN

State 698:
simple_pattern -> LVECTOR list_pattern . RBRACK [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
simple_pattern -> LVECTOR list_pattern . error [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error shift to state 699
-- On RBRACK shift to state 700

State 699:
simple_pattern -> LVECTOR list_pattern error . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_pattern -> LVECTOR list_pattern error
-- On RPAREN reduce production simple_pattern -> LVECTOR list_pattern error
-- On RBRACK reduce production simple_pattern -> LVECTOR list_pattern error
-- On RBRACE reduce production simple_pattern -> LVECTOR list_pattern error
-- On COMMA reduce production simple_pattern -> LVECTOR list_pattern error
-- On COLONCOLON reduce production simple_pattern -> LVECTOR list_pattern error
-- On BARBAR reduce production simple_pattern -> LVECTOR list_pattern error
-- On BAR reduce production simple_pattern -> LVECTOR list_pattern error
-- On AS reduce production simple_pattern -> LVECTOR list_pattern error

State 700:
simple_pattern -> LVECTOR list_pattern RBRACK . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On error reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On RPAREN reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On RBRACK reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On RBRACE reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On COMMA reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On COLONCOLON reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On BARBAR reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On BAR reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On AS reduce production simple_pattern -> LVECTOR list_pattern RBRACK

State 701:
built_in_constr -> RECORDPAT pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On AS shift to state 363
-- On error reduce production built_in_constr -> RECORDPAT pattern
-- On RPAREN reduce production built_in_constr -> RECORDPAT pattern
-- On RBRACK reduce production built_in_constr -> RECORDPAT pattern
-- On RBRACE reduce production built_in_constr -> RECORDPAT pattern
-- On COMMA reduce production built_in_constr -> RECORDPAT pattern
-- On BAR reduce production built_in_constr -> RECORDPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 702:
built_in_constr -> TUPLEPAT pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On AS shift to state 363
-- On error reduce production built_in_constr -> TUPLEPAT pattern
-- On RPAREN reduce production built_in_constr -> TUPLEPAT pattern
-- On RBRACK reduce production built_in_constr -> TUPLEPAT pattern
-- On RBRACE reduce production built_in_constr -> TUPLEPAT pattern
-- On COMMA reduce production built_in_constr -> TUPLEPAT pattern
-- On BAR reduce production built_in_constr -> TUPLEPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 703:
built_in_constr -> VECTORPAT pattern . [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . AS LIDENT [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
pattern -> pattern . BARBAR pattern [ error RPAREN RBRACK RBRACE COMMA COLONCOLON BARBAR BAR AS ]
-- On COLONCOLON shift to state 356
-- On BARBAR shift to state 361
-- On AS shift to state 363
-- On error reduce production built_in_constr -> VECTORPAT pattern
-- On RPAREN reduce production built_in_constr -> VECTORPAT pattern
-- On RBRACK reduce production built_in_constr -> VECTORPAT pattern
-- On RBRACE reduce production built_in_constr -> VECTORPAT pattern
-- On COMMA reduce production built_in_constr -> VECTORPAT pattern
-- On BAR reduce production built_in_constr -> VECTORPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 704:
simple_pattern -> LVECTOR list_pattern . RBRACK [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
simple_pattern -> LVECTOR list_pattern . error [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On error shift to state 705
-- On RBRACK shift to state 706

State 705:
simple_pattern -> LVECTOR list_pattern error . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production simple_pattern -> LVECTOR list_pattern error
-- On UNDERSCORE reduce production simple_pattern -> LVECTOR list_pattern error
-- On UIDENT reduce production simple_pattern -> LVECTOR list_pattern error
-- On STRING reduce production simple_pattern -> LVECTOR list_pattern error
-- On SHARP reduce production simple_pattern -> LVECTOR list_pattern error
-- On RPAREN reduce production simple_pattern -> LVECTOR list_pattern error
-- On MINUSGREATER reduce production simple_pattern -> LVECTOR list_pattern error
-- On MINUS reduce production simple_pattern -> LVECTOR list_pattern error
-- On LVECTOR reduce production simple_pattern -> LVECTOR list_pattern error
-- On LPAREN reduce production simple_pattern -> LVECTOR list_pattern error
-- On LIDENT reduce production simple_pattern -> LVECTOR list_pattern error
-- On LESSMINUS reduce production simple_pattern -> LVECTOR list_pattern error
-- On LBRACKBAR reduce production simple_pattern -> LVECTOR list_pattern error
-- On LBRACK reduce production simple_pattern -> LVECTOR list_pattern error
-- On LBRACE reduce production simple_pattern -> LVECTOR list_pattern error
-- On INT reduce production simple_pattern -> LVECTOR list_pattern error
-- On IMAGINARY reduce production simple_pattern -> LVECTOR list_pattern error
-- On FLOAT reduce production simple_pattern -> LVECTOR list_pattern error
-- On EQ reduce production simple_pattern -> LVECTOR list_pattern error
-- On DOLLAR reduce production simple_pattern -> LVECTOR list_pattern error
-- On COMMA reduce production simple_pattern -> LVECTOR list_pattern error
-- On COLONCOLON reduce production simple_pattern -> LVECTOR list_pattern error
-- On CHAR reduce production simple_pattern -> LVECTOR list_pattern error
-- On BARBAR reduce production simple_pattern -> LVECTOR list_pattern error
-- On AS reduce production simple_pattern -> LVECTOR list_pattern error

State 706:
simple_pattern -> LVECTOR list_pattern RBRACK . [ WHEN UNDERSCORE UIDENT STRING SHARP RPAREN MINUSGREATER MINUS LVECTOR LPAREN LIDENT LESSMINUS LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT EQ DOLLAR COMMA COLONCOLON CHAR BARBAR AS ]
-- On WHEN reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On UNDERSCORE reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On UIDENT reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On STRING reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On SHARP reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On RPAREN reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On MINUSGREATER reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On MINUS reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On LVECTOR reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On LPAREN reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On LIDENT reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On LESSMINUS reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On LBRACKBAR reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On LBRACK reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On LBRACE reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On INT reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On IMAGINARY reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On FLOAT reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On EQ reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On DOLLAR reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On COMMA reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On COLONCOLON reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On CHAR reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On BARBAR reduce production simple_pattern -> LVECTOR list_pattern RBRACK
-- On AS reduce production simple_pattern -> LVECTOR list_pattern RBRACK

State 707:
built_in_constr -> RECORDPAT pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
-- On WHEN reduce production built_in_constr -> RECORDPAT pattern
-- On RPAREN reduce production built_in_constr -> RECORDPAT pattern
-- On MINUSGREATER reduce production built_in_constr -> RECORDPAT pattern
-- On LESSMINUS reduce production built_in_constr -> RECORDPAT pattern
-- On EQ reduce production built_in_constr -> RECORDPAT pattern
-- On COMMA reduce production built_in_constr -> RECORDPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 708:
built_in_constr -> TUPLEPAT pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
-- On WHEN reduce production built_in_constr -> TUPLEPAT pattern
-- On RPAREN reduce production built_in_constr -> TUPLEPAT pattern
-- On MINUSGREATER reduce production built_in_constr -> TUPLEPAT pattern
-- On LESSMINUS reduce production built_in_constr -> TUPLEPAT pattern
-- On EQ reduce production built_in_constr -> TUPLEPAT pattern
-- On COMMA reduce production built_in_constr -> TUPLEPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 709:
built_in_constr -> VECTORPAT pattern . [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . AS LIDENT [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ WHEN RPAREN MINUSGREATER LESSMINUS EQ COMMA COLONCOLON BARBAR AS ]
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313
-- On WHEN reduce production built_in_constr -> VECTORPAT pattern
-- On RPAREN reduce production built_in_constr -> VECTORPAT pattern
-- On MINUSGREATER reduce production built_in_constr -> VECTORPAT pattern
-- On LESSMINUS reduce production built_in_constr -> VECTORPAT pattern
-- On EQ reduce production built_in_constr -> VECTORPAT pattern
-- On COMMA reduce production built_in_constr -> VECTORPAT pattern
** Conflict on COLONCOLON BARBAR AS

State 710:
match_cases -> pattern_comma_list . opt_comma match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ WHEN MINUSGREATER COMMA ]
-- On COMMA shift to state 397
-- On opt_comma shift to state 711
-- On WHEN reduce production opt_comma ->
-- On MINUSGREATER reduce production opt_comma ->

State 711:
match_cases -> pattern_comma_list opt_comma . match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHEN shift to state 389
-- On MINUSGREATER shift to state 632
-- On match_action shift to state 712

State 712:
match_cases -> pattern_comma_list opt_comma match_action . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On WHERE reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On THEN reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On STAR reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On SEMI reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On RPAREN reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On RBRACK reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On RBRACE reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On QUESTION reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On PLUS reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On MINUS reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP5R reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP5L reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP4R reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP4L reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP3R reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP3L reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP2R reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP2L reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP1R reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On INFIXOP1L reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On EQ reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On END reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On ELSE reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On DOTDOT reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On COMMA reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On COLONEQUAL reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On COLONCOLON reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On COLON reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On BARRBRACK reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On BARCOLON reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On BARBAR reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On BAR reduce production match_cases -> pattern_comma_list opt_comma match_action
-- On AMPERAMPER reduce production match_cases -> pattern_comma_list opt_comma match_action

State 713:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> FUNCTION opt_bar match_cases . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On BAR shift to state 714
-- On error reduce production value_expr -> FUNCTION opt_bar match_cases
-- On WHERE reduce production value_expr -> FUNCTION opt_bar match_cases
-- On THEN reduce production value_expr -> FUNCTION opt_bar match_cases
-- On STAR reduce production value_expr -> FUNCTION opt_bar match_cases
-- On SEMI reduce production value_expr -> FUNCTION opt_bar match_cases
-- On RPAREN reduce production value_expr -> FUNCTION opt_bar match_cases
-- On RBRACK reduce production value_expr -> FUNCTION opt_bar match_cases
-- On RBRACE reduce production value_expr -> FUNCTION opt_bar match_cases
-- On QUESTION reduce production value_expr -> FUNCTION opt_bar match_cases
-- On PLUS reduce production value_expr -> FUNCTION opt_bar match_cases
-- On MINUS reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP5R reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP5L reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP4R reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP4L reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP3R reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP3L reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP2R reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP2L reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP1R reduce production value_expr -> FUNCTION opt_bar match_cases
-- On INFIXOP1L reduce production value_expr -> FUNCTION opt_bar match_cases
-- On EQ reduce production value_expr -> FUNCTION opt_bar match_cases
-- On END reduce production value_expr -> FUNCTION opt_bar match_cases
-- On ELSE reduce production value_expr -> FUNCTION opt_bar match_cases
-- On DOTDOT reduce production value_expr -> FUNCTION opt_bar match_cases
-- On COMMA reduce production value_expr -> FUNCTION opt_bar match_cases
-- On COLONEQUAL reduce production value_expr -> FUNCTION opt_bar match_cases
-- On COLONCOLON reduce production value_expr -> FUNCTION opt_bar match_cases
-- On COLON reduce production value_expr -> FUNCTION opt_bar match_cases
-- On BARRBRACK reduce production value_expr -> FUNCTION opt_bar match_cases
-- On BARCOLON reduce production value_expr -> FUNCTION opt_bar match_cases
-- On BARBAR reduce production value_expr -> FUNCTION opt_bar match_cases
-- On AMPERAMPER reduce production value_expr -> FUNCTION opt_bar match_cases

State 714:
match_cases -> match_cases BAR . pattern_comma_list opt_comma match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 715
-- On pattern shift to state 399
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 715:
match_cases -> match_cases BAR pattern_comma_list . opt_comma match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ WHEN MINUSGREATER COMMA ]
-- On COMMA shift to state 397
-- On opt_comma shift to state 716
-- On WHEN reduce production opt_comma ->
-- On MINUSGREATER reduce production opt_comma ->

State 716:
match_cases -> match_cases BAR pattern_comma_list opt_comma . match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHEN shift to state 389
-- On MINUSGREATER shift to state 632
-- On match_action shift to state 717

State 717:
match_cases -> match_cases BAR pattern_comma_list opt_comma match_action . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On WHERE reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On THEN reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On STAR reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On SEMI reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On RPAREN reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On RBRACK reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On RBRACE reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On QUESTION reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On PLUS reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On MINUS reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP5R reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP5L reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP4R reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP4L reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP3R reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP3L reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP2R reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP2L reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP1R reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On INFIXOP1L reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On EQ reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On END reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On ELSE reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On DOTDOT reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On COMMA reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On COLONEQUAL reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On COLONCOLON reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On COLON reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On BARRBRACK reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On BARCOLON reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On BARBAR reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On BAR reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action
-- On AMPERAMPER reduce production match_cases -> match_cases BAR pattern_comma_list opt_comma match_action

State 718:
simple_expr -> BEGIN seq_expr . END [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> BEGIN seq_expr . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On error shift to state 719
-- On END shift to state 720

State 719:
simple_expr -> BEGIN seq_expr error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> BEGIN seq_expr error
-- On WHILE reduce production simple_expr -> BEGIN seq_expr error
-- On WHERE reduce production simple_expr -> BEGIN seq_expr error
-- On UIDENT reduce production simple_expr -> BEGIN seq_expr error
-- On TYPE reduce production simple_expr -> BEGIN seq_expr error
-- On TRY reduce production simple_expr -> BEGIN seq_expr error
-- On TO reduce production simple_expr -> BEGIN seq_expr error
-- On THEN reduce production simple_expr -> BEGIN seq_expr error
-- On STRING reduce production simple_expr -> BEGIN seq_expr error
-- On STAR reduce production simple_expr -> BEGIN seq_expr error
-- On SHARP reduce production simple_expr -> BEGIN seq_expr error
-- On SEMISEMI reduce production simple_expr -> BEGIN seq_expr error
-- On SEMI reduce production simple_expr -> BEGIN seq_expr error
-- On RPAREN reduce production simple_expr -> BEGIN seq_expr error
-- On RAISE reduce production simple_expr -> BEGIN seq_expr error
-- On QUESTION reduce production simple_expr -> BEGIN seq_expr error
-- On PREFIXOP reduce production simple_expr -> BEGIN seq_expr error
-- On PLUS reduce production simple_expr -> BEGIN seq_expr error
-- On OPEN reduce production simple_expr -> BEGIN seq_expr error
-- On MODULE reduce production simple_expr -> BEGIN seq_expr error
-- On MINUSGREATER reduce production simple_expr -> BEGIN seq_expr error
-- On MINUS reduce production simple_expr -> BEGIN seq_expr error
-- On MATCH reduce production simple_expr -> BEGIN seq_expr error
-- On LVECTOR reduce production simple_expr -> BEGIN seq_expr error
-- On LPAREN reduce production simple_expr -> BEGIN seq_expr error
-- On LMATRIX reduce production simple_expr -> BEGIN seq_expr error
-- On LIDENT reduce production simple_expr -> BEGIN seq_expr error
-- On LET reduce production simple_expr -> BEGIN seq_expr error
-- On LBRACKBAR reduce production simple_expr -> BEGIN seq_expr error
-- On LBRACK reduce production simple_expr -> BEGIN seq_expr error
-- On LBRACE reduce production simple_expr -> BEGIN seq_expr error
-- On LAZY reduce production simple_expr -> BEGIN seq_expr error
-- On INT reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP5R reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP5L reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP4R reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP4L reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP3R reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP3L reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP2R reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP2L reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP1R reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP1L reduce production simple_expr -> BEGIN seq_expr error
-- On IN reduce production simple_expr -> BEGIN seq_expr error
-- On IMAGINARY reduce production simple_expr -> BEGIN seq_expr error
-- On IF reduce production simple_expr -> BEGIN seq_expr error
-- On FUNCTION reduce production simple_expr -> BEGIN seq_expr error
-- On FUN reduce production simple_expr -> BEGIN seq_expr error
-- On FOR reduce production simple_expr -> BEGIN seq_expr error
-- On FLOAT reduce production simple_expr -> BEGIN seq_expr error
-- On EXCEPTION reduce production simple_expr -> BEGIN seq_expr error
-- On EQ reduce production simple_expr -> BEGIN seq_expr error
-- On EOF reduce production simple_expr -> BEGIN seq_expr error
-- On ELSE reduce production simple_expr -> BEGIN seq_expr error
-- On DOWNTO reduce production simple_expr -> BEGIN seq_expr error
-- On DOT reduce production simple_expr -> BEGIN seq_expr error
-- On DONE reduce production simple_expr -> BEGIN seq_expr error
-- On DOLLAR reduce production simple_expr -> BEGIN seq_expr error
-- On DO reduce production simple_expr -> BEGIN seq_expr error
-- On COMMA reduce production simple_expr -> BEGIN seq_expr error
-- On COLONEQUAL reduce production simple_expr -> BEGIN seq_expr error
-- On COLONCOLON reduce production simple_expr -> BEGIN seq_expr error
-- On COLON reduce production simple_expr -> BEGIN seq_expr error
-- On CHAR reduce production simple_expr -> BEGIN seq_expr error
-- On CASE reduce production simple_expr -> BEGIN seq_expr error
-- On BELOW reduce production simple_expr -> BEGIN seq_expr error
-- On BEGIN reduce production simple_expr -> BEGIN seq_expr error
-- On BARBAR reduce production simple_expr -> BEGIN seq_expr error
-- On BAR reduce production simple_expr -> BEGIN seq_expr error
-- On ASSERT reduce production simple_expr -> BEGIN seq_expr error
-- On AND reduce production simple_expr -> BEGIN seq_expr error
-- On AMPERAMPER reduce production simple_expr -> BEGIN seq_expr error
-- On ABOVE reduce production simple_expr -> BEGIN seq_expr error

State 720:
simple_expr -> BEGIN seq_expr END . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> BEGIN seq_expr END
-- On WHILE reduce production simple_expr -> BEGIN seq_expr END
-- On WHERE reduce production simple_expr -> BEGIN seq_expr END
-- On UIDENT reduce production simple_expr -> BEGIN seq_expr END
-- On TYPE reduce production simple_expr -> BEGIN seq_expr END
-- On TRY reduce production simple_expr -> BEGIN seq_expr END
-- On TO reduce production simple_expr -> BEGIN seq_expr END
-- On THEN reduce production simple_expr -> BEGIN seq_expr END
-- On STRING reduce production simple_expr -> BEGIN seq_expr END
-- On STAR reduce production simple_expr -> BEGIN seq_expr END
-- On SHARP reduce production simple_expr -> BEGIN seq_expr END
-- On SEMISEMI reduce production simple_expr -> BEGIN seq_expr END
-- On SEMI reduce production simple_expr -> BEGIN seq_expr END
-- On RPAREN reduce production simple_expr -> BEGIN seq_expr END
-- On RAISE reduce production simple_expr -> BEGIN seq_expr END
-- On QUESTION reduce production simple_expr -> BEGIN seq_expr END
-- On PREFIXOP reduce production simple_expr -> BEGIN seq_expr END
-- On PLUS reduce production simple_expr -> BEGIN seq_expr END
-- On OPEN reduce production simple_expr -> BEGIN seq_expr END
-- On MODULE reduce production simple_expr -> BEGIN seq_expr END
-- On MINUSGREATER reduce production simple_expr -> BEGIN seq_expr END
-- On MINUS reduce production simple_expr -> BEGIN seq_expr END
-- On MATCH reduce production simple_expr -> BEGIN seq_expr END
-- On LVECTOR reduce production simple_expr -> BEGIN seq_expr END
-- On LPAREN reduce production simple_expr -> BEGIN seq_expr END
-- On LMATRIX reduce production simple_expr -> BEGIN seq_expr END
-- On LIDENT reduce production simple_expr -> BEGIN seq_expr END
-- On LET reduce production simple_expr -> BEGIN seq_expr END
-- On LBRACKBAR reduce production simple_expr -> BEGIN seq_expr END
-- On LBRACK reduce production simple_expr -> BEGIN seq_expr END
-- On LBRACE reduce production simple_expr -> BEGIN seq_expr END
-- On LAZY reduce production simple_expr -> BEGIN seq_expr END
-- On INT reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP5R reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP5L reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP4R reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP4L reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP3R reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP3L reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP2R reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP2L reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP1R reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP1L reduce production simple_expr -> BEGIN seq_expr END
-- On IN reduce production simple_expr -> BEGIN seq_expr END
-- On IMAGINARY reduce production simple_expr -> BEGIN seq_expr END
-- On IF reduce production simple_expr -> BEGIN seq_expr END
-- On FUNCTION reduce production simple_expr -> BEGIN seq_expr END
-- On FUN reduce production simple_expr -> BEGIN seq_expr END
-- On FOR reduce production simple_expr -> BEGIN seq_expr END
-- On FLOAT reduce production simple_expr -> BEGIN seq_expr END
-- On EXCEPTION reduce production simple_expr -> BEGIN seq_expr END
-- On EQ reduce production simple_expr -> BEGIN seq_expr END
-- On EOF reduce production simple_expr -> BEGIN seq_expr END
-- On ELSE reduce production simple_expr -> BEGIN seq_expr END
-- On DOWNTO reduce production simple_expr -> BEGIN seq_expr END
-- On DOT reduce production simple_expr -> BEGIN seq_expr END
-- On DONE reduce production simple_expr -> BEGIN seq_expr END
-- On DOLLAR reduce production simple_expr -> BEGIN seq_expr END
-- On DO reduce production simple_expr -> BEGIN seq_expr END
-- On COMMA reduce production simple_expr -> BEGIN seq_expr END
-- On COLONEQUAL reduce production simple_expr -> BEGIN seq_expr END
-- On COLONCOLON reduce production simple_expr -> BEGIN seq_expr END
-- On COLON reduce production simple_expr -> BEGIN seq_expr END
-- On CHAR reduce production simple_expr -> BEGIN seq_expr END
-- On CASE reduce production simple_expr -> BEGIN seq_expr END
-- On BELOW reduce production simple_expr -> BEGIN seq_expr END
-- On BEGIN reduce production simple_expr -> BEGIN seq_expr END
-- On BARBAR reduce production simple_expr -> BEGIN seq_expr END
-- On BAR reduce production simple_expr -> BEGIN seq_expr END
-- On ASSERT reduce production simple_expr -> BEGIN seq_expr END
-- On AND reduce production simple_expr -> BEGIN seq_expr END
-- On AMPERAMPER reduce production simple_expr -> BEGIN seq_expr END
-- On ABOVE reduce production simple_expr -> BEGIN seq_expr END

State 721:
record_expr -> simple_expr . WITH lbl_expr_list [ error RBRACE COMMA ]
simple_expr -> simple_expr . DOT label_longident [ WITH DOT ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH DOT ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH DOT ]
-- On WITH shift to state 722
-- On DOT shift to state 384

State 722:
record_expr -> simple_expr WITH . lbl_expr_list [ error RBRACE COMMA ]
-- On UIDENT shift to state 213
-- On LIDENT shift to state 216
-- On lbl_expr_list shift to state 723
-- On label_longident shift to state 728

State 723:
lbl_expr_list -> lbl_expr_list . COMMA label_longident EQ expr [ error RBRACE COMMA ]
record_expr -> simple_expr WITH lbl_expr_list . [ error RBRACE COMMA ]
-- On COMMA shift to state 724
-- On error reduce production record_expr -> simple_expr WITH lbl_expr_list
-- On RBRACE reduce production record_expr -> simple_expr WITH lbl_expr_list
** Conflict on COMMA

State 724:
lbl_expr_list -> lbl_expr_list COMMA . label_longident EQ expr [ error RBRACE COMMA ]
-- On UIDENT shift to state 213
-- On LIDENT shift to state 216
-- On label_longident shift to state 725

State 725:
lbl_expr_list -> lbl_expr_list COMMA label_longident . EQ expr [ error RBRACE COMMA ]
-- On EQ shift to state 726

State 726:
lbl_expr_list -> lbl_expr_list COMMA label_longident EQ . expr [ error RBRACE COMMA ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 727
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 727:
lbl_expr_list -> lbl_expr_list COMMA label_longident EQ expr . [ error RBRACE COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production lbl_expr_list -> lbl_expr_list COMMA label_longident EQ expr
-- On RBRACE reduce production lbl_expr_list -> lbl_expr_list COMMA label_longident EQ expr
-- On COMMA reduce production lbl_expr_list -> lbl_expr_list COMMA label_longident EQ expr

State 728:
lbl_expr_list -> label_longident . EQ expr [ error RBRACE COMMA ]
-- On EQ shift to state 729

State 729:
lbl_expr_list -> label_longident EQ . expr [ error RBRACE COMMA ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 730
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 730:
lbl_expr_list -> label_longident EQ expr . [ error RBRACE COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production lbl_expr_list -> label_longident EQ expr
-- On RBRACE reduce production lbl_expr_list -> label_longident EQ expr
-- On COMMA reduce production lbl_expr_list -> label_longident EQ expr

State 731:
simple_expr -> LBRACE record_expr . opt_comma RBRACE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACE record_expr . opt_comma error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On COMMA shift to state 732
-- On opt_comma shift to state 733
-- On error reduce production opt_comma ->
-- On RBRACE reduce production opt_comma ->

State 732:
opt_comma -> COMMA . [ error RBRACE ]
-- On error reduce production opt_comma -> COMMA
-- On RBRACE reduce production opt_comma -> COMMA

State 733:
simple_expr -> LBRACE record_expr opt_comma . RBRACE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACE record_expr opt_comma . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On error shift to state 734
-- On RBRACE shift to state 735

State 734:
simple_expr -> LBRACE record_expr opt_comma error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On WHILE reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On WHERE reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On UIDENT reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On TYPE reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On TRY reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On TO reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On THEN reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On STRING reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On STAR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On SHARP reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On SEMISEMI reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On SEMI reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On RPAREN reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On RAISE reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On QUESTION reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On PREFIXOP reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On PLUS reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On OPEN reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On MODULE reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On MINUSGREATER reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On MINUS reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On MATCH reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LVECTOR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LPAREN reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LMATRIX reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LIDENT reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LET reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LBRACKBAR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LBRACK reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LBRACE reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LAZY reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INT reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP5R reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP5L reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP4R reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP4L reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP3R reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP3L reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP2R reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP2L reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP1R reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP1L reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On IN reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On IMAGINARY reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On IF reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On FUNCTION reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On FUN reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On FOR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On FLOAT reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On EXCEPTION reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On EQ reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On EOF reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On ELSE reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On DOWNTO reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On DOT reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On DONE reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On DOLLAR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On DO reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On COMMA reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On COLONEQUAL reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On COLONCOLON reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On COLON reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On CHAR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On CASE reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On BELOW reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On BEGIN reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On BARBAR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On BAR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On ASSERT reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On AND reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On AMPERAMPER reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On ABOVE reduce production simple_expr -> LBRACE record_expr opt_comma error

State 735:
simple_expr -> LBRACE record_expr opt_comma RBRACE . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On WHILE reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On WHERE reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On UIDENT reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On TYPE reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On TRY reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On TO reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On THEN reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On STRING reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On STAR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On SHARP reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On SEMISEMI reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On SEMI reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On RPAREN reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On RAISE reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On QUESTION reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On PREFIXOP reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On PLUS reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On OPEN reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On MODULE reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On MINUSGREATER reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On MINUS reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On MATCH reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LVECTOR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LPAREN reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LMATRIX reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LIDENT reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LET reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LBRACKBAR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LBRACK reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LBRACE reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LAZY reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INT reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP5R reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP5L reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP4R reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP4L reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP3R reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP3L reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP2R reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP2L reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP1R reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP1L reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On IN reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On IMAGINARY reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On IF reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On FUNCTION reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On FUN reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On FOR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On FLOAT reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On EXCEPTION reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On EQ reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On EOF reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On ELSE reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On DOWNTO reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On DOT reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On DONE reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On DOLLAR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On DO reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On COMMA reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On COLONEQUAL reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On COLONCOLON reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On COLON reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On CHAR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On CASE reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On BELOW reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On BEGIN reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On BARBAR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On BAR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On ASSERT reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On AND reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On AMPERAMPER reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On ABOVE reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE

State 736:
lbl_expr_list -> lbl_expr_list . COMMA label_longident EQ expr [ error RBRACE COMMA ]
record_expr -> lbl_expr_list . [ error RBRACE COMMA ]
-- On COMMA shift to state 724
-- On error reduce production record_expr -> lbl_expr_list
-- On RBRACE reduce production record_expr -> lbl_expr_list
** Conflict on COMMA

State 737:
no_value_expr -> expr . COLONEQUAL expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> IF expr . THEN expr ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> IF expr . THEN expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE THEN STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On THEN shift to state 738
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 738:
value_expr -> IF expr THEN . expr ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> IF expr THEN . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 739
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 739:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> IF expr THEN expr . ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> IF expr THEN expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On ELSE shift to state 740
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production value_expr -> IF expr THEN expr
-- On THEN reduce production value_expr -> IF expr THEN expr
-- On SEMI reduce production value_expr -> IF expr THEN expr
-- On RPAREN reduce production value_expr -> IF expr THEN expr
-- On RBRACK reduce production value_expr -> IF expr THEN expr
-- On RBRACE reduce production value_expr -> IF expr THEN expr
-- On END reduce production value_expr -> IF expr THEN expr
-- On DOTDOT reduce production value_expr -> IF expr THEN expr
-- On COMMA reduce production value_expr -> IF expr THEN expr
-- On COLON reduce production value_expr -> IF expr THEN expr
-- On BARRBRACK reduce production value_expr -> IF expr THEN expr
-- On BARCOLON reduce production value_expr -> IF expr THEN expr
-- On BAR reduce production value_expr -> IF expr THEN expr
** Conflict on WHERE ELSE

State 740:
value_expr -> IF expr THEN expr ELSE . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 741
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 741:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> IF expr THEN expr ELSE expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production value_expr -> IF expr THEN expr ELSE expr
-- On THEN reduce production value_expr -> IF expr THEN expr ELSE expr
-- On SEMI reduce production value_expr -> IF expr THEN expr ELSE expr
-- On RPAREN reduce production value_expr -> IF expr THEN expr ELSE expr
-- On RBRACK reduce production value_expr -> IF expr THEN expr ELSE expr
-- On RBRACE reduce production value_expr -> IF expr THEN expr ELSE expr
-- On END reduce production value_expr -> IF expr THEN expr ELSE expr
-- On ELSE reduce production value_expr -> IF expr THEN expr ELSE expr
-- On DOTDOT reduce production value_expr -> IF expr THEN expr ELSE expr
-- On COMMA reduce production value_expr -> IF expr THEN expr ELSE expr
-- On COLON reduce production value_expr -> IF expr THEN expr ELSE expr
-- On BARRBRACK reduce production value_expr -> IF expr THEN expr ELSE expr
-- On BARCOLON reduce production value_expr -> IF expr THEN expr ELSE expr
-- On BAR reduce production value_expr -> IF expr THEN expr ELSE expr
** Conflict on WHERE

State 742:
simple_expr -> BEGIN seq_expr . END [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> BEGIN seq_expr . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error shift to state 743
-- On END shift to state 744

State 743:
simple_expr -> BEGIN seq_expr error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> BEGIN seq_expr error
-- On WHERE reduce production simple_expr -> BEGIN seq_expr error
-- On UIDENT reduce production simple_expr -> BEGIN seq_expr error
-- On THEN reduce production simple_expr -> BEGIN seq_expr error
-- On STRING reduce production simple_expr -> BEGIN seq_expr error
-- On STAR reduce production simple_expr -> BEGIN seq_expr error
-- On SHARP reduce production simple_expr -> BEGIN seq_expr error
-- On SEMI reduce production simple_expr -> BEGIN seq_expr error
-- On RPAREN reduce production simple_expr -> BEGIN seq_expr error
-- On RBRACK reduce production simple_expr -> BEGIN seq_expr error
-- On RBRACE reduce production simple_expr -> BEGIN seq_expr error
-- On QUESTION reduce production simple_expr -> BEGIN seq_expr error
-- On PREFIXOP reduce production simple_expr -> BEGIN seq_expr error
-- On PLUS reduce production simple_expr -> BEGIN seq_expr error
-- On MINUS reduce production simple_expr -> BEGIN seq_expr error
-- On LVECTOR reduce production simple_expr -> BEGIN seq_expr error
-- On LPAREN reduce production simple_expr -> BEGIN seq_expr error
-- On LMATRIX reduce production simple_expr -> BEGIN seq_expr error
-- On LIDENT reduce production simple_expr -> BEGIN seq_expr error
-- On LBRACKBAR reduce production simple_expr -> BEGIN seq_expr error
-- On LBRACK reduce production simple_expr -> BEGIN seq_expr error
-- On LBRACE reduce production simple_expr -> BEGIN seq_expr error
-- On INT reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP5R reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP5L reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP4R reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP4L reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP3R reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP3L reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP2R reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP2L reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP1R reduce production simple_expr -> BEGIN seq_expr error
-- On INFIXOP1L reduce production simple_expr -> BEGIN seq_expr error
-- On IMAGINARY reduce production simple_expr -> BEGIN seq_expr error
-- On FLOAT reduce production simple_expr -> BEGIN seq_expr error
-- On EQ reduce production simple_expr -> BEGIN seq_expr error
-- On END reduce production simple_expr -> BEGIN seq_expr error
-- On ELSE reduce production simple_expr -> BEGIN seq_expr error
-- On DOTDOT reduce production simple_expr -> BEGIN seq_expr error
-- On DOT reduce production simple_expr -> BEGIN seq_expr error
-- On DOLLAR reduce production simple_expr -> BEGIN seq_expr error
-- On COMMA reduce production simple_expr -> BEGIN seq_expr error
-- On COLONEQUAL reduce production simple_expr -> BEGIN seq_expr error
-- On COLONCOLON reduce production simple_expr -> BEGIN seq_expr error
-- On COLON reduce production simple_expr -> BEGIN seq_expr error
-- On CHAR reduce production simple_expr -> BEGIN seq_expr error
-- On BEGIN reduce production simple_expr -> BEGIN seq_expr error
-- On BARRBRACK reduce production simple_expr -> BEGIN seq_expr error
-- On BARCOLON reduce production simple_expr -> BEGIN seq_expr error
-- On BARBAR reduce production simple_expr -> BEGIN seq_expr error
-- On BAR reduce production simple_expr -> BEGIN seq_expr error
-- On AMPERAMPER reduce production simple_expr -> BEGIN seq_expr error

State 744:
simple_expr -> BEGIN seq_expr END . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> BEGIN seq_expr END
-- On WHERE reduce production simple_expr -> BEGIN seq_expr END
-- On UIDENT reduce production simple_expr -> BEGIN seq_expr END
-- On THEN reduce production simple_expr -> BEGIN seq_expr END
-- On STRING reduce production simple_expr -> BEGIN seq_expr END
-- On STAR reduce production simple_expr -> BEGIN seq_expr END
-- On SHARP reduce production simple_expr -> BEGIN seq_expr END
-- On SEMI reduce production simple_expr -> BEGIN seq_expr END
-- On RPAREN reduce production simple_expr -> BEGIN seq_expr END
-- On RBRACK reduce production simple_expr -> BEGIN seq_expr END
-- On RBRACE reduce production simple_expr -> BEGIN seq_expr END
-- On QUESTION reduce production simple_expr -> BEGIN seq_expr END
-- On PREFIXOP reduce production simple_expr -> BEGIN seq_expr END
-- On PLUS reduce production simple_expr -> BEGIN seq_expr END
-- On MINUS reduce production simple_expr -> BEGIN seq_expr END
-- On LVECTOR reduce production simple_expr -> BEGIN seq_expr END
-- On LPAREN reduce production simple_expr -> BEGIN seq_expr END
-- On LMATRIX reduce production simple_expr -> BEGIN seq_expr END
-- On LIDENT reduce production simple_expr -> BEGIN seq_expr END
-- On LBRACKBAR reduce production simple_expr -> BEGIN seq_expr END
-- On LBRACK reduce production simple_expr -> BEGIN seq_expr END
-- On LBRACE reduce production simple_expr -> BEGIN seq_expr END
-- On INT reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP5R reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP5L reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP4R reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP4L reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP3R reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP3L reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP2R reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP2L reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP1R reduce production simple_expr -> BEGIN seq_expr END
-- On INFIXOP1L reduce production simple_expr -> BEGIN seq_expr END
-- On IMAGINARY reduce production simple_expr -> BEGIN seq_expr END
-- On FLOAT reduce production simple_expr -> BEGIN seq_expr END
-- On EQ reduce production simple_expr -> BEGIN seq_expr END
-- On END reduce production simple_expr -> BEGIN seq_expr END
-- On ELSE reduce production simple_expr -> BEGIN seq_expr END
-- On DOTDOT reduce production simple_expr -> BEGIN seq_expr END
-- On DOT reduce production simple_expr -> BEGIN seq_expr END
-- On DOLLAR reduce production simple_expr -> BEGIN seq_expr END
-- On COMMA reduce production simple_expr -> BEGIN seq_expr END
-- On COLONEQUAL reduce production simple_expr -> BEGIN seq_expr END
-- On COLONCOLON reduce production simple_expr -> BEGIN seq_expr END
-- On COLON reduce production simple_expr -> BEGIN seq_expr END
-- On CHAR reduce production simple_expr -> BEGIN seq_expr END
-- On BEGIN reduce production simple_expr -> BEGIN seq_expr END
-- On BARRBRACK reduce production simple_expr -> BEGIN seq_expr END
-- On BARCOLON reduce production simple_expr -> BEGIN seq_expr END
-- On BARBAR reduce production simple_expr -> BEGIN seq_expr END
-- On BAR reduce production simple_expr -> BEGIN seq_expr END
-- On AMPERAMPER reduce production simple_expr -> BEGIN seq_expr END

State 745:
simple_expr -> simple_expr . DOT label_longident [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT DOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> LAZY simple_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On DOT shift to state 491
-- On error reduce production value_expr -> LAZY simple_expr
-- On WHERE reduce production value_expr -> LAZY simple_expr
-- On THEN reduce production value_expr -> LAZY simple_expr
-- On STAR reduce production value_expr -> LAZY simple_expr
-- On SEMI reduce production value_expr -> LAZY simple_expr
-- On RPAREN reduce production value_expr -> LAZY simple_expr
-- On RBRACK reduce production value_expr -> LAZY simple_expr
-- On RBRACE reduce production value_expr -> LAZY simple_expr
-- On QUESTION reduce production value_expr -> LAZY simple_expr
-- On PLUS reduce production value_expr -> LAZY simple_expr
-- On MINUS reduce production value_expr -> LAZY simple_expr
-- On INFIXOP5R reduce production value_expr -> LAZY simple_expr
-- On INFIXOP5L reduce production value_expr -> LAZY simple_expr
-- On INFIXOP4R reduce production value_expr -> LAZY simple_expr
-- On INFIXOP4L reduce production value_expr -> LAZY simple_expr
-- On INFIXOP3R reduce production value_expr -> LAZY simple_expr
-- On INFIXOP3L reduce production value_expr -> LAZY simple_expr
-- On INFIXOP2R reduce production value_expr -> LAZY simple_expr
-- On INFIXOP2L reduce production value_expr -> LAZY simple_expr
-- On INFIXOP1R reduce production value_expr -> LAZY simple_expr
-- On INFIXOP1L reduce production value_expr -> LAZY simple_expr
-- On EQ reduce production value_expr -> LAZY simple_expr
-- On END reduce production value_expr -> LAZY simple_expr
-- On ELSE reduce production value_expr -> LAZY simple_expr
-- On DOTDOT reduce production value_expr -> LAZY simple_expr
-- On COMMA reduce production value_expr -> LAZY simple_expr
-- On COLONEQUAL reduce production value_expr -> LAZY simple_expr
-- On COLONCOLON reduce production value_expr -> LAZY simple_expr
-- On COLON reduce production value_expr -> LAZY simple_expr
-- On BARRBRACK reduce production value_expr -> LAZY simple_expr
-- On BARCOLON reduce production value_expr -> LAZY simple_expr
-- On BARBAR reduce production value_expr -> LAZY simple_expr
-- On BAR reduce production value_expr -> LAZY simple_expr
-- On AMPERAMPER reduce production value_expr -> LAZY simple_expr

State 746:
simple_expr -> LBRACK list_expr . RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACK list_expr . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On error shift to state 747
-- On RBRACK shift to state 748

State 747:
simple_expr -> LBRACK list_expr error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LBRACK list_expr error
-- On WHILE reduce production simple_expr -> LBRACK list_expr error
-- On WHERE reduce production simple_expr -> LBRACK list_expr error
-- On UIDENT reduce production simple_expr -> LBRACK list_expr error
-- On TYPE reduce production simple_expr -> LBRACK list_expr error
-- On TRY reduce production simple_expr -> LBRACK list_expr error
-- On TO reduce production simple_expr -> LBRACK list_expr error
-- On THEN reduce production simple_expr -> LBRACK list_expr error
-- On STRING reduce production simple_expr -> LBRACK list_expr error
-- On STAR reduce production simple_expr -> LBRACK list_expr error
-- On SHARP reduce production simple_expr -> LBRACK list_expr error
-- On SEMISEMI reduce production simple_expr -> LBRACK list_expr error
-- On SEMI reduce production simple_expr -> LBRACK list_expr error
-- On RPAREN reduce production simple_expr -> LBRACK list_expr error
-- On RAISE reduce production simple_expr -> LBRACK list_expr error
-- On QUESTION reduce production simple_expr -> LBRACK list_expr error
-- On PREFIXOP reduce production simple_expr -> LBRACK list_expr error
-- On PLUS reduce production simple_expr -> LBRACK list_expr error
-- On OPEN reduce production simple_expr -> LBRACK list_expr error
-- On MODULE reduce production simple_expr -> LBRACK list_expr error
-- On MINUSGREATER reduce production simple_expr -> LBRACK list_expr error
-- On MINUS reduce production simple_expr -> LBRACK list_expr error
-- On MATCH reduce production simple_expr -> LBRACK list_expr error
-- On LVECTOR reduce production simple_expr -> LBRACK list_expr error
-- On LPAREN reduce production simple_expr -> LBRACK list_expr error
-- On LMATRIX reduce production simple_expr -> LBRACK list_expr error
-- On LIDENT reduce production simple_expr -> LBRACK list_expr error
-- On LET reduce production simple_expr -> LBRACK list_expr error
-- On LBRACKBAR reduce production simple_expr -> LBRACK list_expr error
-- On LBRACK reduce production simple_expr -> LBRACK list_expr error
-- On LBRACE reduce production simple_expr -> LBRACK list_expr error
-- On LAZY reduce production simple_expr -> LBRACK list_expr error
-- On INT reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP5R reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP5L reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP4R reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP4L reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP3R reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP3L reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP2R reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP2L reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP1R reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP1L reduce production simple_expr -> LBRACK list_expr error
-- On IN reduce production simple_expr -> LBRACK list_expr error
-- On IMAGINARY reduce production simple_expr -> LBRACK list_expr error
-- On IF reduce production simple_expr -> LBRACK list_expr error
-- On FUNCTION reduce production simple_expr -> LBRACK list_expr error
-- On FUN reduce production simple_expr -> LBRACK list_expr error
-- On FOR reduce production simple_expr -> LBRACK list_expr error
-- On FLOAT reduce production simple_expr -> LBRACK list_expr error
-- On EXCEPTION reduce production simple_expr -> LBRACK list_expr error
-- On EQ reduce production simple_expr -> LBRACK list_expr error
-- On EOF reduce production simple_expr -> LBRACK list_expr error
-- On ELSE reduce production simple_expr -> LBRACK list_expr error
-- On DOWNTO reduce production simple_expr -> LBRACK list_expr error
-- On DOT reduce production simple_expr -> LBRACK list_expr error
-- On DONE reduce production simple_expr -> LBRACK list_expr error
-- On DOLLAR reduce production simple_expr -> LBRACK list_expr error
-- On DO reduce production simple_expr -> LBRACK list_expr error
-- On COMMA reduce production simple_expr -> LBRACK list_expr error
-- On COLONEQUAL reduce production simple_expr -> LBRACK list_expr error
-- On COLONCOLON reduce production simple_expr -> LBRACK list_expr error
-- On COLON reduce production simple_expr -> LBRACK list_expr error
-- On CHAR reduce production simple_expr -> LBRACK list_expr error
-- On CASE reduce production simple_expr -> LBRACK list_expr error
-- On BELOW reduce production simple_expr -> LBRACK list_expr error
-- On BEGIN reduce production simple_expr -> LBRACK list_expr error
-- On BARBAR reduce production simple_expr -> LBRACK list_expr error
-- On BAR reduce production simple_expr -> LBRACK list_expr error
-- On ASSERT reduce production simple_expr -> LBRACK list_expr error
-- On AND reduce production simple_expr -> LBRACK list_expr error
-- On AMPERAMPER reduce production simple_expr -> LBRACK list_expr error
-- On ABOVE reduce production simple_expr -> LBRACK list_expr error

State 748:
simple_expr -> LBRACK list_expr RBRACK . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LBRACK list_expr RBRACK
-- On WHILE reduce production simple_expr -> LBRACK list_expr RBRACK
-- On WHERE reduce production simple_expr -> LBRACK list_expr RBRACK
-- On UIDENT reduce production simple_expr -> LBRACK list_expr RBRACK
-- On TYPE reduce production simple_expr -> LBRACK list_expr RBRACK
-- On TRY reduce production simple_expr -> LBRACK list_expr RBRACK
-- On TO reduce production simple_expr -> LBRACK list_expr RBRACK
-- On THEN reduce production simple_expr -> LBRACK list_expr RBRACK
-- On STRING reduce production simple_expr -> LBRACK list_expr RBRACK
-- On STAR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On SHARP reduce production simple_expr -> LBRACK list_expr RBRACK
-- On SEMISEMI reduce production simple_expr -> LBRACK list_expr RBRACK
-- On SEMI reduce production simple_expr -> LBRACK list_expr RBRACK
-- On RPAREN reduce production simple_expr -> LBRACK list_expr RBRACK
-- On RAISE reduce production simple_expr -> LBRACK list_expr RBRACK
-- On QUESTION reduce production simple_expr -> LBRACK list_expr RBRACK
-- On PREFIXOP reduce production simple_expr -> LBRACK list_expr RBRACK
-- On PLUS reduce production simple_expr -> LBRACK list_expr RBRACK
-- On OPEN reduce production simple_expr -> LBRACK list_expr RBRACK
-- On MODULE reduce production simple_expr -> LBRACK list_expr RBRACK
-- On MINUSGREATER reduce production simple_expr -> LBRACK list_expr RBRACK
-- On MINUS reduce production simple_expr -> LBRACK list_expr RBRACK
-- On MATCH reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LVECTOR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LPAREN reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LMATRIX reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LIDENT reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LET reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LBRACKBAR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LBRACK reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LBRACE reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LAZY reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INT reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP5R reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP5L reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP4R reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP4L reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP3R reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP3L reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP2R reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP2L reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP1R reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP1L reduce production simple_expr -> LBRACK list_expr RBRACK
-- On IN reduce production simple_expr -> LBRACK list_expr RBRACK
-- On IMAGINARY reduce production simple_expr -> LBRACK list_expr RBRACK
-- On IF reduce production simple_expr -> LBRACK list_expr RBRACK
-- On FUNCTION reduce production simple_expr -> LBRACK list_expr RBRACK
-- On FUN reduce production simple_expr -> LBRACK list_expr RBRACK
-- On FOR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On FLOAT reduce production simple_expr -> LBRACK list_expr RBRACK
-- On EXCEPTION reduce production simple_expr -> LBRACK list_expr RBRACK
-- On EQ reduce production simple_expr -> LBRACK list_expr RBRACK
-- On EOF reduce production simple_expr -> LBRACK list_expr RBRACK
-- On ELSE reduce production simple_expr -> LBRACK list_expr RBRACK
-- On DOWNTO reduce production simple_expr -> LBRACK list_expr RBRACK
-- On DOT reduce production simple_expr -> LBRACK list_expr RBRACK
-- On DONE reduce production simple_expr -> LBRACK list_expr RBRACK
-- On DOLLAR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On DO reduce production simple_expr -> LBRACK list_expr RBRACK
-- On COMMA reduce production simple_expr -> LBRACK list_expr RBRACK
-- On COLONEQUAL reduce production simple_expr -> LBRACK list_expr RBRACK
-- On COLONCOLON reduce production simple_expr -> LBRACK list_expr RBRACK
-- On COLON reduce production simple_expr -> LBRACK list_expr RBRACK
-- On CHAR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On CASE reduce production simple_expr -> LBRACK list_expr RBRACK
-- On BELOW reduce production simple_expr -> LBRACK list_expr RBRACK
-- On BEGIN reduce production simple_expr -> LBRACK list_expr RBRACK
-- On BARBAR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On BAR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On ASSERT reduce production simple_expr -> LBRACK list_expr RBRACK
-- On AND reduce production simple_expr -> LBRACK list_expr RBRACK
-- On AMPERAMPER reduce production simple_expr -> LBRACK list_expr RBRACK
-- On ABOVE reduce production simple_expr -> LBRACK list_expr RBRACK

State 749:
expr_comma_list -> expr_comma_list_element . [ error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR ]
-- On error reduce production expr_comma_list -> expr_comma_list_element
-- On SEMI reduce production expr_comma_list -> expr_comma_list_element
-- On RPAREN reduce production expr_comma_list -> expr_comma_list_element
-- On RBRACK reduce production expr_comma_list -> expr_comma_list_element
-- On DOTDOT reduce production expr_comma_list -> expr_comma_list_element
-- On COMMA reduce production expr_comma_list -> expr_comma_list_element
-- On BARRBRACK reduce production expr_comma_list -> expr_comma_list_element
-- On BAR reduce production expr_comma_list -> expr_comma_list_element

State 750:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ error RBRACK DOTDOT COMMA BAR ]
list_expr -> expr_comma_list . opt_comma [ error RBRACK ]
list_expr -> expr_comma_list . opt_comma DOTDOT expr [ error RBRACK ]
list_expr -> expr_comma_list . BAR expr [ error RBRACK ]
-- On COMMA shift to state 751
-- On BAR shift to state 757
-- On opt_comma shift to state 759
-- On error reduce production opt_comma ->
-- On RBRACK reduce production opt_comma ->
-- On DOTDOT reduce production opt_comma ->

State 751:
expr_comma_list -> expr_comma_list COMMA . expr_comma_list_element [ error RBRACK DOTDOT COMMA BARRBRACK BAR ]
opt_comma -> COMMA . [ error RBRACK DOTDOT BARRBRACK ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 752
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
-- On error reduce production opt_comma -> COMMA
-- On RBRACK reduce production opt_comma -> COMMA
-- On DOTDOT reduce production opt_comma -> COMMA
-- On BARRBRACK reduce production opt_comma -> COMMA

State 752:
expr_comma_list -> expr_comma_list COMMA expr_comma_list_element . [ error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR ]
-- On error reduce production expr_comma_list -> expr_comma_list COMMA expr_comma_list_element
-- On SEMI reduce production expr_comma_list -> expr_comma_list COMMA expr_comma_list_element
-- On RPAREN reduce production expr_comma_list -> expr_comma_list COMMA expr_comma_list_element
-- On RBRACK reduce production expr_comma_list -> expr_comma_list COMMA expr_comma_list_element
-- On DOTDOT reduce production expr_comma_list -> expr_comma_list COMMA expr_comma_list_element
-- On COMMA reduce production expr_comma_list -> expr_comma_list COMMA expr_comma_list_element
-- On BARRBRACK reduce production expr_comma_list -> expr_comma_list COMMA expr_comma_list_element
-- On BAR reduce production expr_comma_list -> expr_comma_list COMMA expr_comma_list_element

State 753:
expr_comma_list_element -> expr . [ error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production expr_comma_list_element -> expr
-- On SEMI reduce production expr_comma_list_element -> expr
-- On RPAREN reduce production expr_comma_list_element -> expr
-- On RBRACK reduce production expr_comma_list_element -> expr
-- On DOTDOT reduce production expr_comma_list_element -> expr
-- On COMMA reduce production expr_comma_list_element -> expr
-- On BARRBRACK reduce production expr_comma_list_element -> expr
-- On BAR reduce production expr_comma_list_element -> expr

State 754:
expr_comma_list_element -> colonized_symbol . COLON expr [ error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR ]
-- On COLON shift to state 755

State 755:
expr_comma_list_element -> colonized_symbol COLON . expr [ error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 756
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 756:
expr_comma_list_element -> colonized_symbol COLON expr . [ error SEMI RPAREN RBRACK DOTDOT COMMA BARRBRACK BAR ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR SEMI RPAREN RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARRBRACK BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production expr_comma_list_element -> colonized_symbol COLON expr
-- On SEMI reduce production expr_comma_list_element -> colonized_symbol COLON expr
-- On RPAREN reduce production expr_comma_list_element -> colonized_symbol COLON expr
-- On RBRACK reduce production expr_comma_list_element -> colonized_symbol COLON expr
-- On DOTDOT reduce production expr_comma_list_element -> colonized_symbol COLON expr
-- On COMMA reduce production expr_comma_list_element -> colonized_symbol COLON expr
-- On BARRBRACK reduce production expr_comma_list_element -> colonized_symbol COLON expr
-- On BAR reduce production expr_comma_list_element -> colonized_symbol COLON expr

State 757:
list_expr -> expr_comma_list BAR . expr [ error RBRACK ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 758
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 758:
list_expr -> expr_comma_list BAR expr . [ error RBRACK ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production list_expr -> expr_comma_list BAR expr
-- On RBRACK reduce production list_expr -> expr_comma_list BAR expr

State 759:
list_expr -> expr_comma_list opt_comma . [ error RBRACK ]
list_expr -> expr_comma_list opt_comma . DOTDOT expr [ error RBRACK ]
-- On DOTDOT shift to state 760
-- On error reduce production list_expr -> expr_comma_list opt_comma
-- On RBRACK reduce production list_expr -> expr_comma_list opt_comma

State 760:
list_expr -> expr_comma_list opt_comma DOTDOT . expr [ error RBRACK ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 761
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 761:
list_expr -> expr_comma_list opt_comma DOTDOT expr . [ error RBRACK ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production list_expr -> expr_comma_list opt_comma DOTDOT expr
-- On RBRACK reduce production list_expr -> expr_comma_list opt_comma DOTDOT expr

State 762:
expr_comma_list_element -> expr . [ error RBRACK DOTDOT COMMA BAR ]
list_expr -> expr . BARCOLON generator_list [ error RBRACK ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DOTDOT COMMA COLONEQUAL COLONCOLON BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARCOLON shift to state 763
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production expr_comma_list_element -> expr
-- On RBRACK reduce production expr_comma_list_element -> expr
-- On DOTDOT reduce production expr_comma_list_element -> expr
-- On COMMA reduce production expr_comma_list_element -> expr
-- On BAR reduce production expr_comma_list_element -> expr

State 763:
list_expr -> expr BARCOLON . generator_list [ error RBRACK ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 764
-- On generator_list shift to state 769
-- On generator shift to state 772
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 764:
generator -> pattern . LESSMINUS expr [ error SEMI RBRACK ]
generator -> pattern . LESSMINUS expr COMMA expr [ error SEMI RBRACK ]
pattern -> pattern . AS LIDENT [ LESSMINUS COLONCOLON BARBAR AS ]
pattern -> pattern . COLONCOLON pattern [ LESSMINUS COLONCOLON BARBAR AS ]
pattern -> pattern . BARBAR pattern [ LESSMINUS COLONCOLON BARBAR AS ]
-- On LESSMINUS shift to state 765
-- On COLONCOLON shift to state 305
-- On BARBAR shift to state 311
-- On AS shift to state 313

State 765:
generator -> pattern LESSMINUS . expr [ error SEMI RBRACK ]
generator -> pattern LESSMINUS . expr COMMA expr [ error SEMI RBRACK ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 766
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 766:
generator -> pattern LESSMINUS expr . [ error SEMI RBRACK ]
generator -> pattern LESSMINUS expr . COMMA expr [ error SEMI RBRACK ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COMMA shift to state 767
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production generator -> pattern LESSMINUS expr
-- On SEMI reduce production generator -> pattern LESSMINUS expr
-- On RBRACK reduce production generator -> pattern LESSMINUS expr

State 767:
generator -> pattern LESSMINUS expr COMMA . expr [ error SEMI RBRACK ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 768
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 768:
generator -> pattern LESSMINUS expr COMMA expr . [ error SEMI RBRACK ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR SEMI RBRACK QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production generator -> pattern LESSMINUS expr COMMA expr
-- On SEMI reduce production generator -> pattern LESSMINUS expr COMMA expr
-- On RBRACK reduce production generator -> pattern LESSMINUS expr COMMA expr

State 769:
generator_list -> generator_list . SEMI generator [ error SEMI RBRACK ]
list_expr -> expr BARCOLON generator_list . [ error RBRACK ]
-- On SEMI shift to state 770
-- On error reduce production list_expr -> expr BARCOLON generator_list
-- On RBRACK reduce production list_expr -> expr BARCOLON generator_list

State 770:
generator_list -> generator_list SEMI . generator [ error SEMI RBRACK ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern shift to state 764
-- On generator shift to state 771
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 771:
generator_list -> generator_list SEMI generator . [ error SEMI RBRACK ]
-- On error reduce production generator_list -> generator_list SEMI generator
-- On SEMI reduce production generator_list -> generator_list SEMI generator
-- On RBRACK reduce production generator_list -> generator_list SEMI generator

State 772:
generator_list -> generator . [ error SEMI RBRACK ]
-- On error reduce production generator_list -> generator
-- On SEMI reduce production generator_list -> generator
-- On RBRACK reduce production generator_list -> generator

State 773:
simple_expr -> LBRACE record_expr . opt_comma RBRACE [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACE record_expr . opt_comma error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On COMMA shift to state 732
-- On opt_comma shift to state 774
-- On error reduce production opt_comma ->
-- On RBRACE reduce production opt_comma ->

State 774:
simple_expr -> LBRACE record_expr opt_comma . RBRACE [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACE record_expr opt_comma . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error shift to state 775
-- On RBRACE shift to state 776

State 775:
simple_expr -> LBRACE record_expr opt_comma error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On WHERE reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On UIDENT reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On THEN reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On STRING reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On STAR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On SHARP reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On SEMI reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On RPAREN reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On RBRACK reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On RBRACE reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On QUESTION reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On PREFIXOP reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On PLUS reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On MINUS reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LVECTOR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LPAREN reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LMATRIX reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LIDENT reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LBRACKBAR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LBRACK reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On LBRACE reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INT reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP5R reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP5L reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP4R reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP4L reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP3R reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP3L reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP2R reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP2L reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP1R reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On INFIXOP1L reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On IMAGINARY reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On FLOAT reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On EQ reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On END reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On ELSE reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On DOTDOT reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On DOT reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On DOLLAR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On COMMA reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On COLONEQUAL reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On COLONCOLON reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On COLON reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On CHAR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On BEGIN reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On BARRBRACK reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On BARCOLON reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On BARBAR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On BAR reduce production simple_expr -> LBRACE record_expr opt_comma error
-- On AMPERAMPER reduce production simple_expr -> LBRACE record_expr opt_comma error

State 776:
simple_expr -> LBRACE record_expr opt_comma RBRACE . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On WHERE reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On UIDENT reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On THEN reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On STRING reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On STAR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On SHARP reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On SEMI reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On RPAREN reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On RBRACK reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On RBRACE reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On QUESTION reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On PREFIXOP reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On PLUS reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On MINUS reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LVECTOR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LPAREN reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LMATRIX reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LIDENT reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LBRACKBAR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LBRACK reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On LBRACE reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INT reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP5R reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP5L reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP4R reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP4L reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP3R reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP3L reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP2R reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP2L reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP1R reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On INFIXOP1L reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On IMAGINARY reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On FLOAT reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On EQ reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On END reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On ELSE reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On DOTDOT reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On DOT reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On DOLLAR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On COMMA reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On COLONEQUAL reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On COLONCOLON reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On COLON reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On CHAR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On BEGIN reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On BARRBRACK reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On BARCOLON reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On BARBAR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On BAR reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE
-- On AMPERAMPER reduce production simple_expr -> LBRACE record_expr opt_comma RBRACE

State 777:
simple_expr -> LBRACK list_expr . RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACK list_expr . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error shift to state 778
-- On RBRACK shift to state 779

State 778:
simple_expr -> LBRACK list_expr error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LBRACK list_expr error
-- On WHERE reduce production simple_expr -> LBRACK list_expr error
-- On UIDENT reduce production simple_expr -> LBRACK list_expr error
-- On THEN reduce production simple_expr -> LBRACK list_expr error
-- On STRING reduce production simple_expr -> LBRACK list_expr error
-- On STAR reduce production simple_expr -> LBRACK list_expr error
-- On SHARP reduce production simple_expr -> LBRACK list_expr error
-- On SEMI reduce production simple_expr -> LBRACK list_expr error
-- On RPAREN reduce production simple_expr -> LBRACK list_expr error
-- On RBRACK reduce production simple_expr -> LBRACK list_expr error
-- On RBRACE reduce production simple_expr -> LBRACK list_expr error
-- On QUESTION reduce production simple_expr -> LBRACK list_expr error
-- On PREFIXOP reduce production simple_expr -> LBRACK list_expr error
-- On PLUS reduce production simple_expr -> LBRACK list_expr error
-- On MINUS reduce production simple_expr -> LBRACK list_expr error
-- On LVECTOR reduce production simple_expr -> LBRACK list_expr error
-- On LPAREN reduce production simple_expr -> LBRACK list_expr error
-- On LMATRIX reduce production simple_expr -> LBRACK list_expr error
-- On LIDENT reduce production simple_expr -> LBRACK list_expr error
-- On LBRACKBAR reduce production simple_expr -> LBRACK list_expr error
-- On LBRACK reduce production simple_expr -> LBRACK list_expr error
-- On LBRACE reduce production simple_expr -> LBRACK list_expr error
-- On INT reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP5R reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP5L reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP4R reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP4L reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP3R reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP3L reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP2R reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP2L reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP1R reduce production simple_expr -> LBRACK list_expr error
-- On INFIXOP1L reduce production simple_expr -> LBRACK list_expr error
-- On IMAGINARY reduce production simple_expr -> LBRACK list_expr error
-- On FLOAT reduce production simple_expr -> LBRACK list_expr error
-- On EQ reduce production simple_expr -> LBRACK list_expr error
-- On END reduce production simple_expr -> LBRACK list_expr error
-- On ELSE reduce production simple_expr -> LBRACK list_expr error
-- On DOTDOT reduce production simple_expr -> LBRACK list_expr error
-- On DOT reduce production simple_expr -> LBRACK list_expr error
-- On DOLLAR reduce production simple_expr -> LBRACK list_expr error
-- On COMMA reduce production simple_expr -> LBRACK list_expr error
-- On COLONEQUAL reduce production simple_expr -> LBRACK list_expr error
-- On COLONCOLON reduce production simple_expr -> LBRACK list_expr error
-- On COLON reduce production simple_expr -> LBRACK list_expr error
-- On CHAR reduce production simple_expr -> LBRACK list_expr error
-- On BEGIN reduce production simple_expr -> LBRACK list_expr error
-- On BARRBRACK reduce production simple_expr -> LBRACK list_expr error
-- On BARCOLON reduce production simple_expr -> LBRACK list_expr error
-- On BARBAR reduce production simple_expr -> LBRACK list_expr error
-- On BAR reduce production simple_expr -> LBRACK list_expr error
-- On AMPERAMPER reduce production simple_expr -> LBRACK list_expr error

State 779:
simple_expr -> LBRACK list_expr RBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LBRACK list_expr RBRACK
-- On WHERE reduce production simple_expr -> LBRACK list_expr RBRACK
-- On UIDENT reduce production simple_expr -> LBRACK list_expr RBRACK
-- On THEN reduce production simple_expr -> LBRACK list_expr RBRACK
-- On STRING reduce production simple_expr -> LBRACK list_expr RBRACK
-- On STAR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On SHARP reduce production simple_expr -> LBRACK list_expr RBRACK
-- On SEMI reduce production simple_expr -> LBRACK list_expr RBRACK
-- On RPAREN reduce production simple_expr -> LBRACK list_expr RBRACK
-- On RBRACK reduce production simple_expr -> LBRACK list_expr RBRACK
-- On RBRACE reduce production simple_expr -> LBRACK list_expr RBRACK
-- On QUESTION reduce production simple_expr -> LBRACK list_expr RBRACK
-- On PREFIXOP reduce production simple_expr -> LBRACK list_expr RBRACK
-- On PLUS reduce production simple_expr -> LBRACK list_expr RBRACK
-- On MINUS reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LVECTOR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LPAREN reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LMATRIX reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LIDENT reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LBRACKBAR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LBRACK reduce production simple_expr -> LBRACK list_expr RBRACK
-- On LBRACE reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INT reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP5R reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP5L reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP4R reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP4L reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP3R reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP3L reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP2R reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP2L reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP1R reduce production simple_expr -> LBRACK list_expr RBRACK
-- On INFIXOP1L reduce production simple_expr -> LBRACK list_expr RBRACK
-- On IMAGINARY reduce production simple_expr -> LBRACK list_expr RBRACK
-- On FLOAT reduce production simple_expr -> LBRACK list_expr RBRACK
-- On EQ reduce production simple_expr -> LBRACK list_expr RBRACK
-- On END reduce production simple_expr -> LBRACK list_expr RBRACK
-- On ELSE reduce production simple_expr -> LBRACK list_expr RBRACK
-- On DOTDOT reduce production simple_expr -> LBRACK list_expr RBRACK
-- On DOT reduce production simple_expr -> LBRACK list_expr RBRACK
-- On DOLLAR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On COMMA reduce production simple_expr -> LBRACK list_expr RBRACK
-- On COLONEQUAL reduce production simple_expr -> LBRACK list_expr RBRACK
-- On COLONCOLON reduce production simple_expr -> LBRACK list_expr RBRACK
-- On COLON reduce production simple_expr -> LBRACK list_expr RBRACK
-- On CHAR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On BEGIN reduce production simple_expr -> LBRACK list_expr RBRACK
-- On BARRBRACK reduce production simple_expr -> LBRACK list_expr RBRACK
-- On BARCOLON reduce production simple_expr -> LBRACK list_expr RBRACK
-- On BARBAR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On BAR reduce production simple_expr -> LBRACK list_expr RBRACK
-- On AMPERAMPER reduce production simple_expr -> LBRACK list_expr RBRACK

State 780:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ error COMMA BARRBRACK ]
simple_expr -> LBRACKBAR expr_comma_list . opt_comma BARRBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACKBAR expr_comma_list . opt_comma error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On COMMA shift to state 751
-- On opt_comma shift to state 781
-- On error reduce production opt_comma ->
-- On BARRBRACK reduce production opt_comma ->

State 781:
simple_expr -> LBRACKBAR expr_comma_list opt_comma . BARRBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LBRACKBAR expr_comma_list opt_comma . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error shift to state 782
-- On BARRBRACK shift to state 783

State 782:
simple_expr -> LBRACKBAR expr_comma_list opt_comma error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On WHERE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On UIDENT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On THEN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On STRING reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On STAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On SHARP reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On SEMI reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On RPAREN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On RBRACK reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On RBRACE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On QUESTION reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On PREFIXOP reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On PLUS reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On MINUS reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LVECTOR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LPAREN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LMATRIX reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LIDENT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LBRACKBAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LBRACK reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LBRACE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP5R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP5L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP4R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP4L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP3R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP3L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP2R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP2L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP1R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP1L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On IMAGINARY reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On FLOAT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On EQ reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On END reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On ELSE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On DOTDOT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On DOT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On DOLLAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On COMMA reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On COLONEQUAL reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On COLONCOLON reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On COLON reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On CHAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On BEGIN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On BARRBRACK reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On BARCOLON reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On BARBAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On BAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On AMPERAMPER reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error

State 783:
simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On WHERE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On UIDENT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On THEN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On STRING reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On STAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On SHARP reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On SEMI reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On RPAREN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On RBRACK reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On RBRACE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On QUESTION reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On PREFIXOP reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On PLUS reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On MINUS reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LVECTOR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LPAREN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LMATRIX reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LIDENT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LBRACKBAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LBRACK reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LBRACE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP5R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP5L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP4R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP4L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP3R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP3L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP2R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP2L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP1R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP1L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On IMAGINARY reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On FLOAT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On EQ reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On END reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On ELSE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On DOTDOT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On DOT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On DOLLAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On COMMA reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On COLONEQUAL reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On COLONCOLON reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On COLON reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On CHAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On BEGIN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On BARRBRACK reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On BARCOLON reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On BARBAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On BAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On AMPERAMPER reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK

State 784:
value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On WHERE reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On THEN reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On STAR reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On SEMI reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On RPAREN reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On RBRACK reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On RBRACE reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On QUESTION reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On PLUS reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On MINUS reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP5R reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP5L reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP4R reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP4L reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP3R reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP3L reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP2R reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP2L reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP1R reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP1L reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On EQ reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On END reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On ELSE reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On DOTDOT reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On COMMA reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On COLONEQUAL reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On COLONCOLON reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On COLON reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On BARRBRACK reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On BARCOLON reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On BARBAR reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On BAR reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On AMPERAMPER reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr

State 785:
value_expr -> LET rec_flag . let_bindings IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 786
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 792
-- On pattern shift to state 399
-- On let_bindings shift to state 796
-- On let_binding shift to state 801
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 786:
let_binding -> val_ident . fun_binding [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
simple_pattern -> val_ident . [ EQ COMMA COLONCOLON BARBAR AS ]
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On EQ shift to state 787
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 789
-- On signed_constant shift to state 306
-- On fun_binding shift to state 791
-- On constr_longident shift to state 609
-- On constant shift to state 145
-- On COMMA reduce production simple_pattern -> val_ident
-- On COLONCOLON reduce production simple_pattern -> val_ident
-- On BARBAR reduce production simple_pattern -> val_ident
-- On AS reduce production simple_pattern -> val_ident
** Conflict on EQ

State 787:
fun_binding -> EQ . seq_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 788
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 788:
fun_binding -> EQ seq_expr . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
-- On WHILE reduce production fun_binding -> EQ seq_expr
-- On WHERE reduce production fun_binding -> EQ seq_expr
-- On UIDENT reduce production fun_binding -> EQ seq_expr
-- On TYPE reduce production fun_binding -> EQ seq_expr
-- On TRY reduce production fun_binding -> EQ seq_expr
-- On STRING reduce production fun_binding -> EQ seq_expr
-- On SHARP reduce production fun_binding -> EQ seq_expr
-- On SEMISEMI reduce production fun_binding -> EQ seq_expr
-- On RAISE reduce production fun_binding -> EQ seq_expr
-- On PREFIXOP reduce production fun_binding -> EQ seq_expr
-- On PLUS reduce production fun_binding -> EQ seq_expr
-- On OPEN reduce production fun_binding -> EQ seq_expr
-- On MODULE reduce production fun_binding -> EQ seq_expr
-- On MINUS reduce production fun_binding -> EQ seq_expr
-- On MATCH reduce production fun_binding -> EQ seq_expr
-- On LVECTOR reduce production fun_binding -> EQ seq_expr
-- On LPAREN reduce production fun_binding -> EQ seq_expr
-- On LMATRIX reduce production fun_binding -> EQ seq_expr
-- On LIDENT reduce production fun_binding -> EQ seq_expr
-- On LET reduce production fun_binding -> EQ seq_expr
-- On LBRACKBAR reduce production fun_binding -> EQ seq_expr
-- On LBRACK reduce production fun_binding -> EQ seq_expr
-- On LBRACE reduce production fun_binding -> EQ seq_expr
-- On LAZY reduce production fun_binding -> EQ seq_expr
-- On INT reduce production fun_binding -> EQ seq_expr
-- On IN reduce production fun_binding -> EQ seq_expr
-- On IMAGINARY reduce production fun_binding -> EQ seq_expr
-- On IF reduce production fun_binding -> EQ seq_expr
-- On FUNCTION reduce production fun_binding -> EQ seq_expr
-- On FUN reduce production fun_binding -> EQ seq_expr
-- On FOR reduce production fun_binding -> EQ seq_expr
-- On FLOAT reduce production fun_binding -> EQ seq_expr
-- On EXCEPTION reduce production fun_binding -> EQ seq_expr
-- On EOF reduce production fun_binding -> EQ seq_expr
-- On DOLLAR reduce production fun_binding -> EQ seq_expr
-- On CHAR reduce production fun_binding -> EQ seq_expr
-- On CASE reduce production fun_binding -> EQ seq_expr
-- On BEGIN reduce production fun_binding -> EQ seq_expr
-- On ASSERT reduce production fun_binding -> EQ seq_expr
-- On AND reduce production fun_binding -> EQ seq_expr

State 789:
fun_binding -> simple_pattern . fun_binding [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On FLOAT shift to state 117
-- On EQ shift to state 787
-- On DOLLAR shift to state 118
-- On CHAR shift to state 289
-- On val_ident shift to state 298
-- On simple_pattern shift to state 789
-- On signed_constant shift to state 306
-- On fun_binding shift to state 790
-- On constr_longident shift to state 609
-- On constant shift to state 145

State 790:
fun_binding -> simple_pattern fun_binding . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
-- On WHILE reduce production fun_binding -> simple_pattern fun_binding
-- On WHERE reduce production fun_binding -> simple_pattern fun_binding
-- On UIDENT reduce production fun_binding -> simple_pattern fun_binding
-- On TYPE reduce production fun_binding -> simple_pattern fun_binding
-- On TRY reduce production fun_binding -> simple_pattern fun_binding
-- On STRING reduce production fun_binding -> simple_pattern fun_binding
-- On SHARP reduce production fun_binding -> simple_pattern fun_binding
-- On SEMISEMI reduce production fun_binding -> simple_pattern fun_binding
-- On RAISE reduce production fun_binding -> simple_pattern fun_binding
-- On PREFIXOP reduce production fun_binding -> simple_pattern fun_binding
-- On PLUS reduce production fun_binding -> simple_pattern fun_binding
-- On OPEN reduce production fun_binding -> simple_pattern fun_binding
-- On MODULE reduce production fun_binding -> simple_pattern fun_binding
-- On MINUS reduce production fun_binding -> simple_pattern fun_binding
-- On MATCH reduce production fun_binding -> simple_pattern fun_binding
-- On LVECTOR reduce production fun_binding -> simple_pattern fun_binding
-- On LPAREN reduce production fun_binding -> simple_pattern fun_binding
-- On LMATRIX reduce production fun_binding -> simple_pattern fun_binding
-- On LIDENT reduce production fun_binding -> simple_pattern fun_binding
-- On LET reduce production fun_binding -> simple_pattern fun_binding
-- On LBRACKBAR reduce production fun_binding -> simple_pattern fun_binding
-- On LBRACK reduce production fun_binding -> simple_pattern fun_binding
-- On LBRACE reduce production fun_binding -> simple_pattern fun_binding
-- On LAZY reduce production fun_binding -> simple_pattern fun_binding
-- On INT reduce production fun_binding -> simple_pattern fun_binding
-- On IN reduce production fun_binding -> simple_pattern fun_binding
-- On IMAGINARY reduce production fun_binding -> simple_pattern fun_binding
-- On IF reduce production fun_binding -> simple_pattern fun_binding
-- On FUNCTION reduce production fun_binding -> simple_pattern fun_binding
-- On FUN reduce production fun_binding -> simple_pattern fun_binding
-- On FOR reduce production fun_binding -> simple_pattern fun_binding
-- On FLOAT reduce production fun_binding -> simple_pattern fun_binding
-- On EXCEPTION reduce production fun_binding -> simple_pattern fun_binding
-- On EOF reduce production fun_binding -> simple_pattern fun_binding
-- On DOLLAR reduce production fun_binding -> simple_pattern fun_binding
-- On CHAR reduce production fun_binding -> simple_pattern fun_binding
-- On CASE reduce production fun_binding -> simple_pattern fun_binding
-- On BEGIN reduce production fun_binding -> simple_pattern fun_binding
-- On ASSERT reduce production fun_binding -> simple_pattern fun_binding
-- On AND reduce production fun_binding -> simple_pattern fun_binding

State 791:
let_binding -> val_ident fun_binding . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
-- On WHILE reduce production let_binding -> val_ident fun_binding
-- On WHERE reduce production let_binding -> val_ident fun_binding
-- On UIDENT reduce production let_binding -> val_ident fun_binding
-- On TYPE reduce production let_binding -> val_ident fun_binding
-- On TRY reduce production let_binding -> val_ident fun_binding
-- On STRING reduce production let_binding -> val_ident fun_binding
-- On SHARP reduce production let_binding -> val_ident fun_binding
-- On SEMISEMI reduce production let_binding -> val_ident fun_binding
-- On RAISE reduce production let_binding -> val_ident fun_binding
-- On PREFIXOP reduce production let_binding -> val_ident fun_binding
-- On PLUS reduce production let_binding -> val_ident fun_binding
-- On OPEN reduce production let_binding -> val_ident fun_binding
-- On MODULE reduce production let_binding -> val_ident fun_binding
-- On MINUS reduce production let_binding -> val_ident fun_binding
-- On MATCH reduce production let_binding -> val_ident fun_binding
-- On LVECTOR reduce production let_binding -> val_ident fun_binding
-- On LPAREN reduce production let_binding -> val_ident fun_binding
-- On LMATRIX reduce production let_binding -> val_ident fun_binding
-- On LIDENT reduce production let_binding -> val_ident fun_binding
-- On LET reduce production let_binding -> val_ident fun_binding
-- On LBRACKBAR reduce production let_binding -> val_ident fun_binding
-- On LBRACK reduce production let_binding -> val_ident fun_binding
-- On LBRACE reduce production let_binding -> val_ident fun_binding
-- On LAZY reduce production let_binding -> val_ident fun_binding
-- On INT reduce production let_binding -> val_ident fun_binding
-- On IN reduce production let_binding -> val_ident fun_binding
-- On IMAGINARY reduce production let_binding -> val_ident fun_binding
-- On IF reduce production let_binding -> val_ident fun_binding
-- On FUNCTION reduce production let_binding -> val_ident fun_binding
-- On FUN reduce production let_binding -> val_ident fun_binding
-- On FOR reduce production let_binding -> val_ident fun_binding
-- On FLOAT reduce production let_binding -> val_ident fun_binding
-- On EXCEPTION reduce production let_binding -> val_ident fun_binding
-- On EOF reduce production let_binding -> val_ident fun_binding
-- On DOLLAR reduce production let_binding -> val_ident fun_binding
-- On CHAR reduce production let_binding -> val_ident fun_binding
-- On CASE reduce production let_binding -> val_ident fun_binding
-- On BEGIN reduce production let_binding -> val_ident fun_binding
-- On ASSERT reduce production let_binding -> val_ident fun_binding
-- On AND reduce production let_binding -> val_ident fun_binding

State 792:
let_binding -> pattern_comma_list . EQ seq_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
pattern_comma_list -> pattern_comma_list . COMMA pattern_comma_list_element [ EQ COMMA ]
-- On EQ shift to state 793
-- On COMMA shift to state 795

State 793:
let_binding -> pattern_comma_list EQ . seq_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 794
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 794:
let_binding -> pattern_comma_list EQ seq_expr . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
-- On WHILE reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On WHERE reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On UIDENT reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On TYPE reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On TRY reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On STRING reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On SHARP reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On SEMISEMI reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On RAISE reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On PREFIXOP reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On PLUS reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On OPEN reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On MODULE reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On MINUS reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On MATCH reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On LVECTOR reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On LPAREN reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On LMATRIX reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On LIDENT reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On LET reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On LBRACKBAR reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On LBRACK reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On LBRACE reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On LAZY reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On INT reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On IN reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On IMAGINARY reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On IF reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On FUNCTION reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On FUN reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On FOR reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On FLOAT reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On EXCEPTION reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On EOF reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On DOLLAR reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On CHAR reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On CASE reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On BEGIN reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On ASSERT reduce production let_binding -> pattern_comma_list EQ seq_expr
-- On AND reduce production let_binding -> pattern_comma_list EQ seq_expr

State 795:
pattern_comma_list -> pattern_comma_list COMMA . pattern_comma_list_element [ EQ COMMA ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 398
-- On pattern shift to state 399
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 796:
let_bindings -> let_bindings . AND let_binding [ IN AND ]
value_expr -> LET rec_flag let_bindings . IN seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On IN shift to state 797
-- On AND shift to state 799

State 797:
value_expr -> LET rec_flag let_bindings IN . seq_expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On seq_expr shift to state 798
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 629

State 798:
value_expr -> LET rec_flag let_bindings IN seq_expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On WHERE reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On THEN reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On STAR reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On SEMI reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On RPAREN reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On RBRACK reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On RBRACE reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On QUESTION reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On PLUS reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On MINUS reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP5R reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP5L reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP4R reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP4L reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP3R reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP3L reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP2R reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP2L reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP1R reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP1L reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On EQ reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On END reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On ELSE reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On DOTDOT reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On COMMA reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On COLONEQUAL reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On COLONCOLON reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On COLON reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On BARRBRACK reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On BARCOLON reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On BARBAR reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On BAR reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On AMPERAMPER reduce production value_expr -> LET rec_flag let_bindings IN seq_expr

State 799:
let_bindings -> let_bindings AND . let_binding [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 786
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 792
-- On pattern shift to state 399
-- On let_binding shift to state 800
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 800:
let_bindings -> let_bindings AND let_binding . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
-- On WHILE reduce production let_bindings -> let_bindings AND let_binding
-- On WHERE reduce production let_bindings -> let_bindings AND let_binding
-- On UIDENT reduce production let_bindings -> let_bindings AND let_binding
-- On TYPE reduce production let_bindings -> let_bindings AND let_binding
-- On TRY reduce production let_bindings -> let_bindings AND let_binding
-- On STRING reduce production let_bindings -> let_bindings AND let_binding
-- On SHARP reduce production let_bindings -> let_bindings AND let_binding
-- On SEMISEMI reduce production let_bindings -> let_bindings AND let_binding
-- On RAISE reduce production let_bindings -> let_bindings AND let_binding
-- On PREFIXOP reduce production let_bindings -> let_bindings AND let_binding
-- On PLUS reduce production let_bindings -> let_bindings AND let_binding
-- On OPEN reduce production let_bindings -> let_bindings AND let_binding
-- On MODULE reduce production let_bindings -> let_bindings AND let_binding
-- On MINUS reduce production let_bindings -> let_bindings AND let_binding
-- On MATCH reduce production let_bindings -> let_bindings AND let_binding
-- On LVECTOR reduce production let_bindings -> let_bindings AND let_binding
-- On LPAREN reduce production let_bindings -> let_bindings AND let_binding
-- On LMATRIX reduce production let_bindings -> let_bindings AND let_binding
-- On LIDENT reduce production let_bindings -> let_bindings AND let_binding
-- On LET reduce production let_bindings -> let_bindings AND let_binding
-- On LBRACKBAR reduce production let_bindings -> let_bindings AND let_binding
-- On LBRACK reduce production let_bindings -> let_bindings AND let_binding
-- On LBRACE reduce production let_bindings -> let_bindings AND let_binding
-- On LAZY reduce production let_bindings -> let_bindings AND let_binding
-- On INT reduce production let_bindings -> let_bindings AND let_binding
-- On IN reduce production let_bindings -> let_bindings AND let_binding
-- On IMAGINARY reduce production let_bindings -> let_bindings AND let_binding
-- On IF reduce production let_bindings -> let_bindings AND let_binding
-- On FUNCTION reduce production let_bindings -> let_bindings AND let_binding
-- On FUN reduce production let_bindings -> let_bindings AND let_binding
-- On FOR reduce production let_bindings -> let_bindings AND let_binding
-- On FLOAT reduce production let_bindings -> let_bindings AND let_binding
-- On EXCEPTION reduce production let_bindings -> let_bindings AND let_binding
-- On EOF reduce production let_bindings -> let_bindings AND let_binding
-- On DOLLAR reduce production let_bindings -> let_bindings AND let_binding
-- On CHAR reduce production let_bindings -> let_bindings AND let_binding
-- On CASE reduce production let_bindings -> let_bindings AND let_binding
-- On BEGIN reduce production let_bindings -> let_bindings AND let_binding
-- On ASSERT reduce production let_bindings -> let_bindings AND let_binding
-- On AND reduce production let_bindings -> let_bindings AND let_binding

State 801:
let_bindings -> let_binding . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
-- On WHILE reduce production let_bindings -> let_binding
-- On WHERE reduce production let_bindings -> let_binding
-- On UIDENT reduce production let_bindings -> let_binding
-- On TYPE reduce production let_bindings -> let_binding
-- On TRY reduce production let_bindings -> let_binding
-- On STRING reduce production let_bindings -> let_binding
-- On SHARP reduce production let_bindings -> let_binding
-- On SEMISEMI reduce production let_bindings -> let_binding
-- On RAISE reduce production let_bindings -> let_binding
-- On PREFIXOP reduce production let_bindings -> let_binding
-- On PLUS reduce production let_bindings -> let_binding
-- On OPEN reduce production let_bindings -> let_binding
-- On MODULE reduce production let_bindings -> let_binding
-- On MINUS reduce production let_bindings -> let_binding
-- On MATCH reduce production let_bindings -> let_binding
-- On LVECTOR reduce production let_bindings -> let_binding
-- On LPAREN reduce production let_bindings -> let_binding
-- On LMATRIX reduce production let_bindings -> let_binding
-- On LIDENT reduce production let_bindings -> let_binding
-- On LET reduce production let_bindings -> let_binding
-- On LBRACKBAR reduce production let_bindings -> let_binding
-- On LBRACK reduce production let_bindings -> let_binding
-- On LBRACE reduce production let_bindings -> let_binding
-- On LAZY reduce production let_bindings -> let_binding
-- On INT reduce production let_bindings -> let_binding
-- On IN reduce production let_bindings -> let_binding
-- On IMAGINARY reduce production let_bindings -> let_binding
-- On IF reduce production let_bindings -> let_binding
-- On FUNCTION reduce production let_bindings -> let_binding
-- On FUN reduce production let_bindings -> let_binding
-- On FOR reduce production let_bindings -> let_binding
-- On FLOAT reduce production let_bindings -> let_binding
-- On EXCEPTION reduce production let_bindings -> let_binding
-- On EOF reduce production let_bindings -> let_binding
-- On DOLLAR reduce production let_bindings -> let_binding
-- On CHAR reduce production let_bindings -> let_binding
-- On CASE reduce production let_bindings -> let_binding
-- On BEGIN reduce production let_bindings -> let_binding
-- On ASSERT reduce production let_bindings -> let_binding
-- On AND reduce production let_bindings -> let_binding

State 802:
matrix_expr -> matrix_expr . SEMI expr_comma_list [ error SEMI RBRACK ]
simple_expr -> LMATRIX matrix_expr . RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LMATRIX matrix_expr . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error shift to state 803
-- On SEMI shift to state 804
-- On RBRACK shift to state 807

State 803:
simple_expr -> LMATRIX matrix_expr error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LMATRIX matrix_expr error
-- On WHERE reduce production simple_expr -> LMATRIX matrix_expr error
-- On UIDENT reduce production simple_expr -> LMATRIX matrix_expr error
-- On THEN reduce production simple_expr -> LMATRIX matrix_expr error
-- On STRING reduce production simple_expr -> LMATRIX matrix_expr error
-- On STAR reduce production simple_expr -> LMATRIX matrix_expr error
-- On SHARP reduce production simple_expr -> LMATRIX matrix_expr error
-- On SEMI reduce production simple_expr -> LMATRIX matrix_expr error
-- On RPAREN reduce production simple_expr -> LMATRIX matrix_expr error
-- On RBRACK reduce production simple_expr -> LMATRIX matrix_expr error
-- On RBRACE reduce production simple_expr -> LMATRIX matrix_expr error
-- On QUESTION reduce production simple_expr -> LMATRIX matrix_expr error
-- On PREFIXOP reduce production simple_expr -> LMATRIX matrix_expr error
-- On PLUS reduce production simple_expr -> LMATRIX matrix_expr error
-- On MINUS reduce production simple_expr -> LMATRIX matrix_expr error
-- On LVECTOR reduce production simple_expr -> LMATRIX matrix_expr error
-- On LPAREN reduce production simple_expr -> LMATRIX matrix_expr error
-- On LMATRIX reduce production simple_expr -> LMATRIX matrix_expr error
-- On LIDENT reduce production simple_expr -> LMATRIX matrix_expr error
-- On LBRACKBAR reduce production simple_expr -> LMATRIX matrix_expr error
-- On LBRACK reduce production simple_expr -> LMATRIX matrix_expr error
-- On LBRACE reduce production simple_expr -> LMATRIX matrix_expr error
-- On INT reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP5R reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP5L reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP4R reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP4L reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP3R reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP3L reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP2R reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP2L reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP1R reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP1L reduce production simple_expr -> LMATRIX matrix_expr error
-- On IMAGINARY reduce production simple_expr -> LMATRIX matrix_expr error
-- On FLOAT reduce production simple_expr -> LMATRIX matrix_expr error
-- On EQ reduce production simple_expr -> LMATRIX matrix_expr error
-- On END reduce production simple_expr -> LMATRIX matrix_expr error
-- On ELSE reduce production simple_expr -> LMATRIX matrix_expr error
-- On DOTDOT reduce production simple_expr -> LMATRIX matrix_expr error
-- On DOT reduce production simple_expr -> LMATRIX matrix_expr error
-- On DOLLAR reduce production simple_expr -> LMATRIX matrix_expr error
-- On COMMA reduce production simple_expr -> LMATRIX matrix_expr error
-- On COLONEQUAL reduce production simple_expr -> LMATRIX matrix_expr error
-- On COLONCOLON reduce production simple_expr -> LMATRIX matrix_expr error
-- On COLON reduce production simple_expr -> LMATRIX matrix_expr error
-- On CHAR reduce production simple_expr -> LMATRIX matrix_expr error
-- On BEGIN reduce production simple_expr -> LMATRIX matrix_expr error
-- On BARRBRACK reduce production simple_expr -> LMATRIX matrix_expr error
-- On BARCOLON reduce production simple_expr -> LMATRIX matrix_expr error
-- On BARBAR reduce production simple_expr -> LMATRIX matrix_expr error
-- On BAR reduce production simple_expr -> LMATRIX matrix_expr error
-- On AMPERAMPER reduce production simple_expr -> LMATRIX matrix_expr error

State 804:
matrix_expr -> matrix_expr SEMI . expr_comma_list [ error SEMI RBRACK ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 749
-- On expr_comma_list shift to state 805
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754

State 805:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ error SEMI RBRACK COMMA ]
matrix_expr -> matrix_expr SEMI expr_comma_list . [ error SEMI RBRACK ]
-- On COMMA shift to state 806
-- On error reduce production matrix_expr -> matrix_expr SEMI expr_comma_list
-- On SEMI reduce production matrix_expr -> matrix_expr SEMI expr_comma_list
-- On RBRACK reduce production matrix_expr -> matrix_expr SEMI expr_comma_list

State 806:
expr_comma_list -> expr_comma_list COMMA . expr_comma_list_element [ error SEMI RBRACK COMMA ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 752
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754

State 807:
simple_expr -> LMATRIX matrix_expr RBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On WHERE reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On UIDENT reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On THEN reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On STRING reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On STAR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On SHARP reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On SEMI reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On RPAREN reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On RBRACK reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On RBRACE reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On QUESTION reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On PREFIXOP reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On PLUS reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On MINUS reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LVECTOR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LPAREN reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LMATRIX reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LIDENT reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LBRACKBAR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LBRACK reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LBRACE reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INT reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP5R reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP5L reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP4R reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP4L reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP3R reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP3L reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP2R reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP2L reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP1R reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP1L reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On IMAGINARY reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On FLOAT reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On EQ reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On END reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On ELSE reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On DOTDOT reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On DOT reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On DOLLAR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On COMMA reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On COLONEQUAL reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On COLONCOLON reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On COLON reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On CHAR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On BEGIN reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On BARRBRACK reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On BARCOLON reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On BARBAR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On BAR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On AMPERAMPER reduce production simple_expr -> LMATRIX matrix_expr RBRACK

State 808:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ error SEMI RBRACK COMMA ]
matrix_expr -> expr_comma_list . [ error SEMI RBRACK ]
-- On COMMA shift to state 806
-- On error reduce production matrix_expr -> expr_comma_list
-- On SEMI reduce production matrix_expr -> expr_comma_list
-- On RBRACK reduce production matrix_expr -> expr_comma_list

State 809:
simple_expr -> simple_expr . DOT label_longident [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> PREFIXOP simple_expr . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> PREFIXOP simple_expr
-- On WHERE reduce production simple_expr -> PREFIXOP simple_expr
-- On UIDENT reduce production simple_expr -> PREFIXOP simple_expr
-- On THEN reduce production simple_expr -> PREFIXOP simple_expr
-- On STRING reduce production simple_expr -> PREFIXOP simple_expr
-- On STAR reduce production simple_expr -> PREFIXOP simple_expr
-- On SHARP reduce production simple_expr -> PREFIXOP simple_expr
-- On SEMI reduce production simple_expr -> PREFIXOP simple_expr
-- On RPAREN reduce production simple_expr -> PREFIXOP simple_expr
-- On RBRACK reduce production simple_expr -> PREFIXOP simple_expr
-- On RBRACE reduce production simple_expr -> PREFIXOP simple_expr
-- On QUESTION reduce production simple_expr -> PREFIXOP simple_expr
-- On PREFIXOP reduce production simple_expr -> PREFIXOP simple_expr
-- On PLUS reduce production simple_expr -> PREFIXOP simple_expr
-- On MINUS reduce production simple_expr -> PREFIXOP simple_expr
-- On LVECTOR reduce production simple_expr -> PREFIXOP simple_expr
-- On LPAREN reduce production simple_expr -> PREFIXOP simple_expr
-- On LMATRIX reduce production simple_expr -> PREFIXOP simple_expr
-- On LIDENT reduce production simple_expr -> PREFIXOP simple_expr
-- On LBRACKBAR reduce production simple_expr -> PREFIXOP simple_expr
-- On LBRACK reduce production simple_expr -> PREFIXOP simple_expr
-- On LBRACE reduce production simple_expr -> PREFIXOP simple_expr
-- On INT reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP5R reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP5L reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP4R reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP4L reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP3R reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP3L reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP2R reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP2L reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP1R reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP1L reduce production simple_expr -> PREFIXOP simple_expr
-- On IMAGINARY reduce production simple_expr -> PREFIXOP simple_expr
-- On FLOAT reduce production simple_expr -> PREFIXOP simple_expr
-- On EQ reduce production simple_expr -> PREFIXOP simple_expr
-- On END reduce production simple_expr -> PREFIXOP simple_expr
-- On ELSE reduce production simple_expr -> PREFIXOP simple_expr
-- On DOTDOT reduce production simple_expr -> PREFIXOP simple_expr
-- On DOT reduce production simple_expr -> PREFIXOP simple_expr
-- On DOLLAR reduce production simple_expr -> PREFIXOP simple_expr
-- On COMMA reduce production simple_expr -> PREFIXOP simple_expr
-- On COLONEQUAL reduce production simple_expr -> PREFIXOP simple_expr
-- On COLONCOLON reduce production simple_expr -> PREFIXOP simple_expr
-- On COLON reduce production simple_expr -> PREFIXOP simple_expr
-- On CHAR reduce production simple_expr -> PREFIXOP simple_expr
-- On BEGIN reduce production simple_expr -> PREFIXOP simple_expr
-- On BARRBRACK reduce production simple_expr -> PREFIXOP simple_expr
-- On BARCOLON reduce production simple_expr -> PREFIXOP simple_expr
-- On BARBAR reduce production simple_expr -> PREFIXOP simple_expr
-- On BAR reduce production simple_expr -> PREFIXOP simple_expr
-- On AMPERAMPER reduce production simple_expr -> PREFIXOP simple_expr

State 810:
operator -> PLUS . [ RPAREN ]
value_expr -> PLUS . expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 811
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On RPAREN reduce production operator -> PLUS

State 811:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> PLUS expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On error reduce production value_expr -> PLUS expr
-- On THEN reduce production value_expr -> PLUS expr
-- On STAR reduce production value_expr -> PLUS expr
-- On SEMI reduce production value_expr -> PLUS expr
-- On RPAREN reduce production value_expr -> PLUS expr
-- On RBRACK reduce production value_expr -> PLUS expr
-- On RBRACE reduce production value_expr -> PLUS expr
-- On QUESTION reduce production value_expr -> PLUS expr
-- On PLUS reduce production value_expr -> PLUS expr
-- On MINUS reduce production value_expr -> PLUS expr
-- On INFIXOP4R reduce production value_expr -> PLUS expr
-- On INFIXOP4L reduce production value_expr -> PLUS expr
-- On INFIXOP3R reduce production value_expr -> PLUS expr
-- On INFIXOP3L reduce production value_expr -> PLUS expr
-- On INFIXOP2R reduce production value_expr -> PLUS expr
-- On INFIXOP2L reduce production value_expr -> PLUS expr
-- On INFIXOP1R reduce production value_expr -> PLUS expr
-- On INFIXOP1L reduce production value_expr -> PLUS expr
-- On EQ reduce production value_expr -> PLUS expr
-- On END reduce production value_expr -> PLUS expr
-- On ELSE reduce production value_expr -> PLUS expr
-- On DOTDOT reduce production value_expr -> PLUS expr
-- On COMMA reduce production value_expr -> PLUS expr
-- On COLONEQUAL reduce production value_expr -> PLUS expr
-- On COLONCOLON reduce production value_expr -> PLUS expr
-- On COLON reduce production value_expr -> PLUS expr
-- On BARRBRACK reduce production value_expr -> PLUS expr
-- On BARCOLON reduce production value_expr -> PLUS expr
-- On BARBAR reduce production value_expr -> PLUS expr
-- On BAR reduce production value_expr -> PLUS expr
-- On AMPERAMPER reduce production value_expr -> PLUS expr
** Conflict on WHERE

State 812:
operator -> MINUS . [ RPAREN ]
value_expr -> MINUS . expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 813
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On RPAREN reduce production operator -> MINUS

State 813:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> MINUS expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On error reduce production value_expr -> MINUS expr
-- On THEN reduce production value_expr -> MINUS expr
-- On STAR reduce production value_expr -> MINUS expr
-- On SEMI reduce production value_expr -> MINUS expr
-- On RPAREN reduce production value_expr -> MINUS expr
-- On RBRACK reduce production value_expr -> MINUS expr
-- On RBRACE reduce production value_expr -> MINUS expr
-- On QUESTION reduce production value_expr -> MINUS expr
-- On PLUS reduce production value_expr -> MINUS expr
-- On MINUS reduce production value_expr -> MINUS expr
-- On INFIXOP4R reduce production value_expr -> MINUS expr
-- On INFIXOP4L reduce production value_expr -> MINUS expr
-- On INFIXOP3R reduce production value_expr -> MINUS expr
-- On INFIXOP3L reduce production value_expr -> MINUS expr
-- On INFIXOP2R reduce production value_expr -> MINUS expr
-- On INFIXOP2L reduce production value_expr -> MINUS expr
-- On INFIXOP1R reduce production value_expr -> MINUS expr
-- On INFIXOP1L reduce production value_expr -> MINUS expr
-- On EQ reduce production value_expr -> MINUS expr
-- On END reduce production value_expr -> MINUS expr
-- On ELSE reduce production value_expr -> MINUS expr
-- On DOTDOT reduce production value_expr -> MINUS expr
-- On COMMA reduce production value_expr -> MINUS expr
-- On COLONEQUAL reduce production value_expr -> MINUS expr
-- On COLONCOLON reduce production value_expr -> MINUS expr
-- On COLON reduce production value_expr -> MINUS expr
-- On BARRBRACK reduce production value_expr -> MINUS expr
-- On BARCOLON reduce production value_expr -> MINUS expr
-- On BARBAR reduce production value_expr -> MINUS expr
-- On BAR reduce production value_expr -> MINUS expr
-- On AMPERAMPER reduce production value_expr -> MINUS expr
** Conflict on WHERE

State 814:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ error RPAREN COMMA BAR ]
simple_expr -> LPAREN expr_comma_list . opt_comma RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN expr_comma_list . BAR expr RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN expr_comma_list . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error shift to state 815
-- On COMMA shift to state 816
-- On BAR shift to state 817
-- On opt_comma shift to state 820
-- On RPAREN reduce production opt_comma ->

State 815:
simple_expr -> LPAREN expr_comma_list error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LPAREN expr_comma_list error
-- On WHERE reduce production simple_expr -> LPAREN expr_comma_list error
-- On UIDENT reduce production simple_expr -> LPAREN expr_comma_list error
-- On THEN reduce production simple_expr -> LPAREN expr_comma_list error
-- On STRING reduce production simple_expr -> LPAREN expr_comma_list error
-- On STAR reduce production simple_expr -> LPAREN expr_comma_list error
-- On SHARP reduce production simple_expr -> LPAREN expr_comma_list error
-- On SEMI reduce production simple_expr -> LPAREN expr_comma_list error
-- On RPAREN reduce production simple_expr -> LPAREN expr_comma_list error
-- On RBRACK reduce production simple_expr -> LPAREN expr_comma_list error
-- On RBRACE reduce production simple_expr -> LPAREN expr_comma_list error
-- On QUESTION reduce production simple_expr -> LPAREN expr_comma_list error
-- On PREFIXOP reduce production simple_expr -> LPAREN expr_comma_list error
-- On PLUS reduce production simple_expr -> LPAREN expr_comma_list error
-- On MINUS reduce production simple_expr -> LPAREN expr_comma_list error
-- On LVECTOR reduce production simple_expr -> LPAREN expr_comma_list error
-- On LPAREN reduce production simple_expr -> LPAREN expr_comma_list error
-- On LMATRIX reduce production simple_expr -> LPAREN expr_comma_list error
-- On LIDENT reduce production simple_expr -> LPAREN expr_comma_list error
-- On LBRACKBAR reduce production simple_expr -> LPAREN expr_comma_list error
-- On LBRACK reduce production simple_expr -> LPAREN expr_comma_list error
-- On LBRACE reduce production simple_expr -> LPAREN expr_comma_list error
-- On INT reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP5R reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP5L reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP4R reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP4L reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP3R reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP3L reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP2R reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP2L reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP1R reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP1L reduce production simple_expr -> LPAREN expr_comma_list error
-- On IMAGINARY reduce production simple_expr -> LPAREN expr_comma_list error
-- On FLOAT reduce production simple_expr -> LPAREN expr_comma_list error
-- On EQ reduce production simple_expr -> LPAREN expr_comma_list error
-- On END reduce production simple_expr -> LPAREN expr_comma_list error
-- On ELSE reduce production simple_expr -> LPAREN expr_comma_list error
-- On DOTDOT reduce production simple_expr -> LPAREN expr_comma_list error
-- On DOT reduce production simple_expr -> LPAREN expr_comma_list error
-- On DOLLAR reduce production simple_expr -> LPAREN expr_comma_list error
-- On COMMA reduce production simple_expr -> LPAREN expr_comma_list error
-- On COLONEQUAL reduce production simple_expr -> LPAREN expr_comma_list error
-- On COLONCOLON reduce production simple_expr -> LPAREN expr_comma_list error
-- On COLON reduce production simple_expr -> LPAREN expr_comma_list error
-- On CHAR reduce production simple_expr -> LPAREN expr_comma_list error
-- On BEGIN reduce production simple_expr -> LPAREN expr_comma_list error
-- On BARRBRACK reduce production simple_expr -> LPAREN expr_comma_list error
-- On BARCOLON reduce production simple_expr -> LPAREN expr_comma_list error
-- On BARBAR reduce production simple_expr -> LPAREN expr_comma_list error
-- On BAR reduce production simple_expr -> LPAREN expr_comma_list error
-- On AMPERAMPER reduce production simple_expr -> LPAREN expr_comma_list error

State 816:
expr_comma_list -> expr_comma_list COMMA . expr_comma_list_element [ error RPAREN COMMA BAR ]
opt_comma -> COMMA . [ RPAREN ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 56
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 84
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr_comma_list_element shift to state 752
-- On expr shift to state 753
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On colonized_symbol shift to state 754
-- On RPAREN reduce production opt_comma -> COMMA

State 817:
simple_expr -> LPAREN expr_comma_list BAR . expr RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 818
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 818:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
simple_expr -> LPAREN expr_comma_list BAR expr . RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On RPAREN shift to state 819
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 819:
simple_expr -> LPAREN expr_comma_list BAR expr RPAREN . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On WHERE reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On UIDENT reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On THEN reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On STRING reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On STAR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On SHARP reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On SEMI reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On RPAREN reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On RBRACK reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On RBRACE reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On QUESTION reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On PREFIXOP reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On PLUS reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On MINUS reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LVECTOR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LPAREN reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LMATRIX reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LIDENT reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LBRACKBAR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LBRACK reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LBRACE reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INT reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP5R reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP5L reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP4R reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP4L reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP3R reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP3L reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP2R reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP2L reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP1R reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP1L reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On IMAGINARY reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On FLOAT reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On EQ reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On END reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On ELSE reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On DOTDOT reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On DOT reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On DOLLAR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On COMMA reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On COLONEQUAL reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On COLONCOLON reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On COLON reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On CHAR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On BEGIN reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On BARRBRACK reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On BARCOLON reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On BARBAR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On BAR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On AMPERAMPER reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN

State 820:
simple_expr -> LPAREN expr_comma_list opt_comma . RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On RPAREN shift to state 821

State 821:
simple_expr -> LPAREN expr_comma_list opt_comma RPAREN . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On WHERE reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On UIDENT reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On THEN reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On STRING reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On STAR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On SHARP reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On SEMI reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On RPAREN reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On RBRACK reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On RBRACE reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On QUESTION reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On PREFIXOP reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On PLUS reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On MINUS reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LVECTOR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LPAREN reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LMATRIX reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LIDENT reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LBRACKBAR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LBRACK reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LBRACE reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INT reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP5R reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP5L reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP4R reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP4L reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP3R reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP3L reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP2R reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP2L reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP1R reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP1L reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On IMAGINARY reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On FLOAT reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On EQ reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On END reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On ELSE reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On DOTDOT reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On DOT reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On DOLLAR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On COMMA reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On COLONEQUAL reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On COLONCOLON reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On COLON reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On CHAR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On BEGIN reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On BARRBRACK reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On BARCOLON reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On BARBAR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On BAR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On AMPERAMPER reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN

State 822:
expr_comma_list_element -> expr . [ error RPAREN COMMA BAR ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN expr . SEMI basic_seq_expr RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN expr . SEMI basic_seq_expr error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On SEMI shift to state 823
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production expr_comma_list_element -> expr
-- On RPAREN reduce production expr_comma_list_element -> expr
-- On COMMA reduce production expr_comma_list_element -> expr
-- On BAR reduce production expr_comma_list_element -> expr

State 823:
simple_expr -> LPAREN expr SEMI . basic_seq_expr RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN expr SEMI . basic_seq_expr error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 824

State 824:
basic_seq_expr -> basic_seq_expr . SEMI expr [ error SEMI RPAREN ]
basic_seq_expr -> basic_seq_expr . SEMI [ error SEMI RPAREN ]
simple_expr -> LPAREN expr SEMI basic_seq_expr . RPAREN [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN expr SEMI basic_seq_expr . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error shift to state 825
-- On SEMI shift to state 630
-- On RPAREN shift to state 826

State 825:
simple_expr -> LPAREN expr SEMI basic_seq_expr error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On WHERE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On UIDENT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On THEN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On STRING reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On STAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On SHARP reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On SEMI reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On RPAREN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On RBRACK reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On RBRACE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On QUESTION reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On PREFIXOP reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On PLUS reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On MINUS reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LVECTOR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LPAREN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LMATRIX reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LIDENT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LBRACKBAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LBRACK reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LBRACE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP5R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP5L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP4R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP4L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP3R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP3L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP2R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP2L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP1R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP1L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On IMAGINARY reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On FLOAT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On EQ reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On END reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On ELSE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On DOTDOT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On DOT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On DOLLAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On COMMA reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On COLONEQUAL reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On COLONCOLON reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On COLON reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On CHAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On BEGIN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On BARRBRACK reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On BARCOLON reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On BARBAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On BAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On AMPERAMPER reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error

State 826:
simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On WHERE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On UIDENT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On THEN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On STRING reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On STAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On SHARP reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On SEMI reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On RPAREN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On RBRACK reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On RBRACE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On QUESTION reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On PREFIXOP reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On PLUS reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On MINUS reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LVECTOR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LPAREN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LMATRIX reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LIDENT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LBRACKBAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LBRACK reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LBRACE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP5R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP5L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP4R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP4L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP3R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP3L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP2R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP2L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP1R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP1L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On IMAGINARY reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On FLOAT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On EQ reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On END reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On ELSE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On DOTDOT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On DOT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On DOLLAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On COMMA reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On COLONEQUAL reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On COLONCOLON reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On COLON reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On CHAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On BEGIN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On BARRBRACK reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On BARCOLON reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On BARBAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On BAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On AMPERAMPER reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN

State 827:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ error COMMA BARRBRACK ]
simple_expr -> LBRACKBAR expr_comma_list . opt_comma BARRBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACKBAR expr_comma_list . opt_comma error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On COMMA shift to state 751
-- On opt_comma shift to state 828
-- On error reduce production opt_comma ->
-- On BARRBRACK reduce production opt_comma ->

State 828:
simple_expr -> LBRACKBAR expr_comma_list opt_comma . BARRBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LBRACKBAR expr_comma_list opt_comma . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On error shift to state 829
-- On BARRBRACK shift to state 830

State 829:
simple_expr -> LBRACKBAR expr_comma_list opt_comma error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On WHILE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On WHERE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On UIDENT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On TYPE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On TRY reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On TO reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On THEN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On STRING reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On STAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On SHARP reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On SEMISEMI reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On SEMI reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On RPAREN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On RAISE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On QUESTION reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On PREFIXOP reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On PLUS reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On OPEN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On MODULE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On MINUSGREATER reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On MINUS reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On MATCH reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LVECTOR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LPAREN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LMATRIX reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LIDENT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LET reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LBRACKBAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LBRACK reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LBRACE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On LAZY reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP5R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP5L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP4R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP4L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP3R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP3L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP2R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP2L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP1R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On INFIXOP1L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On IN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On IMAGINARY reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On IF reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On FUNCTION reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On FUN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On FOR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On FLOAT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On EXCEPTION reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On EQ reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On EOF reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On ELSE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On DOWNTO reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On DOT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On DONE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On DOLLAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On DO reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On COMMA reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On COLONEQUAL reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On COLONCOLON reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On COLON reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On CHAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On CASE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On BELOW reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On BEGIN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On BARBAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On BAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On ASSERT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On AND reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On AMPERAMPER reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error
-- On ABOVE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma error

State 830:
simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On WHILE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On WHERE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On UIDENT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On TYPE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On TRY reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On TO reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On THEN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On STRING reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On STAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On SHARP reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On SEMISEMI reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On SEMI reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On RPAREN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On RAISE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On QUESTION reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On PREFIXOP reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On PLUS reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On OPEN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On MODULE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On MINUSGREATER reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On MINUS reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On MATCH reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LVECTOR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LPAREN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LMATRIX reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LIDENT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LET reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LBRACKBAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LBRACK reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LBRACE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On LAZY reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP5R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP5L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP4R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP4L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP3R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP3L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP2R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP2L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP1R reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On INFIXOP1L reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On IN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On IMAGINARY reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On IF reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On FUNCTION reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On FUN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On FOR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On FLOAT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On EXCEPTION reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On EQ reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On EOF reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On ELSE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On DOWNTO reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On DOT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On DONE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On DOLLAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On DO reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On COMMA reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On COLONEQUAL reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On COLONCOLON reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On COLON reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On CHAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On CASE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On BELOW reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On BEGIN reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On BARBAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On BAR reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On ASSERT reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On AND reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On AMPERAMPER reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK
-- On ABOVE reduce production simple_expr -> LBRACKBAR expr_comma_list opt_comma BARRBRACK

State 831:
value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On WHILE reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On WHERE reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On UIDENT reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On TYPE reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On TRY reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On TO reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On THEN reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On STRING reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On STAR reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On SHARP reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On SEMISEMI reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On SEMI reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On RPAREN reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On RAISE reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On QUESTION reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On PREFIXOP reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On PLUS reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On OPEN reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On MODULE reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On MINUSGREATER reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On MINUS reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On MATCH reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On LVECTOR reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On LPAREN reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On LMATRIX reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On LIDENT reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On LET reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On LBRACKBAR reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On LBRACK reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On LBRACE reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On LAZY reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INT reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP5R reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP5L reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP4R reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP4L reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP3R reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP3L reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP2R reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP2L reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP1R reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On INFIXOP1L reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On IN reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On IMAGINARY reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On IF reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On FUNCTION reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On FUN reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On FOR reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On FLOAT reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On EXCEPTION reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On EQ reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On EOF reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On ELSE reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On DOWNTO reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On DONE reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On DOLLAR reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On DO reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On COMMA reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On COLONEQUAL reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On COLONCOLON reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On COLON reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On CHAR reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On CASE reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On BELOW reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On BEGIN reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On BARBAR reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On BAR reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On ASSERT reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On AND reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On AMPERAMPER reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr
-- On ABOVE reduce production value_expr -> LET MODULE mod_ident EQ mod_ident IN seq_expr

State 832:
value_expr -> LET rec_flag . let_bindings IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 786
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 792
-- On pattern shift to state 399
-- On let_bindings shift to state 833
-- On let_binding shift to state 801
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 833:
let_bindings -> let_bindings . AND let_binding [ IN AND ]
value_expr -> LET rec_flag let_bindings . IN seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On IN shift to state 834
-- On AND shift to state 799

State 834:
value_expr -> LET rec_flag let_bindings IN . seq_expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 835
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 835:
value_expr -> LET rec_flag let_bindings IN seq_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On WHILE reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On WHERE reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On UIDENT reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On TYPE reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On TRY reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On TO reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On THEN reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On STRING reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On STAR reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On SHARP reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On SEMISEMI reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On SEMI reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On RPAREN reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On RAISE reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On QUESTION reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On PREFIXOP reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On PLUS reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On OPEN reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On MODULE reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On MINUSGREATER reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On MINUS reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On MATCH reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On LVECTOR reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On LPAREN reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On LMATRIX reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On LIDENT reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On LET reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On LBRACKBAR reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On LBRACK reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On LBRACE reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On LAZY reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INT reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP5R reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP5L reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP4R reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP4L reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP3R reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP3L reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP2R reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP2L reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP1R reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On INFIXOP1L reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On IN reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On IMAGINARY reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On IF reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On FUNCTION reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On FUN reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On FOR reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On FLOAT reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On EXCEPTION reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On EQ reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On EOF reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On ELSE reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On DOWNTO reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On DONE reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On DOLLAR reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On DO reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On COMMA reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On COLONEQUAL reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On COLONCOLON reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On COLON reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On CHAR reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On CASE reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On BELOW reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On BEGIN reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On BARBAR reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On BAR reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On ASSERT reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On AND reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On AMPERAMPER reduce production value_expr -> LET rec_flag let_bindings IN seq_expr
-- On ABOVE reduce production value_expr -> LET rec_flag let_bindings IN seq_expr

State 836:
expr_comma_list -> expr_comma_list_element . [ WITH COMMA ]
-- On WITH reduce production expr_comma_list -> expr_comma_list_element
-- On COMMA reduce production expr_comma_list -> expr_comma_list_element

State 837:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ WITH COMMA ]
value_expr -> MATCH expr_comma_list . opt_comma WITH opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On COMMA shift to state 838
-- On opt_comma shift to state 844
-- On WITH reduce production opt_comma ->

State 838:
expr_comma_list -> expr_comma_list COMMA . expr_comma_list_element [ WITH COMMA ]
opt_comma -> COMMA . [ WITH ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 43
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 69
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr_comma_list_element shift to state 839
-- On expr shift to state 840
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On colonized_symbol shift to state 841
-- On WITH reduce production opt_comma -> COMMA

State 839:
expr_comma_list -> expr_comma_list COMMA expr_comma_list_element . [ WITH COMMA ]
-- On WITH reduce production expr_comma_list -> expr_comma_list COMMA expr_comma_list_element
-- On COMMA reduce production expr_comma_list -> expr_comma_list COMMA expr_comma_list_element

State 840:
expr_comma_list_element -> expr . [ WITH COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production expr_comma_list_element -> expr
-- On COMMA reduce production expr_comma_list_element -> expr

State 841:
expr_comma_list_element -> colonized_symbol . COLON expr [ WITH COMMA ]
-- On COLON shift to state 842

State 842:
expr_comma_list_element -> colonized_symbol COLON . expr [ WITH COMMA ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 843
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 843:
expr_comma_list_element -> colonized_symbol COLON expr . [ WITH COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production expr_comma_list_element -> colonized_symbol COLON expr
-- On COMMA reduce production expr_comma_list_element -> colonized_symbol COLON expr

State 844:
value_expr -> MATCH expr_comma_list opt_comma . WITH opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WITH shift to state 845

State 845:
value_expr -> MATCH expr_comma_list opt_comma WITH . opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On BAR shift to state 125
-- On opt_bar shift to state 846
-- On WEAKARRAYPAT reduce production opt_bar ->
-- On VECTORPAT reduce production opt_bar ->
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TUPLEPAT reduce production opt_bar ->
-- On SYMBOLPAT reduce production opt_bar ->
-- On STRINGPAT reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On STACKPAT reduce production opt_bar ->
-- On SHARP reduce production opt_bar ->
-- On RECORDPAT reduce production opt_bar ->
-- On REALPAT reduce production opt_bar ->
-- On QUEUEPAT reduce production opt_bar ->
-- On OUT_CHANNELPAT reduce production opt_bar ->
-- On NUMBERPAT reduce production opt_bar ->
-- On MINUS reduce production opt_bar ->
-- On LVECTOR reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LISTPAT reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LBRACKBAR reduce production opt_bar ->
-- On LBRACK reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On IN_CHANNELPAT reduce production opt_bar ->
-- On INTPAT reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On IMAGINARY reduce production opt_bar ->
-- On HASHTABLEPAT reduce production opt_bar ->
-- On FLOATPAT reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On FARRAYPAT reduce production opt_bar ->
-- On DOLLAR reduce production opt_bar ->
-- On DIR_HANDLEPAT reduce production opt_bar ->
-- On COMPLEXPAT reduce production opt_bar ->
-- On CHARPAT reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->
-- On CARRAYPAT reduce production opt_bar ->
-- On BOXPAT reduce production opt_bar ->
-- On ARRAYPAT reduce production opt_bar ->
-- On AMPERREST reduce production opt_bar ->

State 846:
value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar . match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 710
-- On pattern shift to state 399
-- On match_cases shift to state 847
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 847:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On BAR shift to state 714
-- On error reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On WHERE reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On THEN reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On STAR reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On SEMI reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On RPAREN reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On RBRACK reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On RBRACE reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On QUESTION reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On PLUS reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On MINUS reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP5R reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP5L reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP4R reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP4L reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP3R reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP3L reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP2R reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP2L reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP1R reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP1L reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On EQ reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On END reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On ELSE reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On DOTDOT reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On COMMA reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On COLONEQUAL reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On COLONCOLON reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On COLON reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On BARRBRACK reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On BARCOLON reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On BARBAR reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On AMPERAMPER reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases

State 848:
expr_comma_list_element -> expr . [ WITH COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> MATCH expr . WITH opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WITH shift to state 849
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On COMMA reduce production expr_comma_list_element -> expr
** Conflict on WITH

State 849:
value_expr -> MATCH expr WITH . opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On BAR shift to state 125
-- On opt_bar shift to state 850
-- On WEAKARRAYPAT reduce production opt_bar ->
-- On VECTORPAT reduce production opt_bar ->
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TUPLEPAT reduce production opt_bar ->
-- On SYMBOLPAT reduce production opt_bar ->
-- On STRINGPAT reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On STACKPAT reduce production opt_bar ->
-- On SHARP reduce production opt_bar ->
-- On RECORDPAT reduce production opt_bar ->
-- On REALPAT reduce production opt_bar ->
-- On QUEUEPAT reduce production opt_bar ->
-- On OUT_CHANNELPAT reduce production opt_bar ->
-- On NUMBERPAT reduce production opt_bar ->
-- On MINUS reduce production opt_bar ->
-- On LVECTOR reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LISTPAT reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LBRACKBAR reduce production opt_bar ->
-- On LBRACK reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On IN_CHANNELPAT reduce production opt_bar ->
-- On INTPAT reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On IMAGINARY reduce production opt_bar ->
-- On HASHTABLEPAT reduce production opt_bar ->
-- On FLOATPAT reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On FARRAYPAT reduce production opt_bar ->
-- On DOLLAR reduce production opt_bar ->
-- On DIR_HANDLEPAT reduce production opt_bar ->
-- On COMPLEXPAT reduce production opt_bar ->
-- On CHARPAT reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->
-- On CARRAYPAT reduce production opt_bar ->
-- On BOXPAT reduce production opt_bar ->
-- On ARRAYPAT reduce production opt_bar ->
-- On AMPERREST reduce production opt_bar ->

State 850:
value_expr -> MATCH expr WITH opt_bar . match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 710
-- On pattern shift to state 399
-- On match_cases shift to state 851
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 851:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> MATCH expr WITH opt_bar match_cases . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On BAR shift to state 714
-- On error reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On WHERE reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On THEN reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On STAR reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On SEMI reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On RPAREN reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On RBRACK reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On RBRACE reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On QUESTION reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On PLUS reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On MINUS reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP5R reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP5L reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP4R reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP4L reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP3R reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP3L reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP2R reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP2L reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP1R reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP1L reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On EQ reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On END reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On ELSE reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On DOTDOT reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On COMMA reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On COLONEQUAL reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On COLONCOLON reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On COLON reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On BARRBRACK reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On BARCOLON reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On BARBAR reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On AMPERAMPER reduce production value_expr -> MATCH expr WITH opt_bar match_cases

State 852:
simple_expr -> LVECTOR list_expr . RBRACK [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LVECTOR list_expr . error [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error shift to state 853
-- On RBRACK shift to state 854

State 853:
simple_expr -> LVECTOR list_expr error . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LVECTOR list_expr error
-- On WHERE reduce production simple_expr -> LVECTOR list_expr error
-- On UIDENT reduce production simple_expr -> LVECTOR list_expr error
-- On THEN reduce production simple_expr -> LVECTOR list_expr error
-- On STRING reduce production simple_expr -> LVECTOR list_expr error
-- On STAR reduce production simple_expr -> LVECTOR list_expr error
-- On SHARP reduce production simple_expr -> LVECTOR list_expr error
-- On SEMI reduce production simple_expr -> LVECTOR list_expr error
-- On RPAREN reduce production simple_expr -> LVECTOR list_expr error
-- On RBRACK reduce production simple_expr -> LVECTOR list_expr error
-- On RBRACE reduce production simple_expr -> LVECTOR list_expr error
-- On QUESTION reduce production simple_expr -> LVECTOR list_expr error
-- On PREFIXOP reduce production simple_expr -> LVECTOR list_expr error
-- On PLUS reduce production simple_expr -> LVECTOR list_expr error
-- On MINUS reduce production simple_expr -> LVECTOR list_expr error
-- On LVECTOR reduce production simple_expr -> LVECTOR list_expr error
-- On LPAREN reduce production simple_expr -> LVECTOR list_expr error
-- On LMATRIX reduce production simple_expr -> LVECTOR list_expr error
-- On LIDENT reduce production simple_expr -> LVECTOR list_expr error
-- On LBRACKBAR reduce production simple_expr -> LVECTOR list_expr error
-- On LBRACK reduce production simple_expr -> LVECTOR list_expr error
-- On LBRACE reduce production simple_expr -> LVECTOR list_expr error
-- On INT reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP5R reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP5L reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP4R reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP4L reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP3R reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP3L reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP2R reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP2L reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP1R reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP1L reduce production simple_expr -> LVECTOR list_expr error
-- On IMAGINARY reduce production simple_expr -> LVECTOR list_expr error
-- On FLOAT reduce production simple_expr -> LVECTOR list_expr error
-- On EQ reduce production simple_expr -> LVECTOR list_expr error
-- On END reduce production simple_expr -> LVECTOR list_expr error
-- On ELSE reduce production simple_expr -> LVECTOR list_expr error
-- On DOTDOT reduce production simple_expr -> LVECTOR list_expr error
-- On DOT reduce production simple_expr -> LVECTOR list_expr error
-- On DOLLAR reduce production simple_expr -> LVECTOR list_expr error
-- On COMMA reduce production simple_expr -> LVECTOR list_expr error
-- On COLONEQUAL reduce production simple_expr -> LVECTOR list_expr error
-- On COLONCOLON reduce production simple_expr -> LVECTOR list_expr error
-- On COLON reduce production simple_expr -> LVECTOR list_expr error
-- On CHAR reduce production simple_expr -> LVECTOR list_expr error
-- On BEGIN reduce production simple_expr -> LVECTOR list_expr error
-- On BARRBRACK reduce production simple_expr -> LVECTOR list_expr error
-- On BARCOLON reduce production simple_expr -> LVECTOR list_expr error
-- On BARBAR reduce production simple_expr -> LVECTOR list_expr error
-- On BAR reduce production simple_expr -> LVECTOR list_expr error
-- On AMPERAMPER reduce production simple_expr -> LVECTOR list_expr error

State 854:
simple_expr -> LVECTOR list_expr RBRACK . [ error WHERE UIDENT THEN STRING STAR SHARP SEMI RPAREN RBRACK RBRACE QUESTION PREFIXOP PLUS MINUS LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY FLOAT EQ END ELSE DOTDOT DOT DOLLAR COMMA COLONEQUAL COLONCOLON COLON CHAR BEGIN BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On WHERE reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On UIDENT reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On THEN reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On STRING reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On STAR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On SHARP reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On SEMI reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On RPAREN reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On RBRACK reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On RBRACE reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On QUESTION reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On PREFIXOP reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On PLUS reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On MINUS reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LVECTOR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LPAREN reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LMATRIX reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LIDENT reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LBRACKBAR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LBRACK reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LBRACE reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INT reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP5R reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP5L reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP4R reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP4L reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP3R reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP3L reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP2R reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP2L reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP1R reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP1L reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On IMAGINARY reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On FLOAT reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On EQ reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On END reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On ELSE reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On DOTDOT reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On DOT reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On DOLLAR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On COMMA reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On COLONEQUAL reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On COLONCOLON reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On COLON reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On CHAR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On BEGIN reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On BARRBRACK reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On BARCOLON reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On BARBAR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On BAR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On AMPERAMPER reduce production simple_expr -> LVECTOR list_expr RBRACK

State 855:
no_value_expr -> RAISE expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production no_value_expr -> RAISE expr
-- On THEN reduce production no_value_expr -> RAISE expr
-- On SEMI reduce production no_value_expr -> RAISE expr
-- On RPAREN reduce production no_value_expr -> RAISE expr
-- On RBRACK reduce production no_value_expr -> RAISE expr
-- On RBRACE reduce production no_value_expr -> RAISE expr
-- On END reduce production no_value_expr -> RAISE expr
-- On ELSE reduce production no_value_expr -> RAISE expr
-- On DOTDOT reduce production no_value_expr -> RAISE expr
-- On COMMA reduce production no_value_expr -> RAISE expr
-- On COLON reduce production no_value_expr -> RAISE expr
-- On BARRBRACK reduce production no_value_expr -> RAISE expr
-- On BARCOLON reduce production no_value_expr -> RAISE expr
-- On BAR reduce production no_value_expr -> RAISE expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 856:
matrix_expr -> matrix_expr . SEMI expr_comma_list [ error SEMI RBRACK ]
simple_expr -> LMATRIX matrix_expr . RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LMATRIX matrix_expr . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On error shift to state 857
-- On SEMI shift to state 804
-- On RBRACK shift to state 858

State 857:
simple_expr -> LMATRIX matrix_expr error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LMATRIX matrix_expr error
-- On WHILE reduce production simple_expr -> LMATRIX matrix_expr error
-- On WHERE reduce production simple_expr -> LMATRIX matrix_expr error
-- On UIDENT reduce production simple_expr -> LMATRIX matrix_expr error
-- On TYPE reduce production simple_expr -> LMATRIX matrix_expr error
-- On TRY reduce production simple_expr -> LMATRIX matrix_expr error
-- On TO reduce production simple_expr -> LMATRIX matrix_expr error
-- On THEN reduce production simple_expr -> LMATRIX matrix_expr error
-- On STRING reduce production simple_expr -> LMATRIX matrix_expr error
-- On STAR reduce production simple_expr -> LMATRIX matrix_expr error
-- On SHARP reduce production simple_expr -> LMATRIX matrix_expr error
-- On SEMISEMI reduce production simple_expr -> LMATRIX matrix_expr error
-- On SEMI reduce production simple_expr -> LMATRIX matrix_expr error
-- On RPAREN reduce production simple_expr -> LMATRIX matrix_expr error
-- On RAISE reduce production simple_expr -> LMATRIX matrix_expr error
-- On QUESTION reduce production simple_expr -> LMATRIX matrix_expr error
-- On PREFIXOP reduce production simple_expr -> LMATRIX matrix_expr error
-- On PLUS reduce production simple_expr -> LMATRIX matrix_expr error
-- On OPEN reduce production simple_expr -> LMATRIX matrix_expr error
-- On MODULE reduce production simple_expr -> LMATRIX matrix_expr error
-- On MINUSGREATER reduce production simple_expr -> LMATRIX matrix_expr error
-- On MINUS reduce production simple_expr -> LMATRIX matrix_expr error
-- On MATCH reduce production simple_expr -> LMATRIX matrix_expr error
-- On LVECTOR reduce production simple_expr -> LMATRIX matrix_expr error
-- On LPAREN reduce production simple_expr -> LMATRIX matrix_expr error
-- On LMATRIX reduce production simple_expr -> LMATRIX matrix_expr error
-- On LIDENT reduce production simple_expr -> LMATRIX matrix_expr error
-- On LET reduce production simple_expr -> LMATRIX matrix_expr error
-- On LBRACKBAR reduce production simple_expr -> LMATRIX matrix_expr error
-- On LBRACK reduce production simple_expr -> LMATRIX matrix_expr error
-- On LBRACE reduce production simple_expr -> LMATRIX matrix_expr error
-- On LAZY reduce production simple_expr -> LMATRIX matrix_expr error
-- On INT reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP5R reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP5L reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP4R reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP4L reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP3R reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP3L reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP2R reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP2L reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP1R reduce production simple_expr -> LMATRIX matrix_expr error
-- On INFIXOP1L reduce production simple_expr -> LMATRIX matrix_expr error
-- On IN reduce production simple_expr -> LMATRIX matrix_expr error
-- On IMAGINARY reduce production simple_expr -> LMATRIX matrix_expr error
-- On IF reduce production simple_expr -> LMATRIX matrix_expr error
-- On FUNCTION reduce production simple_expr -> LMATRIX matrix_expr error
-- On FUN reduce production simple_expr -> LMATRIX matrix_expr error
-- On FOR reduce production simple_expr -> LMATRIX matrix_expr error
-- On FLOAT reduce production simple_expr -> LMATRIX matrix_expr error
-- On EXCEPTION reduce production simple_expr -> LMATRIX matrix_expr error
-- On EQ reduce production simple_expr -> LMATRIX matrix_expr error
-- On EOF reduce production simple_expr -> LMATRIX matrix_expr error
-- On ELSE reduce production simple_expr -> LMATRIX matrix_expr error
-- On DOWNTO reduce production simple_expr -> LMATRIX matrix_expr error
-- On DOT reduce production simple_expr -> LMATRIX matrix_expr error
-- On DONE reduce production simple_expr -> LMATRIX matrix_expr error
-- On DOLLAR reduce production simple_expr -> LMATRIX matrix_expr error
-- On DO reduce production simple_expr -> LMATRIX matrix_expr error
-- On COMMA reduce production simple_expr -> LMATRIX matrix_expr error
-- On COLONEQUAL reduce production simple_expr -> LMATRIX matrix_expr error
-- On COLONCOLON reduce production simple_expr -> LMATRIX matrix_expr error
-- On COLON reduce production simple_expr -> LMATRIX matrix_expr error
-- On CHAR reduce production simple_expr -> LMATRIX matrix_expr error
-- On CASE reduce production simple_expr -> LMATRIX matrix_expr error
-- On BELOW reduce production simple_expr -> LMATRIX matrix_expr error
-- On BEGIN reduce production simple_expr -> LMATRIX matrix_expr error
-- On BARBAR reduce production simple_expr -> LMATRIX matrix_expr error
-- On BAR reduce production simple_expr -> LMATRIX matrix_expr error
-- On ASSERT reduce production simple_expr -> LMATRIX matrix_expr error
-- On AND reduce production simple_expr -> LMATRIX matrix_expr error
-- On AMPERAMPER reduce production simple_expr -> LMATRIX matrix_expr error
-- On ABOVE reduce production simple_expr -> LMATRIX matrix_expr error

State 858:
simple_expr -> LMATRIX matrix_expr RBRACK . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On WHILE reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On WHERE reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On UIDENT reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On TYPE reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On TRY reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On TO reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On THEN reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On STRING reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On STAR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On SHARP reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On SEMISEMI reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On SEMI reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On RPAREN reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On RAISE reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On QUESTION reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On PREFIXOP reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On PLUS reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On OPEN reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On MODULE reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On MINUSGREATER reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On MINUS reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On MATCH reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LVECTOR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LPAREN reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LMATRIX reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LIDENT reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LET reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LBRACKBAR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LBRACK reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LBRACE reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On LAZY reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INT reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP5R reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP5L reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP4R reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP4L reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP3R reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP3L reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP2R reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP2L reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP1R reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On INFIXOP1L reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On IN reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On IMAGINARY reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On IF reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On FUNCTION reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On FUN reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On FOR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On FLOAT reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On EXCEPTION reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On EQ reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On EOF reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On ELSE reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On DOWNTO reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On DOT reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On DONE reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On DOLLAR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On DO reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On COMMA reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On COLONEQUAL reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On COLONCOLON reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On COLON reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On CHAR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On CASE reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On BELOW reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On BEGIN reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On BARBAR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On BAR reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On ASSERT reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On AND reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On AMPERAMPER reduce production simple_expr -> LMATRIX matrix_expr RBRACK
-- On ABOVE reduce production simple_expr -> LMATRIX matrix_expr RBRACK

State 859:
value_expr -> TRY seq_expr . WITH opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> TRY seq_expr . WITH error [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WITH shift to state 860

State 860:
value_expr -> TRY seq_expr WITH . opt_bar match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> TRY seq_expr WITH . error [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error shift to state 861
-- On BAR shift to state 125
-- On opt_bar shift to state 862
-- On WEAKARRAYPAT reduce production opt_bar ->
-- On VECTORPAT reduce production opt_bar ->
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TUPLEPAT reduce production opt_bar ->
-- On SYMBOLPAT reduce production opt_bar ->
-- On STRINGPAT reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On STACKPAT reduce production opt_bar ->
-- On SHARP reduce production opt_bar ->
-- On RECORDPAT reduce production opt_bar ->
-- On REALPAT reduce production opt_bar ->
-- On QUEUEPAT reduce production opt_bar ->
-- On OUT_CHANNELPAT reduce production opt_bar ->
-- On NUMBERPAT reduce production opt_bar ->
-- On MINUS reduce production opt_bar ->
-- On LVECTOR reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LISTPAT reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LBRACKBAR reduce production opt_bar ->
-- On LBRACK reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On IN_CHANNELPAT reduce production opt_bar ->
-- On INTPAT reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On IMAGINARY reduce production opt_bar ->
-- On HASHTABLEPAT reduce production opt_bar ->
-- On FLOATPAT reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On FARRAYPAT reduce production opt_bar ->
-- On DOLLAR reduce production opt_bar ->
-- On DIR_HANDLEPAT reduce production opt_bar ->
-- On COMPLEXPAT reduce production opt_bar ->
-- On CHARPAT reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->
-- On CARRAYPAT reduce production opt_bar ->
-- On BOXPAT reduce production opt_bar ->
-- On ARRAYPAT reduce production opt_bar ->
-- On AMPERREST reduce production opt_bar ->

State 861:
value_expr -> TRY seq_expr WITH error . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production value_expr -> TRY seq_expr WITH error
-- On WHERE reduce production value_expr -> TRY seq_expr WITH error
-- On THEN reduce production value_expr -> TRY seq_expr WITH error
-- On STAR reduce production value_expr -> TRY seq_expr WITH error
-- On SEMI reduce production value_expr -> TRY seq_expr WITH error
-- On RPAREN reduce production value_expr -> TRY seq_expr WITH error
-- On RBRACK reduce production value_expr -> TRY seq_expr WITH error
-- On RBRACE reduce production value_expr -> TRY seq_expr WITH error
-- On QUESTION reduce production value_expr -> TRY seq_expr WITH error
-- On PLUS reduce production value_expr -> TRY seq_expr WITH error
-- On MINUS reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP5R reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP5L reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP4R reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP4L reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP3R reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP3L reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP2R reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP2L reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP1R reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP1L reduce production value_expr -> TRY seq_expr WITH error
-- On EQ reduce production value_expr -> TRY seq_expr WITH error
-- On END reduce production value_expr -> TRY seq_expr WITH error
-- On ELSE reduce production value_expr -> TRY seq_expr WITH error
-- On DOTDOT reduce production value_expr -> TRY seq_expr WITH error
-- On COMMA reduce production value_expr -> TRY seq_expr WITH error
-- On COLONEQUAL reduce production value_expr -> TRY seq_expr WITH error
-- On COLONCOLON reduce production value_expr -> TRY seq_expr WITH error
-- On COLON reduce production value_expr -> TRY seq_expr WITH error
-- On BARRBRACK reduce production value_expr -> TRY seq_expr WITH error
-- On BARCOLON reduce production value_expr -> TRY seq_expr WITH error
-- On BARBAR reduce production value_expr -> TRY seq_expr WITH error
-- On BAR reduce production value_expr -> TRY seq_expr WITH error
-- On AMPERAMPER reduce production value_expr -> TRY seq_expr WITH error

State 862:
value_expr -> TRY seq_expr WITH opt_bar . match_cases [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 710
-- On pattern shift to state 399
-- On match_cases shift to state 863
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 863:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> TRY seq_expr WITH opt_bar match_cases . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On BAR shift to state 714
-- On error reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On WHERE reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On THEN reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On STAR reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On SEMI reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On RPAREN reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On RBRACK reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On RBRACE reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On QUESTION reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On PLUS reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On MINUS reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP5R reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP5L reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP4R reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP4L reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP3R reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP3L reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP2R reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP2L reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP1R reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP1L reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On EQ reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On END reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On ELSE reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On DOTDOT reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On COMMA reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On COLONEQUAL reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On COLONCOLON reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On COLON reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On BARRBRACK reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On BARCOLON reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On BARBAR reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On AMPERAMPER reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases

State 864:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> WHERE expr . THEN expr ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> WHERE expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On THEN shift to state 865
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production value_expr -> WHERE expr
-- On SEMI reduce production value_expr -> WHERE expr
-- On RPAREN reduce production value_expr -> WHERE expr
-- On RBRACK reduce production value_expr -> WHERE expr
-- On RBRACE reduce production value_expr -> WHERE expr
-- On END reduce production value_expr -> WHERE expr
-- On ELSE reduce production value_expr -> WHERE expr
-- On DOTDOT reduce production value_expr -> WHERE expr
-- On COMMA reduce production value_expr -> WHERE expr
-- On COLON reduce production value_expr -> WHERE expr
-- On BARRBRACK reduce production value_expr -> WHERE expr
-- On BARCOLON reduce production value_expr -> WHERE expr
-- On BAR reduce production value_expr -> WHERE expr
** Conflict on WHERE THEN

State 865:
value_expr -> WHERE expr THEN . expr ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 866
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 866:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> WHERE expr THEN expr . ELSE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On ELSE shift to state 867
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 867:
value_expr -> WHERE expr THEN expr ELSE . expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 868
-- On constr_longident shift to state 513
-- On constant shift to state 516

State 868:
no_value_expr -> expr . COLONEQUAL expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> WHERE expr THEN expr ELSE expr . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On THEN reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On SEMI reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On RPAREN reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On RBRACK reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On RBRACE reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On END reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On ELSE reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On DOTDOT reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On COMMA reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On COLON reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On BARRBRACK reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On BARCOLON reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On BAR reduce production value_expr -> WHERE expr THEN expr ELSE expr
** Conflict on WHERE

State 869:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ error RPAREN COMMA BAR ]
simple_expr -> LPAREN expr_comma_list . opt_comma RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN expr_comma_list . BAR expr RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN expr_comma_list . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On error shift to state 870
-- On COMMA shift to state 816
-- On BAR shift to state 871
-- On opt_comma shift to state 874
-- On RPAREN reduce production opt_comma ->

State 870:
simple_expr -> LPAREN expr_comma_list error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LPAREN expr_comma_list error
-- On WHILE reduce production simple_expr -> LPAREN expr_comma_list error
-- On WHERE reduce production simple_expr -> LPAREN expr_comma_list error
-- On UIDENT reduce production simple_expr -> LPAREN expr_comma_list error
-- On TYPE reduce production simple_expr -> LPAREN expr_comma_list error
-- On TRY reduce production simple_expr -> LPAREN expr_comma_list error
-- On TO reduce production simple_expr -> LPAREN expr_comma_list error
-- On THEN reduce production simple_expr -> LPAREN expr_comma_list error
-- On STRING reduce production simple_expr -> LPAREN expr_comma_list error
-- On STAR reduce production simple_expr -> LPAREN expr_comma_list error
-- On SHARP reduce production simple_expr -> LPAREN expr_comma_list error
-- On SEMISEMI reduce production simple_expr -> LPAREN expr_comma_list error
-- On SEMI reduce production simple_expr -> LPAREN expr_comma_list error
-- On RPAREN reduce production simple_expr -> LPAREN expr_comma_list error
-- On RAISE reduce production simple_expr -> LPAREN expr_comma_list error
-- On QUESTION reduce production simple_expr -> LPAREN expr_comma_list error
-- On PREFIXOP reduce production simple_expr -> LPAREN expr_comma_list error
-- On PLUS reduce production simple_expr -> LPAREN expr_comma_list error
-- On OPEN reduce production simple_expr -> LPAREN expr_comma_list error
-- On MODULE reduce production simple_expr -> LPAREN expr_comma_list error
-- On MINUSGREATER reduce production simple_expr -> LPAREN expr_comma_list error
-- On MINUS reduce production simple_expr -> LPAREN expr_comma_list error
-- On MATCH reduce production simple_expr -> LPAREN expr_comma_list error
-- On LVECTOR reduce production simple_expr -> LPAREN expr_comma_list error
-- On LPAREN reduce production simple_expr -> LPAREN expr_comma_list error
-- On LMATRIX reduce production simple_expr -> LPAREN expr_comma_list error
-- On LIDENT reduce production simple_expr -> LPAREN expr_comma_list error
-- On LET reduce production simple_expr -> LPAREN expr_comma_list error
-- On LBRACKBAR reduce production simple_expr -> LPAREN expr_comma_list error
-- On LBRACK reduce production simple_expr -> LPAREN expr_comma_list error
-- On LBRACE reduce production simple_expr -> LPAREN expr_comma_list error
-- On LAZY reduce production simple_expr -> LPAREN expr_comma_list error
-- On INT reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP5R reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP5L reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP4R reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP4L reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP3R reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP3L reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP2R reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP2L reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP1R reduce production simple_expr -> LPAREN expr_comma_list error
-- On INFIXOP1L reduce production simple_expr -> LPAREN expr_comma_list error
-- On IN reduce production simple_expr -> LPAREN expr_comma_list error
-- On IMAGINARY reduce production simple_expr -> LPAREN expr_comma_list error
-- On IF reduce production simple_expr -> LPAREN expr_comma_list error
-- On FUNCTION reduce production simple_expr -> LPAREN expr_comma_list error
-- On FUN reduce production simple_expr -> LPAREN expr_comma_list error
-- On FOR reduce production simple_expr -> LPAREN expr_comma_list error
-- On FLOAT reduce production simple_expr -> LPAREN expr_comma_list error
-- On EXCEPTION reduce production simple_expr -> LPAREN expr_comma_list error
-- On EQ reduce production simple_expr -> LPAREN expr_comma_list error
-- On EOF reduce production simple_expr -> LPAREN expr_comma_list error
-- On ELSE reduce production simple_expr -> LPAREN expr_comma_list error
-- On DOWNTO reduce production simple_expr -> LPAREN expr_comma_list error
-- On DOT reduce production simple_expr -> LPAREN expr_comma_list error
-- On DONE reduce production simple_expr -> LPAREN expr_comma_list error
-- On DOLLAR reduce production simple_expr -> LPAREN expr_comma_list error
-- On DO reduce production simple_expr -> LPAREN expr_comma_list error
-- On COMMA reduce production simple_expr -> LPAREN expr_comma_list error
-- On COLONEQUAL reduce production simple_expr -> LPAREN expr_comma_list error
-- On COLONCOLON reduce production simple_expr -> LPAREN expr_comma_list error
-- On COLON reduce production simple_expr -> LPAREN expr_comma_list error
-- On CHAR reduce production simple_expr -> LPAREN expr_comma_list error
-- On CASE reduce production simple_expr -> LPAREN expr_comma_list error
-- On BELOW reduce production simple_expr -> LPAREN expr_comma_list error
-- On BEGIN reduce production simple_expr -> LPAREN expr_comma_list error
-- On BARBAR reduce production simple_expr -> LPAREN expr_comma_list error
-- On BAR reduce production simple_expr -> LPAREN expr_comma_list error
-- On ASSERT reduce production simple_expr -> LPAREN expr_comma_list error
-- On AND reduce production simple_expr -> LPAREN expr_comma_list error
-- On AMPERAMPER reduce production simple_expr -> LPAREN expr_comma_list error
-- On ABOVE reduce production simple_expr -> LPAREN expr_comma_list error

State 871:
simple_expr -> LPAREN expr_comma_list BAR . expr RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 872
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 872:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
simple_expr -> LPAREN expr_comma_list BAR expr . RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On RPAREN shift to state 873
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 873:
simple_expr -> LPAREN expr_comma_list BAR expr RPAREN . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On WHILE reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On WHERE reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On UIDENT reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On TYPE reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On TRY reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On TO reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On THEN reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On STRING reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On STAR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On SHARP reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On SEMISEMI reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On SEMI reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On RPAREN reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On RAISE reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On QUESTION reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On PREFIXOP reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On PLUS reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On OPEN reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On MODULE reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On MINUSGREATER reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On MINUS reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On MATCH reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LVECTOR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LPAREN reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LMATRIX reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LIDENT reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LET reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LBRACKBAR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LBRACK reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LBRACE reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On LAZY reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INT reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP5R reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP5L reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP4R reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP4L reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP3R reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP3L reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP2R reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP2L reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP1R reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On INFIXOP1L reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On IN reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On IMAGINARY reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On IF reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On FUNCTION reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On FUN reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On FOR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On FLOAT reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On EXCEPTION reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On EQ reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On EOF reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On ELSE reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On DOWNTO reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On DOT reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On DONE reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On DOLLAR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On DO reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On COMMA reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On COLONEQUAL reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On COLONCOLON reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On COLON reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On CHAR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On CASE reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On BELOW reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On BEGIN reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On BARBAR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On BAR reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On ASSERT reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On AND reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On AMPERAMPER reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN
-- On ABOVE reduce production simple_expr -> LPAREN expr_comma_list BAR expr RPAREN

State 874:
simple_expr -> LPAREN expr_comma_list opt_comma . RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On RPAREN shift to state 875

State 875:
simple_expr -> LPAREN expr_comma_list opt_comma RPAREN . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On WHILE reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On WHERE reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On UIDENT reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On TYPE reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On TRY reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On TO reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On THEN reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On STRING reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On STAR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On SHARP reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On SEMISEMI reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On SEMI reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On RPAREN reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On RAISE reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On QUESTION reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On PREFIXOP reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On PLUS reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On OPEN reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On MODULE reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On MINUSGREATER reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On MINUS reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On MATCH reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LVECTOR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LPAREN reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LMATRIX reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LIDENT reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LET reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LBRACKBAR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LBRACK reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LBRACE reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On LAZY reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INT reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP5R reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP5L reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP4R reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP4L reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP3R reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP3L reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP2R reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP2L reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP1R reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On INFIXOP1L reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On IN reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On IMAGINARY reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On IF reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On FUNCTION reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On FUN reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On FOR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On FLOAT reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On EXCEPTION reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On EQ reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On EOF reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On ELSE reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On DOWNTO reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On DOT reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On DONE reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On DOLLAR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On DO reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On COMMA reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On COLONEQUAL reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On COLONCOLON reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On COLON reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On CHAR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On CASE reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On BELOW reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On BEGIN reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On BARBAR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On BAR reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On ASSERT reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On AND reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On AMPERAMPER reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN
-- On ABOVE reduce production simple_expr -> LPAREN expr_comma_list opt_comma RPAREN

State 876:
expr_comma_list_element -> expr . [ error RPAREN COMMA BAR ]
no_value_expr -> expr . COLONEQUAL expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
simple_expr -> LPAREN expr . SEMI basic_seq_expr RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN expr . SEMI basic_seq_expr error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . STAR expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . EQ expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ error WHERE STAR SEMI RPAREN QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR BAR AMPERAMPER ]
-- On WHERE shift to state 507
-- On STAR shift to state 509
-- On SEMI shift to state 877
-- On QUESTION shift to state 521
-- On PLUS shift to state 525
-- On MINUS shift to state 531
-- On INFIXOP5R shift to state 511
-- On INFIXOP5L shift to state 517
-- On INFIXOP4R shift to state 519
-- On INFIXOP4L shift to state 527
-- On INFIXOP3R shift to state 529
-- On INFIXOP3L shift to state 533
-- On INFIXOP2R shift to state 535
-- On INFIXOP2L shift to state 539
-- On INFIXOP1R shift to state 541
-- On INFIXOP1L shift to state 543
-- On EQ shift to state 545
-- On COLONEQUAL shift to state 547
-- On COLONCOLON shift to state 537
-- On BARBAR shift to state 549
-- On AMPERAMPER shift to state 551
-- On error reduce production expr_comma_list_element -> expr
-- On RPAREN reduce production expr_comma_list_element -> expr
-- On COMMA reduce production expr_comma_list_element -> expr
-- On BAR reduce production expr_comma_list_element -> expr

State 877:
simple_expr -> LPAREN expr SEMI . basic_seq_expr RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN expr SEMI . basic_seq_expr error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 39
-- On WHERE shift to state 45
-- On UIDENT shift to state 46
-- On TRY shift to state 54
-- On STRING shift to state 57
-- On SHARP shift to state 58
-- On RAISE shift to state 62
-- On PREFIXOP shift to state 63
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On MATCH shift to state 68
-- On LVECTOR shift to state 64
-- On LPAREN shift to state 79
-- On LMATRIX shift to state 83
-- On LIDENT shift to state 52
-- On LET shift to state 85
-- On LBRACKBAR shift to state 91
-- On LBRACK shift to state 92
-- On LBRACE shift to state 94
-- On LAZY shift to state 102
-- On INT shift to state 103
-- On IMAGINARY shift to state 104
-- On IF shift to state 112
-- On FUNCTION shift to state 124
-- On FUN shift to state 387
-- On FOR shift to state 420
-- On FLOAT shift to state 105
-- On DOLLAR shift to state 106
-- On CHAR shift to state 110
-- On CASE shift to state 483
-- On BEGIN shift to state 111
-- On ASSERT shift to state 487
-- On value_expr shift to state 497
-- On val_longident shift to state 488
-- On val_ident shift to state 489
-- On simple_expr shift to state 498
-- On no_value_expr shift to state 501
-- On expr shift to state 628
-- On constr_longident shift to state 513
-- On constant shift to state 516
-- On basic_seq_expr shift to state 878

State 878:
basic_seq_expr -> basic_seq_expr . SEMI expr [ error SEMI RPAREN ]
basic_seq_expr -> basic_seq_expr . SEMI [ error SEMI RPAREN ]
simple_expr -> LPAREN expr SEMI basic_seq_expr . RPAREN [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LPAREN expr SEMI basic_seq_expr . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On error shift to state 879
-- On SEMI shift to state 630
-- On RPAREN shift to state 880

State 879:
simple_expr -> LPAREN expr SEMI basic_seq_expr error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On WHILE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On WHERE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On UIDENT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On TYPE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On TRY reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On TO reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On THEN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On STRING reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On STAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On SHARP reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On SEMISEMI reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On SEMI reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On RPAREN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On RAISE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On QUESTION reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On PREFIXOP reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On PLUS reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On OPEN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On MODULE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On MINUSGREATER reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On MINUS reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On MATCH reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LVECTOR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LPAREN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LMATRIX reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LIDENT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LET reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LBRACKBAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LBRACK reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LBRACE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On LAZY reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP5R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP5L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP4R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP4L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP3R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP3L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP2R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP2L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP1R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On INFIXOP1L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On IN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On IMAGINARY reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On IF reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On FUNCTION reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On FUN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On FOR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On FLOAT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On EXCEPTION reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On EQ reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On EOF reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On ELSE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On DOWNTO reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On DOT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On DONE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On DOLLAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On DO reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On COMMA reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On COLONEQUAL reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On COLONCOLON reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On COLON reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On CHAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On CASE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On BELOW reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On BEGIN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On BARBAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On BAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On ASSERT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On AND reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On AMPERAMPER reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error
-- On ABOVE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr error

State 880:
simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On WHILE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On WHERE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On UIDENT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On TYPE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On TRY reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On TO reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On THEN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On STRING reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On STAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On SHARP reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On SEMISEMI reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On SEMI reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On RPAREN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On RAISE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On QUESTION reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On PREFIXOP reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On PLUS reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On OPEN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On MODULE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On MINUSGREATER reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On MINUS reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On MATCH reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LVECTOR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LPAREN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LMATRIX reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LIDENT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LET reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LBRACKBAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LBRACK reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LBRACE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On LAZY reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP5R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP5L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP4R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP4L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP3R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP3L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP2R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP2L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP1R reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On INFIXOP1L reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On IN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On IMAGINARY reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On IF reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On FUNCTION reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On FUN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On FOR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On FLOAT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On EXCEPTION reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On EQ reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On EOF reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On ELSE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On DOWNTO reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On DOT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On DONE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On DOLLAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On DO reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On COMMA reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On COLONEQUAL reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On COLONCOLON reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On COLON reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On CHAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On CASE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On BELOW reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On BEGIN reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On BARBAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On BAR reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On ASSERT reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On AND reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On AMPERAMPER reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN
-- On ABOVE reduce production simple_expr -> LPAREN expr SEMI basic_seq_expr RPAREN

State 881:
expr_comma_list -> expr_comma_list . COMMA expr_comma_list_element [ WITH COMMA ]
value_expr -> MATCH expr_comma_list . opt_comma WITH opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On COMMA shift to state 838
-- On opt_comma shift to state 882
-- On WITH reduce production opt_comma ->

State 882:
value_expr -> MATCH expr_comma_list opt_comma . WITH opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH shift to state 883

State 883:
value_expr -> MATCH expr_comma_list opt_comma WITH . opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On BAR shift to state 125
-- On opt_bar shift to state 884
-- On WEAKARRAYPAT reduce production opt_bar ->
-- On VECTORPAT reduce production opt_bar ->
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TUPLEPAT reduce production opt_bar ->
-- On SYMBOLPAT reduce production opt_bar ->
-- On STRINGPAT reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On STACKPAT reduce production opt_bar ->
-- On SHARP reduce production opt_bar ->
-- On RECORDPAT reduce production opt_bar ->
-- On REALPAT reduce production opt_bar ->
-- On QUEUEPAT reduce production opt_bar ->
-- On OUT_CHANNELPAT reduce production opt_bar ->
-- On NUMBERPAT reduce production opt_bar ->
-- On MINUS reduce production opt_bar ->
-- On LVECTOR reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LISTPAT reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LBRACKBAR reduce production opt_bar ->
-- On LBRACK reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On IN_CHANNELPAT reduce production opt_bar ->
-- On INTPAT reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On IMAGINARY reduce production opt_bar ->
-- On HASHTABLEPAT reduce production opt_bar ->
-- On FLOATPAT reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On FARRAYPAT reduce production opt_bar ->
-- On DOLLAR reduce production opt_bar ->
-- On DIR_HANDLEPAT reduce production opt_bar ->
-- On COMPLEXPAT reduce production opt_bar ->
-- On CHARPAT reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->
-- On CARRAYPAT reduce production opt_bar ->
-- On BOXPAT reduce production opt_bar ->
-- On ARRAYPAT reduce production opt_bar ->
-- On AMPERREST reduce production opt_bar ->

State 884:
value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar . match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 396
-- On pattern shift to state 399
-- On match_cases shift to state 885
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 885:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On BAR shift to state 616
-- On WITH reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On WHILE reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On WHERE reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On UIDENT reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On TYPE reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On TRY reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On TO reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On THEN reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On STRING reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On STAR reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On SHARP reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On SEMISEMI reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On SEMI reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On RPAREN reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On RAISE reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On QUESTION reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On PREFIXOP reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On PLUS reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On OPEN reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On MODULE reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On MINUSGREATER reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On MINUS reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On MATCH reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On LVECTOR reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On LPAREN reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On LMATRIX reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On LIDENT reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On LET reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On LBRACKBAR reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On LBRACK reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On LBRACE reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On LAZY reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INT reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP5R reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP5L reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP4R reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP4L reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP3R reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP3L reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP2R reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP2L reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP1R reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On INFIXOP1L reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On IN reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On IMAGINARY reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On IF reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On FUNCTION reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On FUN reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On FOR reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On FLOAT reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On EXCEPTION reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On EQ reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On EOF reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On ELSE reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On DOWNTO reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On DONE reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On DOLLAR reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On DO reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On COMMA reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On COLONEQUAL reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On COLONCOLON reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On COLON reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On CHAR reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On CASE reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On BELOW reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On BEGIN reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On BARBAR reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On ASSERT reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On AND reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On AMPERAMPER reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases
-- On ABOVE reduce production value_expr -> MATCH expr_comma_list opt_comma WITH opt_bar match_cases

State 886:
expr_comma_list_element -> expr . [ WITH COMMA ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> MATCH expr . WITH opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WITH WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COMMA COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WITH shift to state 887
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On COMMA reduce production expr_comma_list_element -> expr
** Conflict on WITH

State 887:
value_expr -> MATCH expr WITH . opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On BAR shift to state 125
-- On opt_bar shift to state 888
-- On WEAKARRAYPAT reduce production opt_bar ->
-- On VECTORPAT reduce production opt_bar ->
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TUPLEPAT reduce production opt_bar ->
-- On SYMBOLPAT reduce production opt_bar ->
-- On STRINGPAT reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On STACKPAT reduce production opt_bar ->
-- On SHARP reduce production opt_bar ->
-- On RECORDPAT reduce production opt_bar ->
-- On REALPAT reduce production opt_bar ->
-- On QUEUEPAT reduce production opt_bar ->
-- On OUT_CHANNELPAT reduce production opt_bar ->
-- On NUMBERPAT reduce production opt_bar ->
-- On MINUS reduce production opt_bar ->
-- On LVECTOR reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LISTPAT reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LBRACKBAR reduce production opt_bar ->
-- On LBRACK reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On IN_CHANNELPAT reduce production opt_bar ->
-- On INTPAT reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On IMAGINARY reduce production opt_bar ->
-- On HASHTABLEPAT reduce production opt_bar ->
-- On FLOATPAT reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On FARRAYPAT reduce production opt_bar ->
-- On DOLLAR reduce production opt_bar ->
-- On DIR_HANDLEPAT reduce production opt_bar ->
-- On COMPLEXPAT reduce production opt_bar ->
-- On CHARPAT reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->
-- On CARRAYPAT reduce production opt_bar ->
-- On BOXPAT reduce production opt_bar ->
-- On ARRAYPAT reduce production opt_bar ->
-- On AMPERREST reduce production opt_bar ->

State 888:
value_expr -> MATCH expr WITH opt_bar . match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 396
-- On pattern shift to state 399
-- On match_cases shift to state 889
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 889:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> MATCH expr WITH opt_bar match_cases . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On BAR shift to state 616
-- On WITH reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On WHILE reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On WHERE reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On UIDENT reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On TYPE reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On TRY reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On TO reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On THEN reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On STRING reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On STAR reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On SHARP reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On SEMISEMI reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On SEMI reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On RPAREN reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On RAISE reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On QUESTION reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On PREFIXOP reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On PLUS reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On OPEN reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On MODULE reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On MINUSGREATER reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On MINUS reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On MATCH reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On LVECTOR reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On LPAREN reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On LMATRIX reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On LIDENT reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On LET reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On LBRACKBAR reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On LBRACK reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On LBRACE reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On LAZY reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INT reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP5R reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP5L reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP4R reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP4L reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP3R reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP3L reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP2R reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP2L reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP1R reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On INFIXOP1L reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On IN reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On IMAGINARY reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On IF reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On FUNCTION reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On FUN reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On FOR reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On FLOAT reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On EXCEPTION reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On EQ reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On EOF reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On ELSE reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On DOWNTO reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On DONE reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On DOLLAR reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On DO reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On COMMA reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On COLONEQUAL reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On COLONCOLON reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On COLON reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On CHAR reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On CASE reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On BELOW reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On BEGIN reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On BARBAR reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On ASSERT reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On AND reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On AMPERAMPER reduce production value_expr -> MATCH expr WITH opt_bar match_cases
-- On ABOVE reduce production value_expr -> MATCH expr WITH opt_bar match_cases

State 890:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> MINUS expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On WITH reduce production value_expr -> MINUS expr
-- On WHILE reduce production value_expr -> MINUS expr
-- On UIDENT reduce production value_expr -> MINUS expr
-- On TYPE reduce production value_expr -> MINUS expr
-- On TRY reduce production value_expr -> MINUS expr
-- On TO reduce production value_expr -> MINUS expr
-- On THEN reduce production value_expr -> MINUS expr
-- On STRING reduce production value_expr -> MINUS expr
-- On STAR reduce production value_expr -> MINUS expr
-- On SHARP reduce production value_expr -> MINUS expr
-- On SEMISEMI reduce production value_expr -> MINUS expr
-- On SEMI reduce production value_expr -> MINUS expr
-- On RPAREN reduce production value_expr -> MINUS expr
-- On RAISE reduce production value_expr -> MINUS expr
-- On QUESTION reduce production value_expr -> MINUS expr
-- On PREFIXOP reduce production value_expr -> MINUS expr
-- On PLUS reduce production value_expr -> MINUS expr
-- On OPEN reduce production value_expr -> MINUS expr
-- On MODULE reduce production value_expr -> MINUS expr
-- On MINUSGREATER reduce production value_expr -> MINUS expr
-- On MINUS reduce production value_expr -> MINUS expr
-- On MATCH reduce production value_expr -> MINUS expr
-- On LVECTOR reduce production value_expr -> MINUS expr
-- On LPAREN reduce production value_expr -> MINUS expr
-- On LMATRIX reduce production value_expr -> MINUS expr
-- On LIDENT reduce production value_expr -> MINUS expr
-- On LET reduce production value_expr -> MINUS expr
-- On LBRACKBAR reduce production value_expr -> MINUS expr
-- On LBRACK reduce production value_expr -> MINUS expr
-- On LBRACE reduce production value_expr -> MINUS expr
-- On LAZY reduce production value_expr -> MINUS expr
-- On INT reduce production value_expr -> MINUS expr
-- On INFIXOP4R reduce production value_expr -> MINUS expr
-- On INFIXOP4L reduce production value_expr -> MINUS expr
-- On INFIXOP3R reduce production value_expr -> MINUS expr
-- On INFIXOP3L reduce production value_expr -> MINUS expr
-- On INFIXOP2R reduce production value_expr -> MINUS expr
-- On INFIXOP2L reduce production value_expr -> MINUS expr
-- On INFIXOP1R reduce production value_expr -> MINUS expr
-- On INFIXOP1L reduce production value_expr -> MINUS expr
-- On IN reduce production value_expr -> MINUS expr
-- On IMAGINARY reduce production value_expr -> MINUS expr
-- On IF reduce production value_expr -> MINUS expr
-- On FUNCTION reduce production value_expr -> MINUS expr
-- On FUN reduce production value_expr -> MINUS expr
-- On FOR reduce production value_expr -> MINUS expr
-- On FLOAT reduce production value_expr -> MINUS expr
-- On EXCEPTION reduce production value_expr -> MINUS expr
-- On EQ reduce production value_expr -> MINUS expr
-- On EOF reduce production value_expr -> MINUS expr
-- On ELSE reduce production value_expr -> MINUS expr
-- On DOWNTO reduce production value_expr -> MINUS expr
-- On DONE reduce production value_expr -> MINUS expr
-- On DOLLAR reduce production value_expr -> MINUS expr
-- On DO reduce production value_expr -> MINUS expr
-- On COMMA reduce production value_expr -> MINUS expr
-- On COLONEQUAL reduce production value_expr -> MINUS expr
-- On COLONCOLON reduce production value_expr -> MINUS expr
-- On COLON reduce production value_expr -> MINUS expr
-- On CHAR reduce production value_expr -> MINUS expr
-- On CASE reduce production value_expr -> MINUS expr
-- On BELOW reduce production value_expr -> MINUS expr
-- On BEGIN reduce production value_expr -> MINUS expr
-- On BARBAR reduce production value_expr -> MINUS expr
-- On BAR reduce production value_expr -> MINUS expr
-- On ASSERT reduce production value_expr -> MINUS expr
-- On AND reduce production value_expr -> MINUS expr
-- On AMPERAMPER reduce production value_expr -> MINUS expr
-- On ABOVE reduce production value_expr -> MINUS expr
** Conflict on WHERE

State 891:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> PLUS expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On WITH reduce production value_expr -> PLUS expr
-- On WHILE reduce production value_expr -> PLUS expr
-- On UIDENT reduce production value_expr -> PLUS expr
-- On TYPE reduce production value_expr -> PLUS expr
-- On TRY reduce production value_expr -> PLUS expr
-- On TO reduce production value_expr -> PLUS expr
-- On THEN reduce production value_expr -> PLUS expr
-- On STRING reduce production value_expr -> PLUS expr
-- On STAR reduce production value_expr -> PLUS expr
-- On SHARP reduce production value_expr -> PLUS expr
-- On SEMISEMI reduce production value_expr -> PLUS expr
-- On SEMI reduce production value_expr -> PLUS expr
-- On RPAREN reduce production value_expr -> PLUS expr
-- On RAISE reduce production value_expr -> PLUS expr
-- On QUESTION reduce production value_expr -> PLUS expr
-- On PREFIXOP reduce production value_expr -> PLUS expr
-- On PLUS reduce production value_expr -> PLUS expr
-- On OPEN reduce production value_expr -> PLUS expr
-- On MODULE reduce production value_expr -> PLUS expr
-- On MINUSGREATER reduce production value_expr -> PLUS expr
-- On MINUS reduce production value_expr -> PLUS expr
-- On MATCH reduce production value_expr -> PLUS expr
-- On LVECTOR reduce production value_expr -> PLUS expr
-- On LPAREN reduce production value_expr -> PLUS expr
-- On LMATRIX reduce production value_expr -> PLUS expr
-- On LIDENT reduce production value_expr -> PLUS expr
-- On LET reduce production value_expr -> PLUS expr
-- On LBRACKBAR reduce production value_expr -> PLUS expr
-- On LBRACK reduce production value_expr -> PLUS expr
-- On LBRACE reduce production value_expr -> PLUS expr
-- On LAZY reduce production value_expr -> PLUS expr
-- On INT reduce production value_expr -> PLUS expr
-- On INFIXOP4R reduce production value_expr -> PLUS expr
-- On INFIXOP4L reduce production value_expr -> PLUS expr
-- On INFIXOP3R reduce production value_expr -> PLUS expr
-- On INFIXOP3L reduce production value_expr -> PLUS expr
-- On INFIXOP2R reduce production value_expr -> PLUS expr
-- On INFIXOP2L reduce production value_expr -> PLUS expr
-- On INFIXOP1R reduce production value_expr -> PLUS expr
-- On INFIXOP1L reduce production value_expr -> PLUS expr
-- On IN reduce production value_expr -> PLUS expr
-- On IMAGINARY reduce production value_expr -> PLUS expr
-- On IF reduce production value_expr -> PLUS expr
-- On FUNCTION reduce production value_expr -> PLUS expr
-- On FUN reduce production value_expr -> PLUS expr
-- On FOR reduce production value_expr -> PLUS expr
-- On FLOAT reduce production value_expr -> PLUS expr
-- On EXCEPTION reduce production value_expr -> PLUS expr
-- On EQ reduce production value_expr -> PLUS expr
-- On EOF reduce production value_expr -> PLUS expr
-- On ELSE reduce production value_expr -> PLUS expr
-- On DOWNTO reduce production value_expr -> PLUS expr
-- On DONE reduce production value_expr -> PLUS expr
-- On DOLLAR reduce production value_expr -> PLUS expr
-- On DO reduce production value_expr -> PLUS expr
-- On COMMA reduce production value_expr -> PLUS expr
-- On COLONEQUAL reduce production value_expr -> PLUS expr
-- On COLONCOLON reduce production value_expr -> PLUS expr
-- On COLON reduce production value_expr -> PLUS expr
-- On CHAR reduce production value_expr -> PLUS expr
-- On CASE reduce production value_expr -> PLUS expr
-- On BELOW reduce production value_expr -> PLUS expr
-- On BEGIN reduce production value_expr -> PLUS expr
-- On BARBAR reduce production value_expr -> PLUS expr
-- On BAR reduce production value_expr -> PLUS expr
-- On ASSERT reduce production value_expr -> PLUS expr
-- On AND reduce production value_expr -> PLUS expr
-- On AMPERAMPER reduce production value_expr -> PLUS expr
-- On ABOVE reduce production value_expr -> PLUS expr
** Conflict on WHERE

State 892:
no_value_expr -> WHILE expr . DO seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On DO shift to state 893
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 893:
no_value_expr -> WHILE expr DO . seq_expr DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 894
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 894:
no_value_expr -> WHILE expr DO seq_expr . DONE [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On DONE shift to state 895

State 895:
no_value_expr -> WHILE expr DO seq_expr DONE . [ error WHERE THEN STAR SEMI RPAREN RBRACK RBRACE QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ END ELSE DOTDOT COMMA COLONEQUAL COLONCOLON COLON BARRBRACK BARCOLON BARBAR BAR AMPERAMPER ]
-- On error reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On WHERE reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On THEN reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On STAR reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On SEMI reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On RPAREN reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On RBRACK reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On RBRACE reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On QUESTION reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On PLUS reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On MINUS reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP5R reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP5L reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP4R reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP4L reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP3R reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP3L reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP2R reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP2L reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP1R reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP1L reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On EQ reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On END reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On ELSE reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On DOTDOT reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On COMMA reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On COLONEQUAL reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On COLONCOLON reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On COLON reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On BARRBRACK reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On BARCOLON reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On BARBAR reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On BAR reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On AMPERAMPER reduce production no_value_expr -> WHILE expr DO seq_expr DONE

State 896:
simple_expr -> LVECTOR list_expr . RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> LVECTOR list_expr . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On error shift to state 897
-- On RBRACK shift to state 898

State 897:
simple_expr -> LVECTOR list_expr error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LVECTOR list_expr error
-- On WHILE reduce production simple_expr -> LVECTOR list_expr error
-- On WHERE reduce production simple_expr -> LVECTOR list_expr error
-- On UIDENT reduce production simple_expr -> LVECTOR list_expr error
-- On TYPE reduce production simple_expr -> LVECTOR list_expr error
-- On TRY reduce production simple_expr -> LVECTOR list_expr error
-- On TO reduce production simple_expr -> LVECTOR list_expr error
-- On THEN reduce production simple_expr -> LVECTOR list_expr error
-- On STRING reduce production simple_expr -> LVECTOR list_expr error
-- On STAR reduce production simple_expr -> LVECTOR list_expr error
-- On SHARP reduce production simple_expr -> LVECTOR list_expr error
-- On SEMISEMI reduce production simple_expr -> LVECTOR list_expr error
-- On SEMI reduce production simple_expr -> LVECTOR list_expr error
-- On RPAREN reduce production simple_expr -> LVECTOR list_expr error
-- On RAISE reduce production simple_expr -> LVECTOR list_expr error
-- On QUESTION reduce production simple_expr -> LVECTOR list_expr error
-- On PREFIXOP reduce production simple_expr -> LVECTOR list_expr error
-- On PLUS reduce production simple_expr -> LVECTOR list_expr error
-- On OPEN reduce production simple_expr -> LVECTOR list_expr error
-- On MODULE reduce production simple_expr -> LVECTOR list_expr error
-- On MINUSGREATER reduce production simple_expr -> LVECTOR list_expr error
-- On MINUS reduce production simple_expr -> LVECTOR list_expr error
-- On MATCH reduce production simple_expr -> LVECTOR list_expr error
-- On LVECTOR reduce production simple_expr -> LVECTOR list_expr error
-- On LPAREN reduce production simple_expr -> LVECTOR list_expr error
-- On LMATRIX reduce production simple_expr -> LVECTOR list_expr error
-- On LIDENT reduce production simple_expr -> LVECTOR list_expr error
-- On LET reduce production simple_expr -> LVECTOR list_expr error
-- On LBRACKBAR reduce production simple_expr -> LVECTOR list_expr error
-- On LBRACK reduce production simple_expr -> LVECTOR list_expr error
-- On LBRACE reduce production simple_expr -> LVECTOR list_expr error
-- On LAZY reduce production simple_expr -> LVECTOR list_expr error
-- On INT reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP5R reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP5L reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP4R reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP4L reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP3R reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP3L reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP2R reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP2L reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP1R reduce production simple_expr -> LVECTOR list_expr error
-- On INFIXOP1L reduce production simple_expr -> LVECTOR list_expr error
-- On IN reduce production simple_expr -> LVECTOR list_expr error
-- On IMAGINARY reduce production simple_expr -> LVECTOR list_expr error
-- On IF reduce production simple_expr -> LVECTOR list_expr error
-- On FUNCTION reduce production simple_expr -> LVECTOR list_expr error
-- On FUN reduce production simple_expr -> LVECTOR list_expr error
-- On FOR reduce production simple_expr -> LVECTOR list_expr error
-- On FLOAT reduce production simple_expr -> LVECTOR list_expr error
-- On EXCEPTION reduce production simple_expr -> LVECTOR list_expr error
-- On EQ reduce production simple_expr -> LVECTOR list_expr error
-- On EOF reduce production simple_expr -> LVECTOR list_expr error
-- On ELSE reduce production simple_expr -> LVECTOR list_expr error
-- On DOWNTO reduce production simple_expr -> LVECTOR list_expr error
-- On DOT reduce production simple_expr -> LVECTOR list_expr error
-- On DONE reduce production simple_expr -> LVECTOR list_expr error
-- On DOLLAR reduce production simple_expr -> LVECTOR list_expr error
-- On DO reduce production simple_expr -> LVECTOR list_expr error
-- On COMMA reduce production simple_expr -> LVECTOR list_expr error
-- On COLONEQUAL reduce production simple_expr -> LVECTOR list_expr error
-- On COLONCOLON reduce production simple_expr -> LVECTOR list_expr error
-- On COLON reduce production simple_expr -> LVECTOR list_expr error
-- On CHAR reduce production simple_expr -> LVECTOR list_expr error
-- On CASE reduce production simple_expr -> LVECTOR list_expr error
-- On BELOW reduce production simple_expr -> LVECTOR list_expr error
-- On BEGIN reduce production simple_expr -> LVECTOR list_expr error
-- On BARBAR reduce production simple_expr -> LVECTOR list_expr error
-- On BAR reduce production simple_expr -> LVECTOR list_expr error
-- On ASSERT reduce production simple_expr -> LVECTOR list_expr error
-- On AND reduce production simple_expr -> LVECTOR list_expr error
-- On AMPERAMPER reduce production simple_expr -> LVECTOR list_expr error
-- On ABOVE reduce production simple_expr -> LVECTOR list_expr error

State 898:
simple_expr -> LVECTOR list_expr RBRACK . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On WHILE reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On WHERE reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On UIDENT reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On TYPE reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On TRY reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On TO reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On THEN reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On STRING reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On STAR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On SHARP reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On SEMISEMI reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On SEMI reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On RPAREN reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On RAISE reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On QUESTION reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On PREFIXOP reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On PLUS reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On OPEN reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On MODULE reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On MINUSGREATER reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On MINUS reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On MATCH reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LVECTOR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LPAREN reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LMATRIX reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LIDENT reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LET reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LBRACKBAR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LBRACK reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LBRACE reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On LAZY reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INT reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP5R reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP5L reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP4R reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP4L reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP3R reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP3L reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP2R reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP2L reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP1R reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On INFIXOP1L reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On IN reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On IMAGINARY reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On IF reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On FUNCTION reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On FUN reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On FOR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On FLOAT reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On EXCEPTION reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On EQ reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On EOF reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On ELSE reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On DOWNTO reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On DOT reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On DONE reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On DOLLAR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On DO reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On COMMA reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On COLONEQUAL reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On COLONCOLON reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On COLON reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On CHAR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On CASE reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On BELOW reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On BEGIN reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On BARBAR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On BAR reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On ASSERT reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On AND reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On AMPERAMPER reduce production simple_expr -> LVECTOR list_expr RBRACK
-- On ABOVE reduce production simple_expr -> LVECTOR list_expr RBRACK

State 899:
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list RBRACK [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> simple_expr . DOT LBRACK index_list error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
simple_expr -> PREFIXOP simple_expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DOT DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production simple_expr -> PREFIXOP simple_expr
-- On WHILE reduce production simple_expr -> PREFIXOP simple_expr
-- On WHERE reduce production simple_expr -> PREFIXOP simple_expr
-- On UIDENT reduce production simple_expr -> PREFIXOP simple_expr
-- On TYPE reduce production simple_expr -> PREFIXOP simple_expr
-- On TRY reduce production simple_expr -> PREFIXOP simple_expr
-- On TO reduce production simple_expr -> PREFIXOP simple_expr
-- On THEN reduce production simple_expr -> PREFIXOP simple_expr
-- On STRING reduce production simple_expr -> PREFIXOP simple_expr
-- On STAR reduce production simple_expr -> PREFIXOP simple_expr
-- On SHARP reduce production simple_expr -> PREFIXOP simple_expr
-- On SEMISEMI reduce production simple_expr -> PREFIXOP simple_expr
-- On SEMI reduce production simple_expr -> PREFIXOP simple_expr
-- On RPAREN reduce production simple_expr -> PREFIXOP simple_expr
-- On RAISE reduce production simple_expr -> PREFIXOP simple_expr
-- On QUESTION reduce production simple_expr -> PREFIXOP simple_expr
-- On PREFIXOP reduce production simple_expr -> PREFIXOP simple_expr
-- On PLUS reduce production simple_expr -> PREFIXOP simple_expr
-- On OPEN reduce production simple_expr -> PREFIXOP simple_expr
-- On MODULE reduce production simple_expr -> PREFIXOP simple_expr
-- On MINUSGREATER reduce production simple_expr -> PREFIXOP simple_expr
-- On MINUS reduce production simple_expr -> PREFIXOP simple_expr
-- On MATCH reduce production simple_expr -> PREFIXOP simple_expr
-- On LVECTOR reduce production simple_expr -> PREFIXOP simple_expr
-- On LPAREN reduce production simple_expr -> PREFIXOP simple_expr
-- On LMATRIX reduce production simple_expr -> PREFIXOP simple_expr
-- On LIDENT reduce production simple_expr -> PREFIXOP simple_expr
-- On LET reduce production simple_expr -> PREFIXOP simple_expr
-- On LBRACKBAR reduce production simple_expr -> PREFIXOP simple_expr
-- On LBRACK reduce production simple_expr -> PREFIXOP simple_expr
-- On LBRACE reduce production simple_expr -> PREFIXOP simple_expr
-- On LAZY reduce production simple_expr -> PREFIXOP simple_expr
-- On INT reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP5R reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP5L reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP4R reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP4L reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP3R reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP3L reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP2R reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP2L reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP1R reduce production simple_expr -> PREFIXOP simple_expr
-- On INFIXOP1L reduce production simple_expr -> PREFIXOP simple_expr
-- On IN reduce production simple_expr -> PREFIXOP simple_expr
-- On IMAGINARY reduce production simple_expr -> PREFIXOP simple_expr
-- On IF reduce production simple_expr -> PREFIXOP simple_expr
-- On FUNCTION reduce production simple_expr -> PREFIXOP simple_expr
-- On FUN reduce production simple_expr -> PREFIXOP simple_expr
-- On FOR reduce production simple_expr -> PREFIXOP simple_expr
-- On FLOAT reduce production simple_expr -> PREFIXOP simple_expr
-- On EXCEPTION reduce production simple_expr -> PREFIXOP simple_expr
-- On EQ reduce production simple_expr -> PREFIXOP simple_expr
-- On EOF reduce production simple_expr -> PREFIXOP simple_expr
-- On ELSE reduce production simple_expr -> PREFIXOP simple_expr
-- On DOWNTO reduce production simple_expr -> PREFIXOP simple_expr
-- On DOT reduce production simple_expr -> PREFIXOP simple_expr
-- On DONE reduce production simple_expr -> PREFIXOP simple_expr
-- On DOLLAR reduce production simple_expr -> PREFIXOP simple_expr
-- On DO reduce production simple_expr -> PREFIXOP simple_expr
-- On COMMA reduce production simple_expr -> PREFIXOP simple_expr
-- On COLONEQUAL reduce production simple_expr -> PREFIXOP simple_expr
-- On COLONCOLON reduce production simple_expr -> PREFIXOP simple_expr
-- On COLON reduce production simple_expr -> PREFIXOP simple_expr
-- On CHAR reduce production simple_expr -> PREFIXOP simple_expr
-- On CASE reduce production simple_expr -> PREFIXOP simple_expr
-- On BELOW reduce production simple_expr -> PREFIXOP simple_expr
-- On BEGIN reduce production simple_expr -> PREFIXOP simple_expr
-- On BARBAR reduce production simple_expr -> PREFIXOP simple_expr
-- On BAR reduce production simple_expr -> PREFIXOP simple_expr
-- On ASSERT reduce production simple_expr -> PREFIXOP simple_expr
-- On AND reduce production simple_expr -> PREFIXOP simple_expr
-- On AMPERAMPER reduce production simple_expr -> PREFIXOP simple_expr
-- On ABOVE reduce production simple_expr -> PREFIXOP simple_expr

State 900:
no_value_expr -> RAISE expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production no_value_expr -> RAISE expr
-- On WHILE reduce production no_value_expr -> RAISE expr
-- On UIDENT reduce production no_value_expr -> RAISE expr
-- On TYPE reduce production no_value_expr -> RAISE expr
-- On TRY reduce production no_value_expr -> RAISE expr
-- On TO reduce production no_value_expr -> RAISE expr
-- On THEN reduce production no_value_expr -> RAISE expr
-- On STRING reduce production no_value_expr -> RAISE expr
-- On SHARP reduce production no_value_expr -> RAISE expr
-- On SEMISEMI reduce production no_value_expr -> RAISE expr
-- On SEMI reduce production no_value_expr -> RAISE expr
-- On RPAREN reduce production no_value_expr -> RAISE expr
-- On RAISE reduce production no_value_expr -> RAISE expr
-- On PREFIXOP reduce production no_value_expr -> RAISE expr
-- On OPEN reduce production no_value_expr -> RAISE expr
-- On MODULE reduce production no_value_expr -> RAISE expr
-- On MINUSGREATER reduce production no_value_expr -> RAISE expr
-- On MATCH reduce production no_value_expr -> RAISE expr
-- On LVECTOR reduce production no_value_expr -> RAISE expr
-- On LPAREN reduce production no_value_expr -> RAISE expr
-- On LMATRIX reduce production no_value_expr -> RAISE expr
-- On LIDENT reduce production no_value_expr -> RAISE expr
-- On LET reduce production no_value_expr -> RAISE expr
-- On LBRACKBAR reduce production no_value_expr -> RAISE expr
-- On LBRACK reduce production no_value_expr -> RAISE expr
-- On LBRACE reduce production no_value_expr -> RAISE expr
-- On LAZY reduce production no_value_expr -> RAISE expr
-- On INT reduce production no_value_expr -> RAISE expr
-- On IN reduce production no_value_expr -> RAISE expr
-- On IMAGINARY reduce production no_value_expr -> RAISE expr
-- On IF reduce production no_value_expr -> RAISE expr
-- On FUNCTION reduce production no_value_expr -> RAISE expr
-- On FUN reduce production no_value_expr -> RAISE expr
-- On FOR reduce production no_value_expr -> RAISE expr
-- On FLOAT reduce production no_value_expr -> RAISE expr
-- On EXCEPTION reduce production no_value_expr -> RAISE expr
-- On EOF reduce production no_value_expr -> RAISE expr
-- On ELSE reduce production no_value_expr -> RAISE expr
-- On DOWNTO reduce production no_value_expr -> RAISE expr
-- On DONE reduce production no_value_expr -> RAISE expr
-- On DOLLAR reduce production no_value_expr -> RAISE expr
-- On DO reduce production no_value_expr -> RAISE expr
-- On COMMA reduce production no_value_expr -> RAISE expr
-- On COLON reduce production no_value_expr -> RAISE expr
-- On CHAR reduce production no_value_expr -> RAISE expr
-- On CASE reduce production no_value_expr -> RAISE expr
-- On BELOW reduce production no_value_expr -> RAISE expr
-- On BEGIN reduce production no_value_expr -> RAISE expr
-- On BAR reduce production no_value_expr -> RAISE expr
-- On ASSERT reduce production no_value_expr -> RAISE expr
-- On AND reduce production no_value_expr -> RAISE expr
-- On ABOVE reduce production no_value_expr -> RAISE expr
** Conflict on WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER

State 901:
value_expr -> TRY seq_expr . WITH opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> TRY seq_expr . WITH error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH shift to state 902

State 902:
value_expr -> TRY seq_expr WITH . opt_bar match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> TRY seq_expr WITH . error [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On error shift to state 903
-- On BAR shift to state 125
-- On opt_bar shift to state 904
-- On WEAKARRAYPAT reduce production opt_bar ->
-- On VECTORPAT reduce production opt_bar ->
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TUPLEPAT reduce production opt_bar ->
-- On SYMBOLPAT reduce production opt_bar ->
-- On STRINGPAT reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On STACKPAT reduce production opt_bar ->
-- On SHARP reduce production opt_bar ->
-- On RECORDPAT reduce production opt_bar ->
-- On REALPAT reduce production opt_bar ->
-- On QUEUEPAT reduce production opt_bar ->
-- On OUT_CHANNELPAT reduce production opt_bar ->
-- On NUMBERPAT reduce production opt_bar ->
-- On MINUS reduce production opt_bar ->
-- On LVECTOR reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LISTPAT reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LBRACKBAR reduce production opt_bar ->
-- On LBRACK reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On IN_CHANNELPAT reduce production opt_bar ->
-- On INTPAT reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On IMAGINARY reduce production opt_bar ->
-- On HASHTABLEPAT reduce production opt_bar ->
-- On FLOATPAT reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On FARRAYPAT reduce production opt_bar ->
-- On DOLLAR reduce production opt_bar ->
-- On DIR_HANDLEPAT reduce production opt_bar ->
-- On COMPLEXPAT reduce production opt_bar ->
-- On CHARPAT reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->
-- On CARRAYPAT reduce production opt_bar ->
-- On BOXPAT reduce production opt_bar ->
-- On ARRAYPAT reduce production opt_bar ->
-- On AMPERREST reduce production opt_bar ->

State 903:
value_expr -> TRY seq_expr WITH error . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production value_expr -> TRY seq_expr WITH error
-- On WHILE reduce production value_expr -> TRY seq_expr WITH error
-- On WHERE reduce production value_expr -> TRY seq_expr WITH error
-- On UIDENT reduce production value_expr -> TRY seq_expr WITH error
-- On TYPE reduce production value_expr -> TRY seq_expr WITH error
-- On TRY reduce production value_expr -> TRY seq_expr WITH error
-- On TO reduce production value_expr -> TRY seq_expr WITH error
-- On THEN reduce production value_expr -> TRY seq_expr WITH error
-- On STRING reduce production value_expr -> TRY seq_expr WITH error
-- On STAR reduce production value_expr -> TRY seq_expr WITH error
-- On SHARP reduce production value_expr -> TRY seq_expr WITH error
-- On SEMISEMI reduce production value_expr -> TRY seq_expr WITH error
-- On SEMI reduce production value_expr -> TRY seq_expr WITH error
-- On RPAREN reduce production value_expr -> TRY seq_expr WITH error
-- On RAISE reduce production value_expr -> TRY seq_expr WITH error
-- On QUESTION reduce production value_expr -> TRY seq_expr WITH error
-- On PREFIXOP reduce production value_expr -> TRY seq_expr WITH error
-- On PLUS reduce production value_expr -> TRY seq_expr WITH error
-- On OPEN reduce production value_expr -> TRY seq_expr WITH error
-- On MODULE reduce production value_expr -> TRY seq_expr WITH error
-- On MINUSGREATER reduce production value_expr -> TRY seq_expr WITH error
-- On MINUS reduce production value_expr -> TRY seq_expr WITH error
-- On MATCH reduce production value_expr -> TRY seq_expr WITH error
-- On LVECTOR reduce production value_expr -> TRY seq_expr WITH error
-- On LPAREN reduce production value_expr -> TRY seq_expr WITH error
-- On LMATRIX reduce production value_expr -> TRY seq_expr WITH error
-- On LIDENT reduce production value_expr -> TRY seq_expr WITH error
-- On LET reduce production value_expr -> TRY seq_expr WITH error
-- On LBRACKBAR reduce production value_expr -> TRY seq_expr WITH error
-- On LBRACK reduce production value_expr -> TRY seq_expr WITH error
-- On LBRACE reduce production value_expr -> TRY seq_expr WITH error
-- On LAZY reduce production value_expr -> TRY seq_expr WITH error
-- On INT reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP5R reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP5L reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP4R reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP4L reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP3R reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP3L reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP2R reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP2L reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP1R reduce production value_expr -> TRY seq_expr WITH error
-- On INFIXOP1L reduce production value_expr -> TRY seq_expr WITH error
-- On IN reduce production value_expr -> TRY seq_expr WITH error
-- On IMAGINARY reduce production value_expr -> TRY seq_expr WITH error
-- On IF reduce production value_expr -> TRY seq_expr WITH error
-- On FUNCTION reduce production value_expr -> TRY seq_expr WITH error
-- On FUN reduce production value_expr -> TRY seq_expr WITH error
-- On FOR reduce production value_expr -> TRY seq_expr WITH error
-- On FLOAT reduce production value_expr -> TRY seq_expr WITH error
-- On EXCEPTION reduce production value_expr -> TRY seq_expr WITH error
-- On EQ reduce production value_expr -> TRY seq_expr WITH error
-- On EOF reduce production value_expr -> TRY seq_expr WITH error
-- On ELSE reduce production value_expr -> TRY seq_expr WITH error
-- On DOWNTO reduce production value_expr -> TRY seq_expr WITH error
-- On DONE reduce production value_expr -> TRY seq_expr WITH error
-- On DOLLAR reduce production value_expr -> TRY seq_expr WITH error
-- On DO reduce production value_expr -> TRY seq_expr WITH error
-- On COMMA reduce production value_expr -> TRY seq_expr WITH error
-- On COLONEQUAL reduce production value_expr -> TRY seq_expr WITH error
-- On COLONCOLON reduce production value_expr -> TRY seq_expr WITH error
-- On COLON reduce production value_expr -> TRY seq_expr WITH error
-- On CHAR reduce production value_expr -> TRY seq_expr WITH error
-- On CASE reduce production value_expr -> TRY seq_expr WITH error
-- On BELOW reduce production value_expr -> TRY seq_expr WITH error
-- On BEGIN reduce production value_expr -> TRY seq_expr WITH error
-- On BARBAR reduce production value_expr -> TRY seq_expr WITH error
-- On BAR reduce production value_expr -> TRY seq_expr WITH error
-- On ASSERT reduce production value_expr -> TRY seq_expr WITH error
-- On AND reduce production value_expr -> TRY seq_expr WITH error
-- On AMPERAMPER reduce production value_expr -> TRY seq_expr WITH error
-- On ABOVE reduce production value_expr -> TRY seq_expr WITH error

State 904:
value_expr -> TRY seq_expr WITH opt_bar . match_cases [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 298
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 396
-- On pattern shift to state 399
-- On match_cases shift to state 905
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 905:
match_cases -> match_cases . BAR pattern_comma_list opt_comma match_action [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> TRY seq_expr WITH opt_bar match_cases . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On BAR shift to state 616
-- On WITH reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On WHILE reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On WHERE reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On UIDENT reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On TYPE reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On TRY reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On TO reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On THEN reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On STRING reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On STAR reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On SHARP reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On SEMISEMI reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On SEMI reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On RPAREN reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On RAISE reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On QUESTION reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On PREFIXOP reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On PLUS reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On OPEN reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On MODULE reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On MINUSGREATER reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On MINUS reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On MATCH reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On LVECTOR reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On LPAREN reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On LMATRIX reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On LIDENT reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On LET reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACKBAR reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACK reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACE reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On LAZY reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INT reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP5R reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP5L reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP4R reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP4L reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP3R reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP3L reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP2R reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP2L reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP1R reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP1L reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On IN reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On IMAGINARY reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On IF reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On FUNCTION reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On FUN reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On FOR reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On FLOAT reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On EXCEPTION reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On EQ reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On EOF reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On ELSE reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On DOWNTO reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On DONE reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On DOLLAR reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On DO reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On COMMA reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On COLONEQUAL reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On COLONCOLON reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On COLON reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On CHAR reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On CASE reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On BELOW reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On BEGIN reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On BARBAR reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On ASSERT reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On AND reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On AMPERAMPER reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases
-- On ABOVE reduce production value_expr -> TRY seq_expr WITH opt_bar match_cases

State 906:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> WHERE expr . THEN expr ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> WHERE expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On THEN shift to state 907
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production value_expr -> WHERE expr
-- On WHILE reduce production value_expr -> WHERE expr
-- On UIDENT reduce production value_expr -> WHERE expr
-- On TYPE reduce production value_expr -> WHERE expr
-- On TRY reduce production value_expr -> WHERE expr
-- On TO reduce production value_expr -> WHERE expr
-- On STRING reduce production value_expr -> WHERE expr
-- On SHARP reduce production value_expr -> WHERE expr
-- On SEMISEMI reduce production value_expr -> WHERE expr
-- On SEMI reduce production value_expr -> WHERE expr
-- On RPAREN reduce production value_expr -> WHERE expr
-- On RAISE reduce production value_expr -> WHERE expr
-- On PREFIXOP reduce production value_expr -> WHERE expr
-- On OPEN reduce production value_expr -> WHERE expr
-- On MODULE reduce production value_expr -> WHERE expr
-- On MINUSGREATER reduce production value_expr -> WHERE expr
-- On MATCH reduce production value_expr -> WHERE expr
-- On LVECTOR reduce production value_expr -> WHERE expr
-- On LPAREN reduce production value_expr -> WHERE expr
-- On LMATRIX reduce production value_expr -> WHERE expr
-- On LIDENT reduce production value_expr -> WHERE expr
-- On LET reduce production value_expr -> WHERE expr
-- On LBRACKBAR reduce production value_expr -> WHERE expr
-- On LBRACK reduce production value_expr -> WHERE expr
-- On LBRACE reduce production value_expr -> WHERE expr
-- On LAZY reduce production value_expr -> WHERE expr
-- On INT reduce production value_expr -> WHERE expr
-- On IN reduce production value_expr -> WHERE expr
-- On IMAGINARY reduce production value_expr -> WHERE expr
-- On IF reduce production value_expr -> WHERE expr
-- On FUNCTION reduce production value_expr -> WHERE expr
-- On FUN reduce production value_expr -> WHERE expr
-- On FOR reduce production value_expr -> WHERE expr
-- On FLOAT reduce production value_expr -> WHERE expr
-- On EXCEPTION reduce production value_expr -> WHERE expr
-- On EOF reduce production value_expr -> WHERE expr
-- On ELSE reduce production value_expr -> WHERE expr
-- On DOWNTO reduce production value_expr -> WHERE expr
-- On DONE reduce production value_expr -> WHERE expr
-- On DOLLAR reduce production value_expr -> WHERE expr
-- On DO reduce production value_expr -> WHERE expr
-- On COMMA reduce production value_expr -> WHERE expr
-- On COLON reduce production value_expr -> WHERE expr
-- On CHAR reduce production value_expr -> WHERE expr
-- On CASE reduce production value_expr -> WHERE expr
-- On BELOW reduce production value_expr -> WHERE expr
-- On BEGIN reduce production value_expr -> WHERE expr
-- On BAR reduce production value_expr -> WHERE expr
-- On ASSERT reduce production value_expr -> WHERE expr
-- On AND reduce production value_expr -> WHERE expr
-- On ABOVE reduce production value_expr -> WHERE expr
** Conflict on WHERE THEN

State 907:
value_expr -> WHERE expr THEN . expr ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 908
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 908:
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> WHERE expr THEN expr . ELSE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ ELSE COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On ELSE shift to state 909
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 909:
value_expr -> WHERE expr THEN expr ELSE . expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On no_value_expr shift to state 423
-- On expr shift to state 910
-- On constr_longident shift to state 431
-- On constant shift to state 415

State 910:
no_value_expr -> expr . COLONEQUAL expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> WHERE expr THEN expr ELSE expr . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . WHERE expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . QUESTION expr COLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . COLONCOLON expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5L expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP1R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP2R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP3R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP4R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . INFIXOP5R expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . PLUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . MINUS expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . STAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . EQ expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . BARBAR expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
value_expr -> expr . AMPERAMPER expr [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465
-- On WITH reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On WHILE reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On UIDENT reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On TYPE reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On TRY reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On TO reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On THEN reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On STRING reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On SHARP reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On SEMISEMI reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On SEMI reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On RPAREN reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On RAISE reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On PREFIXOP reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On OPEN reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On MODULE reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On MINUSGREATER reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On MATCH reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On LVECTOR reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On LPAREN reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On LMATRIX reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On LIDENT reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On LET reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On LBRACKBAR reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On LBRACK reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On LBRACE reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On LAZY reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On INT reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On IN reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On IMAGINARY reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On IF reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On FUNCTION reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On FUN reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On FOR reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On FLOAT reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On EXCEPTION reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On EOF reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On ELSE reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On DOWNTO reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On DONE reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On DOLLAR reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On DO reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On COMMA reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On COLON reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On CHAR reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On CASE reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On BELOW reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On BEGIN reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On BAR reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On ASSERT reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On AND reduce production value_expr -> WHERE expr THEN expr ELSE expr
-- On ABOVE reduce production value_expr -> WHERE expr THEN expr ELSE expr
** Conflict on WHERE

State 911:
no_value_expr -> WHILE expr . DO seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
no_value_expr -> expr . COLONEQUAL expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . WHERE expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . QUESTION expr COLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . COLONCOLON expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5L expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP1R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP2R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP3R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP4R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . INFIXOP5R expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . PLUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . MINUS expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . STAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . EQ expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . BARBAR expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
value_expr -> expr . AMPERAMPER expr [ WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ DO COLONEQUAL COLONCOLON BARBAR AMPERAMPER ]
-- On WHERE shift to state 425
-- On STAR shift to state 427
-- On QUESTION shift to state 437
-- On PLUS shift to state 439
-- On MINUS shift to state 445
-- On INFIXOP5R shift to state 429
-- On INFIXOP5L shift to state 433
-- On INFIXOP4R shift to state 435
-- On INFIXOP4L shift to state 441
-- On INFIXOP3R shift to state 443
-- On INFIXOP3L shift to state 447
-- On INFIXOP2R shift to state 449
-- On INFIXOP2L shift to state 453
-- On INFIXOP1R shift to state 455
-- On INFIXOP1L shift to state 457
-- On EQ shift to state 459
-- On DO shift to state 912
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERAMPER shift to state 465

State 912:
no_value_expr -> WHILE expr DO . seq_expr DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 70
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On simple_expr shift to state 417
-- On seq_expr shift to state 913
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 913:
no_value_expr -> WHILE expr DO seq_expr . DONE [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On DONE shift to state 914

State 914:
no_value_expr -> WHILE expr DO seq_expr DONE . [ WITH WHILE WHERE UIDENT TYPE TRY TO THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF ELSE DOWNTO DONE DOLLAR DO COMMA COLONEQUAL COLONCOLON COLON CHAR CASE BELOW BEGIN BARBAR BAR ASSERT AND AMPERAMPER ABOVE ]
-- On WITH reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On WHILE reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On WHERE reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On UIDENT reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On TYPE reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On TRY reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On TO reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On THEN reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On STRING reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On STAR reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On SHARP reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On SEMISEMI reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On SEMI reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On RPAREN reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On RAISE reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On QUESTION reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On PREFIXOP reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On PLUS reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On OPEN reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On MODULE reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On MINUSGREATER reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On MINUS reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On MATCH reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On LVECTOR reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On LPAREN reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On LMATRIX reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On LIDENT reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On LET reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On LBRACKBAR reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On LBRACK reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On LBRACE reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On LAZY reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INT reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP5R reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP5L reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP4R reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP4L reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP3R reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP3L reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP2R reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP2L reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP1R reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On INFIXOP1L reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On IN reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On IMAGINARY reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On IF reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On FUNCTION reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On FUN reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On FOR reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On FLOAT reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On EXCEPTION reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On EQ reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On EOF reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On ELSE reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On DOWNTO reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On DONE reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On DOLLAR reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On DO reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On COMMA reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On COLONEQUAL reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On COLONCOLON reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On COLON reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On CHAR reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On CASE reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On BELOW reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On BEGIN reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On BARBAR reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On BAR reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On ASSERT reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On AND reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On AMPERAMPER reduce production no_value_expr -> WHILE expr DO seq_expr DONE
-- On ABOVE reduce production no_value_expr -> WHILE expr DO seq_expr DONE

State 915:
top_expr -> TYPE . type_vars LIDENT EQ opt_bar tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE . LIDENT EQ opt_bar tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE . LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE . LIDENT EQ LBRACE lbl_type_list opt_comma error [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On TIDENT shift to state 916
-- On LPAREN shift to state 917
-- On LIDENT shift to state 923
-- On type_vars shift to state 970

State 916:
type_vars -> TIDENT . [ LIDENT ]
-- On LIDENT reduce production type_vars -> TIDENT

State 917:
type_vars -> LPAREN . type_list RPAREN [ LIDENT ]
-- On TIDENT shift to state 918
-- On type_list shift to state 919

State 918:
type_list -> TIDENT . [ RPAREN COMMA ]
-- On RPAREN reduce production type_list -> TIDENT
-- On COMMA reduce production type_list -> TIDENT

State 919:
type_list -> type_list . COMMA TIDENT [ RPAREN COMMA ]
type_vars -> LPAREN type_list . RPAREN [ LIDENT ]
-- On RPAREN shift to state 920
-- On COMMA shift to state 921

State 920:
type_vars -> LPAREN type_list RPAREN . [ LIDENT ]
-- On LIDENT reduce production type_vars -> LPAREN type_list RPAREN

State 921:
type_list -> type_list COMMA . TIDENT [ RPAREN COMMA ]
-- On TIDENT shift to state 922

State 922:
type_list -> type_list COMMA TIDENT . [ RPAREN COMMA ]
-- On RPAREN reduce production type_list -> type_list COMMA TIDENT
-- On COMMA reduce production type_list -> type_list COMMA TIDENT

State 923:
top_expr -> TYPE LIDENT . EQ opt_bar tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE LIDENT . EQ LBRACE lbl_type_list opt_comma RBRACE [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE LIDENT . EQ LBRACE lbl_type_list opt_comma error [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On EQ shift to state 924

State 924:
top_expr -> TYPE LIDENT EQ . opt_bar tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE LIDENT EQ . LBRACE lbl_type_list opt_comma RBRACE [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE LIDENT EQ . LBRACE lbl_type_list opt_comma error [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On LBRACE shift to state 925
-- On BAR shift to state 125
-- On opt_bar shift to state 951
-- On UIDENT reduce production opt_bar ->

State 925:
top_expr -> TYPE LIDENT EQ LBRACE . lbl_type_list opt_comma RBRACE [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE LIDENT EQ LBRACE . lbl_type_list opt_comma error [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On MUTABLE shift to state 926
-- On LIDENT shift to state 941
-- On lbl_type_list shift to state 944
-- On field_defn shift to state 950

State 926:
field_defn -> MUTABLE . LIDENT COLON type_expr [ error RBRACE COMMA ]
-- On LIDENT shift to state 927

State 927:
field_defn -> MUTABLE LIDENT . COLON type_expr [ error RBRACE COMMA ]
-- On COLON shift to state 928

State 928:
field_defn -> MUTABLE LIDENT COLON . type_expr [ error RBRACE COMMA ]
-- On UIDENT shift to state 492
-- On TIDENT shift to state 929
-- On LPAREN shift to state 930
-- On LIDENT shift to state 495
-- On type_expr shift to state 940
-- On label_longident shift to state 938

State 929:
type_expr -> TIDENT . [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
-- On error reduce production type_expr -> TIDENT
-- On UIDENT reduce production type_expr -> TIDENT
-- On STAR reduce production type_expr -> TIDENT
-- On RPAREN reduce production type_expr -> TIDENT
-- On RBRACE reduce production type_expr -> TIDENT
-- On MINUSGREATER reduce production type_expr -> TIDENT
-- On LIDENT reduce production type_expr -> TIDENT
-- On COMMA reduce production type_expr -> TIDENT

State 930:
type_expr -> LPAREN . type_expr RPAREN [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> LPAREN . type_expr error [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
-- On UIDENT shift to state 492
-- On TIDENT shift to state 929
-- On LPAREN shift to state 930
-- On LIDENT shift to state 495
-- On type_expr shift to state 931
-- On label_longident shift to state 938

State 931:
type_expr -> type_expr . label_longident [ error UIDENT STAR RPAREN MINUSGREATER LIDENT ]
type_expr -> type_expr . STAR type_expr [ error UIDENT STAR RPAREN MINUSGREATER LIDENT ]
type_expr -> type_expr . MINUSGREATER type_expr [ error UIDENT STAR RPAREN MINUSGREATER LIDENT ]
type_expr -> LPAREN type_expr . RPAREN [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> LPAREN type_expr . error [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
-- On error shift to state 932
-- On UIDENT shift to state 492
-- On STAR shift to state 933
-- On RPAREN shift to state 939
-- On MINUSGREATER shift to state 935
-- On LIDENT shift to state 495
-- On label_longident shift to state 937

State 932:
type_expr -> LPAREN type_expr error . [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
-- On error reduce production type_expr -> LPAREN type_expr error
-- On UIDENT reduce production type_expr -> LPAREN type_expr error
-- On STAR reduce production type_expr -> LPAREN type_expr error
-- On RPAREN reduce production type_expr -> LPAREN type_expr error
-- On RBRACE reduce production type_expr -> LPAREN type_expr error
-- On MINUSGREATER reduce production type_expr -> LPAREN type_expr error
-- On LIDENT reduce production type_expr -> LPAREN type_expr error
-- On COMMA reduce production type_expr -> LPAREN type_expr error

State 933:
type_expr -> type_expr STAR . type_expr [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
-- On UIDENT shift to state 492
-- On TIDENT shift to state 929
-- On LPAREN shift to state 930
-- On LIDENT shift to state 495
-- On type_expr shift to state 934
-- On label_longident shift to state 938

State 934:
type_expr -> type_expr . label_longident [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . STAR type_expr [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr STAR type_expr . [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . MINUSGREATER type_expr [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
-- On UIDENT shift to state 492
-- On MINUSGREATER shift to state 935
-- On LIDENT shift to state 495
-- On label_longident shift to state 937
-- On error reduce production type_expr -> type_expr STAR type_expr
-- On STAR reduce production type_expr -> type_expr STAR type_expr
-- On RPAREN reduce production type_expr -> type_expr STAR type_expr
-- On RBRACE reduce production type_expr -> type_expr STAR type_expr
-- On COMMA reduce production type_expr -> type_expr STAR type_expr
** Conflict on UIDENT MINUSGREATER LIDENT

State 935:
type_expr -> type_expr MINUSGREATER . type_expr [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
-- On UIDENT shift to state 492
-- On TIDENT shift to state 929
-- On LPAREN shift to state 930
-- On LIDENT shift to state 495
-- On type_expr shift to state 936
-- On label_longident shift to state 938

State 936:
type_expr -> type_expr . label_longident [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . STAR type_expr [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . MINUSGREATER type_expr [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr MINUSGREATER type_expr . [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
-- On UIDENT shift to state 492
-- On STAR shift to state 933
-- On MINUSGREATER shift to state 935
-- On LIDENT shift to state 495
-- On label_longident shift to state 937
-- On error reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On RPAREN reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On RBRACE reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On COMMA reduce production type_expr -> type_expr MINUSGREATER type_expr
** Conflict on UIDENT MINUSGREATER LIDENT

State 937:
type_expr -> type_expr label_longident . [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
-- On error reduce production type_expr -> type_expr label_longident
-- On UIDENT reduce production type_expr -> type_expr label_longident
-- On STAR reduce production type_expr -> type_expr label_longident
-- On RPAREN reduce production type_expr -> type_expr label_longident
-- On RBRACE reduce production type_expr -> type_expr label_longident
-- On MINUSGREATER reduce production type_expr -> type_expr label_longident
-- On LIDENT reduce production type_expr -> type_expr label_longident
-- On COMMA reduce production type_expr -> type_expr label_longident

State 938:
type_expr -> label_longident . [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
-- On error reduce production type_expr -> label_longident
-- On UIDENT reduce production type_expr -> label_longident
-- On STAR reduce production type_expr -> label_longident
-- On RPAREN reduce production type_expr -> label_longident
-- On RBRACE reduce production type_expr -> label_longident
-- On MINUSGREATER reduce production type_expr -> label_longident
-- On LIDENT reduce production type_expr -> label_longident
-- On COMMA reduce production type_expr -> label_longident

State 939:
type_expr -> LPAREN type_expr RPAREN . [ error UIDENT STAR RPAREN RBRACE MINUSGREATER LIDENT COMMA ]
-- On error reduce production type_expr -> LPAREN type_expr RPAREN
-- On UIDENT reduce production type_expr -> LPAREN type_expr RPAREN
-- On STAR reduce production type_expr -> LPAREN type_expr RPAREN
-- On RPAREN reduce production type_expr -> LPAREN type_expr RPAREN
-- On RBRACE reduce production type_expr -> LPAREN type_expr RPAREN
-- On MINUSGREATER reduce production type_expr -> LPAREN type_expr RPAREN
-- On LIDENT reduce production type_expr -> LPAREN type_expr RPAREN
-- On COMMA reduce production type_expr -> LPAREN type_expr RPAREN

State 940:
field_defn -> MUTABLE LIDENT COLON type_expr . [ error RBRACE COMMA ]
type_expr -> type_expr . label_longident [ error UIDENT STAR RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . STAR type_expr [ error UIDENT STAR RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . MINUSGREATER type_expr [ error UIDENT STAR RBRACE MINUSGREATER LIDENT COMMA ]
-- On UIDENT shift to state 492
-- On STAR shift to state 933
-- On MINUSGREATER shift to state 935
-- On LIDENT shift to state 495
-- On label_longident shift to state 937
-- On error reduce production field_defn -> MUTABLE LIDENT COLON type_expr
-- On RBRACE reduce production field_defn -> MUTABLE LIDENT COLON type_expr
-- On COMMA reduce production field_defn -> MUTABLE LIDENT COLON type_expr

State 941:
field_defn -> LIDENT . COLON type_expr [ error RBRACE COMMA ]
-- On COLON shift to state 942

State 942:
field_defn -> LIDENT COLON . type_expr [ error RBRACE COMMA ]
-- On UIDENT shift to state 492
-- On TIDENT shift to state 929
-- On LPAREN shift to state 930
-- On LIDENT shift to state 495
-- On type_expr shift to state 943
-- On label_longident shift to state 938

State 943:
field_defn -> LIDENT COLON type_expr . [ error RBRACE COMMA ]
type_expr -> type_expr . label_longident [ error UIDENT STAR RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . STAR type_expr [ error UIDENT STAR RBRACE MINUSGREATER LIDENT COMMA ]
type_expr -> type_expr . MINUSGREATER type_expr [ error UIDENT STAR RBRACE MINUSGREATER LIDENT COMMA ]
-- On UIDENT shift to state 492
-- On STAR shift to state 933
-- On MINUSGREATER shift to state 935
-- On LIDENT shift to state 495
-- On label_longident shift to state 937
-- On error reduce production field_defn -> LIDENT COLON type_expr
-- On RBRACE reduce production field_defn -> LIDENT COLON type_expr
-- On COMMA reduce production field_defn -> LIDENT COLON type_expr

State 944:
lbl_type_list -> lbl_type_list . COMMA field_defn [ error RBRACE COMMA ]
top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list . opt_comma RBRACE [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list . opt_comma error [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On COMMA shift to state 945
-- On opt_comma shift to state 947
-- On error reduce production opt_comma ->
-- On RBRACE reduce production opt_comma ->

State 945:
lbl_type_list -> lbl_type_list COMMA . field_defn [ error RBRACE COMMA ]
opt_comma -> COMMA . [ error RBRACE ]
-- On MUTABLE shift to state 926
-- On LIDENT shift to state 941
-- On field_defn shift to state 946
-- On error reduce production opt_comma -> COMMA
-- On RBRACE reduce production opt_comma -> COMMA

State 946:
lbl_type_list -> lbl_type_list COMMA field_defn . [ error RBRACE COMMA ]
-- On error reduce production lbl_type_list -> lbl_type_list COMMA field_defn
-- On RBRACE reduce production lbl_type_list -> lbl_type_list COMMA field_defn
-- On COMMA reduce production lbl_type_list -> lbl_type_list COMMA field_defn

State 947:
top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma . RBRACE [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma . error [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On error shift to state 948
-- On RBRACE shift to state 949

State 948:
top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On WHERE reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On UIDENT reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On TYPE reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On TRY reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On STRING reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On SHARP reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On SEMISEMI reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On RAISE reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On PREFIXOP reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On PLUS reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On OPEN reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On MODULE reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On MINUS reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On MATCH reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On LVECTOR reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On LPAREN reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On LMATRIX reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On LIDENT reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On LET reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On LBRACKBAR reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On LBRACK reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On LBRACE reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On LAZY reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On INT reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On IMAGINARY reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On IF reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On FUNCTION reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On FUN reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On FOR reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On FLOAT reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On EXCEPTION reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On EOF reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On DOLLAR reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On CHAR reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On CASE reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On BEGIN reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error
-- On ASSERT reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma error

State 949:
top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On WHERE reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On UIDENT reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On TYPE reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On TRY reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On STRING reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On SHARP reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On SEMISEMI reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On RAISE reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On PREFIXOP reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On PLUS reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On OPEN reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On MODULE reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On MINUS reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On MATCH reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On LVECTOR reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On LPAREN reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On LMATRIX reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On LIDENT reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On LET reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On LBRACKBAR reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On LBRACK reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On LBRACE reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On LAZY reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On INT reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On IMAGINARY reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On IF reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On FUNCTION reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On FUN reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On FOR reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On FLOAT reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On EXCEPTION reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On EOF reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On DOLLAR reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On CHAR reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On CASE reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On BEGIN reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE
-- On ASSERT reduce production top_expr -> TYPE LIDENT EQ LBRACE lbl_type_list opt_comma RBRACE

State 950:
lbl_type_list -> field_defn . [ error RBRACE COMMA ]
-- On error reduce production lbl_type_list -> field_defn
-- On RBRACE reduce production lbl_type_list -> field_defn
-- On COMMA reduce production lbl_type_list -> field_defn

State 951:
top_expr -> TYPE LIDENT EQ opt_bar . tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On UIDENT shift to state 952
-- On tag_list shift to state 966
-- On simple_tag_type shift to state 969

State 952:
simple_tag_type -> UIDENT . OF type_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
simple_tag_type -> UIDENT . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On OF shift to state 953
-- On WHILE reduce production simple_tag_type -> UIDENT
-- On WHERE reduce production simple_tag_type -> UIDENT
-- On UIDENT reduce production simple_tag_type -> UIDENT
-- On TYPE reduce production simple_tag_type -> UIDENT
-- On TRY reduce production simple_tag_type -> UIDENT
-- On STRING reduce production simple_tag_type -> UIDENT
-- On SHARP reduce production simple_tag_type -> UIDENT
-- On SEMISEMI reduce production simple_tag_type -> UIDENT
-- On RAISE reduce production simple_tag_type -> UIDENT
-- On PREFIXOP reduce production simple_tag_type -> UIDENT
-- On PLUS reduce production simple_tag_type -> UIDENT
-- On OPEN reduce production simple_tag_type -> UIDENT
-- On MODULE reduce production simple_tag_type -> UIDENT
-- On MINUS reduce production simple_tag_type -> UIDENT
-- On MATCH reduce production simple_tag_type -> UIDENT
-- On LVECTOR reduce production simple_tag_type -> UIDENT
-- On LPAREN reduce production simple_tag_type -> UIDENT
-- On LMATRIX reduce production simple_tag_type -> UIDENT
-- On LIDENT reduce production simple_tag_type -> UIDENT
-- On LET reduce production simple_tag_type -> UIDENT
-- On LBRACKBAR reduce production simple_tag_type -> UIDENT
-- On LBRACK reduce production simple_tag_type -> UIDENT
-- On LBRACE reduce production simple_tag_type -> UIDENT
-- On LAZY reduce production simple_tag_type -> UIDENT
-- On INT reduce production simple_tag_type -> UIDENT
-- On IMAGINARY reduce production simple_tag_type -> UIDENT
-- On IF reduce production simple_tag_type -> UIDENT
-- On FUNCTION reduce production simple_tag_type -> UIDENT
-- On FUN reduce production simple_tag_type -> UIDENT
-- On FOR reduce production simple_tag_type -> UIDENT
-- On FLOAT reduce production simple_tag_type -> UIDENT
-- On EXCEPTION reduce production simple_tag_type -> UIDENT
-- On EOF reduce production simple_tag_type -> UIDENT
-- On DOLLAR reduce production simple_tag_type -> UIDENT
-- On CHAR reduce production simple_tag_type -> UIDENT
-- On CASE reduce production simple_tag_type -> UIDENT
-- On BEGIN reduce production simple_tag_type -> UIDENT
-- On BAR reduce production simple_tag_type -> UIDENT
-- On ASSERT reduce production simple_tag_type -> UIDENT

State 953:
simple_tag_type -> UIDENT OF . type_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On UIDENT shift to state 213
-- On TIDENT shift to state 954
-- On LPAREN shift to state 955
-- On LIDENT shift to state 216
-- On type_expr shift to state 959
-- On label_longident shift to state 965

State 954:
type_expr -> TIDENT . [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On WHILE reduce production type_expr -> TIDENT
-- On WHERE reduce production type_expr -> TIDENT
-- On UIDENT reduce production type_expr -> TIDENT
-- On TYPE reduce production type_expr -> TIDENT
-- On TRY reduce production type_expr -> TIDENT
-- On STRING reduce production type_expr -> TIDENT
-- On STAR reduce production type_expr -> TIDENT
-- On SHARP reduce production type_expr -> TIDENT
-- On SEMISEMI reduce production type_expr -> TIDENT
-- On RAISE reduce production type_expr -> TIDENT
-- On PREFIXOP reduce production type_expr -> TIDENT
-- On PLUS reduce production type_expr -> TIDENT
-- On OPEN reduce production type_expr -> TIDENT
-- On MODULE reduce production type_expr -> TIDENT
-- On MINUSGREATER reduce production type_expr -> TIDENT
-- On MINUS reduce production type_expr -> TIDENT
-- On MATCH reduce production type_expr -> TIDENT
-- On LVECTOR reduce production type_expr -> TIDENT
-- On LPAREN reduce production type_expr -> TIDENT
-- On LMATRIX reduce production type_expr -> TIDENT
-- On LIDENT reduce production type_expr -> TIDENT
-- On LET reduce production type_expr -> TIDENT
-- On LBRACKBAR reduce production type_expr -> TIDENT
-- On LBRACK reduce production type_expr -> TIDENT
-- On LBRACE reduce production type_expr -> TIDENT
-- On LAZY reduce production type_expr -> TIDENT
-- On INT reduce production type_expr -> TIDENT
-- On IMAGINARY reduce production type_expr -> TIDENT
-- On IF reduce production type_expr -> TIDENT
-- On FUNCTION reduce production type_expr -> TIDENT
-- On FUN reduce production type_expr -> TIDENT
-- On FOR reduce production type_expr -> TIDENT
-- On FLOAT reduce production type_expr -> TIDENT
-- On EXCEPTION reduce production type_expr -> TIDENT
-- On EOF reduce production type_expr -> TIDENT
-- On DOLLAR reduce production type_expr -> TIDENT
-- On CHAR reduce production type_expr -> TIDENT
-- On CASE reduce production type_expr -> TIDENT
-- On BEGIN reduce production type_expr -> TIDENT
-- On BAR reduce production type_expr -> TIDENT
-- On ASSERT reduce production type_expr -> TIDENT

State 955:
type_expr -> LPAREN . type_expr RPAREN [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> LPAREN . type_expr error [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On UIDENT shift to state 492
-- On TIDENT shift to state 929
-- On LPAREN shift to state 930
-- On LIDENT shift to state 495
-- On type_expr shift to state 956
-- On label_longident shift to state 938

State 956:
type_expr -> type_expr . label_longident [ error UIDENT STAR RPAREN MINUSGREATER LIDENT ]
type_expr -> type_expr . STAR type_expr [ error UIDENT STAR RPAREN MINUSGREATER LIDENT ]
type_expr -> type_expr . MINUSGREATER type_expr [ error UIDENT STAR RPAREN MINUSGREATER LIDENT ]
type_expr -> LPAREN type_expr . RPAREN [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> LPAREN type_expr . error [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On error shift to state 957
-- On UIDENT shift to state 492
-- On STAR shift to state 933
-- On RPAREN shift to state 958
-- On MINUSGREATER shift to state 935
-- On LIDENT shift to state 495
-- On label_longident shift to state 937

State 957:
type_expr -> LPAREN type_expr error . [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On WHILE reduce production type_expr -> LPAREN type_expr error
-- On WHERE reduce production type_expr -> LPAREN type_expr error
-- On UIDENT reduce production type_expr -> LPAREN type_expr error
-- On TYPE reduce production type_expr -> LPAREN type_expr error
-- On TRY reduce production type_expr -> LPAREN type_expr error
-- On STRING reduce production type_expr -> LPAREN type_expr error
-- On STAR reduce production type_expr -> LPAREN type_expr error
-- On SHARP reduce production type_expr -> LPAREN type_expr error
-- On SEMISEMI reduce production type_expr -> LPAREN type_expr error
-- On RAISE reduce production type_expr -> LPAREN type_expr error
-- On PREFIXOP reduce production type_expr -> LPAREN type_expr error
-- On PLUS reduce production type_expr -> LPAREN type_expr error
-- On OPEN reduce production type_expr -> LPAREN type_expr error
-- On MODULE reduce production type_expr -> LPAREN type_expr error
-- On MINUSGREATER reduce production type_expr -> LPAREN type_expr error
-- On MINUS reduce production type_expr -> LPAREN type_expr error
-- On MATCH reduce production type_expr -> LPAREN type_expr error
-- On LVECTOR reduce production type_expr -> LPAREN type_expr error
-- On LPAREN reduce production type_expr -> LPAREN type_expr error
-- On LMATRIX reduce production type_expr -> LPAREN type_expr error
-- On LIDENT reduce production type_expr -> LPAREN type_expr error
-- On LET reduce production type_expr -> LPAREN type_expr error
-- On LBRACKBAR reduce production type_expr -> LPAREN type_expr error
-- On LBRACK reduce production type_expr -> LPAREN type_expr error
-- On LBRACE reduce production type_expr -> LPAREN type_expr error
-- On LAZY reduce production type_expr -> LPAREN type_expr error
-- On INT reduce production type_expr -> LPAREN type_expr error
-- On IMAGINARY reduce production type_expr -> LPAREN type_expr error
-- On IF reduce production type_expr -> LPAREN type_expr error
-- On FUNCTION reduce production type_expr -> LPAREN type_expr error
-- On FUN reduce production type_expr -> LPAREN type_expr error
-- On FOR reduce production type_expr -> LPAREN type_expr error
-- On FLOAT reduce production type_expr -> LPAREN type_expr error
-- On EXCEPTION reduce production type_expr -> LPAREN type_expr error
-- On EOF reduce production type_expr -> LPAREN type_expr error
-- On DOLLAR reduce production type_expr -> LPAREN type_expr error
-- On CHAR reduce production type_expr -> LPAREN type_expr error
-- On CASE reduce production type_expr -> LPAREN type_expr error
-- On BEGIN reduce production type_expr -> LPAREN type_expr error
-- On BAR reduce production type_expr -> LPAREN type_expr error
-- On ASSERT reduce production type_expr -> LPAREN type_expr error

State 958:
type_expr -> LPAREN type_expr RPAREN . [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On WHILE reduce production type_expr -> LPAREN type_expr RPAREN
-- On WHERE reduce production type_expr -> LPAREN type_expr RPAREN
-- On UIDENT reduce production type_expr -> LPAREN type_expr RPAREN
-- On TYPE reduce production type_expr -> LPAREN type_expr RPAREN
-- On TRY reduce production type_expr -> LPAREN type_expr RPAREN
-- On STRING reduce production type_expr -> LPAREN type_expr RPAREN
-- On STAR reduce production type_expr -> LPAREN type_expr RPAREN
-- On SHARP reduce production type_expr -> LPAREN type_expr RPAREN
-- On SEMISEMI reduce production type_expr -> LPAREN type_expr RPAREN
-- On RAISE reduce production type_expr -> LPAREN type_expr RPAREN
-- On PREFIXOP reduce production type_expr -> LPAREN type_expr RPAREN
-- On PLUS reduce production type_expr -> LPAREN type_expr RPAREN
-- On OPEN reduce production type_expr -> LPAREN type_expr RPAREN
-- On MODULE reduce production type_expr -> LPAREN type_expr RPAREN
-- On MINUSGREATER reduce production type_expr -> LPAREN type_expr RPAREN
-- On MINUS reduce production type_expr -> LPAREN type_expr RPAREN
-- On MATCH reduce production type_expr -> LPAREN type_expr RPAREN
-- On LVECTOR reduce production type_expr -> LPAREN type_expr RPAREN
-- On LPAREN reduce production type_expr -> LPAREN type_expr RPAREN
-- On LMATRIX reduce production type_expr -> LPAREN type_expr RPAREN
-- On LIDENT reduce production type_expr -> LPAREN type_expr RPAREN
-- On LET reduce production type_expr -> LPAREN type_expr RPAREN
-- On LBRACKBAR reduce production type_expr -> LPAREN type_expr RPAREN
-- On LBRACK reduce production type_expr -> LPAREN type_expr RPAREN
-- On LBRACE reduce production type_expr -> LPAREN type_expr RPAREN
-- On LAZY reduce production type_expr -> LPAREN type_expr RPAREN
-- On INT reduce production type_expr -> LPAREN type_expr RPAREN
-- On IMAGINARY reduce production type_expr -> LPAREN type_expr RPAREN
-- On IF reduce production type_expr -> LPAREN type_expr RPAREN
-- On FUNCTION reduce production type_expr -> LPAREN type_expr RPAREN
-- On FUN reduce production type_expr -> LPAREN type_expr RPAREN
-- On FOR reduce production type_expr -> LPAREN type_expr RPAREN
-- On FLOAT reduce production type_expr -> LPAREN type_expr RPAREN
-- On EXCEPTION reduce production type_expr -> LPAREN type_expr RPAREN
-- On EOF reduce production type_expr -> LPAREN type_expr RPAREN
-- On DOLLAR reduce production type_expr -> LPAREN type_expr RPAREN
-- On CHAR reduce production type_expr -> LPAREN type_expr RPAREN
-- On CASE reduce production type_expr -> LPAREN type_expr RPAREN
-- On BEGIN reduce production type_expr -> LPAREN type_expr RPAREN
-- On BAR reduce production type_expr -> LPAREN type_expr RPAREN
-- On ASSERT reduce production type_expr -> LPAREN type_expr RPAREN

State 959:
simple_tag_type -> UIDENT OF type_expr . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr . label_longident [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr . STAR type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr . MINUSGREATER type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On UIDENT shift to state 213
-- On STAR shift to state 960
-- On MINUSGREATER shift to state 962
-- On LIDENT shift to state 216
-- On label_longident shift to state 964
-- On WHILE reduce production simple_tag_type -> UIDENT OF type_expr
-- On WHERE reduce production simple_tag_type -> UIDENT OF type_expr
-- On TYPE reduce production simple_tag_type -> UIDENT OF type_expr
-- On TRY reduce production simple_tag_type -> UIDENT OF type_expr
-- On STRING reduce production simple_tag_type -> UIDENT OF type_expr
-- On SHARP reduce production simple_tag_type -> UIDENT OF type_expr
-- On SEMISEMI reduce production simple_tag_type -> UIDENT OF type_expr
-- On RAISE reduce production simple_tag_type -> UIDENT OF type_expr
-- On PREFIXOP reduce production simple_tag_type -> UIDENT OF type_expr
-- On PLUS reduce production simple_tag_type -> UIDENT OF type_expr
-- On OPEN reduce production simple_tag_type -> UIDENT OF type_expr
-- On MODULE reduce production simple_tag_type -> UIDENT OF type_expr
-- On MINUS reduce production simple_tag_type -> UIDENT OF type_expr
-- On MATCH reduce production simple_tag_type -> UIDENT OF type_expr
-- On LVECTOR reduce production simple_tag_type -> UIDENT OF type_expr
-- On LPAREN reduce production simple_tag_type -> UIDENT OF type_expr
-- On LMATRIX reduce production simple_tag_type -> UIDENT OF type_expr
-- On LET reduce production simple_tag_type -> UIDENT OF type_expr
-- On LBRACKBAR reduce production simple_tag_type -> UIDENT OF type_expr
-- On LBRACK reduce production simple_tag_type -> UIDENT OF type_expr
-- On LBRACE reduce production simple_tag_type -> UIDENT OF type_expr
-- On LAZY reduce production simple_tag_type -> UIDENT OF type_expr
-- On INT reduce production simple_tag_type -> UIDENT OF type_expr
-- On IMAGINARY reduce production simple_tag_type -> UIDENT OF type_expr
-- On IF reduce production simple_tag_type -> UIDENT OF type_expr
-- On FUNCTION reduce production simple_tag_type -> UIDENT OF type_expr
-- On FUN reduce production simple_tag_type -> UIDENT OF type_expr
-- On FOR reduce production simple_tag_type -> UIDENT OF type_expr
-- On FLOAT reduce production simple_tag_type -> UIDENT OF type_expr
-- On EXCEPTION reduce production simple_tag_type -> UIDENT OF type_expr
-- On EOF reduce production simple_tag_type -> UIDENT OF type_expr
-- On DOLLAR reduce production simple_tag_type -> UIDENT OF type_expr
-- On CHAR reduce production simple_tag_type -> UIDENT OF type_expr
-- On CASE reduce production simple_tag_type -> UIDENT OF type_expr
-- On BEGIN reduce production simple_tag_type -> UIDENT OF type_expr
-- On BAR reduce production simple_tag_type -> UIDENT OF type_expr
-- On ASSERT reduce production simple_tag_type -> UIDENT OF type_expr
** Conflict on UIDENT LIDENT

State 960:
type_expr -> type_expr STAR . type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On UIDENT shift to state 213
-- On TIDENT shift to state 954
-- On LPAREN shift to state 955
-- On LIDENT shift to state 216
-- On type_expr shift to state 961
-- On label_longident shift to state 965

State 961:
type_expr -> type_expr . label_longident [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr . STAR type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr STAR type_expr . [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr . MINUSGREATER type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On UIDENT shift to state 213
-- On MINUSGREATER shift to state 962
-- On LIDENT shift to state 216
-- On label_longident shift to state 964
-- On WHILE reduce production type_expr -> type_expr STAR type_expr
-- On WHERE reduce production type_expr -> type_expr STAR type_expr
-- On TYPE reduce production type_expr -> type_expr STAR type_expr
-- On TRY reduce production type_expr -> type_expr STAR type_expr
-- On STRING reduce production type_expr -> type_expr STAR type_expr
-- On STAR reduce production type_expr -> type_expr STAR type_expr
-- On SHARP reduce production type_expr -> type_expr STAR type_expr
-- On SEMISEMI reduce production type_expr -> type_expr STAR type_expr
-- On RAISE reduce production type_expr -> type_expr STAR type_expr
-- On PREFIXOP reduce production type_expr -> type_expr STAR type_expr
-- On PLUS reduce production type_expr -> type_expr STAR type_expr
-- On OPEN reduce production type_expr -> type_expr STAR type_expr
-- On MODULE reduce production type_expr -> type_expr STAR type_expr
-- On MINUS reduce production type_expr -> type_expr STAR type_expr
-- On MATCH reduce production type_expr -> type_expr STAR type_expr
-- On LVECTOR reduce production type_expr -> type_expr STAR type_expr
-- On LPAREN reduce production type_expr -> type_expr STAR type_expr
-- On LMATRIX reduce production type_expr -> type_expr STAR type_expr
-- On LET reduce production type_expr -> type_expr STAR type_expr
-- On LBRACKBAR reduce production type_expr -> type_expr STAR type_expr
-- On LBRACK reduce production type_expr -> type_expr STAR type_expr
-- On LBRACE reduce production type_expr -> type_expr STAR type_expr
-- On LAZY reduce production type_expr -> type_expr STAR type_expr
-- On INT reduce production type_expr -> type_expr STAR type_expr
-- On IMAGINARY reduce production type_expr -> type_expr STAR type_expr
-- On IF reduce production type_expr -> type_expr STAR type_expr
-- On FUNCTION reduce production type_expr -> type_expr STAR type_expr
-- On FUN reduce production type_expr -> type_expr STAR type_expr
-- On FOR reduce production type_expr -> type_expr STAR type_expr
-- On FLOAT reduce production type_expr -> type_expr STAR type_expr
-- On EXCEPTION reduce production type_expr -> type_expr STAR type_expr
-- On EOF reduce production type_expr -> type_expr STAR type_expr
-- On DOLLAR reduce production type_expr -> type_expr STAR type_expr
-- On CHAR reduce production type_expr -> type_expr STAR type_expr
-- On CASE reduce production type_expr -> type_expr STAR type_expr
-- On BEGIN reduce production type_expr -> type_expr STAR type_expr
-- On BAR reduce production type_expr -> type_expr STAR type_expr
-- On ASSERT reduce production type_expr -> type_expr STAR type_expr
** Conflict on UIDENT MINUSGREATER LIDENT

State 962:
type_expr -> type_expr MINUSGREATER . type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On UIDENT shift to state 213
-- On TIDENT shift to state 954
-- On LPAREN shift to state 955
-- On LIDENT shift to state 216
-- On type_expr shift to state 963
-- On label_longident shift to state 965

State 963:
type_expr -> type_expr . label_longident [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr . STAR type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr . MINUSGREATER type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
type_expr -> type_expr MINUSGREATER type_expr . [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On UIDENT shift to state 213
-- On STAR shift to state 960
-- On MINUSGREATER shift to state 962
-- On LIDENT shift to state 216
-- On label_longident shift to state 964
-- On WHILE reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On WHERE reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On TYPE reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On TRY reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On STRING reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On SHARP reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On SEMISEMI reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On RAISE reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On PREFIXOP reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On PLUS reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On OPEN reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On MODULE reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On MINUS reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On MATCH reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On LVECTOR reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On LPAREN reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On LMATRIX reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On LET reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On LBRACKBAR reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On LBRACK reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On LBRACE reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On LAZY reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On INT reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On IMAGINARY reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On IF reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On FUNCTION reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On FUN reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On FOR reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On FLOAT reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On EXCEPTION reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On EOF reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On DOLLAR reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On CHAR reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On CASE reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On BEGIN reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On BAR reduce production type_expr -> type_expr MINUSGREATER type_expr
-- On ASSERT reduce production type_expr -> type_expr MINUSGREATER type_expr
** Conflict on UIDENT MINUSGREATER LIDENT

State 964:
type_expr -> type_expr label_longident . [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On WHILE reduce production type_expr -> type_expr label_longident
-- On WHERE reduce production type_expr -> type_expr label_longident
-- On UIDENT reduce production type_expr -> type_expr label_longident
-- On TYPE reduce production type_expr -> type_expr label_longident
-- On TRY reduce production type_expr -> type_expr label_longident
-- On STRING reduce production type_expr -> type_expr label_longident
-- On STAR reduce production type_expr -> type_expr label_longident
-- On SHARP reduce production type_expr -> type_expr label_longident
-- On SEMISEMI reduce production type_expr -> type_expr label_longident
-- On RAISE reduce production type_expr -> type_expr label_longident
-- On PREFIXOP reduce production type_expr -> type_expr label_longident
-- On PLUS reduce production type_expr -> type_expr label_longident
-- On OPEN reduce production type_expr -> type_expr label_longident
-- On MODULE reduce production type_expr -> type_expr label_longident
-- On MINUSGREATER reduce production type_expr -> type_expr label_longident
-- On MINUS reduce production type_expr -> type_expr label_longident
-- On MATCH reduce production type_expr -> type_expr label_longident
-- On LVECTOR reduce production type_expr -> type_expr label_longident
-- On LPAREN reduce production type_expr -> type_expr label_longident
-- On LMATRIX reduce production type_expr -> type_expr label_longident
-- On LIDENT reduce production type_expr -> type_expr label_longident
-- On LET reduce production type_expr -> type_expr label_longident
-- On LBRACKBAR reduce production type_expr -> type_expr label_longident
-- On LBRACK reduce production type_expr -> type_expr label_longident
-- On LBRACE reduce production type_expr -> type_expr label_longident
-- On LAZY reduce production type_expr -> type_expr label_longident
-- On INT reduce production type_expr -> type_expr label_longident
-- On IMAGINARY reduce production type_expr -> type_expr label_longident
-- On IF reduce production type_expr -> type_expr label_longident
-- On FUNCTION reduce production type_expr -> type_expr label_longident
-- On FUN reduce production type_expr -> type_expr label_longident
-- On FOR reduce production type_expr -> type_expr label_longident
-- On FLOAT reduce production type_expr -> type_expr label_longident
-- On EXCEPTION reduce production type_expr -> type_expr label_longident
-- On EOF reduce production type_expr -> type_expr label_longident
-- On DOLLAR reduce production type_expr -> type_expr label_longident
-- On CHAR reduce production type_expr -> type_expr label_longident
-- On CASE reduce production type_expr -> type_expr label_longident
-- On BEGIN reduce production type_expr -> type_expr label_longident
-- On BAR reduce production type_expr -> type_expr label_longident
-- On ASSERT reduce production type_expr -> type_expr label_longident

State 965:
type_expr -> label_longident . [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On WHILE reduce production type_expr -> label_longident
-- On WHERE reduce production type_expr -> label_longident
-- On UIDENT reduce production type_expr -> label_longident
-- On TYPE reduce production type_expr -> label_longident
-- On TRY reduce production type_expr -> label_longident
-- On STRING reduce production type_expr -> label_longident
-- On STAR reduce production type_expr -> label_longident
-- On SHARP reduce production type_expr -> label_longident
-- On SEMISEMI reduce production type_expr -> label_longident
-- On RAISE reduce production type_expr -> label_longident
-- On PREFIXOP reduce production type_expr -> label_longident
-- On PLUS reduce production type_expr -> label_longident
-- On OPEN reduce production type_expr -> label_longident
-- On MODULE reduce production type_expr -> label_longident
-- On MINUSGREATER reduce production type_expr -> label_longident
-- On MINUS reduce production type_expr -> label_longident
-- On MATCH reduce production type_expr -> label_longident
-- On LVECTOR reduce production type_expr -> label_longident
-- On LPAREN reduce production type_expr -> label_longident
-- On LMATRIX reduce production type_expr -> label_longident
-- On LIDENT reduce production type_expr -> label_longident
-- On LET reduce production type_expr -> label_longident
-- On LBRACKBAR reduce production type_expr -> label_longident
-- On LBRACK reduce production type_expr -> label_longident
-- On LBRACE reduce production type_expr -> label_longident
-- On LAZY reduce production type_expr -> label_longident
-- On INT reduce production type_expr -> label_longident
-- On IMAGINARY reduce production type_expr -> label_longident
-- On IF reduce production type_expr -> label_longident
-- On FUNCTION reduce production type_expr -> label_longident
-- On FUN reduce production type_expr -> label_longident
-- On FOR reduce production type_expr -> label_longident
-- On FLOAT reduce production type_expr -> label_longident
-- On EXCEPTION reduce production type_expr -> label_longident
-- On EOF reduce production type_expr -> label_longident
-- On DOLLAR reduce production type_expr -> label_longident
-- On CHAR reduce production type_expr -> label_longident
-- On CASE reduce production type_expr -> label_longident
-- On BEGIN reduce production type_expr -> label_longident
-- On BAR reduce production type_expr -> label_longident
-- On ASSERT reduce production type_expr -> label_longident

State 966:
tag_list -> tag_list . BAR simple_tag_type [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
top_expr -> TYPE LIDENT EQ opt_bar tag_list . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On BAR shift to state 967
-- On WHILE reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On WHERE reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On UIDENT reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On TYPE reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On TRY reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On STRING reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On SHARP reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On SEMISEMI reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On RAISE reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On PREFIXOP reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On PLUS reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On OPEN reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On MODULE reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On MINUS reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On MATCH reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On LVECTOR reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On LPAREN reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On LMATRIX reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On LIDENT reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On LET reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On LBRACKBAR reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On LBRACK reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On LBRACE reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On LAZY reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On INT reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On IMAGINARY reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On IF reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On FUNCTION reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On FUN reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On FOR reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On FLOAT reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On EXCEPTION reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On EOF reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On DOLLAR reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On CHAR reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On CASE reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On BEGIN reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list
-- On ASSERT reduce production top_expr -> TYPE LIDENT EQ opt_bar tag_list

State 967:
tag_list -> tag_list BAR . simple_tag_type [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On UIDENT shift to state 952
-- On simple_tag_type shift to state 968

State 968:
tag_list -> tag_list BAR simple_tag_type . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On WHILE reduce production tag_list -> tag_list BAR simple_tag_type
-- On WHERE reduce production tag_list -> tag_list BAR simple_tag_type
-- On UIDENT reduce production tag_list -> tag_list BAR simple_tag_type
-- On TYPE reduce production tag_list -> tag_list BAR simple_tag_type
-- On TRY reduce production tag_list -> tag_list BAR simple_tag_type
-- On STRING reduce production tag_list -> tag_list BAR simple_tag_type
-- On SHARP reduce production tag_list -> tag_list BAR simple_tag_type
-- On SEMISEMI reduce production tag_list -> tag_list BAR simple_tag_type
-- On RAISE reduce production tag_list -> tag_list BAR simple_tag_type
-- On PREFIXOP reduce production tag_list -> tag_list BAR simple_tag_type
-- On PLUS reduce production tag_list -> tag_list BAR simple_tag_type
-- On OPEN reduce production tag_list -> tag_list BAR simple_tag_type
-- On MODULE reduce production tag_list -> tag_list BAR simple_tag_type
-- On MINUS reduce production tag_list -> tag_list BAR simple_tag_type
-- On MATCH reduce production tag_list -> tag_list BAR simple_tag_type
-- On LVECTOR reduce production tag_list -> tag_list BAR simple_tag_type
-- On LPAREN reduce production tag_list -> tag_list BAR simple_tag_type
-- On LMATRIX reduce production tag_list -> tag_list BAR simple_tag_type
-- On LIDENT reduce production tag_list -> tag_list BAR simple_tag_type
-- On LET reduce production tag_list -> tag_list BAR simple_tag_type
-- On LBRACKBAR reduce production tag_list -> tag_list BAR simple_tag_type
-- On LBRACK reduce production tag_list -> tag_list BAR simple_tag_type
-- On LBRACE reduce production tag_list -> tag_list BAR simple_tag_type
-- On LAZY reduce production tag_list -> tag_list BAR simple_tag_type
-- On INT reduce production tag_list -> tag_list BAR simple_tag_type
-- On IMAGINARY reduce production tag_list -> tag_list BAR simple_tag_type
-- On IF reduce production tag_list -> tag_list BAR simple_tag_type
-- On FUNCTION reduce production tag_list -> tag_list BAR simple_tag_type
-- On FUN reduce production tag_list -> tag_list BAR simple_tag_type
-- On FOR reduce production tag_list -> tag_list BAR simple_tag_type
-- On FLOAT reduce production tag_list -> tag_list BAR simple_tag_type
-- On EXCEPTION reduce production tag_list -> tag_list BAR simple_tag_type
-- On EOF reduce production tag_list -> tag_list BAR simple_tag_type
-- On DOLLAR reduce production tag_list -> tag_list BAR simple_tag_type
-- On CHAR reduce production tag_list -> tag_list BAR simple_tag_type
-- On CASE reduce production tag_list -> tag_list BAR simple_tag_type
-- On BEGIN reduce production tag_list -> tag_list BAR simple_tag_type
-- On BAR reduce production tag_list -> tag_list BAR simple_tag_type
-- On ASSERT reduce production tag_list -> tag_list BAR simple_tag_type

State 969:
tag_list -> simple_tag_type . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
-- On WHILE reduce production tag_list -> simple_tag_type
-- On WHERE reduce production tag_list -> simple_tag_type
-- On UIDENT reduce production tag_list -> simple_tag_type
-- On TYPE reduce production tag_list -> simple_tag_type
-- On TRY reduce production tag_list -> simple_tag_type
-- On STRING reduce production tag_list -> simple_tag_type
-- On SHARP reduce production tag_list -> simple_tag_type
-- On SEMISEMI reduce production tag_list -> simple_tag_type
-- On RAISE reduce production tag_list -> simple_tag_type
-- On PREFIXOP reduce production tag_list -> simple_tag_type
-- On PLUS reduce production tag_list -> simple_tag_type
-- On OPEN reduce production tag_list -> simple_tag_type
-- On MODULE reduce production tag_list -> simple_tag_type
-- On MINUS reduce production tag_list -> simple_tag_type
-- On MATCH reduce production tag_list -> simple_tag_type
-- On LVECTOR reduce production tag_list -> simple_tag_type
-- On LPAREN reduce production tag_list -> simple_tag_type
-- On LMATRIX reduce production tag_list -> simple_tag_type
-- On LIDENT reduce production tag_list -> simple_tag_type
-- On LET reduce production tag_list -> simple_tag_type
-- On LBRACKBAR reduce production tag_list -> simple_tag_type
-- On LBRACK reduce production tag_list -> simple_tag_type
-- On LBRACE reduce production tag_list -> simple_tag_type
-- On LAZY reduce production tag_list -> simple_tag_type
-- On INT reduce production tag_list -> simple_tag_type
-- On IMAGINARY reduce production tag_list -> simple_tag_type
-- On IF reduce production tag_list -> simple_tag_type
-- On FUNCTION reduce production tag_list -> simple_tag_type
-- On FUN reduce production tag_list -> simple_tag_type
-- On FOR reduce production tag_list -> simple_tag_type
-- On FLOAT reduce production tag_list -> simple_tag_type
-- On EXCEPTION reduce production tag_list -> simple_tag_type
-- On EOF reduce production tag_list -> simple_tag_type
-- On DOLLAR reduce production tag_list -> simple_tag_type
-- On CHAR reduce production tag_list -> simple_tag_type
-- On CASE reduce production tag_list -> simple_tag_type
-- On BEGIN reduce production tag_list -> simple_tag_type
-- On BAR reduce production tag_list -> simple_tag_type
-- On ASSERT reduce production tag_list -> simple_tag_type

State 970:
top_expr -> TYPE type_vars . LIDENT EQ opt_bar tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On LIDENT shift to state 971

State 971:
top_expr -> TYPE type_vars LIDENT . EQ opt_bar tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On EQ shift to state 972

State 972:
top_expr -> TYPE type_vars LIDENT EQ . opt_bar tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On BAR shift to state 125
-- On opt_bar shift to state 973
-- On UIDENT reduce production opt_bar ->

State 973:
top_expr -> TYPE type_vars LIDENT EQ opt_bar . tag_list [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On UIDENT shift to state 952
-- On tag_list shift to state 974
-- On simple_tag_type shift to state 969

State 974:
tag_list -> tag_list . BAR simple_tag_type [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN BAR ASSERT ]
top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On BAR shift to state 967
-- On WHILE reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On WHERE reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On UIDENT reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On TYPE reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On TRY reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On STRING reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On SHARP reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On SEMISEMI reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On RAISE reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On PREFIXOP reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On PLUS reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On OPEN reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On MODULE reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On MINUS reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On MATCH reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On LVECTOR reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On LPAREN reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On LMATRIX reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On LIDENT reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On LET reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On LBRACKBAR reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On LBRACK reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On LBRACE reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On LAZY reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On INT reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On IMAGINARY reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On IF reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On FUNCTION reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On FUN reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On FOR reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On FLOAT reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On EXCEPTION reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On EOF reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On DOLLAR reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On CHAR reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On CASE reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On BEGIN reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list
-- On ASSERT reduce production top_expr -> TYPE type_vars LIDENT EQ opt_bar tag_list

State 975:
top_expr -> SEMISEMI . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE reduce production top_expr -> SEMISEMI
-- On WHERE reduce production top_expr -> SEMISEMI
-- On UIDENT reduce production top_expr -> SEMISEMI
-- On TYPE reduce production top_expr -> SEMISEMI
-- On TRY reduce production top_expr -> SEMISEMI
-- On STRING reduce production top_expr -> SEMISEMI
-- On SHARP reduce production top_expr -> SEMISEMI
-- On SEMISEMI reduce production top_expr -> SEMISEMI
-- On RAISE reduce production top_expr -> SEMISEMI
-- On PREFIXOP reduce production top_expr -> SEMISEMI
-- On PLUS reduce production top_expr -> SEMISEMI
-- On OPEN reduce production top_expr -> SEMISEMI
-- On MODULE reduce production top_expr -> SEMISEMI
-- On MINUS reduce production top_expr -> SEMISEMI
-- On MATCH reduce production top_expr -> SEMISEMI
-- On LVECTOR reduce production top_expr -> SEMISEMI
-- On LPAREN reduce production top_expr -> SEMISEMI
-- On LMATRIX reduce production top_expr -> SEMISEMI
-- On LIDENT reduce production top_expr -> SEMISEMI
-- On LET reduce production top_expr -> SEMISEMI
-- On LBRACKBAR reduce production top_expr -> SEMISEMI
-- On LBRACK reduce production top_expr -> SEMISEMI
-- On LBRACE reduce production top_expr -> SEMISEMI
-- On LAZY reduce production top_expr -> SEMISEMI
-- On INT reduce production top_expr -> SEMISEMI
-- On IMAGINARY reduce production top_expr -> SEMISEMI
-- On IF reduce production top_expr -> SEMISEMI
-- On FUNCTION reduce production top_expr -> SEMISEMI
-- On FUN reduce production top_expr -> SEMISEMI
-- On FOR reduce production top_expr -> SEMISEMI
-- On FLOAT reduce production top_expr -> SEMISEMI
-- On EXCEPTION reduce production top_expr -> SEMISEMI
-- On EOF reduce production top_expr -> SEMISEMI
-- On DOLLAR reduce production top_expr -> SEMISEMI
-- On CHAR reduce production top_expr -> SEMISEMI
-- On CASE reduce production top_expr -> SEMISEMI
-- On BEGIN reduce production top_expr -> SEMISEMI
-- On ASSERT reduce production top_expr -> SEMISEMI

State 976:
top_expr -> OPEN . mod_ident [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On UIDENT shift to state 73
-- On mod_ident shift to state 977

State 977:
top_expr -> OPEN mod_ident . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE reduce production top_expr -> OPEN mod_ident
-- On WHERE reduce production top_expr -> OPEN mod_ident
-- On UIDENT reduce production top_expr -> OPEN mod_ident
-- On TYPE reduce production top_expr -> OPEN mod_ident
-- On TRY reduce production top_expr -> OPEN mod_ident
-- On STRING reduce production top_expr -> OPEN mod_ident
-- On SHARP reduce production top_expr -> OPEN mod_ident
-- On SEMISEMI reduce production top_expr -> OPEN mod_ident
-- On RAISE reduce production top_expr -> OPEN mod_ident
-- On PREFIXOP reduce production top_expr -> OPEN mod_ident
-- On PLUS reduce production top_expr -> OPEN mod_ident
-- On OPEN reduce production top_expr -> OPEN mod_ident
-- On MODULE reduce production top_expr -> OPEN mod_ident
-- On MINUS reduce production top_expr -> OPEN mod_ident
-- On MATCH reduce production top_expr -> OPEN mod_ident
-- On LVECTOR reduce production top_expr -> OPEN mod_ident
-- On LPAREN reduce production top_expr -> OPEN mod_ident
-- On LMATRIX reduce production top_expr -> OPEN mod_ident
-- On LIDENT reduce production top_expr -> OPEN mod_ident
-- On LET reduce production top_expr -> OPEN mod_ident
-- On LBRACKBAR reduce production top_expr -> OPEN mod_ident
-- On LBRACK reduce production top_expr -> OPEN mod_ident
-- On LBRACE reduce production top_expr -> OPEN mod_ident
-- On LAZY reduce production top_expr -> OPEN mod_ident
-- On INT reduce production top_expr -> OPEN mod_ident
-- On IMAGINARY reduce production top_expr -> OPEN mod_ident
-- On IF reduce production top_expr -> OPEN mod_ident
-- On FUNCTION reduce production top_expr -> OPEN mod_ident
-- On FUN reduce production top_expr -> OPEN mod_ident
-- On FOR reduce production top_expr -> OPEN mod_ident
-- On FLOAT reduce production top_expr -> OPEN mod_ident
-- On EXCEPTION reduce production top_expr -> OPEN mod_ident
-- On EOF reduce production top_expr -> OPEN mod_ident
-- On DOLLAR reduce production top_expr -> OPEN mod_ident
-- On CHAR reduce production top_expr -> OPEN mod_ident
-- On CASE reduce production top_expr -> OPEN mod_ident
-- On BEGIN reduce production top_expr -> OPEN mod_ident
-- On ASSERT reduce production top_expr -> OPEN mod_ident

State 978:
top_expr -> MODULE . mod_ident EQ mod_ident [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On UIDENT shift to state 73
-- On mod_ident shift to state 979

State 979:
top_expr -> MODULE mod_ident . EQ mod_ident [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On EQ shift to state 980

State 980:
top_expr -> MODULE mod_ident EQ . mod_ident [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On UIDENT shift to state 73
-- On mod_ident shift to state 981

State 981:
top_expr -> MODULE mod_ident EQ mod_ident . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On WHERE reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On UIDENT reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On TYPE reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On TRY reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On STRING reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On SHARP reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On SEMISEMI reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On RAISE reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On PREFIXOP reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On PLUS reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On OPEN reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On MODULE reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On MINUS reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On MATCH reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On LVECTOR reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On LPAREN reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On LMATRIX reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On LIDENT reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On LET reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On LBRACKBAR reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On LBRACK reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On LBRACE reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On LAZY reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On INT reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On IMAGINARY reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On IF reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On FUNCTION reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On FUN reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On FOR reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On FLOAT reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On EXCEPTION reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On EOF reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On DOLLAR reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On CHAR reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On CASE reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On BEGIN reduce production top_expr -> MODULE mod_ident EQ mod_ident
-- On ASSERT reduce production top_expr -> MODULE mod_ident EQ mod_ident

State 982:
top_expr -> LET . rec_flag let_bindings [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
value_expr -> LET . rec_flag let_bindings IN seq_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI SEMI RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF DOLLAR COLONEQUAL COLONCOLON CHAR CASE BEGIN BARBAR ASSERT AMPERAMPER ]
value_expr -> LET . MODULE mod_ident EQ mod_ident IN seq_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI SEMI RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF DOLLAR COLONEQUAL COLONCOLON CHAR CASE BEGIN BARBAR ASSERT AMPERAMPER ]
-- On REC shift to state 71
-- On MODULE shift to state 72
-- On rec_flag shift to state 983
-- On WEAKARRAYPAT reduce production rec_flag ->
-- On VECTORPAT reduce production rec_flag ->
-- On UNDERSCORE reduce production rec_flag ->
-- On UIDENT reduce production rec_flag ->
-- On TUPLEPAT reduce production rec_flag ->
-- On SYMBOLPAT reduce production rec_flag ->
-- On STRINGPAT reduce production rec_flag ->
-- On STRING reduce production rec_flag ->
-- On STACKPAT reduce production rec_flag ->
-- On SHARP reduce production rec_flag ->
-- On RECORDPAT reduce production rec_flag ->
-- On REALPAT reduce production rec_flag ->
-- On QUEUEPAT reduce production rec_flag ->
-- On OUT_CHANNELPAT reduce production rec_flag ->
-- On NUMBERPAT reduce production rec_flag ->
-- On MINUS reduce production rec_flag ->
-- On LVECTOR reduce production rec_flag ->
-- On LPAREN reduce production rec_flag ->
-- On LISTPAT reduce production rec_flag ->
-- On LIDENT reduce production rec_flag ->
-- On LBRACKBAR reduce production rec_flag ->
-- On LBRACK reduce production rec_flag ->
-- On LBRACE reduce production rec_flag ->
-- On IN_CHANNELPAT reduce production rec_flag ->
-- On INTPAT reduce production rec_flag ->
-- On INT reduce production rec_flag ->
-- On IMAGINARY reduce production rec_flag ->
-- On HASHTABLEPAT reduce production rec_flag ->
-- On FLOATPAT reduce production rec_flag ->
-- On FLOAT reduce production rec_flag ->
-- On FARRAYPAT reduce production rec_flag ->
-- On DOLLAR reduce production rec_flag ->
-- On DIR_HANDLEPAT reduce production rec_flag ->
-- On COMPLEXPAT reduce production rec_flag ->
-- On CHARPAT reduce production rec_flag ->
-- On CHAR reduce production rec_flag ->
-- On CARRAYPAT reduce production rec_flag ->
-- On BOXPAT reduce production rec_flag ->
-- On ARRAYPAT reduce production rec_flag ->
-- On AMPERREST reduce production rec_flag ->

State 983:
top_expr -> LET rec_flag . let_bindings [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
value_expr -> LET rec_flag . let_bindings IN seq_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI SEMI RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF DOLLAR COLONEQUAL COLONCOLON CHAR CASE BEGIN BARBAR ASSERT AMPERAMPER ]
-- On WEAKARRAYPAT shift to state 127
-- On VECTORPAT shift to state 148
-- On UNDERSCORE shift to state 149
-- On UIDENT shift to state 150
-- On TUPLEPAT shift to state 152
-- On SYMBOLPAT shift to state 153
-- On STRINGPAT shift to state 155
-- On STRING shift to state 31
-- On STACKPAT shift to state 157
-- On SHARP shift to state 32
-- On RECORDPAT shift to state 159
-- On REALPAT shift to state 160
-- On QUEUEPAT shift to state 162
-- On OUT_CHANNELPAT shift to state 164
-- On NUMBERPAT shift to state 166
-- On MINUS shift to state 129
-- On LVECTOR shift to state 168
-- On LPAREN shift to state 235
-- On LISTPAT shift to state 257
-- On LIDENT shift to state 28
-- On LBRACKBAR shift to state 138
-- On LBRACK shift to state 258
-- On LBRACE shift to state 262
-- On IN_CHANNELPAT shift to state 267
-- On INTPAT shift to state 269
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On HASHTABLEPAT shift to state 271
-- On FLOATPAT shift to state 273
-- On FLOAT shift to state 117
-- On FARRAYPAT shift to state 275
-- On DOLLAR shift to state 118
-- On DIR_HANDLEPAT shift to state 277
-- On COMPLEXPAT shift to state 279
-- On CHARPAT shift to state 287
-- On CHAR shift to state 289
-- On CARRAYPAT shift to state 292
-- On BOXPAT shift to state 294
-- On ARRAYPAT shift to state 296
-- On AMPERREST shift to state 393
-- On val_ident shift to state 786
-- On simple_pattern shift to state 299
-- On signed_constant shift to state 306
-- On pattern_comma_list_element shift to state 395
-- On pattern_comma_list shift to state 792
-- On pattern shift to state 399
-- On let_bindings shift to state 984
-- On let_binding shift to state 801
-- On constr_longident shift to state 308
-- On constant shift to state 145
-- On built_in_constr shift to state 310

State 984:
let_bindings -> let_bindings . AND let_binding [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IN IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT AND ]
top_expr -> LET rec_flag let_bindings . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
value_expr -> LET rec_flag let_bindings . IN seq_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI SEMI RAISE QUESTION PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EQ EOF DOLLAR COLONEQUAL COLONCOLON CHAR CASE BEGIN BARBAR ASSERT AMPERAMPER ]
-- On IN shift to state 834
-- On AND shift to state 799
-- On WHILE reduce production top_expr -> LET rec_flag let_bindings
-- On WHERE reduce production top_expr -> LET rec_flag let_bindings
-- On UIDENT reduce production top_expr -> LET rec_flag let_bindings
-- On TYPE reduce production top_expr -> LET rec_flag let_bindings
-- On TRY reduce production top_expr -> LET rec_flag let_bindings
-- On STRING reduce production top_expr -> LET rec_flag let_bindings
-- On SHARP reduce production top_expr -> LET rec_flag let_bindings
-- On SEMISEMI reduce production top_expr -> LET rec_flag let_bindings
-- On RAISE reduce production top_expr -> LET rec_flag let_bindings
-- On PREFIXOP reduce production top_expr -> LET rec_flag let_bindings
-- On PLUS reduce production top_expr -> LET rec_flag let_bindings
-- On OPEN reduce production top_expr -> LET rec_flag let_bindings
-- On MODULE reduce production top_expr -> LET rec_flag let_bindings
-- On MINUS reduce production top_expr -> LET rec_flag let_bindings
-- On MATCH reduce production top_expr -> LET rec_flag let_bindings
-- On LVECTOR reduce production top_expr -> LET rec_flag let_bindings
-- On LPAREN reduce production top_expr -> LET rec_flag let_bindings
-- On LMATRIX reduce production top_expr -> LET rec_flag let_bindings
-- On LIDENT reduce production top_expr -> LET rec_flag let_bindings
-- On LET reduce production top_expr -> LET rec_flag let_bindings
-- On LBRACKBAR reduce production top_expr -> LET rec_flag let_bindings
-- On LBRACK reduce production top_expr -> LET rec_flag let_bindings
-- On LBRACE reduce production top_expr -> LET rec_flag let_bindings
-- On LAZY reduce production top_expr -> LET rec_flag let_bindings
-- On INT reduce production top_expr -> LET rec_flag let_bindings
-- On IMAGINARY reduce production top_expr -> LET rec_flag let_bindings
-- On IF reduce production top_expr -> LET rec_flag let_bindings
-- On FUNCTION reduce production top_expr -> LET rec_flag let_bindings
-- On FUN reduce production top_expr -> LET rec_flag let_bindings
-- On FOR reduce production top_expr -> LET rec_flag let_bindings
-- On FLOAT reduce production top_expr -> LET rec_flag let_bindings
-- On EXCEPTION reduce production top_expr -> LET rec_flag let_bindings
-- On EOF reduce production top_expr -> LET rec_flag let_bindings
-- On DOLLAR reduce production top_expr -> LET rec_flag let_bindings
-- On CHAR reduce production top_expr -> LET rec_flag let_bindings
-- On CASE reduce production top_expr -> LET rec_flag let_bindings
-- On BEGIN reduce production top_expr -> LET rec_flag let_bindings
-- On ASSERT reduce production top_expr -> LET rec_flag let_bindings

State 985:
top_expr -> EXCEPTION . UIDENT OF type_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> EXCEPTION . UIDENT [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On UIDENT shift to state 986

State 986:
top_expr -> EXCEPTION UIDENT . OF type_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
top_expr -> EXCEPTION UIDENT . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On OF shift to state 987
-- On WHILE reduce production top_expr -> EXCEPTION UIDENT
-- On WHERE reduce production top_expr -> EXCEPTION UIDENT
-- On UIDENT reduce production top_expr -> EXCEPTION UIDENT
-- On TYPE reduce production top_expr -> EXCEPTION UIDENT
-- On TRY reduce production top_expr -> EXCEPTION UIDENT
-- On STRING reduce production top_expr -> EXCEPTION UIDENT
-- On SHARP reduce production top_expr -> EXCEPTION UIDENT
-- On SEMISEMI reduce production top_expr -> EXCEPTION UIDENT
-- On RAISE reduce production top_expr -> EXCEPTION UIDENT
-- On PREFIXOP reduce production top_expr -> EXCEPTION UIDENT
-- On PLUS reduce production top_expr -> EXCEPTION UIDENT
-- On OPEN reduce production top_expr -> EXCEPTION UIDENT
-- On MODULE reduce production top_expr -> EXCEPTION UIDENT
-- On MINUS reduce production top_expr -> EXCEPTION UIDENT
-- On MATCH reduce production top_expr -> EXCEPTION UIDENT
-- On LVECTOR reduce production top_expr -> EXCEPTION UIDENT
-- On LPAREN reduce production top_expr -> EXCEPTION UIDENT
-- On LMATRIX reduce production top_expr -> EXCEPTION UIDENT
-- On LIDENT reduce production top_expr -> EXCEPTION UIDENT
-- On LET reduce production top_expr -> EXCEPTION UIDENT
-- On LBRACKBAR reduce production top_expr -> EXCEPTION UIDENT
-- On LBRACK reduce production top_expr -> EXCEPTION UIDENT
-- On LBRACE reduce production top_expr -> EXCEPTION UIDENT
-- On LAZY reduce production top_expr -> EXCEPTION UIDENT
-- On INT reduce production top_expr -> EXCEPTION UIDENT
-- On IMAGINARY reduce production top_expr -> EXCEPTION UIDENT
-- On IF reduce production top_expr -> EXCEPTION UIDENT
-- On FUNCTION reduce production top_expr -> EXCEPTION UIDENT
-- On FUN reduce production top_expr -> EXCEPTION UIDENT
-- On FOR reduce production top_expr -> EXCEPTION UIDENT
-- On FLOAT reduce production top_expr -> EXCEPTION UIDENT
-- On EXCEPTION reduce production top_expr -> EXCEPTION UIDENT
-- On EOF reduce production top_expr -> EXCEPTION UIDENT
-- On DOLLAR reduce production top_expr -> EXCEPTION UIDENT
-- On CHAR reduce production top_expr -> EXCEPTION UIDENT
-- On CASE reduce production top_expr -> EXCEPTION UIDENT
-- On BEGIN reduce production top_expr -> EXCEPTION UIDENT
-- On ASSERT reduce production top_expr -> EXCEPTION UIDENT

State 987:
top_expr -> EXCEPTION UIDENT OF . type_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On UIDENT shift to state 213
-- On TIDENT shift to state 954
-- On LPAREN shift to state 955
-- On LIDENT shift to state 216
-- On type_expr shift to state 988
-- On label_longident shift to state 965

State 988:
top_expr -> EXCEPTION UIDENT OF type_expr . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
type_expr -> type_expr . label_longident [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
type_expr -> type_expr . STAR type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
type_expr -> type_expr . MINUSGREATER type_expr [ WHILE WHERE UIDENT TYPE TRY STRING STAR SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUSGREATER MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On UIDENT shift to state 213
-- On STAR shift to state 960
-- On MINUSGREATER shift to state 962
-- On LIDENT shift to state 216
-- On label_longident shift to state 964
-- On WHILE reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On WHERE reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On TYPE reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On TRY reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On STRING reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On SHARP reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On SEMISEMI reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On RAISE reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On PREFIXOP reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On PLUS reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On OPEN reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On MODULE reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On MINUS reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On MATCH reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On LVECTOR reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On LPAREN reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On LMATRIX reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On LET reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On LBRACKBAR reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On LBRACK reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On LBRACE reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On LAZY reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On INT reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On IMAGINARY reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On IF reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On FUNCTION reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On FUN reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On FOR reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On FLOAT reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On EXCEPTION reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On EOF reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On DOLLAR reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On CHAR reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On CASE reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On BEGIN reduce production top_expr -> EXCEPTION UIDENT OF type_expr
-- On ASSERT reduce production top_expr -> EXCEPTION UIDENT OF type_expr
** Conflict on UIDENT LIDENT

State 989:
toplevel_phrase -> use_file_exprs . EOF [ # ]
use_file_exprs -> use_file_exprs . top_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TYPE shift to state 915
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On SEMISEMI shift to state 975
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On OPEN shift to state 976
-- On MODULE shift to state 978
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 982
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On EXCEPTION shift to state 985
-- On EOF shift to state 990
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On top_expr shift to state 991
-- On simple_expr shift to state 417
-- On seq_expr shift to state 992
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 990:
toplevel_phrase -> use_file_exprs EOF . [ # ]
-- On # reduce production toplevel_phrase -> use_file_exprs EOF

State 991:
use_file_exprs -> use_file_exprs top_expr . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE reduce production use_file_exprs -> use_file_exprs top_expr
-- On WHERE reduce production use_file_exprs -> use_file_exprs top_expr
-- On UIDENT reduce production use_file_exprs -> use_file_exprs top_expr
-- On TYPE reduce production use_file_exprs -> use_file_exprs top_expr
-- On TRY reduce production use_file_exprs -> use_file_exprs top_expr
-- On STRING reduce production use_file_exprs -> use_file_exprs top_expr
-- On SHARP reduce production use_file_exprs -> use_file_exprs top_expr
-- On SEMISEMI reduce production use_file_exprs -> use_file_exprs top_expr
-- On RAISE reduce production use_file_exprs -> use_file_exprs top_expr
-- On PREFIXOP reduce production use_file_exprs -> use_file_exprs top_expr
-- On PLUS reduce production use_file_exprs -> use_file_exprs top_expr
-- On OPEN reduce production use_file_exprs -> use_file_exprs top_expr
-- On MODULE reduce production use_file_exprs -> use_file_exprs top_expr
-- On MINUS reduce production use_file_exprs -> use_file_exprs top_expr
-- On MATCH reduce production use_file_exprs -> use_file_exprs top_expr
-- On LVECTOR reduce production use_file_exprs -> use_file_exprs top_expr
-- On LPAREN reduce production use_file_exprs -> use_file_exprs top_expr
-- On LMATRIX reduce production use_file_exprs -> use_file_exprs top_expr
-- On LIDENT reduce production use_file_exprs -> use_file_exprs top_expr
-- On LET reduce production use_file_exprs -> use_file_exprs top_expr
-- On LBRACKBAR reduce production use_file_exprs -> use_file_exprs top_expr
-- On LBRACK reduce production use_file_exprs -> use_file_exprs top_expr
-- On LBRACE reduce production use_file_exprs -> use_file_exprs top_expr
-- On LAZY reduce production use_file_exprs -> use_file_exprs top_expr
-- On INT reduce production use_file_exprs -> use_file_exprs top_expr
-- On IMAGINARY reduce production use_file_exprs -> use_file_exprs top_expr
-- On IF reduce production use_file_exprs -> use_file_exprs top_expr
-- On FUNCTION reduce production use_file_exprs -> use_file_exprs top_expr
-- On FUN reduce production use_file_exprs -> use_file_exprs top_expr
-- On FOR reduce production use_file_exprs -> use_file_exprs top_expr
-- On FLOAT reduce production use_file_exprs -> use_file_exprs top_expr
-- On EXCEPTION reduce production use_file_exprs -> use_file_exprs top_expr
-- On EOF reduce production use_file_exprs -> use_file_exprs top_expr
-- On DOLLAR reduce production use_file_exprs -> use_file_exprs top_expr
-- On CHAR reduce production use_file_exprs -> use_file_exprs top_expr
-- On CASE reduce production use_file_exprs -> use_file_exprs top_expr
-- On BEGIN reduce production use_file_exprs -> use_file_exprs top_expr
-- On ASSERT reduce production use_file_exprs -> use_file_exprs top_expr

State 992:
top_expr -> seq_expr . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE reduce production top_expr -> seq_expr
-- On WHERE reduce production top_expr -> seq_expr
-- On UIDENT reduce production top_expr -> seq_expr
-- On TYPE reduce production top_expr -> seq_expr
-- On TRY reduce production top_expr -> seq_expr
-- On STRING reduce production top_expr -> seq_expr
-- On SHARP reduce production top_expr -> seq_expr
-- On SEMISEMI reduce production top_expr -> seq_expr
-- On RAISE reduce production top_expr -> seq_expr
-- On PREFIXOP reduce production top_expr -> seq_expr
-- On PLUS reduce production top_expr -> seq_expr
-- On OPEN reduce production top_expr -> seq_expr
-- On MODULE reduce production top_expr -> seq_expr
-- On MINUS reduce production top_expr -> seq_expr
-- On MATCH reduce production top_expr -> seq_expr
-- On LVECTOR reduce production top_expr -> seq_expr
-- On LPAREN reduce production top_expr -> seq_expr
-- On LMATRIX reduce production top_expr -> seq_expr
-- On LIDENT reduce production top_expr -> seq_expr
-- On LET reduce production top_expr -> seq_expr
-- On LBRACKBAR reduce production top_expr -> seq_expr
-- On LBRACK reduce production top_expr -> seq_expr
-- On LBRACE reduce production top_expr -> seq_expr
-- On LAZY reduce production top_expr -> seq_expr
-- On INT reduce production top_expr -> seq_expr
-- On IMAGINARY reduce production top_expr -> seq_expr
-- On IF reduce production top_expr -> seq_expr
-- On FUNCTION reduce production top_expr -> seq_expr
-- On FUN reduce production top_expr -> seq_expr
-- On FOR reduce production top_expr -> seq_expr
-- On FLOAT reduce production top_expr -> seq_expr
-- On EXCEPTION reduce production top_expr -> seq_expr
-- On EOF reduce production top_expr -> seq_expr
-- On DOLLAR reduce production top_expr -> seq_expr
-- On CHAR reduce production top_expr -> seq_expr
-- On CASE reduce production top_expr -> seq_expr
-- On BEGIN reduce production top_expr -> seq_expr
-- On ASSERT reduce production top_expr -> seq_expr

State 993:
toplevel_phrase' -> toplevel_phrase . [ # ]
-- On # accept toplevel_phrase

State 994:
use_file_exprs -> top_expr . [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE reduce production use_file_exprs -> top_expr
-- On WHERE reduce production use_file_exprs -> top_expr
-- On UIDENT reduce production use_file_exprs -> top_expr
-- On TYPE reduce production use_file_exprs -> top_expr
-- On TRY reduce production use_file_exprs -> top_expr
-- On STRING reduce production use_file_exprs -> top_expr
-- On SHARP reduce production use_file_exprs -> top_expr
-- On SEMISEMI reduce production use_file_exprs -> top_expr
-- On RAISE reduce production use_file_exprs -> top_expr
-- On PREFIXOP reduce production use_file_exprs -> top_expr
-- On PLUS reduce production use_file_exprs -> top_expr
-- On OPEN reduce production use_file_exprs -> top_expr
-- On MODULE reduce production use_file_exprs -> top_expr
-- On MINUS reduce production use_file_exprs -> top_expr
-- On MATCH reduce production use_file_exprs -> top_expr
-- On LVECTOR reduce production use_file_exprs -> top_expr
-- On LPAREN reduce production use_file_exprs -> top_expr
-- On LMATRIX reduce production use_file_exprs -> top_expr
-- On LIDENT reduce production use_file_exprs -> top_expr
-- On LET reduce production use_file_exprs -> top_expr
-- On LBRACKBAR reduce production use_file_exprs -> top_expr
-- On LBRACK reduce production use_file_exprs -> top_expr
-- On LBRACE reduce production use_file_exprs -> top_expr
-- On LAZY reduce production use_file_exprs -> top_expr
-- On INT reduce production use_file_exprs -> top_expr
-- On IMAGINARY reduce production use_file_exprs -> top_expr
-- On IF reduce production use_file_exprs -> top_expr
-- On FUNCTION reduce production use_file_exprs -> top_expr
-- On FUN reduce production use_file_exprs -> top_expr
-- On FOR reduce production use_file_exprs -> top_expr
-- On FLOAT reduce production use_file_exprs -> top_expr
-- On EXCEPTION reduce production use_file_exprs -> top_expr
-- On EOF reduce production use_file_exprs -> top_expr
-- On DOLLAR reduce production use_file_exprs -> top_expr
-- On CHAR reduce production use_file_exprs -> top_expr
-- On CASE reduce production use_file_exprs -> top_expr
-- On BEGIN reduce production use_file_exprs -> top_expr
-- On ASSERT reduce production use_file_exprs -> top_expr

State 995:
use_file' -> . use_file [ # ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TYPE shift to state 915
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On SEMISEMI shift to state 975
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On OPEN shift to state 976
-- On MODULE shift to state 978
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 982
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On EXCEPTION shift to state 985
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On use_file_exprs shift to state 996
-- On use_file shift to state 998
-- On top_expr shift to state 994
-- On simple_expr shift to state 417
-- On seq_expr shift to state 992
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 996:
use_file -> use_file_exprs . EOF [ # ]
use_file_exprs -> use_file_exprs . top_expr [ WHILE WHERE UIDENT TYPE TRY STRING SHARP SEMISEMI RAISE PREFIXOP PLUS OPEN MODULE MINUS MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT EXCEPTION EOF DOLLAR CHAR CASE BEGIN ASSERT ]
-- On WHILE shift to state 1
-- On WHERE shift to state 2
-- On UIDENT shift to state 3
-- On TYPE shift to state 915
-- On TRY shift to state 30
-- On STRING shift to state 31
-- On SHARP shift to state 32
-- On SEMISEMI shift to state 975
-- On RAISE shift to state 36
-- On PREFIXOP shift to state 37
-- On PLUS shift to state 40
-- On OPEN shift to state 976
-- On MODULE shift to state 978
-- On MINUS shift to state 41
-- On MATCH shift to state 42
-- On LVECTOR shift to state 38
-- On LPAREN shift to state 44
-- On LMATRIX shift to state 55
-- On LIDENT shift to state 28
-- On LET shift to state 982
-- On LBRACKBAR shift to state 78
-- On LBRACK shift to state 100
-- On LBRACE shift to state 113
-- On LAZY shift to state 380
-- On INT shift to state 115
-- On IMAGINARY shift to state 116
-- On IF shift to state 390
-- On FUNCTION shift to state 391
-- On FUN shift to state 402
-- On FOR shift to state 405
-- On FLOAT shift to state 117
-- On EXCEPTION shift to state 985
-- On EOF shift to state 997
-- On DOLLAR shift to state 118
-- On CHAR shift to state 122
-- On CASE shift to state 408
-- On BEGIN shift to state 123
-- On ASSERT shift to state 412
-- On value_expr shift to state 416
-- On val_longident shift to state 381
-- On val_ident shift to state 382
-- On top_expr shift to state 991
-- On simple_expr shift to state 417
-- On seq_expr shift to state 992
-- On no_value_expr shift to state 423
-- On expr shift to state 478
-- On constr_longident shift to state 431
-- On constant shift to state 415
-- On basic_seq_expr shift to state 479

State 997:
use_file -> use_file_exprs EOF . [ # ]
-- On # reduce production use_file -> use_file_exprs EOF

State 998:
use_file' -> use_file . [ # ]
-- On # accept use_file

