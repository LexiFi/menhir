
** Conflict (shift/reduce) in state 988.
** Tokens involved: UIDENT LIDENT
** The following explanations concentrate on token UIDENT.
** This state is reached from toplevel_phrase after reading:

EXCEPTION UIDENT OF type_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 988, looking ahead at UIDENT, shifting is permitted
** because of the following sub-derivation:

top_expr 
EXCEPTION UIDENT OF type_expr 
                    type_expr label_longident 
                              . UIDENT DOT LIDENT 

** In state 988, looking ahead at UIDENT, reducing production
** top_expr -> EXCEPTION UIDENT OF type_expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with UIDENT
top_expr // lookahead token is inherited
EXCEPTION UIDENT OF type_expr . 

** Conflict (shift/reduce) in state 963.
** Tokens involved: UIDENT MINUSGREATER LIDENT
** The following explanations concentrate on token UIDENT.
** This state is reached from toplevel_phrase after reading:

EXCEPTION UIDENT OF type_expr MINUSGREATER type_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
EXCEPTION UIDENT OF type_expr 
                    (?)

** In state 963, looking ahead at UIDENT, shifting is permitted
** because of the following sub-derivation:

type_expr MINUSGREATER type_expr 
                       type_expr label_longident 
                                 . UIDENT DOT LIDENT 

** In state 963, looking ahead at UIDENT, reducing production
** type_expr -> type_expr MINUSGREATER type_expr
** is permitted because of the following sub-derivation:

type_expr label_longident // lookahead token appears because label_longident can begin with UIDENT
type_expr MINUSGREATER type_expr . 

** Conflict (shift/reduce) in state 961.
** Tokens involved: UIDENT MINUSGREATER LIDENT
** The following explanations concentrate on token UIDENT.
** This state is reached from toplevel_phrase after reading:

EXCEPTION UIDENT OF type_expr STAR type_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
EXCEPTION UIDENT OF type_expr 
                    (?)

** In state 961, looking ahead at UIDENT, shifting is permitted
** because of the following sub-derivation:

type_expr STAR type_expr 
               type_expr label_longident 
                         . UIDENT DOT LIDENT 

** In state 961, looking ahead at UIDENT, reducing production
** type_expr -> type_expr STAR type_expr
** is permitted because of the following sub-derivation:

type_expr label_longident // lookahead token appears because label_longident can begin with UIDENT
type_expr STAR type_expr . 

** Conflict (shift/reduce) in state 959.
** Tokens involved: UIDENT LIDENT
** The following explanations concentrate on token UIDENT.
** This state is reached from toplevel_phrase after reading:

TYPE LIDENT EQ opt_bar UIDENT OF type_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 959, looking ahead at UIDENT, shifting is permitted
** because of the following sub-derivation:

top_expr 
TYPE LIDENT EQ opt_bar tag_list 
                       simple_tag_type 
                       UIDENT OF type_expr 
                                 type_expr label_longident 
                                           . UIDENT DOT LIDENT 

** In state 959, looking ahead at UIDENT, reducing production
** simple_tag_type -> UIDENT OF type_expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with UIDENT
top_expr // lookahead token is inherited
TYPE LIDENT EQ opt_bar tag_list // lookahead token is inherited
                       simple_tag_type // lookahead token is inherited
                       UIDENT OF type_expr . 

** Conflict (shift/reduce) in state 936.
** Tokens involved: UIDENT MINUSGREATER LIDENT
** The following explanations concentrate on token UIDENT.
** This state is reached from toplevel_phrase after reading:

EXCEPTION UIDENT OF LPAREN type_expr MINUSGREATER type_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
EXCEPTION UIDENT OF type_expr 
                    LPAREN type_expr RPAREN 
                           (?)

** In state 936, looking ahead at UIDENT, shifting is permitted
** because of the following sub-derivation:

type_expr MINUSGREATER type_expr 
                       type_expr label_longident 
                                 . UIDENT DOT LIDENT 

** In state 936, looking ahead at UIDENT, reducing production
** type_expr -> type_expr MINUSGREATER type_expr
** is permitted because of the following sub-derivation:

type_expr label_longident // lookahead token appears because label_longident can begin with UIDENT
type_expr MINUSGREATER type_expr . 

** Conflict (shift/reduce) in state 934.
** Tokens involved: UIDENT MINUSGREATER LIDENT
** The following explanations concentrate on token UIDENT.
** This state is reached from toplevel_phrase after reading:

EXCEPTION UIDENT OF LPAREN type_expr STAR type_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
EXCEPTION UIDENT OF type_expr 
                    LPAREN type_expr RPAREN 
                           (?)

** In state 934, looking ahead at UIDENT, shifting is permitted
** because of the following sub-derivation:

type_expr STAR type_expr 
               type_expr label_longident 
                         . UIDENT DOT LIDENT 

** In state 934, looking ahead at UIDENT, reducing production
** type_expr -> type_expr STAR type_expr
** is permitted because of the following sub-derivation:

type_expr label_longident // lookahead token appears because label_longident can begin with UIDENT
type_expr STAR type_expr . 

** Conflict (shift/reduce) in state 910.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

WHERE expr THEN expr ELSE expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 910, looking ahead at WHERE, reducing production
** value_expr -> WHERE expr THEN expr ELSE expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
WHERE expr THEN expr ELSE expr . 

** In state 910, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
WHERE expr THEN expr ELSE expr 
                          value_expr 
                          expr . WHERE expr 

** Conflict (shift/reduce) in state 906.
** Tokens involved: WHERE THEN
** The following explanations concentrate on token WHERE.
** This state is reached from toplevel_phrase after reading:

WHERE expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 906, looking ahead at WHERE, reducing production
** value_expr -> WHERE expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
WHERE expr . 

** In state 906, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
WHERE expr THEN expr ELSE expr 
      value_expr 
      expr . WHERE expr 

** Conflict (shift/reduce) in state 900.
** Tokens involved: WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER
** The following explanations concentrate on token WHERE.
** This state is reached from toplevel_phrase after reading:

RAISE expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 900, looking ahead at WHERE, reducing production
** no_value_expr -> RAISE expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
no_value_expr // lookahead token is inherited
RAISE expr . 

** In state 900, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
no_value_expr 
RAISE expr 
      value_expr 
      expr . WHERE expr 

** Conflict (shift/reduce) in state 891.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

PLUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 891, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
PLUS expr 
     value_expr 
     expr . WHERE expr 

** In state 891, looking ahead at WHERE, reducing production
** value_expr -> PLUS expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
PLUS expr . 

** Conflict (shift/reduce) in state 890.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

MINUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 890, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
MINUS expr 
      value_expr 
      expr . WHERE expr 

** In state 890, looking ahead at WHERE, reducing production
** value_expr -> MINUS expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
MINUS expr . 

** Conflict (shift/reduce) in state 886.
** Token involved: WITH
** This state is reached from toplevel_phrase after reading:

MATCH expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
(?)

** In state 886, looking ahead at WITH, reducing production
** expr_comma_list_element -> expr
** is permitted because of the following sub-derivation:

MATCH expr_comma_list opt_comma WITH opt_bar match_cases // lookahead token appears because opt_comma can vanish
      expr_comma_list_element // lookahead token is inherited
      expr . 

** In state 886, looking ahead at WITH, shifting is permitted
** because of the following sub-derivation:

MATCH expr . WITH opt_bar match_cases 

** Conflict (shift/reduce) in state 868.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR WHERE expr THEN expr ELSE expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 868, looking ahead at WHERE, reducing production
** value_expr -> WHERE expr THEN expr ELSE expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
WHERE expr THEN expr ELSE expr . 

** In state 868, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

WHERE expr THEN expr ELSE expr 
                          value_expr 
                          expr . WHERE expr 

** Conflict (shift/reduce) in state 864.
** Tokens involved: WHERE THEN
** The following explanations concentrate on token WHERE.
** This state is reached from toplevel_phrase after reading:

LVECTOR WHERE expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 864, looking ahead at WHERE, reducing production
** value_expr -> WHERE expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
WHERE expr . 

** In state 864, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

WHERE expr THEN expr ELSE expr 
      value_expr 
      expr . WHERE expr 

** Conflict (shift/reduce) in state 855.
** Tokens involved: WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER
** The following explanations concentrate on token WHERE.
** This state is reached from toplevel_phrase after reading:

LVECTOR RAISE expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        (?)

** In state 855, looking ahead at WHERE, reducing production
** no_value_expr -> RAISE expr
** is permitted because of the following sub-derivation:

value_expr 
expr WHERE expr // lookahead token appears
no_value_expr // lookahead token is inherited
RAISE expr . 

** In state 855, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

no_value_expr 
RAISE expr 
      value_expr 
      expr . WHERE expr 

** Conflict (shift/reduce) in state 848.
** Token involved: WITH
** This state is reached from toplevel_phrase after reading:

LVECTOR MATCH expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 848, looking ahead at WITH, reducing production
** expr_comma_list_element -> expr
** is permitted because of the following sub-derivation:

MATCH expr_comma_list opt_comma WITH opt_bar match_cases // lookahead token appears because opt_comma can vanish
      expr_comma_list_element // lookahead token is inherited
      expr . 

** In state 848, looking ahead at WITH, shifting is permitted
** because of the following sub-derivation:

MATCH expr . WITH opt_bar match_cases 

** Conflict (shift/reduce) in state 813.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR MINUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 813, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

MINUS expr 
      value_expr 
      expr . WHERE expr 

** In state 813, looking ahead at WHERE, reducing production
** value_expr -> MINUS expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
MINUS expr . 

** Conflict (shift/reduce) in state 811.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR PLUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 811, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

PLUS expr 
     value_expr 
     expr . WHERE expr 

** In state 811, looking ahead at WHERE, reducing production
** value_expr -> PLUS expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
PLUS expr . 

** Conflict (shift/reduce) in state 786.
** Token involved: EQ
** This state is reached from toplevel_phrase after reading:

LET rec_flag val_ident

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
LET rec_flag let_bindings 
             let_binding 
             (?)

** In state 786, looking ahead at EQ, shifting is permitted
** because of the following sub-derivation:

val_ident fun_binding 
          . EQ seq_expr 

** In state 786, looking ahead at EQ, reducing production
** simple_pattern -> val_ident
** is permitted because of the following sub-derivation:

pattern_comma_list EQ seq_expr // lookahead token appears
pattern_comma_list_element // lookahead token is inherited
pattern // lookahead token is inherited
simple_pattern // lookahead token is inherited
val_ident . 

** Conflict (shift/reduce) in state 741.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR IF expr THEN expr ELSE expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 741, looking ahead at WHERE, reducing production
** value_expr -> IF expr THEN expr ELSE expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
IF expr THEN expr ELSE expr . 

** In state 741, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

IF expr THEN expr ELSE expr 
                       value_expr 
                       expr . WHERE expr 

** Conflict (shift/reduce) in state 739.
** Tokens involved: WHERE ELSE
** The following explanations concentrate on token WHERE.
** This state is reached from toplevel_phrase after reading:

LVECTOR IF expr THEN expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 739, looking ahead at WHERE, reducing production
** value_expr -> IF expr THEN expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
IF expr THEN expr . 

** In state 739, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

IF expr THEN expr ELSE expr 
             value_expr 
             expr . WHERE expr 

** Conflict (shift/reduce) in state 736.
** Token involved: COMMA
** This state is reached from toplevel_phrase after reading:

LBRACE lbl_expr_list

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
(?)

** In state 736, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LBRACE record_expr opt_comma RBRACE 
       lbl_expr_list 
       lbl_expr_list . COMMA label_longident EQ expr 

** In state 736, looking ahead at COMMA, reducing production
** record_expr -> lbl_expr_list
** is permitted because of the following sub-derivation:

LBRACE record_expr opt_comma RBRACE // lookahead token appears because opt_comma can begin with COMMA
       lbl_expr_list . 

** Conflict (shift/reduce) in state 723.
** Token involved: COMMA
** This state is reached from toplevel_phrase after reading:

LBRACE simple_expr WITH lbl_expr_list

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
(?)

** In state 723, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LBRACE record_expr opt_comma RBRACE 
       simple_expr WITH lbl_expr_list 
                        lbl_expr_list . COMMA label_longident EQ expr 

** In state 723, looking ahead at COMMA, reducing production
** record_expr -> simple_expr WITH lbl_expr_list
** is permitted because of the following sub-derivation:

LBRACE record_expr opt_comma RBRACE // lookahead token appears because opt_comma can begin with COMMA
       simple_expr WITH lbl_expr_list . 

** Conflict (shift/reduce) in state 709.
** Tokens involved: COLONCOLON BARBAR AS
** The following explanations concentrate on token COLONCOLON.
** This state is reached from toplevel_phrase after reading:

LET rec_flag VECTORPAT pattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
LET rec_flag let_bindings 
             let_binding 
             pattern_comma_list EQ seq_expr 
             pattern_comma_list_element 
             pattern 
             (?)

** In state 709, looking ahead at COLONCOLON, reducing production
** built_in_constr -> VECTORPAT pattern
** is permitted because of the following sub-derivation:

pattern COLONCOLON pattern // lookahead token appears
built_in_constr // lookahead token is inherited
VECTORPAT pattern . 

** In state 709, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

built_in_constr 
VECTORPAT pattern 
          pattern . COLONCOLON pattern 

** Conflict (shift/reduce) in state 708.
** Tokens involved: COLONCOLON BARBAR AS
** The following explanations concentrate on token COLONCOLON.
** This state is reached from toplevel_phrase after reading:

LET rec_flag TUPLEPAT pattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
LET rec_flag let_bindings 
             let_binding 
             pattern_comma_list EQ seq_expr 
             pattern_comma_list_element 
             pattern 
             (?)

** In state 708, looking ahead at COLONCOLON, reducing production
** built_in_constr -> TUPLEPAT pattern
** is permitted because of the following sub-derivation:

pattern COLONCOLON pattern // lookahead token appears
built_in_constr // lookahead token is inherited
TUPLEPAT pattern . 

** In state 708, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

built_in_constr 
TUPLEPAT pattern 
         pattern . COLONCOLON pattern 

** Conflict (shift/reduce) in state 707.
** Tokens involved: COLONCOLON BARBAR AS
** The following explanations concentrate on token COLONCOLON.
** This state is reached from toplevel_phrase after reading:

LET rec_flag RECORDPAT pattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
LET rec_flag let_bindings 
             let_binding 
             pattern_comma_list EQ seq_expr 
             pattern_comma_list_element 
             pattern 
             (?)

** In state 707, looking ahead at COLONCOLON, reducing production
** built_in_constr -> RECORDPAT pattern
** is permitted because of the following sub-derivation:

pattern COLONCOLON pattern // lookahead token appears
built_in_constr // lookahead token is inherited
RECORDPAT pattern . 

** In state 707, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

built_in_constr 
RECORDPAT pattern 
          pattern . COLONCOLON pattern 

** Conflict (shift/reduce) in state 703.
** Tokens involved: COLONCOLON BARBAR AS
** The following explanations concentrate on token COLONCOLON.
** This state is reached from toplevel_phrase after reading:

FUN LVECTOR VECTORPAT pattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
FUN simple_pattern fun_def 
    LVECTOR list_pattern RBRACK 
            pattern_comma_list COMMA DOTDOTDOT AS LIDENT 
            pattern_comma_list_element 
            pattern 
            (?)

** In state 703, looking ahead at COLONCOLON, reducing production
** built_in_constr -> VECTORPAT pattern
** is permitted because of the following sub-derivation:

pattern COLONCOLON pattern // lookahead token appears
built_in_constr // lookahead token is inherited
VECTORPAT pattern . 

** In state 703, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

built_in_constr 
VECTORPAT pattern 
          pattern . COLONCOLON pattern 

** Conflict (shift/reduce) in state 702.
** Tokens involved: COLONCOLON BARBAR AS
** The following explanations concentrate on token COLONCOLON.
** This state is reached from toplevel_phrase after reading:

FUN LVECTOR TUPLEPAT pattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
FUN simple_pattern fun_def 
    LVECTOR list_pattern RBRACK 
            pattern_comma_list COMMA DOTDOTDOT AS LIDENT 
            pattern_comma_list_element 
            pattern 
            (?)

** In state 702, looking ahead at COLONCOLON, reducing production
** built_in_constr -> TUPLEPAT pattern
** is permitted because of the following sub-derivation:

pattern COLONCOLON pattern // lookahead token appears
built_in_constr // lookahead token is inherited
TUPLEPAT pattern . 

** In state 702, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

built_in_constr 
TUPLEPAT pattern 
         pattern . COLONCOLON pattern 

** Conflict (shift/reduce) in state 701.
** Tokens involved: COLONCOLON BARBAR AS
** The following explanations concentrate on token COLONCOLON.
** This state is reached from toplevel_phrase after reading:

FUN LVECTOR RECORDPAT pattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
FUN simple_pattern fun_def 
    LVECTOR list_pattern RBRACK 
            pattern_comma_list COMMA DOTDOTDOT AS LIDENT 
            pattern_comma_list_element 
            pattern 
            (?)

** In state 701, looking ahead at COLONCOLON, reducing production
** built_in_constr -> RECORDPAT pattern
** is permitted because of the following sub-derivation:

pattern COLONCOLON pattern // lookahead token appears
built_in_constr // lookahead token is inherited
RECORDPAT pattern . 

** In state 701, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

built_in_constr 
RECORDPAT pattern 
          pattern . COLONCOLON pattern 

** Conflict (shift/reduce) in state 688.
** Tokens involved: COLONCOLON BARBAR AS
** The following explanations concentrate on token COLONCOLON.
** This state is reached from toplevel_phrase after reading:

FUN LVECTOR LISTPAT pattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
FUN simple_pattern fun_def 
    LVECTOR list_pattern RBRACK 
            pattern_comma_list COMMA DOTDOTDOT AS LIDENT 
            pattern_comma_list_element 
            pattern 
            (?)

** In state 688, looking ahead at COLONCOLON, reducing production
** built_in_constr -> LISTPAT pattern
** is permitted because of the following sub-derivation:

pattern COLONCOLON pattern // lookahead token appears
built_in_constr // lookahead token is inherited
LISTPAT pattern . 

** In state 688, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

built_in_constr 
LISTPAT pattern 
        pattern . COLONCOLON pattern 

** Conflict (shift/reduce) in state 631.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR FUN simple_pattern MINUSGREATER basic_seq_expr SEMI expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 631, looking ahead at WHERE, reducing production
** basic_seq_expr -> basic_seq_expr SEMI expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
FUN simple_pattern fun_def // lookahead token is inherited
                   match_action // lookahead token is inherited
                   MINUSGREATER seq_expr // lookahead token is inherited
                                basic_seq_expr // lookahead token is inherited
                                basic_seq_expr SEMI expr . 

** In state 631, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

FUN simple_pattern fun_def 
                   match_action 
                   MINUSGREATER seq_expr 
                                basic_seq_expr 
                                basic_seq_expr SEMI expr 
                                                    value_expr 
                                                    expr . WHERE expr 

** Conflict (shift/reduce) in state 630.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR FUN simple_pattern MINUSGREATER basic_seq_expr SEMI

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 630, looking ahead at WHERE, reducing production
** basic_seq_expr -> basic_seq_expr SEMI
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
FUN simple_pattern fun_def // lookahead token is inherited
                   match_action // lookahead token is inherited
                   MINUSGREATER seq_expr // lookahead token is inherited
                                basic_seq_expr // lookahead token is inherited
                                basic_seq_expr SEMI . 

** In state 630, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

FUN simple_pattern fun_def 
                   match_action 
                   MINUSGREATER seq_expr 
                                basic_seq_expr 
                                basic_seq_expr SEMI expr 
                                                    value_expr 
                                                    . WHERE expr THEN expr ELSE expr 

** Conflict (shift/reduce) in state 629.
** Token involved: SEMI
** This state is reached from toplevel_phrase after reading:

LPAREN FUN simple_pattern MINUSGREATER basic_seq_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
(?)

** In state 629, looking ahead at SEMI, shifting is permitted
** because of the following sub-derivation:

LPAREN expr SEMI basic_seq_expr RPAREN 
       value_expr 
       FUN simple_pattern fun_def 
                          match_action 
                          MINUSGREATER seq_expr 
                                       basic_seq_expr 
                                       basic_seq_expr . SEMI expr 

** In state 629, looking ahead at SEMI, reducing production
** seq_expr -> basic_seq_expr
** is permitted because of the following sub-derivation:

LPAREN expr SEMI basic_seq_expr RPAREN // lookahead token appears
       value_expr // lookahead token is inherited
       FUN simple_pattern fun_def // lookahead token is inherited
                          match_action // lookahead token is inherited
                          MINUSGREATER seq_expr // lookahead token is inherited
                                       basic_seq_expr . 

** Conflict (shift/reduce) in state 628.
** Tokens involved: WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER
** The following explanations concentrate on token WHERE.
** This state is reached from toplevel_phrase after reading:

LVECTOR FUN simple_pattern MINUSGREATER expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 628, looking ahead at WHERE, reducing production
** basic_seq_expr -> expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
FUN simple_pattern fun_def // lookahead token is inherited
                   match_action // lookahead token is inherited
                   MINUSGREATER seq_expr // lookahead token is inherited
                                basic_seq_expr // lookahead token is inherited
                                expr . 

** In state 628, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

FUN simple_pattern fun_def 
                   match_action 
                   MINUSGREATER seq_expr 
                                basic_seq_expr 
                                expr 
                                value_expr 
                                expr . WHERE expr 

** Conflict (shift/reduce) in state 624.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

IF expr THEN expr ELSE expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 624, looking ahead at WHERE, reducing production
** value_expr -> IF expr THEN expr ELSE expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
IF expr THEN expr ELSE expr . 

** In state 624, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
IF expr THEN expr ELSE expr 
                       value_expr 
                       expr . WHERE expr 

** Conflict (shift/reduce) in state 622.
** Tokens involved: WHERE ELSE
** The following explanations concentrate on token WHERE.
** This state is reached from toplevel_phrase after reading:

IF expr THEN expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 622, looking ahead at WHERE, reducing production
** value_expr -> IF expr THEN expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
IF expr THEN expr . 

** In state 622, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
IF expr THEN expr ELSE expr 
             value_expr 
             expr . WHERE expr 

** Conflict (shift/reduce) in state 596.
** Token involved: BAR
** This state is reached from toplevel_phrase after reading:

CASE opt_bar UNDERSCORE MINUSGREATER CASE opt_bar case_list

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
CASE opt_bar case_list 
             (?)

** In state 596, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

simple_case 
UNDERSCORE MINUSGREATER expr 
                        value_expr 
                        CASE opt_bar case_list 
                                     case_list . BAR simple_case 

** In state 596, looking ahead at BAR, reducing production
** value_expr -> CASE opt_bar case_list
** is permitted because of the following sub-derivation:

case_list BAR simple_case // lookahead token appears
simple_case // lookahead token is inherited
UNDERSCORE MINUSGREATER expr // lookahead token is inherited
                        value_expr // lookahead token is inherited
                        CASE opt_bar case_list . 

** Conflict (shift/reduce) in state 595.
** Tokens involved: WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER
** The following explanations concentrate on token WHERE.
** This state is reached from toplevel_phrase after reading:

CASE opt_bar expr MINUSGREATER expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 595, looking ahead at WHERE, reducing production
** simple_case -> expr MINUSGREATER expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
CASE opt_bar case_list // lookahead token is inherited
             simple_case // lookahead token is inherited
             expr MINUSGREATER expr . 

** In state 595, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
CASE opt_bar case_list 
             simple_case 
             expr MINUSGREATER expr 
                               value_expr 
                               expr . WHERE expr 

** Conflict (shift/reduce) in state 591.
** Tokens involved: WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER
** The following explanations concentrate on token WHERE.
** This state is reached from toplevel_phrase after reading:

CASE opt_bar UNDERSCORE MINUSGREATER expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 591, looking ahead at WHERE, reducing production
** simple_case -> UNDERSCORE MINUSGREATER expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
CASE opt_bar case_list // lookahead token is inherited
             simple_case // lookahead token is inherited
             UNDERSCORE MINUSGREATER expr . 

** In state 591, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
CASE opt_bar case_list 
             simple_case 
             UNDERSCORE MINUSGREATER expr 
                                     value_expr 
                                     expr . WHERE expr 

** Conflict (shift/reduce) in state 588.
** Tokens involved: UIDENT STRING SHARP LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT DOLLAR CHAR BEGIN
** The following explanations concentrate on token UIDENT.
** This state is reached from toplevel_phrase after reading:

simple_expr simple_expr_list

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 588, looking ahead at UIDENT, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr simple_expr_list 
            simple_expr_list simple_expr 
                             constr_longident 
                             . UIDENT DOT UIDENT 

** In state 588, looking ahead at UIDENT, reducing production
** value_expr -> simple_expr simple_expr_list
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with UIDENT
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
simple_expr simple_expr_list . 

** Conflict (shift/reduce) in state 587.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

simple_expr DOT label_longident LESSMINUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 587, looking ahead at WHERE, reducing production
** no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
no_value_expr // lookahead token is inherited
simple_expr DOT label_longident LESSMINUS expr . 

** In state 587, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
no_value_expr 
simple_expr DOT label_longident LESSMINUS expr 
                                          value_expr 
                                          expr . WHERE expr 

** Conflict (shift/reduce) in state 584.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 584, looking ahead at WHERE, reducing production
** no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
no_value_expr // lookahead token is inherited
simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr . 

** In state 584, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
no_value_expr 
simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr 
                                                   value_expr 
                                                   expr . WHERE expr 

** Conflict (shift/reduce) in state 576.
** Token involved: BAR
** This state is reached from toplevel_phrase after reading:

LVECTOR CASE opt_bar case_list

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        (?)

** In state 576, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

expr BARCOLON generator_list 
value_expr 
CASE opt_bar case_list 
             case_list . BAR simple_case 

** In state 576, looking ahead at BAR, reducing production
** value_expr -> CASE opt_bar case_list
** is permitted because of the following sub-derivation:

expr_comma_list BAR expr // lookahead token appears
expr_comma_list_element // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
CASE opt_bar case_list . 

** Conflict (shift/reduce) in state 575.
** Tokens involved: WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER
** The following explanations concentrate on token WHERE.
** This state is reached from toplevel_phrase after reading:

LVECTOR CASE opt_bar expr MINUSGREATER expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 575, looking ahead at WHERE, reducing production
** simple_case -> expr MINUSGREATER expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
CASE opt_bar case_list // lookahead token is inherited
             simple_case // lookahead token is inherited
             expr MINUSGREATER expr . 

** In state 575, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

CASE opt_bar case_list 
             simple_case 
             expr MINUSGREATER expr 
                               value_expr 
                               expr . WHERE expr 

** Conflict (shift/reduce) in state 571.
** Tokens involved: WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER
** The following explanations concentrate on token WHERE.
** This state is reached from toplevel_phrase after reading:

LVECTOR CASE opt_bar UNDERSCORE MINUSGREATER expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 571, looking ahead at WHERE, reducing production
** simple_case -> UNDERSCORE MINUSGREATER expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
CASE opt_bar case_list // lookahead token is inherited
             simple_case // lookahead token is inherited
             UNDERSCORE MINUSGREATER expr . 

** In state 571, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

CASE opt_bar case_list 
             simple_case 
             UNDERSCORE MINUSGREATER expr 
                                     value_expr 
                                     expr . WHERE expr 

** Conflict (shift/reduce) in state 564.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR simple_expr DOT label_longident LESSMINUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        (?)

** In state 564, looking ahead at WHERE, reducing production
** no_value_expr -> simple_expr DOT label_longident LESSMINUS expr
** is permitted because of the following sub-derivation:

value_expr 
expr WHERE expr // lookahead token appears
no_value_expr // lookahead token is inherited
simple_expr DOT label_longident LESSMINUS expr . 

** In state 564, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

no_value_expr 
simple_expr DOT label_longident LESSMINUS expr 
                                          value_expr 
                                          expr . WHERE expr 

** Conflict (shift/reduce) in state 552.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr AMPERAMPER expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 552, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr AMPERAMPER expr 
                value_expr 
                expr . WHERE expr 

** In state 552, looking ahead at WHERE, reducing production
** value_expr -> expr AMPERAMPER expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr AMPERAMPER expr . 

** Conflict (shift/reduce) in state 550.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr BARBAR expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 550, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr BARBAR expr 
            value_expr 
            expr . WHERE expr 

** In state 550, looking ahead at WHERE, reducing production
** value_expr -> expr BARBAR expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr BARBAR expr . 

** Conflict (shift/reduce) in state 548.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr COLONEQUAL expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        (?)

** In state 548, looking ahead at WHERE, reducing production
** no_value_expr -> expr COLONEQUAL expr
** is permitted because of the following sub-derivation:

value_expr 
expr WHERE expr // lookahead token appears
no_value_expr // lookahead token is inherited
expr COLONEQUAL expr . 

** In state 548, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

no_value_expr 
expr COLONEQUAL expr 
                value_expr 
                expr . WHERE expr 

** Conflict (shift/reduce) in state 546.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr EQ expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 546, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr EQ expr 
        value_expr 
        expr . WHERE expr 

** In state 546, looking ahead at WHERE, reducing production
** value_expr -> expr EQ expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr EQ expr . 

** Conflict (shift/reduce) in state 544.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr INFIXOP1L expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 544, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr INFIXOP1L expr 
               value_expr 
               expr . WHERE expr 

** In state 544, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP1L expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr INFIXOP1L expr . 

** Conflict (shift/reduce) in state 542.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr INFIXOP1R expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 542, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr INFIXOP1R expr 
               value_expr 
               expr . WHERE expr 

** In state 542, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP1R expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr INFIXOP1R expr . 

** Conflict (shift/reduce) in state 540.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr INFIXOP2L expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 540, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr INFIXOP2L expr 
               value_expr 
               expr . WHERE expr 

** In state 540, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP2L expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr INFIXOP2L expr . 

** Conflict (shift/reduce) in state 538.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr COLONCOLON expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 538, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr COLONCOLON expr 
                value_expr 
                expr . WHERE expr 

** In state 538, looking ahead at WHERE, reducing production
** value_expr -> expr COLONCOLON expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr COLONCOLON expr . 

** Conflict (shift/reduce) in state 536.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr INFIXOP2R expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 536, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr INFIXOP2R expr 
               value_expr 
               expr . WHERE expr 

** In state 536, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP2R expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr INFIXOP2R expr . 

** Conflict (shift/reduce) in state 534.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr INFIXOP3L expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 534, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr INFIXOP3L expr 
               value_expr 
               expr . WHERE expr 

** In state 534, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP3L expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr INFIXOP3L expr . 

** Conflict (shift/reduce) in state 532.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr MINUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 532, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr MINUS expr 
           value_expr 
           expr . WHERE expr 

** In state 532, looking ahead at WHERE, reducing production
** value_expr -> expr MINUS expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr MINUS expr . 

** Conflict (shift/reduce) in state 530.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr INFIXOP3R expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 530, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr INFIXOP3R expr 
               value_expr 
               expr . WHERE expr 

** In state 530, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP3R expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr INFIXOP3R expr . 

** Conflict (shift/reduce) in state 528.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr INFIXOP4L expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 528, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr INFIXOP4L expr 
               value_expr 
               expr . WHERE expr 

** In state 528, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP4L expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr INFIXOP4L expr . 

** Conflict (shift/reduce) in state 526.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr PLUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 526, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr PLUS expr 
          value_expr 
          expr . WHERE expr 

** In state 526, looking ahead at WHERE, reducing production
** value_expr -> expr PLUS expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr PLUS expr . 

** Conflict (shift/reduce) in state 524.
** Tokens involved: WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER
** The following explanations concentrate on token WHERE.
** This state is reached from toplevel_phrase after reading:

LVECTOR expr QUESTION expr COLON expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 524, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr QUESTION expr COLON expr 
                         value_expr 
                         expr . WHERE expr 

** In state 524, looking ahead at WHERE, reducing production
** value_expr -> expr QUESTION expr COLON expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr QUESTION expr COLON expr . 

** Conflict (shift/reduce) in state 520.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr INFIXOP4R expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 520, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr INFIXOP4R expr 
               value_expr 
               expr . WHERE expr 

** In state 520, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP4R expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr INFIXOP4R expr . 

** Conflict (shift/reduce) in state 518.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr INFIXOP5L expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 518, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr INFIXOP5L expr 
               value_expr 
               expr . WHERE expr 

** In state 518, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP5L expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr INFIXOP5L expr . 

** Conflict (shift/reduce) in state 513.
** Tokens involved: UIDENT STRING SHARP PREFIXOP LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT DOLLAR CHAR BEGIN
** The following explanations concentrate on token UIDENT.
** This state is reached from toplevel_phrase after reading:

LVECTOR constr_longident

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 513, looking ahead at UIDENT, shifting is permitted
** because of the following sub-derivation:

constr_longident simple_expr 
                 constr_longident 
                 . UIDENT DOT UIDENT 

** In state 513, looking ahead at UIDENT, reducing production
** simple_expr -> constr_longident
** is permitted because of the following sub-derivation:

simple_expr simple_expr_list // lookahead token appears because simple_expr_list can begin with UIDENT
constr_longident . 

** Conflict (shift/reduce) in state 512.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr INFIXOP5R expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 512, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr INFIXOP5R expr 
               value_expr 
               expr . WHERE expr 

** In state 512, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP5R expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr INFIXOP5R expr . 

** Conflict (shift/reduce) in state 510.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr STAR expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 510, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr STAR expr 
          value_expr 
          expr . WHERE expr 

** In state 510, looking ahead at WHERE, reducing production
** value_expr -> expr STAR expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr STAR expr . 

** Conflict (shift/reduce) in state 508.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR expr WHERE expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        value_expr 
        (?)

** In state 508, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

expr WHERE expr 
           value_expr 
           expr . WHERE expr 

** In state 508, looking ahead at WHERE, reducing production
** value_expr -> expr WHERE expr
** is permitted because of the following sub-derivation:

expr WHERE expr // lookahead token appears
value_expr // lookahead token is inherited
expr WHERE expr . 

** Conflict (shift/reduce) in state 506.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

LVECTOR simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        (?)

** In state 506, looking ahead at WHERE, reducing production
** no_value_expr -> simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr
** is permitted because of the following sub-derivation:

value_expr 
expr WHERE expr // lookahead token appears
no_value_expr // lookahead token is inherited
simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr . 

** In state 506, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

no_value_expr 
simple_expr DOT LBRACK index_list RBRACK LESSMINUS expr 
                                                   value_expr 
                                                   expr . WHERE expr 

** Conflict (shift/reduce) in state 481.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

basic_seq_expr SEMI expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 481, looking ahead at WHERE, reducing production
** basic_seq_expr -> basic_seq_expr SEMI expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
basic_seq_expr SEMI expr . 

** In state 481, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
basic_seq_expr SEMI expr 
                    value_expr 
                    expr . WHERE expr 

** Conflict (shift/reduce) in state 480.
** Tokens involved: WHILE WHERE UIDENT TRY STRING SHARP RAISE MATCH LVECTOR LPAREN LMATRIX LIDENT LET LBRACKBAR LBRACK LBRACE LAZY INT IMAGINARY IF FUNCTION FUN FOR FLOAT DOLLAR CHAR CASE BEGIN ASSERT
** The following explanations concentrate on token WHILE.
** This state is reached from toplevel_phrase after reading:

basic_seq_expr SEMI

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 480, looking ahead at WHILE, reducing production
** basic_seq_expr -> basic_seq_expr SEMI
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHILE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
basic_seq_expr SEMI . 

** In state 480, looking ahead at WHILE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
basic_seq_expr SEMI expr 
                    no_value_expr 
                    . WHILE expr DO seq_expr DONE 

** Conflict (shift/reduce) in state 479.
** Token involved: SEMI
** This state is reached from toplevel_phrase after reading:

FUN simple_pattern MINUSGREATER basic_seq_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
(?)

** In state 479, looking ahead at SEMI, shifting is permitted
** because of the following sub-derivation:

expr 
value_expr 
FUN simple_pattern fun_def 
                   match_action 
                   MINUSGREATER seq_expr 
                                basic_seq_expr 
                                basic_seq_expr . SEMI expr 

** In state 479, looking ahead at SEMI, reducing production
** seq_expr -> basic_seq_expr
** is permitted because of the following sub-derivation:

basic_seq_expr SEMI expr // lookahead token appears
expr // lookahead token is inherited
value_expr // lookahead token is inherited
FUN simple_pattern fun_def // lookahead token is inherited
                   match_action // lookahead token is inherited
                   MINUSGREATER seq_expr // lookahead token is inherited
                                basic_seq_expr . 

** Conflict (shift/reduce) in state 478.
** Tokens involved: WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER
** The following explanations concentrate on token WHERE.
** This state is reached from toplevel_phrase after reading:

expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 478, looking ahead at WHERE, reducing production
** basic_seq_expr -> expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr . 

** In state 478, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr . WHERE expr 

** Conflict (shift/reduce) in state 468.
** Tokens involved: WHERE STAR QUESTION PLUS MINUS INFIXOP5R INFIXOP5L INFIXOP4R INFIXOP4L INFIXOP3R INFIXOP3L INFIXOP2R INFIXOP2L INFIXOP1R INFIXOP1L EQ COLONEQUAL COLONCOLON BARBAR AMPERAMPER
** The following explanations concentrate on token WHERE.
** This state is reached from toplevel_phrase after reading:

expr QUESTION expr COLON expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 468, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr QUESTION expr COLON expr 
                         value_expr 
                         expr . WHERE expr 

** In state 468, looking ahead at WHERE, reducing production
** value_expr -> expr QUESTION expr COLON expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr QUESTION expr COLON expr . 

** Conflict (shift/reduce) in state 466.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr AMPERAMPER expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 466, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr AMPERAMPER expr 
                value_expr 
                expr . WHERE expr 

** In state 466, looking ahead at WHERE, reducing production
** value_expr -> expr AMPERAMPER expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr AMPERAMPER expr . 

** Conflict (shift/reduce) in state 464.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr BARBAR expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 464, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr BARBAR expr 
            value_expr 
            expr . WHERE expr 

** In state 464, looking ahead at WHERE, reducing production
** value_expr -> expr BARBAR expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr BARBAR expr . 

** Conflict (shift/reduce) in state 462.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr COLONEQUAL expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 462, looking ahead at WHERE, reducing production
** no_value_expr -> expr COLONEQUAL expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
no_value_expr // lookahead token is inherited
expr COLONEQUAL expr . 

** In state 462, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
no_value_expr 
expr COLONEQUAL expr 
                value_expr 
                expr . WHERE expr 

** Conflict (shift/reduce) in state 460.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr EQ expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 460, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr EQ expr 
        value_expr 
        expr . WHERE expr 

** In state 460, looking ahead at WHERE, reducing production
** value_expr -> expr EQ expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr EQ expr . 

** Conflict (shift/reduce) in state 458.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr INFIXOP1L expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 458, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr INFIXOP1L expr 
               value_expr 
               expr . WHERE expr 

** In state 458, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP1L expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr INFIXOP1L expr . 

** Conflict (shift/reduce) in state 456.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr INFIXOP1R expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 456, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr INFIXOP1R expr 
               value_expr 
               expr . WHERE expr 

** In state 456, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP1R expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr INFIXOP1R expr . 

** Conflict (shift/reduce) in state 454.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr INFIXOP2L expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 454, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr INFIXOP2L expr 
               value_expr 
               expr . WHERE expr 

** In state 454, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP2L expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr INFIXOP2L expr . 

** Conflict (shift/reduce) in state 452.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr COLONCOLON expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 452, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr COLONCOLON expr 
                value_expr 
                expr . WHERE expr 

** In state 452, looking ahead at WHERE, reducing production
** value_expr -> expr COLONCOLON expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr COLONCOLON expr . 

** Conflict (shift/reduce) in state 450.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr INFIXOP2R expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 450, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr INFIXOP2R expr 
               value_expr 
               expr . WHERE expr 

** In state 450, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP2R expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr INFIXOP2R expr . 

** Conflict (shift/reduce) in state 448.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr INFIXOP3L expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 448, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr INFIXOP3L expr 
               value_expr 
               expr . WHERE expr 

** In state 448, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP3L expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr INFIXOP3L expr . 

** Conflict (shift/reduce) in state 446.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr MINUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 446, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr MINUS expr 
           value_expr 
           expr . WHERE expr 

** In state 446, looking ahead at WHERE, reducing production
** value_expr -> expr MINUS expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr MINUS expr . 

** Conflict (shift/reduce) in state 444.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr INFIXOP3R expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 444, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr INFIXOP3R expr 
               value_expr 
               expr . WHERE expr 

** In state 444, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP3R expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr INFIXOP3R expr . 

** Conflict (shift/reduce) in state 442.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr INFIXOP4L expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 442, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr INFIXOP4L expr 
               value_expr 
               expr . WHERE expr 

** In state 442, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP4L expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr INFIXOP4L expr . 

** Conflict (shift/reduce) in state 440.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr PLUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 440, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr PLUS expr 
          value_expr 
          expr . WHERE expr 

** In state 440, looking ahead at WHERE, reducing production
** value_expr -> expr PLUS expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr PLUS expr . 

** Conflict (shift/reduce) in state 436.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr INFIXOP4R expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 436, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr INFIXOP4R expr 
               value_expr 
               expr . WHERE expr 

** In state 436, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP4R expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr INFIXOP4R expr . 

** Conflict (shift/reduce) in state 434.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr INFIXOP5L expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 434, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr INFIXOP5L expr 
               value_expr 
               expr . WHERE expr 

** In state 434, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP5L expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr INFIXOP5L expr . 

** Conflict (shift/reduce) in state 431.
** Tokens involved: UIDENT STRING SHARP PREFIXOP LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT DOLLAR CHAR BEGIN
** The following explanations concentrate on token UIDENT.
** This state is reached from toplevel_phrase after reading:

constr_longident

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
(?)

** In state 431, looking ahead at UIDENT, shifting is permitted
** because of the following sub-derivation:

constr_longident simple_expr 
                 constr_longident 
                 . UIDENT DOT UIDENT 

** In state 431, looking ahead at UIDENT, reducing production
** simple_expr -> constr_longident
** is permitted because of the following sub-derivation:

simple_expr simple_expr_list // lookahead token appears because simple_expr_list can begin with UIDENT
constr_longident . 

** Conflict (shift/reduce) in state 430.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr INFIXOP5R expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 430, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr INFIXOP5R expr 
               value_expr 
               expr . WHERE expr 

** In state 430, looking ahead at WHERE, reducing production
** value_expr -> expr INFIXOP5R expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr INFIXOP5R expr . 

** Conflict (shift/reduce) in state 428.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr STAR expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 428, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr STAR expr 
          value_expr 
          expr . WHERE expr 

** In state 428, looking ahead at WHERE, reducing production
** value_expr -> expr STAR expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr STAR expr . 

** Conflict (shift/reduce) in state 426.
** Token involved: WHERE
** This state is reached from toplevel_phrase after reading:

expr WHERE expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 426, looking ahead at WHERE, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
expr WHERE expr 
           value_expr 
           expr . WHERE expr 

** In state 426, looking ahead at WHERE, reducing production
** value_expr -> expr WHERE expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with WHERE
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
expr WHERE expr . 

** Conflict (shift/reduce) in state 417.
** Tokens involved: UIDENT STRING SHARP PREFIXOP LVECTOR LPAREN LMATRIX LIDENT LBRACKBAR LBRACK LBRACE INT IMAGINARY FLOAT DOLLAR CHAR BEGIN
** The following explanations concentrate on token UIDENT.
** This state is reached from toplevel_phrase after reading:

simple_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
(?)

** In state 417, looking ahead at UIDENT, shifting is permitted
** because of the following sub-derivation:

top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr simple_expr_list 
            simple_expr 
            constr_longident 
            . UIDENT DOT UIDENT 

** In state 417, looking ahead at UIDENT, reducing production
** value_expr -> simple_expr
** is permitted because of the following sub-derivation:

use_file_exprs top_expr // lookahead token appears because top_expr can begin with UIDENT
top_expr // lookahead token is inherited
seq_expr // lookahead token is inherited
basic_seq_expr // lookahead token is inherited
expr // lookahead token is inherited
value_expr // lookahead token is inherited
simple_expr . 

** Conflict (shift/reduce) in state 371.
** Tokens involved: COLONCOLON BARBAR AS
** The following explanations concentrate on token COLONCOLON.
** This state is reached from toplevel_phrase after reading:

LET rec_flag LISTPAT pattern

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
LET rec_flag let_bindings 
             let_binding 
             pattern_comma_list EQ seq_expr 
             pattern_comma_list_element 
             pattern 
             (?)

** In state 371, looking ahead at COLONCOLON, reducing production
** built_in_constr -> LISTPAT pattern
** is permitted because of the following sub-derivation:

pattern COLONCOLON pattern // lookahead token appears
built_in_constr // lookahead token is inherited
LISTPAT pattern . 

** In state 371, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

built_in_constr 
LISTPAT pattern 
        pattern . COLONCOLON pattern 

** Conflict (shift/reduce) in state 95.
** Token involved: DOT
** This state is reached from toplevel_phrase after reading:

LBRACE UIDENT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LBRACE record_expr opt_comma RBRACE 
       simple_expr WITH lbl_expr_list 
       (?)

** In state 95, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

constr_longident 
UIDENT . DOT UIDENT 

** In state 95, looking ahead at DOT, reducing production
** constr_longident -> UIDENT
** is permitted because of the following sub-derivation:

simple_expr DOT label_longident // lookahead token appears
constr_longident // lookahead token is inherited
UIDENT . 

** Conflict (shift/reduce) in state 56.
** Token involved: DOT
** This state is reached from toplevel_phrase after reading:

LVECTOR UIDENT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
LVECTOR list_expr RBRACK 
        expr BARCOLON generator_list 
        (?)

** In state 56, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

value_expr 
constr_longident simple_expr 
UIDENT . DOT UIDENT 

** In state 56, looking ahead at DOT, reducing production
** constr_longident -> UIDENT
** is permitted because of the following sub-derivation:

no_value_expr 
simple_expr DOT label_longident LESSMINUS expr // lookahead token appears
constr_longident // lookahead token is inherited
UIDENT . 

** Conflict (shift/reduce) in state 46.
** Token involved: DOT
** This state is reached from toplevel_phrase after reading:

BEGIN UIDENT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
simple_expr 
BEGIN seq_expr END 
      basic_seq_expr 
      expr 
      (?)

** In state 46, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

value_expr 
constr_longident simple_expr 
UIDENT . DOT UIDENT 

** In state 46, looking ahead at DOT, reducing production
** constr_longident -> UIDENT
** is permitted because of the following sub-derivation:

no_value_expr 
simple_expr DOT label_longident LESSMINUS expr // lookahead token appears
constr_longident // lookahead token is inherited
UIDENT . 

** Conflict (shift/reduce) in state 43.
** Token involved: DOT
** This state is reached from toplevel_phrase after reading:

MATCH UIDENT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
value_expr 
MATCH expr WITH opt_bar match_cases 
      (?)

** In state 43, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

value_expr 
constr_longident simple_expr 
UIDENT . DOT UIDENT 

** In state 43, looking ahead at DOT, reducing production
** constr_longident -> UIDENT
** is permitted because of the following sub-derivation:

no_value_expr 
simple_expr DOT label_longident LESSMINUS expr // lookahead token appears
constr_longident // lookahead token is inherited
UIDENT . 

** Conflict (shift/reduce) in state 3.
** Token involved: DOT
** This state is reached from toplevel_phrase after reading:

UIDENT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel_phrase 
use_file_exprs EOF 
top_expr 
seq_expr 
basic_seq_expr 
expr 
(?)

** In state 3, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

value_expr 
constr_longident simple_expr 
UIDENT . DOT UIDENT 

** In state 3, looking ahead at DOT, reducing production
** constr_longident -> UIDENT
** is permitted because of the following sub-derivation:

no_value_expr 
simple_expr DOT label_longident LESSMINUS expr // lookahead token appears
constr_longident // lookahead token is inherited
UIDENT . 
