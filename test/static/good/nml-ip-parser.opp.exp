File "nml-ip-parser.mly", line 252, characters 25-28:
Warning: the token VAL is unused.
File "nml-ip-parser.mly", line 1114, characters 0-8:
Warning: symbol opt_semi is unreachable from any of the start symbol(s).
%{

open Symbol
open Ip_parsetree
open Ip_location

module Dep = Ip_depend

let mkindex d =
  { pindex_desc = d; pindex_loc = symbol_loc() }
let mkpat d =
  { ppat_desc = d; ppat_loc = symbol_loc() }
let mkexp d =
  { pexp_desc = d; pexp_loc = symbol_loc() }
let mkstr d =
  { pstr_desc = d; pstr_loc = symbol_loc() }
let mktyp d =
  { ptyp_desc = d; ptyp_loc = symbol_loc() }

let mkoperator name pos =
  { pexp_desc = Pexp_ident(Lident name); pexp_loc = rhs_loc pos }

(* Ghost expressions and patterns:
    expressions and patterns added by the parser;
    their location is an empty range of characters.
    The profiler doesn't instrument such expressions.
*)
let ghexp d point =
  { pexp_desc = d; pexp_loc = {loc_start = point; loc_end = point} }

let ghpat d point =
  { ppat_desc = d; ppat_loc = {loc_start = point; loc_end = point} }

let mkldot modname name =
  Ldot(symbol modname, symbol name)

let mkident modname name =
  mkexp(Pexp_ident(mkldot modname name))

let mkapply modname name arglst =
  mkexp(Pexp_apply((mkident modname name),arglst))

let ghident modname name point =
  ghexp (Pexp_ident(mkldot modname name)) point

let ghapply modname name arglst point =
  ghexp (Pexp_apply((ghident modname name point),arglst)) point

let mklazy e =
  let {loc_start = st} = symbol_loc () in
  let pat  = ghpat (Ppat_constant Const_unit) st in
  let fn   = ghexp (Pexp_function [pat,e]) st in
    ghapply "Pervasive" "memo" [fn] st

let mkassert e =
  let {loc_start = st; loc_end = en} = symbol_loc () in
  let triple = ghexp (Pexp_tuple
                       [ghexp (Pexp_constant (Const_string !input_name)) en;
                        ghexp (Pexp_constant (Const_int st)) en;
                        ghexp (Pexp_constant (Const_int en)) en]) en in
  let ex = mkldot "Pervasive" "Assert_failure" in
  let bucket = ghexp (Pexp_construct (ex, Some triple)) en in
  let raiser = ghexp (Pexp_raise(bucket)) en in
  let un = ghexp (Pexp_constant(Const_unit)) en in
  match e with
  | {pexp_desc = Pexp_constant(Const_int 0)} -> raiser
  | _ -> if !Ip_syntaxerr.noassert
         then un
         else mkexp(Pexp_ifthenelse (e, un, raiser))

let mkinfix arg1 name arg2 =
(*
  if name == plussym then
    (match arg1 with
	 {pexp_desc = Pexp_apply({pexp_desc = Pexp_ident(Lident op)},
				 [arg1a;arg1b])} when op == starsym ->
	   (match arg2 with
		{pexp_desc = Pexp_apply({pexp_desc = Pexp_ident(Lident op)},
					[arg2a;arg2b])} when op == starsym ->
		  (* a*b + c*d -> interp a b c d *)
		  mkexp(Pexp_apply(mkoperator interpsym 2,
				   [arg1a;arg1b;arg2a;arg2b]))
	      | _ ->
		  (* a*b+c -> mpadd c a b *)
		  mkexp(Pexp_apply(mkoperator mpaddsym 2,
				   [arg2;arg1a;arg1b])))
       | _ ->
	   (match arg2 with
		{pexp_desc = Pexp_apply({pexp_desc = Pexp_ident(Lident op)},
					[arg2a;arg2b])} when op == starsym ->
		  (* a+b*c -> mpadd a b c *)
		  mkexp(Pexp_apply(mkoperator mpaddsym 2,
				   [arg1;arg2a;arg2b]))
	      | _ ->
		  (* a + b *)
		  mkexp(Pexp_apply(mkoperator name 2, [arg1;arg2]))))

  else if name == starsym then (* a*(b-c) -> nuc a b c *)
    (match arg1,arg2 with
	 {pexp_desc = Pexp_apply({pexp_desc = Pexp_ident(Lident op)},
				 [arg1a;arg1b])},_ when op == minussym ->
	   (* (a-b)*c -> nuc a b c *)
	   mkexp(Pexp_apply(mkoperator nucsym 2,[arg1a;arg1b;arg2]))
       | _,{pexp_desc = Pexp_apply({pexp_desc = Pexp_ident(Lident op)},
				   [arg2a;arg2b])} when op == minussym ->
	   (* a*(b-c) -> nuc b c a *)
	   mkexp(Pexp_apply(mkoperator nucsym 2,[arg2a;arg2b;arg1]))
       | _ ->
	   (* a*b *)
	   mkexp(Pexp_apply(mkoperator name 2, [arg1;arg2])))
  else
*)
    mkexp(Pexp_apply(mkoperator name 2, [arg1;arg2]))

let mkuminus name arg =
  match arg.pexp_desc with
    Pexp_constant(Const_int n) ->
      mkexp(Pexp_constant(Const_int(-n)))
  | Pexp_constant(Const_float f) ->
      mkexp(Pexp_constant(Const_float(-. f)))
  | _ ->
      mkexp(Pexp_apply(mkoperator name 1, [arg]))

let mkstrexp e =
  { pstr_desc = Pstr_eval e; pstr_loc = e.pexp_loc }

let rec mkrangepat c1 c2 =
  if c1 > c2 then mkrangepat c2 c1
  else if c1 = c2 then mkpat(Ppat_constant(Const_char c1))
  else mkpat(Ppat_char_range(c1,c2))

(* --------------------------------------------- *)
(* Let and TopLet bindings... we use a source	 *)
(* transformation trick to achieve the all or	 *)
(* nothing effect of "let x = ... and y = ..."	 *)
(* and "let rec x = ... and y = ...". In the  	 *)
(* first case, we bind none immediately, while	 *)
(* in the second case we bind all immediately.	 *)
(*					      	 *)
(* In either case:     	       	       	      	 *)
(*		  				 *)
(*  let {rec} x = ... y = ...  			 *)
(*     	       	       	      	 		 *)
(* is equivalent to                              *)
(*    					       	 *)
(*  let {rec} [x; y] = [x_expr; y_expr] ...      *)
(*     	       	       	       	       	       	 *)
(* --------------------------------------------- *)
let mklistpat lst  = mkpat(Ppat_list lst)
let mklistexpr lst = mkexp(Pexp_list lst)

let mktoplet recflg patlist =
  let pats,exprs = List.split patlist in
  let pat' = mklistpat pats in
  let expr' = mklistexpr exprs in
    (* here we keep everything as lists because the toplevel *)
    (* bindings get their lambda lists printed *)
    mkstrexp(mkexp(Pexp_toplet(recflg,(pat',expr'))))

let mklet recflg patlist body =
  let pats,exprs = List.split patlist in
  let pat' = mklistpat pats in
  let expr' = mklistexpr exprs in
    mkexp(Pexp_let(recflg, (pat', expr'), body))

let mktuple = function
    [exp] -> exp
  | lst   -> mkexp(Pexp_tuple lst)

let mktuplepat = function
    [pat] -> pat
  | lst   -> mkpat(Ppat_tuple lst)

let mklistpat tl patlst =
  List.fold_left
    (fun tl pat ->
       match pat with
	   {ppat_desc = Ppat_restcons(id,_)} ->
	     mkpat(Ppat_restcons(id, tl))
	 | _ ->
	     mkpat(Ppat_cons(pat,tl)))
    tl patlst

(* -- Haskell-style List Comprehensions -- *)
let rec make_comprehension body gens initial =
  let rsltid = Symbol.symbol " rslt" in
  let rsltpat = mkpat(Ppat_ident rsltid) in
  let rslt  = mkexp(Pexp_ident (Lident rsltid)) in
  let generate_body pat lst tst rslt' =
    let body' =
      match tst with
	  None   -> rslt'
	| Some t -> mkexp(Pexp_when(t,rslt'))
    in
    let fn =
      match tst,pat with
	  None,{ppat_desc = Ppat_ident _} ->  (* irrefutable pattern *)
	    mkexp(
	      Pexp_function
		    [mktuplepat[pat;rsltpat],body'])
	| _ -> (* refutable pattern *)
	    mkexp(
	      Pexp_function
		    [mktuplepat[pat;rsltpat],body';
		     mktuplepat[mkpat(Ppat_any);rsltpat],rslt])
    in
      mkexp(Pexp_compre(fn,lst,initial))
  in
    match gens with
      | [(pat,lst,tst)] ->
	  generate_body pat lst tst
	    (mkinfix body conssym rslt)
      | (pat,lst,tst)::tl ->
	  generate_body pat lst tst
	    (make_comprehension body tl rslt)
      | _ -> Ip_types.cant_happen "make_comprehension"

let syntax_error () =
  raise Ip_syntaxerr.Escape_error

let unclosed opening_name opening_num closing_name closing_num =
  raise(Ip_syntaxerr.Error
	  (Ip_syntaxerr.Unclosed
	     (rhs_loc opening_num, opening_name,
              rhs_loc closing_num, closing_name)))

%}
%start toplevel_phrase
%start use_file
%token ABOVE
%token AMPERAMPER
%token AMPERKEY
%token AMPEROPT
%token AMPERREST
%token AND
%token ARRAYPAT
%token AS
%token ASSERT
%token BAR
%token BARBAR
%token BARCOLON
%token BARRBRACK
%token BEGIN
%token BELOW
%token BOXPAT
%token CARRAYPAT
%token CASE
%token <char> CHAR
%token CHARPAT
%token COLON
%token COLONCOLON
%token COLONEQUAL
%token COMMA
%token COMPLEXPAT
%token DIR_HANDLEPAT
%token DO
%token DOLLAR
%token DONE
%token DOT
%token DOTDOT
%token DOTDOTDOT
%token DOWNTO
%token ELSE
%token END
%token EOF
%token EQ
%token EXCEPTION
%token FARRAYPAT
%token <float> FLOAT
%token FLOATPAT
%token FOR
%token FUN
%token FUNCTION
%token HASHTABLEPAT
%token IF
%token <float> IMAGINARY
%token IN
%token <Symbol.symbol> INFIXOP1L
%token <Symbol.symbol> INFIXOP1R
%token <Symbol.symbol> INFIXOP2L
%token <Symbol.symbol> INFIXOP2R
%token <Symbol.symbol> INFIXOP3L
%token <Symbol.symbol> INFIXOP3R
%token <Symbol.symbol> INFIXOP4L
%token <Symbol.symbol> INFIXOP4R
%token <Symbol.symbol> INFIXOP5L
%token <Symbol.symbol> INFIXOP5R
%token <int> INT
%token INTPAT
%token IN_CHANNELPAT
%token LAZY
%token LBRACE
%token LBRACK
%token LBRACKBAR
%token LESSMINUS
%token LET
%token <Symbol.symbol> LIDENT
%token LISTPAT
%token LMATRIX
%token LPAREN
%token LVECTOR
%token MATCH
%token MINUS
%token MINUSGREATER
%token MODULE
%token MUTABLE
%token NUMBERPAT
%token OF
%token OPEN
%token OUT_CHANNELPAT
%token PLUS
%token <Symbol.symbol> PREFIXOP
%token QUESTION
%token QUEUEPAT
%token RAISE
%token RBRACE
%token RBRACK
%token REALPAT
%token REC
%token RECORDPAT
%token RPAREN
%token SEMI
%token SEMISEMI
%token SHARP
%token STACKPAT
%token STAR
%token <string> STRING
%token STRINGPAT
%token SYMBOLPAT
%token THEN
%token <Symbol.symbol> TIDENT
%token TO
%token TRY
%token TUPLEPAT
%token TYPE
%token <Symbol.symbol> UIDENT
%token UNDERSCORE
%token VAL
%token VECTORPAT
%token WEAKARRAYPAT
%token WHEN
%token WHERE
%token WHILE
%token WITH
%right prec_let
%right SEMI
%right prec_fun prec_match prec_try
%right prec_list
%right prec_if
%right COLONEQUAL LESSMINUS
%left AS
%left BAR
%left COMMA
%right QUESTION
%right BARBAR
%right AMPERAMPER
%left EQ INFIXOP1L
%right INFIXOP1R
%left INFIXOP2L
%right INFIXOP2R
%right COLONCOLON
%left INFIXOP3L MINUS PLUS
%right INFIXOP3R
%left INFIXOP4L STAR
%right INFIXOP4R
%right prec_unary_minus
%left INFIXOP5L
%right INFIXOP5R
%left prec_appl
%right prec_constr_appl
%left DOT
%right PREFIXOP
%type <Ip_parsetree.structure_item list * Symbol.symbol list> toplevel_phrase
%type <Ip_parsetree.structure_item list * Symbol.symbol list> use_file
%%

toplevel_phrase:
  _1 = use_file_exprs _2 = EOF
    {     ( List.rev _1, Dep.needed_modules() )}
| 
    {      ( [], [] )}

use_file:
  _1 = use_file_exprs _2 = EOF
    {    (List.rev _1, Dep.needed_modules() )}

use_file_exprs:
  _1 = top_expr
    {      ( [_1] )}
| _1 = use_file_exprs _2 = top_expr
    {      ( _2::_1 )}

top_expr:
  _1 = SEMISEMI
    {      ( mkstr(Pstr_empty) )}
| _1 = LET _2 = rec_flag _3 = let_bindings %prec prec_let
    {      ( mktoplet _2 (List.rev _3) )}
| _1 = EXCEPTION _2 = UIDENT _3 = OF _4 = type_expr
    {      ( mkstr(Pstr_exception(_2,true)) )}
| _1 = EXCEPTION _2 = UIDENT
    {      ( mkstr(Pstr_exception(_2,false)) )}
| _1 = TYPE _2 = type_vars _3 = LIDENT _4 = EQ _5 = opt_bar _6 = tag_list
    {      ( mkstr(Pstr_tags(_3,List.rev _6)) )}
| _1 = TYPE _2 = LIDENT _3 = EQ _4 = opt_bar _5 = tag_list
    {      ( mkstr(Pstr_tags(_2,List.rev _5)) )}
| _1 = TYPE _2 = LIDENT _3 = EQ _4 = LBRACE _5 = lbl_type_list _6 = opt_comma _7 = RBRACE
    {      ( mkstr(Pstr_recdef(_2,List.rev _5)) )}
| _1 = TYPE _2 = LIDENT _3 = EQ _4 = LBRACE _5 = lbl_type_list _6 = opt_comma _7 = error
    {      ( unclosed "{" 4 "}" 7 )}
| _1 = MODULE _2 = mod_ident _3 = EQ _4 = mod_ident
    {      ( Dep.add_equiv _2 _4;
	mkstr(Pstr_module_abbrev(_2,_4)) )}
| _1 = OPEN _2 = mod_ident
    {      ( Dep.add _2;
	mkstr(Pstr_open _2) )}
| _1 = seq_expr
    {      ( mkstrexp _1 )}

tag_list:
  _1 = simple_tag_type %prec prec_list
    {     ( [_1] )}
| _1 = tag_list _2 = BAR _3 = simple_tag_type %prec prec_list
    {      ( _3 :: _1 )}

simple_tag_type:
  _1 = UIDENT _2 = OF _3 = type_expr
    {      ( (_1,true) )}
| _1 = UIDENT
    {      ( (_1,false) )}

type_vars:
  _1 = TIDENT
    {      ( [_1] )}
| _1 = LPAREN _2 = type_list _3 = RPAREN
    {      ( _2 )}

type_list:
  _1 = TIDENT %prec prec_list
    {      ([_1])}
| _1 = type_list _2 = COMMA _3 = TIDENT %prec prec_list
    {      (_3::_1)}

type_expr:
  _1 = label_longident
    {      ( mktyp(Ptyp_ident _1))}
| _1 = TIDENT
    {      (mktyp(Ptyp_ident(Tident _1)))}
| _1 = type_expr _2 = label_longident
    {      (mktyp(Ptyp_constr(_2,_1)))}
| _1 = type_expr _2 = STAR _3 = type_expr
    {      (mktyp(Ptyp_prod(_1,_3)))}
| _1 = type_expr _2 = MINUSGREATER _3 = type_expr %prec LESSMINUS
    {      (mktyp(Ptyp_arrow(_1,_3)))}
| _1 = LPAREN _2 = type_expr _3 = RPAREN
    {      (_2)}
| _1 = LPAREN _2 = type_expr _3 = error
    {      ( unclosed "(" 1 ")" 3 )}

field_defn:
  _1 = LIDENT _2 = COLON _3 = type_expr
    {      ( _1,Ip_types.Immutable )}
| _1 = MUTABLE _2 = LIDENT _3 = COLON _4 = type_expr
    {      ( _2,Ip_types.Mutable )}

lbl_type_list:
  _1 = field_defn %prec prec_list
    {      ( [_1] )}
| _1 = lbl_type_list _2 = COMMA _3 = field_defn %prec prec_list
    {      ( _3 :: _1 )}

rec_flag:
  
    {     ( Nonrecursive )}
| _1 = REC
    {      ( Recursive )}

expr:
  _1 = value_expr
    {      ( _1 )}
| _1 = no_value_expr
    {      ( _1 )}

no_value_expr:
  _1 = RAISE _2 = expr
    {      ( mkexp(Pexp_raise(_2)) )}
| _1 = WHILE _2 = expr _3 = DO _4 = seq_expr _5 = DONE
    {      ( mkexp(Pexp_while(_2,_4)) )}
| _1 = FOR _2 = LIDENT _3 = EQ _4 = expr _5 = direction_flag _6 = expr _7 = DO _8 = seq_expr _9 = DONE
    {      ( mkexp(Pexp_for(_2,_4,_5,_6,_8)) )}
| _1 = simple_expr _2 = DOT _3 = label_longident _4 = LESSMINUS _5 = expr
    {      ( mkexp(Pexp_setfield(_1,_3,_5)) )}
| _1 = simple_expr _2 = DOT _3 = LBRACK _4 = index_list _5 = RBRACK _6 = LESSMINUS _7 = expr
    {      ( mkexp(Pexp_setindex(_1,List.rev _4,_7)) )}
| _1 = expr _2 = COLONEQUAL _3 = expr
    {      ( mkinfix _1 colonequalsym _3 )}
| _1 = ASSERT _2 = simple_expr %prec prec_appl
    {      ( mkassert _2 )}

value_expr:
  _1 = simple_expr
    {      ( _1 )}
| _1 = simple_expr _2 = simple_expr_list %prec prec_appl
    {      ( mkexp(Pexp_apply(_1,List.rev _2)) )}
| _1 = LET _2 = rec_flag _3 = let_bindings _4 = IN _5 = seq_expr %prec prec_let
    {      ( mklet _2 (List.rev _3) _5 )}
| _1 = LET _2 = MODULE _3 = mod_ident _4 = EQ _5 = mod_ident _6 = IN _7 = seq_expr %prec prec_let
    {      ( Dep.subst _5 _3;
	mkexp(Pexp_letmod(_3,_5,_7)) )}
| _1 = FUN _2 = simple_pattern _3 = fun_def %prec prec_fun
    {      ( mkexp(Pexp_function[_2,_3]) )}
| _1 = FUNCTION _2 = opt_bar _3 = match_cases %prec prec_fun
    {      ( mkexp(Pexp_function(List.rev _3)) )}
| _1 = TRY _2 = seq_expr _3 = WITH _4 = opt_bar _5 = match_cases %prec prec_try
    {      ( mkexp(Pexp_try(_2,List.rev _5)) )}
| _1 = TRY _2 = seq_expr _3 = WITH _4 = error %prec prec_try
    {      ( syntax_error() )}
| _1 = IF _2 = expr _3 = THEN _4 = expr _5 = ELSE _6 = expr %prec prec_if
    {      ( mkexp(Pexp_ifthenelse(_2,_4,_6)) )}
| _1 = IF _2 = expr _3 = THEN _4 = expr %prec prec_if
    {      ( mkexp(Pexp_ifthenelse(_2,_4,ghexp (Pexp_constant Const_unit) 0)) )}
| _1 = WHERE _2 = expr _3 = THEN _4 = expr _5 = ELSE _6 = expr %prec prec_if
    {      ( mkexp(Pexp_where(_2, Some _4, Some _6)) )}
| _1 = WHERE _2 = expr %prec prec_if
    {      ( mkexp(Pexp_where(_2, None, None)) )}
| _1 = expr _2 = WHERE _3 = expr %prec prec_if
    {      ( mkexp(Pexp_where(_3, Some _1, None)) )}
| _1 = MATCH _2 = expr _3 = WITH _4 = opt_bar _5 = match_cases %prec prec_match
    {      ( mkexp(Pexp_match(_2,List.rev _5)) )}
| _1 = MATCH _2 = expr_comma_list _3 = opt_comma _4 = WITH _5 = opt_bar _6 = match_cases %prec prec_match
    {      ( mkexp(Pexp_match(mkexp(Pexp_tuple(List.rev _2)),List.rev _6)) )}
| _1 = CASE _2 = opt_bar _3 = case_list
    {      ( mkexp(Pexp_case(List.rev _3)) )}
| _1 = constr_longident _2 = simple_expr %prec prec_constr_appl
    {      ( mkexp(Pexp_construct(_1,Some _2)) )}
| _1 = expr _2 = QUESTION _3 = expr _4 = COLON _5 = expr
    {      ( mkexp(Pexp_ifthenelse(_1,_3,_5)) )}
| _1 = expr _2 = COLONCOLON _3 = expr
    {      ( mkinfix _1 conssym _3 )}
| _1 = expr _2 = INFIXOP1L _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = INFIXOP2L _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = INFIXOP3L _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = INFIXOP4L _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = INFIXOP5L _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = INFIXOP1R _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = INFIXOP2R _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = INFIXOP3R _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = INFIXOP4R _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = INFIXOP5R _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = PLUS _3 = expr
    {      ( mkinfix _1 plussym _3 )}
| _1 = expr _2 = MINUS _3 = expr
    {      ( mkinfix _1 minussym _3 )}
| _1 = MINUS _2 = expr %prec prec_unary_minus
    {      ( mkuminus negsym _2 )}
| _1 = PLUS _2 = expr %prec prec_unary_minus
    {      ( _2 )}
| _1 = expr _2 = STAR _3 = expr
    {      ( mkinfix _1 starsym _3 )}
| _1 = expr _2 = EQ _3 = expr
    {      ( mkinfix _1 eqsym _3 )}
| _1 = expr _2 = BARBAR _3 = expr
    {      ( mkexp(Pexp_scor(_1,_3)) )}
| _1 = expr _2 = AMPERAMPER _3 = expr
    {      ( mkexp(Pexp_scand(_1,_3)) )}
| _1 = LAZY _2 = simple_expr %prec prec_appl
    {      ( mklazy _2 )}

case_list:
  _1 = simple_case %prec prec_list
    {      ([_1])}
| _1 = case_list _2 = BAR _3 = simple_case %prec prec_list
    {      ( _3::_1 )}

simple_case:
  _1 = expr _2 = MINUSGREATER _3 = expr
    {      ( _1,_3 )}
| _1 = UNDERSCORE _2 = MINUSGREATER _3 = expr
    {      ( mkexp(Pexp_constant(Const_int 1)), _3 )}

expr_comma_list:
  _1 = expr_comma_list_element %prec prec_list
    {      (_1)}
| _1 = expr_comma_list _2 = COMMA _3 = expr_comma_list_element %prec prec_list
    {      (_3@_1)}

expr_comma_list_element:
  _1 = expr
    {      ([_1])}
| _1 = colonized_symbol _2 = COLON _3 = expr
    {      ([_3; mkexp(Pexp_constant (Const_symbol _1))])}

colonized_symbol:
  _1 = LIDENT
    {      (_1)}
| _1 = UIDENT
    {      (_1)}

basic_seq_expr:
  _1 = expr
    {      ( [_1] )}
| _1 = basic_seq_expr _2 = SEMI _3 = expr
    {      ( _3 :: _1 )}
| _1 = basic_seq_expr _2 = SEMI
    {      ( _1 )}

seq_expr:
  _1 = basic_seq_expr
    {      ( match _1 with
	    [e] -> e
	  | _ ->
	      mkexp(Pexp_sequence(List.rev _1)) )}

simple_expr:
  _1 = val_longident
    {      ( mkexp(Pexp_ident _1) )}
| _1 = constant
    {      ( mkexp(Pexp_constant _1) )}
| _1 = constr_longident
    {      ( mkexp(Pexp_construct(_1,None)) )}
| _1 = LPAREN _2 = expr_comma_list _3 = opt_comma _4 = RPAREN
    {      ( mktuple (List.rev _2) )}
| _1 = LPAREN _2 = expr_comma_list _3 = BAR _4 = expr _5 = RPAREN
    {      ( mkexp(Pexp_as_tuple(mkinfix (mkexp(Pexp_list(List.rev _2)))
			      appendsym _4)) )}
| _1 = LPAREN _2 = expr _3 = SEMI _4 = basic_seq_expr _5 = RPAREN
    {      ( mkexp(Pexp_sequence(_2::(List.rev _4))) )}
| _1 = LPAREN _2 = expr _3 = SEMI _4 = basic_seq_expr _5 = error
    {      ( unclosed "(" 1 ")" 5 )}
| _1 = LPAREN _2 = expr_comma_list _3 = error
    {      ( unclosed "(" 1 ")" 3 )}
| _1 = BEGIN _2 = seq_expr _3 = END
    {      ( _2 )}
| _1 = BEGIN _2 = seq_expr _3 = error
    {      ( unclosed "begin" 1 "end" 3 )}
| _1 = simple_expr _2 = DOT _3 = label_longident
    {      ( mkexp(Pexp_field(_1,_3)) )}
| _1 = simple_expr _2 = DOT _3 = LBRACK _4 = index_list _5 = RBRACK
    {      ( mkexp(Pexp_getindex(_1,List.rev _4)) )}
| _1 = simple_expr _2 = DOT _3 = LBRACK _4 = index_list _5 = error
    {      ( unclosed "[" 3 "]" 5 )}
| _1 = LBRACKBAR _2 = expr_comma_list _3 = opt_comma _4 = BARRBRACK
    {      ( mkexp(Pexp_array(List.rev _2)) )}
| _1 = LBRACKBAR _2 = expr_comma_list _3 = opt_comma _4 = error
    {      ( unclosed "[|" 1 "|]" 4 )}
| _1 = LBRACE _2 = record_expr _3 = opt_comma _4 = RBRACE
    {      ( _2 )}
| _1 = LBRACE _2 = record_expr _3 = opt_comma _4 = error
    {      ( unclosed "{" 1 "}" 4 )}
| _1 = LVECTOR _2 = list_expr _3 = RBRACK
    {      ( mkexp(Pexp_vector(_2)) )}
| _1 = LVECTOR _2 = list_expr _3 = error
    {      ( unclosed "#[" 1 "]" 3 )}
| _1 = LBRACK _2 = list_expr _3 = RBRACK
    {      ( _2 )}
| _1 = LBRACK _2 = list_expr _3 = error
    {      ( unclosed "[" 1 "]" 3 )}
| _1 = LMATRIX _2 = matrix_expr _3 = RBRACK
    {      ( mkexp(Pexp_matrix(List.rev _2)) )}
| _1 = LMATRIX _2 = matrix_expr _3 = error
    {      ( unclosed "#m[" 1 "]" 3 )}
| _1 = PREFIXOP _2 = simple_expr
    {      ( mkexp(Pexp_apply(mkoperator _1 1, [_2])) )}

matrix_expr:
  _1 = expr_comma_list
    {      ( [mkexp(Pexp_list(List.rev _1))] )}
| _1 = matrix_expr _2 = SEMI _3 = expr_comma_list
    {      ( mkexp(Pexp_list(List.rev _3)) :: _1 )}

list_expr:
  _1 = expr _2 = BARCOLON _3 = generator_list
    {      ( make_comprehension _1 (List.rev _3)
	  (mkexp(Pexp_constant Const_empty_list)) )}
| _1 = expr_comma_list _2 = opt_comma
    {      ( mkexp(Pexp_list(List.rev _1)) )}
| _1 = expr_comma_list _2 = opt_comma _3 = DOTDOT _4 = expr
    {      ( match _1 with
	    [b;a] -> mkexp(Pexp_range(a,Some b,_4))
	  | [a]   -> mkexp(Pexp_range(a,None,_4))
	  | _ -> syntax_error())}
| _1 = expr_comma_list _2 = BAR _3 = expr
    {      ( mkinfix (mkexp(Pexp_list(List.rev _1))) appendsym _3 )}

generator_list:
  _1 = generator
    {      ( [_1] )}
| _1 = generator_list _2 = SEMI _3 = generator
    {      ( _3 :: _1 )}

generator:
  _1 = pattern _2 = LESSMINUS _3 = expr
    {      ( _1,_3,None )}
| _1 = pattern _2 = LESSMINUS _3 = expr _4 = COMMA _5 = expr
    {      ( _1,_3,Some _5 )}

simple_expr_list:
  _1 = simple_expr
    {      ([_1])}
| _1 = simple_expr_list _2 = simple_expr
    {      (_2::_1)}

index_list:
  _1 = index
    {      ([_1])}
| _1 = index_list _2 = COMMA _3 = index
    {      (_3 :: _1)}

index:
  _1 = expr
    {      ( mkindex(Pindex_expr _1) )}
| _1 = STAR
    {      ( mkindex(Pindex_range_all) )}
| _1 = expr _2 = COLON _3 = expr
    {      ( mkindex(Pindex_range(_1,_3)) )}
| _1 = expr _2 = COLON _3 = STAR
    {      ( mkindex(Pindex_range_to_end(_1)) )}
| _1 = DOTDOT
    {      ( mkindex(Pindex_range_all) )}
| _1 = expr _2 = DOTDOT _3 = expr
    {      ( mkindex(Pindex_range(_1,_3)) )}
| _1 = DOTDOT _2 = expr
    {      ( mkindex(Pindex_range(mkexp(Pexp_constant(Const_int 0)),_2)) )}
| _1 = expr _2 = DOTDOT
    {      ( mkindex(Pindex_range_to_end(_1)) )}

let_bindings:
  _1 = let_binding
    {      ([_1])}
| _1 = let_bindings _2 = AND _3 = let_binding
    {      ( _3 :: _1 )}

let_binding:
  _1 = val_ident _2 = fun_binding
    {      ( ({ppat_desc = Ppat_ident _1; ppat_loc = rhs_loc 1},_2) )}
| _1 = pattern_comma_list _2 = EQ _3 = seq_expr %prec prec_let
    {      ( match _1 with
	    [pat] -> (pat,_3)
	  | _ -> (mkpat(Ppat_tuple(List.rev _1)),_3) )}

fun_binding:
  _1 = EQ _2 = seq_expr %prec prec_let
    {      ( _2 )}
| _1 = simple_pattern _2 = fun_binding
    {      ( mkexp(Pexp_function[_1,_2]) )}

label_longident:
  _1 = LIDENT
    {      ( Lident(_1) )}
| _1 = UIDENT _2 = DOT _3 = LIDENT
    {      ( Dep.add _1;
	Ldot(_1,_3) )}

lbl_expr_list:
  _1 = label_longident _2 = EQ _3 = expr %prec prec_list
    {      ( [_1,_3] )}
| _1 = lbl_expr_list _2 = COMMA _3 = label_longident _4 = EQ _5 = expr %prec prec_list
    {      ( (_3,_5) :: _1 )}

record_expr:
  _1 = simple_expr _2 = WITH _3 = lbl_expr_list
    {      ( mkexp(Pexp_record(Some _1, List.rev _3)) )}
| _1 = lbl_expr_list
    {      ( match _1 with
	    [] -> mkexp(Pexp_constant(Const_empty_record))
	  | _  -> mkexp(Pexp_record(None, List.rev _1)) )}

fun_def:
  _1 = match_action
    {                                                ( _1 )}
| _1 = simple_pattern _2 = fun_def
    {                                                ( mkexp(Pexp_function[_1,_2]) )}

match_action:
  _1 = MINUSGREATER _2 = seq_expr
    {                                                ( _2 )}
| _1 = WHEN _2 = expr _3 = MINUSGREATER _4 = seq_expr
    {                                            ( mkexp(Pexp_when(_2,_4)) )}

match_cases:
  _1 = pattern_comma_list _2 = opt_comma _3 = match_action
    {      ( match _1 with
	    [pat] -> [pat,_3]
	  | _ -> [mkpat(Ppat_tuple(List.rev _1)),_3] )}
| _1 = match_cases _2 = BAR _3 = pattern_comma_list _4 = opt_comma _5 = match_action
    {      ( match _3 with
	    [pat] -> (pat,_5) :: _1
	  | _ -> (mkpat(Ppat_tuple(List.rev _3)),_5) :: _1 )}

constant:
  _1 = INT
    {                                                ( Const_int _1 )}
| _1 = CHAR
    {                                                ( Const_char _1 )}
| _1 = STRING
    {                                                ( Const_string _1 )}
| _1 = FLOAT
    {                                                ( Const_float _1 )}
| _1 = LPAREN _2 = RPAREN
    {                                                ( Const_unit )}
| _1 = LBRACK _2 = RBRACK
    {                                                ( Const_empty_list )}
| _1 = LBRACE _2 = RBRACE
    {                                                ( Const_empty_record )}
| _1 = SHARP _2 = STRING
    {                                                ( Const_symbol (symbol _2) )}
| _1 = SHARP _2 = LIDENT
    {                                                ( Const_symbol _2 )}
| _1 = SHARP _2 = UIDENT
    {                                                ( Const_symbol _2 )}
| _1 = LVECTOR _2 = RBRACK
    {                                           ( Const_empty_vector )}
| _1 = DOLLAR _2 = STRING
    {                                                ( Const_symbol (symbol _2) )}
| _1 = DOLLAR _2 = LIDENT
    {                                                ( Const_symbol _2 )}
| _1 = DOLLAR _2 = UIDENT
    {                                                ( Const_symbol _2 )}
| _1 = LBRACKBAR _2 = BARRBRACK
    {                                                ( Const_empty_array )}
| _1 = IMAGINARY
    {                                                ( Const_complex(0.0, _1) )}

signed_constant:
  _1 = constant
    {                                                ( _1 )}
| _1 = MINUS _2 = INT
    {                                          ( Const_int(- _2) )}
| _1 = MINUS _2 = FLOAT
    {                                          ( Const_float(-. _2) )}

val_ident:
  _1 = LIDENT
    {                                                ( _1 )}
| _1 = LPAREN _2 = operator _3 = RPAREN
    {                                                ( _2 )}

operator:
  _1 = PLUS
    {                                                ( plussym )}
| _1 = MINUS
    {                                                ( minussym )}
| _1 = STAR
    {                                                ( starsym )}
| _1 = EQ
    {                                                ( eqsym )}
| _1 = COLONCOLON
    {                                                ( conssym )}
| _1 = COLONEQUAL
    {                                                ( colonequalsym )}
| _1 = SHARP
    {                                                ( sharpsym )}
| _1 = DOLLAR
    {                                                ( dollarsym )}
| _1 = PREFIXOP
    {                                                ( _1 )}
| _1 = INFIXOP1L
    {                                                ( _1 )}
| _1 = INFIXOP2L
    {                                                ( _1 )}
| _1 = INFIXOP3L
    {                                                ( _1 )}
| _1 = INFIXOP4L
    {                                                ( _1 )}
| _1 = INFIXOP5L
    {                                                ( _1 )}
| _1 = INFIXOP1R
    {                                                ( _1 )}
| _1 = INFIXOP2R
    {                                                ( _1 )}
| _1 = INFIXOP3R
    {                                                ( _1 )}
| _1 = INFIXOP4R
    {                                                ( _1 )}
| _1 = INFIXOP5R
    {                                                ( _1 )}

val_longident:
  _1 = val_ident
    {                                                ( Lident _1 )}
| _1 = UIDENT _2 = DOT _3 = val_ident
    {                                                ( Dep.add _1;
						  Ldot(_1, _3) )}

constr_longident:
  _1 = UIDENT _2 = DOT _3 = UIDENT
    {      ( Dep.add _1;
	Ldot(_1,_3) )}
| _1 = UIDENT
    {      ( Lident(_1) )}

mod_ident:
  _1 = UIDENT
    {      ( _1 )}

pattern:
  _1 = simple_pattern
    {      ( _1 )}
| _1 = constr_longident _2 = pattern %prec prec_constr_appl
    {      ( mkpat(Ppat_construct(_1,Some _2)) )}
| _1 = built_in_constr %prec prec_constr_appl
    {      ( _1 )}
| _1 = pattern _2 = AS _3 = LIDENT
    {      ( mkpat(Ppat_alias(_1,_3)) )}
| _1 = pattern _2 = COLONCOLON _3 = pattern
    {      ( mkpat(Ppat_cons(_1,_3)) )}
| _1 = pattern _2 = BARBAR _3 = pattern %prec BAR
    {      ( mkpat(Ppat_or(_1,_3)) )}

simple_pattern:
  _1 = val_ident
    {      ( mkpat(Ppat_ident _1) )}
| _1 = UNDERSCORE
    {      ( mkpat(Ppat_any) )}
| _1 = signed_constant
    {      ( mkpat(Ppat_constant _1) )}
| _1 = CHAR _2 = DOTDOT _3 = CHAR
    {      ( mkrangepat _1 _3 )}
| _1 = constr_longident
    {      ( mkpat(Ppat_construct(_1,None)) )}
| _1 = LBRACE _2 = lbl_pattern_list _3 = opt_comma _4 = RBRACE
    {      ( mkpat(Ppat_record(List.rev _2)) )}
| _1 = LBRACE _2 = lbl_pattern_list _3 = error
    {      ( unclosed "{" 1 "}" 4 )}
| _1 = LBRACK _2 = list_pattern _3 = RBRACK
    {      ( _2 )}
| _1 = LBRACK _2 = list_pattern _3 = error
    {      ( unclosed "[" 1 "]" 4 )}
| _1 = LPAREN _2 = list_pattern _3 = RPAREN %prec prec_list
    {      ( match _2 with
	    {ppat_desc = Ppat_list l} ->
	      if List.length l > 1 then
		mkpat(Ppat_tuple(l))
	      else List.hd l
	  | _ -> mkpat(Ppat_tuplecons(_2)) )}
| _1 = LPAREN _2 = pattern_comma_list _3 = COMMA _4 = param_tail _5 = RPAREN %prec prec_list
    {      ( mkpat(Ppat_tuplecons
		(mklistpat(mkpat(Ppat_optional(List.rev _4))) _2)) )}
| _1 = LPAREN _2 = param_tail _3 = RPAREN
    {      ( mkpat(Ppat_tuplecons(mkpat(Ppat_optional(List.rev _2)))) )}
| _1 = LPAREN _2 = list_pattern _3 = error
    {      ( unclosed "(" 1 ")" 4 )}
| _1 = LVECTOR _2 = list_pattern _3 = RBRACK
    {      ( mkpat(Ppat_vector(_2)) )}
| _1 = LVECTOR _2 = list_pattern _3 = error
    {      ( unclosed "#[" 1 "]" 4 )}

param_tail:
  _1 = AMPEROPT _2 = option_pattern_list
    {      ( _2 )}
| _1 = AMPEROPT _2 = option_pattern_list _3 = COMMA _4 = AMPERKEY _5 = key_pattern
    {      ( _5 @ _2 )}
| _1 = AMPERKEY _2 = key_pattern
    {      ( _2 )}

pattern_comma_list:
  _1 = pattern_comma_list_element
    {      ( [_1] )}
| _1 = pattern_comma_list _2 = COMMA _3 = pattern_comma_list_element %prec prec_list
    {      ( _3 :: _1 )}

pattern_comma_list_element:
  _1 = pattern
    {      ( _1 )}
| _1 = AMPERREST _2 = LIDENT
    {      ( mkpat(Ppat_restcons(_2, mkpat(Ppat_null))) )}

list_pattern:
  _1 = pattern_comma_list _2 = COMMA _3 = DOTDOTDOT _4 = AS _5 = LIDENT
    {      ( mklistpat (mkpat(Ppat_ident _5)) _1 )}
| _1 = pattern_comma_list _2 = COMMA _3 = DOTDOTDOT
    {      ( mklistpat (mkpat(Ppat_rest)) _1 )}
| _1 = pattern_comma_list _2 = BAR _3 = pattern
    {      ( mklistpat _3 _1 )}
| _1 = pattern_comma_list _2 = opt_comma
    {      ( if List.exists
	  (function
	       {ppat_desc = Ppat_restcons _} -> true
	     | _ -> false)
	  _1
	then
	  match List.hd _1 with
	      {ppat_desc = Ppat_restcons(id,_)} ->
		mklistpat (mkpat(Ppat_ident id)) (List.tl _1)
	    | _ ->
		mklistpat (mkpat(Ppat_null)) _1
	else
	  mkpat(Ppat_list(List.rev _1)) )}
| _1 = DOTDOTDOT _2 = AS _3 = LIDENT
    {      ( mkpat(Ppat_ident _3) )}
| _1 = DOTDOTDOT
    {      ( mkpat(Ppat_rest) )}

option_pattern_list:
  _1 = option_pattern_list_element
    {      ( [_1] )}
| _1 = option_pattern_list _2 = COMMA _3 = option_pattern_list_element %prec prec_list
    {      ( _3 :: _1 )}

option_pattern_list_element:
  _1 = LIDENT
    {      ( Arg_Optional(_1,None) )}
| _1 = LIDENT _2 = EQ _3 = value_expr
    {      ( Arg_Optional(_1, Some _3) )}
| _1 = AMPERREST _2 = LIDENT
    {      ( Arg_Rest _2 )}

key_pattern:
  _1 = key_pattern_list
    {      ( _1 )}
| _1 = key_pattern_list _2 = COMMA _3 = DOTDOTDOT
    {      ( Arg_OtherKeys None :: _1 )}
| _1 = key_pattern_list _2 = COMMA _3 = DOTDOTDOT _4 = AS _5 = LIDENT
    {      ( Arg_OtherKeys (Some _5) :: _1 )}
| _1 = DOTDOTDOT
    {      ( [Arg_OtherKeys None] )}
| _1 = DOTDOTDOT _2 = AS _3 = LIDENT
    {      ( [Arg_OtherKeys(Some _3) ] )}

key_pattern_list:
  _1 = key_pattern_list_element
    {      ( [_1] )}
| _1 = key_pattern_list _2 = COMMA _3 = key_pattern_list_element %prec prec_list
    {      ( _3 :: _1 )}

key_pattern_list_element:
  _1 = LIDENT
    {      ( Arg_Key(_1,None) )}
| _1 = LIDENT _2 = EQ _3 = value_expr
    {      ( Arg_Key(_1, Some _3) )}
| _1 = AMPERREST _2 = LIDENT
    {      ( Arg_Rest(_2) )}

lbl_pattern_list:
  _1 = lbl_pattern_list_element
    {       ( [_1] )}
| _1 = lbl_pattern_list _2 = COMMA _3 = lbl_pattern_list_element %prec prec_list
    {      ( _3 :: _1 )}

lbl_pattern_list_element:
  _1 = label_longident _2 = EQ _3 = pattern
    {       ( (_1,_3) )}

built_in_constr:
  _1 = INTPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_int _2) )}
| _1 = FLOATPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_float _2) )}
| _1 = COMPLEXPAT _2 = LPAREN _3 = bi_pattern _4 = COMMA _5 = bi_pattern _6 = RPAREN
    {      ( mkpat(Ppat_bi_complexpair(_3,_5)) )}
| _1 = COMPLEXPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_complex _2) )}
| _1 = NUMBERPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_number _2) )}
| _1 = REALPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_real _2) )}
| _1 = STRINGPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_string _2) )}
| _1 = SYMBOLPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_symbol _2) )}
| _1 = LISTPAT _2 = pattern
    {      ( mkpat(Ppat_bi_list _2) )}
| _1 = VECTORPAT _2 = pattern
    {      ( mkpat(Ppat_bi_vector _2) )}
| _1 = TUPLEPAT _2 = pattern
    {      ( mkpat(Ppat_bi_tuple _2) )}
| _1 = ARRAYPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_array _2) )}
| _1 = ARRAYPAT _2 = LPAREN _3 = pattern _4 = COMMA _5 = bi_pattern _6 = RPAREN
    {      ( mkpat(Ppat_bi_arrayd(_3,_5)) )}
| _1 = FARRAYPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_farray _2) )}
| _1 = FARRAYPAT _2 = LPAREN _3 = pattern _4 = COMMA _5 = bi_pattern _6 = RPAREN
    {      ( mkpat(Ppat_bi_farrayd(_3,_5)) )}
| _1 = CARRAYPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_carray _2) )}
| _1 = CARRAYPAT _2 = LPAREN _3 = pattern _4 = COMMA _5 = bi_pattern _6 = RPAREN
    {      ( mkpat(Ppat_bi_carrayd(_3,_5)) )}
| _1 = CHARPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_char _2) )}
| _1 = RECORDPAT _2 = pattern
    {      ( mkpat(Ppat_bi_record _2) )}
| _1 = BOXPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_box _2) )}
| _1 = BOXPAT _2 = LPAREN _3 = pattern _4 = COMMA _5 = pattern _6 = RPAREN
    {      ( mkpat(Ppat_bi_boxd(_3,_5)) )}
| _1 = HASHTABLEPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_hashtable _2) )}
| _1 = STACKPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_stack _2) )}
| _1 = QUEUEPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_queue _2) )}
| _1 = WEAKARRAYPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_weak _2) )}
| _1 = IN_CHANNELPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_inchan _2) )}
| _1 = OUT_CHANNELPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_outchan _2) )}
| _1 = DIR_HANDLEPAT _2 = bi_pattern
    {      ( mkpat(Ppat_bi_dirhandle _2) )}

bi_pattern:
  _1 = simple_bi_pattern
    {      ( _1 )}
| _1 = LPAREN _2 = simple_bi_pattern _3 = RPAREN
    {      ( _2 )}

simple_bi_pattern:
  _1 = UNDERSCORE
    {      ( mkpat(Ppat_any) )}
| _1 = LIDENT
    {      ( mkpat(Ppat_ident _1) )}
| _1 = signed_constant
    {      ( mkpat(Ppat_constant _1) )}

opt_comma:
  
    {                 ( () )}
| _1 = COMMA
    {                 ( () )}

opt_bar:
  
    {                                                ( () )}
| _1 = BAR
    {                                                ( () )}

direction_flag:
  _1 = TO
    {                                                ( Upto )}
| _1 = DOWNTO
    {                                                ( Downto )}
| _1 = ABOVE
    {                                                ( Above )}
| _1 = BELOW
    {                                                ( Below )}

%%



