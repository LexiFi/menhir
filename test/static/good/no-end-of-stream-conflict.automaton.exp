State 0:
main' -> . main [ # ]
-- On INT shift to state 1
-- On main shift to state 2
-- On expr shift to state 3

State 1:
expr -> INT . [ TIMES PLUS END ]
-- On TIMES reduce production expr -> INT 
-- On PLUS reduce production expr -> INT 
-- On END reduce production expr -> INT 

State 2:
main' -> main . [ # ]
-- On # accept main

State 3:
expr -> expr . PLUS expr [ TIMES PLUS END ]
expr -> expr . TIMES expr [ TIMES PLUS END ]
main -> expr . END [ # ]
-- On TIMES shift to state 4
-- On PLUS shift to state 6
-- On END shift to state 8

State 4:
expr -> expr TIMES . expr [ TIMES PLUS END ]
-- On INT shift to state 1
-- On expr shift to state 5

State 5:
expr -> expr . PLUS expr [ TIMES PLUS END ]
expr -> expr . TIMES expr [ TIMES PLUS END ]
expr -> expr TIMES expr . [ TIMES PLUS END ]
-- On TIMES reduce production expr -> expr TIMES expr 
-- On PLUS reduce production expr -> expr TIMES expr 
-- On END reduce production expr -> expr TIMES expr 

State 6:
expr -> expr PLUS . expr [ TIMES PLUS END ]
-- On INT shift to state 1
-- On expr shift to state 7

State 7:
expr -> expr . PLUS expr [ TIMES PLUS END ]
expr -> expr PLUS expr . [ TIMES PLUS END ]
expr -> expr . TIMES expr [ TIMES PLUS END ]
-- On TIMES shift to state 4
-- On PLUS reduce production expr -> expr PLUS expr 
-- On END reduce production expr -> expr PLUS expr 

State 8:
main -> expr END . [ # ]
-- On # reduce production main -> expr END 

