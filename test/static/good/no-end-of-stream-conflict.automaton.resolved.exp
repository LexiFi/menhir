State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On INT shift to state 1
-- On main shift to state 2
-- On expr shift to state 3
## Reductions:

State 1:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ TIMES PLUS END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> INT

State 2:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept main

State 3:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS END ]
expr -> expr . TIMES expr [ TIMES PLUS END ]
main -> expr . END [ # ]
## Transitions:
-- On TIMES shift to state 4
-- On PLUS shift to state 6
-- On END shift to state 8
## Reductions:

State 4:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ TIMES PLUS END ]
## Transitions:
-- On INT shift to state 1
-- On expr shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS END ]
expr -> expr . TIMES expr [ TIMES PLUS END ]
expr -> expr TIMES expr . [ TIMES PLUS END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr TIMES expr

State 6:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ TIMES PLUS END ]
## Transitions:
-- On INT shift to state 1
-- On expr shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS END ]
expr -> expr PLUS expr . [ TIMES PLUS END ]
expr -> expr . TIMES expr [ TIMES PLUS END ]
## Transitions:
-- On TIMES shift to state 4
## Reductions:
-- On PLUS END
--   reduce production expr -> expr PLUS expr

State 8:
## Known stack suffix:
## expr END
## LR(1) items:
main -> expr END . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production main -> expr END

