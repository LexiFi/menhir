State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On A shift to state 1
-- On main shift to state 3
-- On listA shift to state 4
## Reductions:

State 1:
## Known stack suffix:
## A
## LR(1) items:
listA -> A . listA [ A ]
## Transitions:
-- On A shift to state 1
-- On listA shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## A listA
## LR(1) items:
listA -> A listA . [ A ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listA -> A listA

State 3:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept main

State 4:
## Known stack suffix:
## listA
## LR(1) items:
main -> listA . A EOF [ # ]
## Transitions:
-- On A shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## listA A
## LR(1) items:
main -> listA A . EOF [ # ]
## Transitions:
-- On EOF shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## listA A EOF
## LR(1) items:
main -> listA A EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production main -> listA A EOF

