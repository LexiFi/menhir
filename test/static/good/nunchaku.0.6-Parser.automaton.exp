State 0:
## Known stack suffix:
##
## LR(1) items:
parse_statement' -> . parse_statement [ # ]
## Transitions:
-- On error shift to state 1
-- On VAL shift to state 2
-- On SPEC shift to state 129
-- On REC shift to state 144
-- On PRED shift to state 154
-- On INCLUDE shift to state 170
-- On GOAL shift to state 173
-- On DATA shift to state 176
-- On COPY shift to state 198
-- On COPRED shift to state 215
-- On CODATA shift to state 219
-- On AXIOM shift to state 222
-- On statement shift to state 225
-- On parse_statement shift to state 227
## Reductions:

State 1:
## Known stack suffix:
## error
## LR(1) items:
statement -> error . [ EOI ]
## Transitions:
## Reductions:
-- On EOI
--   reduce production statement -> error

State 2:
## Known stack suffix:
## VAL
## LR(1) items:
statement -> VAL . raw_var COLON term decl_attributes DOT [ EOI ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 5
## Reductions:

State 3:
## Known stack suffix:
## UPPER_WORD
## LR(1) items:
raw_var -> UPPER_WORD . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT CONCRETE COLON AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT CONCRETE COLON AT ASSERTING ARROW AND ABSTRACT
--   reduce production raw_var -> UPPER_WORD

State 4:
## Known stack suffix:
## LOWER_WORD
## LR(1) items:
raw_var -> LOWER_WORD . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT CONCRETE COLON AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT CONCRETE COLON AT ASSERTING ARROW AND ABSTRACT
--   reduce production raw_var -> LOWER_WORD

State 5:
## Known stack suffix:
## VAL raw_var
## LR(1) items:
statement -> VAL raw_var . COLON term decl_attributes DOT [ EOI ]
## Transitions:
-- On COLON shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## VAL raw_var COLON
## LR(1) items:
statement -> VAL raw_var COLON . term decl_attributes DOT [ EOI ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 115
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 7:
## Known stack suffix:
## error
## LR(1) items:
term -> error . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production term -> error

State 8:
## Known stack suffix:
## WILDCARD
## LR(1) items:
var -> WILDCARD . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT
--   reduce production var -> WILDCARD

State 9:
## Known stack suffix:
## TYPE
## LR(1) items:
const -> TYPE . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT
--   reduce production const -> TYPE

State 10:
## Known stack suffix:
## PROP
## LR(1) items:
const -> PROP . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT
--   reduce production const -> PROP

State 11:
## Known stack suffix:
## PI
## LR(1) items:
term -> PI . nonempty_list(typed_ty_var) DOT term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On LEFT_PAREN shift to state 12
-- On typed_ty_var shift to state 17
-- On raw_var shift to state 18
-- On nonempty_list(typed_ty_var) shift to state 22
## Reductions:

State 12:
## Known stack suffix:
## LEFT_PAREN
## LR(1) items:
typed_ty_var -> LEFT_PAREN . raw_var COLON TYPE RIGHT_PAREN [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## LEFT_PAREN raw_var
## LR(1) items:
typed_ty_var -> LEFT_PAREN raw_var . COLON TYPE RIGHT_PAREN [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
## Transitions:
-- On COLON shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## LEFT_PAREN raw_var COLON
## LR(1) items:
typed_ty_var -> LEFT_PAREN raw_var COLON . TYPE RIGHT_PAREN [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
## Transitions:
-- On TYPE shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## LEFT_PAREN raw_var COLON TYPE
## LR(1) items:
typed_ty_var -> LEFT_PAREN raw_var COLON TYPE . RIGHT_PAREN [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
## Transitions:
-- On RIGHT_PAREN shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## LEFT_PAREN raw_var COLON TYPE RIGHT_PAREN
## LR(1) items:
typed_ty_var -> LEFT_PAREN raw_var COLON TYPE RIGHT_PAREN . [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
## Transitions:
## Reductions:
-- On UPPER_WORD LOWER_WORD LEFT_PAREN DOT
--   reduce production typed_ty_var -> LEFT_PAREN raw_var COLON TYPE RIGHT_PAREN

State 17:
## Known stack suffix:
## typed_ty_var
## LR(1) items:
nonempty_list(typed_ty_var) -> typed_ty_var . [ DOT ]
nonempty_list(typed_ty_var) -> typed_ty_var . nonempty_list(typed_ty_var) [ DOT ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On LEFT_PAREN shift to state 12
-- On typed_ty_var shift to state 17
-- On raw_var shift to state 18
-- On nonempty_list(typed_ty_var) shift to state 21
## Reductions:
-- On DOT
--   reduce production nonempty_list(typed_ty_var) -> typed_ty_var

State 18:
## Known stack suffix:
## raw_var
## LR(1) items:
typed_ty_var -> raw_var . [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
typed_ty_var -> raw_var . COLON TYPE [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
## Transitions:
-- On COLON shift to state 19
## Reductions:
-- On UPPER_WORD LOWER_WORD LEFT_PAREN DOT
--   reduce production typed_ty_var -> raw_var

State 19:
## Known stack suffix:
## raw_var COLON
## LR(1) items:
typed_ty_var -> raw_var COLON . TYPE [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
## Transitions:
-- On TYPE shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## raw_var COLON TYPE
## LR(1) items:
typed_ty_var -> raw_var COLON TYPE . [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
## Transitions:
## Reductions:
-- On UPPER_WORD LOWER_WORD LEFT_PAREN DOT
--   reduce production typed_ty_var -> raw_var COLON TYPE

State 21:
## Known stack suffix:
## typed_ty_var nonempty_list(typed_ty_var)
## LR(1) items:
nonempty_list(typed_ty_var) -> typed_ty_var nonempty_list(typed_ty_var) . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production nonempty_list(typed_ty_var) -> typed_ty_var nonempty_list(typed_ty_var)

State 22:
## Known stack suffix:
## PI nonempty_list(typed_ty_var)
## LR(1) items:
term -> PI nonempty_list(typed_ty_var) . DOT term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On DOT shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## PI nonempty_list(typed_ty_var) DOT
## LR(1) items:
term -> PI nonempty_list(typed_ty_var) DOT . term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 114
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 24:
## Known stack suffix:
## META_VAR
## LR(1) items:
meta_var -> META_VAR . raw_var [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## META_VAR raw_var
## LR(1) items:
meta_var -> META_VAR raw_var . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT
--   reduce production meta_var -> META_VAR raw_var

State 26:
## Known stack suffix:
## MATCH
## LR(1) items:
atomic_term -> MATCH . term WITH cases(term) END [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 96
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 27:
## Known stack suffix:
## LOGIC_TRUE
## LR(1) items:
const -> LOGIC_TRUE . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT
--   reduce production const -> LOGIC_TRUE

State 28:
## Known stack suffix:
## LOGIC_NOT
## LR(1) items:
apply_term -> LOGIC_NOT . apply_term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_EQ LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FALSE shift to state 29
-- On LEFT_PAREN shift to state 30
-- On AT shift to state 48
-- On var shift to state 50
-- On raw_var shift to state 52
-- On meta_var shift to state 54
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 95
## Reductions:

State 29:
## Known stack suffix:
## LOGIC_FALSE
## LR(1) items:
const -> LOGIC_FALSE . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT
--   reduce production const -> LOGIC_FALSE

State 30:
## Known stack suffix:
## LEFT_PAREN
## LR(1) items:
atomic_term -> LEFT_PAREN . term RIGHT_PAREN [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 93
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 31:
## Known stack suffix:
## LOGIC_FORALL
## LR(1) items:
term -> LOGIC_FORALL . nonempty_list(typed_var) DOT term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On LEFT_PAREN shift to state 32
-- On typed_var shift to state 36
-- On raw_var shift to state 37
-- On nonempty_list(typed_var) shift to state 90
## Reductions:

State 32:
## Known stack suffix:
## LEFT_PAREN
## LR(1) items:
typed_var -> LEFT_PAREN . raw_var COLON term RIGHT_PAREN [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## LEFT_PAREN raw_var
## LR(1) items:
typed_var -> LEFT_PAREN raw_var . COLON term RIGHT_PAREN [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
## Transitions:
-- On COLON shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## LEFT_PAREN raw_var COLON
## LR(1) items:
typed_var -> LEFT_PAREN raw_var COLON . term RIGHT_PAREN [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 88
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 35:
## Known stack suffix:
## LOGIC_EXISTS
## LR(1) items:
term -> LOGIC_EXISTS . nonempty_list(typed_var) DOT term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On LEFT_PAREN shift to state 32
-- On typed_var shift to state 36
-- On raw_var shift to state 37
-- On nonempty_list(typed_var) shift to state 39
## Reductions:

State 36:
## Known stack suffix:
## typed_var
## LR(1) items:
nonempty_list(typed_var) -> typed_var . [ DOT ]
nonempty_list(typed_var) -> typed_var . nonempty_list(typed_var) [ DOT ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On LEFT_PAREN shift to state 32
-- On typed_var shift to state 36
-- On raw_var shift to state 37
-- On nonempty_list(typed_var) shift to state 38
## Reductions:
-- On DOT
--   reduce production nonempty_list(typed_var) -> typed_var

State 37:
## Known stack suffix:
## raw_var
## LR(1) items:
typed_var -> raw_var . [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
## Transitions:
## Reductions:
-- On UPPER_WORD LOWER_WORD LEFT_PAREN DOT
--   reduce production typed_var -> raw_var

State 38:
## Known stack suffix:
## typed_var nonempty_list(typed_var)
## LR(1) items:
nonempty_list(typed_var) -> typed_var nonempty_list(typed_var) . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production nonempty_list(typed_var) -> typed_var nonempty_list(typed_var)

State 39:
## Known stack suffix:
## LOGIC_EXISTS nonempty_list(typed_var)
## LR(1) items:
term -> LOGIC_EXISTS nonempty_list(typed_var) . DOT term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On DOT shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## LOGIC_EXISTS nonempty_list(typed_var) DOT
## LR(1) items:
term -> LOGIC_EXISTS nonempty_list(typed_var) DOT . term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 87
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 41:
## Known stack suffix:
## LET
## LR(1) items:
term -> LET . raw_var EQDEF term IN term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## LET raw_var
## LR(1) items:
term -> LET raw_var . EQDEF term IN term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On EQDEF shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## LET raw_var EQDEF
## LR(1) items:
term -> LET raw_var EQDEF . term IN term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 84
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 44:
## Known stack suffix:
## IF
## LR(1) items:
term -> IF . term THEN term ELSE term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 79
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 45:
## Known stack suffix:
## FUN
## LR(1) items:
term -> FUN . nonempty_list(typed_var) DOT term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On LEFT_PAREN shift to state 32
-- On typed_var shift to state 36
-- On raw_var shift to state 37
-- On nonempty_list(typed_var) shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## FUN nonempty_list(typed_var)
## LR(1) items:
term -> FUN nonempty_list(typed_var) . DOT term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On DOT shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## FUN nonempty_list(typed_var) DOT
## LR(1) items:
term -> FUN nonempty_list(typed_var) DOT . term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 51
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 48:
## Known stack suffix:
## AT
## LR(1) items:
at_var -> AT . raw_var [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## AT raw_var
## LR(1) items:
at_var -> AT raw_var . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT
--   reduce production at_var -> AT raw_var

State 50:
## Known stack suffix:
## var
## LR(1) items:
atomic_term -> var . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT
--   reduce production atomic_term -> var

State 51:
## Known stack suffix:
## FUN nonempty_list(typed_var) DOT term
## LR(1) items:
term -> FUN nonempty_list(typed_var) DOT term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production term -> FUN nonempty_list(typed_var) DOT term

State 52:
## Known stack suffix:
## raw_var
## LR(1) items:
var -> raw_var . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT
--   reduce production var -> raw_var

State 53:
## Known stack suffix:
## or_term
## LR(1) items:
term -> or_term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production term -> or_term

State 54:
## Known stack suffix:
## meta_var
## LR(1) items:
atomic_term -> meta_var . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT
--   reduce production atomic_term -> meta_var

State 55:
## Known stack suffix:
## eq_term
## LR(1) items:
and_term -> eq_term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
and_term -> eq_term . LOGIC_AND and_term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On LOGIC_AND shift to state 56
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production and_term -> eq_term

State 56:
## Known stack suffix:
## eq_term LOGIC_AND
## LR(1) items:
and_term -> eq_term LOGIC_AND . and_term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FALSE shift to state 29
-- On LEFT_PAREN shift to state 30
-- On AT shift to state 48
-- On var shift to state 50
-- On raw_var shift to state 52
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 63
-- On and_term shift to state 68
## Reductions:

State 57:
## Known stack suffix:
## const
## LR(1) items:
atomic_term -> const . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT
--   reduce production atomic_term -> const

State 58:
## Known stack suffix:
## atomic_term
## LR(1) items:
apply_term -> atomic_term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_EQ LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT ASSERTING ARROW AND ABSTRACT ]
apply_term -> atomic_term . nonempty_list(atomic_term) [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_EQ LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_FALSE shift to state 29
-- On LEFT_PAREN shift to state 30
-- On AT shift to state 48
-- On var shift to state 50
-- On raw_var shift to state 52
-- On nonempty_list(atomic_term) shift to state 59
-- On meta_var shift to state 54
-- On const shift to state 57
-- On atomic_term shift to state 60
-- On at_var shift to state 62
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_EQ LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT ASSERTING ARROW AND ABSTRACT
--   reduce production apply_term -> atomic_term

State 59:
## Known stack suffix:
## atomic_term nonempty_list(atomic_term)
## LR(1) items:
apply_term -> atomic_term nonempty_list(atomic_term) . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_EQ LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_EQ LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT ASSERTING ARROW AND ABSTRACT
--   reduce production apply_term -> atomic_term nonempty_list(atomic_term)

State 60:
## Known stack suffix:
## atomic_term
## LR(1) items:
nonempty_list(atomic_term) -> atomic_term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_EQ LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT ASSERTING ARROW AND ABSTRACT ]
nonempty_list(atomic_term) -> atomic_term . nonempty_list(atomic_term) [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_EQ LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_FALSE shift to state 29
-- On LEFT_PAREN shift to state 30
-- On AT shift to state 48
-- On var shift to state 50
-- On raw_var shift to state 52
-- On nonempty_list(atomic_term) shift to state 61
-- On meta_var shift to state 54
-- On const shift to state 57
-- On atomic_term shift to state 60
-- On at_var shift to state 62
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_EQ LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT ASSERTING ARROW AND ABSTRACT
--   reduce production nonempty_list(atomic_term) -> atomic_term

State 61:
## Known stack suffix:
## atomic_term nonempty_list(atomic_term)
## LR(1) items:
nonempty_list(atomic_term) -> atomic_term nonempty_list(atomic_term) . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_EQ LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_EQ LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT ASSERTING ARROW AND ABSTRACT
--   reduce production nonempty_list(atomic_term) -> atomic_term nonempty_list(atomic_term)

State 62:
## Known stack suffix:
## at_var
## LR(1) items:
atomic_term -> at_var . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT
--   reduce production atomic_term -> at_var

State 63:
## Known stack suffix:
## apply_term
## LR(1) items:
eq_term -> apply_term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
eq_term -> apply_term . LOGIC_EQ apply_term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
eq_term -> apply_term . LOGIC_NEQ apply_term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On LOGIC_NEQ shift to state 64
-- On LOGIC_EQ shift to state 66
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production eq_term -> apply_term

State 64:
## Known stack suffix:
## apply_term LOGIC_NEQ
## LR(1) items:
eq_term -> apply_term LOGIC_NEQ . apply_term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FALSE shift to state 29
-- On LEFT_PAREN shift to state 30
-- On AT shift to state 48
-- On var shift to state 50
-- On raw_var shift to state 52
-- On meta_var shift to state 54
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## apply_term LOGIC_NEQ apply_term
## LR(1) items:
eq_term -> apply_term LOGIC_NEQ apply_term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production eq_term -> apply_term LOGIC_NEQ apply_term

State 66:
## Known stack suffix:
## apply_term LOGIC_EQ
## LR(1) items:
eq_term -> apply_term LOGIC_EQ . apply_term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FALSE shift to state 29
-- On LEFT_PAREN shift to state 30
-- On AT shift to state 48
-- On var shift to state 50
-- On raw_var shift to state 52
-- On meta_var shift to state 54
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## apply_term LOGIC_EQ apply_term
## LR(1) items:
eq_term -> apply_term LOGIC_EQ apply_term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production eq_term -> apply_term LOGIC_EQ apply_term

State 68:
## Known stack suffix:
## eq_term LOGIC_AND and_term
## LR(1) items:
and_term -> eq_term LOGIC_AND and_term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production and_term -> eq_term LOGIC_AND and_term

State 69:
## Known stack suffix:
## apply_term
## LR(1) items:
eq_term -> apply_term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
eq_term -> apply_term . LOGIC_EQ apply_term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
eq_term -> apply_term . LOGIC_NEQ apply_term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
term -> apply_term . ASSERTING term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
term -> apply_term . ARROW term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On LOGIC_NEQ shift to state 64
-- On LOGIC_EQ shift to state 66
-- On ASSERTING shift to state 70
-- On ARROW shift to state 77
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_IMPLY LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production eq_term -> apply_term

State 70:
## Known stack suffix:
## apply_term ASSERTING
## LR(1) items:
term -> apply_term ASSERTING . term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 71
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 71:
## Known stack suffix:
## apply_term ASSERTING term
## LR(1) items:
term -> apply_term ASSERTING term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production term -> apply_term ASSERTING term

State 72:
## Known stack suffix:
## and_term
## LR(1) items:
or_term -> and_term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
or_term -> and_term . LOGIC_OR or_term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
or_term -> and_term . LOGIC_IMPLY or_term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On LOGIC_OR shift to state 73
-- On LOGIC_IMPLY shift to state 75
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production or_term -> and_term

State 73:
## Known stack suffix:
## and_term LOGIC_OR
## LR(1) items:
or_term -> and_term LOGIC_OR . or_term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FALSE shift to state 29
-- On LEFT_PAREN shift to state 30
-- On AT shift to state 48
-- On var shift to state 50
-- On raw_var shift to state 52
-- On or_term shift to state 74
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 63
-- On and_term shift to state 72
## Reductions:

State 74:
## Known stack suffix:
## and_term LOGIC_OR or_term
## LR(1) items:
or_term -> and_term LOGIC_OR or_term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production or_term -> and_term LOGIC_OR or_term

State 75:
## Known stack suffix:
## and_term LOGIC_IMPLY
## LR(1) items:
or_term -> and_term LOGIC_IMPLY . or_term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FALSE shift to state 29
-- On LEFT_PAREN shift to state 30
-- On AT shift to state 48
-- On var shift to state 50
-- On raw_var shift to state 52
-- On or_term shift to state 76
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 63
-- On and_term shift to state 72
## Reductions:

State 76:
## Known stack suffix:
## and_term LOGIC_IMPLY or_term
## LR(1) items:
or_term -> and_term LOGIC_IMPLY or_term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production or_term -> and_term LOGIC_IMPLY or_term

State 77:
## Known stack suffix:
## apply_term ARROW
## LR(1) items:
term -> apply_term ARROW . term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 78
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 78:
## Known stack suffix:
## apply_term ARROW term
## LR(1) items:
term -> apply_term ARROW term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production term -> apply_term ARROW term

State 79:
## Known stack suffix:
## IF term
## LR(1) items:
term -> IF term . THEN term ELSE term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On THEN shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## IF term THEN
## LR(1) items:
term -> IF term THEN . term ELSE term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 81
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 81:
## Known stack suffix:
## IF term THEN term
## LR(1) items:
term -> IF term THEN term . ELSE term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On ELSE shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## IF term THEN term ELSE
## LR(1) items:
term -> IF term THEN term ELSE . term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 83
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 83:
## Known stack suffix:
## IF term THEN term ELSE term
## LR(1) items:
term -> IF term THEN term ELSE term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production term -> IF term THEN term ELSE term

State 84:
## Known stack suffix:
## LET raw_var EQDEF term
## LR(1) items:
term -> LET raw_var EQDEF term . IN term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On IN shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## LET raw_var EQDEF term IN
## LR(1) items:
term -> LET raw_var EQDEF term IN . term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 86
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 86:
## Known stack suffix:
## LET raw_var EQDEF term IN term
## LR(1) items:
term -> LET raw_var EQDEF term IN term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production term -> LET raw_var EQDEF term IN term

State 87:
## Known stack suffix:
## LOGIC_EXISTS nonempty_list(typed_var) DOT term
## LR(1) items:
term -> LOGIC_EXISTS nonempty_list(typed_var) DOT term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production term -> LOGIC_EXISTS nonempty_list(typed_var) DOT term

State 88:
## Known stack suffix:
## LEFT_PAREN raw_var COLON term
## LR(1) items:
typed_var -> LEFT_PAREN raw_var COLON term . RIGHT_PAREN [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
## Transitions:
-- On RIGHT_PAREN shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## LEFT_PAREN raw_var COLON term RIGHT_PAREN
## LR(1) items:
typed_var -> LEFT_PAREN raw_var COLON term RIGHT_PAREN . [ UPPER_WORD LOWER_WORD LEFT_PAREN DOT ]
## Transitions:
## Reductions:
-- On UPPER_WORD LOWER_WORD LEFT_PAREN DOT
--   reduce production typed_var -> LEFT_PAREN raw_var COLON term RIGHT_PAREN

State 90:
## Known stack suffix:
## LOGIC_FORALL nonempty_list(typed_var)
## LR(1) items:
term -> LOGIC_FORALL nonempty_list(typed_var) . DOT term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On DOT shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## LOGIC_FORALL nonempty_list(typed_var) DOT
## LR(1) items:
term -> LOGIC_FORALL nonempty_list(typed_var) DOT . term [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 92
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 92:
## Known stack suffix:
## LOGIC_FORALL nonempty_list(typed_var) DOT term
## LR(1) items:
term -> LOGIC_FORALL nonempty_list(typed_var) DOT term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production term -> LOGIC_FORALL nonempty_list(typed_var) DOT term

State 93:
## Known stack suffix:
## LEFT_PAREN term
## LR(1) items:
atomic_term -> LEFT_PAREN term . RIGHT_PAREN [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
-- On RIGHT_PAREN shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## LEFT_PAREN term RIGHT_PAREN
## LR(1) items:
atomic_term -> LEFT_PAREN term RIGHT_PAREN . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT
--   reduce production atomic_term -> LEFT_PAREN term RIGHT_PAREN

State 95:
## Known stack suffix:
## LOGIC_NOT apply_term
## LR(1) items:
apply_term -> LOGIC_NOT apply_term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_EQ LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_EQ LOGIC_AND LEFT_BRACKET IN EQDEF EOI END ELSE DOT ASSERTING ARROW AND ABSTRACT
--   reduce production apply_term -> LOGIC_NOT apply_term

State 96:
## Known stack suffix:
## MATCH term
## LR(1) items:
atomic_term -> MATCH term . WITH cases(term) END [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
-- On WITH shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## MATCH term WITH
## LR(1) items:
atomic_term -> MATCH term WITH . cases(term) END [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
-- On VERTICAL_BAR shift to state 98
-- On option(VERTICAL_BAR) shift to state 99
-- On cases(term) shift to state 112
## Reductions:
-- On UPPER_WORD LOWER_WORD
--   reduce production option(VERTICAL_BAR) ->

State 98:
## Known stack suffix:
## VERTICAL_BAR
## LR(1) items:
option(VERTICAL_BAR) -> VERTICAL_BAR . [ UPPER_WORD LOWER_WORD ]
## Transitions:
## Reductions:
-- On UPPER_WORD LOWER_WORD
--   reduce production option(VERTICAL_BAR) -> VERTICAL_BAR

State 99:
## Known stack suffix:
## option(VERTICAL_BAR)
## LR(1) items:
cases(term) -> option(VERTICAL_BAR) . separated_nonempty_list(VERTICAL_BAR,case(term)) [ END ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On separated_nonempty_list(VERTICAL_BAR,case(term)) shift to state 100
-- On raw_var shift to state 101
-- On case(term) shift to state 109
## Reductions:

State 100:
## Known stack suffix:
## option(VERTICAL_BAR) separated_nonempty_list(VERTICAL_BAR,case(term))
## LR(1) items:
cases(term) -> option(VERTICAL_BAR) separated_nonempty_list(VERTICAL_BAR,case(term)) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production cases(term) -> option(VERTICAL_BAR) separated_nonempty_list(VERTICAL_BAR,case(term))

State 101:
## Known stack suffix:
## raw_var
## LR(1) items:
case(term) -> raw_var . list(var_or_wildcard) ARROW term [ VERTICAL_BAR END ]
## Transitions:
-- On WILDCARD shift to state 102
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On var_or_wildcard shift to state 103
-- On raw_var shift to state 104
-- On list(var_or_wildcard) shift to state 106
## Reductions:
-- On ARROW
--   reduce production list(var_or_wildcard) ->

State 102:
## Known stack suffix:
## WILDCARD
## LR(1) items:
var_or_wildcard -> WILDCARD . [ WILDCARD UPPER_WORD LOWER_WORD ARROW ]
## Transitions:
## Reductions:
-- On WILDCARD UPPER_WORD LOWER_WORD ARROW
--   reduce production var_or_wildcard -> WILDCARD

State 103:
## Known stack suffix:
## var_or_wildcard
## LR(1) items:
list(var_or_wildcard) -> var_or_wildcard . list(var_or_wildcard) [ ARROW ]
## Transitions:
-- On WILDCARD shift to state 102
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On var_or_wildcard shift to state 103
-- On raw_var shift to state 104
-- On list(var_or_wildcard) shift to state 105
## Reductions:
-- On ARROW
--   reduce production list(var_or_wildcard) ->

State 104:
## Known stack suffix:
## raw_var
## LR(1) items:
var_or_wildcard -> raw_var . [ WILDCARD UPPER_WORD LOWER_WORD ARROW ]
## Transitions:
## Reductions:
-- On WILDCARD UPPER_WORD LOWER_WORD ARROW
--   reduce production var_or_wildcard -> raw_var

State 105:
## Known stack suffix:
## var_or_wildcard list(var_or_wildcard)
## LR(1) items:
list(var_or_wildcard) -> var_or_wildcard list(var_or_wildcard) . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production list(var_or_wildcard) -> var_or_wildcard list(var_or_wildcard)

State 106:
## Known stack suffix:
## raw_var list(var_or_wildcard)
## LR(1) items:
case(term) -> raw_var list(var_or_wildcard) . ARROW term [ VERTICAL_BAR END ]
## Transitions:
-- On ARROW shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## raw_var list(var_or_wildcard) ARROW
## LR(1) items:
case(term) -> raw_var list(var_or_wildcard) ARROW . term [ VERTICAL_BAR END ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 108
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 108:
## Known stack suffix:
## raw_var list(var_or_wildcard) ARROW term
## LR(1) items:
case(term) -> raw_var list(var_or_wildcard) ARROW term . [ VERTICAL_BAR END ]
## Transitions:
## Reductions:
-- On VERTICAL_BAR END
--   reduce production case(term) -> raw_var list(var_or_wildcard) ARROW term

State 109:
## Known stack suffix:
## case(term)
## LR(1) items:
separated_nonempty_list(VERTICAL_BAR,case(term)) -> case(term) . [ END ]
separated_nonempty_list(VERTICAL_BAR,case(term)) -> case(term) . VERTICAL_BAR separated_nonempty_list(VERTICAL_BAR,case(term)) [ END ]
## Transitions:
-- On VERTICAL_BAR shift to state 110
## Reductions:
-- On END
--   reduce production separated_nonempty_list(VERTICAL_BAR,case(term)) -> case(term)

State 110:
## Known stack suffix:
## case(term) VERTICAL_BAR
## LR(1) items:
separated_nonempty_list(VERTICAL_BAR,case(term)) -> case(term) VERTICAL_BAR . separated_nonempty_list(VERTICAL_BAR,case(term)) [ END ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On separated_nonempty_list(VERTICAL_BAR,case(term)) shift to state 111
-- On raw_var shift to state 101
-- On case(term) shift to state 109
## Reductions:

State 111:
## Known stack suffix:
## case(term) VERTICAL_BAR separated_nonempty_list(VERTICAL_BAR,case(term))
## LR(1) items:
separated_nonempty_list(VERTICAL_BAR,case(term)) -> case(term) VERTICAL_BAR separated_nonempty_list(VERTICAL_BAR,case(term)) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production separated_nonempty_list(VERTICAL_BAR,case(term)) -> case(term) VERTICAL_BAR separated_nonempty_list(VERTICAL_BAR,case(term))

State 112:
## Known stack suffix:
## MATCH term WITH cases(term)
## LR(1) items:
atomic_term -> MATCH term WITH cases(term) . END [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
-- On END shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## MATCH term WITH cases(term) END
## LR(1) items:
atomic_term -> MATCH term WITH cases(term) END . [ WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH WILDCARD VERTICAL_BAR UPPER_WORD TYPE THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PROP PARTIAL_QUOTIENT META_VAR MATCH LOWER_WORD LOGIC_TRUE LOGIC_OR LOGIC_NEQ LOGIC_IMPLY LOGIC_FALSE LOGIC_EQ LOGIC_AND LEFT_PAREN LEFT_BRACKET IN EQDEF EOI END ELSE DOT AT ASSERTING ARROW AND ABSTRACT
--   reduce production atomic_term -> MATCH term WITH cases(term) END

State 114:
## Known stack suffix:
## PI nonempty_list(typed_ty_var) DOT term
## LR(1) items:
term -> PI nonempty_list(typed_ty_var) DOT term . [ WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT ]
## Transitions:
## Reductions:
-- On WITH VERTICAL_BAR THEN SUBSET SEMI_COLON RIGHT_PAREN QUOTIENT PARTIAL_QUOTIENT LEFT_BRACKET IN EQDEF EOI END ELSE DOT AND ABSTRACT
--   reduce production term -> PI nonempty_list(typed_ty_var) DOT term

State 115:
## Known stack suffix:
## VAL raw_var COLON term
## LR(1) items:
statement -> VAL raw_var COLON term . decl_attributes DOT [ EOI ]
## Transitions:
-- On LEFT_BRACKET shift to state 116
-- On decl_attributes shift to state 127
## Reductions:
-- On DOT
--   reduce production decl_attributes ->

State 116:
## Known stack suffix:
## LEFT_BRACKET
## LR(1) items:
decl_attributes -> LEFT_BRACKET . separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) RIGHT_BRACKET [ DOT ]
## Transitions:
-- On UPPER_WORD shift to state 117
-- On LOWER_WORD shift to state 118
-- On INTEGER shift to state 119
-- On separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) shift to state 120
-- On nonempty_list(decl_attribute_element) shift to state 122
-- On decl_attribute_element shift to state 125
## Reductions:

State 117:
## Known stack suffix:
## UPPER_WORD
## LR(1) items:
decl_attribute_element -> UPPER_WORD . [ UPPER_WORD SEMI_COLON RIGHT_BRACKET LOWER_WORD INTEGER ]
## Transitions:
## Reductions:
-- On UPPER_WORD SEMI_COLON RIGHT_BRACKET LOWER_WORD INTEGER
--   reduce production decl_attribute_element -> UPPER_WORD

State 118:
## Known stack suffix:
## LOWER_WORD
## LR(1) items:
decl_attribute_element -> LOWER_WORD . [ UPPER_WORD SEMI_COLON RIGHT_BRACKET LOWER_WORD INTEGER ]
## Transitions:
## Reductions:
-- On UPPER_WORD SEMI_COLON RIGHT_BRACKET LOWER_WORD INTEGER
--   reduce production decl_attribute_element -> LOWER_WORD

State 119:
## Known stack suffix:
## INTEGER
## LR(1) items:
decl_attribute_element -> INTEGER . [ UPPER_WORD SEMI_COLON RIGHT_BRACKET LOWER_WORD INTEGER ]
## Transitions:
## Reductions:
-- On UPPER_WORD SEMI_COLON RIGHT_BRACKET LOWER_WORD INTEGER
--   reduce production decl_attribute_element -> INTEGER

State 120:
## Known stack suffix:
## LEFT_BRACKET separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element))
## LR(1) items:
decl_attributes -> LEFT_BRACKET separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) . RIGHT_BRACKET [ DOT ]
## Transitions:
-- On RIGHT_BRACKET shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## LEFT_BRACKET separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) RIGHT_BRACKET
## LR(1) items:
decl_attributes -> LEFT_BRACKET separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) RIGHT_BRACKET . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production decl_attributes -> LEFT_BRACKET separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) RIGHT_BRACKET

State 122:
## Known stack suffix:
## nonempty_list(decl_attribute_element)
## LR(1) items:
separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) -> nonempty_list(decl_attribute_element) . [ RIGHT_BRACKET ]
separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) -> nonempty_list(decl_attribute_element) . SEMI_COLON separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) [ RIGHT_BRACKET ]
## Transitions:
-- On SEMI_COLON shift to state 123
## Reductions:
-- On RIGHT_BRACKET
--   reduce production separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) -> nonempty_list(decl_attribute_element)

State 123:
## Known stack suffix:
## nonempty_list(decl_attribute_element) SEMI_COLON
## LR(1) items:
separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) -> nonempty_list(decl_attribute_element) SEMI_COLON . separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) [ RIGHT_BRACKET ]
## Transitions:
-- On UPPER_WORD shift to state 117
-- On LOWER_WORD shift to state 118
-- On INTEGER shift to state 119
-- On separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) shift to state 124
-- On nonempty_list(decl_attribute_element) shift to state 122
-- On decl_attribute_element shift to state 125
## Reductions:

State 124:
## Known stack suffix:
## nonempty_list(decl_attribute_element) SEMI_COLON separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element))
## LR(1) items:
separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) -> nonempty_list(decl_attribute_element) SEMI_COLON separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) . [ RIGHT_BRACKET ]
## Transitions:
## Reductions:
-- On RIGHT_BRACKET
--   reduce production separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element)) -> nonempty_list(decl_attribute_element) SEMI_COLON separated_nonempty_list(SEMI_COLON,nonempty_list(decl_attribute_element))

State 125:
## Known stack suffix:
## decl_attribute_element
## LR(1) items:
nonempty_list(decl_attribute_element) -> decl_attribute_element . [ SEMI_COLON RIGHT_BRACKET ]
nonempty_list(decl_attribute_element) -> decl_attribute_element . nonempty_list(decl_attribute_element) [ SEMI_COLON RIGHT_BRACKET ]
## Transitions:
-- On UPPER_WORD shift to state 117
-- On LOWER_WORD shift to state 118
-- On INTEGER shift to state 119
-- On nonempty_list(decl_attribute_element) shift to state 126
-- On decl_attribute_element shift to state 125
## Reductions:
-- On SEMI_COLON RIGHT_BRACKET
--   reduce production nonempty_list(decl_attribute_element) -> decl_attribute_element

State 126:
## Known stack suffix:
## decl_attribute_element nonempty_list(decl_attribute_element)
## LR(1) items:
nonempty_list(decl_attribute_element) -> decl_attribute_element nonempty_list(decl_attribute_element) . [ SEMI_COLON RIGHT_BRACKET ]
## Transitions:
## Reductions:
-- On SEMI_COLON RIGHT_BRACKET
--   reduce production nonempty_list(decl_attribute_element) -> decl_attribute_element nonempty_list(decl_attribute_element)

State 127:
## Known stack suffix:
## VAL raw_var COLON term decl_attributes
## LR(1) items:
statement -> VAL raw_var COLON term decl_attributes . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## VAL raw_var COLON term decl_attributes DOT
## LR(1) items:
statement -> VAL raw_var COLON term decl_attributes DOT . [ EOI ]
## Transitions:
## Reductions:
-- On EOI
--   reduce production statement -> VAL raw_var COLON term decl_attributes DOT

State 129:
## Known stack suffix:
## SPEC
## LR(1) items:
statement -> SPEC . spec_defs DOT [ EOI ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On spec_defs shift to state 130
-- On separated_nonempty_list(AND,defined_symbol) shift to state 132
-- On raw_var shift to state 138
-- On defined_symbol shift to state 141
## Reductions:

State 130:
## Known stack suffix:
## SPEC spec_defs
## LR(1) items:
statement -> SPEC spec_defs . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## SPEC spec_defs DOT
## LR(1) items:
statement -> SPEC spec_defs DOT . [ EOI ]
## Transitions:
## Reductions:
-- On EOI
--   reduce production statement -> SPEC spec_defs DOT

State 132:
## Known stack suffix:
## separated_nonempty_list(AND,defined_symbol)
## LR(1) items:
spec_defs -> separated_nonempty_list(AND,defined_symbol) . EQDEF separated_nonempty_list(SEMI_COLON,term) [ DOT ]
## Transitions:
-- On EQDEF shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## separated_nonempty_list(AND,defined_symbol) EQDEF
## LR(1) items:
spec_defs -> separated_nonempty_list(AND,defined_symbol) EQDEF . separated_nonempty_list(SEMI_COLON,term) [ DOT ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 134
-- On separated_nonempty_list(SEMI_COLON,term) shift to state 137
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 134:
## Known stack suffix:
## term
## LR(1) items:
separated_nonempty_list(SEMI_COLON,term) -> term . [ DOT AND ]
separated_nonempty_list(SEMI_COLON,term) -> term . SEMI_COLON separated_nonempty_list(SEMI_COLON,term) [ DOT AND ]
## Transitions:
-- On SEMI_COLON shift to state 135
## Reductions:
-- On DOT AND
--   reduce production separated_nonempty_list(SEMI_COLON,term) -> term

State 135:
## Known stack suffix:
## term SEMI_COLON
## LR(1) items:
separated_nonempty_list(SEMI_COLON,term) -> term SEMI_COLON . separated_nonempty_list(SEMI_COLON,term) [ DOT AND ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 134
-- On separated_nonempty_list(SEMI_COLON,term) shift to state 136
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 136:
## Known stack suffix:
## term SEMI_COLON separated_nonempty_list(SEMI_COLON,term)
## LR(1) items:
separated_nonempty_list(SEMI_COLON,term) -> term SEMI_COLON separated_nonempty_list(SEMI_COLON,term) . [ DOT AND ]
## Transitions:
## Reductions:
-- On DOT AND
--   reduce production separated_nonempty_list(SEMI_COLON,term) -> term SEMI_COLON separated_nonempty_list(SEMI_COLON,term)

State 137:
## Known stack suffix:
## separated_nonempty_list(AND,defined_symbol) EQDEF separated_nonempty_list(SEMI_COLON,term)
## LR(1) items:
spec_defs -> separated_nonempty_list(AND,defined_symbol) EQDEF separated_nonempty_list(SEMI_COLON,term) . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production spec_defs -> separated_nonempty_list(AND,defined_symbol) EQDEF separated_nonempty_list(SEMI_COLON,term)

State 138:
## Known stack suffix:
## raw_var
## LR(1) items:
defined_symbol -> raw_var . COLON term [ EQDEF AND ]
## Transitions:
-- On COLON shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## raw_var COLON
## LR(1) items:
defined_symbol -> raw_var COLON . term [ EQDEF AND ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 140
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 140:
## Known stack suffix:
## raw_var COLON term
## LR(1) items:
defined_symbol -> raw_var COLON term . [ EQDEF AND ]
## Transitions:
## Reductions:
-- On EQDEF AND
--   reduce production defined_symbol -> raw_var COLON term

State 141:
## Known stack suffix:
## defined_symbol
## LR(1) items:
separated_nonempty_list(AND,defined_symbol) -> defined_symbol . [ EQDEF ]
separated_nonempty_list(AND,defined_symbol) -> defined_symbol . AND separated_nonempty_list(AND,defined_symbol) [ EQDEF ]
## Transitions:
-- On AND shift to state 142
## Reductions:
-- On EQDEF
--   reduce production separated_nonempty_list(AND,defined_symbol) -> defined_symbol

State 142:
## Known stack suffix:
## defined_symbol AND
## LR(1) items:
separated_nonempty_list(AND,defined_symbol) -> defined_symbol AND . separated_nonempty_list(AND,defined_symbol) [ EQDEF ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On separated_nonempty_list(AND,defined_symbol) shift to state 143
-- On raw_var shift to state 138
-- On defined_symbol shift to state 141
## Reductions:

State 143:
## Known stack suffix:
## defined_symbol AND separated_nonempty_list(AND,defined_symbol)
## LR(1) items:
separated_nonempty_list(AND,defined_symbol) -> defined_symbol AND separated_nonempty_list(AND,defined_symbol) . [ EQDEF ]
## Transitions:
## Reductions:
-- On EQDEF
--   reduce production separated_nonempty_list(AND,defined_symbol) -> defined_symbol AND separated_nonempty_list(AND,defined_symbol)

State 144:
## Known stack suffix:
## REC
## LR(1) items:
statement -> REC . rec_defs DOT [ EOI ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On separated_nonempty_list(AND,rec_def) shift to state 145
-- On rec_defs shift to state 146
-- On rec_def shift to state 148
-- On raw_var shift to state 138
-- On defined_symbol shift to state 151
## Reductions:

State 145:
## Known stack suffix:
## separated_nonempty_list(AND,rec_def)
## LR(1) items:
rec_defs -> separated_nonempty_list(AND,rec_def) . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production rec_defs -> separated_nonempty_list(AND,rec_def)

State 146:
## Known stack suffix:
## REC rec_defs
## LR(1) items:
statement -> REC rec_defs . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## REC rec_defs DOT
## LR(1) items:
statement -> REC rec_defs DOT . [ EOI ]
## Transitions:
## Reductions:
-- On EOI
--   reduce production statement -> REC rec_defs DOT

State 148:
## Known stack suffix:
## rec_def
## LR(1) items:
separated_nonempty_list(AND,rec_def) -> rec_def . [ DOT ]
separated_nonempty_list(AND,rec_def) -> rec_def . AND separated_nonempty_list(AND,rec_def) [ DOT ]
## Transitions:
-- On AND shift to state 149
## Reductions:
-- On DOT
--   reduce production separated_nonempty_list(AND,rec_def) -> rec_def

State 149:
## Known stack suffix:
## rec_def AND
## LR(1) items:
separated_nonempty_list(AND,rec_def) -> rec_def AND . separated_nonempty_list(AND,rec_def) [ DOT ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On separated_nonempty_list(AND,rec_def) shift to state 150
-- On rec_def shift to state 148
-- On raw_var shift to state 138
-- On defined_symbol shift to state 151
## Reductions:

State 150:
## Known stack suffix:
## rec_def AND separated_nonempty_list(AND,rec_def)
## LR(1) items:
separated_nonempty_list(AND,rec_def) -> rec_def AND separated_nonempty_list(AND,rec_def) . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production separated_nonempty_list(AND,rec_def) -> rec_def AND separated_nonempty_list(AND,rec_def)

State 151:
## Known stack suffix:
## defined_symbol
## LR(1) items:
rec_def -> defined_symbol . EQDEF separated_nonempty_list(SEMI_COLON,term) [ DOT AND ]
## Transitions:
-- On EQDEF shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## defined_symbol EQDEF
## LR(1) items:
rec_def -> defined_symbol EQDEF . separated_nonempty_list(SEMI_COLON,term) [ DOT AND ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 134
-- On separated_nonempty_list(SEMI_COLON,term) shift to state 153
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 153:
## Known stack suffix:
## defined_symbol EQDEF separated_nonempty_list(SEMI_COLON,term)
## LR(1) items:
rec_def -> defined_symbol EQDEF separated_nonempty_list(SEMI_COLON,term) . [ DOT AND ]
## Transitions:
## Reductions:
-- On DOT AND
--   reduce production rec_def -> defined_symbol EQDEF separated_nonempty_list(SEMI_COLON,term)

State 154:
## Known stack suffix:
## PRED
## LR(1) items:
statement -> PRED . wf_attribute mutual_preds DOT [ EOI ]
## Transitions:
-- On LEFT_BRACKET shift to state 155
-- On wf_attribute shift to state 158
## Reductions:
-- On UPPER_WORD LOWER_WORD
--   reduce production wf_attribute ->

State 155:
## Known stack suffix:
## LEFT_BRACKET
## LR(1) items:
wf_attribute -> LEFT_BRACKET . WF_ATTRIBUTE RIGHT_BRACKET [ UPPER_WORD LOWER_WORD ]
## Transitions:
-- On WF_ATTRIBUTE shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## LEFT_BRACKET WF_ATTRIBUTE
## LR(1) items:
wf_attribute -> LEFT_BRACKET WF_ATTRIBUTE . RIGHT_BRACKET [ UPPER_WORD LOWER_WORD ]
## Transitions:
-- On RIGHT_BRACKET shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## LEFT_BRACKET WF_ATTRIBUTE RIGHT_BRACKET
## LR(1) items:
wf_attribute -> LEFT_BRACKET WF_ATTRIBUTE RIGHT_BRACKET . [ UPPER_WORD LOWER_WORD ]
## Transitions:
## Reductions:
-- On UPPER_WORD LOWER_WORD
--   reduce production wf_attribute -> LEFT_BRACKET WF_ATTRIBUTE RIGHT_BRACKET

State 158:
## Known stack suffix:
## PRED wf_attribute
## LR(1) items:
statement -> PRED wf_attribute . mutual_preds DOT [ EOI ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On separated_nonempty_list(AND,pred_def) shift to state 159
-- On raw_var shift to state 160
-- On pred_def shift to state 165
-- On mutual_preds shift to state 168
## Reductions:

State 159:
## Known stack suffix:
## separated_nonempty_list(AND,pred_def)
## LR(1) items:
mutual_preds -> separated_nonempty_list(AND,pred_def) . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production mutual_preds -> separated_nonempty_list(AND,pred_def)

State 160:
## Known stack suffix:
## raw_var
## LR(1) items:
pred_def -> raw_var . COLON term EQDEF separated_nonempty_list(SEMI_COLON,term) [ DOT AND ]
## Transitions:
-- On COLON shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## raw_var COLON
## LR(1) items:
pred_def -> raw_var COLON . term EQDEF separated_nonempty_list(SEMI_COLON,term) [ DOT AND ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 162
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 162:
## Known stack suffix:
## raw_var COLON term
## LR(1) items:
pred_def -> raw_var COLON term . EQDEF separated_nonempty_list(SEMI_COLON,term) [ DOT AND ]
## Transitions:
-- On EQDEF shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## raw_var COLON term EQDEF
## LR(1) items:
pred_def -> raw_var COLON term EQDEF . separated_nonempty_list(SEMI_COLON,term) [ DOT AND ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 134
-- On separated_nonempty_list(SEMI_COLON,term) shift to state 164
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 164:
## Known stack suffix:
## raw_var COLON term EQDEF separated_nonempty_list(SEMI_COLON,term)
## LR(1) items:
pred_def -> raw_var COLON term EQDEF separated_nonempty_list(SEMI_COLON,term) . [ DOT AND ]
## Transitions:
## Reductions:
-- On DOT AND
--   reduce production pred_def -> raw_var COLON term EQDEF separated_nonempty_list(SEMI_COLON,term)

State 165:
## Known stack suffix:
## pred_def
## LR(1) items:
separated_nonempty_list(AND,pred_def) -> pred_def . [ DOT ]
separated_nonempty_list(AND,pred_def) -> pred_def . AND separated_nonempty_list(AND,pred_def) [ DOT ]
## Transitions:
-- On AND shift to state 166
## Reductions:
-- On DOT
--   reduce production separated_nonempty_list(AND,pred_def) -> pred_def

State 166:
## Known stack suffix:
## pred_def AND
## LR(1) items:
separated_nonempty_list(AND,pred_def) -> pred_def AND . separated_nonempty_list(AND,pred_def) [ DOT ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On separated_nonempty_list(AND,pred_def) shift to state 167
-- On raw_var shift to state 160
-- On pred_def shift to state 165
## Reductions:

State 167:
## Known stack suffix:
## pred_def AND separated_nonempty_list(AND,pred_def)
## LR(1) items:
separated_nonempty_list(AND,pred_def) -> pred_def AND separated_nonempty_list(AND,pred_def) . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production separated_nonempty_list(AND,pred_def) -> pred_def AND separated_nonempty_list(AND,pred_def)

State 168:
## Known stack suffix:
## PRED wf_attribute mutual_preds
## LR(1) items:
statement -> PRED wf_attribute mutual_preds . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## PRED wf_attribute mutual_preds DOT
## LR(1) items:
statement -> PRED wf_attribute mutual_preds DOT . [ EOI ]
## Transitions:
## Reductions:
-- On EOI
--   reduce production statement -> PRED wf_attribute mutual_preds DOT

State 170:
## Known stack suffix:
## INCLUDE
## LR(1) items:
statement -> INCLUDE . FILEPATH DOT [ EOI ]
## Transitions:
-- On FILEPATH shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## INCLUDE FILEPATH
## LR(1) items:
statement -> INCLUDE FILEPATH . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## INCLUDE FILEPATH DOT
## LR(1) items:
statement -> INCLUDE FILEPATH DOT . [ EOI ]
## Transitions:
## Reductions:
-- On EOI
--   reduce production statement -> INCLUDE FILEPATH DOT

State 173:
## Known stack suffix:
## GOAL
## LR(1) items:
statement -> GOAL . term DOT [ EOI ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 174
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 174:
## Known stack suffix:
## GOAL term
## LR(1) items:
statement -> GOAL term . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## GOAL term DOT
## LR(1) items:
statement -> GOAL term DOT . [ EOI ]
## Transitions:
## Reductions:
-- On EOI
--   reduce production statement -> GOAL term DOT

State 176:
## Known stack suffix:
## DATA
## LR(1) items:
statement -> DATA . mutual_types DOT [ EOI ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On type_def shift to state 177
-- On separated_nonempty_list(AND,type_def) shift to state 195
-- On raw_var shift to state 180
-- On mutual_types shift to state 196
## Reductions:

State 177:
## Known stack suffix:
## type_def
## LR(1) items:
separated_nonempty_list(AND,type_def) -> type_def . [ DOT ]
separated_nonempty_list(AND,type_def) -> type_def . AND separated_nonempty_list(AND,type_def) [ DOT ]
## Transitions:
-- On AND shift to state 178
## Reductions:
-- On DOT
--   reduce production separated_nonempty_list(AND,type_def) -> type_def

State 178:
## Known stack suffix:
## type_def AND
## LR(1) items:
separated_nonempty_list(AND,type_def) -> type_def AND . separated_nonempty_list(AND,type_def) [ DOT ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On type_def shift to state 177
-- On separated_nonempty_list(AND,type_def) shift to state 179
-- On raw_var shift to state 180
## Reductions:

State 179:
## Known stack suffix:
## type_def AND separated_nonempty_list(AND,type_def)
## LR(1) items:
separated_nonempty_list(AND,type_def) -> type_def AND separated_nonempty_list(AND,type_def) . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production separated_nonempty_list(AND,type_def) -> type_def AND separated_nonempty_list(AND,type_def)

State 180:
## Known stack suffix:
## raw_var
## LR(1) items:
type_def -> raw_var . list(raw_var) EQDEF constructors [ DOT AND ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 181
-- On list(raw_var) shift to state 183
## Reductions:
-- On EQDEF
--   reduce production list(raw_var) ->

State 181:
## Known stack suffix:
## raw_var
## LR(1) items:
list(raw_var) -> raw_var . list(raw_var) [ EQDEF ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 181
-- On list(raw_var) shift to state 182
## Reductions:
-- On EQDEF
--   reduce production list(raw_var) ->

State 182:
## Known stack suffix:
## raw_var list(raw_var)
## LR(1) items:
list(raw_var) -> raw_var list(raw_var) . [ EQDEF ]
## Transitions:
## Reductions:
-- On EQDEF
--   reduce production list(raw_var) -> raw_var list(raw_var)

State 183:
## Known stack suffix:
## raw_var list(raw_var)
## LR(1) items:
type_def -> raw_var list(raw_var) . EQDEF constructors [ DOT AND ]
## Transitions:
-- On EQDEF shift to state 184
## Reductions:

State 184:
## Known stack suffix:
## raw_var list(raw_var) EQDEF
## LR(1) items:
type_def -> raw_var list(raw_var) EQDEF . constructors [ DOT AND ]
## Transitions:
-- On VERTICAL_BAR shift to state 98
-- On option(VERTICAL_BAR) shift to state 185
-- On constructors shift to state 194
## Reductions:
-- On UPPER_WORD LOWER_WORD
--   reduce production option(VERTICAL_BAR) ->

State 185:
## Known stack suffix:
## option(VERTICAL_BAR)
## LR(1) items:
constructors -> option(VERTICAL_BAR) . separated_nonempty_list(VERTICAL_BAR,constructor) [ DOT AND ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On separated_nonempty_list(VERTICAL_BAR,constructor) shift to state 186
-- On raw_var shift to state 187
-- On constructor shift to state 191
## Reductions:

State 186:
## Known stack suffix:
## option(VERTICAL_BAR) separated_nonempty_list(VERTICAL_BAR,constructor)
## LR(1) items:
constructors -> option(VERTICAL_BAR) separated_nonempty_list(VERTICAL_BAR,constructor) . [ DOT AND ]
## Transitions:
## Reductions:
-- On DOT AND
--   reduce production constructors -> option(VERTICAL_BAR) separated_nonempty_list(VERTICAL_BAR,constructor)

State 187:
## Known stack suffix:
## raw_var
## LR(1) items:
constructor -> raw_var . list(atomic_term) [ VERTICAL_BAR DOT AND ]
## Transitions:
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_FALSE shift to state 29
-- On LEFT_PAREN shift to state 30
-- On AT shift to state 48
-- On var shift to state 50
-- On raw_var shift to state 52
-- On meta_var shift to state 54
-- On list(atomic_term) shift to state 188
-- On const shift to state 57
-- On atomic_term shift to state 189
-- On at_var shift to state 62
## Reductions:
-- On VERTICAL_BAR DOT AND
--   reduce production list(atomic_term) ->

State 188:
## Known stack suffix:
## raw_var list(atomic_term)
## LR(1) items:
constructor -> raw_var list(atomic_term) . [ VERTICAL_BAR DOT AND ]
## Transitions:
## Reductions:
-- On VERTICAL_BAR DOT AND
--   reduce production constructor -> raw_var list(atomic_term)

State 189:
## Known stack suffix:
## atomic_term
## LR(1) items:
list(atomic_term) -> atomic_term . list(atomic_term) [ VERTICAL_BAR DOT AND ]
## Transitions:
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_FALSE shift to state 29
-- On LEFT_PAREN shift to state 30
-- On AT shift to state 48
-- On var shift to state 50
-- On raw_var shift to state 52
-- On meta_var shift to state 54
-- On list(atomic_term) shift to state 190
-- On const shift to state 57
-- On atomic_term shift to state 189
-- On at_var shift to state 62
## Reductions:
-- On VERTICAL_BAR DOT AND
--   reduce production list(atomic_term) ->

State 190:
## Known stack suffix:
## atomic_term list(atomic_term)
## LR(1) items:
list(atomic_term) -> atomic_term list(atomic_term) . [ VERTICAL_BAR DOT AND ]
## Transitions:
## Reductions:
-- On VERTICAL_BAR DOT AND
--   reduce production list(atomic_term) -> atomic_term list(atomic_term)

State 191:
## Known stack suffix:
## constructor
## LR(1) items:
separated_nonempty_list(VERTICAL_BAR,constructor) -> constructor . [ DOT AND ]
separated_nonempty_list(VERTICAL_BAR,constructor) -> constructor . VERTICAL_BAR separated_nonempty_list(VERTICAL_BAR,constructor) [ DOT AND ]
## Transitions:
-- On VERTICAL_BAR shift to state 192
## Reductions:
-- On DOT AND
--   reduce production separated_nonempty_list(VERTICAL_BAR,constructor) -> constructor

State 192:
## Known stack suffix:
## constructor VERTICAL_BAR
## LR(1) items:
separated_nonempty_list(VERTICAL_BAR,constructor) -> constructor VERTICAL_BAR . separated_nonempty_list(VERTICAL_BAR,constructor) [ DOT AND ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On separated_nonempty_list(VERTICAL_BAR,constructor) shift to state 193
-- On raw_var shift to state 187
-- On constructor shift to state 191
## Reductions:

State 193:
## Known stack suffix:
## constructor VERTICAL_BAR separated_nonempty_list(VERTICAL_BAR,constructor)
## LR(1) items:
separated_nonempty_list(VERTICAL_BAR,constructor) -> constructor VERTICAL_BAR separated_nonempty_list(VERTICAL_BAR,constructor) . [ DOT AND ]
## Transitions:
## Reductions:
-- On DOT AND
--   reduce production separated_nonempty_list(VERTICAL_BAR,constructor) -> constructor VERTICAL_BAR separated_nonempty_list(VERTICAL_BAR,constructor)

State 194:
## Known stack suffix:
## raw_var list(raw_var) EQDEF constructors
## LR(1) items:
type_def -> raw_var list(raw_var) EQDEF constructors . [ DOT AND ]
## Transitions:
## Reductions:
-- On DOT AND
--   reduce production type_def -> raw_var list(raw_var) EQDEF constructors

State 195:
## Known stack suffix:
## separated_nonempty_list(AND,type_def)
## LR(1) items:
mutual_types -> separated_nonempty_list(AND,type_def) . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production mutual_types -> separated_nonempty_list(AND,type_def)

State 196:
## Known stack suffix:
## DATA mutual_types
## LR(1) items:
statement -> DATA mutual_types . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## DATA mutual_types DOT
## LR(1) items:
statement -> DATA mutual_types DOT . [ EOI ]
## Transitions:
## Reductions:
-- On EOI
--   reduce production statement -> DATA mutual_types DOT

State 198:
## Known stack suffix:
## COPY
## LR(1) items:
statement -> COPY . raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT [ EOI ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 199
## Reductions:

State 199:
## Known stack suffix:
## COPY raw_var
## LR(1) items:
statement -> COPY raw_var . list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT [ EOI ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 181
-- On list(raw_var) shift to state 200
## Reductions:
-- On EQDEF
--   reduce production list(raw_var) ->

State 200:
## Known stack suffix:
## COPY raw_var list(raw_var)
## LR(1) items:
statement -> COPY raw_var list(raw_var) . EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT [ EOI ]
## Transitions:
-- On EQDEF shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF . term copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT [ EOI ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 202
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 202:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF term
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF term . copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT [ EOI ]
## Transitions:
-- On SUBSET shift to state 203
-- On QUOTIENT shift to state 205
-- On PARTIAL_QUOTIENT shift to state 207
-- On copy_wrt shift to state 209
## Reductions:
-- On ABSTRACT
--   reduce production copy_wrt ->

State 203:
## Known stack suffix:
## SUBSET
## LR(1) items:
copy_wrt -> SUBSET . atomic_term [ ABSTRACT ]
## Transitions:
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_FALSE shift to state 29
-- On LEFT_PAREN shift to state 30
-- On AT shift to state 48
-- On var shift to state 50
-- On raw_var shift to state 52
-- On meta_var shift to state 54
-- On const shift to state 57
-- On atomic_term shift to state 204
-- On at_var shift to state 62
## Reductions:

State 204:
## Known stack suffix:
## SUBSET atomic_term
## LR(1) items:
copy_wrt -> SUBSET atomic_term . [ ABSTRACT ]
## Transitions:
## Reductions:
-- On ABSTRACT
--   reduce production copy_wrt -> SUBSET atomic_term

State 205:
## Known stack suffix:
## QUOTIENT
## LR(1) items:
copy_wrt -> QUOTIENT . atomic_term [ ABSTRACT ]
## Transitions:
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_FALSE shift to state 29
-- On LEFT_PAREN shift to state 30
-- On AT shift to state 48
-- On var shift to state 50
-- On raw_var shift to state 52
-- On meta_var shift to state 54
-- On const shift to state 57
-- On atomic_term shift to state 206
-- On at_var shift to state 62
## Reductions:

State 206:
## Known stack suffix:
## QUOTIENT atomic_term
## LR(1) items:
copy_wrt -> QUOTIENT atomic_term . [ ABSTRACT ]
## Transitions:
## Reductions:
-- On ABSTRACT
--   reduce production copy_wrt -> QUOTIENT atomic_term

State 207:
## Known stack suffix:
## PARTIAL_QUOTIENT
## LR(1) items:
copy_wrt -> PARTIAL_QUOTIENT . atomic_term [ ABSTRACT ]
## Transitions:
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_FALSE shift to state 29
-- On LEFT_PAREN shift to state 30
-- On AT shift to state 48
-- On var shift to state 50
-- On raw_var shift to state 52
-- On meta_var shift to state 54
-- On const shift to state 57
-- On atomic_term shift to state 208
-- On at_var shift to state 62
## Reductions:

State 208:
## Known stack suffix:
## PARTIAL_QUOTIENT atomic_term
## LR(1) items:
copy_wrt -> PARTIAL_QUOTIENT atomic_term . [ ABSTRACT ]
## Transitions:
## Reductions:
-- On ABSTRACT
--   reduce production copy_wrt -> PARTIAL_QUOTIENT atomic_term

State 209:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF term copy_wrt
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF term copy_wrt . ABSTRACT raw_var CONCRETE raw_var DOT [ EOI ]
## Transitions:
-- On ABSTRACT shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT . raw_var CONCRETE raw_var DOT [ EOI ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var . CONCRETE raw_var DOT [ EOI ]
## Transitions:
-- On CONCRETE shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE . raw_var DOT [ EOI ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 214
## Reductions:

State 214:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT . [ EOI ]
## Transitions:
## Reductions:
-- On EOI
--   reduce production statement -> COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT

State 215:
## Known stack suffix:
## COPRED
## LR(1) items:
statement -> COPRED . wf_attribute mutual_preds DOT [ EOI ]
## Transitions:
-- On LEFT_BRACKET shift to state 155
-- On wf_attribute shift to state 216
## Reductions:
-- On UPPER_WORD LOWER_WORD
--   reduce production wf_attribute ->

State 216:
## Known stack suffix:
## COPRED wf_attribute
## LR(1) items:
statement -> COPRED wf_attribute . mutual_preds DOT [ EOI ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On separated_nonempty_list(AND,pred_def) shift to state 159
-- On raw_var shift to state 160
-- On pred_def shift to state 165
-- On mutual_preds shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## COPRED wf_attribute mutual_preds
## LR(1) items:
statement -> COPRED wf_attribute mutual_preds . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 218
## Reductions:

State 218:
## Known stack suffix:
## COPRED wf_attribute mutual_preds DOT
## LR(1) items:
statement -> COPRED wf_attribute mutual_preds DOT . [ EOI ]
## Transitions:
## Reductions:
-- On EOI
--   reduce production statement -> COPRED wf_attribute mutual_preds DOT

State 219:
## Known stack suffix:
## CODATA
## LR(1) items:
statement -> CODATA . mutual_types DOT [ EOI ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On type_def shift to state 177
-- On separated_nonempty_list(AND,type_def) shift to state 195
-- On raw_var shift to state 180
-- On mutual_types shift to state 220
## Reductions:

State 220:
## Known stack suffix:
## CODATA mutual_types
## LR(1) items:
statement -> CODATA mutual_types . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 221
## Reductions:

State 221:
## Known stack suffix:
## CODATA mutual_types DOT
## LR(1) items:
statement -> CODATA mutual_types DOT . [ EOI ]
## Transitions:
## Reductions:
-- On EOI
--   reduce production statement -> CODATA mutual_types DOT

State 222:
## Known stack suffix:
## AXIOM
## LR(1) items:
statement -> AXIOM . separated_nonempty_list(SEMI_COLON,term) DOT [ EOI ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 134
-- On separated_nonempty_list(SEMI_COLON,term) shift to state 223
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 223:
## Known stack suffix:
## AXIOM separated_nonempty_list(SEMI_COLON,term)
## LR(1) items:
statement -> AXIOM separated_nonempty_list(SEMI_COLON,term) . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 224
## Reductions:

State 224:
## Known stack suffix:
## AXIOM separated_nonempty_list(SEMI_COLON,term) DOT
## LR(1) items:
statement -> AXIOM separated_nonempty_list(SEMI_COLON,term) DOT . [ EOI ]
## Transitions:
## Reductions:
-- On EOI
--   reduce production statement -> AXIOM separated_nonempty_list(SEMI_COLON,term) DOT

State 225:
## Known stack suffix:
## statement
## LR(1) items:
parse_statement -> statement . EOI [ # ]
## Transitions:
-- On EOI shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## statement EOI
## LR(1) items:
parse_statement -> statement EOI . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production parse_statement -> statement EOI

State 227:
## Known stack suffix:
## parse_statement
## LR(1) items:
parse_statement' -> parse_statement . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept parse_statement

State 228:
## Known stack suffix:
##
## LR(1) items:
parse_statement_list' -> . parse_statement_list [ # ]
## Transitions:
-- On error shift to state 229
-- On VAL shift to state 230
-- On SPEC shift to state 236
-- On REC shift to state 239
-- On PRED shift to state 242
-- On INCLUDE shift to state 246
-- On GOAL shift to state 249
-- On DATA shift to state 252
-- On COPY shift to state 255
-- On COPRED shift to state 266
-- On CODATA shift to state 270
-- On AXIOM shift to state 273
-- On statement shift to state 276
-- On parse_statement_list shift to state 278
-- On list(statement) shift to state 279
## Reductions:
-- On EOI
--   reduce production list(statement) ->

State 229:
## Known stack suffix:
## error
## LR(1) items:
statement -> error . [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
## Reductions:
-- On error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM
--   reduce production statement -> error

State 230:
## Known stack suffix:
## VAL
## LR(1) items:
statement -> VAL . raw_var COLON term decl_attributes DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## VAL raw_var
## LR(1) items:
statement -> VAL raw_var . COLON term decl_attributes DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On COLON shift to state 232
## Reductions:

State 232:
## Known stack suffix:
## VAL raw_var COLON
## LR(1) items:
statement -> VAL raw_var COLON . term decl_attributes DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 233
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 233:
## Known stack suffix:
## VAL raw_var COLON term
## LR(1) items:
statement -> VAL raw_var COLON term . decl_attributes DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On LEFT_BRACKET shift to state 116
-- On decl_attributes shift to state 234
## Reductions:
-- On DOT
--   reduce production decl_attributes ->

State 234:
## Known stack suffix:
## VAL raw_var COLON term decl_attributes
## LR(1) items:
statement -> VAL raw_var COLON term decl_attributes . DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On DOT shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## VAL raw_var COLON term decl_attributes DOT
## LR(1) items:
statement -> VAL raw_var COLON term decl_attributes DOT . [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
## Reductions:
-- On error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM
--   reduce production statement -> VAL raw_var COLON term decl_attributes DOT

State 236:
## Known stack suffix:
## SPEC
## LR(1) items:
statement -> SPEC . spec_defs DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On spec_defs shift to state 237
-- On separated_nonempty_list(AND,defined_symbol) shift to state 132
-- On raw_var shift to state 138
-- On defined_symbol shift to state 141
## Reductions:

State 237:
## Known stack suffix:
## SPEC spec_defs
## LR(1) items:
statement -> SPEC spec_defs . DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On DOT shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## SPEC spec_defs DOT
## LR(1) items:
statement -> SPEC spec_defs DOT . [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
## Reductions:
-- On error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM
--   reduce production statement -> SPEC spec_defs DOT

State 239:
## Known stack suffix:
## REC
## LR(1) items:
statement -> REC . rec_defs DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On separated_nonempty_list(AND,rec_def) shift to state 145
-- On rec_defs shift to state 240
-- On rec_def shift to state 148
-- On raw_var shift to state 138
-- On defined_symbol shift to state 151
## Reductions:

State 240:
## Known stack suffix:
## REC rec_defs
## LR(1) items:
statement -> REC rec_defs . DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On DOT shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## REC rec_defs DOT
## LR(1) items:
statement -> REC rec_defs DOT . [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
## Reductions:
-- On error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM
--   reduce production statement -> REC rec_defs DOT

State 242:
## Known stack suffix:
## PRED
## LR(1) items:
statement -> PRED . wf_attribute mutual_preds DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On LEFT_BRACKET shift to state 155
-- On wf_attribute shift to state 243
## Reductions:
-- On UPPER_WORD LOWER_WORD
--   reduce production wf_attribute ->

State 243:
## Known stack suffix:
## PRED wf_attribute
## LR(1) items:
statement -> PRED wf_attribute . mutual_preds DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On separated_nonempty_list(AND,pred_def) shift to state 159
-- On raw_var shift to state 160
-- On pred_def shift to state 165
-- On mutual_preds shift to state 244
## Reductions:

State 244:
## Known stack suffix:
## PRED wf_attribute mutual_preds
## LR(1) items:
statement -> PRED wf_attribute mutual_preds . DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On DOT shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## PRED wf_attribute mutual_preds DOT
## LR(1) items:
statement -> PRED wf_attribute mutual_preds DOT . [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
## Reductions:
-- On error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM
--   reduce production statement -> PRED wf_attribute mutual_preds DOT

State 246:
## Known stack suffix:
## INCLUDE
## LR(1) items:
statement -> INCLUDE . FILEPATH DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On FILEPATH shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## INCLUDE FILEPATH
## LR(1) items:
statement -> INCLUDE FILEPATH . DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On DOT shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## INCLUDE FILEPATH DOT
## LR(1) items:
statement -> INCLUDE FILEPATH DOT . [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
## Reductions:
-- On error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM
--   reduce production statement -> INCLUDE FILEPATH DOT

State 249:
## Known stack suffix:
## GOAL
## LR(1) items:
statement -> GOAL . term DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 250
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 250:
## Known stack suffix:
## GOAL term
## LR(1) items:
statement -> GOAL term . DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On DOT shift to state 251
## Reductions:

State 251:
## Known stack suffix:
## GOAL term DOT
## LR(1) items:
statement -> GOAL term DOT . [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
## Reductions:
-- On error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM
--   reduce production statement -> GOAL term DOT

State 252:
## Known stack suffix:
## DATA
## LR(1) items:
statement -> DATA . mutual_types DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On type_def shift to state 177
-- On separated_nonempty_list(AND,type_def) shift to state 195
-- On raw_var shift to state 180
-- On mutual_types shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## DATA mutual_types
## LR(1) items:
statement -> DATA mutual_types . DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On DOT shift to state 254
## Reductions:

State 254:
## Known stack suffix:
## DATA mutual_types DOT
## LR(1) items:
statement -> DATA mutual_types DOT . [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
## Reductions:
-- On error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM
--   reduce production statement -> DATA mutual_types DOT

State 255:
## Known stack suffix:
## COPY
## LR(1) items:
statement -> COPY . raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 256
## Reductions:

State 256:
## Known stack suffix:
## COPY raw_var
## LR(1) items:
statement -> COPY raw_var . list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 181
-- On list(raw_var) shift to state 257
## Reductions:
-- On EQDEF
--   reduce production list(raw_var) ->

State 257:
## Known stack suffix:
## COPY raw_var list(raw_var)
## LR(1) items:
statement -> COPY raw_var list(raw_var) . EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On EQDEF shift to state 258
## Reductions:

State 258:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF . term copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 259
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 259:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF term
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF term . copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On SUBSET shift to state 203
-- On QUOTIENT shift to state 205
-- On PARTIAL_QUOTIENT shift to state 207
-- On copy_wrt shift to state 260
## Reductions:
-- On ABSTRACT
--   reduce production copy_wrt ->

State 260:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF term copy_wrt
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF term copy_wrt . ABSTRACT raw_var CONCRETE raw_var DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On ABSTRACT shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT . raw_var CONCRETE raw_var DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 262
## Reductions:

State 262:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var . CONCRETE raw_var DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On CONCRETE shift to state 263
## Reductions:

State 263:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE . raw_var DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On raw_var shift to state 264
## Reductions:

State 264:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var . DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On DOT shift to state 265
## Reductions:

State 265:
## Known stack suffix:
## COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT
## LR(1) items:
statement -> COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT . [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
## Reductions:
-- On error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM
--   reduce production statement -> COPY raw_var list(raw_var) EQDEF term copy_wrt ABSTRACT raw_var CONCRETE raw_var DOT

State 266:
## Known stack suffix:
## COPRED
## LR(1) items:
statement -> COPRED . wf_attribute mutual_preds DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On LEFT_BRACKET shift to state 155
-- On wf_attribute shift to state 267
## Reductions:
-- On UPPER_WORD LOWER_WORD
--   reduce production wf_attribute ->

State 267:
## Known stack suffix:
## COPRED wf_attribute
## LR(1) items:
statement -> COPRED wf_attribute . mutual_preds DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On separated_nonempty_list(AND,pred_def) shift to state 159
-- On raw_var shift to state 160
-- On pred_def shift to state 165
-- On mutual_preds shift to state 268
## Reductions:

State 268:
## Known stack suffix:
## COPRED wf_attribute mutual_preds
## LR(1) items:
statement -> COPRED wf_attribute mutual_preds . DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On DOT shift to state 269
## Reductions:

State 269:
## Known stack suffix:
## COPRED wf_attribute mutual_preds DOT
## LR(1) items:
statement -> COPRED wf_attribute mutual_preds DOT . [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
## Reductions:
-- On error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM
--   reduce production statement -> COPRED wf_attribute mutual_preds DOT

State 270:
## Known stack suffix:
## CODATA
## LR(1) items:
statement -> CODATA . mutual_types DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On UPPER_WORD shift to state 3
-- On LOWER_WORD shift to state 4
-- On type_def shift to state 177
-- On separated_nonempty_list(AND,type_def) shift to state 195
-- On raw_var shift to state 180
-- On mutual_types shift to state 271
## Reductions:

State 271:
## Known stack suffix:
## CODATA mutual_types
## LR(1) items:
statement -> CODATA mutual_types . DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On DOT shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## CODATA mutual_types DOT
## LR(1) items:
statement -> CODATA mutual_types DOT . [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
## Reductions:
-- On error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM
--   reduce production statement -> CODATA mutual_types DOT

State 273:
## Known stack suffix:
## AXIOM
## LR(1) items:
statement -> AXIOM . separated_nonempty_list(SEMI_COLON,term) DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 134
-- On separated_nonempty_list(SEMI_COLON,term) shift to state 274
-- On raw_var shift to state 52
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 274:
## Known stack suffix:
## AXIOM separated_nonempty_list(SEMI_COLON,term)
## LR(1) items:
statement -> AXIOM separated_nonempty_list(SEMI_COLON,term) . DOT [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
-- On DOT shift to state 275
## Reductions:

State 275:
## Known stack suffix:
## AXIOM separated_nonempty_list(SEMI_COLON,term) DOT
## LR(1) items:
statement -> AXIOM separated_nonempty_list(SEMI_COLON,term) DOT . [ error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM ]
## Transitions:
## Reductions:
-- On error VAL SPEC REC PRED INCLUDE GOAL EOI DATA COPY COPRED CODATA AXIOM
--   reduce production statement -> AXIOM separated_nonempty_list(SEMI_COLON,term) DOT

State 276:
## Known stack suffix:
## statement
## LR(1) items:
list(statement) -> statement . list(statement) [ EOI ]
## Transitions:
-- On error shift to state 229
-- On VAL shift to state 230
-- On SPEC shift to state 236
-- On REC shift to state 239
-- On PRED shift to state 242
-- On INCLUDE shift to state 246
-- On GOAL shift to state 249
-- On DATA shift to state 252
-- On COPY shift to state 255
-- On COPRED shift to state 266
-- On CODATA shift to state 270
-- On AXIOM shift to state 273
-- On statement shift to state 276
-- On list(statement) shift to state 277
## Reductions:
-- On EOI
--   reduce production list(statement) ->

State 277:
## Known stack suffix:
## statement list(statement)
## LR(1) items:
list(statement) -> statement list(statement) . [ EOI ]
## Transitions:
## Reductions:
-- On EOI
--   reduce production list(statement) -> statement list(statement)

State 278:
## Known stack suffix:
## parse_statement_list
## LR(1) items:
parse_statement_list' -> parse_statement_list . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept parse_statement_list

State 279:
## Known stack suffix:
## list(statement)
## LR(1) items:
parse_statement_list -> list(statement) . EOI [ # ]
## Transitions:
-- On EOI shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## list(statement) EOI
## LR(1) items:
parse_statement_list -> list(statement) EOI . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production parse_statement_list -> list(statement) EOI

State 281:
## Known stack suffix:
##
## LR(1) items:
parse_term' -> . parse_term [ # ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 282
-- On raw_var shift to state 52
-- On parse_term shift to state 284
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 282:
## Known stack suffix:
## term
## LR(1) items:
parse_term -> term . EOI [ # ]
## Transitions:
-- On EOI shift to state 283
## Reductions:

State 283:
## Known stack suffix:
## term EOI
## LR(1) items:
parse_term -> term EOI . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production parse_term -> term EOI

State 284:
## Known stack suffix:
## parse_term
## LR(1) items:
parse_term' -> parse_term . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept parse_term

State 285:
## Known stack suffix:
##
## LR(1) items:
parse_ty' -> . parse_ty [ # ]
## Transitions:
-- On error shift to state 7
-- On WILDCARD shift to state 8
-- On UPPER_WORD shift to state 3
-- On TYPE shift to state 9
-- On PROP shift to state 10
-- On PI shift to state 11
-- On META_VAR shift to state 24
-- On MATCH shift to state 26
-- On LOWER_WORD shift to state 4
-- On LOGIC_TRUE shift to state 27
-- On LOGIC_NOT shift to state 28
-- On LOGIC_FORALL shift to state 31
-- On LOGIC_FALSE shift to state 29
-- On LOGIC_EXISTS shift to state 35
-- On LET shift to state 41
-- On LEFT_PAREN shift to state 30
-- On IF shift to state 44
-- On FUN shift to state 45
-- On AT shift to state 48
-- On var shift to state 50
-- On term shift to state 286
-- On raw_var shift to state 52
-- On parse_ty shift to state 288
-- On or_term shift to state 53
-- On meta_var shift to state 54
-- On eq_term shift to state 55
-- On const shift to state 57
-- On atomic_term shift to state 58
-- On at_var shift to state 62
-- On apply_term shift to state 69
-- On and_term shift to state 72
## Reductions:

State 286:
## Known stack suffix:
## term
## LR(1) items:
parse_ty -> term . EOI [ # ]
## Transitions:
-- On EOI shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## term EOI
## LR(1) items:
parse_ty -> term EOI . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production parse_ty -> term EOI

State 288:
## Known stack suffix:
## parse_ty
## LR(1) items:
parse_ty' -> parse_ty . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept parse_ty

