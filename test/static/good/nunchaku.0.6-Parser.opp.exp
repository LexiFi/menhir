%{
  open Nunchaku_core

  module L = Location
  module A = UntypedAST
  module B = A.Builtin

%}
%start parse_statement
%start parse_statement_list
%start parse_term
%start parse_ty
%token ABSTRACT
%token AND
%token ARROW
%token ASSERTING
%token AT
%token AXIOM
%token CODATA
%token COLON
%token CONCRETE
%token COPRED
%token COPY
%token DATA
%token DOT
%token ELSE
%token END
%token EOI
%token EQDEF
%token <string> FILEPATH
%token FUN
%token GOAL
%token IF
%token IN
%token INCLUDE
%token <string> INTEGER
%token LEFT_BRACKET
%token LEFT_PAREN
%token LET
%token LOGIC_AND
%token LOGIC_EQ
%token LOGIC_EXISTS
%token LOGIC_FALSE
%token LOGIC_FORALL
%token LOGIC_IMPLY
%token LOGIC_NEQ
%token LOGIC_NOT
%token LOGIC_OR
%token LOGIC_TRUE
%token <string> LOWER_WORD
%token MATCH
%token META_VAR
%token PARTIAL_QUOTIENT
%token PI
%token PRED
%token PROP
%token QUOTIENT
%token REC
%token RIGHT_BRACKET
%token RIGHT_PAREN
%token SEMI_COLON
%token SPEC
%token SUBSET
%token THEN
%token TYPE
%token <string> UPPER_WORD
%token VAL
%token VERTICAL_BAR
%token WF_ATTRIBUTE
%token WILDCARD
%token WITH
%type <Nunchaku_core.UntypedAST.statement> parse_statement
%type <Nunchaku_core.UntypedAST.statement list> parse_statement_list
%type <Nunchaku_core.UntypedAST.term> parse_term
%type <Nunchaku_core.UntypedAST.ty> parse_ty
%%

option_VERTICAL_BAR_:
  
    {    ( None )}
| x = VERTICAL_BAR
    {    ( Some x )}

list_atomic_term_:
  
    {    ( [] )}
| x = atomic_term xs = list_atomic_term_
    {    ( x :: xs )}

list_raw_var_:
  
    {    ( [] )}
| x = raw_var xs = list_raw_var_
    {    ( x :: xs )}

list_statement_:
  
    {    ( [] )}
| x = statement xs = list_statement_
    {    ( x :: xs )}

list_var_or_wildcard_:
  
    {    ( [] )}
| x = var_or_wildcard xs = list_var_or_wildcard_
    {    ( x :: xs )}

nonempty_list_atomic_term_:
  x = atomic_term
    {    ( [ x ] )}
| x = atomic_term xs = nonempty_list_atomic_term_
    {    ( x :: xs )}

nonempty_list_decl_attribute_element_:
  x = decl_attribute_element
    {    ( [ x ] )}
| x = decl_attribute_element xs = nonempty_list_decl_attribute_element_
    {    ( x :: xs )}

nonempty_list_typed_ty_var_:
  x = typed_ty_var
    {    ( [ x ] )}
| x = typed_ty_var xs = nonempty_list_typed_ty_var_
    {    ( x :: xs )}

nonempty_list_typed_var_:
  x = typed_var
    {    ( [ x ] )}
| x = typed_var xs = nonempty_list_typed_var_
    {    ( x :: xs )}

separated_nonempty_list_AND_defined_symbol_:
  x = defined_symbol
    {    ( [ x ] )}
| x = defined_symbol _2 = AND xs = separated_nonempty_list_AND_defined_symbol_
    {    ( x :: xs )}

separated_nonempty_list_AND_pred_def_:
  x = pred_def
    {    ( [ x ] )}
| x = pred_def _2 = AND xs = separated_nonempty_list_AND_pred_def_
    {    ( x :: xs )}

separated_nonempty_list_AND_rec_def_:
  x = rec_def
    {    ( [ x ] )}
| x = rec_def _2 = AND xs = separated_nonempty_list_AND_rec_def_
    {    ( x :: xs )}

separated_nonempty_list_AND_type_def_:
  x = type_def
    {    ( [ x ] )}
| x = type_def _2 = AND xs = separated_nonempty_list_AND_type_def_
    {    ( x :: xs )}

separated_nonempty_list_SEMI_COLON_nonempty_list_decl_attribute_element__:
  x = nonempty_list_decl_attribute_element_
    {    ( [ x ] )}
| x = nonempty_list_decl_attribute_element_ _2 = SEMI_COLON xs = separated_nonempty_list_SEMI_COLON_nonempty_list_decl_attribute_element__
    {    ( x :: xs )}

separated_nonempty_list_SEMI_COLON_term_:
  x = term
    {    ( [ x ] )}
| x = term _2 = SEMI_COLON xs = separated_nonempty_list_SEMI_COLON_term_
    {    ( x :: xs )}

separated_nonempty_list_VERTICAL_BAR_case_term__:
  x = case_term_
    {    ( [ x ] )}
| x = case_term_ _2 = VERTICAL_BAR xs = separated_nonempty_list_VERTICAL_BAR_case_term__
    {    ( x :: xs )}

separated_nonempty_list_VERTICAL_BAR_constructor_:
  x = constructor
    {    ( [ x ] )}
| x = constructor _2 = VERTICAL_BAR xs = separated_nonempty_list_VERTICAL_BAR_constructor_
    {    ( x :: xs )}

parse_statement:
  s = statement _2 = EOI
    {                                 (s)}

parse_term:
  t = term _2 = EOI
    {                       (t)}

parse_ty:
  t = term _2 = EOI
    {                     (t)}

parse_statement_list:
  l = list_statement_ _2 = EOI
    {                                            ( l )}

raw_var:
  w = LOWER_WORD
    {                 ( w )}
| w = UPPER_WORD
    {                 ( w )}

typed_var:
  v = raw_var
    {              ( v, None )}
| _1 = LEFT_PAREN v = raw_var _3 = COLON t = term _5 = RIGHT_PAREN
    {                                                  ( v, Some t )}

typed_ty_var:
  v = raw_var
    {              ( v )}
| v = raw_var _2 = COLON _3 = TYPE
    {                         ( v )}
| _1 = LEFT_PAREN v = raw_var _3 = COLON _4 = TYPE _5 = RIGHT_PAREN
    {                                                ( v )}

var_or_wildcard:
  _1 = WILDCARD
    {             ( `Wildcard )}
| name = raw_var
    {                 ( `Var name )}

var:
  _1 = WILDCARD
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.wildcard ~loc ()
    )}
| name = raw_var
    {let _endpos = _endpos_name_ in
let _startpos = _startpos_name_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.var ~loc name
    )}

at_var:
  _1 = AT v = raw_var
    {let _endpos = _endpos_v_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.at_var ~loc v
    )}

meta_var:
  _1 = META_VAR v = raw_var
    {let _endpos = _endpos_v_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.meta_var ~loc v
    )}

const:
  _1 = TYPE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.builtin ~loc `Type
    )}
| _1 = PROP
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.builtin ~loc `Prop
    )}
| _1 = LOGIC_TRUE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.builtin ~loc `True
    )}
| _1 = LOGIC_FALSE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.builtin ~loc `False
    )}

case_term_:
  v = raw_var l = list_var_or_wildcard_ _3 = ARROW t = term
    {                                              ( v, l, t )}

cases_term_:
  _1 = option_VERTICAL_BAR_ l = separated_nonempty_list_VERTICAL_BAR_case_term__
    {                                                                      ( l )}

atomic_term:
  v = var
    {          ( v )}
| v = at_var
    {             ( v )}
| v = meta_var
    {               ( v )}
| t = const
    {            ( t )}
| _1 = LEFT_PAREN t = term _3 = RIGHT_PAREN
    {                                  ( t )}
| _1 = MATCH t = term _3 = WITH l = cases_term_ _5 = END
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.match_with ~loc t l
    )}

apply_term:
  t = atomic_term
    {                  ( t )}
| t = atomic_term u = nonempty_list_atomic_term_
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.app ~loc t u
    )}
| _1 = LOGIC_NOT t = apply_term
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.app ~loc (A.builtin ~loc `Not) [t]
    )}

eq_term:
  t = apply_term
    {                 ( t )}
| t = apply_term _2 = LOGIC_EQ u = apply_term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.eq ~loc t u
    )}
| t = apply_term _2 = LOGIC_NEQ u = apply_term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.neq ~loc t u
    )}

and_term:
  t = eq_term
    {              ( t )}
| t = eq_term _2 = LOGIC_AND u = and_term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.app ~loc (A.builtin ~loc `And) [t; u]
    )}

or_term:
  t = and_term
    {               ( t )}
| t = and_term _2 = LOGIC_OR u = or_term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.app ~loc (A.builtin ~loc `Or) [t; u]
    )}
| t = and_term _2 = LOGIC_IMPLY u = or_term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.app ~loc (A.builtin ~loc `Imply) [t; u]
    )}

term:
  t = or_term
    {              ( t )}
| t = apply_term _2 = ASSERTING g = term
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.asserting ~loc t [g]
    )}
| _1 = FUN vars = nonempty_list_typed_var_ _3 = DOT t = term
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.fun_list ~loc vars t
    )}
| _1 = LET v = raw_var _3 = EQDEF t = term _5 = IN u = term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.let_ ~loc v t u
    )}
| _1 = IF a = term _3 = THEN b = term _5 = ELSE c = term
    {let _endpos = _endpos_c_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.ite ~loc a b c
    )}
| _1 = LOGIC_FORALL vars = nonempty_list_typed_var_ _3 = DOT t = term
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.forall_list ~loc vars t
    )}
| _1 = LOGIC_EXISTS vars = nonempty_list_typed_var_ _3 = DOT t = term
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.exists_list ~loc vars t
    )}
| t = apply_term _2 = ARROW u = term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.ty_arrow ~loc t u
    )}
| _1 = PI vars = nonempty_list_typed_ty_var_ _3 = DOT t = term
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.ty_forall_list ~loc vars t
    )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      raise (A.ParseError loc)
    )}

defined_symbol:
  v = raw_var _2 = COLON ty = term
    {                            ( v, ty )}

rec_def:
  d = defined_symbol _2 = EQDEF l = separated_nonempty_list_SEMI_COLON_term_
    {    (
      let v, ty = d in
      v, ty, l
    )}

rec_defs:
  l = separated_nonempty_list_AND_rec_def_
    {                                            ( l )}

spec_defs:
  d = separated_nonempty_list_AND_defined_symbol_ _2 = EQDEF l = separated_nonempty_list_SEMI_COLON_term_
    {    ( d, l )}

constructor:
  v = raw_var l = list_atomic_term_
    {                             ( v, l )}

constructors:
  _1 = option_VERTICAL_BAR_ l = separated_nonempty_list_VERTICAL_BAR_constructor_
    {                                                                       ( l )}

type_def:
  t = raw_var vars = list_raw_var_ _3 = EQDEF l = constructors
    {    ( t, vars, l )}

mutual_types:
  l = separated_nonempty_list_AND_type_def_
    {                                             ( l )}

pred_def:
  id = raw_var _2 = COLON ty = term _4 = EQDEF l = separated_nonempty_list_SEMI_COLON_term_
    {    ( id, ty, l )}

mutual_preds:
  l = separated_nonempty_list_AND_pred_def_
    {                                             ( l )}

wf_attribute:
  _1 = LEFT_BRACKET _2 = WF_ATTRIBUTE _3 = RIGHT_BRACKET
    {                                            ( `Wf )}
| 
    {    ( `Not_wf )}

decl_attribute_element:
  w = UPPER_WORD
    {                 ( w )}
| w = LOWER_WORD
    {                 ( w )}
| w = INTEGER
    {              ( w )}

decl_attributes:
  _1 = LEFT_BRACKET l = separated_nonempty_list_SEMI_COLON_nonempty_list_decl_attribute_element__ _3 = RIGHT_BRACKET
    {    ( l )}
| 
    {    ( [] )}

copy_wrt:
  
    {    ( A.Wrt_nothing )}
| _1 = SUBSET t = atomic_term
    {                         ( A.Wrt_subset t )}
| _1 = QUOTIENT t = atomic_term
    {                           ( A.Wrt_quotient (`Total, t) )}
| _1 = PARTIAL_QUOTIENT t = atomic_term
    {                                   ( A.Wrt_quotient (`Partial, t) )}

statement:
  _1 = VAL v = raw_var _3 = COLON t = term attrs = decl_attributes _6 = DOT
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.decl ~loc ~attrs v t
    )}
| _1 = AXIOM l = separated_nonempty_list_SEMI_COLON_term_ _3 = DOT
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.axiom ~loc l
    )}
| _1 = SPEC l = spec_defs _3 = DOT
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.spec ~loc l
    )}
| _1 = REC l = rec_defs _3 = DOT
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.rec_ ~loc l
    )}
| _1 = DATA l = mutual_types _3 = DOT
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.data ~loc l
    )}
| _1 = CODATA l = mutual_types _3 = DOT
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.codata ~loc l
    )}
| _1 = PRED a = wf_attribute l = mutual_preds _4 = DOT
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.pred ~loc ~wf:a l
    )}
| _1 = COPRED a = wf_attribute l = mutual_preds _4 = DOT
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.copred ~loc ~wf:a l
    )}
| _1 = GOAL t = term _3 = DOT
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.goal ~loc t
    )}
| _1 = INCLUDE f = FILEPATH _3 = DOT
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.include_ ~loc f
    )}
| _1 = COPY id = raw_var vars = list_raw_var_ _4 = EQDEF u = term wrt = copy_wrt _7 = ABSTRACT abs = raw_var _9 = CONCRETE conc = raw_var _11 = DOT
    {let _endpos = _endpos__11_ in
let _startpos = _startpos__1_ in
    (
      (* TODO: instead, parse list of "fields" and validate after parsing?
         better once we get more possible (optional) fields, in random order *)
      let loc = L.mk_pos _startpos _endpos in
      A.copy ~loc ~of_:u ~abstract:abs ~concrete:conc ~wrt id vars
    )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      raise (A.ParseError loc)
    )}

%%


