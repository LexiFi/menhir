State 0:
parse_answer_tuples' -> . parse_answer_tuples [ # ]
-- On LEFT_BRACKET shift to state 1
-- On parse_answer_tuples shift to state 148
-- On answer_tuples shift to state 149

State 1:
answer_tuples -> LEFT_BRACKET . separated_nonempty_list(VLINE,answer_tuple) RIGHT_BRACKET [ EOI ]
-- On UNDERSCORE shift to state 2
-- On LEFT_BRACKET shift to state 3
-- On separated_nonempty_list(VLINE,answer_tuple) shift to state 143
-- On answer_tuple shift to state 145

State 2:
answer_tuple -> UNDERSCORE . [ VLINE RIGHT_BRACKET ]
-- On VLINE reduce production answer_tuple -> UNDERSCORE
-- On RIGHT_BRACKET reduce production answer_tuple -> UNDERSCORE

State 3:
answer_tuple -> LEFT_BRACKET . separated_nonempty_list(COMMA,term) RIGHT_BRACKET [ VLINE RIGHT_BRACKET ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 31
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On separated_nonempty_list(COMMA,term) shift to state 141
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 40
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_defined_word shift to state 51

State 4:
plain_term -> WILDCARD . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production plain_term -> WILDCARD
-- On VLINE reduce production plain_term -> WILDCARD
-- On RIGHT_PAREN reduce production plain_term -> WILDCARD
-- On RIGHT_BRACKET reduce production plain_term -> WILDCARD
-- On NOT_EQUAL reduce production plain_term -> WILDCARD
-- On NOTVLINE reduce production plain_term -> WILDCARD
-- On NOTAND reduce production plain_term -> WILDCARD
-- On LEFT_IMPLY reduce production plain_term -> WILDCARD
-- On IMPLY reduce production plain_term -> WILDCARD
-- On EQUIV reduce production plain_term -> WILDCARD
-- On EQUAL reduce production plain_term -> WILDCARD
-- On EOI reduce production plain_term -> WILDCARD
-- On COMMA reduce production plain_term -> WILDCARD
-- On AND reduce production plain_term -> WILDCARD

State 5:
raw_variable -> UPPER_WORD . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA COLUMN AT ARROW AND ]
-- On XOR reduce production raw_variable -> UPPER_WORD
-- On VLINE reduce production raw_variable -> UPPER_WORD
-- On STAR reduce production raw_variable -> UPPER_WORD
-- On RIGHT_PAREN reduce production raw_variable -> UPPER_WORD
-- On RIGHT_BRACKET reduce production raw_variable -> UPPER_WORD
-- On NOT_EQUAL reduce production raw_variable -> UPPER_WORD
-- On NOTVLINE reduce production raw_variable -> UPPER_WORD
-- On NOTAND reduce production raw_variable -> UPPER_WORD
-- On LEFT_IMPLY reduce production raw_variable -> UPPER_WORD
-- On IMPLY reduce production raw_variable -> UPPER_WORD
-- On EQUIV reduce production raw_variable -> UPPER_WORD
-- On EQUAL reduce production raw_variable -> UPPER_WORD
-- On EOI reduce production raw_variable -> UPPER_WORD
-- On COMMA reduce production raw_variable -> UPPER_WORD
-- On COLUMN reduce production raw_variable -> UPPER_WORD
-- On AT reduce production raw_variable -> UPPER_WORD
-- On ARROW reduce production raw_variable -> UPPER_WORD
-- On AND reduce production raw_variable -> UPPER_WORD

State 6:
atomic_word -> SINGLE_QUOTED . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA COLUMN AT AND ]
-- On XOR reduce production atomic_word -> SINGLE_QUOTED
-- On VLINE reduce production atomic_word -> SINGLE_QUOTED
-- On RIGHT_PAREN reduce production atomic_word -> SINGLE_QUOTED
-- On RIGHT_BRACKET reduce production atomic_word -> SINGLE_QUOTED
-- On NOT_EQUAL reduce production atomic_word -> SINGLE_QUOTED
-- On NOTVLINE reduce production atomic_word -> SINGLE_QUOTED
-- On NOTAND reduce production atomic_word -> SINGLE_QUOTED
-- On LEFT_PAREN reduce production atomic_word -> SINGLE_QUOTED
-- On LEFT_IMPLY reduce production atomic_word -> SINGLE_QUOTED
-- On IMPLY reduce production atomic_word -> SINGLE_QUOTED
-- On EQUIV reduce production atomic_word -> SINGLE_QUOTED
-- On EQUAL reduce production atomic_word -> SINGLE_QUOTED
-- On EOI reduce production atomic_word -> SINGLE_QUOTED
-- On COMMA reduce production atomic_word -> SINGLE_QUOTED
-- On COLUMN reduce production atomic_word -> SINGLE_QUOTED
-- On AT reduce production atomic_word -> SINGLE_QUOTED
-- On AND reduce production atomic_word -> SINGLE_QUOTED

State 7:
defined_atom -> REAL . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production defined_atom -> REAL
-- On VLINE reduce production defined_atom -> REAL
-- On RIGHT_PAREN reduce production defined_atom -> REAL
-- On RIGHT_BRACKET reduce production defined_atom -> REAL
-- On NOT_EQUAL reduce production defined_atom -> REAL
-- On NOTVLINE reduce production defined_atom -> REAL
-- On NOTAND reduce production defined_atom -> REAL
-- On LEFT_IMPLY reduce production defined_atom -> REAL
-- On IMPLY reduce production defined_atom -> REAL
-- On EQUIV reduce production defined_atom -> REAL
-- On EQUAL reduce production defined_atom -> REAL
-- On EOI reduce production defined_atom -> REAL
-- On COMMA reduce production defined_atom -> REAL
-- On AND reduce production defined_atom -> REAL

State 8:
defined_atom -> RATIONAL . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production defined_atom -> RATIONAL
-- On VLINE reduce production defined_atom -> RATIONAL
-- On RIGHT_PAREN reduce production defined_atom -> RATIONAL
-- On RIGHT_BRACKET reduce production defined_atom -> RATIONAL
-- On NOT_EQUAL reduce production defined_atom -> RATIONAL
-- On NOTVLINE reduce production defined_atom -> RATIONAL
-- On NOTAND reduce production defined_atom -> RATIONAL
-- On LEFT_IMPLY reduce production defined_atom -> RATIONAL
-- On IMPLY reduce production defined_atom -> RATIONAL
-- On EQUIV reduce production defined_atom -> RATIONAL
-- On EQUAL reduce production defined_atom -> RATIONAL
-- On EOI reduce production defined_atom -> RATIONAL
-- On COMMA reduce production defined_atom -> RATIONAL
-- On AND reduce production defined_atom -> RATIONAL

State 9:
atomic_word -> LOWER_WORD . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA COLUMN AT AND ]
-- On XOR reduce production atomic_word -> LOWER_WORD
-- On VLINE reduce production atomic_word -> LOWER_WORD
-- On RIGHT_PAREN reduce production atomic_word -> LOWER_WORD
-- On RIGHT_BRACKET reduce production atomic_word -> LOWER_WORD
-- On NOT_EQUAL reduce production atomic_word -> LOWER_WORD
-- On NOTVLINE reduce production atomic_word -> LOWER_WORD
-- On NOTAND reduce production atomic_word -> LOWER_WORD
-- On LEFT_PAREN reduce production atomic_word -> LOWER_WORD
-- On LEFT_IMPLY reduce production atomic_word -> LOWER_WORD
-- On IMPLY reduce production atomic_word -> LOWER_WORD
-- On EQUIV reduce production atomic_word -> LOWER_WORD
-- On EQUAL reduce production atomic_word -> LOWER_WORD
-- On EOI reduce production atomic_word -> LOWER_WORD
-- On COMMA reduce production atomic_word -> LOWER_WORD
-- On COLUMN reduce production atomic_word -> LOWER_WORD
-- On AT reduce production atomic_word -> LOWER_WORD
-- On AND reduce production atomic_word -> LOWER_WORD

State 10:
conditional_term(fof_formula,term) -> ITE_T . LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On LEFT_PAREN shift to state 11

State 11:
conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN . fof_formula COMMA term COMMA term RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 14
-- On LEFT_BRACKET shift to state 15
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 109
-- On fof_unary_formula shift to state 67
-- On fof_tuple shift to state 128
-- On fof_sequent shift to state 133
-- On fof_quantified_formula shift to state 68
-- On fof_logic_formula shift to state 134
-- On fof_formula shift to state 135
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 12:
atomic_formula -> TRUE . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR reduce production atomic_formula -> TRUE
-- On VLINE reduce production atomic_formula -> TRUE
-- On RIGHT_PAREN reduce production atomic_formula -> TRUE
-- On RIGHT_BRACKET reduce production atomic_formula -> TRUE
-- On NOTVLINE reduce production atomic_formula -> TRUE
-- On NOTAND reduce production atomic_formula -> TRUE
-- On LEFT_IMPLY reduce production atomic_formula -> TRUE
-- On IMPLY reduce production atomic_formula -> TRUE
-- On EQUIV reduce production atomic_formula -> TRUE
-- On EOI reduce production atomic_formula -> TRUE
-- On COMMA reduce production atomic_formula -> TRUE
-- On AND reduce production atomic_formula -> TRUE

State 13:
unary_connective -> NOT . [ WILDCARD UPPER_WORD TRUE SINGLE_QUOTED REAL RATIONAL NOT LOWER_WORD LEFT_PAREN ITE_T INTEGER FORALL FALSE EXISTS DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT ]
-- On WILDCARD reduce production unary_connective -> NOT
-- On UPPER_WORD reduce production unary_connective -> NOT
-- On TRUE reduce production unary_connective -> NOT
-- On SINGLE_QUOTED reduce production unary_connective -> NOT
-- On REAL reduce production unary_connective -> NOT
-- On RATIONAL reduce production unary_connective -> NOT
-- On NOT reduce production unary_connective -> NOT
-- On LOWER_WORD reduce production unary_connective -> NOT
-- On LEFT_PAREN reduce production unary_connective -> NOT
-- On ITE_T reduce production unary_connective -> NOT
-- On INTEGER reduce production unary_connective -> NOT
-- On FORALL reduce production unary_connective -> NOT
-- On FALSE reduce production unary_connective -> NOT
-- On EXISTS reduce production unary_connective -> NOT
-- On DOLLAR_WORD reduce production unary_connective -> NOT
-- On DOLLAR_DOLLAR_WORD reduce production unary_connective -> NOT
-- On DISTINCT_OBJECT reduce production unary_connective -> NOT

State 14:
fof_sequent -> LEFT_PAREN . fof_sequent RIGHT_PAREN [ RIGHT_PAREN EOI COMMA ]
fof_unitary_formula -> LEFT_PAREN . fof_logic_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 14
-- On LEFT_BRACKET shift to state 15
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 109
-- On fof_unary_formula shift to state 67
-- On fof_tuple shift to state 128
-- On fof_sequent shift to state 131
-- On fof_quantified_formula shift to state 68
-- On fof_logic_formula shift to state 110
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 15:
fof_tuple -> LEFT_BRACKET . loption(separated_nonempty_list(COMMA,fof_logic_formula)) RIGHT_BRACKET [ RIGHT_PAREN GENTZEN_ARROW EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 16
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On separated_nonempty_list(COMMA,fof_logic_formula) shift to state 122
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On loption(separated_nonempty_list(COMMA,fof_logic_formula)) shift to state 123
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 109
-- On fof_unary_formula shift to state 67
-- On fof_quantified_formula shift to state 68
-- On fof_logic_formula shift to state 125
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51
-- On RIGHT_BRACKET reduce production loption(separated_nonempty_list(COMMA,fof_logic_formula)) -> 

State 16:
fof_unitary_formula -> LEFT_PAREN . fof_logic_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 16
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 109
-- On fof_unary_formula shift to state 67
-- On fof_quantified_formula shift to state 68
-- On fof_logic_formula shift to state 110
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 17:
defined_atom -> INTEGER . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production defined_atom -> INTEGER
-- On VLINE reduce production defined_atom -> INTEGER
-- On RIGHT_PAREN reduce production defined_atom -> INTEGER
-- On RIGHT_BRACKET reduce production defined_atom -> INTEGER
-- On NOT_EQUAL reduce production defined_atom -> INTEGER
-- On NOTVLINE reduce production defined_atom -> INTEGER
-- On NOTAND reduce production defined_atom -> INTEGER
-- On LEFT_IMPLY reduce production defined_atom -> INTEGER
-- On IMPLY reduce production defined_atom -> INTEGER
-- On EQUIV reduce production defined_atom -> INTEGER
-- On EQUAL reduce production defined_atom -> INTEGER
-- On EOI reduce production defined_atom -> INTEGER
-- On COMMA reduce production defined_atom -> INTEGER
-- On AND reduce production defined_atom -> INTEGER

State 18:
fol_quantifier -> FORALL . [ LEFT_BRACKET ]
-- On LEFT_BRACKET reduce production fol_quantifier -> FORALL

State 19:
atomic_formula -> FALSE . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR reduce production atomic_formula -> FALSE
-- On VLINE reduce production atomic_formula -> FALSE
-- On RIGHT_PAREN reduce production atomic_formula -> FALSE
-- On RIGHT_BRACKET reduce production atomic_formula -> FALSE
-- On NOTVLINE reduce production atomic_formula -> FALSE
-- On NOTAND reduce production atomic_formula -> FALSE
-- On LEFT_IMPLY reduce production atomic_formula -> FALSE
-- On IMPLY reduce production atomic_formula -> FALSE
-- On EQUIV reduce production atomic_formula -> FALSE
-- On EOI reduce production atomic_formula -> FALSE
-- On COMMA reduce production atomic_formula -> FALSE
-- On AND reduce production atomic_formula -> FALSE

State 20:
fol_quantifier -> EXISTS . [ LEFT_BRACKET ]
-- On LEFT_BRACKET reduce production fol_quantifier -> EXISTS

State 21:
atomic_defined_word -> DOLLAR_WORD . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production atomic_defined_word -> DOLLAR_WORD
-- On VLINE reduce production atomic_defined_word -> DOLLAR_WORD
-- On RIGHT_PAREN reduce production atomic_defined_word -> DOLLAR_WORD
-- On RIGHT_BRACKET reduce production atomic_defined_word -> DOLLAR_WORD
-- On NOT_EQUAL reduce production atomic_defined_word -> DOLLAR_WORD
-- On NOTVLINE reduce production atomic_defined_word -> DOLLAR_WORD
-- On NOTAND reduce production atomic_defined_word -> DOLLAR_WORD
-- On LEFT_PAREN reduce production atomic_defined_word -> DOLLAR_WORD
-- On LEFT_IMPLY reduce production atomic_defined_word -> DOLLAR_WORD
-- On IMPLY reduce production atomic_defined_word -> DOLLAR_WORD
-- On EQUIV reduce production atomic_defined_word -> DOLLAR_WORD
-- On EQUAL reduce production atomic_defined_word -> DOLLAR_WORD
-- On EOI reduce production atomic_defined_word -> DOLLAR_WORD
-- On COMMA reduce production atomic_defined_word -> DOLLAR_WORD
-- On AND reduce production atomic_defined_word -> DOLLAR_WORD

State 22:
atomic_system_word -> DOLLAR_DOLLAR_WORD . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On VLINE reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On RIGHT_PAREN reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On RIGHT_BRACKET reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On NOT_EQUAL reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On NOTVLINE reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On NOTAND reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On LEFT_PAREN reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On LEFT_IMPLY reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On IMPLY reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On EQUIV reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On EQUAL reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On EOI reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On COMMA reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On AND reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD

State 23:
defined_atom -> DISTINCT_OBJECT . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production defined_atom -> DISTINCT_OBJECT
-- On VLINE reduce production defined_atom -> DISTINCT_OBJECT
-- On RIGHT_PAREN reduce production defined_atom -> DISTINCT_OBJECT
-- On RIGHT_BRACKET reduce production defined_atom -> DISTINCT_OBJECT
-- On NOT_EQUAL reduce production defined_atom -> DISTINCT_OBJECT
-- On NOTVLINE reduce production defined_atom -> DISTINCT_OBJECT
-- On NOTAND reduce production defined_atom -> DISTINCT_OBJECT
-- On LEFT_IMPLY reduce production defined_atom -> DISTINCT_OBJECT
-- On IMPLY reduce production defined_atom -> DISTINCT_OBJECT
-- On EQUIV reduce production defined_atom -> DISTINCT_OBJECT
-- On EQUAL reduce production defined_atom -> DISTINCT_OBJECT
-- On EOI reduce production defined_atom -> DISTINCT_OBJECT
-- On COMMA reduce production defined_atom -> DISTINCT_OBJECT
-- On AND reduce production defined_atom -> DISTINCT_OBJECT

State 24:
fof_unary_formula -> unary_connective . fof_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 16
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 108
-- On fof_unary_formula shift to state 67
-- On fof_quantified_formula shift to state 68
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 25:
atomic_formula -> term . EQUAL term [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
atomic_formula -> term . NOT_EQUAL term [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On NOT_EQUAL shift to state 26
-- On EQUAL shift to state 58

State 26:
atomic_formula -> term NOT_EQUAL . term [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 27
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 40
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_defined_word shift to state 51

State 27:
atomic_formula -> term NOT_EQUAL term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR reduce production atomic_formula -> term NOT_EQUAL term
-- On VLINE reduce production atomic_formula -> term NOT_EQUAL term
-- On RIGHT_PAREN reduce production atomic_formula -> term NOT_EQUAL term
-- On RIGHT_BRACKET reduce production atomic_formula -> term NOT_EQUAL term
-- On NOTVLINE reduce production atomic_formula -> term NOT_EQUAL term
-- On NOTAND reduce production atomic_formula -> term NOT_EQUAL term
-- On LEFT_IMPLY reduce production atomic_formula -> term NOT_EQUAL term
-- On IMPLY reduce production atomic_formula -> term NOT_EQUAL term
-- On EQUIV reduce production atomic_formula -> term NOT_EQUAL term
-- On EOI reduce production atomic_formula -> term NOT_EQUAL term
-- On COMMA reduce production atomic_formula -> term NOT_EQUAL term
-- On AND reduce production atomic_formula -> term NOT_EQUAL term

State 28:
function_term -> system_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production function_term -> system_term
-- On VLINE reduce production function_term -> system_term
-- On RIGHT_PAREN reduce production function_term -> system_term
-- On RIGHT_BRACKET reduce production function_term -> system_term
-- On NOT_EQUAL reduce production function_term -> system_term
-- On NOTVLINE reduce production function_term -> system_term
-- On NOTAND reduce production function_term -> system_term
-- On LEFT_IMPLY reduce production function_term -> system_term
-- On IMPLY reduce production function_term -> system_term
-- On EQUIV reduce production function_term -> system_term
-- On EQUAL reduce production function_term -> system_term
-- On EOI reduce production function_term -> system_term
-- On COMMA reduce production function_term -> system_term
-- On AND reduce production function_term -> system_term

State 29:
system_constant -> system_functor . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
system_term -> system_functor . LEFT_PAREN arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On LEFT_PAREN shift to state 30
-- On XOR reduce production system_constant -> system_functor
-- On VLINE reduce production system_constant -> system_functor
-- On RIGHT_PAREN reduce production system_constant -> system_functor
-- On RIGHT_BRACKET reduce production system_constant -> system_functor
-- On NOT_EQUAL reduce production system_constant -> system_functor
-- On NOTVLINE reduce production system_constant -> system_functor
-- On NOTAND reduce production system_constant -> system_functor
-- On LEFT_IMPLY reduce production system_constant -> system_functor
-- On IMPLY reduce production system_constant -> system_functor
-- On EQUIV reduce production system_constant -> system_functor
-- On EQUAL reduce production system_constant -> system_functor
-- On EOI reduce production system_constant -> system_functor
-- On COMMA reduce production system_constant -> system_functor
-- On AND reduce production system_constant -> system_functor

State 30:
system_term -> system_functor LEFT_PAREN . arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 31
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On separated_nonempty_list(COMMA,term) shift to state 39
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 40
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_defined_word shift to state 51
-- On arguments shift to state 56

State 31:
separated_nonempty_list(COMMA,term) -> term . [ RIGHT_PAREN RIGHT_BRACKET ]
separated_nonempty_list(COMMA,term) -> term . COMMA separated_nonempty_list(COMMA,term) [ RIGHT_PAREN RIGHT_BRACKET ]
-- On COMMA shift to state 32
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,term) -> term
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,term) -> term

State 32:
separated_nonempty_list(COMMA,term) -> term COMMA . separated_nonempty_list(COMMA,term) [ RIGHT_PAREN RIGHT_BRACKET ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 31
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On separated_nonempty_list(COMMA,term) shift to state 34
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 40
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_defined_word shift to state 51

State 33:
system_term -> system_constant . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production system_term -> system_constant
-- On VLINE reduce production system_term -> system_constant
-- On RIGHT_PAREN reduce production system_term -> system_constant
-- On RIGHT_BRACKET reduce production system_term -> system_constant
-- On NOT_EQUAL reduce production system_term -> system_constant
-- On NOTVLINE reduce production system_term -> system_constant
-- On NOTAND reduce production system_term -> system_constant
-- On LEFT_IMPLY reduce production system_term -> system_constant
-- On IMPLY reduce production system_term -> system_constant
-- On EQUIV reduce production system_term -> system_constant
-- On EQUAL reduce production system_term -> system_constant
-- On EOI reduce production system_term -> system_constant
-- On COMMA reduce production system_term -> system_constant
-- On AND reduce production system_term -> system_constant

State 34:
separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term) . [ RIGHT_PAREN RIGHT_BRACKET ]
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term)
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term)

State 35:
term -> raw_variable . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production term -> raw_variable
-- On VLINE reduce production term -> raw_variable
-- On RIGHT_PAREN reduce production term -> raw_variable
-- On RIGHT_BRACKET reduce production term -> raw_variable
-- On NOT_EQUAL reduce production term -> raw_variable
-- On NOTVLINE reduce production term -> raw_variable
-- On NOTAND reduce production term -> raw_variable
-- On LEFT_IMPLY reduce production term -> raw_variable
-- On IMPLY reduce production term -> raw_variable
-- On EQUIV reduce production term -> raw_variable
-- On EQUAL reduce production term -> raw_variable
-- On EOI reduce production term -> raw_variable
-- On COMMA reduce production term -> raw_variable
-- On AND reduce production term -> raw_variable

State 36:
function_term -> plain_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production function_term -> plain_term
-- On VLINE reduce production function_term -> plain_term
-- On RIGHT_PAREN reduce production function_term -> plain_term
-- On RIGHT_BRACKET reduce production function_term -> plain_term
-- On NOT_EQUAL reduce production function_term -> plain_term
-- On NOTVLINE reduce production function_term -> plain_term
-- On NOTAND reduce production function_term -> plain_term
-- On LEFT_IMPLY reduce production function_term -> plain_term
-- On IMPLY reduce production function_term -> plain_term
-- On EQUIV reduce production function_term -> plain_term
-- On EQUAL reduce production function_term -> plain_term
-- On EOI reduce production function_term -> plain_term
-- On COMMA reduce production function_term -> plain_term
-- On AND reduce production function_term -> plain_term

State 37:
plain_term -> functor_ . LEFT_PAREN arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On LEFT_PAREN shift to state 38

State 38:
plain_term -> functor_ LEFT_PAREN . arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 31
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On separated_nonempty_list(COMMA,term) shift to state 39
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 40
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_defined_word shift to state 51
-- On arguments shift to state 54

State 39:
arguments -> separated_nonempty_list(COMMA,term) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production arguments -> separated_nonempty_list(COMMA,term)

State 40:
term -> function_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR reduce production term -> function_term
-- On VLINE reduce production term -> function_term
-- On RIGHT_PAREN reduce production term -> function_term
-- On RIGHT_BRACKET reduce production term -> function_term
-- On NOTVLINE reduce production term -> function_term
-- On NOTAND reduce production term -> function_term
-- On LEFT_IMPLY reduce production term -> function_term
-- On IMPLY reduce production term -> function_term
-- On EQUIV reduce production term -> function_term
-- On EOI reduce production term -> function_term
-- On COMMA reduce production term -> function_term
-- On AND reduce production term -> function_term

State 41:
function_term -> defined_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production function_term -> defined_term
-- On VLINE reduce production function_term -> defined_term
-- On RIGHT_PAREN reduce production function_term -> defined_term
-- On RIGHT_BRACKET reduce production function_term -> defined_term
-- On NOT_EQUAL reduce production function_term -> defined_term
-- On NOTVLINE reduce production function_term -> defined_term
-- On NOTAND reduce production function_term -> defined_term
-- On LEFT_IMPLY reduce production function_term -> defined_term
-- On IMPLY reduce production function_term -> defined_term
-- On EQUIV reduce production function_term -> defined_term
-- On EQUAL reduce production function_term -> defined_term
-- On EOI reduce production function_term -> defined_term
-- On COMMA reduce production function_term -> defined_term
-- On AND reduce production function_term -> defined_term

State 42:
defined_atomic_term -> defined_plain_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production defined_atomic_term -> defined_plain_term
-- On VLINE reduce production defined_atomic_term -> defined_plain_term
-- On RIGHT_PAREN reduce production defined_atomic_term -> defined_plain_term
-- On RIGHT_BRACKET reduce production defined_atomic_term -> defined_plain_term
-- On NOT_EQUAL reduce production defined_atomic_term -> defined_plain_term
-- On NOTVLINE reduce production defined_atomic_term -> defined_plain_term
-- On NOTAND reduce production defined_atomic_term -> defined_plain_term
-- On LEFT_IMPLY reduce production defined_atomic_term -> defined_plain_term
-- On IMPLY reduce production defined_atomic_term -> defined_plain_term
-- On EQUIV reduce production defined_atomic_term -> defined_plain_term
-- On EQUAL reduce production defined_atomic_term -> defined_plain_term
-- On EOI reduce production defined_atomic_term -> defined_plain_term
-- On COMMA reduce production defined_atomic_term -> defined_plain_term
-- On AND reduce production defined_atomic_term -> defined_plain_term

State 43:
defined_constant -> defined_functor . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
defined_plain_term -> defined_functor . LEFT_PAREN arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On LEFT_PAREN shift to state 44
-- On XOR reduce production defined_constant -> defined_functor
-- On VLINE reduce production defined_constant -> defined_functor
-- On RIGHT_PAREN reduce production defined_constant -> defined_functor
-- On RIGHT_BRACKET reduce production defined_constant -> defined_functor
-- On NOT_EQUAL reduce production defined_constant -> defined_functor
-- On NOTVLINE reduce production defined_constant -> defined_functor
-- On NOTAND reduce production defined_constant -> defined_functor
-- On LEFT_IMPLY reduce production defined_constant -> defined_functor
-- On IMPLY reduce production defined_constant -> defined_functor
-- On EQUIV reduce production defined_constant -> defined_functor
-- On EQUAL reduce production defined_constant -> defined_functor
-- On EOI reduce production defined_constant -> defined_functor
-- On COMMA reduce production defined_constant -> defined_functor
-- On AND reduce production defined_constant -> defined_functor

State 44:
defined_plain_term -> defined_functor LEFT_PAREN . arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 31
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On separated_nonempty_list(COMMA,term) shift to state 39
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 40
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_defined_word shift to state 51
-- On arguments shift to state 52

State 45:
defined_plain_term -> defined_constant . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production defined_plain_term -> defined_constant
-- On VLINE reduce production defined_plain_term -> defined_constant
-- On RIGHT_PAREN reduce production defined_plain_term -> defined_constant
-- On RIGHT_BRACKET reduce production defined_plain_term -> defined_constant
-- On NOT_EQUAL reduce production defined_plain_term -> defined_constant
-- On NOTVLINE reduce production defined_plain_term -> defined_constant
-- On NOTAND reduce production defined_plain_term -> defined_constant
-- On LEFT_IMPLY reduce production defined_plain_term -> defined_constant
-- On IMPLY reduce production defined_plain_term -> defined_constant
-- On EQUIV reduce production defined_plain_term -> defined_constant
-- On EQUAL reduce production defined_plain_term -> defined_constant
-- On EOI reduce production defined_plain_term -> defined_constant
-- On COMMA reduce production defined_plain_term -> defined_constant
-- On AND reduce production defined_plain_term -> defined_constant

State 46:
defined_term -> defined_atomic_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production defined_term -> defined_atomic_term
-- On VLINE reduce production defined_term -> defined_atomic_term
-- On RIGHT_PAREN reduce production defined_term -> defined_atomic_term
-- On RIGHT_BRACKET reduce production defined_term -> defined_atomic_term
-- On NOT_EQUAL reduce production defined_term -> defined_atomic_term
-- On NOTVLINE reduce production defined_term -> defined_atomic_term
-- On NOTAND reduce production defined_term -> defined_atomic_term
-- On LEFT_IMPLY reduce production defined_term -> defined_atomic_term
-- On IMPLY reduce production defined_term -> defined_atomic_term
-- On EQUIV reduce production defined_term -> defined_atomic_term
-- On EQUAL reduce production defined_term -> defined_atomic_term
-- On EOI reduce production defined_term -> defined_atomic_term
-- On COMMA reduce production defined_term -> defined_atomic_term
-- On AND reduce production defined_term -> defined_atomic_term

State 47:
defined_term -> defined_atom . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production defined_term -> defined_atom
-- On VLINE reduce production defined_term -> defined_atom
-- On RIGHT_PAREN reduce production defined_term -> defined_atom
-- On RIGHT_BRACKET reduce production defined_term -> defined_atom
-- On NOT_EQUAL reduce production defined_term -> defined_atom
-- On NOTVLINE reduce production defined_term -> defined_atom
-- On NOTAND reduce production defined_term -> defined_atom
-- On LEFT_IMPLY reduce production defined_term -> defined_atom
-- On IMPLY reduce production defined_term -> defined_atom
-- On EQUIV reduce production defined_term -> defined_atom
-- On EQUAL reduce production defined_term -> defined_atom
-- On EOI reduce production defined_term -> defined_atom
-- On COMMA reduce production defined_term -> defined_atom
-- On AND reduce production defined_term -> defined_atom

State 48:
term -> conditional_term(fof_formula,term) . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production term -> conditional_term(fof_formula,term)
-- On VLINE reduce production term -> conditional_term(fof_formula,term)
-- On RIGHT_PAREN reduce production term -> conditional_term(fof_formula,term)
-- On RIGHT_BRACKET reduce production term -> conditional_term(fof_formula,term)
-- On NOT_EQUAL reduce production term -> conditional_term(fof_formula,term)
-- On NOTVLINE reduce production term -> conditional_term(fof_formula,term)
-- On NOTAND reduce production term -> conditional_term(fof_formula,term)
-- On LEFT_IMPLY reduce production term -> conditional_term(fof_formula,term)
-- On IMPLY reduce production term -> conditional_term(fof_formula,term)
-- On EQUIV reduce production term -> conditional_term(fof_formula,term)
-- On EQUAL reduce production term -> conditional_term(fof_formula,term)
-- On EOI reduce production term -> conditional_term(fof_formula,term)
-- On COMMA reduce production term -> conditional_term(fof_formula,term)
-- On AND reduce production term -> conditional_term(fof_formula,term)

State 49:
functor_ -> atomic_word . [ LEFT_PAREN ]
plain_term -> atomic_word . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production plain_term -> atomic_word
-- On VLINE reduce production plain_term -> atomic_word
-- On RIGHT_PAREN reduce production plain_term -> atomic_word
-- On RIGHT_BRACKET reduce production plain_term -> atomic_word
-- On NOT_EQUAL reduce production plain_term -> atomic_word
-- On NOTVLINE reduce production plain_term -> atomic_word
-- On NOTAND reduce production plain_term -> atomic_word
-- On LEFT_PAREN reduce production functor_ -> atomic_word
-- On LEFT_IMPLY reduce production plain_term -> atomic_word
-- On IMPLY reduce production plain_term -> atomic_word
-- On EQUIV reduce production plain_term -> atomic_word
-- On EQUAL reduce production plain_term -> atomic_word
-- On EOI reduce production plain_term -> atomic_word
-- On COMMA reduce production plain_term -> atomic_word
-- On AND reduce production plain_term -> atomic_word

State 50:
system_functor -> atomic_system_word . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production system_functor -> atomic_system_word
-- On VLINE reduce production system_functor -> atomic_system_word
-- On RIGHT_PAREN reduce production system_functor -> atomic_system_word
-- On RIGHT_BRACKET reduce production system_functor -> atomic_system_word
-- On NOT_EQUAL reduce production system_functor -> atomic_system_word
-- On NOTVLINE reduce production system_functor -> atomic_system_word
-- On NOTAND reduce production system_functor -> atomic_system_word
-- On LEFT_PAREN reduce production system_functor -> atomic_system_word
-- On LEFT_IMPLY reduce production system_functor -> atomic_system_word
-- On IMPLY reduce production system_functor -> atomic_system_word
-- On EQUIV reduce production system_functor -> atomic_system_word
-- On EQUAL reduce production system_functor -> atomic_system_word
-- On EOI reduce production system_functor -> atomic_system_word
-- On COMMA reduce production system_functor -> atomic_system_word
-- On AND reduce production system_functor -> atomic_system_word

State 51:
defined_functor -> atomic_defined_word . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production defined_functor -> atomic_defined_word
-- On VLINE reduce production defined_functor -> atomic_defined_word
-- On RIGHT_PAREN reduce production defined_functor -> atomic_defined_word
-- On RIGHT_BRACKET reduce production defined_functor -> atomic_defined_word
-- On NOT_EQUAL reduce production defined_functor -> atomic_defined_word
-- On NOTVLINE reduce production defined_functor -> atomic_defined_word
-- On NOTAND reduce production defined_functor -> atomic_defined_word
-- On LEFT_PAREN reduce production defined_functor -> atomic_defined_word
-- On LEFT_IMPLY reduce production defined_functor -> atomic_defined_word
-- On IMPLY reduce production defined_functor -> atomic_defined_word
-- On EQUIV reduce production defined_functor -> atomic_defined_word
-- On EQUAL reduce production defined_functor -> atomic_defined_word
-- On EOI reduce production defined_functor -> atomic_defined_word
-- On COMMA reduce production defined_functor -> atomic_defined_word
-- On AND reduce production defined_functor -> atomic_defined_word

State 52:
defined_plain_term -> defined_functor LEFT_PAREN arguments . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On RIGHT_PAREN shift to state 53

State 53:
defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On VLINE reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On RIGHT_PAREN reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On RIGHT_BRACKET reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOT_EQUAL reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOTVLINE reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOTAND reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On LEFT_IMPLY reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On IMPLY reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On EQUIV reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On EQUAL reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On EOI reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On COMMA reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On AND reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN

State 54:
plain_term -> functor_ LEFT_PAREN arguments . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On RIGHT_PAREN shift to state 55

State 55:
plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN
-- On VLINE reduce production plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN
-- On RIGHT_PAREN reduce production plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN
-- On RIGHT_BRACKET reduce production plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN
-- On NOT_EQUAL reduce production plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN
-- On NOTVLINE reduce production plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN
-- On NOTAND reduce production plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN
-- On LEFT_IMPLY reduce production plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN
-- On IMPLY reduce production plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN
-- On EQUIV reduce production plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN
-- On EQUAL reduce production plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN
-- On EOI reduce production plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN
-- On COMMA reduce production plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN
-- On AND reduce production plain_term -> functor_ LEFT_PAREN arguments RIGHT_PAREN

State 56:
system_term -> system_functor LEFT_PAREN arguments . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On RIGHT_PAREN shift to state 57

State 57:
system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On VLINE reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On RIGHT_PAREN reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On RIGHT_BRACKET reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOT_EQUAL reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOTVLINE reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOTAND reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On LEFT_IMPLY reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On IMPLY reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On EQUIV reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On EQUAL reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On EOI reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On COMMA reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On AND reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN

State 58:
atomic_formula -> term EQUAL . term [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 59
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 40
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_defined_word shift to state 51

State 59:
atomic_formula -> term EQUAL term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR reduce production atomic_formula -> term EQUAL term
-- On VLINE reduce production atomic_formula -> term EQUAL term
-- On RIGHT_PAREN reduce production atomic_formula -> term EQUAL term
-- On RIGHT_BRACKET reduce production atomic_formula -> term EQUAL term
-- On NOTVLINE reduce production atomic_formula -> term EQUAL term
-- On NOTAND reduce production atomic_formula -> term EQUAL term
-- On LEFT_IMPLY reduce production atomic_formula -> term EQUAL term
-- On IMPLY reduce production atomic_formula -> term EQUAL term
-- On EQUIV reduce production atomic_formula -> term EQUAL term
-- On EOI reduce production atomic_formula -> term EQUAL term
-- On COMMA reduce production atomic_formula -> term EQUAL term
-- On AND reduce production atomic_formula -> term EQUAL term

State 60:
atomic_formula -> function_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
term -> function_term . [ NOT_EQUAL EQUAL ]
-- On XOR reduce production atomic_formula -> function_term
-- On VLINE reduce production atomic_formula -> function_term
-- On RIGHT_PAREN reduce production atomic_formula -> function_term
-- On RIGHT_BRACKET reduce production atomic_formula -> function_term
-- On NOT_EQUAL reduce production term -> function_term
-- On NOTVLINE reduce production atomic_formula -> function_term
-- On NOTAND reduce production atomic_formula -> function_term
-- On LEFT_IMPLY reduce production atomic_formula -> function_term
-- On IMPLY reduce production atomic_formula -> function_term
-- On EQUIV reduce production atomic_formula -> function_term
-- On EQUAL reduce production term -> function_term
-- On EOI reduce production atomic_formula -> function_term
-- On COMMA reduce production atomic_formula -> function_term
-- On AND reduce production atomic_formula -> function_term

State 61:
fof_quantified_formula -> fol_quantifier . LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On LEFT_BRACKET shift to state 62

State 62:
fof_quantified_formula -> fol_quantifier LEFT_BRACKET . separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On UPPER_WORD shift to state 5
-- On separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) shift to state 63
-- On raw_variable shift to state 70
-- On raw_typed_variable(tff_unary_type) shift to state 105

State 63:
fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) . RIGHT_BRACKET COLUMN fof_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On RIGHT_BRACKET shift to state 64

State 64:
fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET . COLUMN fof_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On COLUMN shift to state 65

State 65:
fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN . fof_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 16
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 66
-- On fof_unary_formula shift to state 67
-- On fof_quantified_formula shift to state 68
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 66:
fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula
-- On VLINE reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula
-- On RIGHT_PAREN reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula
-- On RIGHT_BRACKET reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula
-- On NOTVLINE reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula
-- On NOTAND reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula
-- On LEFT_IMPLY reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula
-- On IMPLY reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula
-- On EQUIV reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula
-- On EOI reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula
-- On COMMA reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula
-- On AND reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) RIGHT_BRACKET COLUMN fof_unitary_formula

State 67:
fof_unitary_formula -> fof_unary_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR reduce production fof_unitary_formula -> fof_unary_formula
-- On VLINE reduce production fof_unitary_formula -> fof_unary_formula
-- On RIGHT_PAREN reduce production fof_unitary_formula -> fof_unary_formula
-- On RIGHT_BRACKET reduce production fof_unitary_formula -> fof_unary_formula
-- On NOTVLINE reduce production fof_unitary_formula -> fof_unary_formula
-- On NOTAND reduce production fof_unitary_formula -> fof_unary_formula
-- On LEFT_IMPLY reduce production fof_unitary_formula -> fof_unary_formula
-- On IMPLY reduce production fof_unitary_formula -> fof_unary_formula
-- On EQUIV reduce production fof_unitary_formula -> fof_unary_formula
-- On EOI reduce production fof_unitary_formula -> fof_unary_formula
-- On COMMA reduce production fof_unitary_formula -> fof_unary_formula
-- On AND reduce production fof_unitary_formula -> fof_unary_formula

State 68:
fof_unitary_formula -> fof_quantified_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR reduce production fof_unitary_formula -> fof_quantified_formula
-- On VLINE reduce production fof_unitary_formula -> fof_quantified_formula
-- On RIGHT_PAREN reduce production fof_unitary_formula -> fof_quantified_formula
-- On RIGHT_BRACKET reduce production fof_unitary_formula -> fof_quantified_formula
-- On NOTVLINE reduce production fof_unitary_formula -> fof_quantified_formula
-- On NOTAND reduce production fof_unitary_formula -> fof_quantified_formula
-- On LEFT_IMPLY reduce production fof_unitary_formula -> fof_quantified_formula
-- On IMPLY reduce production fof_unitary_formula -> fof_quantified_formula
-- On EQUIV reduce production fof_unitary_formula -> fof_quantified_formula
-- On EOI reduce production fof_unitary_formula -> fof_quantified_formula
-- On COMMA reduce production fof_unitary_formula -> fof_quantified_formula
-- On AND reduce production fof_unitary_formula -> fof_quantified_formula

State 69:
fof_unitary_formula -> atomic_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR reduce production fof_unitary_formula -> atomic_formula
-- On VLINE reduce production fof_unitary_formula -> atomic_formula
-- On RIGHT_PAREN reduce production fof_unitary_formula -> atomic_formula
-- On RIGHT_BRACKET reduce production fof_unitary_formula -> atomic_formula
-- On NOTVLINE reduce production fof_unitary_formula -> atomic_formula
-- On NOTAND reduce production fof_unitary_formula -> atomic_formula
-- On LEFT_IMPLY reduce production fof_unitary_formula -> atomic_formula
-- On IMPLY reduce production fof_unitary_formula -> atomic_formula
-- On EQUIV reduce production fof_unitary_formula -> atomic_formula
-- On EOI reduce production fof_unitary_formula -> atomic_formula
-- On COMMA reduce production fof_unitary_formula -> atomic_formula
-- On AND reduce production fof_unitary_formula -> atomic_formula

State 70:
raw_typed_variable(tff_unary_type) -> raw_variable . [ RIGHT_BRACKET COMMA ]
raw_typed_variable(tff_unary_type) -> raw_variable . COLUMN tff_unary_type [ RIGHT_BRACKET COMMA ]
-- On COLUMN shift to state 71
-- On RIGHT_BRACKET reduce production raw_typed_variable(tff_unary_type) -> raw_variable
-- On COMMA reduce production raw_typed_variable(tff_unary_type) -> raw_variable

State 71:
raw_typed_variable(tff_unary_type) -> raw_variable COLUMN . tff_unary_type [ RIGHT_BRACKET COMMA ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 76
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 79
-- On tff_unary_type shift to state 104
-- On tff_atom_type shift to state 84
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 88

State 72:
type_const -> WILDCARD . [ STAR RIGHT_PAREN RIGHT_BRACKET LEFT_PAREN COMMA ARROW ]
-- On STAR reduce production type_const -> WILDCARD
-- On RIGHT_PAREN reduce production type_const -> WILDCARD
-- On RIGHT_BRACKET reduce production type_const -> WILDCARD
-- On LEFT_PAREN reduce production type_const -> WILDCARD
-- On COMMA reduce production type_const -> WILDCARD
-- On ARROW reduce production type_const -> WILDCARD

State 73:
type_const -> TY_TYPE . [ STAR RIGHT_PAREN RIGHT_BRACKET LEFT_PAREN COMMA ARROW ]
-- On STAR reduce production type_const -> TY_TYPE
-- On RIGHT_PAREN reduce production type_const -> TY_TYPE
-- On RIGHT_BRACKET reduce production type_const -> TY_TYPE
-- On LEFT_PAREN reduce production type_const -> TY_TYPE
-- On COMMA reduce production type_const -> TY_TYPE
-- On ARROW reduce production type_const -> TY_TYPE

State 74:
type_const -> TY_PROP . [ STAR RIGHT_PAREN RIGHT_BRACKET LEFT_PAREN COMMA ARROW ]
-- On STAR reduce production type_const -> TY_PROP
-- On RIGHT_PAREN reduce production type_const -> TY_PROP
-- On RIGHT_BRACKET reduce production type_const -> TY_PROP
-- On LEFT_PAREN reduce production type_const -> TY_PROP
-- On COMMA reduce production type_const -> TY_PROP
-- On ARROW reduce production type_const -> TY_PROP

State 75:
type_const -> LOWER_WORD . [ STAR RIGHT_PAREN RIGHT_BRACKET LEFT_PAREN COMMA ARROW ]
-- On STAR reduce production type_const -> LOWER_WORD
-- On RIGHT_PAREN reduce production type_const -> LOWER_WORD
-- On RIGHT_BRACKET reduce production type_const -> LOWER_WORD
-- On LEFT_PAREN reduce production type_const -> LOWER_WORD
-- On COMMA reduce production type_const -> LOWER_WORD
-- On ARROW reduce production type_const -> LOWER_WORD

State 76:
tff_unary_type -> LEFT_PAREN . tff_type RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 77
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 79
-- On tff_unary_type shift to state 81
-- On tff_type shift to state 102
-- On tff_atom_type shift to state 84
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 88

State 77:
tff_type -> LEFT_PAREN . ty_args RIGHT_PAREN ARROW tff_atom_type [ RIGHT_PAREN COMMA ]
tff_unary_type -> LEFT_PAREN . tff_type RIGHT_PAREN [ STAR RIGHT_PAREN COMMA ARROW ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 77
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 79
-- On ty_args shift to state 94
-- On tff_unary_type shift to state 98
-- On tff_type shift to state 102
-- On tff_atom_type shift to state 84
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 88

State 78:
type_const -> DOLLAR_WORD . [ STAR RIGHT_PAREN RIGHT_BRACKET LEFT_PAREN COMMA ARROW ]
-- On STAR reduce production type_const -> DOLLAR_WORD
-- On RIGHT_PAREN reduce production type_const -> DOLLAR_WORD
-- On RIGHT_BRACKET reduce production type_const -> DOLLAR_WORD
-- On LEFT_PAREN reduce production type_const -> DOLLAR_WORD
-- On COMMA reduce production type_const -> DOLLAR_WORD
-- On ARROW reduce production type_const -> DOLLAR_WORD

State 79:
tff_atom_type -> type_const . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
tff_atom_type -> type_const . LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On LEFT_PAREN shift to state 80
-- On STAR reduce production tff_atom_type -> type_const
-- On RIGHT_PAREN reduce production tff_atom_type -> type_const
-- On RIGHT_BRACKET reduce production tff_atom_type -> type_const
-- On COMMA reduce production tff_atom_type -> type_const
-- On ARROW reduce production tff_atom_type -> type_const

State 80:
tff_atom_type -> type_const LEFT_PAREN . separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 77
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 79
-- On tff_unary_type shift to state 81
-- On tff_type shift to state 89
-- On tff_atom_type shift to state 84
-- On separated_nonempty_list(COMMA,tff_type) shift to state 92
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 88

State 81:
tff_type -> tff_unary_type . [ RIGHT_PAREN COMMA ]
tff_type -> tff_unary_type . ARROW tff_unary_type [ RIGHT_PAREN COMMA ]
-- On ARROW shift to state 82
-- On RIGHT_PAREN reduce production tff_type -> tff_unary_type
-- On COMMA reduce production tff_type -> tff_unary_type

State 82:
tff_type -> tff_unary_type ARROW . tff_unary_type [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 76
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 79
-- On tff_unary_type shift to state 83
-- On tff_atom_type shift to state 84
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 88

State 83:
tff_type -> tff_unary_type ARROW tff_unary_type . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_type -> tff_unary_type ARROW tff_unary_type
-- On COMMA reduce production tff_type -> tff_unary_type ARROW tff_unary_type

State 84:
tff_unary_type -> tff_atom_type . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On STAR reduce production tff_unary_type -> tff_atom_type
-- On RIGHT_PAREN reduce production tff_unary_type -> tff_atom_type
-- On RIGHT_BRACKET reduce production tff_unary_type -> tff_atom_type
-- On COMMA reduce production tff_unary_type -> tff_atom_type
-- On ARROW reduce production tff_unary_type -> tff_atom_type

State 85:
raw_ty_variable -> raw_variable . COLUMN TY_TYPE [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
raw_ty_variable -> raw_variable . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On COLUMN shift to state 86
-- On STAR reduce production raw_ty_variable -> raw_variable
-- On RIGHT_PAREN reduce production raw_ty_variable -> raw_variable
-- On RIGHT_BRACKET reduce production raw_ty_variable -> raw_variable
-- On COMMA reduce production raw_ty_variable -> raw_variable
-- On ARROW reduce production raw_ty_variable -> raw_variable

State 86:
raw_ty_variable -> raw_variable COLUMN . TY_TYPE [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On TY_TYPE shift to state 87

State 87:
raw_ty_variable -> raw_variable COLUMN TY_TYPE . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On STAR reduce production raw_ty_variable -> raw_variable COLUMN TY_TYPE
-- On RIGHT_PAREN reduce production raw_ty_variable -> raw_variable COLUMN TY_TYPE
-- On RIGHT_BRACKET reduce production raw_ty_variable -> raw_variable COLUMN TY_TYPE
-- On COMMA reduce production raw_ty_variable -> raw_variable COLUMN TY_TYPE
-- On ARROW reduce production raw_ty_variable -> raw_variable COLUMN TY_TYPE

State 88:
tff_atom_type -> raw_ty_variable . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On STAR reduce production tff_atom_type -> raw_ty_variable
-- On RIGHT_PAREN reduce production tff_atom_type -> raw_ty_variable
-- On RIGHT_BRACKET reduce production tff_atom_type -> raw_ty_variable
-- On COMMA reduce production tff_atom_type -> raw_ty_variable
-- On ARROW reduce production tff_atom_type -> raw_ty_variable

State 89:
separated_nonempty_list(COMMA,tff_type) -> tff_type . [ RIGHT_PAREN ]
separated_nonempty_list(COMMA,tff_type) -> tff_type . COMMA separated_nonempty_list(COMMA,tff_type) [ RIGHT_PAREN ]
-- On COMMA shift to state 90
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,tff_type) -> tff_type

State 90:
separated_nonempty_list(COMMA,tff_type) -> tff_type COMMA . separated_nonempty_list(COMMA,tff_type) [ RIGHT_PAREN ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 77
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 79
-- On tff_unary_type shift to state 81
-- On tff_type shift to state 89
-- On tff_atom_type shift to state 84
-- On separated_nonempty_list(COMMA,tff_type) shift to state 91
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 88

State 91:
separated_nonempty_list(COMMA,tff_type) -> tff_type COMMA separated_nonempty_list(COMMA,tff_type) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,tff_type) -> tff_type COMMA separated_nonempty_list(COMMA,tff_type)

State 92:
tff_atom_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) . RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On RIGHT_PAREN shift to state 93

State 93:
tff_atom_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On STAR reduce production tff_atom_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN
-- On RIGHT_PAREN reduce production tff_atom_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN
-- On RIGHT_BRACKET reduce production tff_atom_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN
-- On COMMA reduce production tff_atom_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN
-- On ARROW reduce production tff_atom_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN

State 94:
tff_type -> LEFT_PAREN ty_args . RIGHT_PAREN ARROW tff_atom_type [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 95

State 95:
tff_type -> LEFT_PAREN ty_args RIGHT_PAREN . ARROW tff_atom_type [ RIGHT_PAREN COMMA ]
-- On ARROW shift to state 96

State 96:
tff_type -> LEFT_PAREN ty_args RIGHT_PAREN ARROW . tff_atom_type [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 79
-- On tff_atom_type shift to state 97
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 88

State 97:
tff_type -> LEFT_PAREN ty_args RIGHT_PAREN ARROW tff_atom_type . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_type -> LEFT_PAREN ty_args RIGHT_PAREN ARROW tff_atom_type
-- On COMMA reduce production tff_type -> LEFT_PAREN ty_args RIGHT_PAREN ARROW tff_atom_type

State 98:
tff_type -> tff_unary_type . [ RIGHT_PAREN ]
tff_type -> tff_unary_type . ARROW tff_unary_type [ RIGHT_PAREN ]
ty_args -> tff_unary_type . STAR tff_unary_type [ RIGHT_PAREN ]
ty_args -> tff_unary_type . STAR ty_args [ RIGHT_PAREN ]
-- On STAR shift to state 99
-- On ARROW shift to state 82
-- On RIGHT_PAREN reduce production tff_type -> tff_unary_type

State 99:
ty_args -> tff_unary_type STAR . tff_unary_type [ RIGHT_PAREN ]
ty_args -> tff_unary_type STAR . ty_args [ RIGHT_PAREN ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 76
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 79
-- On ty_args shift to state 100
-- On tff_unary_type shift to state 101
-- On tff_atom_type shift to state 84
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 88

State 100:
ty_args -> tff_unary_type STAR ty_args . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production ty_args -> tff_unary_type STAR ty_args

State 101:
ty_args -> tff_unary_type . STAR tff_unary_type [ RIGHT_PAREN ]
ty_args -> tff_unary_type STAR tff_unary_type . [ RIGHT_PAREN ]
ty_args -> tff_unary_type . STAR ty_args [ RIGHT_PAREN ]
-- On STAR shift to state 99
-- On RIGHT_PAREN reduce production ty_args -> tff_unary_type STAR tff_unary_type

State 102:
tff_unary_type -> LEFT_PAREN tff_type . RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On RIGHT_PAREN shift to state 103

State 103:
tff_unary_type -> LEFT_PAREN tff_type RIGHT_PAREN . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On STAR reduce production tff_unary_type -> LEFT_PAREN tff_type RIGHT_PAREN
-- On RIGHT_PAREN reduce production tff_unary_type -> LEFT_PAREN tff_type RIGHT_PAREN
-- On RIGHT_BRACKET reduce production tff_unary_type -> LEFT_PAREN tff_type RIGHT_PAREN
-- On COMMA reduce production tff_unary_type -> LEFT_PAREN tff_type RIGHT_PAREN
-- On ARROW reduce production tff_unary_type -> LEFT_PAREN tff_type RIGHT_PAREN

State 104:
raw_typed_variable(tff_unary_type) -> raw_variable COLUMN tff_unary_type . [ RIGHT_BRACKET COMMA ]
-- On RIGHT_BRACKET reduce production raw_typed_variable(tff_unary_type) -> raw_variable COLUMN tff_unary_type
-- On COMMA reduce production raw_typed_variable(tff_unary_type) -> raw_variable COLUMN tff_unary_type

State 105:
separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) -> raw_typed_variable(tff_unary_type) . [ RIGHT_BRACKET ]
separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) -> raw_typed_variable(tff_unary_type) . COMMA separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) [ RIGHT_BRACKET ]
-- On COMMA shift to state 106
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) -> raw_typed_variable(tff_unary_type)

State 106:
separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) -> raw_typed_variable(tff_unary_type) COMMA . separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) [ RIGHT_BRACKET ]
-- On UPPER_WORD shift to state 5
-- On separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) shift to state 107
-- On raw_variable shift to state 70
-- On raw_typed_variable(tff_unary_type) shift to state 105

State 107:
separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) -> raw_typed_variable(tff_unary_type) COMMA separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type)) -> raw_typed_variable(tff_unary_type) COMMA separated_nonempty_list(COMMA,raw_typed_variable(tff_unary_type))

State 108:
fof_unary_formula -> unary_connective fof_unitary_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On VLINE reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On RIGHT_PAREN reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On RIGHT_BRACKET reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On NOTVLINE reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On NOTAND reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On LEFT_IMPLY reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On IMPLY reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On EQUIV reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On EOI reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On COMMA reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On AND reduce production fof_unary_formula -> unary_connective fof_unitary_formula

State 109:
fof_logic_formula -> fof_unitary_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR reduce production fof_logic_formula -> fof_unitary_formula
-- On VLINE reduce production fof_logic_formula -> fof_unitary_formula
-- On RIGHT_PAREN reduce production fof_logic_formula -> fof_unitary_formula
-- On RIGHT_BRACKET reduce production fof_logic_formula -> fof_unitary_formula
-- On NOTVLINE reduce production fof_logic_formula -> fof_unitary_formula
-- On NOTAND reduce production fof_logic_formula -> fof_unitary_formula
-- On LEFT_IMPLY reduce production fof_logic_formula -> fof_unitary_formula
-- On IMPLY reduce production fof_logic_formula -> fof_unitary_formula
-- On EQUIV reduce production fof_logic_formula -> fof_unitary_formula
-- On EOI reduce production fof_logic_formula -> fof_unitary_formula
-- On COMMA reduce production fof_logic_formula -> fof_unitary_formula
-- On AND reduce production fof_logic_formula -> fof_unitary_formula

State 110:
fof_logic_formula -> fof_logic_formula . binary_connective fof_unitary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV AND ]
fof_unitary_formula -> LEFT_PAREN fof_logic_formula . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR shift to state 111
-- On VLINE shift to state 112
-- On RIGHT_PAREN shift to state 113
-- On NOTVLINE shift to state 114
-- On NOTAND shift to state 115
-- On LEFT_IMPLY shift to state 116
-- On IMPLY shift to state 117
-- On EQUIV shift to state 118
-- On AND shift to state 119
-- On binary_connective shift to state 120

State 111:
binary_connective -> XOR . [ WILDCARD UPPER_WORD TRUE SINGLE_QUOTED REAL RATIONAL NOT LOWER_WORD LEFT_PAREN LAMBDA ITE_T ITE_F INTEGER HO_FORALL HO_EXISTS FORALL FALSE EXISTS DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT ]
-- On WILDCARD reduce production binary_connective -> XOR
-- On UPPER_WORD reduce production binary_connective -> XOR
-- On TRUE reduce production binary_connective -> XOR
-- On SINGLE_QUOTED reduce production binary_connective -> XOR
-- On REAL reduce production binary_connective -> XOR
-- On RATIONAL reduce production binary_connective -> XOR
-- On NOT reduce production binary_connective -> XOR
-- On LOWER_WORD reduce production binary_connective -> XOR
-- On LEFT_PAREN reduce production binary_connective -> XOR
-- On LAMBDA reduce production binary_connective -> XOR
-- On ITE_T reduce production binary_connective -> XOR
-- On ITE_F reduce production binary_connective -> XOR
-- On INTEGER reduce production binary_connective -> XOR
-- On HO_FORALL reduce production binary_connective -> XOR
-- On HO_EXISTS reduce production binary_connective -> XOR
-- On FORALL reduce production binary_connective -> XOR
-- On FALSE reduce production binary_connective -> XOR
-- On EXISTS reduce production binary_connective -> XOR
-- On DOLLAR_WORD reduce production binary_connective -> XOR
-- On DOLLAR_DOLLAR_WORD reduce production binary_connective -> XOR
-- On DISTINCT_OBJECT reduce production binary_connective -> XOR

State 112:
binary_connective -> VLINE . [ WILDCARD UPPER_WORD TRUE SINGLE_QUOTED REAL RATIONAL NOT LOWER_WORD LEFT_PAREN LAMBDA ITE_T ITE_F INTEGER HO_FORALL HO_EXISTS FORALL FALSE EXISTS DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT ]
-- On WILDCARD reduce production binary_connective -> VLINE
-- On UPPER_WORD reduce production binary_connective -> VLINE
-- On TRUE reduce production binary_connective -> VLINE
-- On SINGLE_QUOTED reduce production binary_connective -> VLINE
-- On REAL reduce production binary_connective -> VLINE
-- On RATIONAL reduce production binary_connective -> VLINE
-- On NOT reduce production binary_connective -> VLINE
-- On LOWER_WORD reduce production binary_connective -> VLINE
-- On LEFT_PAREN reduce production binary_connective -> VLINE
-- On LAMBDA reduce production binary_connective -> VLINE
-- On ITE_T reduce production binary_connective -> VLINE
-- On ITE_F reduce production binary_connective -> VLINE
-- On INTEGER reduce production binary_connective -> VLINE
-- On HO_FORALL reduce production binary_connective -> VLINE
-- On HO_EXISTS reduce production binary_connective -> VLINE
-- On FORALL reduce production binary_connective -> VLINE
-- On FALSE reduce production binary_connective -> VLINE
-- On EXISTS reduce production binary_connective -> VLINE
-- On DOLLAR_WORD reduce production binary_connective -> VLINE
-- On DOLLAR_DOLLAR_WORD reduce production binary_connective -> VLINE
-- On DISTINCT_OBJECT reduce production binary_connective -> VLINE

State 113:
fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On VLINE reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On NOTVLINE reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On NOTAND reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On IMPLY reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On EQUIV reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On EOI reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On COMMA reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On AND reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN

State 114:
binary_connective -> NOTVLINE . [ WILDCARD UPPER_WORD TRUE SINGLE_QUOTED REAL RATIONAL NOT LOWER_WORD LEFT_PAREN LAMBDA ITE_T ITE_F INTEGER HO_FORALL HO_EXISTS FORALL FALSE EXISTS DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT ]
-- On WILDCARD reduce production binary_connective -> NOTVLINE
-- On UPPER_WORD reduce production binary_connective -> NOTVLINE
-- On TRUE reduce production binary_connective -> NOTVLINE
-- On SINGLE_QUOTED reduce production binary_connective -> NOTVLINE
-- On REAL reduce production binary_connective -> NOTVLINE
-- On RATIONAL reduce production binary_connective -> NOTVLINE
-- On NOT reduce production binary_connective -> NOTVLINE
-- On LOWER_WORD reduce production binary_connective -> NOTVLINE
-- On LEFT_PAREN reduce production binary_connective -> NOTVLINE
-- On LAMBDA reduce production binary_connective -> NOTVLINE
-- On ITE_T reduce production binary_connective -> NOTVLINE
-- On ITE_F reduce production binary_connective -> NOTVLINE
-- On INTEGER reduce production binary_connective -> NOTVLINE
-- On HO_FORALL reduce production binary_connective -> NOTVLINE
-- On HO_EXISTS reduce production binary_connective -> NOTVLINE
-- On FORALL reduce production binary_connective -> NOTVLINE
-- On FALSE reduce production binary_connective -> NOTVLINE
-- On EXISTS reduce production binary_connective -> NOTVLINE
-- On DOLLAR_WORD reduce production binary_connective -> NOTVLINE
-- On DOLLAR_DOLLAR_WORD reduce production binary_connective -> NOTVLINE
-- On DISTINCT_OBJECT reduce production binary_connective -> NOTVLINE

State 115:
binary_connective -> NOTAND . [ WILDCARD UPPER_WORD TRUE SINGLE_QUOTED REAL RATIONAL NOT LOWER_WORD LEFT_PAREN LAMBDA ITE_T ITE_F INTEGER HO_FORALL HO_EXISTS FORALL FALSE EXISTS DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT ]
-- On WILDCARD reduce production binary_connective -> NOTAND
-- On UPPER_WORD reduce production binary_connective -> NOTAND
-- On TRUE reduce production binary_connective -> NOTAND
-- On SINGLE_QUOTED reduce production binary_connective -> NOTAND
-- On REAL reduce production binary_connective -> NOTAND
-- On RATIONAL reduce production binary_connective -> NOTAND
-- On NOT reduce production binary_connective -> NOTAND
-- On LOWER_WORD reduce production binary_connective -> NOTAND
-- On LEFT_PAREN reduce production binary_connective -> NOTAND
-- On LAMBDA reduce production binary_connective -> NOTAND
-- On ITE_T reduce production binary_connective -> NOTAND
-- On ITE_F reduce production binary_connective -> NOTAND
-- On INTEGER reduce production binary_connective -> NOTAND
-- On HO_FORALL reduce production binary_connective -> NOTAND
-- On HO_EXISTS reduce production binary_connective -> NOTAND
-- On FORALL reduce production binary_connective -> NOTAND
-- On FALSE reduce production binary_connective -> NOTAND
-- On EXISTS reduce production binary_connective -> NOTAND
-- On DOLLAR_WORD reduce production binary_connective -> NOTAND
-- On DOLLAR_DOLLAR_WORD reduce production binary_connective -> NOTAND
-- On DISTINCT_OBJECT reduce production binary_connective -> NOTAND

State 116:
binary_connective -> LEFT_IMPLY . [ WILDCARD UPPER_WORD TRUE SINGLE_QUOTED REAL RATIONAL NOT LOWER_WORD LEFT_PAREN LAMBDA ITE_T ITE_F INTEGER HO_FORALL HO_EXISTS FORALL FALSE EXISTS DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT ]
-- On WILDCARD reduce production binary_connective -> LEFT_IMPLY
-- On UPPER_WORD reduce production binary_connective -> LEFT_IMPLY
-- On TRUE reduce production binary_connective -> LEFT_IMPLY
-- On SINGLE_QUOTED reduce production binary_connective -> LEFT_IMPLY
-- On REAL reduce production binary_connective -> LEFT_IMPLY
-- On RATIONAL reduce production binary_connective -> LEFT_IMPLY
-- On NOT reduce production binary_connective -> LEFT_IMPLY
-- On LOWER_WORD reduce production binary_connective -> LEFT_IMPLY
-- On LEFT_PAREN reduce production binary_connective -> LEFT_IMPLY
-- On LAMBDA reduce production binary_connective -> LEFT_IMPLY
-- On ITE_T reduce production binary_connective -> LEFT_IMPLY
-- On ITE_F reduce production binary_connective -> LEFT_IMPLY
-- On INTEGER reduce production binary_connective -> LEFT_IMPLY
-- On HO_FORALL reduce production binary_connective -> LEFT_IMPLY
-- On HO_EXISTS reduce production binary_connective -> LEFT_IMPLY
-- On FORALL reduce production binary_connective -> LEFT_IMPLY
-- On FALSE reduce production binary_connective -> LEFT_IMPLY
-- On EXISTS reduce production binary_connective -> LEFT_IMPLY
-- On DOLLAR_WORD reduce production binary_connective -> LEFT_IMPLY
-- On DOLLAR_DOLLAR_WORD reduce production binary_connective -> LEFT_IMPLY
-- On DISTINCT_OBJECT reduce production binary_connective -> LEFT_IMPLY

State 117:
binary_connective -> IMPLY . [ WILDCARD UPPER_WORD TRUE SINGLE_QUOTED REAL RATIONAL NOT LOWER_WORD LEFT_PAREN LAMBDA ITE_T ITE_F INTEGER HO_FORALL HO_EXISTS FORALL FALSE EXISTS DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT ]
-- On WILDCARD reduce production binary_connective -> IMPLY
-- On UPPER_WORD reduce production binary_connective -> IMPLY
-- On TRUE reduce production binary_connective -> IMPLY
-- On SINGLE_QUOTED reduce production binary_connective -> IMPLY
-- On REAL reduce production binary_connective -> IMPLY
-- On RATIONAL reduce production binary_connective -> IMPLY
-- On NOT reduce production binary_connective -> IMPLY
-- On LOWER_WORD reduce production binary_connective -> IMPLY
-- On LEFT_PAREN reduce production binary_connective -> IMPLY
-- On LAMBDA reduce production binary_connective -> IMPLY
-- On ITE_T reduce production binary_connective -> IMPLY
-- On ITE_F reduce production binary_connective -> IMPLY
-- On INTEGER reduce production binary_connective -> IMPLY
-- On HO_FORALL reduce production binary_connective -> IMPLY
-- On HO_EXISTS reduce production binary_connective -> IMPLY
-- On FORALL reduce production binary_connective -> IMPLY
-- On FALSE reduce production binary_connective -> IMPLY
-- On EXISTS reduce production binary_connective -> IMPLY
-- On DOLLAR_WORD reduce production binary_connective -> IMPLY
-- On DOLLAR_DOLLAR_WORD reduce production binary_connective -> IMPLY
-- On DISTINCT_OBJECT reduce production binary_connective -> IMPLY

State 118:
binary_connective -> EQUIV . [ WILDCARD UPPER_WORD TRUE SINGLE_QUOTED REAL RATIONAL NOT LOWER_WORD LEFT_PAREN LAMBDA ITE_T ITE_F INTEGER HO_FORALL HO_EXISTS FORALL FALSE EXISTS DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT ]
-- On WILDCARD reduce production binary_connective -> EQUIV
-- On UPPER_WORD reduce production binary_connective -> EQUIV
-- On TRUE reduce production binary_connective -> EQUIV
-- On SINGLE_QUOTED reduce production binary_connective -> EQUIV
-- On REAL reduce production binary_connective -> EQUIV
-- On RATIONAL reduce production binary_connective -> EQUIV
-- On NOT reduce production binary_connective -> EQUIV
-- On LOWER_WORD reduce production binary_connective -> EQUIV
-- On LEFT_PAREN reduce production binary_connective -> EQUIV
-- On LAMBDA reduce production binary_connective -> EQUIV
-- On ITE_T reduce production binary_connective -> EQUIV
-- On ITE_F reduce production binary_connective -> EQUIV
-- On INTEGER reduce production binary_connective -> EQUIV
-- On HO_FORALL reduce production binary_connective -> EQUIV
-- On HO_EXISTS reduce production binary_connective -> EQUIV
-- On FORALL reduce production binary_connective -> EQUIV
-- On FALSE reduce production binary_connective -> EQUIV
-- On EXISTS reduce production binary_connective -> EQUIV
-- On DOLLAR_WORD reduce production binary_connective -> EQUIV
-- On DOLLAR_DOLLAR_WORD reduce production binary_connective -> EQUIV
-- On DISTINCT_OBJECT reduce production binary_connective -> EQUIV

State 119:
binary_connective -> AND . [ WILDCARD UPPER_WORD TRUE SINGLE_QUOTED REAL RATIONAL NOT LOWER_WORD LEFT_PAREN LAMBDA ITE_T ITE_F INTEGER HO_FORALL HO_EXISTS FORALL FALSE EXISTS DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT ]
-- On WILDCARD reduce production binary_connective -> AND
-- On UPPER_WORD reduce production binary_connective -> AND
-- On TRUE reduce production binary_connective -> AND
-- On SINGLE_QUOTED reduce production binary_connective -> AND
-- On REAL reduce production binary_connective -> AND
-- On RATIONAL reduce production binary_connective -> AND
-- On NOT reduce production binary_connective -> AND
-- On LOWER_WORD reduce production binary_connective -> AND
-- On LEFT_PAREN reduce production binary_connective -> AND
-- On LAMBDA reduce production binary_connective -> AND
-- On ITE_T reduce production binary_connective -> AND
-- On ITE_F reduce production binary_connective -> AND
-- On INTEGER reduce production binary_connective -> AND
-- On HO_FORALL reduce production binary_connective -> AND
-- On HO_EXISTS reduce production binary_connective -> AND
-- On FORALL reduce production binary_connective -> AND
-- On FALSE reduce production binary_connective -> AND
-- On EXISTS reduce production binary_connective -> AND
-- On DOLLAR_WORD reduce production binary_connective -> AND
-- On DOLLAR_DOLLAR_WORD reduce production binary_connective -> AND
-- On DISTINCT_OBJECT reduce production binary_connective -> AND

State 120:
fof_logic_formula -> fof_logic_formula binary_connective . fof_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 16
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 121
-- On fof_unary_formula shift to state 67
-- On fof_quantified_formula shift to state 68
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 121:
fof_logic_formula -> fof_logic_formula binary_connective fof_unitary_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR reduce production fof_logic_formula -> fof_logic_formula binary_connective fof_unitary_formula
-- On VLINE reduce production fof_logic_formula -> fof_logic_formula binary_connective fof_unitary_formula
-- On RIGHT_PAREN reduce production fof_logic_formula -> fof_logic_formula binary_connective fof_unitary_formula
-- On RIGHT_BRACKET reduce production fof_logic_formula -> fof_logic_formula binary_connective fof_unitary_formula
-- On NOTVLINE reduce production fof_logic_formula -> fof_logic_formula binary_connective fof_unitary_formula
-- On NOTAND reduce production fof_logic_formula -> fof_logic_formula binary_connective fof_unitary_formula
-- On LEFT_IMPLY reduce production fof_logic_formula -> fof_logic_formula binary_connective fof_unitary_formula
-- On IMPLY reduce production fof_logic_formula -> fof_logic_formula binary_connective fof_unitary_formula
-- On EQUIV reduce production fof_logic_formula -> fof_logic_formula binary_connective fof_unitary_formula
-- On EOI reduce production fof_logic_formula -> fof_logic_formula binary_connective fof_unitary_formula
-- On COMMA reduce production fof_logic_formula -> fof_logic_formula binary_connective fof_unitary_formula
-- On AND reduce production fof_logic_formula -> fof_logic_formula binary_connective fof_unitary_formula

State 122:
loption(separated_nonempty_list(COMMA,fof_logic_formula)) -> separated_nonempty_list(COMMA,fof_logic_formula) . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production loption(separated_nonempty_list(COMMA,fof_logic_formula)) -> separated_nonempty_list(COMMA,fof_logic_formula)

State 123:
fof_tuple -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,fof_logic_formula)) . RIGHT_BRACKET [ RIGHT_PAREN GENTZEN_ARROW EOI COMMA ]
-- On RIGHT_BRACKET shift to state 124

State 124:
fof_tuple -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,fof_logic_formula)) RIGHT_BRACKET . [ RIGHT_PAREN GENTZEN_ARROW EOI COMMA ]
-- On RIGHT_PAREN reduce production fof_tuple -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,fof_logic_formula)) RIGHT_BRACKET
-- On GENTZEN_ARROW reduce production fof_tuple -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,fof_logic_formula)) RIGHT_BRACKET
-- On EOI reduce production fof_tuple -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,fof_logic_formula)) RIGHT_BRACKET
-- On COMMA reduce production fof_tuple -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,fof_logic_formula)) RIGHT_BRACKET

State 125:
fof_logic_formula -> fof_logic_formula . binary_connective fof_unitary_formula [ XOR VLINE RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
separated_nonempty_list(COMMA,fof_logic_formula) -> fof_logic_formula . [ RIGHT_BRACKET ]
separated_nonempty_list(COMMA,fof_logic_formula) -> fof_logic_formula . COMMA separated_nonempty_list(COMMA,fof_logic_formula) [ RIGHT_BRACKET ]
-- On XOR shift to state 111
-- On VLINE shift to state 112
-- On NOTVLINE shift to state 114
-- On NOTAND shift to state 115
-- On LEFT_IMPLY shift to state 116
-- On IMPLY shift to state 117
-- On EQUIV shift to state 118
-- On COMMA shift to state 126
-- On AND shift to state 119
-- On binary_connective shift to state 120
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,fof_logic_formula) -> fof_logic_formula

State 126:
separated_nonempty_list(COMMA,fof_logic_formula) -> fof_logic_formula COMMA . separated_nonempty_list(COMMA,fof_logic_formula) [ RIGHT_BRACKET ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 16
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On separated_nonempty_list(COMMA,fof_logic_formula) shift to state 127
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 109
-- On fof_unary_formula shift to state 67
-- On fof_quantified_formula shift to state 68
-- On fof_logic_formula shift to state 125
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 127:
separated_nonempty_list(COMMA,fof_logic_formula) -> fof_logic_formula COMMA separated_nonempty_list(COMMA,fof_logic_formula) . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,fof_logic_formula) -> fof_logic_formula COMMA separated_nonempty_list(COMMA,fof_logic_formula)

State 128:
fof_sequent -> fof_tuple . GENTZEN_ARROW fof_tuple [ RIGHT_PAREN EOI COMMA ]
-- On GENTZEN_ARROW shift to state 129

State 129:
fof_sequent -> fof_tuple GENTZEN_ARROW . fof_tuple [ RIGHT_PAREN EOI COMMA ]
-- On LEFT_BRACKET shift to state 15
-- On fof_tuple shift to state 130

State 130:
fof_sequent -> fof_tuple GENTZEN_ARROW fof_tuple . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production fof_sequent -> fof_tuple GENTZEN_ARROW fof_tuple
-- On EOI reduce production fof_sequent -> fof_tuple GENTZEN_ARROW fof_tuple
-- On COMMA reduce production fof_sequent -> fof_tuple GENTZEN_ARROW fof_tuple

State 131:
fof_sequent -> LEFT_PAREN fof_sequent . RIGHT_PAREN [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN shift to state 132

State 132:
fof_sequent -> LEFT_PAREN fof_sequent RIGHT_PAREN . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production fof_sequent -> LEFT_PAREN fof_sequent RIGHT_PAREN
-- On EOI reduce production fof_sequent -> LEFT_PAREN fof_sequent RIGHT_PAREN
-- On COMMA reduce production fof_sequent -> LEFT_PAREN fof_sequent RIGHT_PAREN

State 133:
fof_formula -> fof_sequent . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production fof_formula -> fof_sequent
-- On EOI reduce production fof_formula -> fof_sequent
-- On COMMA reduce production fof_formula -> fof_sequent

State 134:
fof_formula -> fof_logic_formula . [ RIGHT_PAREN EOI COMMA ]
fof_logic_formula -> fof_logic_formula . binary_connective fof_unitary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AND ]
-- On XOR shift to state 111
-- On VLINE shift to state 112
-- On NOTVLINE shift to state 114
-- On NOTAND shift to state 115
-- On LEFT_IMPLY shift to state 116
-- On IMPLY shift to state 117
-- On EQUIV shift to state 118
-- On AND shift to state 119
-- On binary_connective shift to state 120
-- On RIGHT_PAREN reduce production fof_formula -> fof_logic_formula
-- On EOI reduce production fof_formula -> fof_logic_formula
-- On COMMA reduce production fof_formula -> fof_logic_formula

State 135:
conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula . COMMA term COMMA term RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On COMMA shift to state 136

State 136:
conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA . term COMMA term RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 137
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 40
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_defined_word shift to state 51

State 137:
conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term . COMMA term RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On COMMA shift to state 138

State 138:
conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA . term RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 139
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 40
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_defined_word shift to state 51

State 139:
conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On RIGHT_PAREN shift to state 140

State 140:
conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN
-- On VLINE reduce production conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN
-- On RIGHT_PAREN reduce production conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN
-- On RIGHT_BRACKET reduce production conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN
-- On NOT_EQUAL reduce production conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN
-- On NOTVLINE reduce production conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN
-- On NOTAND reduce production conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN
-- On LEFT_IMPLY reduce production conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN
-- On IMPLY reduce production conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN
-- On EQUIV reduce production conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN
-- On EQUAL reduce production conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN
-- On EOI reduce production conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN
-- On COMMA reduce production conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN
-- On AND reduce production conditional_term(fof_formula,term) -> ITE_T LEFT_PAREN fof_formula COMMA term COMMA term RIGHT_PAREN

State 141:
answer_tuple -> LEFT_BRACKET separated_nonempty_list(COMMA,term) . RIGHT_BRACKET [ VLINE RIGHT_BRACKET ]
-- On RIGHT_BRACKET shift to state 142

State 142:
answer_tuple -> LEFT_BRACKET separated_nonempty_list(COMMA,term) RIGHT_BRACKET . [ VLINE RIGHT_BRACKET ]
-- On VLINE reduce production answer_tuple -> LEFT_BRACKET separated_nonempty_list(COMMA,term) RIGHT_BRACKET
-- On RIGHT_BRACKET reduce production answer_tuple -> LEFT_BRACKET separated_nonempty_list(COMMA,term) RIGHT_BRACKET

State 143:
answer_tuples -> LEFT_BRACKET separated_nonempty_list(VLINE,answer_tuple) . RIGHT_BRACKET [ EOI ]
-- On RIGHT_BRACKET shift to state 144

State 144:
answer_tuples -> LEFT_BRACKET separated_nonempty_list(VLINE,answer_tuple) RIGHT_BRACKET . [ EOI ]
-- On EOI reduce production answer_tuples -> LEFT_BRACKET separated_nonempty_list(VLINE,answer_tuple) RIGHT_BRACKET

State 145:
separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple . [ RIGHT_BRACKET ]
separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple . VLINE separated_nonempty_list(VLINE,answer_tuple) [ RIGHT_BRACKET ]
-- On VLINE shift to state 146
-- On RIGHT_BRACKET reduce production separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple

State 146:
separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple VLINE . separated_nonempty_list(VLINE,answer_tuple) [ RIGHT_BRACKET ]
-- On UNDERSCORE shift to state 2
-- On LEFT_BRACKET shift to state 3
-- On separated_nonempty_list(VLINE,answer_tuple) shift to state 147
-- On answer_tuple shift to state 145

State 147:
separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple VLINE separated_nonempty_list(VLINE,answer_tuple) . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple VLINE separated_nonempty_list(VLINE,answer_tuple)

State 148:
parse_answer_tuples' -> parse_answer_tuples . [ # ]
-- On # accept parse_answer_tuples

State 149:
parse_answer_tuples -> answer_tuples . EOI [ # ]
-- On EOI shift to state 150

State 150:
parse_answer_tuples -> answer_tuples EOI . [ # ]
-- On # reduce production parse_answer_tuples -> answer_tuples EOI

State 151:
parse_fo_form' -> . parse_fo_form [ # ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 14
-- On LEFT_BRACKET shift to state 15
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On parse_fo_form shift to state 152
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 109
-- On fof_unary_formula shift to state 67
-- On fof_tuple shift to state 128
-- On fof_sequent shift to state 133
-- On fof_quantified_formula shift to state 68
-- On fof_logic_formula shift to state 134
-- On fof_formula shift to state 153
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 152:
parse_fo_form' -> parse_fo_form . [ # ]
-- On # accept parse_fo_form

State 153:
parse_fo_form -> fof_formula . EOI [ # ]
-- On EOI shift to state 154

State 154:
parse_fo_form -> fof_formula EOI . [ # ]
-- On # reduce production parse_fo_form -> fof_formula EOI

State 155:
parse_ho_form' -> . parse_ho_form [ # ]
-- On error shift to state 156
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 170
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_formula shift to state 218
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On thf_apply_term shift to state 196
-- On raw_variable shift to state 185
-- On parse_ho_form shift to state 220
-- On atomic_word shift to state 186

State 156:
thf_formula -> error . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production thf_formula -> error
-- On VLINE reduce production thf_formula -> error
-- On RIGHT_PAREN reduce production thf_formula -> error
-- On NOT_EQUAL reduce production thf_formula -> error
-- On NOTVLINE reduce production thf_formula -> error
-- On NOTAND reduce production thf_formula -> error
-- On LEFT_IMPLY reduce production thf_formula -> error
-- On IMPLY reduce production thf_formula -> error
-- On EQUIV reduce production thf_formula -> error
-- On EQUAL reduce production thf_formula -> error
-- On EOI reduce production thf_formula -> error
-- On COMMA reduce production thf_formula -> error
-- On AND reduce production thf_formula -> error

State 157:
thf_const -> WILDCARD . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_const -> WILDCARD
-- On VLINE reduce production thf_const -> WILDCARD
-- On RIGHT_PAREN reduce production thf_const -> WILDCARD
-- On NOT_EQUAL reduce production thf_const -> WILDCARD
-- On NOTVLINE reduce production thf_const -> WILDCARD
-- On NOTAND reduce production thf_const -> WILDCARD
-- On LEFT_IMPLY reduce production thf_const -> WILDCARD
-- On IMPLY reduce production thf_const -> WILDCARD
-- On EQUIV reduce production thf_const -> WILDCARD
-- On EQUAL reduce production thf_const -> WILDCARD
-- On EOI reduce production thf_const -> WILDCARD
-- On COMMA reduce production thf_const -> WILDCARD
-- On AT reduce production thf_const -> WILDCARD
-- On AND reduce production thf_const -> WILDCARD

State 158:
thf_const -> TRUE . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_const -> TRUE
-- On VLINE reduce production thf_const -> TRUE
-- On RIGHT_PAREN reduce production thf_const -> TRUE
-- On NOT_EQUAL reduce production thf_const -> TRUE
-- On NOTVLINE reduce production thf_const -> TRUE
-- On NOTAND reduce production thf_const -> TRUE
-- On LEFT_IMPLY reduce production thf_const -> TRUE
-- On IMPLY reduce production thf_const -> TRUE
-- On EQUIV reduce production thf_const -> TRUE
-- On EQUAL reduce production thf_const -> TRUE
-- On EOI reduce production thf_const -> TRUE
-- On COMMA reduce production thf_const -> TRUE
-- On AT reduce production thf_const -> TRUE
-- On AND reduce production thf_const -> TRUE

State 159:
thf_atomic_term -> LEFT_PAREN . thf_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On error shift to state 156
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 170
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_formula shift to state 216
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On thf_apply_term shift to state 196
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 160:
thf_quantifier -> LAMBDA . [ LEFT_BRACKET ]
-- On LEFT_BRACKET reduce production thf_quantifier -> LAMBDA

State 161:
thf_ite -> ITE_T . [ LEFT_PAREN ]
-- On LEFT_PAREN reduce production thf_ite -> ITE_T

State 162:
thf_ite -> ITE_F . [ LEFT_PAREN ]
-- On LEFT_PAREN reduce production thf_ite -> ITE_F

State 163:
thf_const -> HO_FORALL . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_const -> HO_FORALL
-- On VLINE reduce production thf_const -> HO_FORALL
-- On RIGHT_PAREN reduce production thf_const -> HO_FORALL
-- On NOT_EQUAL reduce production thf_const -> HO_FORALL
-- On NOTVLINE reduce production thf_const -> HO_FORALL
-- On NOTAND reduce production thf_const -> HO_FORALL
-- On LEFT_IMPLY reduce production thf_const -> HO_FORALL
-- On IMPLY reduce production thf_const -> HO_FORALL
-- On EQUIV reduce production thf_const -> HO_FORALL
-- On EQUAL reduce production thf_const -> HO_FORALL
-- On EOI reduce production thf_const -> HO_FORALL
-- On COMMA reduce production thf_const -> HO_FORALL
-- On AT reduce production thf_const -> HO_FORALL
-- On AND reduce production thf_const -> HO_FORALL

State 164:
thf_const -> HO_EXISTS . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_const -> HO_EXISTS
-- On VLINE reduce production thf_const -> HO_EXISTS
-- On RIGHT_PAREN reduce production thf_const -> HO_EXISTS
-- On NOT_EQUAL reduce production thf_const -> HO_EXISTS
-- On NOTVLINE reduce production thf_const -> HO_EXISTS
-- On NOTAND reduce production thf_const -> HO_EXISTS
-- On LEFT_IMPLY reduce production thf_const -> HO_EXISTS
-- On IMPLY reduce production thf_const -> HO_EXISTS
-- On EQUIV reduce production thf_const -> HO_EXISTS
-- On EQUAL reduce production thf_const -> HO_EXISTS
-- On EOI reduce production thf_const -> HO_EXISTS
-- On COMMA reduce production thf_const -> HO_EXISTS
-- On AT reduce production thf_const -> HO_EXISTS
-- On AND reduce production thf_const -> HO_EXISTS

State 165:
thf_quantifier -> FORALL . [ LEFT_BRACKET ]
-- On LEFT_BRACKET reduce production thf_quantifier -> FORALL

State 166:
thf_const -> FALSE . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_const -> FALSE
-- On VLINE reduce production thf_const -> FALSE
-- On RIGHT_PAREN reduce production thf_const -> FALSE
-- On NOT_EQUAL reduce production thf_const -> FALSE
-- On NOTVLINE reduce production thf_const -> FALSE
-- On NOTAND reduce production thf_const -> FALSE
-- On LEFT_IMPLY reduce production thf_const -> FALSE
-- On IMPLY reduce production thf_const -> FALSE
-- On EQUIV reduce production thf_const -> FALSE
-- On EQUAL reduce production thf_const -> FALSE
-- On EOI reduce production thf_const -> FALSE
-- On COMMA reduce production thf_const -> FALSE
-- On AT reduce production thf_const -> FALSE
-- On AND reduce production thf_const -> FALSE

State 167:
thf_quantifier -> EXISTS . [ LEFT_BRACKET ]
-- On LEFT_BRACKET reduce production thf_quantifier -> EXISTS

State 168:
thf_unary_formula -> unary_connective . LEFT_PAREN thf_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On LEFT_PAREN shift to state 169

State 169:
thf_unary_formula -> unary_connective LEFT_PAREN . thf_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On error shift to state 156
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 170
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_formula shift to state 214
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On thf_apply_term shift to state 196
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 170:
thf_apply_term -> thf_unitary_formula . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_apply_term -> thf_unitary_formula
-- On VLINE reduce production thf_apply_term -> thf_unitary_formula
-- On RIGHT_PAREN reduce production thf_apply_term -> thf_unitary_formula
-- On NOT_EQUAL reduce production thf_apply_term -> thf_unitary_formula
-- On NOTVLINE reduce production thf_apply_term -> thf_unitary_formula
-- On NOTAND reduce production thf_apply_term -> thf_unitary_formula
-- On LEFT_IMPLY reduce production thf_apply_term -> thf_unitary_formula
-- On IMPLY reduce production thf_apply_term -> thf_unitary_formula
-- On EQUIV reduce production thf_apply_term -> thf_unitary_formula
-- On EQUAL reduce production thf_apply_term -> thf_unitary_formula
-- On EOI reduce production thf_apply_term -> thf_unitary_formula
-- On COMMA reduce production thf_apply_term -> thf_unitary_formula
-- On AT reduce production thf_apply_term -> thf_unitary_formula
-- On AND reduce production thf_apply_term -> thf_unitary_formula

State 171:
thf_unitary_formula -> thf_unary_formula . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_unitary_formula -> thf_unary_formula
-- On VLINE reduce production thf_unitary_formula -> thf_unary_formula
-- On RIGHT_PAREN reduce production thf_unitary_formula -> thf_unary_formula
-- On NOT_EQUAL reduce production thf_unitary_formula -> thf_unary_formula
-- On NOTVLINE reduce production thf_unitary_formula -> thf_unary_formula
-- On NOTAND reduce production thf_unitary_formula -> thf_unary_formula
-- On LEFT_IMPLY reduce production thf_unitary_formula -> thf_unary_formula
-- On IMPLY reduce production thf_unitary_formula -> thf_unary_formula
-- On EQUIV reduce production thf_unitary_formula -> thf_unary_formula
-- On EQUAL reduce production thf_unitary_formula -> thf_unary_formula
-- On EOI reduce production thf_unitary_formula -> thf_unary_formula
-- On COMMA reduce production thf_unitary_formula -> thf_unary_formula
-- On AT reduce production thf_unitary_formula -> thf_unary_formula
-- On AND reduce production thf_unitary_formula -> thf_unary_formula

State 172:
thf_unitary_formula -> thf_quantifier . LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On LEFT_BRACKET shift to state 173

State 173:
thf_unitary_formula -> thf_quantifier LEFT_BRACKET . separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On UPPER_WORD shift to state 5
-- On separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) shift to state 174
-- On raw_variable shift to state 199
-- On raw_typed_variable(thf_type) shift to state 211

State 174:
thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) . RIGHT_BRACKET COLUMN thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On RIGHT_BRACKET shift to state 175

State 175:
thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET . COLUMN thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On COLUMN shift to state 176

State 176:
thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN . thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 177
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 177:
thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula
-- On VLINE reduce production thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula
-- On RIGHT_PAREN reduce production thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula
-- On NOT_EQUAL reduce production thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula
-- On NOTVLINE reduce production thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula
-- On NOTAND reduce production thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula
-- On LEFT_IMPLY reduce production thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula
-- On IMPLY reduce production thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula
-- On EQUIV reduce production thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula
-- On EQUAL reduce production thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula
-- On EOI reduce production thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula
-- On COMMA reduce production thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula
-- On AT reduce production thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula
-- On AND reduce production thf_unitary_formula -> thf_quantifier LEFT_BRACKET separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) RIGHT_BRACKET COLUMN thf_unitary_formula

State 178:
thf_atomic_term -> thf_ite . LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On LEFT_PAREN shift to state 179

State 179:
thf_atomic_term -> thf_ite LEFT_PAREN . thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On error shift to state 156
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 170
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_formula shift to state 180
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On thf_apply_term shift to state 196
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 180:
thf_atomic_term -> thf_ite LEFT_PAREN thf_formula . COMMA thf_formula COMMA thf_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
thf_formula -> thf_formula . EQUAL thf_unitary_formula [ XOR VLINE NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
thf_formula -> thf_formula . NOT_EQUAL thf_unitary_formula [ XOR VLINE NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
thf_formula -> thf_formula . binary_connective thf_unitary_formula [ XOR VLINE NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
-- On XOR shift to state 111
-- On VLINE shift to state 112
-- On NOT_EQUAL shift to state 181
-- On NOTVLINE shift to state 114
-- On NOTAND shift to state 115
-- On LEFT_IMPLY shift to state 116
-- On IMPLY shift to state 117
-- On EQUIV shift to state 118
-- On EQUAL shift to state 187
-- On COMMA shift to state 189
-- On AND shift to state 119
-- On binary_connective shift to state 194

State 181:
thf_formula -> thf_formula NOT_EQUAL . thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 182
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 182:
thf_formula -> thf_formula NOT_EQUAL thf_unitary_formula . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production thf_formula -> thf_formula NOT_EQUAL thf_unitary_formula
-- On VLINE reduce production thf_formula -> thf_formula NOT_EQUAL thf_unitary_formula
-- On RIGHT_PAREN reduce production thf_formula -> thf_formula NOT_EQUAL thf_unitary_formula
-- On NOT_EQUAL reduce production thf_formula -> thf_formula NOT_EQUAL thf_unitary_formula
-- On NOTVLINE reduce production thf_formula -> thf_formula NOT_EQUAL thf_unitary_formula
-- On NOTAND reduce production thf_formula -> thf_formula NOT_EQUAL thf_unitary_formula
-- On LEFT_IMPLY reduce production thf_formula -> thf_formula NOT_EQUAL thf_unitary_formula
-- On IMPLY reduce production thf_formula -> thf_formula NOT_EQUAL thf_unitary_formula
-- On EQUIV reduce production thf_formula -> thf_formula NOT_EQUAL thf_unitary_formula
-- On EQUAL reduce production thf_formula -> thf_formula NOT_EQUAL thf_unitary_formula
-- On EOI reduce production thf_formula -> thf_formula NOT_EQUAL thf_unitary_formula
-- On COMMA reduce production thf_formula -> thf_formula NOT_EQUAL thf_unitary_formula
-- On AND reduce production thf_formula -> thf_formula NOT_EQUAL thf_unitary_formula

State 183:
thf_atomic_term -> thf_const . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_atomic_term -> thf_const
-- On VLINE reduce production thf_atomic_term -> thf_const
-- On RIGHT_PAREN reduce production thf_atomic_term -> thf_const
-- On NOT_EQUAL reduce production thf_atomic_term -> thf_const
-- On NOTVLINE reduce production thf_atomic_term -> thf_const
-- On NOTAND reduce production thf_atomic_term -> thf_const
-- On LEFT_IMPLY reduce production thf_atomic_term -> thf_const
-- On IMPLY reduce production thf_atomic_term -> thf_const
-- On EQUIV reduce production thf_atomic_term -> thf_const
-- On EQUAL reduce production thf_atomic_term -> thf_const
-- On EOI reduce production thf_atomic_term -> thf_const
-- On COMMA reduce production thf_atomic_term -> thf_const
-- On AT reduce production thf_atomic_term -> thf_const
-- On AND reduce production thf_atomic_term -> thf_const

State 184:
thf_unary_formula -> thf_atomic_term . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_unary_formula -> thf_atomic_term
-- On VLINE reduce production thf_unary_formula -> thf_atomic_term
-- On RIGHT_PAREN reduce production thf_unary_formula -> thf_atomic_term
-- On NOT_EQUAL reduce production thf_unary_formula -> thf_atomic_term
-- On NOTVLINE reduce production thf_unary_formula -> thf_atomic_term
-- On NOTAND reduce production thf_unary_formula -> thf_atomic_term
-- On LEFT_IMPLY reduce production thf_unary_formula -> thf_atomic_term
-- On IMPLY reduce production thf_unary_formula -> thf_atomic_term
-- On EQUIV reduce production thf_unary_formula -> thf_atomic_term
-- On EQUAL reduce production thf_unary_formula -> thf_atomic_term
-- On EOI reduce production thf_unary_formula -> thf_atomic_term
-- On COMMA reduce production thf_unary_formula -> thf_atomic_term
-- On AT reduce production thf_unary_formula -> thf_atomic_term
-- On AND reduce production thf_unary_formula -> thf_atomic_term

State 185:
thf_const -> raw_variable . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_const -> raw_variable
-- On VLINE reduce production thf_const -> raw_variable
-- On RIGHT_PAREN reduce production thf_const -> raw_variable
-- On NOT_EQUAL reduce production thf_const -> raw_variable
-- On NOTVLINE reduce production thf_const -> raw_variable
-- On NOTAND reduce production thf_const -> raw_variable
-- On LEFT_IMPLY reduce production thf_const -> raw_variable
-- On IMPLY reduce production thf_const -> raw_variable
-- On EQUIV reduce production thf_const -> raw_variable
-- On EQUAL reduce production thf_const -> raw_variable
-- On EOI reduce production thf_const -> raw_variable
-- On COMMA reduce production thf_const -> raw_variable
-- On AT reduce production thf_const -> raw_variable
-- On AND reduce production thf_const -> raw_variable

State 186:
thf_const -> atomic_word . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_const -> atomic_word
-- On VLINE reduce production thf_const -> atomic_word
-- On RIGHT_PAREN reduce production thf_const -> atomic_word
-- On NOT_EQUAL reduce production thf_const -> atomic_word
-- On NOTVLINE reduce production thf_const -> atomic_word
-- On NOTAND reduce production thf_const -> atomic_word
-- On LEFT_IMPLY reduce production thf_const -> atomic_word
-- On IMPLY reduce production thf_const -> atomic_word
-- On EQUIV reduce production thf_const -> atomic_word
-- On EQUAL reduce production thf_const -> atomic_word
-- On EOI reduce production thf_const -> atomic_word
-- On COMMA reduce production thf_const -> atomic_word
-- On AT reduce production thf_const -> atomic_word
-- On AND reduce production thf_const -> atomic_word

State 187:
thf_formula -> thf_formula EQUAL . thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 188
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 188:
thf_formula -> thf_formula EQUAL thf_unitary_formula . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production thf_formula -> thf_formula EQUAL thf_unitary_formula
-- On VLINE reduce production thf_formula -> thf_formula EQUAL thf_unitary_formula
-- On RIGHT_PAREN reduce production thf_formula -> thf_formula EQUAL thf_unitary_formula
-- On NOT_EQUAL reduce production thf_formula -> thf_formula EQUAL thf_unitary_formula
-- On NOTVLINE reduce production thf_formula -> thf_formula EQUAL thf_unitary_formula
-- On NOTAND reduce production thf_formula -> thf_formula EQUAL thf_unitary_formula
-- On LEFT_IMPLY reduce production thf_formula -> thf_formula EQUAL thf_unitary_formula
-- On IMPLY reduce production thf_formula -> thf_formula EQUAL thf_unitary_formula
-- On EQUIV reduce production thf_formula -> thf_formula EQUAL thf_unitary_formula
-- On EQUAL reduce production thf_formula -> thf_formula EQUAL thf_unitary_formula
-- On EOI reduce production thf_formula -> thf_formula EQUAL thf_unitary_formula
-- On COMMA reduce production thf_formula -> thf_formula EQUAL thf_unitary_formula
-- On AND reduce production thf_formula -> thf_formula EQUAL thf_unitary_formula

State 189:
thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA . thf_formula COMMA thf_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On error shift to state 156
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 170
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_formula shift to state 190
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On thf_apply_term shift to state 196
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 190:
thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula . COMMA thf_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
thf_formula -> thf_formula . EQUAL thf_unitary_formula [ XOR VLINE NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
thf_formula -> thf_formula . NOT_EQUAL thf_unitary_formula [ XOR VLINE NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
thf_formula -> thf_formula . binary_connective thf_unitary_formula [ XOR VLINE NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
-- On XOR shift to state 111
-- On VLINE shift to state 112
-- On NOT_EQUAL shift to state 181
-- On NOTVLINE shift to state 114
-- On NOTAND shift to state 115
-- On LEFT_IMPLY shift to state 116
-- On IMPLY shift to state 117
-- On EQUIV shift to state 118
-- On EQUAL shift to state 187
-- On COMMA shift to state 191
-- On AND shift to state 119
-- On binary_connective shift to state 194

State 191:
thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA . thf_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On error shift to state 156
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 170
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_formula shift to state 192
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On thf_apply_term shift to state 196
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 192:
thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
thf_formula -> thf_formula . EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL AND ]
thf_formula -> thf_formula . NOT_EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL AND ]
thf_formula -> thf_formula . binary_connective thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL AND ]
-- On XOR shift to state 111
-- On VLINE shift to state 112
-- On RIGHT_PAREN shift to state 193
-- On NOT_EQUAL shift to state 181
-- On NOTVLINE shift to state 114
-- On NOTAND shift to state 115
-- On LEFT_IMPLY shift to state 116
-- On IMPLY shift to state 117
-- On EQUIV shift to state 118
-- On EQUAL shift to state 187
-- On AND shift to state 119
-- On binary_connective shift to state 194

State 193:
thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN
-- On VLINE reduce production thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN
-- On NOT_EQUAL reduce production thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN
-- On NOTVLINE reduce production thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN
-- On NOTAND reduce production thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN
-- On IMPLY reduce production thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN
-- On EQUIV reduce production thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN
-- On EQUAL reduce production thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN
-- On EOI reduce production thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN
-- On COMMA reduce production thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN
-- On AT reduce production thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN
-- On AND reduce production thf_atomic_term -> thf_ite LEFT_PAREN thf_formula COMMA thf_formula COMMA thf_formula RIGHT_PAREN

State 194:
thf_formula -> thf_formula binary_connective . thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 195
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 195:
thf_formula -> thf_formula binary_connective thf_unitary_formula . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On XOR reduce production thf_formula -> thf_formula binary_connective thf_unitary_formula
-- On VLINE reduce production thf_formula -> thf_formula binary_connective thf_unitary_formula
-- On RIGHT_PAREN reduce production thf_formula -> thf_formula binary_connective thf_unitary_formula
-- On NOT_EQUAL reduce production thf_formula -> thf_formula binary_connective thf_unitary_formula
-- On NOTVLINE reduce production thf_formula -> thf_formula binary_connective thf_unitary_formula
-- On NOTAND reduce production thf_formula -> thf_formula binary_connective thf_unitary_formula
-- On LEFT_IMPLY reduce production thf_formula -> thf_formula binary_connective thf_unitary_formula
-- On IMPLY reduce production thf_formula -> thf_formula binary_connective thf_unitary_formula
-- On EQUIV reduce production thf_formula -> thf_formula binary_connective thf_unitary_formula
-- On EQUAL reduce production thf_formula -> thf_formula binary_connective thf_unitary_formula
-- On EOI reduce production thf_formula -> thf_formula binary_connective thf_unitary_formula
-- On COMMA reduce production thf_formula -> thf_formula binary_connective thf_unitary_formula
-- On AND reduce production thf_formula -> thf_formula binary_connective thf_unitary_formula

State 196:
thf_apply_term -> thf_apply_term . AT thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
thf_formula -> thf_apply_term . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AND ]
-- On AT shift to state 197
-- On XOR reduce production thf_formula -> thf_apply_term
-- On VLINE reduce production thf_formula -> thf_apply_term
-- On RIGHT_PAREN reduce production thf_formula -> thf_apply_term
-- On NOT_EQUAL reduce production thf_formula -> thf_apply_term
-- On NOTVLINE reduce production thf_formula -> thf_apply_term
-- On NOTAND reduce production thf_formula -> thf_apply_term
-- On LEFT_IMPLY reduce production thf_formula -> thf_apply_term
-- On IMPLY reduce production thf_formula -> thf_apply_term
-- On EQUIV reduce production thf_formula -> thf_apply_term
-- On EQUAL reduce production thf_formula -> thf_apply_term
-- On EOI reduce production thf_formula -> thf_apply_term
-- On COMMA reduce production thf_formula -> thf_apply_term
-- On AND reduce production thf_formula -> thf_apply_term

State 197:
thf_apply_term -> thf_apply_term AT . thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 198
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 198:
thf_apply_term -> thf_apply_term AT thf_unitary_formula . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_apply_term -> thf_apply_term AT thf_unitary_formula
-- On VLINE reduce production thf_apply_term -> thf_apply_term AT thf_unitary_formula
-- On RIGHT_PAREN reduce production thf_apply_term -> thf_apply_term AT thf_unitary_formula
-- On NOT_EQUAL reduce production thf_apply_term -> thf_apply_term AT thf_unitary_formula
-- On NOTVLINE reduce production thf_apply_term -> thf_apply_term AT thf_unitary_formula
-- On NOTAND reduce production thf_apply_term -> thf_apply_term AT thf_unitary_formula
-- On LEFT_IMPLY reduce production thf_apply_term -> thf_apply_term AT thf_unitary_formula
-- On IMPLY reduce production thf_apply_term -> thf_apply_term AT thf_unitary_formula
-- On EQUIV reduce production thf_apply_term -> thf_apply_term AT thf_unitary_formula
-- On EQUAL reduce production thf_apply_term -> thf_apply_term AT thf_unitary_formula
-- On EOI reduce production thf_apply_term -> thf_apply_term AT thf_unitary_formula
-- On COMMA reduce production thf_apply_term -> thf_apply_term AT thf_unitary_formula
-- On AT reduce production thf_apply_term -> thf_apply_term AT thf_unitary_formula
-- On AND reduce production thf_apply_term -> thf_apply_term AT thf_unitary_formula

State 199:
raw_typed_variable(thf_type) -> raw_variable . [ RIGHT_BRACKET COMMA ]
raw_typed_variable(thf_type) -> raw_variable . COLUMN thf_type [ RIGHT_BRACKET COMMA ]
-- On COLUMN shift to state 200
-- On RIGHT_BRACKET reduce production raw_typed_variable(thf_type) -> raw_variable
-- On COMMA reduce production raw_typed_variable(thf_type) -> raw_variable

State 200:
raw_typed_variable(thf_type) -> raw_variable COLUMN . thf_type [ RIGHT_BRACKET COMMA ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 201
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 202
-- On thf_unary_type shift to state 203
-- On thf_type shift to state 210
-- On thf_atom_type shift to state 206
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 207

State 201:
thf_unary_type -> LEFT_PAREN . thf_type RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 201
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 202
-- On thf_unary_type shift to state 203
-- On thf_type shift to state 208
-- On thf_atom_type shift to state 206
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 207

State 202:
thf_atom_type -> type_const . [ RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On RIGHT_PAREN reduce production thf_atom_type -> type_const
-- On RIGHT_BRACKET reduce production thf_atom_type -> type_const
-- On COMMA reduce production thf_atom_type -> type_const
-- On ARROW reduce production thf_atom_type -> type_const

State 203:
thf_type -> thf_unary_type . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
thf_type -> thf_unary_type . ARROW thf_type [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On ARROW shift to state 204
-- On RIGHT_PAREN reduce production thf_type -> thf_unary_type
-- On RIGHT_BRACKET reduce production thf_type -> thf_unary_type
-- On COMMA reduce production thf_type -> thf_unary_type

State 204:
thf_type -> thf_unary_type ARROW . thf_type [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 201
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 202
-- On thf_unary_type shift to state 203
-- On thf_type shift to state 205
-- On thf_atom_type shift to state 206
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 207

State 205:
thf_type -> thf_unary_type ARROW thf_type . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production thf_type -> thf_unary_type ARROW thf_type
-- On RIGHT_BRACKET reduce production thf_type -> thf_unary_type ARROW thf_type
-- On COMMA reduce production thf_type -> thf_unary_type ARROW thf_type

State 206:
thf_unary_type -> thf_atom_type . [ RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On RIGHT_PAREN reduce production thf_unary_type -> thf_atom_type
-- On RIGHT_BRACKET reduce production thf_unary_type -> thf_atom_type
-- On COMMA reduce production thf_unary_type -> thf_atom_type
-- On ARROW reduce production thf_unary_type -> thf_atom_type

State 207:
thf_atom_type -> raw_ty_variable . [ RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On RIGHT_PAREN reduce production thf_atom_type -> raw_ty_variable
-- On RIGHT_BRACKET reduce production thf_atom_type -> raw_ty_variable
-- On COMMA reduce production thf_atom_type -> raw_ty_variable
-- On ARROW reduce production thf_atom_type -> raw_ty_variable

State 208:
thf_unary_type -> LEFT_PAREN thf_type . RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On RIGHT_PAREN shift to state 209

State 209:
thf_unary_type -> LEFT_PAREN thf_type RIGHT_PAREN . [ RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On RIGHT_PAREN reduce production thf_unary_type -> LEFT_PAREN thf_type RIGHT_PAREN
-- On RIGHT_BRACKET reduce production thf_unary_type -> LEFT_PAREN thf_type RIGHT_PAREN
-- On COMMA reduce production thf_unary_type -> LEFT_PAREN thf_type RIGHT_PAREN
-- On ARROW reduce production thf_unary_type -> LEFT_PAREN thf_type RIGHT_PAREN

State 210:
raw_typed_variable(thf_type) -> raw_variable COLUMN thf_type . [ RIGHT_BRACKET COMMA ]
-- On RIGHT_BRACKET reduce production raw_typed_variable(thf_type) -> raw_variable COLUMN thf_type
-- On COMMA reduce production raw_typed_variable(thf_type) -> raw_variable COLUMN thf_type

State 211:
separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) -> raw_typed_variable(thf_type) . [ RIGHT_BRACKET ]
separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) -> raw_typed_variable(thf_type) . COMMA separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) [ RIGHT_BRACKET ]
-- On COMMA shift to state 212
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) -> raw_typed_variable(thf_type)

State 212:
separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) -> raw_typed_variable(thf_type) COMMA . separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) [ RIGHT_BRACKET ]
-- On UPPER_WORD shift to state 5
-- On separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) shift to state 213
-- On raw_variable shift to state 199
-- On raw_typed_variable(thf_type) shift to state 211

State 213:
separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) -> raw_typed_variable(thf_type) COMMA separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,raw_typed_variable(thf_type)) -> raw_typed_variable(thf_type) COMMA separated_nonempty_list(COMMA,raw_typed_variable(thf_type))

State 214:
thf_formula -> thf_formula . EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL AND ]
thf_formula -> thf_formula . NOT_EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL AND ]
thf_formula -> thf_formula . binary_connective thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL AND ]
thf_unary_formula -> unary_connective LEFT_PAREN thf_formula . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR shift to state 111
-- On VLINE shift to state 112
-- On RIGHT_PAREN shift to state 215
-- On NOT_EQUAL shift to state 181
-- On NOTVLINE shift to state 114
-- On NOTAND shift to state 115
-- On LEFT_IMPLY shift to state 116
-- On IMPLY shift to state 117
-- On EQUIV shift to state 118
-- On EQUAL shift to state 187
-- On AND shift to state 119
-- On binary_connective shift to state 194

State 215:
thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN
-- On VLINE reduce production thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN
-- On NOT_EQUAL reduce production thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN
-- On NOTVLINE reduce production thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN
-- On NOTAND reduce production thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN
-- On IMPLY reduce production thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN
-- On EQUIV reduce production thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN
-- On EQUAL reduce production thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN
-- On EOI reduce production thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN
-- On COMMA reduce production thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN
-- On AT reduce production thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN
-- On AND reduce production thf_unary_formula -> unary_connective LEFT_PAREN thf_formula RIGHT_PAREN

State 216:
thf_atomic_term -> LEFT_PAREN thf_formula . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
thf_formula -> thf_formula . EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL AND ]
thf_formula -> thf_formula . NOT_EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL AND ]
thf_formula -> thf_formula . binary_connective thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL AND ]
-- On XOR shift to state 111
-- On VLINE shift to state 112
-- On RIGHT_PAREN shift to state 217
-- On NOT_EQUAL shift to state 181
-- On NOTVLINE shift to state 114
-- On NOTAND shift to state 115
-- On LEFT_IMPLY shift to state 116
-- On IMPLY shift to state 117
-- On EQUIV shift to state 118
-- On EQUAL shift to state 187
-- On AND shift to state 119
-- On binary_connective shift to state 194

State 217:
thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT AND ]
-- On XOR reduce production thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN
-- On VLINE reduce production thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN
-- On NOT_EQUAL reduce production thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN
-- On NOTVLINE reduce production thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN
-- On NOTAND reduce production thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN
-- On IMPLY reduce production thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN
-- On EQUIV reduce production thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN
-- On EQUAL reduce production thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN
-- On EOI reduce production thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN
-- On COMMA reduce production thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN
-- On AT reduce production thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN
-- On AND reduce production thf_atomic_term -> LEFT_PAREN thf_formula RIGHT_PAREN

State 218:
parse_ho_form -> thf_formula . EOI [ # ]
thf_formula -> thf_formula . EQUAL thf_unitary_formula [ XOR VLINE NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI AND ]
thf_formula -> thf_formula . NOT_EQUAL thf_unitary_formula [ XOR VLINE NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI AND ]
thf_formula -> thf_formula . binary_connective thf_unitary_formula [ XOR VLINE NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI AND ]
-- On XOR shift to state 111
-- On VLINE shift to state 112
-- On NOT_EQUAL shift to state 181
-- On NOTVLINE shift to state 114
-- On NOTAND shift to state 115
-- On LEFT_IMPLY shift to state 116
-- On IMPLY shift to state 117
-- On EQUIV shift to state 118
-- On EQUAL shift to state 187
-- On EOI shift to state 219
-- On AND shift to state 119
-- On binary_connective shift to state 194

State 219:
parse_ho_form -> thf_formula EOI . [ # ]
-- On # reduce production parse_ho_form -> thf_formula EOI

State 220:
parse_ho_form' -> parse_ho_form . [ # ]
-- On # accept parse_ho_form

State 221:
parse_statement' -> . parse_statement [ # ]
-- On error shift to state 222
-- On THF shift to state 223
-- On TFF shift to state 303
-- On INCLUDE shift to state 342
-- On FOF shift to state 356
-- On CNF shift to state 372
-- On toplevel_form(role_as_goal) shift to state 399
-- On toplevel_form(role_as_axiom) shift to state 400
-- On statement shift to state 401
-- On parse_statement shift to state 403

State 222:
statement -> error . [ EOI ]
-- On EOI reduce production statement -> error

State 223:
statement -> THF . LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT [ EOI ]
statement -> THF . LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_axiom) -> THF . LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> THF . LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On LEFT_PAREN shift to state 224

State 224:
statement -> THF LEFT_PAREN . name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT [ EOI ]
statement -> THF LEFT_PAREN . name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_axiom) -> THF LEFT_PAREN . name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> THF LEFT_PAREN . name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 225
-- On name shift to state 226
-- On atomic_word shift to state 302

State 225:
name -> INTEGER . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production name -> INTEGER
-- On COMMA reduce production name -> INTEGER

State 226:
statement -> THF LEFT_PAREN name . COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT [ EOI ]
statement -> THF LEFT_PAREN name . COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name . COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> THF LEFT_PAREN name . COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 227

State 227:
statement -> THF LEFT_PAREN name COMMA . role_as_def COMMA thf_def annotations RIGHT_PAREN DOT [ EOI ]
statement -> THF LEFT_PAREN name COMMA . role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA . role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA . role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On ROLE_TYPE shift to state 228
-- On ROLE_DEFINITION shift to state 229
-- On ROLE_CONJECTURE shift to state 230
-- On ROLE_AXIOM shift to state 231
-- On role_as_goal shift to state 232
-- On role_as_def shift to state 259
-- On role_as_decl shift to state 271
-- On role_as_axiom shift to state 296

State 228:
role_as_decl -> ROLE_TYPE . [ COMMA ]
-- On COMMA reduce production role_as_decl -> ROLE_TYPE

State 229:
role_as_def -> ROLE_DEFINITION . [ COMMA ]
-- On COMMA reduce production role_as_def -> ROLE_DEFINITION

State 230:
role_as_goal -> ROLE_CONJECTURE . [ COMMA ]
-- On COMMA reduce production role_as_goal -> ROLE_CONJECTURE

State 231:
role_as_axiom -> ROLE_AXIOM . [ COMMA ]
-- On COMMA reduce production role_as_axiom -> ROLE_AXIOM

State 232:
toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal . COMMA thf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 233

State 233:
toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA . thf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On error shift to state 156
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 170
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_formula shift to state 234
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On thf_apply_term shift to state 196
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 234:
thf_formula -> thf_formula . EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
thf_formula -> thf_formula . NOT_EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
thf_formula -> thf_formula . binary_connective thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula . annotations RIGHT_PAREN DOT [ EOI ]
-- On XOR shift to state 111
-- On VLINE shift to state 112
-- On NOT_EQUAL shift to state 181
-- On NOTVLINE shift to state 114
-- On NOTAND shift to state 115
-- On LEFT_IMPLY shift to state 116
-- On IMPLY shift to state 117
-- On EQUIV shift to state 118
-- On EQUAL shift to state 187
-- On COMMA shift to state 235
-- On AND shift to state 119
-- On binary_connective shift to state 194
-- On annotations shift to state 256
-- On RIGHT_PAREN reduce production annotations -> 

State 235:
annotations -> COMMA . loption(separated_nonempty_list(COMMA,general_term)) [ RIGHT_PAREN ]
-- On UPPER_WORD shift to state 236
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 237
-- On INTEGER shift to state 238
-- On DISTINCT_OBJECT shift to state 239
-- On separated_nonempty_list(COMMA,general_term) shift to state 240
-- On loption(separated_nonempty_list(COMMA,general_term)) shift to state 255
-- On general_term shift to state 243
-- On general_list shift to state 246
-- On general_function shift to state 247
-- On general_data shift to state 248
-- On atomic_word shift to state 251
-- On RIGHT_PAREN reduce production loption(separated_nonempty_list(COMMA,general_term)) -> 

State 236:
general_data -> UPPER_WORD . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On RIGHT_PAREN reduce production general_data -> UPPER_WORD
-- On RIGHT_BRACKET reduce production general_data -> UPPER_WORD
-- On COMMA reduce production general_data -> UPPER_WORD
-- On COLUMN reduce production general_data -> UPPER_WORD

State 237:
general_list -> LEFT_BRACKET . loption(separated_nonempty_list(COMMA,general_term)) RIGHT_BRACKET [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On UPPER_WORD shift to state 236
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 237
-- On INTEGER shift to state 238
-- On DISTINCT_OBJECT shift to state 239
-- On separated_nonempty_list(COMMA,general_term) shift to state 240
-- On loption(separated_nonempty_list(COMMA,general_term)) shift to state 241
-- On general_term shift to state 243
-- On general_list shift to state 246
-- On general_function shift to state 247
-- On general_data shift to state 248
-- On atomic_word shift to state 251
-- On RIGHT_BRACKET reduce production loption(separated_nonempty_list(COMMA,general_term)) -> 

State 238:
general_data -> INTEGER . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On RIGHT_PAREN reduce production general_data -> INTEGER
-- On RIGHT_BRACKET reduce production general_data -> INTEGER
-- On COMMA reduce production general_data -> INTEGER
-- On COLUMN reduce production general_data -> INTEGER

State 239:
general_data -> DISTINCT_OBJECT . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On RIGHT_PAREN reduce production general_data -> DISTINCT_OBJECT
-- On RIGHT_BRACKET reduce production general_data -> DISTINCT_OBJECT
-- On COMMA reduce production general_data -> DISTINCT_OBJECT
-- On COLUMN reduce production general_data -> DISTINCT_OBJECT

State 240:
loption(separated_nonempty_list(COMMA,general_term)) -> separated_nonempty_list(COMMA,general_term) . [ RIGHT_PAREN RIGHT_BRACKET ]
-- On RIGHT_PAREN reduce production loption(separated_nonempty_list(COMMA,general_term)) -> separated_nonempty_list(COMMA,general_term)
-- On RIGHT_BRACKET reduce production loption(separated_nonempty_list(COMMA,general_term)) -> separated_nonempty_list(COMMA,general_term)

State 241:
general_list -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term)) . RIGHT_BRACKET [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_BRACKET shift to state 242

State 242:
general_list -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term)) RIGHT_BRACKET . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production general_list -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term)) RIGHT_BRACKET
-- On RIGHT_BRACKET reduce production general_list -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term)) RIGHT_BRACKET
-- On COMMA reduce production general_list -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term)) RIGHT_BRACKET

State 243:
separated_nonempty_list(COMMA,general_term) -> general_term . [ RIGHT_PAREN RIGHT_BRACKET ]
separated_nonempty_list(COMMA,general_term) -> general_term . COMMA separated_nonempty_list(COMMA,general_term) [ RIGHT_PAREN RIGHT_BRACKET ]
-- On COMMA shift to state 244
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,general_term) -> general_term
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,general_term) -> general_term

State 244:
separated_nonempty_list(COMMA,general_term) -> general_term COMMA . separated_nonempty_list(COMMA,general_term) [ RIGHT_PAREN RIGHT_BRACKET ]
-- On UPPER_WORD shift to state 236
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 237
-- On INTEGER shift to state 238
-- On DISTINCT_OBJECT shift to state 239
-- On separated_nonempty_list(COMMA,general_term) shift to state 245
-- On general_term shift to state 243
-- On general_list shift to state 246
-- On general_function shift to state 247
-- On general_data shift to state 248
-- On atomic_word shift to state 251

State 245:
separated_nonempty_list(COMMA,general_term) -> general_term COMMA separated_nonempty_list(COMMA,general_term) . [ RIGHT_PAREN RIGHT_BRACKET ]
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,general_term) -> general_term COMMA separated_nonempty_list(COMMA,general_term)
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,general_term) -> general_term COMMA separated_nonempty_list(COMMA,general_term)

State 246:
general_term -> general_list . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production general_term -> general_list
-- On RIGHT_BRACKET reduce production general_term -> general_list
-- On COMMA reduce production general_term -> general_list

State 247:
general_data -> general_function . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On RIGHT_PAREN reduce production general_data -> general_function
-- On RIGHT_BRACKET reduce production general_data -> general_function
-- On COMMA reduce production general_data -> general_function
-- On COLUMN reduce production general_data -> general_function

State 248:
general_term -> general_data . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
general_term -> general_data . COLUMN general_term [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On COLUMN shift to state 249
-- On RIGHT_PAREN reduce production general_term -> general_data
-- On RIGHT_BRACKET reduce production general_term -> general_data
-- On COMMA reduce production general_term -> general_data

State 249:
general_term -> general_data COLUMN . general_term [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On UPPER_WORD shift to state 236
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 237
-- On INTEGER shift to state 238
-- On DISTINCT_OBJECT shift to state 239
-- On general_term shift to state 250
-- On general_list shift to state 246
-- On general_function shift to state 247
-- On general_data shift to state 248
-- On atomic_word shift to state 251

State 250:
general_term -> general_data COLUMN general_term . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production general_term -> general_data COLUMN general_term
-- On RIGHT_BRACKET reduce production general_term -> general_data COLUMN general_term
-- On COMMA reduce production general_term -> general_data COLUMN general_term

State 251:
general_data -> atomic_word . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
general_function -> atomic_word . LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On LEFT_PAREN shift to state 252
-- On RIGHT_PAREN reduce production general_data -> atomic_word
-- On RIGHT_BRACKET reduce production general_data -> atomic_word
-- On COMMA reduce production general_data -> atomic_word
-- On COLUMN reduce production general_data -> atomic_word

State 252:
general_function -> atomic_word LEFT_PAREN . separated_nonempty_list(COMMA,general_term) RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On UPPER_WORD shift to state 236
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 237
-- On INTEGER shift to state 238
-- On DISTINCT_OBJECT shift to state 239
-- On separated_nonempty_list(COMMA,general_term) shift to state 253
-- On general_term shift to state 243
-- On general_list shift to state 246
-- On general_function shift to state 247
-- On general_data shift to state 248
-- On atomic_word shift to state 251

State 253:
general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) . RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On RIGHT_PAREN shift to state 254

State 254:
general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On RIGHT_PAREN reduce production general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN
-- On RIGHT_BRACKET reduce production general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN
-- On COMMA reduce production general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN
-- On COLUMN reduce production general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN

State 255:
annotations -> COMMA loption(separated_nonempty_list(COMMA,general_term)) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production annotations -> COMMA loption(separated_nonempty_list(COMMA,general_term))

State 256:
toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 257

State 257:
toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 258

State 258:
toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT

State 259:
statement -> THF LEFT_PAREN name COMMA role_as_def . COMMA thf_def annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 260

State 260:
statement -> THF LEFT_PAREN name COMMA role_as_def COMMA . thf_def annotations RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 261
-- On thf_def shift to state 267
-- On atomic_word shift to state 264

State 261:
thf_def -> LEFT_PAREN . thf_def RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 261
-- On thf_def shift to state 262
-- On atomic_word shift to state 264

State 262:
thf_def -> LEFT_PAREN thf_def . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 263

State 263:
thf_def -> LEFT_PAREN thf_def RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production thf_def -> LEFT_PAREN thf_def RIGHT_PAREN
-- On COMMA reduce production thf_def -> LEFT_PAREN thf_def RIGHT_PAREN

State 264:
thf_def -> atomic_word . EQUAL thf_formula [ RIGHT_PAREN COMMA ]
-- On EQUAL shift to state 265

State 265:
thf_def -> atomic_word EQUAL . thf_formula [ RIGHT_PAREN COMMA ]
-- On error shift to state 156
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 170
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_formula shift to state 266
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On thf_apply_term shift to state 196
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 266:
thf_def -> atomic_word EQUAL thf_formula . [ RIGHT_PAREN COMMA ]
thf_formula -> thf_formula . EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
thf_formula -> thf_formula . NOT_EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
thf_formula -> thf_formula . binary_connective thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
-- On XOR shift to state 111
-- On VLINE shift to state 112
-- On NOT_EQUAL shift to state 181
-- On NOTVLINE shift to state 114
-- On NOTAND shift to state 115
-- On LEFT_IMPLY shift to state 116
-- On IMPLY shift to state 117
-- On EQUIV shift to state 118
-- On EQUAL shift to state 187
-- On AND shift to state 119
-- On binary_connective shift to state 194
-- On RIGHT_PAREN reduce production thf_def -> atomic_word EQUAL thf_formula
-- On COMMA reduce production thf_def -> atomic_word EQUAL thf_formula

State 267:
statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 235
-- On annotations shift to state 268
-- On RIGHT_PAREN reduce production annotations -> 

State 268:
statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 269

State 269:
statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 270

State 270:
statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT

State 271:
statement -> THF LEFT_PAREN name COMMA role_as_decl . COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 272

State 272:
statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA . type_decl(thf_type) annotations RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 273
-- On DOLLAR_WORD shift to state 274
-- On type_decl(thf_type) shift to state 292
-- On atomic_word shift to state 289

State 273:
type_decl(thf_type) -> LEFT_PAREN . type_decl(thf_type) RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 273
-- On DOLLAR_WORD shift to state 274
-- On type_decl(thf_type) shift to state 287
-- On atomic_word shift to state 289

State 274:
type_decl(thf_type) -> DOLLAR_WORD . COLUMN quantified_type(thf_type) [ RIGHT_PAREN COMMA ]
-- On COLUMN shift to state 275

State 275:
type_decl(thf_type) -> DOLLAR_WORD COLUMN . quantified_type(thf_type) [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 201
-- On FORALL_TY shift to state 276
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 202
-- On thf_unary_type shift to state 203
-- On thf_type shift to state 281
-- On thf_atom_type shift to state 206
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 207
-- On quantified_type(thf_type) shift to state 286

State 276:
quantified_type(thf_type) -> FORALL_TY . LEFT_BRACKET separated_nonempty_list(COMMA,raw_ty_variable) RIGHT_BRACKET COLUMN quantified_type(thf_type) [ RIGHT_PAREN COMMA ]
-- On LEFT_BRACKET shift to state 277

State 277:
quantified_type(thf_type) -> FORALL_TY LEFT_BRACKET . separated_nonempty_list(COMMA,raw_ty_variable) RIGHT_BRACKET COLUMN quantified_type(thf_type) [ RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 5
-- On separated_nonempty_list(COMMA,raw_ty_variable) shift to state 278
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 283

State 278:
quantified_type(thf_type) -> FORALL_TY LEFT_BRACKET separated_nonempty_list(COMMA,raw_ty_variable) . RIGHT_BRACKET COLUMN quantified_type(thf_type) [ RIGHT_PAREN COMMA ]
-- On RIGHT_BRACKET shift to state 279

State 279:
quantified_type(thf_type) -> FORALL_TY LEFT_BRACKET separated_nonempty_list(COMMA,raw_ty_variable) RIGHT_BRACKET . COLUMN quantified_type(thf_type) [ RIGHT_PAREN COMMA ]
-- On COLUMN shift to state 280

State 280:
quantified_type(thf_type) -> FORALL_TY LEFT_BRACKET separated_nonempty_list(COMMA,raw_ty_variable) RIGHT_BRACKET COLUMN . quantified_type(thf_type) [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 201
-- On FORALL_TY shift to state 276
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 202
-- On thf_unary_type shift to state 203
-- On thf_type shift to state 281
-- On thf_atom_type shift to state 206
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 207
-- On quantified_type(thf_type) shift to state 282

State 281:
quantified_type(thf_type) -> thf_type . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production quantified_type(thf_type) -> thf_type
-- On COMMA reduce production quantified_type(thf_type) -> thf_type

State 282:
quantified_type(thf_type) -> FORALL_TY LEFT_BRACKET separated_nonempty_list(COMMA,raw_ty_variable) RIGHT_BRACKET COLUMN quantified_type(thf_type) . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production quantified_type(thf_type) -> FORALL_TY LEFT_BRACKET separated_nonempty_list(COMMA,raw_ty_variable) RIGHT_BRACKET COLUMN quantified_type(thf_type)
-- On COMMA reduce production quantified_type(thf_type) -> FORALL_TY LEFT_BRACKET separated_nonempty_list(COMMA,raw_ty_variable) RIGHT_BRACKET COLUMN quantified_type(thf_type)

State 283:
separated_nonempty_list(COMMA,raw_ty_variable) -> raw_ty_variable . [ RIGHT_BRACKET ]
separated_nonempty_list(COMMA,raw_ty_variable) -> raw_ty_variable . COMMA separated_nonempty_list(COMMA,raw_ty_variable) [ RIGHT_BRACKET ]
-- On COMMA shift to state 284
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,raw_ty_variable) -> raw_ty_variable

State 284:
separated_nonempty_list(COMMA,raw_ty_variable) -> raw_ty_variable COMMA . separated_nonempty_list(COMMA,raw_ty_variable) [ RIGHT_BRACKET ]
-- On UPPER_WORD shift to state 5
-- On separated_nonempty_list(COMMA,raw_ty_variable) shift to state 285
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 283

State 285:
separated_nonempty_list(COMMA,raw_ty_variable) -> raw_ty_variable COMMA separated_nonempty_list(COMMA,raw_ty_variable) . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,raw_ty_variable) -> raw_ty_variable COMMA separated_nonempty_list(COMMA,raw_ty_variable)

State 286:
type_decl(thf_type) -> DOLLAR_WORD COLUMN quantified_type(thf_type) . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production type_decl(thf_type) -> DOLLAR_WORD COLUMN quantified_type(thf_type)
-- On COMMA reduce production type_decl(thf_type) -> DOLLAR_WORD COLUMN quantified_type(thf_type)

State 287:
type_decl(thf_type) -> LEFT_PAREN type_decl(thf_type) . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 288

State 288:
type_decl(thf_type) -> LEFT_PAREN type_decl(thf_type) RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production type_decl(thf_type) -> LEFT_PAREN type_decl(thf_type) RIGHT_PAREN
-- On COMMA reduce production type_decl(thf_type) -> LEFT_PAREN type_decl(thf_type) RIGHT_PAREN

State 289:
type_decl(thf_type) -> atomic_word . COLUMN quantified_type(thf_type) [ RIGHT_PAREN COMMA ]
-- On COLUMN shift to state 290

State 290:
type_decl(thf_type) -> atomic_word COLUMN . quantified_type(thf_type) [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 201
-- On FORALL_TY shift to state 276
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 202
-- On thf_unary_type shift to state 203
-- On thf_type shift to state 281
-- On thf_atom_type shift to state 206
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 207
-- On quantified_type(thf_type) shift to state 291

State 291:
type_decl(thf_type) -> atomic_word COLUMN quantified_type(thf_type) . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production type_decl(thf_type) -> atomic_word COLUMN quantified_type(thf_type)
-- On COMMA reduce production type_decl(thf_type) -> atomic_word COLUMN quantified_type(thf_type)

State 292:
statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 235
-- On annotations shift to state 293
-- On RIGHT_PAREN reduce production annotations -> 

State 293:
statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 294

State 294:
statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 295

State 295:
statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT

State 296:
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom . COMMA thf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 297

State 297:
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA . thf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On error shift to state 156
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 170
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_formula shift to state 298
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On thf_apply_term shift to state 196
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 298:
thf_formula -> thf_formula . EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
thf_formula -> thf_formula . NOT_EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
thf_formula -> thf_formula . binary_connective thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula . annotations RIGHT_PAREN DOT [ EOI ]
-- On XOR shift to state 111
-- On VLINE shift to state 112
-- On NOT_EQUAL shift to state 181
-- On NOTVLINE shift to state 114
-- On NOTAND shift to state 115
-- On LEFT_IMPLY shift to state 116
-- On IMPLY shift to state 117
-- On EQUIV shift to state 118
-- On EQUAL shift to state 187
-- On COMMA shift to state 235
-- On AND shift to state 119
-- On binary_connective shift to state 194
-- On annotations shift to state 299
-- On RIGHT_PAREN reduce production annotations -> 

State 299:
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 300

State 300:
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 301

State 301:
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT

State 302:
name -> atomic_word . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production name -> atomic_word
-- On COMMA reduce production name -> atomic_word

State 303:
statement -> TFF . LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_axiom) -> TFF . LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> TFF . LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On LEFT_PAREN shift to state 304

State 304:
statement -> TFF LEFT_PAREN . name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN . name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> TFF LEFT_PAREN . name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 225
-- On name shift to state 305
-- On atomic_word shift to state 302

State 305:
statement -> TFF LEFT_PAREN name . COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name . COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name . COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 306

State 306:
statement -> TFF LEFT_PAREN name COMMA . role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA . role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA . role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On ROLE_TYPE shift to state 228
-- On ROLE_CONJECTURE shift to state 230
-- On ROLE_AXIOM shift to state 231
-- On role_as_goal shift to state 307
-- On role_as_decl shift to state 314
-- On role_as_axiom shift to state 336

State 307:
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal . COMMA tff_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 308

State 308:
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA . tff_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 14
-- On LEFT_BRACKET shift to state 15
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On tff_formula shift to state 309
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 109
-- On fof_unary_formula shift to state 67
-- On fof_tuple shift to state 128
-- On fof_sequent shift to state 133
-- On fof_quantified_formula shift to state 68
-- On fof_logic_formula shift to state 134
-- On fof_formula shift to state 313
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 309:
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 235
-- On annotations shift to state 310
-- On RIGHT_PAREN reduce production annotations -> 

State 310:
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 311

State 311:
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 312

State 312:
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT

State 313:
tff_formula -> fof_formula . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_formula -> fof_formula
-- On COMMA reduce production tff_formula -> fof_formula

State 314:
statement -> TFF LEFT_PAREN name COMMA role_as_decl . COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 315

State 315:
statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA . type_decl(tff_type) annotations RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 316
-- On DOLLAR_WORD shift to state 317
-- On type_decl(tff_type) shift to state 332
-- On atomic_word shift to state 329

State 316:
type_decl(tff_type) -> LEFT_PAREN . type_decl(tff_type) RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 316
-- On DOLLAR_WORD shift to state 317
-- On type_decl(tff_type) shift to state 327
-- On atomic_word shift to state 329

State 317:
type_decl(tff_type) -> DOLLAR_WORD . COLUMN quantified_type(tff_type) [ RIGHT_PAREN COMMA ]
-- On COLUMN shift to state 318

State 318:
type_decl(tff_type) -> DOLLAR_WORD COLUMN . quantified_type(tff_type) [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 77
-- On FORALL_TY shift to state 319
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 79
-- On tff_unary_type shift to state 81
-- On tff_type shift to state 324
-- On tff_atom_type shift to state 84
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 88
-- On quantified_type(tff_type) shift to state 326

State 319:
quantified_type(tff_type) -> FORALL_TY . LEFT_BRACKET separated_nonempty_list(COMMA,raw_ty_variable) RIGHT_BRACKET COLUMN quantified_type(tff_type) [ RIGHT_PAREN COMMA ]
-- On LEFT_BRACKET shift to state 320

State 320:
quantified_type(tff_type) -> FORALL_TY LEFT_BRACKET . separated_nonempty_list(COMMA,raw_ty_variable) RIGHT_BRACKET COLUMN quantified_type(tff_type) [ RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 5
-- On separated_nonempty_list(COMMA,raw_ty_variable) shift to state 321
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 283

State 321:
quantified_type(tff_type) -> FORALL_TY LEFT_BRACKET separated_nonempty_list(COMMA,raw_ty_variable) . RIGHT_BRACKET COLUMN quantified_type(tff_type) [ RIGHT_PAREN COMMA ]
-- On RIGHT_BRACKET shift to state 322

State 322:
quantified_type(tff_type) -> FORALL_TY LEFT_BRACKET separated_nonempty_list(COMMA,raw_ty_variable) RIGHT_BRACKET . COLUMN quantified_type(tff_type) [ RIGHT_PAREN COMMA ]
-- On COLUMN shift to state 323

State 323:
quantified_type(tff_type) -> FORALL_TY LEFT_BRACKET separated_nonempty_list(COMMA,raw_ty_variable) RIGHT_BRACKET COLUMN . quantified_type(tff_type) [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 77
-- On FORALL_TY shift to state 319
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 79
-- On tff_unary_type shift to state 81
-- On tff_type shift to state 324
-- On tff_atom_type shift to state 84
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 88
-- On quantified_type(tff_type) shift to state 325

State 324:
quantified_type(tff_type) -> tff_type . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production quantified_type(tff_type) -> tff_type
-- On COMMA reduce production quantified_type(tff_type) -> tff_type

State 325:
quantified_type(tff_type) -> FORALL_TY LEFT_BRACKET separated_nonempty_list(COMMA,raw_ty_variable) RIGHT_BRACKET COLUMN quantified_type(tff_type) . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production quantified_type(tff_type) -> FORALL_TY LEFT_BRACKET separated_nonempty_list(COMMA,raw_ty_variable) RIGHT_BRACKET COLUMN quantified_type(tff_type)
-- On COMMA reduce production quantified_type(tff_type) -> FORALL_TY LEFT_BRACKET separated_nonempty_list(COMMA,raw_ty_variable) RIGHT_BRACKET COLUMN quantified_type(tff_type)

State 326:
type_decl(tff_type) -> DOLLAR_WORD COLUMN quantified_type(tff_type) . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production type_decl(tff_type) -> DOLLAR_WORD COLUMN quantified_type(tff_type)
-- On COMMA reduce production type_decl(tff_type) -> DOLLAR_WORD COLUMN quantified_type(tff_type)

State 327:
type_decl(tff_type) -> LEFT_PAREN type_decl(tff_type) . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 328

State 328:
type_decl(tff_type) -> LEFT_PAREN type_decl(tff_type) RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production type_decl(tff_type) -> LEFT_PAREN type_decl(tff_type) RIGHT_PAREN
-- On COMMA reduce production type_decl(tff_type) -> LEFT_PAREN type_decl(tff_type) RIGHT_PAREN

State 329:
type_decl(tff_type) -> atomic_word . COLUMN quantified_type(tff_type) [ RIGHT_PAREN COMMA ]
-- On COLUMN shift to state 330

State 330:
type_decl(tff_type) -> atomic_word COLUMN . quantified_type(tff_type) [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 72
-- On UPPER_WORD shift to state 5
-- On TY_TYPE shift to state 73
-- On TY_PROP shift to state 74
-- On LOWER_WORD shift to state 75
-- On LEFT_PAREN shift to state 77
-- On FORALL_TY shift to state 319
-- On DOLLAR_WORD shift to state 78
-- On type_const shift to state 79
-- On tff_unary_type shift to state 81
-- On tff_type shift to state 324
-- On tff_atom_type shift to state 84
-- On raw_variable shift to state 85
-- On raw_ty_variable shift to state 88
-- On quantified_type(tff_type) shift to state 331

State 331:
type_decl(tff_type) -> atomic_word COLUMN quantified_type(tff_type) . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production type_decl(tff_type) -> atomic_word COLUMN quantified_type(tff_type)
-- On COMMA reduce production type_decl(tff_type) -> atomic_word COLUMN quantified_type(tff_type)

State 332:
statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 235
-- On annotations shift to state 333
-- On RIGHT_PAREN reduce production annotations -> 

State 333:
statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 334

State 334:
statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 335

State 335:
statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT

State 336:
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom . COMMA tff_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 337

State 337:
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA . tff_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 14
-- On LEFT_BRACKET shift to state 15
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On tff_formula shift to state 338
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 109
-- On fof_unary_formula shift to state 67
-- On fof_tuple shift to state 128
-- On fof_sequent shift to state 133
-- On fof_quantified_formula shift to state 68
-- On fof_logic_formula shift to state 134
-- On fof_formula shift to state 313
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 338:
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 235
-- On annotations shift to state 339
-- On RIGHT_PAREN reduce production annotations -> 

State 339:
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 340

State 340:
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 341

State 341:
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT

State 342:
statement -> INCLUDE . LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT [ EOI ]
statement -> INCLUDE . LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT [ EOI ]
-- On LEFT_PAREN shift to state 343

State 343:
statement -> INCLUDE LEFT_PAREN . SINGLE_QUOTED RIGHT_PAREN DOT [ EOI ]
statement -> INCLUDE LEFT_PAREN . SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 344

State 344:
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED . RIGHT_PAREN DOT [ EOI ]
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED . COMMA name_list RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 345
-- On COMMA shift to state 347

State 345:
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 346

State 346:
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT

State 347:
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA . name_list RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 225
-- On separated_nonempty_list(COMMA,name) shift to state 348
-- On name_list shift to state 349
-- On name shift to state 352
-- On loption(separated_nonempty_list(COMMA,name)) shift to state 355
-- On atomic_word shift to state 302
-- On RIGHT_PAREN reduce production loption(separated_nonempty_list(COMMA,name)) -> 

State 348:
loption(separated_nonempty_list(COMMA,name)) -> separated_nonempty_list(COMMA,name) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production loption(separated_nonempty_list(COMMA,name)) -> separated_nonempty_list(COMMA,name)

State 349:
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 350

State 350:
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 351

State 351:
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT

State 352:
separated_nonempty_list(COMMA,name) -> name . [ RIGHT_PAREN ]
separated_nonempty_list(COMMA,name) -> name . COMMA separated_nonempty_list(COMMA,name) [ RIGHT_PAREN ]
-- On COMMA shift to state 353
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,name) -> name

State 353:
separated_nonempty_list(COMMA,name) -> name COMMA . separated_nonempty_list(COMMA,name) [ RIGHT_PAREN ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 225
-- On separated_nonempty_list(COMMA,name) shift to state 354
-- On name shift to state 352
-- On atomic_word shift to state 302

State 354:
separated_nonempty_list(COMMA,name) -> name COMMA separated_nonempty_list(COMMA,name) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,name) -> name COMMA separated_nonempty_list(COMMA,name)

State 355:
name_list -> loption(separated_nonempty_list(COMMA,name)) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production name_list -> loption(separated_nonempty_list(COMMA,name))

State 356:
toplevel_form(role_as_axiom) -> FOF . LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> FOF . LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On LEFT_PAREN shift to state 357

State 357:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN . name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> FOF LEFT_PAREN . name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 225
-- On name shift to state 358
-- On atomic_word shift to state 302

State 358:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name . COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name . COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 359

State 359:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA . role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA . role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On ROLE_CONJECTURE shift to state 230
-- On ROLE_AXIOM shift to state 231
-- On role_as_goal shift to state 360
-- On role_as_axiom shift to state 366

State 360:
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal . COMMA fof_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 361

State 361:
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA . fof_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 14
-- On LEFT_BRACKET shift to state 15
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 109
-- On fof_unary_formula shift to state 67
-- On fof_tuple shift to state 128
-- On fof_sequent shift to state 133
-- On fof_quantified_formula shift to state 68
-- On fof_logic_formula shift to state 134
-- On fof_formula shift to state 362
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 362:
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 235
-- On annotations shift to state 363
-- On RIGHT_PAREN reduce production annotations -> 

State 363:
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 364

State 364:
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 365

State 365:
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT

State 366:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom . COMMA fof_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 367

State 367:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA . fof_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 14
-- On LEFT_BRACKET shift to state 15
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 109
-- On fof_unary_formula shift to state 67
-- On fof_tuple shift to state 128
-- On fof_sequent shift to state 133
-- On fof_quantified_formula shift to state 68
-- On fof_logic_formula shift to state 134
-- On fof_formula shift to state 368
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 368:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 235
-- On annotations shift to state 369
-- On RIGHT_PAREN reduce production annotations -> 

State 369:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 370

State 370:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 371

State 371:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT

State 372:
toplevel_form(role_as_axiom) -> CNF . LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> CNF . LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On LEFT_PAREN shift to state 373

State 373:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN . name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> CNF LEFT_PAREN . name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 225
-- On name shift to state 374
-- On atomic_word shift to state 302

State 374:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name . COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name . COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 375

State 375:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA . role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA . role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On ROLE_CONJECTURE shift to state 230
-- On ROLE_AXIOM shift to state 231
-- On role_as_goal shift to state 376
-- On role_as_axiom shift to state 393

State 376:
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal . COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 377

State 377:
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA . cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 378
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 380
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FALSE shift to state 19
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On separated_nonempty_list(VLINE,literal) shift to state 381
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On literal shift to state 382
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On disjunction shift to state 388
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On cnf_formula shift to state 389
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 385
-- On atomic_defined_word shift to state 51

State 378:
literal -> NOT . atomic_formula [ VLINE RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FALSE shift to state 19
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 379
-- On atomic_defined_word shift to state 51

State 379:
literal -> NOT atomic_formula . [ VLINE RIGHT_PAREN COMMA ]
-- On VLINE reduce production literal -> NOT atomic_formula
-- On RIGHT_PAREN reduce production literal -> NOT atomic_formula
-- On COMMA reduce production literal -> NOT atomic_formula

State 380:
cnf_formula -> LEFT_PAREN . disjunction RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 378
-- On LOWER_WORD shift to state 9
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FALSE shift to state 19
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On separated_nonempty_list(VLINE,literal) shift to state 381
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On literal shift to state 382
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On disjunction shift to state 386
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 385
-- On atomic_defined_word shift to state 51

State 381:
disjunction -> separated_nonempty_list(VLINE,literal) . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production disjunction -> separated_nonempty_list(VLINE,literal)
-- On COMMA reduce production disjunction -> separated_nonempty_list(VLINE,literal)

State 382:
separated_nonempty_list(VLINE,literal) -> literal . [ RIGHT_PAREN COMMA ]
separated_nonempty_list(VLINE,literal) -> literal . VLINE separated_nonempty_list(VLINE,literal) [ RIGHT_PAREN COMMA ]
-- On VLINE shift to state 383
-- On RIGHT_PAREN reduce production separated_nonempty_list(VLINE,literal) -> literal
-- On COMMA reduce production separated_nonempty_list(VLINE,literal) -> literal

State 383:
separated_nonempty_list(VLINE,literal) -> literal VLINE . separated_nonempty_list(VLINE,literal) [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 378
-- On LOWER_WORD shift to state 9
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FALSE shift to state 19
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On separated_nonempty_list(VLINE,literal) shift to state 384
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On literal shift to state 382
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 385
-- On atomic_defined_word shift to state 51

State 384:
separated_nonempty_list(VLINE,literal) -> literal VLINE separated_nonempty_list(VLINE,literal) . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production separated_nonempty_list(VLINE,literal) -> literal VLINE separated_nonempty_list(VLINE,literal)
-- On COMMA reduce production separated_nonempty_list(VLINE,literal) -> literal VLINE separated_nonempty_list(VLINE,literal)

State 385:
literal -> atomic_formula . [ VLINE RIGHT_PAREN COMMA ]
-- On VLINE reduce production literal -> atomic_formula
-- On RIGHT_PAREN reduce production literal -> atomic_formula
-- On COMMA reduce production literal -> atomic_formula

State 386:
cnf_formula -> LEFT_PAREN disjunction . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 387

State 387:
cnf_formula -> LEFT_PAREN disjunction RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production cnf_formula -> LEFT_PAREN disjunction RIGHT_PAREN
-- On COMMA reduce production cnf_formula -> LEFT_PAREN disjunction RIGHT_PAREN

State 388:
cnf_formula -> disjunction . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production cnf_formula -> disjunction
-- On COMMA reduce production cnf_formula -> disjunction

State 389:
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 235
-- On annotations shift to state 390
-- On RIGHT_PAREN reduce production annotations -> 

State 390:
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 391

State 391:
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 392

State 392:
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT

State 393:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom . COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 394

State 394:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA . cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 378
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 380
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FALSE shift to state 19
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On separated_nonempty_list(VLINE,literal) shift to state 381
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On literal shift to state 382
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On disjunction shift to state 388
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On cnf_formula shift to state 395
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 385
-- On atomic_defined_word shift to state 51

State 395:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 235
-- On annotations shift to state 396
-- On RIGHT_PAREN reduce production annotations -> 

State 396:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 397

State 397:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 398

State 398:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT

State 399:
statement -> toplevel_form(role_as_goal) . [ EOI ]
-- On EOI reduce production statement -> toplevel_form(role_as_goal)

State 400:
statement -> toplevel_form(role_as_axiom) . [ EOI ]
-- On EOI reduce production statement -> toplevel_form(role_as_axiom)

State 401:
parse_statement -> statement . EOI [ # ]
-- On EOI shift to state 402

State 402:
parse_statement -> statement EOI . [ # ]
-- On # reduce production parse_statement -> statement EOI

State 403:
parse_statement' -> parse_statement . [ # ]
-- On # accept parse_statement

State 404:
parse_statement_list' -> . parse_statement_list [ # ]
-- On error shift to state 405
-- On THF shift to state 406
-- On TFF shift to state 434
-- On INCLUDE shift to state 456
-- On FOF shift to state 465
-- On CNF shift to state 481
-- On toplevel_form(role_as_goal) shift to state 497
-- On toplevel_form(role_as_axiom) shift to state 498
-- On statement shift to state 499
-- On parse_statement_list shift to state 501
-- On list(statement) shift to state 502
-- On EOI reduce production list(statement) -> 

State 405:
statement -> error . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production statement -> error
-- On THF reduce production statement -> error
-- On TFF reduce production statement -> error
-- On INCLUDE reduce production statement -> error
-- On FOF reduce production statement -> error
-- On EOI reduce production statement -> error
-- On CNF reduce production statement -> error

State 406:
statement -> THF . LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
statement -> THF . LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_axiom) -> THF . LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> THF . LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On LEFT_PAREN shift to state 407

State 407:
statement -> THF LEFT_PAREN . name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
statement -> THF LEFT_PAREN . name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_axiom) -> THF LEFT_PAREN . name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> THF LEFT_PAREN . name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 225
-- On name shift to state 408
-- On atomic_word shift to state 302

State 408:
statement -> THF LEFT_PAREN name . COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
statement -> THF LEFT_PAREN name . COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name . COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> THF LEFT_PAREN name . COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 409

State 409:
statement -> THF LEFT_PAREN name COMMA . role_as_def COMMA thf_def annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
statement -> THF LEFT_PAREN name COMMA . role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA . role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA . role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On ROLE_TYPE shift to state 228
-- On ROLE_DEFINITION shift to state 229
-- On ROLE_CONJECTURE shift to state 230
-- On ROLE_AXIOM shift to state 231
-- On role_as_goal shift to state 410
-- On role_as_def shift to state 416
-- On role_as_decl shift to state 422
-- On role_as_axiom shift to state 428

State 410:
toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal . COMMA thf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 411

State 411:
toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA . thf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error shift to state 156
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 170
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_formula shift to state 412
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On thf_apply_term shift to state 196
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 412:
thf_formula -> thf_formula . EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
thf_formula -> thf_formula . NOT_EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
thf_formula -> thf_formula . binary_connective thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On XOR shift to state 111
-- On VLINE shift to state 112
-- On NOT_EQUAL shift to state 181
-- On NOTVLINE shift to state 114
-- On NOTAND shift to state 115
-- On LEFT_IMPLY shift to state 116
-- On IMPLY shift to state 117
-- On EQUIV shift to state 118
-- On EQUAL shift to state 187
-- On COMMA shift to state 235
-- On AND shift to state 119
-- On binary_connective shift to state 194
-- On annotations shift to state 413
-- On RIGHT_PAREN reduce production annotations -> 

State 413:
toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 414

State 414:
toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 415

State 415:
toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT
-- On THF reduce production toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT
-- On TFF reduce production toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT
-- On FOF reduce production toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT
-- On EOI reduce production toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT
-- On CNF reduce production toplevel_form(role_as_goal) -> THF LEFT_PAREN name COMMA role_as_goal COMMA thf_formula annotations RIGHT_PAREN DOT

State 416:
statement -> THF LEFT_PAREN name COMMA role_as_def . COMMA thf_def annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 417

State 417:
statement -> THF LEFT_PAREN name COMMA role_as_def COMMA . thf_def annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 261
-- On thf_def shift to state 418
-- On atomic_word shift to state 264

State 418:
statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 235
-- On annotations shift to state 419
-- On RIGHT_PAREN reduce production annotations -> 

State 419:
statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 420

State 420:
statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 421

State 421:
statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT
-- On THF reduce production statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT
-- On TFF reduce production statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT
-- On FOF reduce production statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT
-- On EOI reduce production statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT
-- On CNF reduce production statement -> THF LEFT_PAREN name COMMA role_as_def COMMA thf_def annotations RIGHT_PAREN DOT

State 422:
statement -> THF LEFT_PAREN name COMMA role_as_decl . COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 423

State 423:
statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA . type_decl(thf_type) annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 273
-- On DOLLAR_WORD shift to state 274
-- On type_decl(thf_type) shift to state 424
-- On atomic_word shift to state 289

State 424:
statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 235
-- On annotations shift to state 425
-- On RIGHT_PAREN reduce production annotations -> 

State 425:
statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 426

State 426:
statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 427

State 427:
statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT
-- On THF reduce production statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT
-- On TFF reduce production statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT
-- On FOF reduce production statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT
-- On EOI reduce production statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT
-- On CNF reduce production statement -> THF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(thf_type) annotations RIGHT_PAREN DOT

State 428:
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom . COMMA thf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 429

State 429:
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA . thf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error shift to state 156
-- On WILDCARD shift to state 157
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 158
-- On SINGLE_QUOTED shift to state 6
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 159
-- On LAMBDA shift to state 160
-- On ITE_T shift to state 161
-- On ITE_F shift to state 162
-- On HO_FORALL shift to state 163
-- On HO_EXISTS shift to state 164
-- On FORALL shift to state 165
-- On FALSE shift to state 166
-- On EXISTS shift to state 167
-- On unary_connective shift to state 168
-- On thf_unitary_formula shift to state 170
-- On thf_unary_formula shift to state 171
-- On thf_quantifier shift to state 172
-- On thf_ite shift to state 178
-- On thf_formula shift to state 430
-- On thf_const shift to state 183
-- On thf_atomic_term shift to state 184
-- On thf_apply_term shift to state 196
-- On raw_variable shift to state 185
-- On atomic_word shift to state 186

State 430:
thf_formula -> thf_formula . EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
thf_formula -> thf_formula . NOT_EQUAL thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
thf_formula -> thf_formula . binary_connective thf_unitary_formula [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On XOR shift to state 111
-- On VLINE shift to state 112
-- On NOT_EQUAL shift to state 181
-- On NOTVLINE shift to state 114
-- On NOTAND shift to state 115
-- On LEFT_IMPLY shift to state 116
-- On IMPLY shift to state 117
-- On EQUIV shift to state 118
-- On EQUAL shift to state 187
-- On COMMA shift to state 235
-- On AND shift to state 119
-- On binary_connective shift to state 194
-- On annotations shift to state 431
-- On RIGHT_PAREN reduce production annotations -> 

State 431:
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 432

State 432:
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 433

State 433:
toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT
-- On THF reduce production toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT
-- On TFF reduce production toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT
-- On FOF reduce production toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT
-- On EOI reduce production toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT
-- On CNF reduce production toplevel_form(role_as_axiom) -> THF LEFT_PAREN name COMMA role_as_axiom COMMA thf_formula annotations RIGHT_PAREN DOT

State 434:
statement -> TFF . LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_axiom) -> TFF . LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> TFF . LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On LEFT_PAREN shift to state 435

State 435:
statement -> TFF LEFT_PAREN . name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN . name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> TFF LEFT_PAREN . name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 225
-- On name shift to state 436
-- On atomic_word shift to state 302

State 436:
statement -> TFF LEFT_PAREN name . COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name . COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name . COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 437

State 437:
statement -> TFF LEFT_PAREN name COMMA . role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA . role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA . role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On ROLE_TYPE shift to state 228
-- On ROLE_CONJECTURE shift to state 230
-- On ROLE_AXIOM shift to state 231
-- On role_as_goal shift to state 438
-- On role_as_decl shift to state 444
-- On role_as_axiom shift to state 450

State 438:
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal . COMMA tff_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 439

State 439:
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA . tff_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 14
-- On LEFT_BRACKET shift to state 15
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On tff_formula shift to state 440
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 109
-- On fof_unary_formula shift to state 67
-- On fof_tuple shift to state 128
-- On fof_sequent shift to state 133
-- On fof_quantified_formula shift to state 68
-- On fof_logic_formula shift to state 134
-- On fof_formula shift to state 313
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 440:
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 235
-- On annotations shift to state 441
-- On RIGHT_PAREN reduce production annotations -> 

State 441:
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 442

State 442:
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 443

State 443:
toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT
-- On THF reduce production toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT
-- On TFF reduce production toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT
-- On FOF reduce production toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT
-- On EOI reduce production toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT
-- On CNF reduce production toplevel_form(role_as_goal) -> TFF LEFT_PAREN name COMMA role_as_goal COMMA tff_formula annotations RIGHT_PAREN DOT

State 444:
statement -> TFF LEFT_PAREN name COMMA role_as_decl . COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 445

State 445:
statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA . type_decl(tff_type) annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 316
-- On DOLLAR_WORD shift to state 317
-- On type_decl(tff_type) shift to state 446
-- On atomic_word shift to state 329

State 446:
statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 235
-- On annotations shift to state 447
-- On RIGHT_PAREN reduce production annotations -> 

State 447:
statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 448

State 448:
statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 449

State 449:
statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT
-- On THF reduce production statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT
-- On TFF reduce production statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT
-- On FOF reduce production statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT
-- On EOI reduce production statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT
-- On CNF reduce production statement -> TFF LEFT_PAREN name COMMA role_as_decl COMMA type_decl(tff_type) annotations RIGHT_PAREN DOT

State 450:
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom . COMMA tff_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 451

State 451:
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA . tff_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 14
-- On LEFT_BRACKET shift to state 15
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On tff_formula shift to state 452
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 109
-- On fof_unary_formula shift to state 67
-- On fof_tuple shift to state 128
-- On fof_sequent shift to state 133
-- On fof_quantified_formula shift to state 68
-- On fof_logic_formula shift to state 134
-- On fof_formula shift to state 313
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 452:
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 235
-- On annotations shift to state 453
-- On RIGHT_PAREN reduce production annotations -> 

State 453:
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 454

State 454:
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 455

State 455:
toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT
-- On THF reduce production toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT
-- On TFF reduce production toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT
-- On FOF reduce production toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT
-- On EOI reduce production toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT
-- On CNF reduce production toplevel_form(role_as_axiom) -> TFF LEFT_PAREN name COMMA role_as_axiom COMMA tff_formula annotations RIGHT_PAREN DOT

State 456:
statement -> INCLUDE . LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
statement -> INCLUDE . LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On LEFT_PAREN shift to state 457

State 457:
statement -> INCLUDE LEFT_PAREN . SINGLE_QUOTED RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
statement -> INCLUDE LEFT_PAREN . SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 458

State 458:
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED . COMMA name_list RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 459
-- On COMMA shift to state 461

State 459:
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 460

State 460:
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT
-- On THF reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT
-- On TFF reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT
-- On INCLUDE reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT
-- On FOF reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT
-- On EOI reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT
-- On CNF reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT

State 461:
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA . name_list RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 225
-- On separated_nonempty_list(COMMA,name) shift to state 348
-- On name_list shift to state 462
-- On name shift to state 352
-- On loption(separated_nonempty_list(COMMA,name)) shift to state 355
-- On atomic_word shift to state 302
-- On RIGHT_PAREN reduce production loption(separated_nonempty_list(COMMA,name)) -> 

State 462:
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 463

State 463:
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 464

State 464:
statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT
-- On THF reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT
-- On TFF reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT
-- On INCLUDE reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT
-- On FOF reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT
-- On EOI reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT
-- On CNF reduce production statement -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT

State 465:
toplevel_form(role_as_axiom) -> FOF . LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> FOF . LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On LEFT_PAREN shift to state 466

State 466:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN . name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> FOF LEFT_PAREN . name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 225
-- On name shift to state 467
-- On atomic_word shift to state 302

State 467:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name . COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name . COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 468

State 468:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA . role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA . role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On ROLE_CONJECTURE shift to state 230
-- On ROLE_AXIOM shift to state 231
-- On role_as_goal shift to state 469
-- On role_as_axiom shift to state 475

State 469:
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal . COMMA fof_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 470

State 470:
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA . fof_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 14
-- On LEFT_BRACKET shift to state 15
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 109
-- On fof_unary_formula shift to state 67
-- On fof_tuple shift to state 128
-- On fof_sequent shift to state 133
-- On fof_quantified_formula shift to state 68
-- On fof_logic_formula shift to state 134
-- On fof_formula shift to state 471
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 471:
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 235
-- On annotations shift to state 472
-- On RIGHT_PAREN reduce production annotations -> 

State 472:
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 473

State 473:
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 474

State 474:
toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT
-- On THF reduce production toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT
-- On TFF reduce production toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT
-- On FOF reduce production toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT
-- On EOI reduce production toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT
-- On CNF reduce production toplevel_form(role_as_goal) -> FOF LEFT_PAREN name COMMA role_as_goal COMMA fof_formula annotations RIGHT_PAREN DOT

State 475:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom . COMMA fof_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 476

State 476:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA . fof_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 13
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 14
-- On LEFT_BRACKET shift to state 15
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FORALL shift to state 18
-- On FALSE shift to state 19
-- On EXISTS shift to state 20
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On unary_connective shift to state 24
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On fol_quantifier shift to state 61
-- On fof_unitary_formula shift to state 109
-- On fof_unary_formula shift to state 67
-- On fof_tuple shift to state 128
-- On fof_sequent shift to state 133
-- On fof_quantified_formula shift to state 68
-- On fof_logic_formula shift to state 134
-- On fof_formula shift to state 477
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 69
-- On atomic_defined_word shift to state 51

State 477:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 235
-- On annotations shift to state 478
-- On RIGHT_PAREN reduce production annotations -> 

State 478:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 479

State 479:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 480

State 480:
toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT
-- On THF reduce production toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT
-- On TFF reduce production toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT
-- On FOF reduce production toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT
-- On EOI reduce production toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT
-- On CNF reduce production toplevel_form(role_as_axiom) -> FOF LEFT_PAREN name COMMA role_as_axiom COMMA fof_formula annotations RIGHT_PAREN DOT

State 481:
toplevel_form(role_as_axiom) -> CNF . LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> CNF . LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On LEFT_PAREN shift to state 482

State 482:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN . name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> CNF LEFT_PAREN . name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 225
-- On name shift to state 483
-- On atomic_word shift to state 302

State 483:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name . COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name . COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 484

State 484:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA . role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA . role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On ROLE_CONJECTURE shift to state 230
-- On ROLE_AXIOM shift to state 231
-- On role_as_goal shift to state 485
-- On role_as_axiom shift to state 491

State 485:
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal . COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 486

State 486:
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA . cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 378
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 380
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FALSE shift to state 19
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On separated_nonempty_list(VLINE,literal) shift to state 381
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On literal shift to state 382
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On disjunction shift to state 388
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On cnf_formula shift to state 487
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 385
-- On atomic_defined_word shift to state 51

State 487:
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 235
-- On annotations shift to state 488
-- On RIGHT_PAREN reduce production annotations -> 

State 488:
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 489

State 489:
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 490

State 490:
toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On THF reduce production toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On TFF reduce production toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On FOF reduce production toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On EOI reduce production toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On CNF reduce production toplevel_form(role_as_goal) -> CNF LEFT_PAREN name COMMA role_as_goal COMMA cnf_formula annotations RIGHT_PAREN DOT

State 491:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom . COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 492

State 492:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA . cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 12
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 378
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 380
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On FALSE shift to state 19
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 25
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On separated_nonempty_list(VLINE,literal) shift to state 381
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On literal shift to state 382
-- On functor_ shift to state 37
-- On function_term shift to state 60
-- On disjunction shift to state 388
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On cnf_formula shift to state 493
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_formula shift to state 385
-- On atomic_defined_word shift to state 51

State 493:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 235
-- On annotations shift to state 494
-- On RIGHT_PAREN reduce production annotations -> 

State 494:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 495

State 495:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 496

State 496:
toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On THF reduce production toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On TFF reduce production toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On FOF reduce production toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On EOI reduce production toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On CNF reduce production toplevel_form(role_as_axiom) -> CNF LEFT_PAREN name COMMA role_as_axiom COMMA cnf_formula annotations RIGHT_PAREN DOT

State 497:
statement -> toplevel_form(role_as_goal) . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production statement -> toplevel_form(role_as_goal)
-- On THF reduce production statement -> toplevel_form(role_as_goal)
-- On TFF reduce production statement -> toplevel_form(role_as_goal)
-- On INCLUDE reduce production statement -> toplevel_form(role_as_goal)
-- On FOF reduce production statement -> toplevel_form(role_as_goal)
-- On EOI reduce production statement -> toplevel_form(role_as_goal)
-- On CNF reduce production statement -> toplevel_form(role_as_goal)

State 498:
statement -> toplevel_form(role_as_axiom) . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production statement -> toplevel_form(role_as_axiom)
-- On THF reduce production statement -> toplevel_form(role_as_axiom)
-- On TFF reduce production statement -> toplevel_form(role_as_axiom)
-- On INCLUDE reduce production statement -> toplevel_form(role_as_axiom)
-- On FOF reduce production statement -> toplevel_form(role_as_axiom)
-- On EOI reduce production statement -> toplevel_form(role_as_axiom)
-- On CNF reduce production statement -> toplevel_form(role_as_axiom)

State 499:
list(statement) -> statement . list(statement) [ EOI ]
-- On error shift to state 405
-- On THF shift to state 406
-- On TFF shift to state 434
-- On INCLUDE shift to state 456
-- On FOF shift to state 465
-- On CNF shift to state 481
-- On toplevel_form(role_as_goal) shift to state 497
-- On toplevel_form(role_as_axiom) shift to state 498
-- On statement shift to state 499
-- On list(statement) shift to state 500
-- On EOI reduce production list(statement) -> 

State 500:
list(statement) -> statement list(statement) . [ EOI ]
-- On EOI reduce production list(statement) -> statement list(statement)

State 501:
parse_statement_list' -> parse_statement_list . [ # ]
-- On # accept parse_statement_list

State 502:
parse_statement_list -> list(statement) . EOI [ # ]
-- On EOI shift to state 503

State 503:
parse_statement_list -> list(statement) EOI . [ # ]
-- On # reduce production parse_statement_list -> list(statement) EOI

State 504:
parse_term' -> . parse_term [ # ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 505
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On parse_term shift to state 507
-- On functor_ shift to state 37
-- On function_term shift to state 40
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_defined_word shift to state 51

State 505:
parse_term -> term . EOI [ # ]
-- On EOI shift to state 506

State 506:
parse_term -> term EOI . [ # ]
-- On # reduce production parse_term -> term EOI

State 507:
parse_term' -> parse_term . [ # ]
-- On # accept parse_term

State 508:
parse_ty' -> . parse_ty [ # ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On ITE_T shift to state 10
-- On INTEGER shift to state 17
-- On DOLLAR_WORD shift to state 21
-- On DOLLAR_DOLLAR_WORD shift to state 22
-- On DISTINCT_OBJECT shift to state 23
-- On term shift to state 509
-- On system_term shift to state 28
-- On system_functor shift to state 29
-- On system_constant shift to state 33
-- On raw_variable shift to state 35
-- On plain_term shift to state 36
-- On parse_ty shift to state 511
-- On functor_ shift to state 37
-- On function_term shift to state 40
-- On defined_term shift to state 41
-- On defined_plain_term shift to state 42
-- On defined_functor shift to state 43
-- On defined_constant shift to state 45
-- On defined_atomic_term shift to state 46
-- On defined_atom shift to state 47
-- On conditional_term(fof_formula,term) shift to state 48
-- On atomic_word shift to state 49
-- On atomic_system_word shift to state 50
-- On atomic_defined_word shift to state 51

State 509:
parse_ty -> term . EOI [ # ]
-- On EOI shift to state 510

State 510:
parse_ty -> term EOI . [ # ]
-- On # reduce production parse_ty -> term EOI

State 511:
parse_ty' -> parse_ty . [ # ]
-- On # accept parse_ty

