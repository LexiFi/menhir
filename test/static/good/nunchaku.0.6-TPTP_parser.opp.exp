%{

  open Nunchaku_core

  module L = Location
  module A = UntypedAST
  module B = A.Builtin

  (* remove quote from some symbols *)
  let remove_quotes s =
    assert (s.[0] = '\'' && s.[String.length s - 1] = '\'');
    String.sub s 1 (String.length s - 2)
%}
%start parse_answer_tuples
%start parse_fo_form
%start parse_ho_form
%start parse_statement
%start parse_statement_list
%start parse_term
%start parse_ty
%token AND
%token ARROW
%token AT
%token CNF
%token COLUMN
%token COMMA
%token <string> DISTINCT_OBJECT
%token <string> DOLLAR_DOLLAR_WORD
%token <string> DOLLAR_WORD
%token DOT
%token EOI
%token EQUAL
%token EQUIV
%token EXISTS
%token FALSE
%token FOF
%token FORALL
%token FORALL_TY
%token GENTZEN_ARROW
%token HO_EXISTS
%token HO_FORALL
%token IMPLY
%token INCLUDE
%token <string> INTEGER
%token ITE_F
%token ITE_T
%token LAMBDA
%token LEFT_BRACKET
%token LEFT_IMPLY
%token LEFT_PAREN
%token <string> LOWER_WORD
%token NOT
%token NOTAND
%token NOTVLINE
%token NOT_EQUAL
%token <string> RATIONAL
%token <string> REAL
%token RIGHT_BRACKET
%token RIGHT_PAREN
%token ROLE_AXIOM
%token ROLE_CONJECTURE
%token ROLE_DEFINITION
%token ROLE_TYPE
%token <string> SINGLE_QUOTED
%token STAR
%token TFF
%token THF
%token TRUE
%token TY_PROP
%token TY_TYPE
%token UNDERSCORE
%token <string> UPPER_WORD
%token VLINE
%token WILDCARD
%token XOR
%type <Nunchaku_core.UntypedAST.term list list> parse_answer_tuples
%type <Nunchaku_core.UntypedAST.term> parse_fo_form
%type <Nunchaku_core.UntypedAST.term> parse_ho_form
%type <Nunchaku_core.UntypedAST.statement> parse_statement
%type <Nunchaku_core.UntypedAST.statement list> parse_statement_list
%type <Nunchaku_core.UntypedAST.term> parse_term
%type <Nunchaku_core.UntypedAST.ty> parse_ty
%%

loption_separated_nonempty_list_COMMA_fof_logic_formula__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_fof_logic_formula_]
| x = separated_nonempty_list_COMMA_fof_logic_formula_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_fof_logic_formula_]

loption_separated_nonempty_list_COMMA_general_term__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_general_term_]
| x = separated_nonempty_list_COMMA_general_term_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_general_term_]

loption_separated_nonempty_list_COMMA_name__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_name_]
| x = separated_nonempty_list_COMMA_name_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_name_]

list_statement_:
  
    {    ( [] )} [@name nil_statement]
| x = statement xs = list_statement_
    {    ( x :: xs )} [@name cons_statement]

separated_nonempty_list_COMMA_fof_logic_formula_:
  x = fof_logic_formula
    {    ( [ x ] )} [@name one_COMMA_fof_logic_formula]
| x = fof_logic_formula _2 = COMMA xs = separated_nonempty_list_COMMA_fof_logic_formula_
    {    ( x :: xs )} [@name more_COMMA_fof_logic_formula]

separated_nonempty_list_COMMA_general_term_:
  x = general_term
    {    ( [ x ] )} [@name one_COMMA_general_term]
| x = general_term _2 = COMMA xs = separated_nonempty_list_COMMA_general_term_
    {    ( x :: xs )} [@name more_COMMA_general_term]

separated_nonempty_list_COMMA_name_:
  x = name
    {    ( [ x ] )} [@name one_COMMA_name]
| x = name _2 = COMMA xs = separated_nonempty_list_COMMA_name_
    {    ( x :: xs )} [@name more_COMMA_name]

separated_nonempty_list_COMMA_raw_ty_variable_:
  x = raw_ty_variable
    {    ( [ x ] )} [@name one_COMMA_raw_ty_variable]
| x = raw_ty_variable _2 = COMMA xs = separated_nonempty_list_COMMA_raw_ty_variable_
    {    ( x :: xs )} [@name more_COMMA_raw_ty_variable]

separated_nonempty_list_COMMA_raw_typed_variable_tff_unary_type__:
  x = raw_typed_variable_tff_unary_type_
    {    ( [ x ] )} [@name one_COMMA_raw_typed_variable_tff_unary_type_]
| x = raw_typed_variable_tff_unary_type_ _2 = COMMA xs = separated_nonempty_list_COMMA_raw_typed_variable_tff_unary_type__
    {    ( x :: xs )} [@name more_COMMA_raw_typed_variable_tff_unary_type_]

separated_nonempty_list_COMMA_raw_typed_variable_thf_type__:
  x = raw_typed_variable_thf_type_
    {    ( [ x ] )} [@name one_COMMA_raw_typed_variable_thf_type_]
| x = raw_typed_variable_thf_type_ _2 = COMMA xs = separated_nonempty_list_COMMA_raw_typed_variable_thf_type__
    {    ( x :: xs )} [@name more_COMMA_raw_typed_variable_thf_type_]

separated_nonempty_list_COMMA_term_:
  x = term
    {    ( [ x ] )} [@name one_COMMA_term]
| x = term _2 = COMMA xs = separated_nonempty_list_COMMA_term_
    {    ( x :: xs )} [@name more_COMMA_term]

separated_nonempty_list_COMMA_tff_type_:
  x = tff_type
    {    ( [ x ] )} [@name one_COMMA_tff_type]
| x = tff_type _2 = COMMA xs = separated_nonempty_list_COMMA_tff_type_
    {    ( x :: xs )} [@name more_COMMA_tff_type]

separated_nonempty_list_VLINE_answer_tuple_:
  x = answer_tuple
    {    ( [ x ] )} [@name one_VLINE_answer_tuple]
| x = answer_tuple _2 = VLINE xs = separated_nonempty_list_VLINE_answer_tuple_
    {    ( x :: xs )} [@name more_VLINE_answer_tuple]

separated_nonempty_list_VLINE_literal_:
  x = literal
    {    ( [ x ] )} [@name one_VLINE_literal]
| x = literal _2 = VLINE xs = separated_nonempty_list_VLINE_literal_
    {    ( x :: xs )} [@name more_VLINE_literal]

parse_statement:
  s = statement _2 = EOI
    {                                 (s)}

parse_term:
  t = term _2 = EOI
    {                       (t)}

parse_fo_form:
  t = fof_formula _2 = EOI
    {                                 (t)}

parse_ho_form:
  t = thf_formula _2 = EOI
    {                                 (t)}

parse_ty:
  t = term _2 = EOI
    {                     (t)}

parse_answer_tuples:
  l = answer_tuples _2 = EOI
    {                                         ( l )}

parse_statement_list:
  l = list_statement_ _2 = EOI
    {                                            ( l )}

answer_tuples:
  _1 = LEFT_BRACKET l = separated_nonempty_list_VLINE_answer_tuple_ _3 = RIGHT_BRACKET
    {    ( CCList.filter_map (fun x->x) l )}

answer_tuple:
  _1 = LEFT_BRACKET l = separated_nonempty_list_COMMA_term_ _3 = RIGHT_BRACKET
    {                                                                     ( Some l )}
| _1 = UNDERSCORE
    {               ( None )}

role_as_goal:
  _1 = ROLE_CONJECTURE
    {                    ()}

role_as_axiom:
  _1 = ROLE_AXIOM
    {               ()}

role_as_def:
  _1 = ROLE_DEFINITION
    {                    ()}

role_as_decl:
  _1 = ROLE_TYPE
    {              ()}

toplevel_form_role_as_axiom_:
  _1 = TFF _2 = LEFT_PAREN name = name _4 = COMMA _5 = role_as_axiom _6 = COMMA f = tff_formula _8 = annotations _9 = RIGHT_PAREN _10 = DOT
    {                                                                                        (name,f)}
| _1 = THF _2 = LEFT_PAREN name = name _4 = COMMA _5 = role_as_axiom _6 = COMMA f = thf_formula _8 = annotations _9 = RIGHT_PAREN _10 = DOT
    {                                                                                        (name,f)}
| _1 = FOF _2 = LEFT_PAREN name = name _4 = COMMA _5 = role_as_axiom _6 = COMMA f = fof_formula _8 = annotations _9 = RIGHT_PAREN _10 = DOT
    {                                                                                        (name,f)}
| _1 = CNF _2 = LEFT_PAREN name = name _4 = COMMA _5 = role_as_axiom _6 = COMMA f = cnf_formula _8 = annotations _9 = RIGHT_PAREN _10 = DOT
    {let _endpos = _endpos__10_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      name, A.or_ ~loc f )}

toplevel_form_role_as_goal_:
  _1 = TFF _2 = LEFT_PAREN name = name _4 = COMMA _5 = role_as_goal _6 = COMMA f = tff_formula _8 = annotations _9 = RIGHT_PAREN _10 = DOT
    {                                                                                        (name,f)}
| _1 = THF _2 = LEFT_PAREN name = name _4 = COMMA _5 = role_as_goal _6 = COMMA f = thf_formula _8 = annotations _9 = RIGHT_PAREN _10 = DOT
    {                                                                                        (name,f)}
| _1 = FOF _2 = LEFT_PAREN name = name _4 = COMMA _5 = role_as_goal _6 = COMMA f = fof_formula _8 = annotations _9 = RIGHT_PAREN _10 = DOT
    {                                                                                        (name,f)}
| _1 = CNF _2 = LEFT_PAREN name = name _4 = COMMA _5 = role_as_goal _6 = COMMA f = cnf_formula _8 = annotations _9 = RIGHT_PAREN _10 = DOT
    {let _endpos = _endpos__10_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      name, A.or_ ~loc f )}

statement:
  f = toplevel_form_role_as_goal_
    {let _endpos = _endpos_f_ in
let _startpos = _startpos_f_ in
    (
      let name, f = f in
      let loc = L.mk_pos _startpos _endpos in
      A.goal ~name ~loc f
    )}
| f = toplevel_form_role_as_axiom_
    {let _endpos = _endpos_f_ in
let _startpos = _startpos_f_ in
    (
      let name, f = f in
      let loc = L.mk_pos _startpos _endpos in
      A.axiom ~name ~loc [f]
    )}
| _1 = THF _2 = LEFT_PAREN name = name _4 = COMMA _5 = role_as_def _6 = COMMA def = thf_def _8 = annotations _9 = RIGHT_PAREN _10 = DOT
    {let _endpos = _endpos__10_ in
let _startpos = _startpos__1_ in
    ( (* parse a term definition *)
      let a, b = def in
      let loc = L.mk_pos _startpos _endpos in
      A.def ~name ~loc a b
    )}
| _1 = THF _2 = LEFT_PAREN name = name _4 = COMMA _5 = role_as_decl _6 = COMMA decl = type_decl_thf_type_ _8 = annotations _9 = RIGHT_PAREN _10 = DOT
    {let _endpos = _endpos__10_ in
let _startpos = _startpos__1_ in
    (
      let s, ty = decl in
      let loc = L.mk_pos _startpos _endpos in
      A.decl ~name ~attrs:[] ~loc s ty
    )}
| _1 = TFF _2 = LEFT_PAREN name = name _4 = COMMA _5 = role_as_decl _6 = COMMA decl = type_decl_tff_type_ _8 = annotations _9 = RIGHT_PAREN _10 = DOT
    {let _endpos = _endpos__10_ in
let _startpos = _startpos__1_ in
    (
      let s, ty = decl in
      let loc = L.mk_pos _startpos _endpos in
      A.decl ~name ~attrs:[] ~loc s ty
    )}
| _1 = INCLUDE _2 = LEFT_PAREN x = SINGLE_QUOTED _4 = RIGHT_PAREN _5 = DOT
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.include_ ~loc (remove_quotes x)
    )}
| _1 = INCLUDE _2 = LEFT_PAREN x = SINGLE_QUOTED _4 = COMMA names = name_list _6 = RIGHT_PAREN _7 = DOT
    {let _endpos = _endpos__7_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.include_ ~loc ~which:names (remove_quotes x)
    )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      Parsing_utils.parse_error_ ~loc "expected statement"
    )}

type_decl_tff_type_:
  _1 = LEFT_PAREN tydecl = type_decl_tff_type_ _3 = RIGHT_PAREN
    {                                                ( tydecl )}
| s = atomic_word _2 = COLUMN ty = quantified_type_tff_type_
    {                                                ( s, ty )}
| s = DOLLAR_WORD _2 = COLUMN ty = quantified_type_tff_type_
    {                                                ( s, ty )}

type_decl_thf_type_:
  _1 = LEFT_PAREN tydecl = type_decl_thf_type_ _3 = RIGHT_PAREN
    {                                                ( tydecl )}
| s = atomic_word _2 = COLUMN ty = quantified_type_thf_type_
    {                                                ( s, ty )}
| s = DOLLAR_WORD _2 = COLUMN ty = quantified_type_thf_type_
    {                                                ( s, ty )}

thf_def:
  a = atomic_word _2 = EQUAL b = thf_formula
    {                                      (a,b)}
| _1 = LEFT_PAREN d = thf_def _3 = RIGHT_PAREN
    {                                     ( d )}

thf_formula:
  t = thf_apply_term
    {                     ( t )}
| l = thf_formula _1 = EQUAL r = thf_unitary_formula
    {let o =           ( fun loc a b -> A.eq ~loc a b ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o loc l r )}
| l = thf_formula _1 = NOT_EQUAL r = thf_unitary_formula
    {let o =               ( fun loc a b -> A.neq ~loc a b ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o loc l r )}
| l = thf_formula o = binary_connective r = thf_unitary_formula
    {let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o loc l r
    )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      Parsing_utils.parse_error_ ~loc "could not parse THF formula" )}

thf_apply_term:
  t = thf_unitary_formula
    {                          ( t )}
| l = thf_apply_term _2 = AT r = thf_unitary_formula
    {let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.app ~loc l [r]
    )}

thf_unitary_formula:
  t = thf_unary_formula
    {                        ( t )}
| q = thf_quantifier _2 = LEFT_BRACKET vars = separated_nonempty_list_COMMA_raw_typed_variable_thf_type__ _4 = RIGHT_BRACKET _5 = COLUMN f = thf_unitary_formula
    {let _endpos = _endpos_f_ in
let _startpos = _startpos_q_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      q ~loc:loc vars f
    )}

thf_quantifier:
  _1 = FORALL
    {           ( A.forall_list )}
| _1 = EXISTS
    {           ( A.exists_list )}
| _1 = LAMBDA
    {           ( A.fun_list )}

thf_unary_formula:
  t = thf_atomic_term
    {                      ( t )}
| o = unary_connective _2 = LEFT_PAREN t = thf_formula _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_o_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ~loc t
    )}

thf_atomic_term:
  t = thf_const
    {                ( t )}
| _1 = thf_ite _2 = LEFT_PAREN a = thf_formula _4 = COMMA b = thf_formula _6 = COMMA c = thf_formula _8 = RIGHT_PAREN
    {let _endpos = _endpos__8_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.ite ~loc a b c
    )}
| _1 = LEFT_PAREN t = thf_formula _3 = RIGHT_PAREN
    {                                         ( t )}

thf_ite:
  _1 = ITE_T
    {          ()}
| _1 = ITE_F
    {          ()}

thf_const:
  _1 = TRUE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
         (
      let loc = L.mk_pos _startpos _endpos in
      A.true_ ~loc )}
| _1 = FALSE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
          (
      let loc = L.mk_pos _startpos _endpos in
      A.false_ ~loc )}
| _1 = HO_FORALL
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
              (
      let loc = L.mk_pos _startpos _endpos in
      A.forall_term ~loc )}
| _1 = HO_EXISTS
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
              (
      let loc = L.mk_pos _startpos _endpos in
      A.exists_term ~loc )}
| _1 = WILDCARD
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.wildcard ~loc () (* useful as argument to a term... *)
    )}
| s = atomic_word
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.at_var ~loc s
    )}
| v = raw_variable
    {let _endpos = _endpos_v_ in
let _startpos = _startpos_v_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.var ~loc v
    )}

thf_type:
  ty = thf_unary_type
    {                      ( ty )}
| l = thf_unary_type _2 = ARROW r = thf_type
    {let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.ty_arrow ~loc l r
    )}

thf_unary_type:
  t = thf_atom_type
    {                    ( t )}
| _1 = LEFT_PAREN t = thf_type _3 = RIGHT_PAREN
    {                                      ( t )}

thf_atom_type:
  v = raw_ty_variable
    {let _endpos = _endpos_v_ in
let _startpos = _startpos_v_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.var ~loc v
    )}
| v = type_const
    {                 ( v )}

cnf_formula:
  _1 = LEFT_PAREN c = disjunction _3 = RIGHT_PAREN
    {                                         ( c )}
| c = disjunction
    {                  ( c )}

disjunction:
  l = separated_nonempty_list_VLINE_literal_
    {                                              ( l )}

literal:
  f = atomic_formula
    {                     ( f )}
| _1 = NOT f = atomic_formula
    {let _endpos = _endpos_f_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.not_ ~loc f
    )}

tff_formula:
  f = fof_formula
    {                  ( f )}

fof_formula:
  _1 = fof_logic_formula
    {                      ( _1 )}
| _1 = fof_sequent
    {                ( _1 )}

fof_sequent:
  l = fof_tuple _2 = GENTZEN_ARROW r = fof_tuple
    {let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.imply ~loc (A.and_ ~loc l) (A.or_ ~loc r)
    )}
| _1 = LEFT_PAREN seq = fof_sequent _3 = RIGHT_PAREN
    {                                           ( seq )}

fof_tuple:
  _1 = LEFT_BRACKET xs = loption_separated_nonempty_list_COMMA_fof_logic_formula__ _3 = RIGHT_BRACKET
    {let l =     ( xs ) in
                                                                        ( l )}

fof_logic_formula:
  f = fof_unitary_formula
    {                          ( f )}
| l = fof_logic_formula o = binary_connective r = fof_unitary_formula
    {let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o loc l r
    )}

fof_unitary_formula:
  f = fof_quantified_formula
    {                             ( f )}
| f = fof_unary_formula
    {                        ( f )}
| f = atomic_formula
    {                     ( f )}
| _1 = LEFT_PAREN f = fof_logic_formula _3 = RIGHT_PAREN
    {                                               ( f )}

fof_quantified_formula:
  q = fol_quantifier _2 = LEFT_BRACKET vars = separated_nonempty_list_COMMA_raw_typed_variable_tff_unary_type__ _4 = RIGHT_BRACKET _5 = COLUMN f = fof_unitary_formula
    {let _endpos = _endpos_f_ in
let _startpos = _startpos_q_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      q ~loc vars f
    )}

fof_unary_formula:
  o = unary_connective f = fof_unitary_formula
    {let _endpos = _endpos_f_ in
let _startpos = _startpos_o_ in
    (
     let loc = L.mk_pos _startpos _endpos in
     o ~loc f
    )}

binary_connective:
  _1 = EQUIV
    {          ( fun loc a b -> A.equiv ~loc a b )}
| _1 = IMPLY
    {          ( fun loc a b -> A.imply ~loc a b )}
| _1 = LEFT_IMPLY
    {               ( fun loc l r -> A.imply ~loc r l )}
| _1 = XOR
    {        ( fun loc l r -> A.not_ ~loc (A.equiv ~loc l r) )}
| _1 = NOTVLINE
    {             ( fun loc x y -> A.not_ ~loc (A.or_ ~loc [x; y]) )}
| _1 = NOTAND
    {           ( fun loc x y -> A.not_ ~loc (A.and_ ~loc [x; y]) )}
| _1 = AND
    {        ( fun loc x y -> A.and_ ~loc [x;y] )}
| _1 = VLINE
    {          ( fun loc x y -> A.or_ ~loc [x;y] )}

fol_quantifier:
  _1 = FORALL
    {           ( fun ~loc vars t -> A.forall_list ~loc vars t )}
| _1 = EXISTS
    {           ( fun ~loc vars t -> A.exists_list ~loc vars t )}

unary_connective:
  _1 = NOT
    {        ( fun ~loc t -> A.not_ ~loc t )}

atomic_formula:
  _1 = TRUE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
         (
      let loc = L.mk_pos _startpos _endpos in
      A.true_ ~loc )}
| _1 = FALSE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
          (
      let loc = L.mk_pos _startpos _endpos in
      A.false_ ~loc )}
| l = term _1 = EQUAL r = term
    {let o =           ( fun loc a b -> A.eq ~loc a b ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o loc l r
    )}
| l = term _1 = NOT_EQUAL r = term
    {let o =               ( fun loc a b -> A.neq ~loc a b ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o loc l r
    )}
| t = function_term
    {                    ( t )}

term:
  t = function_term
    {                    ( t )}
| v = raw_variable
    {let _endpos = _endpos_v_ in
let _startpos = _startpos_v_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.var ~loc v
    )}
| t = conditional_term_fof_formula_term_
    {                                         ( t )}

function_term:
  _1 = plain_term
    {               ( _1 )}
| _1 = defined_term
    {                 ( _1 )}
| _1 = system_term
    {                ( _1 )}

conditional_term_fof_formula_term_:
  _1 = ITE_T _2 = LEFT_PAREN a = fof_formula _4 = COMMA b = term _6 = COMMA c = term _8 = RIGHT_PAREN
    {let _endpos = _endpos__8_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.ite ~loc a b c
    )}

plain_term:
  _1 = WILDCARD
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.wildcard ~loc () (* useful as argument to a term... *)
    )}
| s = atomic_word
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.at_var ~loc s
    )}
| f = functor_ _2 = LEFT_PAREN args = arguments _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.app ~loc f args
    )}

functor_:
  f = atomic_word
    {let _endpos = _endpos_f_ in
let _startpos = _startpos_f_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.at_var ~loc f
    )}

defined_term:
  t = defined_atom
    {let _endpos = _endpos_t_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.at_var ~loc t
    )}
| t = defined_atomic_term
    {                          ( t )}

defined_atom:
  _1 = INTEGER
    {            ( Utils.not_implemented "TPTP: cannot handle integer" )}
| _1 = RATIONAL
    {             ( Utils.not_implemented "TPTP: cannot handle rational" )}
| _1 = REAL
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
         (
      let loc = L.mk_pos _startpos _endpos in
      Parsing_utils.parse_error_ ~loc "TPTP: cannot handle real numbers"
    )}
| s = DISTINCT_OBJECT
    {                      ( s )}

defined_atomic_term:
  t = defined_plain_term
    {                         ( t )}

defined_plain_term:
  s = defined_constant
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.at_var ~loc s
    )}
| f = defined_functor _2 = LEFT_PAREN args = arguments _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.app ~loc (A.at_var ~loc f) args
    )}

defined_constant:
  t = defined_functor
    {                                    ( t )}

defined_functor:
  s = atomic_defined_word
    {                                       ( s )}

system_term:
  c = system_constant
    {let _endpos = _endpos_c_ in
let _startpos = _startpos_c_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.at_var ~loc c
    )}
| f = system_functor _2 = LEFT_PAREN args = arguments _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.app ~loc (A.at_var ~loc f) args
    )}

system_constant:
  t = system_functor
    {                                  ( t )}

system_functor:
  s = atomic_system_word
    {                                     ( s )}

quantified_type_tff_type_:
  ty = tff_type
    {          ( ty )}
| _1 = FORALL_TY _2 = LEFT_BRACKET vars = separated_nonempty_list_COMMA_raw_ty_variable_ _4 = RIGHT_BRACKET _5 = COLUMN ty = quantified_type_tff_type_
    {let _endpos = _endpos_ty_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.ty_forall_list ~loc vars ty )}

quantified_type_thf_type_:
  ty = thf_type
    {          ( ty )}
| _1 = FORALL_TY _2 = LEFT_BRACKET vars = separated_nonempty_list_COMMA_raw_ty_variable_ _4 = RIGHT_BRACKET _5 = COLUMN ty = quantified_type_thf_type_
    {let _endpos = _endpos_ty_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.ty_forall_list ~loc vars ty )}

tff_type:
  ty = tff_unary_type
    {                      ( ty )}
| l = tff_unary_type _2 = ARROW r = tff_unary_type
    {let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.ty_arrow ~loc l r
    )}
| _1 = LEFT_PAREN args = ty_args _3 = RIGHT_PAREN _4 = ARROW r = tff_atom_type
    {let _endpos = _endpos_r_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.ty_arrow_list ~loc args r
    )}

ty_args:
  a = tff_unary_type _2 = STAR b = tff_unary_type
    {                                           ( [a; b] )}
| a = tff_unary_type _2 = STAR b = ty_args
    {                                    ( a :: b )}

tff_unary_type:
  t = tff_atom_type
    {                    ( t )}
| _1 = LEFT_PAREN t = tff_type _3 = RIGHT_PAREN
    {                                      ( t )}

tff_atom_type:
  v = raw_ty_variable
    {let _endpos = _endpos_v_ in
let _startpos = _startpos_v_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.var ~loc v
    )}
| v = type_const
    {                 ( v )}
| f = type_const _2 = LEFT_PAREN l = separated_nonempty_list_COMMA_tff_type_ _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.app ~loc f l
    )}

raw_ty_variable:
  v = raw_variable _2 = COLUMN _3 = TY_TYPE
    {                                  ( v )}
| v = raw_variable
    {                   ( v )}

type_const:
  _1 = WILDCARD
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.wildcard ~loc ()
    )}
| _1 = TY_TYPE
    {            ( A.ty_type )}
| _1 = TY_PROP
    {            ( A.ty_prop )}
| v = LOWER_WORD
    {let _endpos = _endpos_v_ in
let _startpos = _startpos_v_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.var ~loc v
    )}
| v = DOLLAR_WORD
    {let _endpos = _endpos_v_ in
let _startpos = _startpos_v_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.var ~loc v
    )}

arguments:
  _1 = separated_nonempty_list_COMMA_term_
    {                                                ( _1 )}

raw_typed_variable_tff_unary_type_:
  v = raw_variable
    {                   ( v, None )}
| v = raw_variable _2 = COLUMN ty = tff_unary_type
    {                                ( v, Some ty )}

raw_typed_variable_thf_type_:
  v = raw_variable
    {                   ( v, None )}
| v = raw_variable _2 = COLUMN ty = thf_type
    {                                ( v, Some ty )}

raw_variable:
  v = UPPER_WORD
    {                 ( v )}

atomic_word:
  s = SINGLE_QUOTED
    {                    ( remove_quotes s )}
| s = LOWER_WORD
    {                 ( s )}

atomic_defined_word:
  w = DOLLAR_WORD
    {                  ( w )}

atomic_system_word:
  w = DOLLAR_DOLLAR_WORD
    {                         ( w )}

name_list:
  xs = loption_separated_nonempty_list_COMMA_name__
    {let l =     ( xs ) in
                                ( l )}

name:
  w = atomic_word
    {                  ( w )}
| i = INTEGER
    {              ( i )}

annotations:
  
    {    ( [] )}
| _1 = COMMA xs = loption_separated_nonempty_list_COMMA_general_term__
    {let l =     ( xs ) in
                                                ( l )}

general_term:
  x = general_data
    {                   ( x )}
| l = general_data _2 = COLUMN r = general_term
    {                                         ( A.TPTP.Column (l, r) )}
| l = general_list
    {                   ( l )}

general_data:
  w = atomic_word
    {                  ( A.TPTP.Var w )}
| f = general_function
    {                       ( f )}
| i = INTEGER
    {              ( A.TPTP.Int (int_of_string i) )}
| v = UPPER_WORD
    {                 ( A.TPTP.Var v )}
| w = DISTINCT_OBJECT
    {                      ( A.TPTP.String w )}

general_function:
  f = atomic_word _2 = LEFT_PAREN l = separated_nonempty_list_COMMA_general_term_ _4 = RIGHT_PAREN
    {    ( A.TPTP.App (f, l) )}

general_list:
  _1 = LEFT_BRACKET xs = loption_separated_nonempty_list_COMMA_general_term__ _3 = RIGHT_BRACKET
    {let l =     ( xs ) in
    ( A.TPTP.List l )}

%%


