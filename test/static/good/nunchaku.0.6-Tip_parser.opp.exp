%{
  open Nunchaku_core
  module A = Tip_ast
  module Res = A.Smbc_res
  module Loc = Location

%}
%start parse
%start parse_list
%start parse_smbc_res
%start parse_term
%start parse_ty
%token AND
%token ARROW
%token AS
%token ASSERT
%token ASSERT_NOT
%token AT
%token BOOL
%token CASE
%token CHECK_SAT
%token DATA
%token DECLARE_CONST
%token DECLARE_FUN
%token DECLARE_SORT
%token DEFAULT
%token DEFINE_FUN
%token DEFINE_FUNS_REC
%token DEFINE_FUN_REC
%token DISTINCT
%token EOI
%token EQ
%token EXISTS
%token FALSE
%token FORALL
%token FUN
%token <string> IDENT
%token IF
%token LEFT_PAREN
%token LET
%token MATCH
%token NOT
%token OR
%token PAR
%token <string> QUOTED
%token RESULT_ATOM_MODEL
%token RESULT_ATOM_REASON
%token RESULT_RESULT
%token RESULT_SAT
%token RESULT_TIMEOUT
%token RESULT_TYPE
%token RESULT_UNKNOWN
%token RESULT_UNSAT
%token RESULT_VAL
%token RIGHT_PAREN
%token TRUE
%type <Tip_ast.statement> parse
%type <Tip_ast.statement list> parse_list
%type <Tip_ast.Smbc_res.t> parse_smbc_res
%type <Tip_ast.term> parse_term
%type <Tip_ast.ty> parse_ty
%%

option_RESULT_ATOM_MODEL_:
  
    {    ( None )} [@name none_RESULT_ATOM_MODEL]
| x = RESULT_ATOM_MODEL
    {    ( Some x )} [@name some_RESULT_ATOM_MODEL]

option_RESULT_RESULT_:
  
    {    ( None )} [@name none_RESULT_RESULT]
| x = RESULT_RESULT
    {    ( Some x )} [@name some_RESULT_RESULT]

list_smbc_model_entry_:
  
    {    ( [] )} [@name nil_smbc_model_entry]
| x = smbc_model_entry xs = list_smbc_model_entry_
    {    ( x :: xs )} [@name cons_smbc_model_entry]

list_stmt_:
  
    {    ( [] )} [@name nil_stmt]
| x = stmt xs = list_stmt_
    {    ( x :: xs )} [@name cons_stmt]

list_ty_:
  
    {    ( [] )} [@name nil_ty]
| x = ty xs = list_ty_
    {    ( x :: xs )} [@name cons_ty]

list_typed_var_:
  
    {    ( [] )} [@name nil_typed_var]
| x = typed_var xs = list_typed_var_
    {    ( x :: xs )} [@name cons_typed_var]

list_tyvar_:
  
    {    ( [] )} [@name nil_tyvar]
| x = tyvar xs = list_tyvar_
    {    ( x :: xs )} [@name cons_tyvar]

list_var_:
  
    {    ( [] )} [@name nil_var]
| x = var xs = list_var_
    {    ( x :: xs )} [@name cons_var]

nonempty_list_binding_:
  x = binding
    {    ( [ x ] )} [@name one_binding]
| x = binding xs = nonempty_list_binding_
    {    ( x :: xs )} [@name more_binding]

nonempty_list_case_:
  x = case
    {    ( [ x ] )} [@name one_case]
| x = case xs = nonempty_list_case_
    {    ( x :: xs )} [@name more_case]

nonempty_list_cstor_:
  x = cstor
    {    ( [ x ] )} [@name one_cstor]
| x = cstor xs = nonempty_list_cstor_
    {    ( x :: xs )} [@name more_cstor]

nonempty_list_cstor_arg_:
  x = cstor_arg
    {    ( [ x ] )} [@name one_cstor_arg]
| x = cstor_arg xs = nonempty_list_cstor_arg_
    {    ( x :: xs )} [@name more_cstor_arg]

nonempty_list_data_:
  x = data
    {    ( [ x ] )} [@name one_data]
| x = data xs = nonempty_list_data_
    {    ( x :: xs )} [@name more_data]

nonempty_list_funs_rec_decl_:
  x = funs_rec_decl
    {    ( [ x ] )} [@name one_funs_rec_decl]
| x = funs_rec_decl xs = nonempty_list_funs_rec_decl_
    {    ( x :: xs )} [@name more_funs_rec_decl]

nonempty_list_term_:
  x = term
    {    ( [ x ] )} [@name one_term]
| x = term xs = nonempty_list_term_
    {    ( x :: xs )} [@name more_term]

nonempty_list_ty_:
  x = ty
    {    ( [ x ] )} [@name one_ty]
| x = ty xs = nonempty_list_ty_
    {    ( x :: xs )} [@name more_ty]

nonempty_list_typed_var_:
  x = typed_var
    {    ( [ x ] )} [@name one_typed_var]
| x = typed_var xs = nonempty_list_typed_var_
    {    ( x :: xs )} [@name more_typed_var]

nonempty_list_tyvar_:
  x = tyvar
    {    ( [ x ] )} [@name one_tyvar]
| x = tyvar xs = nonempty_list_tyvar_
    {    ( x :: xs )} [@name more_tyvar]

nonempty_list_var_:
  x = var
    {    ( [ x ] )} [@name one_var]
| x = var xs = nonempty_list_var_
    {    ( x :: xs )} [@name more_var]

parse_list:
  l = list_stmt_ _2 = EOI
    {                        (l)}

parse:
  t = stmt _2 = EOI
    {                  ( t )}

parse_term:
  t = term _2 = EOI
    {                       ( t )}

parse_ty:
  t = ty _2 = EOI
    {                   ( t )}

parse_smbc_res:
  r = smbc_res _2 = EOI
    {                               ( r )}

cstor_arg:
  _1 = LEFT_PAREN name = IDENT ty = ty _4 = RIGHT_PAREN
    {                                            ( name, ty )}

cstor:
  _1 = LEFT_PAREN c = IDENT _3 = RIGHT_PAREN
    {                                   ( A.mk_cstor c [] )}
| _1 = LEFT_PAREN c = IDENT l = nonempty_list_cstor_arg_ _4 = RIGHT_PAREN
    {    ( A.mk_cstor c l )}

data:
  _1 = LEFT_PAREN s = IDENT l = nonempty_list_cstor_ _4 = RIGHT_PAREN
    {                                            ( s,l )}

fun_def_mono:
  f = IDENT _2 = LEFT_PAREN args = list_typed_var_ _4 = RIGHT_PAREN ret = ty
    {    ( f, args, ret )}

fun_decl_mono:
  f = IDENT _2 = LEFT_PAREN args = list_ty_ _4 = RIGHT_PAREN ret = ty
    {    ( f, args, ret )}

fun_decl:
  tup = fun_decl_mono
    {                      ( let f, args, ret = tup in [], f, args, ret )}
| _1 = LEFT_PAREN _2 = PAR _3 = LEFT_PAREN tyvars = list_tyvar_ _5 = RIGHT_PAREN _6 = LEFT_PAREN tup = fun_decl_mono _8 = RIGHT_PAREN _9 = RIGHT_PAREN
    {    ( let f, args, ret = tup in tyvars, f, args, ret )}

fun_rec:
  tup = fun_def_mono body = term
    {let _endpos = _endpos_body_ in
let _startpos = _startpos_tup_ in
    (
      let f, args, ret = tup in
      let loc = Loc.mk_pos _startpos _endpos in 
      A.mk_fun_rec ~loc ~ty_vars:[] f args ret body
    )}
| _1 = LEFT_PAREN _2 = PAR _3 = LEFT_PAREN l = list_tyvar_ _5 = RIGHT_PAREN _6 = LEFT_PAREN tup = fun_def_mono body = term _9 = RIGHT_PAREN _10 = RIGHT_PAREN
    {let _endpos = _endpos__10_ in
let _startpos = _startpos__1_ in
    (
      let f, args, ret = tup in
      let loc = Loc.mk_pos _startpos _endpos in 
      A.mk_fun_rec ~loc ~ty_vars:l f args ret body
    )}

funs_rec_decl:
  _1 = LEFT_PAREN tup = fun_def_mono _3 = RIGHT_PAREN
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
    (
      let f, args, ret = tup in
      let loc = Loc.mk_pos _startpos _endpos in
      A.mk_fun_decl ~loc ~ty_vars:[] f args ret
    )}
| _1 = LEFT_PAREN _2 = PAR _3 = LEFT_PAREN l = list_tyvar_ _5 = RIGHT_PAREN _6 = LEFT_PAREN tup = fun_def_mono _8 = RIGHT_PAREN _9 = RIGHT_PAREN
    {let _endpos = _endpos__9_ in
let _startpos = _startpos__1_ in
    (
      let f, args, ret = tup in
      let loc = Loc.mk_pos _startpos _endpos in
      A.mk_fun_decl ~loc ~ty_vars:l f args ret
    )}

assert_not:
  _1 = LEFT_PAREN _2 = PAR _3 = LEFT_PAREN tyvars = nonempty_list_tyvar_ _5 = RIGHT_PAREN t = term _7 = RIGHT_PAREN
    {  ( tyvars, t )}
| t = term
    {  ( [], t )}

stmt:
  _1 = LEFT_PAREN _2 = ASSERT t = term _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.assert_ ~loc t
    )}
| _1 = LEFT_PAREN _2 = DECLARE_SORT s = IDENT n = IDENT _5 = RIGHT_PAREN
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      try
        let n = int_of_string n in
        A.decl_sort ~loc s ~arity:n
      with Failure _ ->
        A.parse_errorf ~loc "expected arity to be an integer, not `%s`" n
    )}
| _1 = LEFT_PAREN _2 = DATA _3 = LEFT_PAREN vars = list_tyvar_ _5 = RIGHT_PAREN _6 = LEFT_PAREN l = nonempty_list_data_ _8 = RIGHT_PAREN _9 = RIGHT_PAREN
    {let _endpos = _endpos__9_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.data ~loc vars l
    )}
| _1 = LEFT_PAREN _2 = DECLARE_FUN tup = fun_decl _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      let ty_vars, f, args, ret = tup in
      A.decl_fun ~loc ~ty_vars f args ret
    )}
| _1 = LEFT_PAREN _2 = DECLARE_CONST f = IDENT ty = ty _5 = RIGHT_PAREN
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.decl_fun ~loc ~ty_vars:[] f [] ty
    )}
| _1 = LEFT_PAREN _2 = DEFINE_FUN f = fun_rec _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.fun_rec ~loc f
    )}
| _1 = LEFT_PAREN _2 = DEFINE_FUN_REC f = fun_rec _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.fun_rec ~loc f
    )}
| _1 = LEFT_PAREN _2 = DEFINE_FUNS_REC _3 = LEFT_PAREN decls = nonempty_list_funs_rec_decl_ _5 = RIGHT_PAREN _6 = LEFT_PAREN bodies = nonempty_list_term_ _8 = RIGHT_PAREN _9 = RIGHT_PAREN
    {let _endpos = _endpos__9_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.funs_rec ~loc decls bodies
    )}
| _1 = LEFT_PAREN _2 = ASSERT_NOT tup = assert_not _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      let ty_vars, f = tup in
      A.assert_not ~loc ~ty_vars f
    )}
| _1 = LEFT_PAREN _2 = CHECK_SAT _3 = RIGHT_PAREN
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.check_sat ~loc ()
    )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.parse_errorf ~loc "expected statement"
    )}

var:
  s = IDENT
    {            ( s )}

tyvar:
  s = IDENT
    {            ( s )}

ty:
  _1 = BOOL
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
         ( let loc = Loc.mk_pos _startpos _endpos in A.ty_bool ~loc )}
| s = IDENT
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
            ( let loc = Loc.mk_pos _startpos _endpos in A.ty_const ~loc s )}
| _1 = LEFT_PAREN s = IDENT args = nonempty_list_ty_ _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    ( let loc = Loc.mk_pos _startpos _endpos in A.ty_app ~loc s args )}
| _1 = LEFT_PAREN _2 = ARROW tup = ty_arrow_args _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let args, ret = tup in
      let loc = Loc.mk_pos _startpos _endpos in A.ty_arrow_l ~loc args ret )}

ty_arrow_args:
  a = ty ret = ty
    {                ( [a], ret )}
| a = ty tup = ty_arrow_args
    {                           ( a :: fst tup, snd tup )}

typed_var:
  _1 = LEFT_PAREN s = IDENT ty = ty _4 = RIGHT_PAREN
    {                                         ( s, ty )}

case:
  _1 = LEFT_PAREN _2 = CASE c = IDENT rhs = term _5 = RIGHT_PAREN
    {    ( A.Match_case (c, [], rhs) )}
| _1 = LEFT_PAREN _2 = CASE _3 = LEFT_PAREN c = IDENT vars = nonempty_list_var_ _6 = RIGHT_PAREN rhs = term _8 = RIGHT_PAREN
    {    ( A.Match_case (c, vars, rhs) )}
| _1 = LEFT_PAREN _2 = CASE _3 = DEFAULT rhs = term _5 = RIGHT_PAREN
    {    ( A.Match_default rhs )}

binding:
  _1 = LEFT_PAREN v = var t = term _4 = RIGHT_PAREN
    {                                        ( v, t )}

term:
  _1 = TRUE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
         ( let loc = Loc.mk_pos _startpos _endpos in A.true_ ~loc )}
| _1 = FALSE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
          ( let loc = Loc.mk_pos _startpos _endpos in A.false_ ~loc )}
| s = QUOTED
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
             ( let loc = Loc.mk_pos _startpos _endpos in A.const ~loc s )}
| s = IDENT
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
            ( let loc = Loc.mk_pos _startpos _endpos in A.const ~loc s )}
| _1 = LEFT_PAREN t = term _3 = RIGHT_PAREN
    {                                  ( t )}
| _1 = LEFT_PAREN _2 = IF a = term b = term c = term _6 = RIGHT_PAREN
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
                                                   (
    let loc = Loc.mk_pos _startpos _endpos in A.if_ ~loc a b c )}
| _1 = LEFT_PAREN _2 = OR l = nonempty_list_term_ _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
                                      ( let loc = Loc.mk_pos _startpos _endpos in A.or_ ~loc l )}
| _1 = LEFT_PAREN _2 = AND l = nonempty_list_term_ _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
                                       ( let loc = Loc.mk_pos _startpos _endpos in A.and_ ~loc l )}
| _1 = LEFT_PAREN _2 = NOT t = term _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
                                      ( let loc = Loc.mk_pos _startpos _endpos in A.not_ ~loc t )}
| _1 = LEFT_PAREN _2 = DISTINCT l = nonempty_list_term_ _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
                                            ( let loc = Loc.mk_pos _startpos _endpos in A.distinct ~loc l )}
| _1 = LEFT_PAREN _2 = EQ a = term b = term _5 = RIGHT_PAREN
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
                                            ( let loc = Loc.mk_pos _startpos _endpos in A.eq ~loc a b )}
| _1 = LEFT_PAREN _2 = ARROW a = term b = term _5 = RIGHT_PAREN
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
                                               ( let loc = Loc.mk_pos _startpos _endpos in A.imply ~loc a b )}
| _1 = LEFT_PAREN f = IDENT args = nonempty_list_term_ _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
                                              ( let loc = Loc.mk_pos _startpos _endpos in A.app ~loc f args )}
| _1 = LEFT_PAREN _2 = AT f = term t = term _5 = RIGHT_PAREN
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
                                            ( let loc = Loc.mk_pos _startpos _endpos in A.ho_app ~loc f t )}
| _1 = LEFT_PAREN _2 = MATCH lhs = term l = nonempty_list_case_ _5 = RIGHT_PAREN
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
    ( let loc = Loc.mk_pos _startpos _endpos in A.match_ ~loc lhs l )}
| _1 = LEFT_PAREN _2 = FUN _3 = LEFT_PAREN vars = nonempty_list_typed_var_ _5 = RIGHT_PAREN body = term _7 = RIGHT_PAREN
    {let _endpos = _endpos__7_ in
let _startpos = _startpos__1_ in
    ( let loc = Loc.mk_pos _startpos _endpos in A.fun_l ~loc vars body )}
| _1 = LEFT_PAREN _2 = LET _3 = LEFT_PAREN l = nonempty_list_binding_ _5 = RIGHT_PAREN r = term _7 = RIGHT_PAREN
    {let _endpos = _endpos__7_ in
let _startpos = _startpos__1_ in
    ( let loc = Loc.mk_pos _startpos _endpos in A.let_ ~loc l r )}
| _1 = LEFT_PAREN _2 = AS t = term ty = ty _5 = RIGHT_PAREN
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
    ( let loc = Loc.mk_pos _startpos _endpos in A.cast ~loc t ~ty )}
| _1 = LEFT_PAREN _2 = FORALL _3 = LEFT_PAREN vars = nonempty_list_typed_var_ _5 = RIGHT_PAREN f = term _7 = RIGHT_PAREN
    {let _endpos = _endpos__7_ in
let _startpos = _startpos__1_ in
    ( let loc = Loc.mk_pos _startpos _endpos in A.forall ~loc vars f )}
| _1 = LEFT_PAREN _2 = EXISTS _3 = LEFT_PAREN vars = nonempty_list_typed_var_ _5 = RIGHT_PAREN f = term _7 = RIGHT_PAREN
    {let _endpos = _endpos__7_ in
let _startpos = _startpos__1_ in
    ( let loc = Loc.mk_pos _startpos _endpos in A.exists ~loc vars f )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.parse_errorf ~loc "expected term"
    )}

smbc_model:
  _1 = LEFT_PAREN e = list_smbc_model_entry_ _3 = RIGHT_PAREN
    {                                               ( e )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.parse_errorf ~loc "expected SMBC model (a list of entries)"
    )}

smbc_model_entry:
  _1 = LEFT_PAREN _2 = RESULT_VAL a = term b = term _5 = RIGHT_PAREN
    {                                                    ( Res.Val (a,b) )}
| _1 = LEFT_PAREN _2 = RESULT_TYPE a = ty _4 = LEFT_PAREN dom = list_var_ _6 = RIGHT_PAREN _7 = RIGHT_PAREN
    {    ( Res.Ty (a,dom) )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.parse_errorf ~loc
        "expected SMBC model entry: (val term term) or (type ty domain)"
    )}

smbc_unknown_reason:
  
    {    ( "" )}
| _1 = RESULT_ATOM_REASON s = IDENT
    {                               ( s )}
| _1 = RESULT_ATOM_REASON s = QUOTED
    {                                ( s )}

smbc_res:
  _1 = LEFT_PAREN _2 = RESULT_RESULT _3 = RESULT_UNSAT _4 = RIGHT_PAREN
    {                                                      ( Res.Unsat )}
| _1 = LEFT_PAREN _2 = option_RESULT_RESULT_ _3 = RESULT_TIMEOUT _4 = RIGHT_PAREN
    {                                                         ( Res.Timeout )}
| _1 = LEFT_PAREN _2 = RESULT_RESULT _3 = RESULT_SAT _4 = option_RESULT_ATOM_MODEL_ m = smbc_model _6 = RIGHT_PAREN
    {                                                                                    ( Res.Sat m )}
| _1 = LEFT_PAREN _2 = RESULT_RESULT _3 = RESULT_UNKNOWN r = smbc_unknown_reason _5 = RIGHT_PAREN
    {                                                                              ( Res.Unknown r )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.parse_errorf ~loc "expected SMBC result"
    )}

%%


