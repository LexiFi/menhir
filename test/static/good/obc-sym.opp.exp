File "obc-sym.mly", line 20, characters 26-30:
Warning: the token VOID is unused.
%{
open Dict
open Symtab
open Error
open Print
open Mach
open Eval

let rcsid = "$Id: symparse.mly 76 2005-03-01 14:20:43Z mike $"
%}
%{
let modname = ref anon

let in_table = Growvect.create 100 voidtype

(* All definitions created here have d_level = 0; this is wrong for
   e.g. formal parameters and record fields, but it doesn't matter in
   the rest of the compiler.  *)

let make_def x v k t =
  { d_tag = x; d_module = !modname; d_export = v; d_kind = k;
    d_used = true; d_loc = no_loc; d_type = t; d_lab = nosym;
    d_level = 0; d_offset = 0; d_param = 0; d_map = [] }

let field_def x v t o =
  { d_tag = x; d_module = !modname; d_export = v; d_kind = FieldDef;
    d_used = true; d_loc = no_loc; d_type = t; d_lab = nosym;
    d_level = 1; d_offset = o; d_param = 0; d_map = [] }

let def_type k m n (g, r, map) =
  let t = { t_id = n; t_name = anon; t_module = m; t_level = 0; t_guts = g;
    t_rep = r; t_desc = nosym; t_map = map } in
  Growvect.set in_table k t; t

let use_type k =
  Growvect.get in_table k

let desc = ref nosym
%}
%start file
%token ABSMETH
%token ABSREC
%token ANON
%token ARRAY
%token <Dict.otype> BASICTYPE
%token CONST
%token DEF
%token END
%token ENUM
%token F
%token FIELD
%token FLEX
%token <string> FLO
%token <string> HEX
%token I
%token LOCAL
%token <Dict.export> MARK
%token METH
%token METHOD
%token <string> NUM
%token PARAM
%token POINTER
%token PROC
%token PROCEDURE
%token PROCINFO
%token RECORD
%token REF
%token STRING
%token SYMFILE
%token <string> TAG
%token TARGET
%token TYPE
%token USE
%token VAR
%token VARINFO
%token VOID
%token VPARAM
%type <Dict.def list * int> file
%%

file:
  _1 = header _2 = defs _3 = END _4 = HEX
    {      ( (List.rev _2, int_of_string _4) )}

header:
  _1 = SYMFILE _2 = ident _3 = HEX
    {      ( modname := _2;
	if int_of_string _3 <> Config.signature then begin
	  sem_error "symbol table for '$' is from wrong version of compiler"
	    [fId _2] no_loc;
	  exit 2
	end )}

defs:
  
    {                  ( [] )}
| _1 = defs _2 = def
    {               ( _2::_1 )}
| _1 = defs _2 = fixup
    {                 ( _1 )}

def:
  _1 = TYPE _2 = ident _3 = MARK _4 = otype
    {      ( if _4.t_name = anon then _4.t_name <- _2;
	make_def _2 _3 TypeDef _4 )}
| _1 = VAR _2 = ident _3 = MARK _4 = otype
    {      ( let d = make_def _2 _3 VarDef _4 in
	d.d_lab <- sprintf "$.$" [fId !modname; fId _2]; d )}
| _1 = CONST _2 = ident _3 = MARK _4 = otype _5 = const
    {      ( make_def _2 _3 (ConstDef _5) _4 )}
| _1 = STRING _2 = ident _3 = MARK _4 = int _5 = symbol
    {      ( let d = make_def _2 Visible (StringDef _4)
		  (new_type 0 (row (_4+1) character)) in
	d.d_lab <- _5; d )}
| _1 = PROCEDURE _2 = ident _3 = MARK _4 = otype
    {      ( let d = make_def _2 _3 ProcDef _4 in
	d.d_lab <- proc_name !modname 0 _2; d )}

fixup:
  _1 = TARGET _2 = int _3 = otype
    {      ( let t0 = use_type _2 in
	match t0.t_guts with
	    PointerType d -> d.d_type <- _3
	  | _ -> failwith "TARGET" )}
| _1 = METHOD _2 = int _3 = ident _4 = MARK _5 = int _6 = symbol _7 = otype
    {      ( let t0 = use_type _2 in
	let r = get_record t0 in
	let d = make_def _3 _4 ProcDef _7 in
	d.d_offset <- _5; d.d_lab <- _6;
	r.r_methods <- r.r_methods @ [d] )}
| _1 = PROCINFO _2 = symbol _3 = otype _4 = locals _5 = END
    {      ( let g = { g_name = _2; g_result = _3; g_locals = List.rev _4 } in
	Dict.put_info _2 (ProcInfo g) )}
| _1 = VARINFO _2 = symbol _3 = otype
    {      ( let v = { v_name = _2; v_type = _3 } in
	Dict.put_info _2 (VarInfo v) )}
| _1 = typedef
    {              ( )}

otype:
  _1 = USE _2 = int
    {              ( use_type _2 )}
| _1 = BASICTYPE
    {                ( _1 )}
| _1 = typedef
    {              ( _1 )}

typedef:
  _1 = DEF _2 = int _3 = tguts
    {      ( let t = def_type _2 !modname _2 _3 in
	if is_record t then t.t_desc <- !desc;
	t )}
| _1 = REF _2 = int _3 = ident _4 = int _5 = tname _6 = tguts
    {      ( let t = def_type _2 _3 _4 _6 in
	if is_record t then t.t_desc <- !desc;
	t.t_name <- _5; t )}

tguts:
  _1 = POINTER
    {      ( (PointerType (make_def anon Private TypeDef voidtype),
	  addr_rep, [GC_Offset 0]) )}
| _1 = ENUM _2 = int
    {      ( (EnumType _2, int_rep, []) )}
| _1 = RECORD _2 = symbol _3 = int _4 = otype _5 = locals _6 = END
    {      ( desc := _2; record false _4 _3 (List.rev _5) )}
| _1 = ABSREC _2 = symbol _3 = int _4 = otype _5 = locals _6 = END
    {      ( desc := _2; record true _4 _3 (List.rev _5) )}
| _1 = ARRAY _2 = int _3 = otype
    {      ( row _2 _3 )}
| _1 = FLEX _2 = otype
    {      ( flex _2 )}
| _1 = prockind _2 = int _3 = otype _4 = locals _5 = END
    {      ( let p = { p_kind = _1; p_pcount = _2;
		  p_result = _3; p_fparams = List.rev _4 } in
	(ProcType p, addr_rep, []) )}

locals:
  
    {                  ( [] )}
| _1 = locals _2 = local
    {                  ( _2::_1 )}
| _1 = locals _2 = fixup
    {                  ( _1 )}

local:
  _1 = kind _2 = ident _3 = MARK _4 = int _5 = otype
    {      ( let d = make_def _2 _3 _1 _5 in
	d.d_offset <- _4; d )}

kind:
  _1 = LOCAL
    {            ( VarDef )}
| _1 = PARAM
    {            ( ParamDef )}
| _1 = VPARAM
    {             ( VParamDef )}
| _1 = FIELD
    {            ( FieldDef )}

tname:
  _1 = ident
    {            ( _1 )}
| _1 = ANON
    {           ( anon )}

ident:
  _1 = TAG
    {           ( intern _1 )}

symbol:
  _1 = TAG
    {           ( _1 )}

const:
  _1 = I _2 = NUM
    {            ( IntVal (Int32.of_string _2) )}
| _1 = F _2 = FLO
    {            ( FloVal (float_of_string _2) )}

int:
  _1 = NUM
    {           ( int_of_string _1 )}

prockind:
  _1 = PROC
    {           ( Procedure )}
| _1 = METH
    {           ( Method )}
| _1 = ABSMETH
    {              ( AbsMeth )}

%%
