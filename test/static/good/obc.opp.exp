File "obc.mly", line 28, characters 9-15:
Warning: the token BADTOK is unused.
File "obc.mly", line 31, characters 48-54:
Warning: the token IMPORT is unused.
%{
open Symtab
open Dict
open Tree
open Eval
open Error
open Print

let rcsid = "$Id: obc.mly,v 1.1 2005/08/23 11:15:14 fpottier Exp $"
%}
%{
let parse_error msg =
  syn_error "$ at token '$'" [fStr msg; fToken]

let parse_error2 msg loc2 =
  syn_error2 "$ at token '$'" [fStr msg; fToken] loc2

let lloc () = (symbol_start (), symbol_end ())
let rloc n = (rhs_start n, rhs_end n)

let check_end bx ex loc =
  let ok = match ex with Some s -> s = bx | None -> false in
  if not ok then
    sem_error "expected identifier '$' after END" [fId bx] loc

let check_modname x =
  if x <> !current then
    syn_error "module name does not match file name" []

let make_if arms elsept =
  let build s1 (cond, s2) = makeStmt (IfStmt (cond, s2, s1), no_loc) in
  let s = List.fold_left build elsept arms in
  s.s_guts

(* make_call -- add empty params if needed in procedure call *)
let make_call e =
  match e.e_guts with
      FuncCall _ -> e
    | _ -> makeExpr (FuncCall (e, []), e.e_loc)

let fix e =
  match e.e_guts with
      Decimal s ->
	makeExpr (Const (IntVal (Int32.of_string s), numtype), e.e_loc)
    | _ -> e

let neg e =
  match e.e_guts with
      Decimal s ->
	Const (IntVal (Int32.of_string ("-" ^ s)), numtype)
    | _ ->
	Monop (Uminus, e)

let mkExpr e = makeExpr (e, lloc ())
let mkTypexpr tx = makeTypexpr (tx, lloc ())
%}
%start program
%token ABSTRACT
%token <Symtab.op> ADDOP
%token ARRAY
%token ASSIGN
%token BADTOK
%token BEGIN
%token BUS
%token BY
%token CASE
%token <char> CHAR
%token COLON
%token COMMA
%token CONST
%token <float> DBLCON
%token <string> DECIMAL
%token DO
%token DOT
%token DOTDOT
%token ELSE
%token ELSIF
%token END
%token EQUAL
%token EXIT
%token <float> FLOCON
%token FOR
%token <Symtab.ident> IDENT
%token IF
%token IMPORT
%token IS
%token LBRACE
%token LOCAL
%token LOOP
%token LPAR
%token MINUS
%token MODULE
%token <Symtab.op> MULOP
%token NIL
%token NOT
%token <int32> NUMBER
%token OF
%token PLUS
%token POINTER
%token PROCEDURE
%token RBRACE
%token RECORD
%token <Symtab.op> RELOP
%token REPEAT
%token RETURN
%token RPAR
%token SEMI
%token STAR
%token <string> STRING
%token SUB
%token THEN
%token TO
%token TYPE
%token UNTIL
%token UPARROW
%token VAR
%token VBAR
%token WHILE
%token WITH
%right error
%right SEMI
%right CASE EXIT FOR IF LOOP REPEAT RETURN WHILE WITH
%right COMMA
%right ADDOP EQUAL IS MINUS PLUS RELOP
%right MULOP STAR
%right DOT IDENT LPAR SUB UPARROW
%right BUS RPAR
%type <Tree.program> program
%%

program:
  _1 = MODULE _2 = modname _3 = semi _4 = imports _5 = block _6 = opt_ident _7 = DOT
    { ( check_end _2.x_name _6 (rloc 6);
	  Module (_2, _4, _5, ref []) )}

modname:
  _1 = name
    {           ( check_modname _1.x_name; _1 )}

imports:
  _1 = import
    {             ( [_1] )}
| _1 = imports _2 = COMMA _3 = import
    {                         ( _1 @ [_3] )}

import:
  _1 = name
    {           ( (_1, _1.x_name, ref 0) )}
| _1 = name _2 = ASSIGN _3 = IDENT
    {                       ( (_1, _3, ref 0) )}

block:
  _1 = decls _2 = body _3 = END
    {                    ( Block (_1, _2, ref 0) )}

body:
  
    {                  ( makeStmt (SkipStmt, no_loc) )}
| _1 = BEGIN _2 = stmts
    {                  ( _2 )}

decls:
  
    {                  ( [] )}
| _1 = decls _2 = decl
    {                 ( _1 @ _2 )}

decl:
  _1 = CONST _2 = const_decls
    {                       ( _2 )}
| _1 = VAR _2 = var_decls
    {                   ( _2 )}
| _1 = TYPE _2 = type_decls
    {                     ( _2 )}
| _1 = proc
    {           ( [_1] )}
| _1 = error _2 = SEMI
    {                  ( [] )}

const_decls:
  _1 = const_decl
    {                 ( [_1] )}
| _1 = const_decl _2 = const_decls
    {                           ( _1 :: _2 )}

const_decl:
  _1 = defid _2 = EQUAL _3 = expr _4 = semi
    {                          ( ConstDecl (_1, _3) )}

type_decls:
  _1 = type_decl
    {                ( [_1] )}
| _1 = type_decl _2 = type_decls
    {                         ( _1 :: _2 )}

type_decl:
  _1 = defid _2 = EQUAL _3 = typexpr _4 = semi
    {                              ( TypeDecl (_1, _3) )}

var_decls:
  _1 = var_decl
    {               ( [_1] )}
| _1 = var_decl _2 = var_decls
    {                        ( _1 :: _2 )}

var_decl:
  _1 = defids _2 = COLON _3 = typexpr _4 = semi
    {                              ( VarDecl (VarDef, _1, _3) )}

proc:
  _1 = PROCEDURE _2 = defid _3 = params _4 = semi _5 = block _6 = opt_ident _7 = semi
    {      ( check_end _2.x_name _6 (rloc 6);
        ProcDecl (Procedure, _2, _3, _5) )}
| _1 = PROCEDURE _2 = receiver _3 = defid _4 = params _5 = semi _6 = block _7 = opt_ident _8 = semi
    {      ( check_end _3.x_name _7 (rloc 7);
        let (Heading (ps, r)) = _4 in
        ProcDecl (Method, _3, Heading (_2::ps, r), _6) )}
| _1 = ABSTRACT _2 = PROCEDURE _3 = receiver _4 = defid _5 = params _6 = semi
    {      ( let (Heading (ps, r)) = _5 in
        ProcDecl (AbsMeth, _4, Heading (_3::ps, r), NoBlock) )}
| _1 = PROCEDURE _2 = defid _3 = params _4 = IS _5 = STRING _6 = semi
    {      ( PrimDecl (_2, _3, _5) )}
| _1 = PROCEDURE _2 = error _3 = block _4 = opt_ident _5 = semi
    {      ( DummyDecl )}

receiver:
  _1 = LPAR _2 = defid _3 = COLON _4 = typename _5 = RPAR
    {      ( VarDecl(ParamDef, [_2], _4) )}
| _1 = LPAR _2 = VAR _3 = defid _4 = COLON _5 = typename _6 = RPAR
    {      ( VarDecl(VParamDef, [_3], _5) )}

params:
  
    {                  ( Heading ([], None) )}
| _1 = LPAR _2 = RPAR _3 = result
    {                      ( Heading ([], _3) )}
| _1 = LPAR _2 = formals _3 = RPAR _4 = result
    {                             ( Heading (_2, _4) )}

formals:
  _1 = formal
    {             ( [_1] )}
| _1 = formal _2 = semi _3 = formals
    {                         ( _1 :: _3 )}

formal:
  _1 = defids _2 = COLON _3 = typexpr
    {                         ( VarDecl (ParamDef, _1, _3) )}
| _1 = VAR _2 = defids _3 = COLON _4 = typexpr
    {                             ( VarDecl (VParamDef, _2, _4) )}

result:
  
    {                  ( None )}
| _1 = COLON _2 = qualid
    {                  ( Some _2 )}

opt_ident:
  
    {                  ( None )}
| _1 = IDENT
    {            ( Some _1 )}

stmts:
  _1 = stmts_a
    {              ( makeStmt (SeqStmt (List.rev _1), lloc ()) )}
| _1 = stmts_b
    {              ( makeStmt (SeqStmt (List.rev _1), lloc ()) )}

stmts_a:
  
    {                  ( [] )}
| _1 = stmts_a _2 = SEMI
    {                  ( _1 )}
| _1 = stmts_b _2 = SEMI
    {                  ( _1 )}
| _1 = stmts_b _2 = error _3 = SEMI
    {                        ( _1 )}

stmts_b:
  _1 = stmts_a _2 = stmt0
    {                   ( makeStmt (_2, rloc 2) :: _1 )}
| _1 = stmts_a _2 = stmt1
    {                   ( makeStmt (_2, rloc 2) :: _1 )}
| _1 = stmts_b _2 = missing _3 = stmt1
    {                          ( makeStmt (_3, rloc 3) :: _1 )}

missing:
   %prec error
    {                            ( parse_error "missing ';'" )}

stmt0:
  _1 = designator _2 = ASSIGN _3 = expr
    {                           ( Assign (_1, _3) )}
| _1 = designator
    {                 ( ProcCall (make_call _1) )}

stmt1:
  _1 = RETURN
    {              ( Return None )}
| _1 = RETURN _2 = expr
    {                  ( Return (Some _2) )}
| _1 = if_chain _2 = END
    {                   ( make_if _1 (makeStmt (SkipStmt, no_loc)) )}
| _1 = if_chain _2 = ELSE _3 = stmts _4 = END
    {                             ( make_if _1 _3 )}
| _1 = CASE _2 = expr _3 = OF _4 = case_arms _5 = else_part _6 = END
    {                                          ( CaseStmt (_2, _4, _5) )}
| _1 = CASE _2 = error _3 = case_arms _4 = else_part _5 = END
    {                                          ( ErrStmt )}
| _1 = WHILE _2 = expr _3 = DO _4 = stmts _5 = END
    {                            ( WhileStmt (_2, _4) )}
| _1 = WHILE _2 = error _3 = stmts _4 = END
    {                          ( ErrStmt )}
| _1 = REPEAT _2 = stmts _3 = UNTIL _4 = expr
    {                            ( RepeatStmt (_2, _4) )}
| _1 = LOOP _2 = stmts _3 = END
    {                    ( LoopStmt _2 )}
| _1 = EXIT
    {           ( ExitStmt )}
| _1 = FOR _2 = designator _3 = ASSIGN _4 = expr _5 = TO _6 = expr _7 = by_part _8 = DO _9 = stmts _10 = END
    {      ( ForStmt (_2, _4, _6, _7, _9, ref dummy_def) )}
| _1 = WITH _2 = with_branches _3 = else_part _4 = END
    {      ( WithStmt (_2, _3) )}
| _1 = LOCAL _2 = decls _3 = body _4 = END
    {                         ( LocalStmt (_2, _3) )}
| _1 = error
    {            ( ErrStmt )}

if_chain:
  _1 = IF _2 = expr _3 = THEN _4 = stmts
    {                        ( [(_2,_4)] )}
| _1 = IF _2 = error _3 = stmts
    {                    ( [] )}
| _1 = if_chain _2 = ELSIF _3 = expr _4 = THEN _5 = stmts
    {                                    ( (_3,_5) :: _1 )}
| _1 = if_chain _2 = ELSIF _3 = error _4 = stmts
    {                               ( _1 )}

else_part:
  
    {                  ( None )}
| _1 = ELSE _2 = stmts
    {                 ( Some _2 )}

case_arms:
  _1 = case_arm
    {               ( _1 )}
| _1 = case_arm _2 = VBAR _3 = case_arms
    {                            ( _1 @ _3 )}

case_arm:
  
    {                  ( [] )}
| _1 = elements _2 = COLON _3 = stmts
    {                         ( [(_1, _3)] )}

elements:
  _1 = element
    {              ( [_1] )}
| _1 = element _2 = COMMA _3 = elements
    {                           ( _1 :: _3 )}

element:
  _1 = expr
    {           ( Single _1 )}
| _1 = expr _2 = DOTDOT _3 = expr
    {                      ( Range (_1, _3) )}

with_branches:
  _1 = with_branch
    {                  ( [_1] )}
| _1 = with_branch _2 = VBAR _3 = with_branches
    {                                   ( _1 :: _3 )}

with_branch:
  _1 = name _2 = COLON _3 = qualid _4 = DO _5 = stmts
    {                               ( (_1, _3, _5) )}

by_part:
  
    {                  ( mkExpr (Const (IntVal Int32.one, numtype)) )}
| _1 = BY _2 = expr
    {              ( _2 )}

expr:
  _1 = simple %prec error
    {                        ( _1 )}
| _1 = simple _2 = RELOP _3 = simple
    {                         ( mkExpr (Binop (_2, _1, _3)) )}
| _1 = simple _2 = EQUAL _3 = simple
    {                         ( mkExpr (Binop (Eq, _1, _3)) )}
| _1 = simple _2 = IS _3 = qualid
    {                      ( mkExpr (TypeTest (_1, _3)) )}

simple:
  _1 = term %prec error
    {                      ( fix _1 )}
| _1 = PLUS _2 = term
    {                ( mkExpr (Monop (Uplus, fix _2)) )}
| _1 = MINUS _2 = term
    {                 ( mkExpr (neg _2) )}
| _1 = simple _2 = PLUS _3 = term
    {                      ( mkExpr (Binop (Plus, _1, fix _3)) )}
| _1 = simple _2 = MINUS _3 = term
    {                       ( mkExpr (Binop (Minus, _1, fix _3)) )}
| _1 = simple _2 = ADDOP _3 = term
    {                       ( mkExpr (Binop (_2, _1, fix _3)) )}

term:
  _1 = factor
    {             ( _1 )}
| _1 = term _2 = MULOP _3 = factor
    {                       ( mkExpr (Binop (_2, fix _1, fix _3)) )}
| _1 = term _2 = STAR _3 = factor
    {                      ( mkExpr (Binop (Times, fix _1, fix _3)) )}

factor:
  _1 = NUMBER
    {             ( mkExpr (Const (IntVal _1, numtype)) )}
| _1 = DECIMAL
    {              ( mkExpr (Decimal _1) )}
| _1 = FLOCON
    {             ( mkExpr (Const (FloVal _1, realtype)) )}
| _1 = DBLCON
    {             ( mkExpr (Const (FloVal _1, longreal)) )}
| _1 = CHAR
    {           ( mkExpr (Const (IntVal (Int32.of_int
					    (int_of_char _1)), character)) )}
| _1 = STRING
    {             ( mkExpr (String (save_string _1,
					    String.length _1)) )}
| _1 = NIL
    {           ( mkExpr Nil )}
| _1 = designator %prec error
    {                           ( _1 )}
| _1 = LBRACE _2 = RBRACE
    {                   ( mkExpr (Set []) )}
| _1 = LBRACE _2 = elements _3 = RBRACE
    {                           ( mkExpr (Set _2) )}
| _1 = NOT _2 = factor
    {                 ( mkExpr (Monop (Not, fix _2)) )}
| _1 = LPAR _2 = expr _3 = RPAR
    {                    ( _2 )}
| _1 = LPAR _2 = expr %prec error
    {                          ( parse_error2 "mismatched brackets" (rloc 1);
				  raise Parse_error )}

designator:
  _1 = name
    {           ( mkExpr (Name _1) )}
| _1 = designator _2 = UPARROW
    {                        ( mkExpr (Deref _1) )}
| _1 = designator _2 = SUB _3 = exprs _4 = BUS
    {                             ( let sub a i = mkExpr (Sub (a, i)) in
				  List.fold_left sub _1 _3 )}
| _1 = designator _2 = SUB _3 = exprs %prec error
    {      ( parse_error2 "mismatched brackets" (rloc 2);
	raise Parse_error )}
| _1 = designator _2 = DOT _3 = name
    {                         ( mkExpr (Select (_1, _3)) )}
| _1 = designator _2 = actuals
    {                        ( mkExpr (FuncCall (_1, _2)) )}

actuals:
  _1 = LPAR _2 = RPAR
    {                ( [] )}
| _1 = LPAR _2 = exprs _3 = RPAR
    {                     ( _2 )}
| _1 = LPAR _2 = exprs %prec error
    {                           ( parse_error2
				    "mismatched brackets in procedure call"
				    (rloc 1);
				  raise Parse_error )}

exprs:
  _1 = expr %prec error
    {                      ( [_1] )}
| _1 = expr _2 = COMMA _3 = exprs
    {                      ( _1 :: _3 )}

typexpr:
  _1 = typename
    {               ( _1 )}
| _1 = LPAR _2 = defids _3 = RPAR
    {                      ( mkTypexpr (Enum _2) )}
| _1 = POINTER _2 = TO _3 = typexpr
    {                        ( mkTypexpr (Pointer _3) )}
| _1 = ARRAY _2 = exprs _3 = OF _4 = typexpr
    {                           ( let array n t = mkTypexpr (Array (n, t)) in
				  List.fold_right array _2 _4 )}
| _1 = ARRAY _2 = OF _3 = typexpr
    {                      ( mkTypexpr (Flex _3) )}
| _1 = absmark _2 = RECORD _3 = parent _4 = fields _5 = END
    {    ( mkTypexpr (Record (_1, _3, _4)) )}
| _1 = PROCEDURE _2 = params
    {                      ( mkTypexpr (Proc _2) )}

typename:
  _1 = qualid
    {             ( mkTypexpr (TypeName _1) )}

absmark:
  
    {                  ( false )}
| _1 = ABSTRACT
    {               ( true )}

parent:
  
    {                  ( None )}
| _1 = LPAR _2 = typename _3 = RPAR
    {                        ( Some _2 )}

fields:
  _1 = fieldlist
    {                ( _1 )}
| _1 = fieldlist _2 = SEMI _3 = fields
    {                          ( _1 @ _3 )}

fieldlist:
  
    {                  ( [] )}
| _1 = defids _2 = COLON _3 = typexpr
    {                         ( [VarDecl (FieldDef, _1, _3)] )}

qualid:
  _1 = IDENT %prec DOT
    {                     ( makeName (!current, _1, lloc ()) )}
| _1 = IDENT _2 = DOT _3 = IDENT
    {                     ( makeName (_1, _3, lloc ()) )}

name:
  _1 = IDENT
    {            ( makeName (!current, _1, lloc ()) )}

defids:
  _1 = defid
    {            ( [_1] )}
| _1 = defid _2 = COMMA _3 = defids
    {                        ( _1 :: _3 )}

defid:
  _1 = IDENT _2 = export
    {                  ( makeDefId (_1, _2, rloc 1) )}

export:
  
    {                  ( Private )}
| _1 = MINUS
    {            ( ReadOnly )}
| _1 = STAR
    {           ( Visible )}

semi:
  _1 = SEMI
    {           ( () )}
| _1 = COMMA
    {            ( parse_error "expected ';'" )}
|  %prec error
    {                            ( parse_error "missing ';'" )}

%%
