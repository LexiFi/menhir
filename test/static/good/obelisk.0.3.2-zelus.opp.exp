%{

open Lexing
open Location
open Parsetree

let make desc start_pos end_pos =
  { desc = desc; loc = Loc(start_pos.pos_cnum, end_pos.pos_cnum) }

let unop op e = Eapp(Eop(false, Name(op)), [e])

let unary_minus op e =
  match op, e.desc with
    | "-", Econst(Eint v) -> Econst(Eint(-v))
    | ("-" | "_."), Econst(Efloat v) -> Econst(Efloat(-.v))
    | _ -> unop ("~" ^ op) e

let unary_minus_int x = -x
and unary_minus_float x = -.x

let binop op e1 e2 = Eapp(Eop(false, Name(op)), [e1;e2])

let params p = match p.desc with | Etuplepat(l) -> l | _ -> [p]
let arg e = match e.desc with | Etuple(l) -> l | _ -> [e]

let typearg ty =
  match ty.desc with
    | Etypetuple(l) -> l | _ -> [ty]

let scond_true start_pos end_pos =
  make (Econdexp(make (Econst(Ebool(true))) start_pos end_pos))
    start_pos end_pos

(* Temporary solution: put a block arround a single equation *)
let block_of_equation ({ desc = desc; loc = loc } as eq) =
  match desc with
    | EQblock(b) -> b
    | _ -> { desc = { b_locals = []; b_vars = []; b_body = [eq] }; loc = loc }

%}
%start implementation_file
%start interface_file
%token ADFUN
%token AFTER
%token AFUN
%token AMPERAMPER
%token AMPERSAND
%token AND
%token AS
%token ATOMIC
%token AUTOMATON
%token BAR
%token BARBAR
%token <bool> BOOL
%token CFUN
%token <char> CHAR
%token COLON
%token COMMA
%token <string> CONSTRUCTOR
%token CONTINUE
%token DEFAULT
%token DER
%token DFUN
%token DISC
%token DISCRETE
%token DO
%token DONE
%token DOT
%token ELSE
%token EMIT
%token END
%token EOF
%token EQUAL
%token EQUALEQUAL
%token EVERY
%token FBY
%token <float> FLOAT
%token FUN
%token HYBRID
%token <string> IDENT
%token IF
%token IN
%token <string> INFIX0
%token <string> INFIX1
%token <string> INFIX2
%token <string> INFIX3
%token <string> INFIX4
%token INIT
%token INLINE
%token <int> INT
%token LAST
%token LBRACE
%token LET
%token LOCAL
%token LPAREN
%token MATCH
%token MINUSGREATER
%token NEXT
%token NODE
%token ON
%token OPEN
%token OR
%token PERIOD
%token PLUSEQUAL
%token PRE
%token <string> PREFIX
%token PRESENT
%token QUOTE
%token RBRACE
%token REC
%token RESET
%token RPAREN
%token SEMI
%token SEMISEMI
%token STAR
%token <string> STRING
%token <string> SUBTRACTIVE
%token TEST
%token THEN
%token TYPE
%token UNDERSCORE
%token UNLESS
%token UNSAFE
%token UNTIL
%token UP
%token VAL
%token WHERE
%token WITH
%nonassoc prec_no_end
%nonassoc END
%right IN
%right prec_seq
%right SEMI
%nonassoc prec_ident
%right prec_list
%left EVERY
%left AUTOMATON
%left INIT
%left UNTIL
%left UNLESS
%nonassoc ELSE
%left AS
%left BAR
%left COMMA
%left RPAREN
%right MINUSGREATER
%left BARBAR OR
%left AMPERAMPER AMPERSAND
%left EQUAL INFIX0
%right INFIX1
%left INFIX2 SUBTRACTIVE
%left INFIX3 STAR
%left ON
%left INFIX4
%left AFTER
%right prec_uminus
%right FBY
%right DISC PRE TEST UP
%right PREFIX
%left DOT
%type <Parsetree.implementation list> implementation_file
%type <Parsetree.interface list> interface_file
%%

list_of_AND_localized_equation_desc__:
  x = localized_equation_desc_
    {        ( [x] )}
| r = list_of_AND_localized_equation_desc__ _2 = AND x = localized_equation_desc_
    {                            ( x :: r )}

list_of_BAR_CONSTRUCTOR_:
  x = CONSTRUCTOR
    {        ( [x] )}
| r = list_of_BAR_CONSTRUCTOR_ _2 = BAR x = CONSTRUCTOR
    {                            ( x :: r )}

list_of_COMMA_IDENT_:
  x = IDENT
    {        ( [x] )}
| r = list_of_COMMA_IDENT_ _2 = COMMA x = IDENT
    {                            ( x :: r )}

list_of_COMMA_one_local_:
  x = one_local
    {        ( [x] )}
| r = list_of_COMMA_one_local_ _2 = COMMA x = one_local
    {                            ( x :: r )}

list_of_COMMA_type_var_:
  x = type_var
    {        ( [x] )}
| r = list_of_COMMA_type_var_ _2 = COMMA x = type_var
    {                            ( x :: r )}

localized_equation_desc_:
  x = equation_desc
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
        ( make x _startpos _endpos )}

localized_expression_desc_:
  x = expression_desc
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
        ( make x _startpos _endpos )}

localized_implementation_:
  x = implementation
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
        ( make x _startpos _endpos )}

localized_interface_:
  x = interface
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
        ( make x _startpos _endpos )}

localized_simple_equation_desc_:
  x = simple_equation_desc
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
        ( make x _startpos _endpos )}

optional_default_or_init_:
  
    {      ( None )}
| x = default_or_init
    {      ( Some(x) )}

implementation_file:
  _1 = EOF
    {      ( [] )}
| i = decl_list_localized_implementation__ _2 = EOF
    {      ( List.rev i )}

decl_list_localized_implementation__:
  dl = decl_list_localized_implementation__ x = localized_implementation_ _3 = opt_semi_semi
    {      ( x :: dl )}
| x = localized_implementation_ _2 = opt_semi_semi
    {      ( [x] )}

decl_list_localized_interface__:
  dl = decl_list_localized_interface__ x = localized_interface_ _3 = opt_semi_semi
    {      ( x :: dl )}
| x = localized_interface_ _2 = opt_semi_semi
    {      ( [x] )}

opt_semi_semi:
  
    {                ()}
| _1 = SEMISEMI
    {             ()}

implementation:
  _1 = OPEN c = CONSTRUCTOR
    {      ( Eopen c )}
| _1 = TYPE tp = type_params id = IDENT td = type_declaration
    {      ( Etypedecl(id, tp, td) )}
| _1 = LET ide = IDENT _3 = EQUAL seq = seq_expression
    {      ( Econstdecl(ide, seq) )}
| _1 = LET i = IDENT fp = fun_params _4 = EQUAL seq = seq_expression
    {      ( Efundecl(i, A, false, fp, seq) )}
| _1 = LET i = IDENT fp = fun_params _4 = EQUAL seq = seq_expression _6 = WHERE r = is_rec l = list_of_AND_localized_equation_desc__
    {let eqs =                                                ( l ) in
let _endpos_eqs_ = _endpos_l_ in
      ( Efundecl(i, A, false, fp, make(Elet(r, eqs, seq))
                              _startpos_seq_ _endpos_eqs_))}
| _1 = is_let a = is_atomic k = kind i = IDENT fp = fun_params _6 = EQUAL seq = seq_expression
    {      ( Efundecl(i, k, a, fp, seq) )}
| _1 = is_let a = is_atomic k = kind i = IDENT fp = fun_params _6 = EQUAL seq = seq_expression _8 = WHERE r = is_rec l = list_of_AND_localized_equation_desc__
    {let eqs =                                                ( l ) in
let _endpos_eqs_ = _endpos_l_ in
      ( Efundecl(i, k, a, fp, make(Elet(r, eqs, seq))
                              _startpos_seq_ _endpos_eqs_) )}

is_rec:
  _1 = REC
    {        ( true )}
| 
    {        ( false )}

is_atomic:
  _1 = ATOMIC
    {           ( true )}
| 
    {    ( false )}

is_let:
  _1 = LET
    {        ( )}
| 
    {    ( )}

fun_params:
  p = pattern
    {      ( params p )}

interface_file:
  _1 = EOF
    {      ( [] )}
| il = decl_list_localized_interface__ _2 = EOF
    {      ( List.rev il )}

interface:
  _1 = OPEN c = CONSTRUCTOR
    {      ( Einter_open(c) )}
| _1 = TYPE tp = type_params i = IDENT td = type_declaration
    {      ( Einter_typedecl(i, tp, td) )}
| _1 = VAL i = ide _3 = COLON t = type_expression
    {      ( Einter_constdecl(i, t) )}
| _1 = VAL _2 = UNSAFE i = ide _4 = COLON ta = type_expression a = arrow te = type_expression
    {      ( Einter_fundecl(i, { sig_inputs = typearg ta; sig_output = te;
                            sig_kind = a; sig_safe = false }) )}
| _1 = VAL i = ide _3 = COLON ta = type_expression a = arrow te = type_expression
    {    ( Einter_fundecl(i, { sig_inputs = typearg ta; sig_output = te;
                          sig_kind = a; sig_safe = true }) )}

type_declaration:
  
    {      ( Eabstract_type )}
| _1 = EQUAL e = list_of_BAR_CONSTRUCTOR_
    {      ( Evariant_type (e) )}
| _1 = EQUAL _2 = LBRACE s = label_list_label_type_ _4 = RBRACE
    {      ( Erecord_type (s) )}
| _1 = EQUAL t = type_expression
    {      ( Eabbrev(t) )}

type_params:
  _1 = LPAREN tvl = list_of_COMMA_type_var_ _3 = RPAREN
    {      ( tvl )}
| tv = type_var
    {      ( [tv] )}
| 
    {      ( [] )}

label_list_label_type_:
  x = label_type
    {      ( [x] )}
| x = label_type _2 = SEMI
    {      ( [x] )}
| x = label_type _2 = SEMI ll = label_list_label_type_
    {      ( x :: ll )}

label_type:
  i = IDENT _2 = COLON t = type_expression
    {  ( (i, t) )}

equation_empty_list:
  
    {      ( [] )}
| l = list_of_AND_localized_equation_desc__
    {let eq_list =                                                ( l ) in
      ( eq_list )}

optional_init:
  
    {      ( None )}
| _1 = INIT e = expression
    {      ( Some(e) )}

simple_equation_desc:
  _1 = AUTOMATON _2 = opt_bar a = automaton_handlers_equation_empty_list_ _4 = opt_end
    {    ( EQautomaton(List.rev a, None) )}
| _1 = AUTOMATON _2 = opt_bar a = automaton_handlers_equation_empty_list_ _4 = INIT s = state
    {    ( EQautomaton(List.rev a, Some(s)) )}
| _1 = MATCH e = seq_expression _3 = WITH _4 = opt_bar m = match_handlers_block_of_equation_ _6 = opt_end
    {    ( EQmatch(e, List.rev m) )}
| _1 = IF e = seq_expression _3 = THEN b1 = block_of_equation _5 = ELSE b2 = block_of_equation _7 = opt_end
    {    ( EQifthenelse(e, b1, b2) )}
| _1 = PRESENT _2 = opt_bar p = present_handlers_block_of_equation_ _4 = opt_end
    {    ( EQpresent(List.rev p, None) )}
| _1 = PRESENT _2 = opt_bar p = present_handlers_block_of_equation_ _4 = ELSE b = block_of_equation _6 = opt_end
    {    ( EQpresent(List.rev p, Some(b)) )}
| _1 = RESET l = list_of_AND_localized_equation_desc__ _3 = EVERY e = expression
    {let eq =                                                ( l ) in
    ( EQreset(eq, e) )}
| l = let_list lo = local_list _3 = DO eq_list = equation_empty_list _5 = DONE
    {let _endpos = _endpos__5_ in
let _startpos = _startpos_l_ in
    ( EQblock(make { b_locals = l; b_vars = lo; b_body = eq_list }
		_startpos _endpos) )}

equation_desc:
  eq = simple_equation_desc
    {    ( eq )}
| p = pattern _2 = EQUAL e = expression
    {    ( EQeq(p, e) )}
| i = ide _2 = PLUSEQUAL e = expression
    {    ( EQpluseq(i, e) )}
| _1 = PERIOD p = pattern _3 = EQUAL e = period_expression
    {    ( EQeq(p, make (Eperiod(e)) _startpos_e_ _endpos_e_) )}
| _1 = DER i = ide _3 = EQUAL e = expression opt = optional_init
    {      ( EQder(i, e, opt, []) )}
| _1 = DER i = ide _3 = EQUAL e = expression opt = optional_init _6 = RESET _7 = opt_bar pe = present_handlers_expression_
    {      ( EQder(i, e, opt, List.rev pe) )}
| _1 = NEXT i = ide _3 = EQUAL e = expression
    {      ( EQnext(i, e, None) )}
| _1 = NEXT i = ide _3 = EQUAL e = expression _5 = INIT e0 = expression
    {      ( EQnext(i, e, Some(e0)) )}
| _1 = INIT i = ide _3 = EQUAL e = expression
    {      ( EQinit(i, e) )}
| _1 = EMIT i = ide
    {      ( EQemit(i, None) )}
| _1 = EMIT i = ide _3 = EQUAL e = expression
    {      ( EQemit(i, Some(e)) )}

opt_end:
   %prec prec_no_end
    {    ( () )}
| _1 = END
    {        ( () )}

automaton_handlers_equation_empty_list_:
  a = automaton_handler_equation_empty_list_
    {      ( [a] )}
| ahs = automaton_handlers_equation_empty_list_ _2 = BAR a = automaton_handler_equation_empty_list_
    {      ( a :: ahs )}

automaton_handlers_expression_:
  a = automaton_handler_expression_
    {      ( [a] )}
| ahs = automaton_handlers_expression_ _2 = BAR a = automaton_handler_expression_
    {      ( a :: ahs )}

automaton_handler_equation_empty_list_:
  sp = state_pat _2 = MINUSGREATER b = block_equation_empty_list_ _4 = DONE
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_sp_ in
    ( make { s_state = sp; s_block = b; s_until = []; s_unless = [] } _startpos _endpos)}
| sp = state_pat _2 = MINUSGREATER b = block_equation_empty_list_ _4 = THEN st = state
    {let _endpos = _endpos_st_ in
let _startpos = _startpos_sp_ in
    ( make { s_state = sp; s_block = b;
             s_until =
               [{ e_cond = scond_true _endpos_b_ _startpos_st_;
                  e_reset = true; e_block = None; e_next_state = st }];
	   s_unless = [] }
      _startpos _endpos)}
| sp = state_pat _2 = MINUSGREATER b = block_equation_empty_list_ _4 = CONTINUE st = state
    {let _endpos = _endpos_st_ in
let _startpos = _startpos_sp_ in
    ( make { s_state = sp;
             s_block = b;
             s_until =
               [{ e_cond = scond_true _endpos_b_ _startpos_st_;
                  e_reset = false;
                  e_block = None; e_next_state = st }];
	     s_unless = [] } _startpos _endpos )}
| sp = state_pat _2 = MINUSGREATER b = block_equation_empty_list_ _4 = THEN emit = emission st = state
    {let _endpos = _endpos_st_ in
let _startpos = _startpos_sp_ in
    ( make { s_state = sp; s_block = b;
             s_until =
               [{ e_cond = scond_true _endpos_b_ _startpos_emit_;
                  e_reset = true; e_block = Some(emit); e_next_state = st}];
	     s_unless = [] } _startpos _endpos )}
| sp = state_pat _2 = MINUSGREATER b = block_equation_empty_list_ _4 = CONTINUE emit = emission st = state
    {let _endpos = _endpos_st_ in
let _startpos = _startpos_sp_ in
    ( make { s_state = sp;
             s_block = b;
             s_until = [{ e_cond = scond_true _endpos_b_ _startpos_emit_;
                          e_reset = false; e_block = Some(emit);
                          e_next_state = st}];
	     s_unless = [] } _startpos _endpos )}
| sp = state_pat _2 = MINUSGREATER b = block_equation_empty_list_ _4 = UNTIL e_until = escape_list
    {let _endpos = _endpos_e_until_ in
let _startpos = _startpos_sp_ in
     ( make { s_state = sp; s_block = b; s_until = List.rev e_until; s_unless = [] }
       _startpos _endpos )}
| sp = state_pat _2 = MINUSGREATER b = block_equation_empty_list_ _4 = UNLESS e_unless = escape_list
    {let _endpos = _endpos_e_unless_ in
let _startpos = _startpos_sp_ in
    ( make { s_state = sp; s_block = b; s_until = []; s_unless = List.rev e_unless }
      _startpos _endpos )}
| sp = state_pat _2 = MINUSGREATER b = block_equation_empty_list_ _4 = UNTIL e_until = escape_list _6 = UNLESS e_unless = escape_list
    {let _endpos = _endpos_e_unless_ in
let _startpos = _startpos_sp_ in
    ( make { s_state = sp; s_block = b;
	     s_until = List.rev e_until; s_unless = List.rev e_unless }
      _startpos _endpos )}

automaton_handler_expression_:
  sp = state_pat _2 = MINUSGREATER b = block_expression_ _4 = DONE
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_sp_ in
    ( make { s_state = sp; s_block = b; s_until = []; s_unless = [] } _startpos _endpos)}
| sp = state_pat _2 = MINUSGREATER b = block_expression_ _4 = THEN st = state
    {let _endpos = _endpos_st_ in
let _startpos = _startpos_sp_ in
    ( make { s_state = sp; s_block = b;
             s_until =
               [{ e_cond = scond_true _endpos_b_ _startpos_st_;
                  e_reset = true; e_block = None; e_next_state = st }];
	   s_unless = [] }
      _startpos _endpos)}
| sp = state_pat _2 = MINUSGREATER b = block_expression_ _4 = CONTINUE st = state
    {let _endpos = _endpos_st_ in
let _startpos = _startpos_sp_ in
    ( make { s_state = sp;
             s_block = b;
             s_until =
               [{ e_cond = scond_true _endpos_b_ _startpos_st_;
                  e_reset = false;
                  e_block = None; e_next_state = st }];
	     s_unless = [] } _startpos _endpos )}
| sp = state_pat _2 = MINUSGREATER b = block_expression_ _4 = THEN emit = emission st = state
    {let _endpos = _endpos_st_ in
let _startpos = _startpos_sp_ in
    ( make { s_state = sp; s_block = b;
             s_until =
               [{ e_cond = scond_true _endpos_b_ _startpos_emit_;
                  e_reset = true; e_block = Some(emit); e_next_state = st}];
	     s_unless = [] } _startpos _endpos )}
| sp = state_pat _2 = MINUSGREATER b = block_expression_ _4 = CONTINUE emit = emission st = state
    {let _endpos = _endpos_st_ in
let _startpos = _startpos_sp_ in
    ( make { s_state = sp;
             s_block = b;
             s_until = [{ e_cond = scond_true _endpos_b_ _startpos_emit_;
                          e_reset = false; e_block = Some(emit);
                          e_next_state = st}];
	     s_unless = [] } _startpos _endpos )}
| sp = state_pat _2 = MINUSGREATER b = block_expression_ _4 = UNTIL e_until = escape_list
    {let _endpos = _endpos_e_until_ in
let _startpos = _startpos_sp_ in
     ( make { s_state = sp; s_block = b; s_until = List.rev e_until; s_unless = [] }
       _startpos _endpos )}
| sp = state_pat _2 = MINUSGREATER b = block_expression_ _4 = UNLESS e_unless = escape_list
    {let _endpos = _endpos_e_unless_ in
let _startpos = _startpos_sp_ in
    ( make { s_state = sp; s_block = b; s_until = []; s_unless = List.rev e_unless }
      _startpos _endpos )}
| sp = state_pat _2 = MINUSGREATER b = block_expression_ _4 = UNTIL e_until = escape_list _6 = UNLESS e_unless = escape_list
    {let _endpos = _endpos_e_unless_ in
let _startpos = _startpos_sp_ in
    ( make { s_state = sp; s_block = b;
	     s_until = List.rev e_until; s_unless = List.rev e_unless }
      _startpos _endpos )}

escape:
  _1 = scondpat _2 = THEN _3 = state
    {      ( { e_cond = _1; e_reset = true; e_block = None; e_next_state = _3 } )}
| _1 = scondpat _2 = CONTINUE _3 = state
    {      ( { e_cond = _1; e_reset = false; e_block = None; e_next_state = _3 } )}
| _1 = scondpat _2 = THEN _3 = emission _4 = state
    {      ( { e_cond = _1; e_reset = true; e_block = Some(_3); e_next_state = _4 } )}
| _1 = scondpat _2 = CONTINUE _3 = emission _4 = state
    {      ( { e_cond = _1; e_reset = false; e_block = Some(_3); e_next_state = _4 } )}

escape_list:
  e = escape
    {      ( [e] )}
| el = escape_list _2 = ELSE e = escape
    {      ( e :: el )}

state:
  c = CONSTRUCTOR
    {let _endpos = _endpos_c_ in
let _startpos = _startpos_c_ in
      ( make (Estate0(c)) _startpos _endpos )}
| c = CONSTRUCTOR _2 = LPAREN e = expression _4 = RPAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_c_ in
      ( make (Estate1(c, [e])) _startpos _endpos )}
| c = CONSTRUCTOR _2 = LPAREN l = expression_comma_list _4 = RPAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_c_ in
      ( make (Estate1(c, l)) _startpos _endpos )}

state_pat:
  c = CONSTRUCTOR
    {let _endpos = _endpos_c_ in
let _startpos = _startpos_c_ in
      ( make (Estate0pat(c)) _startpos _endpos )}
| c = CONSTRUCTOR _2 = LPAREN l = list_of_COMMA_IDENT_ _4 = RPAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_c_ in
      ( make (Estate1pat(c, l)) _startpos _endpos )}

scondpat:
  e = simple_expression p = simple_pattern
    {let _endpos = _endpos_p_ in
let _startpos = _startpos_e_ in
      ( make (Econdpat(e, p)) _startpos _endpos )}
| e = simple_expression
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_e_ in
      ( make (Econdexp(e)) _startpos _endpos )}
| _1 = UP e = simple_expression
    {let _endpos = _endpos_e_ in
let _startpos = _startpos__1_ in
      ( make
          (Econdexp (make (Eapp(Eup, [e])) _startpos_e_ _endpos_e_))
          _startpos _endpos )}
| scpat1 = scondpat _2 = AMPERSAND scpat2 = scondpat
    {let _endpos = _endpos_scpat2_ in
let _startpos = _startpos_scpat1_ in
      ( make (Econdand(scpat1, scpat2)) _startpos _endpos )}
| scpat1 = scondpat _2 = BAR scpat2 = scondpat
    {let _endpos = _endpos_scpat2_ in
let _startpos = _startpos_scpat1_ in
      ( make (Econdor(scpat1, scpat2)) _startpos _endpos )}
| scpat1 = scondpat _2 = ON e = simple_expression
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_scpat1_ in
      ( make (Econdon(scpat1, e)) _startpos _endpos )}

block_equation_empty_list_:
  l = let_list lo = local_list _3 = DO x = equation_empty_list
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_l_ in
      ( make { b_locals = l; b_vars = lo; b_body = x } _startpos _endpos )}

block_expression_:
  l = let_list lo = local_list _3 = DO x = expression
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_l_ in
      ( make { b_locals = l; b_vars = lo; b_body = x } _startpos _endpos )}

block_of_equation:
  eq = localized_simple_equation_desc_
    {                                          ( block_of_equation(eq) )}

emission:
  l1 = one_let _2 = IN l2 = let_list
    {let _endpos = _endpos_l2_ in
let _startpos = _startpos_l1_ in
    ( make { b_vars = []; b_locals = l1 :: l2; b_body = [] } _startpos _endpos )}
| l = let_list lo = local_list _3 = DO eq = equation_empty_list _5 = IN
    {let _endpos = _endpos__5_ in
let _startpos = _startpos_l_ in
      ( make { b_vars = lo; b_locals = l; b_body = eq } _startpos _endpos )}

let_list:
  
    {      ( [] )}
| o = one_let _2 = IN l = let_list
    {      ( o :: l )}

one_let:
  _1 = LET l = list_of_AND_localized_equation_desc__
    {let eq =                                                ( l ) in
let _endpos_eq_ = _endpos_l_ in
let _endpos = _endpos_eq_ in
let _startpos = _startpos__1_ in
      ( make (false, List.rev eq) _startpos _endpos )}
| _1 = LET _2 = REC l = list_of_AND_localized_equation_desc__
    {let eq =                                                ( l ) in
let _endpos_eq_ = _endpos_l_ in
let _endpos = _endpos_eq_ in
let _startpos = _startpos__1_ in
      ( make (true, List.rev eq) _startpos _endpos )}

local_list:
  
    {      ( [] )}
| _1 = LOCAL o = list_of_COMMA_one_local_ _3 = IN l = local_list
    {      ( o @ l )}

one_local:
  i = ide v = optional_default_or_init_ c = opt_combine
    {let _endpos = _endpos_c_ in
let _startpos = _startpos_i_ in
    ( make { vardec_name = i; vardec_default = v; vardec_combine = c }
	_startpos _endpos )}

default_or_init:
  _1 = DEFAULT c = constant
    {      ( Default(c) )}
| _1 = INIT c = constant
    {    ( Init(c) )}

opt_combine:
  
    {      ( None )}
| _1 = WITH i = ext_ident
    {    ( Some(i) )}

constant:
  i = atomic_constant
    {    ( Cimmediate(i) )}
| i = ext_ident
    {    ( Cglobal(i) )}

opt_bar:
  _1 = BAR
    {                    ( () )}
| 
    {                    ( () )}

present_handlers_block_of_equation_:
  p = present_handler_block_of_equation_
    {      ( [p ] )}
| ps = present_handlers_block_of_equation_ _2 = BAR p = present_handler_block_of_equation_
    {      ( p :: ps )}

present_handlers_expression_:
  p = present_handler_expression_
    {      ( [p ] )}
| ps = present_handlers_expression_ _2 = BAR p = present_handler_expression_
    {      ( p :: ps )}

present_handler_block_of_equation_:
  sc = scondpat _2 = MINUSGREATER x = block_of_equation
    {      ( { p_cond = sc; p_body = x } )}

present_handler_expression_:
  sc = scondpat _2 = MINUSGREATER x = expression
    {      ( { p_cond = sc; p_body = x } )}

match_handlers_block_of_equation_:
  m = match_handler_block_of_equation_
    {      ( [m ] )}
| mh = match_handlers_block_of_equation_ _2 = BAR m = match_handler_block_of_equation_
    {      ( m :: mh )}

match_handlers_expression_:
  m = match_handler_expression_
    {      ( [m ] )}
| mh = match_handlers_expression_ _2 = BAR m = match_handler_expression_
    {      ( m :: mh )}

match_handler_block_of_equation_:
  p = pattern _2 = MINUSGREATER x = block_of_equation
    {      ( { m_pat = p; m_body = x } )}

match_handler_expression_:
  p = pattern _2 = MINUSGREATER x = expression
    {      ( { m_pat = p; m_body = x } )}

pattern:
  p = simple_pattern
    {      ( p )}
| p = pattern _2 = AS i = IDENT
    {let _endpos = _endpos_i_ in
let _startpos = _startpos_p_ in
      ( make (Ealiaspat(p, i)) _startpos _endpos )}
| p1 = pattern _2 = BAR p2 = pattern
    {let _endpos = _endpos_p2_ in
let _startpos = _startpos_p1_ in
      ( make (Eorpat(p1, p2)) _startpos _endpos )}
| p = pattern_comma_list %prec prec_list
    {let _endpos = _endpos_p_ in
let _startpos = _startpos_p_ in
      ( make (Etuplepat(List.rev p)) _startpos _endpos )}

simple_pattern:
  a = atomic_constant
    {let _endpos = _endpos_a_ in
let _startpos = _startpos_a_ in
      ( make (Econstpat a) _startpos _endpos )}
| _1 = SUBTRACTIVE i = INT
    {let _endpos = _endpos_i_ in
let _startpos = _startpos__1_ in
      ( make (Econstpat(Eint(unary_minus_int i))) _startpos _endpos )}
| _1 = SUBTRACTIVE f = FLOAT
    {let _endpos = _endpos_f_ in
let _startpos = _startpos__1_ in
      ( make (Econstpat(Efloat(unary_minus_float f))) _startpos _endpos )}
| c = constructor
    {let _endpos = _endpos_c_ in
let _startpos = _startpos_c_ in
      ( make (Econstr0pat(c)) _startpos _endpos )}
| i = ide
    {let _endpos = _endpos_i_ in
let _startpos = _startpos_i_ in
      ( make (Evarpat i) _startpos _endpos )}
| _1 = LPAREN p = pattern _3 = RPAREN
    {      ( p )}
| _1 = LPAREN p = pattern_comma_list _3 = RPAREN
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
      ( make (Etuplepat (List.rev p)) _startpos _endpos )}
| _1 = LPAREN _2 = RPAREN
    {let _endpos = _endpos__2_ in
let _startpos = _startpos__1_ in
      ( make (Econstpat(Evoid)) _startpos _endpos )}
| _1 = UNDERSCORE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
      ( make Ewildpat _startpos _endpos )}
| _1 = LPAREN p = pattern _3 = COLON t = type_expression _5 = RPAREN
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
      ( make (Etypeconstraintpat(p, t)) _startpos _endpos )}
| _1 = LBRACE p = pattern_label_list _3 = RBRACE
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
      ( make (Erecordpat(p)) _startpos _endpos )}

pattern_comma_list:
  p1 = pattern _2 = COMMA p2 = pattern
    {      ( [p2; p1] )}
| pc = pattern_comma_list _2 = COMMA p = pattern
    {      ( p :: pc )}

pattern_label_list:
  p = pattern_label _2 = SEMI pl = pattern_label_list
    {      ( p :: pl )}
| p = pattern_label
    {      ( [p] )}
| _1 = UNDERSCORE
    {      ( [] )}
| 
    {      ( [] )}

pattern_label:
  ei = ext_ident _2 = EQUAL p = pattern
    {      ( (ei, p) )}

seq_expression:
  e = expression _2 = SEMI seq = seq_expression
    {let _endpos = _endpos_seq_ in
let _startpos = _startpos_e_ in
      ( make (Eseq(e, seq)) _startpos _endpos )}
| e = expression %prec prec_seq
    {      ( e )}

simple_expression:
  desc = simple_expression_desc
    {let _endpos = _endpos_desc_ in
let _startpos = _startpos_desc_ in
      ( make desc _startpos _endpos )}

simple_expression_desc:
  c = constructor
    {      ( Econstr0(c) )}
| i = ext_ident
    {      ( Evar i )}
| a = atomic_constant
    {      ( Econst a )}
| _1 = LBRACE l = label_expression_list _3 = RBRACE
    {      ( Erecord(l) )}
| _1 = LPAREN _2 = RPAREN
    {      ( Econst Evoid )}
| _1 = LPAREN e = expression_comma_list _3 = RPAREN
    {      ( Etuple (List.rev e) )}
| _1 = LPAREN e = seq_expression _3 = RPAREN
    {      ( e.desc )}
| _1 = LPAREN e = simple_expression _3 = COLON t = type_expression _5 = RPAREN
    {      ( Etypeconstraint(e, t) )}

expression_comma_list:
  ecl = expression_comma_list _2 = COMMA e = expression
    {      ( e :: ecl )}
| e1 = expression _2 = COMMA e2 = expression
    {      ( [e2; e1] )}

expression:
  x = localized_expression_desc_
    {    ( x )}

expression_desc:
  e = simple_expression_desc
    {      ( e )}
| e = expression_comma_list %prec prec_list
    {      ( Etuple(List.rev e) )}
| e1 = expression _2 = FBY e2 = expression
    {      ( Eapp(Efby, [e1; e2]) )}
| _1 = PRE e = expression
    {      ( Eapp(Eunarypre, [e]) )}
| _1 = INIT
    {      ( Eapp(Einitial, []) )}
| _1 = UP e = expression
    {      ( Eapp(Eup, [e]) )}
| _1 = TEST e = expression
    {      (  Eapp(Etest, [e]) )}
| _1 = DISC e = expression
    {      (  Eapp(Edisc, [e]) )}
| i = ext_ident e = simple_expression
    {      (  Eapp(Eop(false, i), arg e) )}
| _1 = INLINE i = ext_ident e = simple_expression
    {      (  Eapp(Eop(true, i), arg e) )}
| s = SUBTRACTIVE e = expression %prec prec_uminus
    {      ( unary_minus s e )}
| e1 = expression i = INFIX4 e2 = expression
    {      ( binop i e1 e2 )}
| e1 = expression i = INFIX3 e2 = expression
    {      ( binop i e1 e2 )}
| e1 = expression i = INFIX2 e2 = expression
    {      ( binop i e1 e2 )}
| e1 = expression i = INFIX1 e2 = expression
    {      ( binop i e1 e2 )}
| e1 = expression i = INFIX0 e2 = expression
    {      ( binop i e1 e2 )}
| e1 = expression _2 = EQUAL e2 = expression
    {      ( binop "=" e1 e2 )}
| e1 = expression _2 = OR e2 = expression
    {      ( binop "or" e1 e2 )}
| e1 = expression _2 = STAR e2 = expression
    {      ( binop "*" e1 e2 )}
| e1 = expression _2 = AMPERSAND e2 = expression
    {      ( binop "&" e1 e2 )}
| e1 = expression s = SUBTRACTIVE e2 = expression
    {      ( binop s e1 e2 )}
| e1 = expression _2 = AMPERAMPER e2 = expression
    {      ( binop "&&" e1 e2 )}
| e1 = expression _2 = BARBAR e2 = expression
    {      ( binop "||" e1 e2 )}
| p = PREFIX e = expression
    {      ( unop p e )}
| _1 = IF e1 = seq_expression _3 = THEN e2 = seq_expression _5 = ELSE e3 = expression
    {      ( Eapp(Eifthenelse, [e1; e2; e3]) )}
| e1 = expression _2 = MINUSGREATER e2 = expression
    {      ( Eapp(Eminusgreater, [e1; e2]) )}
| e = expression _2 = AFTER n = IDENT
    {      ( Eapp(Eafter([n]), [e]) )}
| e = expression _2 = AFTER _3 = LPAREN n_list = list_of_COMMA_IDENT_ _5 = RPAREN
    {      ( Eapp(Eafter(n_list), [e]) )}
| _1 = LAST i = ide
    {      ( Elast(i) )}
| e = expression _2 = DOT i = ext_ident
    {      ( Erecord_access(e, i) )}
| _1 = LET l = list_of_AND_localized_equation_desc__ _3 = IN e = seq_expression
    {let defs =                                                ( l ) in
      ( Elet(false, List.rev defs, e) )}
| _1 = LET _2 = REC l = list_of_AND_localized_equation_desc__ _4 = IN e = seq_expression
    {let defs =                                                ( l ) in
      ( Elet(true, List.rev defs, e) )}
| _1 = PERIOD p = period_expression
    {      ( Eperiod(p) )}
| _1 = AUTOMATON _2 = opt_bar a = automaton_handlers_expression_
    {      ( Eautomaton(List.rev a, None) )}
| _1 = AUTOMATON _2 = opt_bar a = automaton_handlers_expression_ _4 = INIT s = state
    {      ( Eautomaton(List.rev a, Some(s)) )}
| _1 = MATCH e = seq_expression _3 = WITH _4 = opt_bar m = match_handlers_expression_ _6 = opt_end
    {      ( Ematch(e, List.rev m) )}
| _1 = PRESENT _2 = opt_bar pe = present_handlers_expression_ _4 = opt_end
    {      ( Epresent(List.rev pe, None) )}
| _1 = PRESENT _2 = opt_bar pe = present_handlers_expression_ _4 = INIT e = expression
    {      ( Epresent(List.rev pe, Some(Init(e))) )}
| _1 = PRESENT _2 = opt_bar pe = present_handlers_expression_ _4 = ELSE e = expression _6 = opt_end
    {      ( Epresent(List.rev pe, Some(Default(e))) )}
| _1 = RESET e = seq_expression _3 = EVERY r = expression
    {      ( Ereset(e, r) )}
| lo = local_list _2 = DO l = list_of_AND_localized_equation_desc__ _4 = IN r = expression
    {let eqs =                                                ( l ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_lo_ in
      ( Eblock(make { b_locals = []; b_vars = lo; b_body = eqs }
	       _startpos _endpos, r) )}

period_expression:
  phase = phase _2 = LPAREN period = period _4 = RPAREN
    {      ( { p_phase = phase; p_period = period } )}

phase:
  
    {      ( None )}
| f = FLOAT
    {      ( Some(f) )}

period:
  f = FLOAT
    {      ( f )}

constructor:
  c = CONSTRUCTOR %prec prec_ident
    {      ( Name(c) )}
| c1 = CONSTRUCTOR _2 = DOT c2 = CONSTRUCTOR
    {      ( Modname({qual = c1; id = c2}) )}

qual_ident:
  c = CONSTRUCTOR _2 = DOT i = ide
    {      ( {qual = c; id = i} )}

atomic_constant:
  i = INT
    {      ( Eint(i) )}
| f = FLOAT
    {      ( Efloat(f) )}
| s = STRING
    {      ( Estring s )}
| c = CHAR
    {      ( Echar c )}
| b = BOOL
    {      ( Ebool b )}

label_expression_list:
  l = label_expression
    {      ( [l] )}
| l = label_expression _2 = SEMI
    {      ( [l] )}
| l = label_expression _2 = SEMI ll = label_expression_list
    {      ( l :: ll )}

label_expression:
  i = ext_ident _2 = EQUAL e = expression
    {      ( (i, e) )}

ide:
  i = IDENT
    {      ( i )}
| _1 = LPAREN i = infx _3 = RPAREN
    {      ( i )}

ext_ident:
  q = qual_ident
    {      ( Modname(q) )}
| i = ide
    {      ( Name(i) )}

infx:
  _1 = INFIX0
    {                    ( _1 )}
| _1 = INFIX1
    {                    ( _1 )}
| _1 = INFIX2
    {                                              ( _1 )}
| _1 = INFIX3
    {                    ( _1 )}
| _1 = INFIX4
    {                                              ( _1 )}
| _1 = STAR
    {                    ( "*" )}
| _1 = EQUAL
    {                    ( "=" )}
| _1 = EQUALEQUAL
    {                    ( "==" )}
| _1 = SUBTRACTIVE
    {                    ( _1 )}
| _1 = PREFIX
    {                                              ( _1 )}
| _1 = AMPERSAND
    {                    ( "&" )}
| _1 = AMPERAMPER
    {                                              ( "&&" )}
| _1 = OR
    {                    ( "or" )}
| _1 = BARBAR
    {                                              ( "||" )}
| _1 = ON
    {                    ( "on" )}

arrow:
  _1 = MINUSGREATER
    {      ( A )}
| _1 = AFUN
    {      ( A )}
| _1 = ADFUN
    {      ( AD )}
| _1 = DFUN
    {      ( D )}
| _1 = CFUN
    {      ( C )}

type_expression:
  t = simple_type_desc
    {let _endpos = _endpos_t_ in
let _startpos = _startpos_t_ in
      ( make t _startpos _endpos)}
| tl = type_star_list
    {let _endpos = _endpos_tl_ in
let _startpos = _startpos_tl_ in
      ( make(Etypetuple(List.rev tl)) _startpos _endpos)}

simple_type:
  desc = simple_type_desc
    {let _endpos = _endpos_desc_ in
let _startpos = _startpos_desc_ in
      ( make desc _startpos _endpos )}

simple_type_desc:
  t = type_var
    {      ( Etypevar t )}
| i = ext_ident
    {      ( Etypeconstr(i, []) )}
| t = simple_type i = ext_ident
    {      ( Etypeconstr(i, [t]) )}
| _1 = LPAREN t = type_expression _3 = COMMA tl = type_comma_list _5 = RPAREN i = ext_ident
    {      ( Etypeconstr(i, t :: tl) )}
| _1 = LPAREN t = type_expression _3 = RPAREN
    {      ( t.desc )}

type_star_list:
  t1 = simple_type _2 = STAR t2 = simple_type
    {      ( [t2; t1] )}
| tsl = type_star_list _2 = STAR t = simple_type
    {      ( t :: tsl )}

type_var:
  _1 = QUOTE i = IDENT
    {      ( i )}

type_comma_list:
  te = type_expression _2 = COMMA tl = type_comma_list
    {      ( te :: tl )}
| te = type_expression
    {      ( [te] )}

kind:
  _1 = NODE
    {      ( D )}
| _1 = HYBRID
    {      ( C )}
| _1 = DISCRETE
    {      ( AD )}
| _1 = FUN
    {      ( A )}

%%
