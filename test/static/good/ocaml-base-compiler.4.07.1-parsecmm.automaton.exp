State 0:
## Known stack suffix:
##
## LR(1) items:
phrase' -> . phrase [ # ]
## Transitions:
-- On LPAREN shift to state 1
-- On EOF shift to state 252
-- On phrase shift to state 253
-- On fundecl shift to state 254
-- On datadecl shift to state 255
## Reductions:

State 1:
## Known stack suffix:
## LPAREN
## LR(1) items:
datadecl -> LPAREN . datalist RPAREN [ # ]
datadecl -> LPAREN . DATA datalist RPAREN [ # ]
fundecl -> LPAREN . FUNCTION fun_name LPAREN params RPAREN sequence RPAREN [ # ]
## Transitions:
-- On FUNCTION shift to state 2
-- On DATA shift to state 224
-- On datalist shift to state 250
## Reductions:
-- On VAL reduce production datalist ->
-- On STRING reduce production datalist ->
-- On SKIP reduce production datalist ->
-- On RPAREN reduce production datalist ->
-- On KSTRING reduce production datalist ->
-- On INT reduce production datalist ->
-- On HALF reduce production datalist ->
-- On GLOBAL reduce production datalist ->
-- On FLOAT reduce production datalist ->
-- On BYTE reduce production datalist ->
-- On ALIGN reduce production datalist ->
-- On ADDR reduce production datalist ->

State 2:
## Known stack suffix:
## LPAREN FUNCTION
## LR(1) items:
fundecl -> LPAREN FUNCTION . fun_name LPAREN params RPAREN sequence RPAREN [ # ]
## Transitions:
-- On STRING shift to state 3
-- On IDENT shift to state 4
-- On fun_name shift to state 5
## Reductions:

State 3:
## Known stack suffix:
## STRING
## LR(1) items:
fun_name -> STRING . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN reduce production fun_name -> STRING

State 4:
## Known stack suffix:
## IDENT
## LR(1) items:
fun_name -> IDENT . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN reduce production fun_name -> IDENT

State 5:
## Known stack suffix:
## LPAREN FUNCTION fun_name
## LR(1) items:
fundecl -> LPAREN FUNCTION fun_name . LPAREN params RPAREN sequence RPAREN [ # ]
## Transitions:
-- On LPAREN shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## LPAREN FUNCTION fun_name LPAREN
## LR(1) items:
fundecl -> LPAREN FUNCTION fun_name LPAREN . params RPAREN sequence RPAREN [ # ]
## Transitions:
-- On IDENT shift to state 7
-- On params shift to state 19
-- On oneparam shift to state 222
## Reductions:
-- On RPAREN reduce production params ->

State 7:
## Known stack suffix:
## IDENT
## LR(1) items:
oneparam -> IDENT . COLON machtype [ RPAREN IDENT ]
## Transitions:
-- On COLON shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
oneparam -> IDENT COLON . machtype [ RPAREN IDENT ]
## Transitions:
-- On VAL shift to state 9
-- On UNIT shift to state 10
-- On INT shift to state 11
-- On FLOAT shift to state 12
-- On ADDR shift to state 13
-- On machtype shift to state 14
-- On componentlist shift to state 15
-- On component shift to state 18
## Reductions:

State 9:
## Known stack suffix:
## VAL
## LR(1) items:
component -> VAL . [ STAR RPAREN IDENT ]
## Transitions:
## Reductions:
-- On STAR reduce production component -> VAL
-- On RPAREN reduce production component -> VAL
-- On IDENT reduce production component -> VAL

State 10:
## Known stack suffix:
## UNIT
## LR(1) items:
machtype -> UNIT . [ RPAREN IDENT ]
## Transitions:
## Reductions:
-- On RPAREN reduce production machtype -> UNIT
-- On IDENT reduce production machtype -> UNIT

State 11:
## Known stack suffix:
## INT
## LR(1) items:
component -> INT . [ STAR RPAREN IDENT ]
## Transitions:
## Reductions:
-- On STAR reduce production component -> INT
-- On RPAREN reduce production component -> INT
-- On IDENT reduce production component -> INT

State 12:
## Known stack suffix:
## FLOAT
## LR(1) items:
component -> FLOAT . [ STAR RPAREN IDENT ]
## Transitions:
## Reductions:
-- On STAR reduce production component -> FLOAT
-- On RPAREN reduce production component -> FLOAT
-- On IDENT reduce production component -> FLOAT

State 13:
## Known stack suffix:
## ADDR
## LR(1) items:
component -> ADDR . [ STAR RPAREN IDENT ]
## Transitions:
## Reductions:
-- On STAR reduce production component -> ADDR
-- On RPAREN reduce production component -> ADDR
-- On IDENT reduce production component -> ADDR

State 14:
## Known stack suffix:
## IDENT COLON machtype
## LR(1) items:
oneparam -> IDENT COLON machtype . [ RPAREN IDENT ]
## Transitions:
## Reductions:
-- On RPAREN reduce production oneparam -> IDENT COLON machtype
-- On IDENT reduce production oneparam -> IDENT COLON machtype

State 15:
## Known stack suffix:
## componentlist
## LR(1) items:
componentlist -> componentlist . STAR component [ STAR RPAREN IDENT ]
machtype -> componentlist . [ RPAREN IDENT ]
## Transitions:
-- On STAR shift to state 16
## Reductions:
-- On RPAREN reduce production machtype -> componentlist
-- On IDENT reduce production machtype -> componentlist

State 16:
## Known stack suffix:
## componentlist STAR
## LR(1) items:
componentlist -> componentlist STAR . component [ STAR RPAREN IDENT ]
## Transitions:
-- On VAL shift to state 9
-- On INT shift to state 11
-- On FLOAT shift to state 12
-- On ADDR shift to state 13
-- On component shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## componentlist STAR component
## LR(1) items:
componentlist -> componentlist STAR component . [ STAR RPAREN IDENT ]
## Transitions:
## Reductions:
-- On STAR reduce production componentlist -> componentlist STAR component
-- On RPAREN reduce production componentlist -> componentlist STAR component
-- On IDENT reduce production componentlist -> componentlist STAR component

State 18:
## Known stack suffix:
## component
## LR(1) items:
componentlist -> component . [ STAR RPAREN IDENT ]
## Transitions:
## Reductions:
-- On STAR reduce production componentlist -> component
-- On RPAREN reduce production componentlist -> component
-- On IDENT reduce production componentlist -> component

State 19:
## Known stack suffix:
## LPAREN FUNCTION fun_name LPAREN params
## LR(1) items:
fundecl -> LPAREN FUNCTION fun_name LPAREN params . RPAREN sequence RPAREN [ # ]
## Transitions:
-- On RPAREN shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## LPAREN FUNCTION fun_name LPAREN params RPAREN
## LR(1) items:
fundecl -> LPAREN FUNCTION fun_name LPAREN params RPAREN . sequence RPAREN [ # ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On sequence shift to state 220
-- On expr shift to state 35
## Reductions:

State 21:
## Known stack suffix:
## STRING
## LR(1) items:
expr -> STRING . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> STRING
-- On VAL reduce production expr -> STRING
-- On UNIT reduce production expr -> STRING
-- On STRING reduce production expr -> STRING
-- On RPAREN reduce production expr -> STRING
-- On POINTER reduce production expr -> STRING
-- On LPAREN reduce production expr -> STRING
-- On LBRACKET reduce production expr -> STRING
-- On INTCONST reduce production expr -> STRING
-- On INT reduce production expr -> STRING
-- On IDENT reduce production expr -> STRING
-- On FLOATCONST reduce production expr -> STRING
-- On FLOAT reduce production expr -> STRING
-- On EXIT reduce production expr -> STRING
-- On CASE reduce production expr -> STRING
-- On AND reduce production expr -> STRING
-- On ADDR reduce production expr -> STRING

State 22:
## Known stack suffix:
## POINTER
## LR(1) items:
expr -> POINTER . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> POINTER
-- On VAL reduce production expr -> POINTER
-- On UNIT reduce production expr -> POINTER
-- On STRING reduce production expr -> POINTER
-- On RPAREN reduce production expr -> POINTER
-- On POINTER reduce production expr -> POINTER
-- On LPAREN reduce production expr -> POINTER
-- On LBRACKET reduce production expr -> POINTER
-- On INTCONST reduce production expr -> POINTER
-- On INT reduce production expr -> POINTER
-- On IDENT reduce production expr -> POINTER
-- On FLOATCONST reduce production expr -> POINTER
-- On FLOAT reduce production expr -> POINTER
-- On EXIT reduce production expr -> POINTER
-- On CASE reduce production expr -> POINTER
-- On AND reduce production expr -> POINTER
-- On ADDR reduce production expr -> POINTER

State 23:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . LET letdef sequence RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . ASSIGN IDENT expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . APPLY location expr exprlist machtype RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . EXTCALL STRING exprlist machtype RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . ALLOC exprlist RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . SUBF expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . SUBF expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . unaryop expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . binaryop expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . SEQ sequence RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . IF expr expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . SWITCH INTCONST expr caselist RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . WHILE expr sequence RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . EXIT IDENT exprlist RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . CATCH sequence WITH catch_handlers RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . TRY sequence WITH bind_ident sequence RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . VAL expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . ADDRAREF expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . INTAREF expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . FLOATAREF expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . ADDRASET expr expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . INTASET expr expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN . FLOATASET expr expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On XOR shift to state 24
-- On WHILE shift to state 25
-- On VAL shift to state 37
-- On TRY shift to state 41
-- On SWITCH shift to state 48
-- On SUBI shift to state 60
-- On SUBF shift to state 61
-- On STORE shift to state 66
-- On STAR shift to state 82
-- On SEQ shift to state 83
-- On RAISE shift to state 86
-- On OR shift to state 87
-- On NLTF shift to state 88
-- On NLEF shift to state 89
-- On NGTF shift to state 90
-- On NGEF shift to state 91
-- On NEI shift to state 92
-- On NEF shift to state 93
-- On NEA shift to state 94
-- On MULH shift to state 95
-- On MULF shift to state 96
-- On MODI shift to state 97
-- On LTI shift to state 98
-- On LTF shift to state 99
-- On LTA shift to state 100
-- On LSR shift to state 101
-- On LSL shift to state 102
-- On LOAD shift to state 103
-- On LET shift to state 105
-- On LEI shift to state 117
-- On LEF shift to state 118
-- On LEA shift to state 119
-- On INTOFFLOAT shift to state 120
-- On INTASET shift to state 121
-- On INTAREF shift to state 126
-- On IF shift to state 130
-- On GTI shift to state 135
-- On GTF shift to state 136
-- On GTA shift to state 137
-- On GEI shift to state 138
-- On GEF shift to state 139
-- On GEA shift to state 140
-- On FLOATOFINT shift to state 141
-- On FLOATASET shift to state 142
-- On FLOATAREF shift to state 147
-- On EXTCALL shift to state 151
-- On EXIT shift to state 157
-- On EQI shift to state 161
-- On EQF shift to state 162
-- On EQA shift to state 163
-- On DIVI shift to state 164
-- On DIVF shift to state 165
-- On CHECKBOUND shift to state 166
-- On CATCH shift to state 167
-- On ASSIGN shift to state 177
-- On ASR shift to state 181
-- On APPLY shift to state 182
-- On AND shift to state 189
-- On ALLOC shift to state 190
-- On ADDV shift to state 193
-- On ADDRASET shift to state 194
-- On ADDRAREF shift to state 199
-- On ADDI shift to state 203
-- On ADDF shift to state 204
-- On ADDA shift to state 205
-- On ABSF shift to state 206
-- On unaryop shift to state 207
-- On binaryop shift to state 210
## Reductions:

State 24:
## Known stack suffix:
## XOR
## LR(1) items:
binaryop -> XOR . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> XOR
-- On POINTER reduce production binaryop -> XOR
-- On LPAREN reduce production binaryop -> XOR
-- On LBRACKET reduce production binaryop -> XOR
-- On INTCONST reduce production binaryop -> XOR
-- On IDENT reduce production binaryop -> XOR
-- On FLOATCONST reduce production binaryop -> XOR
-- On EXIT reduce production binaryop -> XOR

State 25:
## Known stack suffix:
## LPAREN WHILE
## LR(1) items:
expr -> LPAREN WHILE . expr sequence RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 32
## Reductions:

State 26:
## Known stack suffix:
## LBRACKET
## LR(1) items:
expr -> LBRACKET . RBRACKET [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RBRACKET shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
expr -> LBRACKET RBRACKET . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LBRACKET RBRACKET
-- On VAL reduce production expr -> LBRACKET RBRACKET
-- On UNIT reduce production expr -> LBRACKET RBRACKET
-- On STRING reduce production expr -> LBRACKET RBRACKET
-- On RPAREN reduce production expr -> LBRACKET RBRACKET
-- On POINTER reduce production expr -> LBRACKET RBRACKET
-- On LPAREN reduce production expr -> LBRACKET RBRACKET
-- On LBRACKET reduce production expr -> LBRACKET RBRACKET
-- On INTCONST reduce production expr -> LBRACKET RBRACKET
-- On INT reduce production expr -> LBRACKET RBRACKET
-- On IDENT reduce production expr -> LBRACKET RBRACKET
-- On FLOATCONST reduce production expr -> LBRACKET RBRACKET
-- On FLOAT reduce production expr -> LBRACKET RBRACKET
-- On EXIT reduce production expr -> LBRACKET RBRACKET
-- On CASE reduce production expr -> LBRACKET RBRACKET
-- On AND reduce production expr -> LBRACKET RBRACKET
-- On ADDR reduce production expr -> LBRACKET RBRACKET

State 28:
## Known stack suffix:
## INTCONST
## LR(1) items:
expr -> INTCONST . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> INTCONST
-- On VAL reduce production expr -> INTCONST
-- On UNIT reduce production expr -> INTCONST
-- On STRING reduce production expr -> INTCONST
-- On RPAREN reduce production expr -> INTCONST
-- On POINTER reduce production expr -> INTCONST
-- On LPAREN reduce production expr -> INTCONST
-- On LBRACKET reduce production expr -> INTCONST
-- On INTCONST reduce production expr -> INTCONST
-- On INT reduce production expr -> INTCONST
-- On IDENT reduce production expr -> INTCONST
-- On FLOATCONST reduce production expr -> INTCONST
-- On FLOAT reduce production expr -> INTCONST
-- On EXIT reduce production expr -> INTCONST
-- On CASE reduce production expr -> INTCONST
-- On AND reduce production expr -> INTCONST
-- On ADDR reduce production expr -> INTCONST

State 29:
## Known stack suffix:
## IDENT
## LR(1) items:
expr -> IDENT . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> IDENT
-- On VAL reduce production expr -> IDENT
-- On UNIT reduce production expr -> IDENT
-- On STRING reduce production expr -> IDENT
-- On RPAREN reduce production expr -> IDENT
-- On POINTER reduce production expr -> IDENT
-- On LPAREN reduce production expr -> IDENT
-- On LBRACKET reduce production expr -> IDENT
-- On INTCONST reduce production expr -> IDENT
-- On INT reduce production expr -> IDENT
-- On IDENT reduce production expr -> IDENT
-- On FLOATCONST reduce production expr -> IDENT
-- On FLOAT reduce production expr -> IDENT
-- On EXIT reduce production expr -> IDENT
-- On CASE reduce production expr -> IDENT
-- On AND reduce production expr -> IDENT
-- On ADDR reduce production expr -> IDENT

State 30:
## Known stack suffix:
## FLOATCONST
## LR(1) items:
expr -> FLOATCONST . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> FLOATCONST
-- On VAL reduce production expr -> FLOATCONST
-- On UNIT reduce production expr -> FLOATCONST
-- On STRING reduce production expr -> FLOATCONST
-- On RPAREN reduce production expr -> FLOATCONST
-- On POINTER reduce production expr -> FLOATCONST
-- On LPAREN reduce production expr -> FLOATCONST
-- On LBRACKET reduce production expr -> FLOATCONST
-- On INTCONST reduce production expr -> FLOATCONST
-- On INT reduce production expr -> FLOATCONST
-- On IDENT reduce production expr -> FLOATCONST
-- On FLOATCONST reduce production expr -> FLOATCONST
-- On FLOAT reduce production expr -> FLOATCONST
-- On EXIT reduce production expr -> FLOATCONST
-- On CASE reduce production expr -> FLOATCONST
-- On AND reduce production expr -> FLOATCONST
-- On ADDR reduce production expr -> FLOATCONST

State 31:
## Known stack suffix:
## EXIT
## LR(1) items:
expr -> EXIT . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> EXIT
-- On VAL reduce production expr -> EXIT
-- On UNIT reduce production expr -> EXIT
-- On STRING reduce production expr -> EXIT
-- On RPAREN reduce production expr -> EXIT
-- On POINTER reduce production expr -> EXIT
-- On LPAREN reduce production expr -> EXIT
-- On LBRACKET reduce production expr -> EXIT
-- On INTCONST reduce production expr -> EXIT
-- On INT reduce production expr -> EXIT
-- On IDENT reduce production expr -> EXIT
-- On FLOATCONST reduce production expr -> EXIT
-- On FLOAT reduce production expr -> EXIT
-- On EXIT reduce production expr -> EXIT
-- On CASE reduce production expr -> EXIT
-- On AND reduce production expr -> EXIT
-- On ADDR reduce production expr -> EXIT

State 32:
## Known stack suffix:
## LPAREN WHILE expr
## LR(1) items:
expr -> LPAREN WHILE expr . sequence RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On sequence shift to state 33
-- On expr shift to state 35
## Reductions:

State 33:
## Known stack suffix:
## LPAREN WHILE expr sequence
## LR(1) items:
expr -> LPAREN WHILE expr sequence . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## LPAREN WHILE expr sequence RPAREN
## LR(1) items:
expr -> LPAREN WHILE expr sequence RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On VAL reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On UNIT reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On STRING reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On RPAREN reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On POINTER reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On LPAREN reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On LBRACKET reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On INTCONST reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On INT reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On IDENT reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On FLOATCONST reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On FLOAT reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On EXIT reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On CASE reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On AND reduce production expr -> LPAREN WHILE expr sequence RPAREN
-- On ADDR reduce production expr -> LPAREN WHILE expr sequence RPAREN

State 35:
## Known stack suffix:
## expr
## LR(1) items:
sequence -> expr . sequence [ WITH RPAREN CASE AND ]
sequence -> expr . [ WITH RPAREN CASE AND ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On sequence shift to state 36
-- On expr shift to state 35
## Reductions:
-- On WITH reduce production sequence -> expr
-- On RPAREN reduce production sequence -> expr
-- On CASE reduce production sequence -> expr
-- On AND reduce production sequence -> expr

State 36:
## Known stack suffix:
## expr sequence
## LR(1) items:
sequence -> expr sequence . [ WITH RPAREN CASE AND ]
## Transitions:
## Reductions:
-- On WITH reduce production sequence -> expr sequence
-- On RPAREN reduce production sequence -> expr sequence
-- On CASE reduce production sequence -> expr sequence
-- On AND reduce production sequence -> expr sequence

State 37:
## Known stack suffix:
## LPAREN VAL
## LR(1) items:
expr -> LPAREN VAL . expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## LPAREN VAL expr
## LR(1) items:
expr -> LPAREN VAL expr . expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## LPAREN VAL expr expr
## LR(1) items:
expr -> LPAREN VAL expr expr . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## LPAREN VAL expr expr RPAREN
## LR(1) items:
expr -> LPAREN VAL expr expr RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN VAL expr expr RPAREN
-- On VAL reduce production expr -> LPAREN VAL expr expr RPAREN
-- On UNIT reduce production expr -> LPAREN VAL expr expr RPAREN
-- On STRING reduce production expr -> LPAREN VAL expr expr RPAREN
-- On RPAREN reduce production expr -> LPAREN VAL expr expr RPAREN
-- On POINTER reduce production expr -> LPAREN VAL expr expr RPAREN
-- On LPAREN reduce production expr -> LPAREN VAL expr expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN VAL expr expr RPAREN
-- On INTCONST reduce production expr -> LPAREN VAL expr expr RPAREN
-- On INT reduce production expr -> LPAREN VAL expr expr RPAREN
-- On IDENT reduce production expr -> LPAREN VAL expr expr RPAREN
-- On FLOATCONST reduce production expr -> LPAREN VAL expr expr RPAREN
-- On FLOAT reduce production expr -> LPAREN VAL expr expr RPAREN
-- On EXIT reduce production expr -> LPAREN VAL expr expr RPAREN
-- On CASE reduce production expr -> LPAREN VAL expr expr RPAREN
-- On AND reduce production expr -> LPAREN VAL expr expr RPAREN
-- On ADDR reduce production expr -> LPAREN VAL expr expr RPAREN

State 41:
## Known stack suffix:
## LPAREN TRY
## LR(1) items:
expr -> LPAREN TRY . sequence WITH bind_ident sequence RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On sequence shift to state 42
-- On expr shift to state 35
## Reductions:

State 42:
## Known stack suffix:
## LPAREN TRY sequence
## LR(1) items:
expr -> LPAREN TRY sequence . WITH bind_ident sequence RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On WITH shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## LPAREN TRY sequence WITH
## LR(1) items:
expr -> LPAREN TRY sequence WITH . bind_ident sequence RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On IDENT shift to state 44
-- On bind_ident shift to state 45
## Reductions:

State 44:
## Known stack suffix:
## IDENT
## LR(1) items:
bind_ident -> IDENT . [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production bind_ident -> IDENT
-- On RPAREN reduce production bind_ident -> IDENT
-- On POINTER reduce production bind_ident -> IDENT
-- On LPAREN reduce production bind_ident -> IDENT
-- On LBRACKET reduce production bind_ident -> IDENT
-- On INTCONST reduce production bind_ident -> IDENT
-- On IDENT reduce production bind_ident -> IDENT
-- On FLOATCONST reduce production bind_ident -> IDENT
-- On EXIT reduce production bind_ident -> IDENT

State 45:
## Known stack suffix:
## LPAREN TRY sequence WITH bind_ident
## LR(1) items:
expr -> LPAREN TRY sequence WITH bind_ident . sequence RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On sequence shift to state 46
-- On expr shift to state 35
## Reductions:

State 46:
## Known stack suffix:
## LPAREN TRY sequence WITH bind_ident sequence
## LR(1) items:
expr -> LPAREN TRY sequence WITH bind_ident sequence . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## LPAREN TRY sequence WITH bind_ident sequence RPAREN
## LR(1) items:
expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On VAL reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On UNIT reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On STRING reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On RPAREN reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On POINTER reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On LPAREN reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On LBRACKET reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On INTCONST reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On INT reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On IDENT reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On FLOATCONST reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On FLOAT reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On EXIT reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On CASE reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On AND reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN
-- On ADDR reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN

State 48:
## Known stack suffix:
## LPAREN SWITCH
## LR(1) items:
expr -> LPAREN SWITCH . INTCONST expr caselist RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On INTCONST shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## LPAREN SWITCH INTCONST
## LR(1) items:
expr -> LPAREN SWITCH INTCONST . expr caselist RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## LPAREN SWITCH INTCONST expr
## LR(1) items:
expr -> LPAREN SWITCH INTCONST expr . caselist RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On CASE shift to state 51
-- On onecase shift to state 55
-- On caselist shift to state 58
## Reductions:
-- On RPAREN reduce production caselist ->

State 51:
## Known stack suffix:
## CASE
## LR(1) items:
onecase -> CASE . INTCONST COLON onecase [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
onecase -> CASE . INTCONST COLON [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On INTCONST shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## CASE INTCONST
## LR(1) items:
onecase -> CASE INTCONST . COLON onecase [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
onecase -> CASE INTCONST . COLON [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On COLON shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## CASE INTCONST COLON
## LR(1) items:
onecase -> CASE INTCONST COLON . onecase [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
onecase -> CASE INTCONST COLON . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On CASE shift to state 51
-- On onecase shift to state 54
## Reductions:
-- On STRING reduce production onecase -> CASE INTCONST COLON
-- On POINTER reduce production onecase -> CASE INTCONST COLON
-- On LPAREN reduce production onecase -> CASE INTCONST COLON
-- On LBRACKET reduce production onecase -> CASE INTCONST COLON
-- On INTCONST reduce production onecase -> CASE INTCONST COLON
-- On IDENT reduce production onecase -> CASE INTCONST COLON
-- On FLOATCONST reduce production onecase -> CASE INTCONST COLON
-- On EXIT reduce production onecase -> CASE INTCONST COLON

State 54:
## Known stack suffix:
## CASE INTCONST COLON onecase
## LR(1) items:
onecase -> CASE INTCONST COLON onecase . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production onecase -> CASE INTCONST COLON onecase
-- On POINTER reduce production onecase -> CASE INTCONST COLON onecase
-- On LPAREN reduce production onecase -> CASE INTCONST COLON onecase
-- On LBRACKET reduce production onecase -> CASE INTCONST COLON onecase
-- On INTCONST reduce production onecase -> CASE INTCONST COLON onecase
-- On IDENT reduce production onecase -> CASE INTCONST COLON onecase
-- On FLOATCONST reduce production onecase -> CASE INTCONST COLON onecase
-- On EXIT reduce production onecase -> CASE INTCONST COLON onecase

State 55:
## Known stack suffix:
## onecase
## LR(1) items:
caselist -> onecase . sequence caselist [ RPAREN ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On sequence shift to state 56
-- On expr shift to state 35
## Reductions:

State 56:
## Known stack suffix:
## onecase sequence
## LR(1) items:
caselist -> onecase sequence . caselist [ RPAREN ]
## Transitions:
-- On CASE shift to state 51
-- On onecase shift to state 55
-- On caselist shift to state 57
## Reductions:
-- On RPAREN reduce production caselist ->

State 57:
## Known stack suffix:
## onecase sequence caselist
## LR(1) items:
caselist -> onecase sequence caselist . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN reduce production caselist -> onecase sequence caselist

State 58:
## Known stack suffix:
## LPAREN SWITCH INTCONST expr caselist
## LR(1) items:
expr -> LPAREN SWITCH INTCONST expr caselist . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## LPAREN SWITCH INTCONST expr caselist RPAREN
## LR(1) items:
expr -> LPAREN SWITCH INTCONST expr caselist RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On VAL reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On UNIT reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On STRING reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On RPAREN reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On POINTER reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On LPAREN reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On LBRACKET reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On INTCONST reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On INT reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On IDENT reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On FLOATCONST reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On FLOAT reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On EXIT reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On CASE reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On AND reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN
-- On ADDR reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN

State 60:
## Known stack suffix:
## SUBI
## LR(1) items:
binaryop -> SUBI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> SUBI
-- On POINTER reduce production binaryop -> SUBI
-- On LPAREN reduce production binaryop -> SUBI
-- On LBRACKET reduce production binaryop -> SUBI
-- On INTCONST reduce production binaryop -> SUBI
-- On IDENT reduce production binaryop -> SUBI
-- On FLOATCONST reduce production binaryop -> SUBI
-- On EXIT reduce production binaryop -> SUBI

State 61:
## Known stack suffix:
## LPAREN SUBF
## LR(1) items:
expr -> LPAREN SUBF . expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN SUBF . expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## LPAREN SUBF expr
## LR(1) items:
expr -> LPAREN SUBF expr . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
expr -> LPAREN SUBF expr . expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On RPAREN shift to state 63
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 64
## Reductions:

State 63:
## Known stack suffix:
## LPAREN SUBF expr RPAREN
## LR(1) items:
expr -> LPAREN SUBF expr RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN SUBF expr RPAREN
-- On VAL reduce production expr -> LPAREN SUBF expr RPAREN
-- On UNIT reduce production expr -> LPAREN SUBF expr RPAREN
-- On STRING reduce production expr -> LPAREN SUBF expr RPAREN
-- On RPAREN reduce production expr -> LPAREN SUBF expr RPAREN
-- On POINTER reduce production expr -> LPAREN SUBF expr RPAREN
-- On LPAREN reduce production expr -> LPAREN SUBF expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN SUBF expr RPAREN
-- On INTCONST reduce production expr -> LPAREN SUBF expr RPAREN
-- On INT reduce production expr -> LPAREN SUBF expr RPAREN
-- On IDENT reduce production expr -> LPAREN SUBF expr RPAREN
-- On FLOATCONST reduce production expr -> LPAREN SUBF expr RPAREN
-- On FLOAT reduce production expr -> LPAREN SUBF expr RPAREN
-- On EXIT reduce production expr -> LPAREN SUBF expr RPAREN
-- On CASE reduce production expr -> LPAREN SUBF expr RPAREN
-- On AND reduce production expr -> LPAREN SUBF expr RPAREN
-- On ADDR reduce production expr -> LPAREN SUBF expr RPAREN

State 64:
## Known stack suffix:
## LPAREN SUBF expr expr
## LR(1) items:
expr -> LPAREN SUBF expr expr . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## LPAREN SUBF expr expr RPAREN
## LR(1) items:
expr -> LPAREN SUBF expr expr RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On VAL reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On UNIT reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On STRING reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On RPAREN reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On POINTER reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On LPAREN reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On INTCONST reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On INT reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On IDENT reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On FLOATCONST reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On FLOAT reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On EXIT reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On CASE reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On AND reduce production expr -> LPAREN SUBF expr expr RPAREN
-- On ADDR reduce production expr -> LPAREN SUBF expr expr RPAREN

State 66:
## Known stack suffix:
## STORE
## LR(1) items:
binaryop -> STORE . chunk [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On VAL shift to state 67
-- On UNSIGNED shift to state 68
-- On SIGNED shift to state 72
-- On INT shift to state 76
-- On FLOAT64 shift to state 77
-- On FLOAT32 shift to state 78
-- On FLOAT shift to state 79
-- On ADDR shift to state 80
-- On chunk shift to state 81
## Reductions:

State 67:
## Known stack suffix:
## VAL
## LR(1) items:
chunk -> VAL . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production chunk -> VAL
-- On POINTER reduce production chunk -> VAL
-- On LPAREN reduce production chunk -> VAL
-- On LBRACKET reduce production chunk -> VAL
-- On INTCONST reduce production chunk -> VAL
-- On IDENT reduce production chunk -> VAL
-- On FLOATCONST reduce production chunk -> VAL
-- On EXIT reduce production chunk -> VAL

State 68:
## Known stack suffix:
## UNSIGNED
## LR(1) items:
chunk -> UNSIGNED . BYTE [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
chunk -> UNSIGNED . HALF [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
chunk -> UNSIGNED . INT32 [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On INT32 shift to state 69
-- On HALF shift to state 70
-- On BYTE shift to state 71
## Reductions:

State 69:
## Known stack suffix:
## UNSIGNED INT32
## LR(1) items:
chunk -> UNSIGNED INT32 . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production chunk -> UNSIGNED INT32
-- On POINTER reduce production chunk -> UNSIGNED INT32
-- On LPAREN reduce production chunk -> UNSIGNED INT32
-- On LBRACKET reduce production chunk -> UNSIGNED INT32
-- On INTCONST reduce production chunk -> UNSIGNED INT32
-- On IDENT reduce production chunk -> UNSIGNED INT32
-- On FLOATCONST reduce production chunk -> UNSIGNED INT32
-- On EXIT reduce production chunk -> UNSIGNED INT32

State 70:
## Known stack suffix:
## UNSIGNED HALF
## LR(1) items:
chunk -> UNSIGNED HALF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production chunk -> UNSIGNED HALF
-- On POINTER reduce production chunk -> UNSIGNED HALF
-- On LPAREN reduce production chunk -> UNSIGNED HALF
-- On LBRACKET reduce production chunk -> UNSIGNED HALF
-- On INTCONST reduce production chunk -> UNSIGNED HALF
-- On IDENT reduce production chunk -> UNSIGNED HALF
-- On FLOATCONST reduce production chunk -> UNSIGNED HALF
-- On EXIT reduce production chunk -> UNSIGNED HALF

State 71:
## Known stack suffix:
## UNSIGNED BYTE
## LR(1) items:
chunk -> UNSIGNED BYTE . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production chunk -> UNSIGNED BYTE
-- On POINTER reduce production chunk -> UNSIGNED BYTE
-- On LPAREN reduce production chunk -> UNSIGNED BYTE
-- On LBRACKET reduce production chunk -> UNSIGNED BYTE
-- On INTCONST reduce production chunk -> UNSIGNED BYTE
-- On IDENT reduce production chunk -> UNSIGNED BYTE
-- On FLOATCONST reduce production chunk -> UNSIGNED BYTE
-- On EXIT reduce production chunk -> UNSIGNED BYTE

State 72:
## Known stack suffix:
## SIGNED
## LR(1) items:
chunk -> SIGNED . BYTE [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
chunk -> SIGNED . HALF [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
chunk -> SIGNED . INT32 [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On INT32 shift to state 73
-- On HALF shift to state 74
-- On BYTE shift to state 75
## Reductions:

State 73:
## Known stack suffix:
## SIGNED INT32
## LR(1) items:
chunk -> SIGNED INT32 . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production chunk -> SIGNED INT32
-- On POINTER reduce production chunk -> SIGNED INT32
-- On LPAREN reduce production chunk -> SIGNED INT32
-- On LBRACKET reduce production chunk -> SIGNED INT32
-- On INTCONST reduce production chunk -> SIGNED INT32
-- On IDENT reduce production chunk -> SIGNED INT32
-- On FLOATCONST reduce production chunk -> SIGNED INT32
-- On EXIT reduce production chunk -> SIGNED INT32

State 74:
## Known stack suffix:
## SIGNED HALF
## LR(1) items:
chunk -> SIGNED HALF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production chunk -> SIGNED HALF
-- On POINTER reduce production chunk -> SIGNED HALF
-- On LPAREN reduce production chunk -> SIGNED HALF
-- On LBRACKET reduce production chunk -> SIGNED HALF
-- On INTCONST reduce production chunk -> SIGNED HALF
-- On IDENT reduce production chunk -> SIGNED HALF
-- On FLOATCONST reduce production chunk -> SIGNED HALF
-- On EXIT reduce production chunk -> SIGNED HALF

State 75:
## Known stack suffix:
## SIGNED BYTE
## LR(1) items:
chunk -> SIGNED BYTE . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production chunk -> SIGNED BYTE
-- On POINTER reduce production chunk -> SIGNED BYTE
-- On LPAREN reduce production chunk -> SIGNED BYTE
-- On LBRACKET reduce production chunk -> SIGNED BYTE
-- On INTCONST reduce production chunk -> SIGNED BYTE
-- On IDENT reduce production chunk -> SIGNED BYTE
-- On FLOATCONST reduce production chunk -> SIGNED BYTE
-- On EXIT reduce production chunk -> SIGNED BYTE

State 76:
## Known stack suffix:
## INT
## LR(1) items:
chunk -> INT . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production chunk -> INT
-- On POINTER reduce production chunk -> INT
-- On LPAREN reduce production chunk -> INT
-- On LBRACKET reduce production chunk -> INT
-- On INTCONST reduce production chunk -> INT
-- On IDENT reduce production chunk -> INT
-- On FLOATCONST reduce production chunk -> INT
-- On EXIT reduce production chunk -> INT

State 77:
## Known stack suffix:
## FLOAT64
## LR(1) items:
chunk -> FLOAT64 . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production chunk -> FLOAT64
-- On POINTER reduce production chunk -> FLOAT64
-- On LPAREN reduce production chunk -> FLOAT64
-- On LBRACKET reduce production chunk -> FLOAT64
-- On INTCONST reduce production chunk -> FLOAT64
-- On IDENT reduce production chunk -> FLOAT64
-- On FLOATCONST reduce production chunk -> FLOAT64
-- On EXIT reduce production chunk -> FLOAT64

State 78:
## Known stack suffix:
## FLOAT32
## LR(1) items:
chunk -> FLOAT32 . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production chunk -> FLOAT32
-- On POINTER reduce production chunk -> FLOAT32
-- On LPAREN reduce production chunk -> FLOAT32
-- On LBRACKET reduce production chunk -> FLOAT32
-- On INTCONST reduce production chunk -> FLOAT32
-- On IDENT reduce production chunk -> FLOAT32
-- On FLOATCONST reduce production chunk -> FLOAT32
-- On EXIT reduce production chunk -> FLOAT32

State 79:
## Known stack suffix:
## FLOAT
## LR(1) items:
chunk -> FLOAT . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production chunk -> FLOAT
-- On POINTER reduce production chunk -> FLOAT
-- On LPAREN reduce production chunk -> FLOAT
-- On LBRACKET reduce production chunk -> FLOAT
-- On INTCONST reduce production chunk -> FLOAT
-- On IDENT reduce production chunk -> FLOAT
-- On FLOATCONST reduce production chunk -> FLOAT
-- On EXIT reduce production chunk -> FLOAT

State 80:
## Known stack suffix:
## ADDR
## LR(1) items:
chunk -> ADDR . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production chunk -> ADDR
-- On POINTER reduce production chunk -> ADDR
-- On LPAREN reduce production chunk -> ADDR
-- On LBRACKET reduce production chunk -> ADDR
-- On INTCONST reduce production chunk -> ADDR
-- On IDENT reduce production chunk -> ADDR
-- On FLOATCONST reduce production chunk -> ADDR
-- On EXIT reduce production chunk -> ADDR

State 81:
## Known stack suffix:
## STORE chunk
## LR(1) items:
binaryop -> STORE chunk . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> STORE chunk
-- On POINTER reduce production binaryop -> STORE chunk
-- On LPAREN reduce production binaryop -> STORE chunk
-- On LBRACKET reduce production binaryop -> STORE chunk
-- On INTCONST reduce production binaryop -> STORE chunk
-- On IDENT reduce production binaryop -> STORE chunk
-- On FLOATCONST reduce production binaryop -> STORE chunk
-- On EXIT reduce production binaryop -> STORE chunk

State 82:
## Known stack suffix:
## STAR
## LR(1) items:
binaryop -> STAR . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> STAR
-- On POINTER reduce production binaryop -> STAR
-- On LPAREN reduce production binaryop -> STAR
-- On LBRACKET reduce production binaryop -> STAR
-- On INTCONST reduce production binaryop -> STAR
-- On IDENT reduce production binaryop -> STAR
-- On FLOATCONST reduce production binaryop -> STAR
-- On EXIT reduce production binaryop -> STAR

State 83:
## Known stack suffix:
## LPAREN SEQ
## LR(1) items:
expr -> LPAREN SEQ . sequence RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On sequence shift to state 84
-- On expr shift to state 35
## Reductions:

State 84:
## Known stack suffix:
## LPAREN SEQ sequence
## LR(1) items:
expr -> LPAREN SEQ sequence . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## LPAREN SEQ sequence RPAREN
## LR(1) items:
expr -> LPAREN SEQ sequence RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN SEQ sequence RPAREN
-- On VAL reduce production expr -> LPAREN SEQ sequence RPAREN
-- On UNIT reduce production expr -> LPAREN SEQ sequence RPAREN
-- On STRING reduce production expr -> LPAREN SEQ sequence RPAREN
-- On RPAREN reduce production expr -> LPAREN SEQ sequence RPAREN
-- On POINTER reduce production expr -> LPAREN SEQ sequence RPAREN
-- On LPAREN reduce production expr -> LPAREN SEQ sequence RPAREN
-- On LBRACKET reduce production expr -> LPAREN SEQ sequence RPAREN
-- On INTCONST reduce production expr -> LPAREN SEQ sequence RPAREN
-- On INT reduce production expr -> LPAREN SEQ sequence RPAREN
-- On IDENT reduce production expr -> LPAREN SEQ sequence RPAREN
-- On FLOATCONST reduce production expr -> LPAREN SEQ sequence RPAREN
-- On FLOAT reduce production expr -> LPAREN SEQ sequence RPAREN
-- On EXIT reduce production expr -> LPAREN SEQ sequence RPAREN
-- On CASE reduce production expr -> LPAREN SEQ sequence RPAREN
-- On AND reduce production expr -> LPAREN SEQ sequence RPAREN
-- On ADDR reduce production expr -> LPAREN SEQ sequence RPAREN

State 86:
## Known stack suffix:
## RAISE
## LR(1) items:
unaryop -> RAISE . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production unaryop -> RAISE
-- On POINTER reduce production unaryop -> RAISE
-- On LPAREN reduce production unaryop -> RAISE
-- On LBRACKET reduce production unaryop -> RAISE
-- On INTCONST reduce production unaryop -> RAISE
-- On IDENT reduce production unaryop -> RAISE
-- On FLOATCONST reduce production unaryop -> RAISE
-- On EXIT reduce production unaryop -> RAISE

State 87:
## Known stack suffix:
## OR
## LR(1) items:
binaryop -> OR . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> OR
-- On POINTER reduce production binaryop -> OR
-- On LPAREN reduce production binaryop -> OR
-- On LBRACKET reduce production binaryop -> OR
-- On INTCONST reduce production binaryop -> OR
-- On IDENT reduce production binaryop -> OR
-- On FLOATCONST reduce production binaryop -> OR
-- On EXIT reduce production binaryop -> OR

State 88:
## Known stack suffix:
## NLTF
## LR(1) items:
binaryop -> NLTF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> NLTF
-- On POINTER reduce production binaryop -> NLTF
-- On LPAREN reduce production binaryop -> NLTF
-- On LBRACKET reduce production binaryop -> NLTF
-- On INTCONST reduce production binaryop -> NLTF
-- On IDENT reduce production binaryop -> NLTF
-- On FLOATCONST reduce production binaryop -> NLTF
-- On EXIT reduce production binaryop -> NLTF

State 89:
## Known stack suffix:
## NLEF
## LR(1) items:
binaryop -> NLEF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> NLEF
-- On POINTER reduce production binaryop -> NLEF
-- On LPAREN reduce production binaryop -> NLEF
-- On LBRACKET reduce production binaryop -> NLEF
-- On INTCONST reduce production binaryop -> NLEF
-- On IDENT reduce production binaryop -> NLEF
-- On FLOATCONST reduce production binaryop -> NLEF
-- On EXIT reduce production binaryop -> NLEF

State 90:
## Known stack suffix:
## NGTF
## LR(1) items:
binaryop -> NGTF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> NGTF
-- On POINTER reduce production binaryop -> NGTF
-- On LPAREN reduce production binaryop -> NGTF
-- On LBRACKET reduce production binaryop -> NGTF
-- On INTCONST reduce production binaryop -> NGTF
-- On IDENT reduce production binaryop -> NGTF
-- On FLOATCONST reduce production binaryop -> NGTF
-- On EXIT reduce production binaryop -> NGTF

State 91:
## Known stack suffix:
## NGEF
## LR(1) items:
binaryop -> NGEF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> NGEF
-- On POINTER reduce production binaryop -> NGEF
-- On LPAREN reduce production binaryop -> NGEF
-- On LBRACKET reduce production binaryop -> NGEF
-- On INTCONST reduce production binaryop -> NGEF
-- On IDENT reduce production binaryop -> NGEF
-- On FLOATCONST reduce production binaryop -> NGEF
-- On EXIT reduce production binaryop -> NGEF

State 92:
## Known stack suffix:
## NEI
## LR(1) items:
binaryop -> NEI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> NEI
-- On POINTER reduce production binaryop -> NEI
-- On LPAREN reduce production binaryop -> NEI
-- On LBRACKET reduce production binaryop -> NEI
-- On INTCONST reduce production binaryop -> NEI
-- On IDENT reduce production binaryop -> NEI
-- On FLOATCONST reduce production binaryop -> NEI
-- On EXIT reduce production binaryop -> NEI

State 93:
## Known stack suffix:
## NEF
## LR(1) items:
binaryop -> NEF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> NEF
-- On POINTER reduce production binaryop -> NEF
-- On LPAREN reduce production binaryop -> NEF
-- On LBRACKET reduce production binaryop -> NEF
-- On INTCONST reduce production binaryop -> NEF
-- On IDENT reduce production binaryop -> NEF
-- On FLOATCONST reduce production binaryop -> NEF
-- On EXIT reduce production binaryop -> NEF

State 94:
## Known stack suffix:
## NEA
## LR(1) items:
binaryop -> NEA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> NEA
-- On POINTER reduce production binaryop -> NEA
-- On LPAREN reduce production binaryop -> NEA
-- On LBRACKET reduce production binaryop -> NEA
-- On INTCONST reduce production binaryop -> NEA
-- On IDENT reduce production binaryop -> NEA
-- On FLOATCONST reduce production binaryop -> NEA
-- On EXIT reduce production binaryop -> NEA

State 95:
## Known stack suffix:
## MULH
## LR(1) items:
binaryop -> MULH . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> MULH
-- On POINTER reduce production binaryop -> MULH
-- On LPAREN reduce production binaryop -> MULH
-- On LBRACKET reduce production binaryop -> MULH
-- On INTCONST reduce production binaryop -> MULH
-- On IDENT reduce production binaryop -> MULH
-- On FLOATCONST reduce production binaryop -> MULH
-- On EXIT reduce production binaryop -> MULH

State 96:
## Known stack suffix:
## MULF
## LR(1) items:
binaryop -> MULF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> MULF
-- On POINTER reduce production binaryop -> MULF
-- On LPAREN reduce production binaryop -> MULF
-- On LBRACKET reduce production binaryop -> MULF
-- On INTCONST reduce production binaryop -> MULF
-- On IDENT reduce production binaryop -> MULF
-- On FLOATCONST reduce production binaryop -> MULF
-- On EXIT reduce production binaryop -> MULF

State 97:
## Known stack suffix:
## MODI
## LR(1) items:
binaryop -> MODI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> MODI
-- On POINTER reduce production binaryop -> MODI
-- On LPAREN reduce production binaryop -> MODI
-- On LBRACKET reduce production binaryop -> MODI
-- On INTCONST reduce production binaryop -> MODI
-- On IDENT reduce production binaryop -> MODI
-- On FLOATCONST reduce production binaryop -> MODI
-- On EXIT reduce production binaryop -> MODI

State 98:
## Known stack suffix:
## LTI
## LR(1) items:
binaryop -> LTI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> LTI
-- On POINTER reduce production binaryop -> LTI
-- On LPAREN reduce production binaryop -> LTI
-- On LBRACKET reduce production binaryop -> LTI
-- On INTCONST reduce production binaryop -> LTI
-- On IDENT reduce production binaryop -> LTI
-- On FLOATCONST reduce production binaryop -> LTI
-- On EXIT reduce production binaryop -> LTI

State 99:
## Known stack suffix:
## LTF
## LR(1) items:
binaryop -> LTF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> LTF
-- On POINTER reduce production binaryop -> LTF
-- On LPAREN reduce production binaryop -> LTF
-- On LBRACKET reduce production binaryop -> LTF
-- On INTCONST reduce production binaryop -> LTF
-- On IDENT reduce production binaryop -> LTF
-- On FLOATCONST reduce production binaryop -> LTF
-- On EXIT reduce production binaryop -> LTF

State 100:
## Known stack suffix:
## LTA
## LR(1) items:
binaryop -> LTA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> LTA
-- On POINTER reduce production binaryop -> LTA
-- On LPAREN reduce production binaryop -> LTA
-- On LBRACKET reduce production binaryop -> LTA
-- On INTCONST reduce production binaryop -> LTA
-- On IDENT reduce production binaryop -> LTA
-- On FLOATCONST reduce production binaryop -> LTA
-- On EXIT reduce production binaryop -> LTA

State 101:
## Known stack suffix:
## LSR
## LR(1) items:
binaryop -> LSR . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> LSR
-- On POINTER reduce production binaryop -> LSR
-- On LPAREN reduce production binaryop -> LSR
-- On LBRACKET reduce production binaryop -> LSR
-- On INTCONST reduce production binaryop -> LSR
-- On IDENT reduce production binaryop -> LSR
-- On FLOATCONST reduce production binaryop -> LSR
-- On EXIT reduce production binaryop -> LSR

State 102:
## Known stack suffix:
## LSL
## LR(1) items:
binaryop -> LSL . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> LSL
-- On POINTER reduce production binaryop -> LSL
-- On LPAREN reduce production binaryop -> LSL
-- On LBRACKET reduce production binaryop -> LSL
-- On INTCONST reduce production binaryop -> LSL
-- On IDENT reduce production binaryop -> LSL
-- On FLOATCONST reduce production binaryop -> LSL
-- On EXIT reduce production binaryop -> LSL

State 103:
## Known stack suffix:
## LOAD
## LR(1) items:
unaryop -> LOAD . chunk [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On VAL shift to state 67
-- On UNSIGNED shift to state 68
-- On SIGNED shift to state 72
-- On INT shift to state 76
-- On FLOAT64 shift to state 77
-- On FLOAT32 shift to state 78
-- On FLOAT shift to state 79
-- On ADDR shift to state 80
-- On chunk shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## LOAD chunk
## LR(1) items:
unaryop -> LOAD chunk . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production unaryop -> LOAD chunk
-- On POINTER reduce production unaryop -> LOAD chunk
-- On LPAREN reduce production unaryop -> LOAD chunk
-- On LBRACKET reduce production unaryop -> LOAD chunk
-- On INTCONST reduce production unaryop -> LOAD chunk
-- On IDENT reduce production unaryop -> LOAD chunk
-- On FLOATCONST reduce production unaryop -> LOAD chunk
-- On EXIT reduce production unaryop -> LOAD chunk

State 105:
## Known stack suffix:
## LPAREN LET
## LR(1) items:
expr -> LPAREN LET . letdef sequence RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On LPAREN shift to state 106
-- On IDENT shift to state 107
-- On oneletdef shift to state 113
-- On letdef shift to state 114
## Reductions:

State 106:
## Known stack suffix:
## LPAREN
## LR(1) items:
letdef -> LPAREN . letdefmult RPAREN [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On IDENT shift to state 107
-- On oneletdef shift to state 109
-- On letdefmult shift to state 111
## Reductions:
-- On RPAREN reduce production letdefmult ->

State 107:
## Known stack suffix:
## IDENT
## LR(1) items:
oneletdef -> IDENT . expr [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## IDENT expr
## LR(1) items:
oneletdef -> IDENT expr . [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production oneletdef -> IDENT expr
-- On RPAREN reduce production oneletdef -> IDENT expr
-- On POINTER reduce production oneletdef -> IDENT expr
-- On LPAREN reduce production oneletdef -> IDENT expr
-- On LBRACKET reduce production oneletdef -> IDENT expr
-- On INTCONST reduce production oneletdef -> IDENT expr
-- On IDENT reduce production oneletdef -> IDENT expr
-- On FLOATCONST reduce production oneletdef -> IDENT expr
-- On EXIT reduce production oneletdef -> IDENT expr

State 109:
## Known stack suffix:
## oneletdef
## LR(1) items:
letdefmult -> oneletdef . letdefmult [ RPAREN ]
## Transitions:
-- On IDENT shift to state 107
-- On oneletdef shift to state 109
-- On letdefmult shift to state 110
## Reductions:
-- On RPAREN reduce production letdefmult ->

State 110:
## Known stack suffix:
## oneletdef letdefmult
## LR(1) items:
letdefmult -> oneletdef letdefmult . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN reduce production letdefmult -> oneletdef letdefmult

State 111:
## Known stack suffix:
## LPAREN letdefmult
## LR(1) items:
letdef -> LPAREN letdefmult . RPAREN [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On RPAREN shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## LPAREN letdefmult RPAREN
## LR(1) items:
letdef -> LPAREN letdefmult RPAREN . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production letdef -> LPAREN letdefmult RPAREN
-- On POINTER reduce production letdef -> LPAREN letdefmult RPAREN
-- On LPAREN reduce production letdef -> LPAREN letdefmult RPAREN
-- On LBRACKET reduce production letdef -> LPAREN letdefmult RPAREN
-- On INTCONST reduce production letdef -> LPAREN letdefmult RPAREN
-- On IDENT reduce production letdef -> LPAREN letdefmult RPAREN
-- On FLOATCONST reduce production letdef -> LPAREN letdefmult RPAREN
-- On EXIT reduce production letdef -> LPAREN letdefmult RPAREN

State 113:
## Known stack suffix:
## oneletdef
## LR(1) items:
letdef -> oneletdef . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production letdef -> oneletdef
-- On POINTER reduce production letdef -> oneletdef
-- On LPAREN reduce production letdef -> oneletdef
-- On LBRACKET reduce production letdef -> oneletdef
-- On INTCONST reduce production letdef -> oneletdef
-- On IDENT reduce production letdef -> oneletdef
-- On FLOATCONST reduce production letdef -> oneletdef
-- On EXIT reduce production letdef -> oneletdef

State 114:
## Known stack suffix:
## LPAREN LET letdef
## LR(1) items:
expr -> LPAREN LET letdef . sequence RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On sequence shift to state 115
-- On expr shift to state 35
## Reductions:

State 115:
## Known stack suffix:
## LPAREN LET letdef sequence
## LR(1) items:
expr -> LPAREN LET letdef sequence . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## LPAREN LET letdef sequence RPAREN
## LR(1) items:
expr -> LPAREN LET letdef sequence RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On VAL reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On UNIT reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On STRING reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On RPAREN reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On POINTER reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On LPAREN reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On LBRACKET reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On INTCONST reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On INT reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On IDENT reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On FLOATCONST reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On FLOAT reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On EXIT reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On CASE reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On AND reduce production expr -> LPAREN LET letdef sequence RPAREN
-- On ADDR reduce production expr -> LPAREN LET letdef sequence RPAREN

State 117:
## Known stack suffix:
## LEI
## LR(1) items:
binaryop -> LEI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> LEI
-- On POINTER reduce production binaryop -> LEI
-- On LPAREN reduce production binaryop -> LEI
-- On LBRACKET reduce production binaryop -> LEI
-- On INTCONST reduce production binaryop -> LEI
-- On IDENT reduce production binaryop -> LEI
-- On FLOATCONST reduce production binaryop -> LEI
-- On EXIT reduce production binaryop -> LEI

State 118:
## Known stack suffix:
## LEF
## LR(1) items:
binaryop -> LEF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> LEF
-- On POINTER reduce production binaryop -> LEF
-- On LPAREN reduce production binaryop -> LEF
-- On LBRACKET reduce production binaryop -> LEF
-- On INTCONST reduce production binaryop -> LEF
-- On IDENT reduce production binaryop -> LEF
-- On FLOATCONST reduce production binaryop -> LEF
-- On EXIT reduce production binaryop -> LEF

State 119:
## Known stack suffix:
## LEA
## LR(1) items:
binaryop -> LEA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> LEA
-- On POINTER reduce production binaryop -> LEA
-- On LPAREN reduce production binaryop -> LEA
-- On LBRACKET reduce production binaryop -> LEA
-- On INTCONST reduce production binaryop -> LEA
-- On IDENT reduce production binaryop -> LEA
-- On FLOATCONST reduce production binaryop -> LEA
-- On EXIT reduce production binaryop -> LEA

State 120:
## Known stack suffix:
## INTOFFLOAT
## LR(1) items:
unaryop -> INTOFFLOAT . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production unaryop -> INTOFFLOAT
-- On POINTER reduce production unaryop -> INTOFFLOAT
-- On LPAREN reduce production unaryop -> INTOFFLOAT
-- On LBRACKET reduce production unaryop -> INTOFFLOAT
-- On INTCONST reduce production unaryop -> INTOFFLOAT
-- On IDENT reduce production unaryop -> INTOFFLOAT
-- On FLOATCONST reduce production unaryop -> INTOFFLOAT
-- On EXIT reduce production unaryop -> INTOFFLOAT

State 121:
## Known stack suffix:
## LPAREN INTASET
## LR(1) items:
expr -> LPAREN INTASET . expr expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## LPAREN INTASET expr
## LR(1) items:
expr -> LPAREN INTASET expr . expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## LPAREN INTASET expr expr
## LR(1) items:
expr -> LPAREN INTASET expr expr . expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## LPAREN INTASET expr expr expr
## LR(1) items:
expr -> LPAREN INTASET expr expr expr . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## LPAREN INTASET expr expr expr RPAREN
## LR(1) items:
expr -> LPAREN INTASET expr expr expr RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On VAL reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On UNIT reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On STRING reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On RPAREN reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On POINTER reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On LPAREN reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On INTCONST reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On INT reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On IDENT reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On FLOATCONST reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On FLOAT reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On EXIT reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On CASE reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On AND reduce production expr -> LPAREN INTASET expr expr expr RPAREN
-- On ADDR reduce production expr -> LPAREN INTASET expr expr expr RPAREN

State 126:
## Known stack suffix:
## LPAREN INTAREF
## LR(1) items:
expr -> LPAREN INTAREF . expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## LPAREN INTAREF expr
## LR(1) items:
expr -> LPAREN INTAREF expr . expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## LPAREN INTAREF expr expr
## LR(1) items:
expr -> LPAREN INTAREF expr expr . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## LPAREN INTAREF expr expr RPAREN
## LR(1) items:
expr -> LPAREN INTAREF expr expr RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On VAL reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On UNIT reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On STRING reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On RPAREN reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On POINTER reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On LPAREN reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On INTCONST reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On INT reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On IDENT reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On FLOATCONST reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On FLOAT reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On EXIT reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On CASE reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On AND reduce production expr -> LPAREN INTAREF expr expr RPAREN
-- On ADDR reduce production expr -> LPAREN INTAREF expr expr RPAREN

State 130:
## Known stack suffix:
## LPAREN IF
## LR(1) items:
expr -> LPAREN IF . expr expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## LPAREN IF expr
## LR(1) items:
expr -> LPAREN IF expr . expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## LPAREN IF expr expr
## LR(1) items:
expr -> LPAREN IF expr expr . expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## LPAREN IF expr expr expr
## LR(1) items:
expr -> LPAREN IF expr expr expr . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## LPAREN IF expr expr expr RPAREN
## LR(1) items:
expr -> LPAREN IF expr expr expr RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On VAL reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On UNIT reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On STRING reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On RPAREN reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On POINTER reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On LPAREN reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On INTCONST reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On INT reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On IDENT reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On FLOATCONST reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On FLOAT reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On EXIT reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On CASE reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On AND reduce production expr -> LPAREN IF expr expr expr RPAREN
-- On ADDR reduce production expr -> LPAREN IF expr expr expr RPAREN

State 135:
## Known stack suffix:
## GTI
## LR(1) items:
binaryop -> GTI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> GTI
-- On POINTER reduce production binaryop -> GTI
-- On LPAREN reduce production binaryop -> GTI
-- On LBRACKET reduce production binaryop -> GTI
-- On INTCONST reduce production binaryop -> GTI
-- On IDENT reduce production binaryop -> GTI
-- On FLOATCONST reduce production binaryop -> GTI
-- On EXIT reduce production binaryop -> GTI

State 136:
## Known stack suffix:
## GTF
## LR(1) items:
binaryop -> GTF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> GTF
-- On POINTER reduce production binaryop -> GTF
-- On LPAREN reduce production binaryop -> GTF
-- On LBRACKET reduce production binaryop -> GTF
-- On INTCONST reduce production binaryop -> GTF
-- On IDENT reduce production binaryop -> GTF
-- On FLOATCONST reduce production binaryop -> GTF
-- On EXIT reduce production binaryop -> GTF

State 137:
## Known stack suffix:
## GTA
## LR(1) items:
binaryop -> GTA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> GTA
-- On POINTER reduce production binaryop -> GTA
-- On LPAREN reduce production binaryop -> GTA
-- On LBRACKET reduce production binaryop -> GTA
-- On INTCONST reduce production binaryop -> GTA
-- On IDENT reduce production binaryop -> GTA
-- On FLOATCONST reduce production binaryop -> GTA
-- On EXIT reduce production binaryop -> GTA

State 138:
## Known stack suffix:
## GEI
## LR(1) items:
binaryop -> GEI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> GEI
-- On POINTER reduce production binaryop -> GEI
-- On LPAREN reduce production binaryop -> GEI
-- On LBRACKET reduce production binaryop -> GEI
-- On INTCONST reduce production binaryop -> GEI
-- On IDENT reduce production binaryop -> GEI
-- On FLOATCONST reduce production binaryop -> GEI
-- On EXIT reduce production binaryop -> GEI

State 139:
## Known stack suffix:
## GEF
## LR(1) items:
binaryop -> GEF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> GEF
-- On POINTER reduce production binaryop -> GEF
-- On LPAREN reduce production binaryop -> GEF
-- On LBRACKET reduce production binaryop -> GEF
-- On INTCONST reduce production binaryop -> GEF
-- On IDENT reduce production binaryop -> GEF
-- On FLOATCONST reduce production binaryop -> GEF
-- On EXIT reduce production binaryop -> GEF

State 140:
## Known stack suffix:
## GEA
## LR(1) items:
binaryop -> GEA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> GEA
-- On POINTER reduce production binaryop -> GEA
-- On LPAREN reduce production binaryop -> GEA
-- On LBRACKET reduce production binaryop -> GEA
-- On INTCONST reduce production binaryop -> GEA
-- On IDENT reduce production binaryop -> GEA
-- On FLOATCONST reduce production binaryop -> GEA
-- On EXIT reduce production binaryop -> GEA

State 141:
## Known stack suffix:
## FLOATOFINT
## LR(1) items:
unaryop -> FLOATOFINT . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production unaryop -> FLOATOFINT
-- On POINTER reduce production unaryop -> FLOATOFINT
-- On LPAREN reduce production unaryop -> FLOATOFINT
-- On LBRACKET reduce production unaryop -> FLOATOFINT
-- On INTCONST reduce production unaryop -> FLOATOFINT
-- On IDENT reduce production unaryop -> FLOATOFINT
-- On FLOATCONST reduce production unaryop -> FLOATOFINT
-- On EXIT reduce production unaryop -> FLOATOFINT

State 142:
## Known stack suffix:
## LPAREN FLOATASET
## LR(1) items:
expr -> LPAREN FLOATASET . expr expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## LPAREN FLOATASET expr
## LR(1) items:
expr -> LPAREN FLOATASET expr . expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## LPAREN FLOATASET expr expr
## LR(1) items:
expr -> LPAREN FLOATASET expr expr . expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## LPAREN FLOATASET expr expr expr
## LR(1) items:
expr -> LPAREN FLOATASET expr expr expr . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## LPAREN FLOATASET expr expr expr RPAREN
## LR(1) items:
expr -> LPAREN FLOATASET expr expr expr RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On VAL reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On UNIT reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On STRING reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On RPAREN reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On POINTER reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On LPAREN reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On INTCONST reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On INT reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On IDENT reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On FLOATCONST reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On FLOAT reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On EXIT reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On CASE reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On AND reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN
-- On ADDR reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN

State 147:
## Known stack suffix:
## LPAREN FLOATAREF
## LR(1) items:
expr -> LPAREN FLOATAREF . expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## LPAREN FLOATAREF expr
## LR(1) items:
expr -> LPAREN FLOATAREF expr . expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## LPAREN FLOATAREF expr expr
## LR(1) items:
expr -> LPAREN FLOATAREF expr expr . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 150
## Reductions:

State 150:
## Known stack suffix:
## LPAREN FLOATAREF expr expr RPAREN
## LR(1) items:
expr -> LPAREN FLOATAREF expr expr RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On VAL reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On UNIT reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On STRING reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On RPAREN reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On POINTER reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On LPAREN reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On INTCONST reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On INT reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On IDENT reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On FLOATCONST reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On FLOAT reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On EXIT reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On CASE reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On AND reduce production expr -> LPAREN FLOATAREF expr expr RPAREN
-- On ADDR reduce production expr -> LPAREN FLOATAREF expr expr RPAREN

State 151:
## Known stack suffix:
## LPAREN EXTCALL
## LR(1) items:
expr -> LPAREN EXTCALL . STRING exprlist machtype RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## LPAREN EXTCALL STRING
## LR(1) items:
expr -> LPAREN EXTCALL STRING . exprlist machtype RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On exprlist shift to state 153
## Reductions:
-- On VAL reduce production exprlist ->
-- On UNIT reduce production exprlist ->
-- On STRING reduce production exprlist ->
-- On POINTER reduce production exprlist ->
-- On LPAREN reduce production exprlist ->
-- On LBRACKET reduce production exprlist ->
-- On INTCONST reduce production exprlist ->
-- On INT reduce production exprlist ->
-- On IDENT reduce production exprlist ->
-- On FLOATCONST reduce production exprlist ->
-- On FLOAT reduce production exprlist ->
-- On EXIT reduce production exprlist ->
-- On ADDR reduce production exprlist ->

State 153:
## Known stack suffix:
## LPAREN EXTCALL STRING exprlist
## LR(1) items:
expr -> LPAREN EXTCALL STRING exprlist . machtype RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
exprlist -> exprlist . expr [ VAL UNIT STRING POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT ADDR ]
## Transitions:
-- On VAL shift to state 9
-- On UNIT shift to state 10
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On INT shift to state 11
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On FLOAT shift to state 12
-- On EXIT shift to state 31
-- On ADDR shift to state 13
-- On machtype shift to state 154
-- On expr shift to state 156
-- On componentlist shift to state 15
-- On component shift to state 18
## Reductions:

State 154:
## Known stack suffix:
## LPAREN EXTCALL STRING exprlist machtype
## LR(1) items:
expr -> LPAREN EXTCALL STRING exprlist machtype . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 155
## Reductions:

State 155:
## Known stack suffix:
## LPAREN EXTCALL STRING exprlist machtype RPAREN
## LR(1) items:
expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On VAL reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On UNIT reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On STRING reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On RPAREN reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On POINTER reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On LPAREN reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On LBRACKET reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On INTCONST reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On INT reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On IDENT reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On FLOATCONST reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On FLOAT reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On EXIT reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On CASE reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On AND reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN
-- On ADDR reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN

State 156:
## Known stack suffix:
## exprlist expr
## LR(1) items:
exprlist -> exprlist expr . [ VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT ADDR ]
## Transitions:
## Reductions:
-- On VAL reduce production exprlist -> exprlist expr
-- On UNIT reduce production exprlist -> exprlist expr
-- On STRING reduce production exprlist -> exprlist expr
-- On RPAREN reduce production exprlist -> exprlist expr
-- On POINTER reduce production exprlist -> exprlist expr
-- On LPAREN reduce production exprlist -> exprlist expr
-- On LBRACKET reduce production exprlist -> exprlist expr
-- On INTCONST reduce production exprlist -> exprlist expr
-- On INT reduce production exprlist -> exprlist expr
-- On IDENT reduce production exprlist -> exprlist expr
-- On FLOATCONST reduce production exprlist -> exprlist expr
-- On FLOAT reduce production exprlist -> exprlist expr
-- On EXIT reduce production exprlist -> exprlist expr
-- On ADDR reduce production exprlist -> exprlist expr

State 157:
## Known stack suffix:
## LPAREN EXIT
## LR(1) items:
expr -> LPAREN EXIT . IDENT exprlist RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On IDENT shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## LPAREN EXIT IDENT
## LR(1) items:
expr -> LPAREN EXIT IDENT . exprlist RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On exprlist shift to state 159
## Reductions:
-- On STRING reduce production exprlist ->
-- On RPAREN reduce production exprlist ->
-- On POINTER reduce production exprlist ->
-- On LPAREN reduce production exprlist ->
-- On LBRACKET reduce production exprlist ->
-- On INTCONST reduce production exprlist ->
-- On IDENT reduce production exprlist ->
-- On FLOATCONST reduce production exprlist ->
-- On EXIT reduce production exprlist ->

State 159:
## Known stack suffix:
## LPAREN EXIT IDENT exprlist
## LR(1) items:
expr -> LPAREN EXIT IDENT exprlist . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
exprlist -> exprlist . expr [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On STRING shift to state 21
-- On RPAREN shift to state 160
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 156
## Reductions:

State 160:
## Known stack suffix:
## LPAREN EXIT IDENT exprlist RPAREN
## LR(1) items:
expr -> LPAREN EXIT IDENT exprlist RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On VAL reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On UNIT reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On STRING reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On RPAREN reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On POINTER reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On LPAREN reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On LBRACKET reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On INTCONST reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On INT reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On IDENT reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On FLOATCONST reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On FLOAT reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On EXIT reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On CASE reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On AND reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN
-- On ADDR reduce production expr -> LPAREN EXIT IDENT exprlist RPAREN

State 161:
## Known stack suffix:
## EQI
## LR(1) items:
binaryop -> EQI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> EQI
-- On POINTER reduce production binaryop -> EQI
-- On LPAREN reduce production binaryop -> EQI
-- On LBRACKET reduce production binaryop -> EQI
-- On INTCONST reduce production binaryop -> EQI
-- On IDENT reduce production binaryop -> EQI
-- On FLOATCONST reduce production binaryop -> EQI
-- On EXIT reduce production binaryop -> EQI

State 162:
## Known stack suffix:
## EQF
## LR(1) items:
binaryop -> EQF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> EQF
-- On POINTER reduce production binaryop -> EQF
-- On LPAREN reduce production binaryop -> EQF
-- On LBRACKET reduce production binaryop -> EQF
-- On INTCONST reduce production binaryop -> EQF
-- On IDENT reduce production binaryop -> EQF
-- On FLOATCONST reduce production binaryop -> EQF
-- On EXIT reduce production binaryop -> EQF

State 163:
## Known stack suffix:
## EQA
## LR(1) items:
binaryop -> EQA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> EQA
-- On POINTER reduce production binaryop -> EQA
-- On LPAREN reduce production binaryop -> EQA
-- On LBRACKET reduce production binaryop -> EQA
-- On INTCONST reduce production binaryop -> EQA
-- On IDENT reduce production binaryop -> EQA
-- On FLOATCONST reduce production binaryop -> EQA
-- On EXIT reduce production binaryop -> EQA

State 164:
## Known stack suffix:
## DIVI
## LR(1) items:
binaryop -> DIVI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> DIVI
-- On POINTER reduce production binaryop -> DIVI
-- On LPAREN reduce production binaryop -> DIVI
-- On LBRACKET reduce production binaryop -> DIVI
-- On INTCONST reduce production binaryop -> DIVI
-- On IDENT reduce production binaryop -> DIVI
-- On FLOATCONST reduce production binaryop -> DIVI
-- On EXIT reduce production binaryop -> DIVI

State 165:
## Known stack suffix:
## DIVF
## LR(1) items:
binaryop -> DIVF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> DIVF
-- On POINTER reduce production binaryop -> DIVF
-- On LPAREN reduce production binaryop -> DIVF
-- On LBRACKET reduce production binaryop -> DIVF
-- On INTCONST reduce production binaryop -> DIVF
-- On IDENT reduce production binaryop -> DIVF
-- On FLOATCONST reduce production binaryop -> DIVF
-- On EXIT reduce production binaryop -> DIVF

State 166:
## Known stack suffix:
## CHECKBOUND
## LR(1) items:
binaryop -> CHECKBOUND . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> CHECKBOUND
-- On POINTER reduce production binaryop -> CHECKBOUND
-- On LPAREN reduce production binaryop -> CHECKBOUND
-- On LBRACKET reduce production binaryop -> CHECKBOUND
-- On INTCONST reduce production binaryop -> CHECKBOUND
-- On IDENT reduce production binaryop -> CHECKBOUND
-- On FLOATCONST reduce production binaryop -> CHECKBOUND
-- On EXIT reduce production binaryop -> CHECKBOUND

State 167:
## Known stack suffix:
## LPAREN CATCH
## LR(1) items:
expr -> LPAREN CATCH . sequence WITH catch_handlers RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On sequence shift to state 168
-- On expr shift to state 35
## Reductions:

State 168:
## Known stack suffix:
## LPAREN CATCH sequence
## LR(1) items:
expr -> LPAREN CATCH sequence . WITH catch_handlers RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On WITH shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## LPAREN CATCH sequence WITH
## LR(1) items:
expr -> LPAREN CATCH sequence WITH . catch_handlers RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 170
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On sequence shift to state 214
-- On expr shift to state 35
-- On catch_handlers shift to state 215
-- On catch_handler shift to state 217
## Reductions:

State 170:
## Known stack suffix:
## LPAREN
## LR(1) items:
catch_handler -> LPAREN . IDENT bind_identlist RPAREN sequence [ RPAREN AND ]
expr -> LPAREN . LET letdef sequence RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . ASSIGN IDENT expr RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . APPLY location expr exprlist machtype RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . EXTCALL STRING exprlist machtype RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . ALLOC exprlist RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . SUBF expr RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . SUBF expr expr RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . unaryop expr RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . binaryop expr expr RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . SEQ sequence RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . IF expr expr expr RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . SWITCH INTCONST expr caselist RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . WHILE expr sequence RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . EXIT IDENT exprlist RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . CATCH sequence WITH catch_handlers RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . TRY sequence WITH bind_ident sequence RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . VAL expr expr RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . ADDRAREF expr expr RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . INTAREF expr expr RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . FLOATAREF expr expr RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . ADDRASET expr expr expr RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . INTASET expr expr expr RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
expr -> LPAREN . FLOATASET expr expr expr RPAREN [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT AND ]
## Transitions:
-- On XOR shift to state 24
-- On WHILE shift to state 25
-- On VAL shift to state 37
-- On TRY shift to state 41
-- On SWITCH shift to state 48
-- On SUBI shift to state 60
-- On SUBF shift to state 61
-- On STORE shift to state 66
-- On STAR shift to state 82
-- On SEQ shift to state 83
-- On RAISE shift to state 86
-- On OR shift to state 87
-- On NLTF shift to state 88
-- On NLEF shift to state 89
-- On NGTF shift to state 90
-- On NGEF shift to state 91
-- On NEI shift to state 92
-- On NEF shift to state 93
-- On NEA shift to state 94
-- On MULH shift to state 95
-- On MULF shift to state 96
-- On MODI shift to state 97
-- On LTI shift to state 98
-- On LTF shift to state 99
-- On LTA shift to state 100
-- On LSR shift to state 101
-- On LSL shift to state 102
-- On LOAD shift to state 103
-- On LET shift to state 105
-- On LEI shift to state 117
-- On LEF shift to state 118
-- On LEA shift to state 119
-- On INTOFFLOAT shift to state 120
-- On INTASET shift to state 121
-- On INTAREF shift to state 126
-- On IF shift to state 130
-- On IDENT shift to state 171
-- On GTI shift to state 135
-- On GTF shift to state 136
-- On GTA shift to state 137
-- On GEI shift to state 138
-- On GEF shift to state 139
-- On GEA shift to state 140
-- On FLOATOFINT shift to state 141
-- On FLOATASET shift to state 142
-- On FLOATAREF shift to state 147
-- On EXTCALL shift to state 151
-- On EXIT shift to state 157
-- On EQI shift to state 161
-- On EQF shift to state 162
-- On EQA shift to state 163
-- On DIVI shift to state 164
-- On DIVF shift to state 165
-- On CHECKBOUND shift to state 166
-- On CATCH shift to state 167
-- On ASSIGN shift to state 177
-- On ASR shift to state 181
-- On APPLY shift to state 182
-- On AND shift to state 189
-- On ALLOC shift to state 190
-- On ADDV shift to state 193
-- On ADDRASET shift to state 194
-- On ADDRAREF shift to state 199
-- On ADDI shift to state 203
-- On ADDF shift to state 204
-- On ADDA shift to state 205
-- On ABSF shift to state 206
-- On unaryop shift to state 207
-- On binaryop shift to state 210
## Reductions:

State 171:
## Known stack suffix:
## LPAREN IDENT
## LR(1) items:
catch_handler -> LPAREN IDENT . bind_identlist RPAREN sequence [ RPAREN AND ]
## Transitions:
-- On IDENT shift to state 44
-- On bind_identlist shift to state 172
-- On bind_ident shift to state 175
## Reductions:
-- On RPAREN reduce production bind_identlist ->

State 172:
## Known stack suffix:
## LPAREN IDENT bind_identlist
## LR(1) items:
catch_handler -> LPAREN IDENT bind_identlist . RPAREN sequence [ RPAREN AND ]
## Transitions:
-- On RPAREN shift to state 173
## Reductions:

State 173:
## Known stack suffix:
## LPAREN IDENT bind_identlist RPAREN
## LR(1) items:
catch_handler -> LPAREN IDENT bind_identlist RPAREN . sequence [ RPAREN AND ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On sequence shift to state 174
-- On expr shift to state 35
## Reductions:

State 174:
## Known stack suffix:
## LPAREN IDENT bind_identlist RPAREN sequence
## LR(1) items:
catch_handler -> LPAREN IDENT bind_identlist RPAREN sequence . [ RPAREN AND ]
## Transitions:
## Reductions:
-- On RPAREN reduce production catch_handler -> LPAREN IDENT bind_identlist RPAREN sequence
-- On AND reduce production catch_handler -> LPAREN IDENT bind_identlist RPAREN sequence

State 175:
## Known stack suffix:
## bind_ident
## LR(1) items:
bind_identlist -> bind_ident . bind_identlist [ RPAREN ]
## Transitions:
-- On IDENT shift to state 44
-- On bind_identlist shift to state 176
-- On bind_ident shift to state 175
## Reductions:
-- On RPAREN reduce production bind_identlist ->

State 176:
## Known stack suffix:
## bind_ident bind_identlist
## LR(1) items:
bind_identlist -> bind_ident bind_identlist . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN reduce production bind_identlist -> bind_ident bind_identlist

State 177:
## Known stack suffix:
## LPAREN ASSIGN
## LR(1) items:
expr -> LPAREN ASSIGN . IDENT expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On IDENT shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## LPAREN ASSIGN IDENT
## LR(1) items:
expr -> LPAREN ASSIGN IDENT . expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 179
## Reductions:

State 179:
## Known stack suffix:
## LPAREN ASSIGN IDENT expr
## LR(1) items:
expr -> LPAREN ASSIGN IDENT expr . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## LPAREN ASSIGN IDENT expr RPAREN
## LR(1) items:
expr -> LPAREN ASSIGN IDENT expr RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On VAL reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On UNIT reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On STRING reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On RPAREN reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On POINTER reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On LPAREN reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On INTCONST reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On INT reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On IDENT reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On FLOATCONST reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On FLOAT reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On EXIT reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On CASE reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On AND reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN
-- On ADDR reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN

State 181:
## Known stack suffix:
## ASR
## LR(1) items:
binaryop -> ASR . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> ASR
-- On POINTER reduce production binaryop -> ASR
-- On LPAREN reduce production binaryop -> ASR
-- On LBRACKET reduce production binaryop -> ASR
-- On INTCONST reduce production binaryop -> ASR
-- On IDENT reduce production binaryop -> ASR
-- On FLOATCONST reduce production binaryop -> ASR
-- On EXIT reduce production binaryop -> ASR

State 182:
## Known stack suffix:
## LPAREN APPLY
## LR(1) items:
expr -> LPAREN APPLY . location expr exprlist machtype RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On LOCATION shift to state 183
-- On location shift to state 184
## Reductions:
-- On STRING reduce production location ->
-- On POINTER reduce production location ->
-- On LPAREN reduce production location ->
-- On LBRACKET reduce production location ->
-- On INTCONST reduce production location ->
-- On IDENT reduce production location ->
-- On FLOATCONST reduce production location ->
-- On EXIT reduce production location ->

State 183:
## Known stack suffix:
## LOCATION
## LR(1) items:
location -> LOCATION . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production location -> LOCATION
-- On POINTER reduce production location -> LOCATION
-- On LPAREN reduce production location -> LOCATION
-- On LBRACKET reduce production location -> LOCATION
-- On INTCONST reduce production location -> LOCATION
-- On IDENT reduce production location -> LOCATION
-- On FLOATCONST reduce production location -> LOCATION
-- On EXIT reduce production location -> LOCATION

State 184:
## Known stack suffix:
## LPAREN APPLY location
## LR(1) items:
expr -> LPAREN APPLY location . expr exprlist machtype RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## LPAREN APPLY location expr
## LR(1) items:
expr -> LPAREN APPLY location expr . exprlist machtype RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On exprlist shift to state 186
## Reductions:
-- On VAL reduce production exprlist ->
-- On UNIT reduce production exprlist ->
-- On STRING reduce production exprlist ->
-- On POINTER reduce production exprlist ->
-- On LPAREN reduce production exprlist ->
-- On LBRACKET reduce production exprlist ->
-- On INTCONST reduce production exprlist ->
-- On INT reduce production exprlist ->
-- On IDENT reduce production exprlist ->
-- On FLOATCONST reduce production exprlist ->
-- On FLOAT reduce production exprlist ->
-- On EXIT reduce production exprlist ->
-- On ADDR reduce production exprlist ->

State 186:
## Known stack suffix:
## LPAREN APPLY location expr exprlist
## LR(1) items:
expr -> LPAREN APPLY location expr exprlist . machtype RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
exprlist -> exprlist . expr [ VAL UNIT STRING POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT ADDR ]
## Transitions:
-- On VAL shift to state 9
-- On UNIT shift to state 10
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On INT shift to state 11
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On FLOAT shift to state 12
-- On EXIT shift to state 31
-- On ADDR shift to state 13
-- On machtype shift to state 187
-- On expr shift to state 156
-- On componentlist shift to state 15
-- On component shift to state 18
## Reductions:

State 187:
## Known stack suffix:
## LPAREN APPLY location expr exprlist machtype
## LR(1) items:
expr -> LPAREN APPLY location expr exprlist machtype . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## LPAREN APPLY location expr exprlist machtype RPAREN
## LR(1) items:
expr -> LPAREN APPLY location expr exprlist machtype RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On VAL reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On UNIT reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On STRING reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On RPAREN reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On POINTER reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On LPAREN reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On LBRACKET reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On INTCONST reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On INT reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On IDENT reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On FLOATCONST reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On FLOAT reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On EXIT reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On CASE reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On AND reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN
-- On ADDR reduce production expr -> LPAREN APPLY location expr exprlist machtype RPAREN

State 189:
## Known stack suffix:
## AND
## LR(1) items:
binaryop -> AND . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> AND
-- On POINTER reduce production binaryop -> AND
-- On LPAREN reduce production binaryop -> AND
-- On LBRACKET reduce production binaryop -> AND
-- On INTCONST reduce production binaryop -> AND
-- On IDENT reduce production binaryop -> AND
-- On FLOATCONST reduce production binaryop -> AND
-- On EXIT reduce production binaryop -> AND

State 190:
## Known stack suffix:
## LPAREN ALLOC
## LR(1) items:
expr -> LPAREN ALLOC . exprlist RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On exprlist shift to state 191
## Reductions:
-- On STRING reduce production exprlist ->
-- On RPAREN reduce production exprlist ->
-- On POINTER reduce production exprlist ->
-- On LPAREN reduce production exprlist ->
-- On LBRACKET reduce production exprlist ->
-- On INTCONST reduce production exprlist ->
-- On IDENT reduce production exprlist ->
-- On FLOATCONST reduce production exprlist ->
-- On EXIT reduce production exprlist ->

State 191:
## Known stack suffix:
## LPAREN ALLOC exprlist
## LR(1) items:
expr -> LPAREN ALLOC exprlist . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
exprlist -> exprlist . expr [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On STRING shift to state 21
-- On RPAREN shift to state 192
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 156
## Reductions:

State 192:
## Known stack suffix:
## LPAREN ALLOC exprlist RPAREN
## LR(1) items:
expr -> LPAREN ALLOC exprlist RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On VAL reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On UNIT reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On STRING reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On RPAREN reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On POINTER reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On LPAREN reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On LBRACKET reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On INTCONST reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On INT reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On IDENT reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On FLOATCONST reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On FLOAT reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On EXIT reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On CASE reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On AND reduce production expr -> LPAREN ALLOC exprlist RPAREN
-- On ADDR reduce production expr -> LPAREN ALLOC exprlist RPAREN

State 193:
## Known stack suffix:
## ADDV
## LR(1) items:
binaryop -> ADDV . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> ADDV
-- On POINTER reduce production binaryop -> ADDV
-- On LPAREN reduce production binaryop -> ADDV
-- On LBRACKET reduce production binaryop -> ADDV
-- On INTCONST reduce production binaryop -> ADDV
-- On IDENT reduce production binaryop -> ADDV
-- On FLOATCONST reduce production binaryop -> ADDV
-- On EXIT reduce production binaryop -> ADDV

State 194:
## Known stack suffix:
## LPAREN ADDRASET
## LR(1) items:
expr -> LPAREN ADDRASET . expr expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## LPAREN ADDRASET expr
## LR(1) items:
expr -> LPAREN ADDRASET expr . expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## LPAREN ADDRASET expr expr
## LR(1) items:
expr -> LPAREN ADDRASET expr expr . expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## LPAREN ADDRASET expr expr expr
## LR(1) items:
expr -> LPAREN ADDRASET expr expr expr . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 198
## Reductions:

State 198:
## Known stack suffix:
## LPAREN ADDRASET expr expr expr RPAREN
## LR(1) items:
expr -> LPAREN ADDRASET expr expr expr RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On VAL reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On UNIT reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On STRING reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On RPAREN reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On POINTER reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On LPAREN reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On INTCONST reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On INT reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On IDENT reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On FLOATCONST reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On FLOAT reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On EXIT reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On CASE reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On AND reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN
-- On ADDR reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN

State 199:
## Known stack suffix:
## LPAREN ADDRAREF
## LR(1) items:
expr -> LPAREN ADDRAREF . expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## LPAREN ADDRAREF expr
## LR(1) items:
expr -> LPAREN ADDRAREF expr . expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## LPAREN ADDRAREF expr expr
## LR(1) items:
expr -> LPAREN ADDRAREF expr expr . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 202
## Reductions:

State 202:
## Known stack suffix:
## LPAREN ADDRAREF expr expr RPAREN
## LR(1) items:
expr -> LPAREN ADDRAREF expr expr RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On VAL reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On UNIT reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On STRING reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On RPAREN reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On POINTER reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On LPAREN reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On INTCONST reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On INT reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On IDENT reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On FLOATCONST reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On FLOAT reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On EXIT reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On CASE reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On AND reduce production expr -> LPAREN ADDRAREF expr expr RPAREN
-- On ADDR reduce production expr -> LPAREN ADDRAREF expr expr RPAREN

State 203:
## Known stack suffix:
## ADDI
## LR(1) items:
binaryop -> ADDI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> ADDI
-- On POINTER reduce production binaryop -> ADDI
-- On LPAREN reduce production binaryop -> ADDI
-- On LBRACKET reduce production binaryop -> ADDI
-- On INTCONST reduce production binaryop -> ADDI
-- On IDENT reduce production binaryop -> ADDI
-- On FLOATCONST reduce production binaryop -> ADDI
-- On EXIT reduce production binaryop -> ADDI

State 204:
## Known stack suffix:
## ADDF
## LR(1) items:
binaryop -> ADDF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> ADDF
-- On POINTER reduce production binaryop -> ADDF
-- On LPAREN reduce production binaryop -> ADDF
-- On LBRACKET reduce production binaryop -> ADDF
-- On INTCONST reduce production binaryop -> ADDF
-- On IDENT reduce production binaryop -> ADDF
-- On FLOATCONST reduce production binaryop -> ADDF
-- On EXIT reduce production binaryop -> ADDF

State 205:
## Known stack suffix:
## ADDA
## LR(1) items:
binaryop -> ADDA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production binaryop -> ADDA
-- On POINTER reduce production binaryop -> ADDA
-- On LPAREN reduce production binaryop -> ADDA
-- On LBRACKET reduce production binaryop -> ADDA
-- On INTCONST reduce production binaryop -> ADDA
-- On IDENT reduce production binaryop -> ADDA
-- On FLOATCONST reduce production binaryop -> ADDA
-- On EXIT reduce production binaryop -> ADDA

State 206:
## Known stack suffix:
## ABSF
## LR(1) items:
unaryop -> ABSF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Reductions:
-- On STRING reduce production unaryop -> ABSF
-- On POINTER reduce production unaryop -> ABSF
-- On LPAREN reduce production unaryop -> ABSF
-- On LBRACKET reduce production unaryop -> ABSF
-- On INTCONST reduce production unaryop -> ABSF
-- On IDENT reduce production unaryop -> ABSF
-- On FLOATCONST reduce production unaryop -> ABSF
-- On EXIT reduce production unaryop -> ABSF

State 207:
## Known stack suffix:
## LPAREN unaryop
## LR(1) items:
expr -> LPAREN unaryop . expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## LPAREN unaryop expr
## LR(1) items:
expr -> LPAREN unaryop expr . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## LPAREN unaryop expr RPAREN
## LR(1) items:
expr -> LPAREN unaryop expr RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN unaryop expr RPAREN
-- On VAL reduce production expr -> LPAREN unaryop expr RPAREN
-- On UNIT reduce production expr -> LPAREN unaryop expr RPAREN
-- On STRING reduce production expr -> LPAREN unaryop expr RPAREN
-- On RPAREN reduce production expr -> LPAREN unaryop expr RPAREN
-- On POINTER reduce production expr -> LPAREN unaryop expr RPAREN
-- On LPAREN reduce production expr -> LPAREN unaryop expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN unaryop expr RPAREN
-- On INTCONST reduce production expr -> LPAREN unaryop expr RPAREN
-- On INT reduce production expr -> LPAREN unaryop expr RPAREN
-- On IDENT reduce production expr -> LPAREN unaryop expr RPAREN
-- On FLOATCONST reduce production expr -> LPAREN unaryop expr RPAREN
-- On FLOAT reduce production expr -> LPAREN unaryop expr RPAREN
-- On EXIT reduce production expr -> LPAREN unaryop expr RPAREN
-- On CASE reduce production expr -> LPAREN unaryop expr RPAREN
-- On AND reduce production expr -> LPAREN unaryop expr RPAREN
-- On ADDR reduce production expr -> LPAREN unaryop expr RPAREN

State 210:
## Known stack suffix:
## LPAREN binaryop
## LR(1) items:
expr -> LPAREN binaryop . expr expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## LPAREN binaryop expr
## LR(1) items:
expr -> LPAREN binaryop expr . expr RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 23
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On expr shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## LPAREN binaryop expr expr
## LR(1) items:
expr -> LPAREN binaryop expr expr . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## LPAREN binaryop expr expr RPAREN
## LR(1) items:
expr -> LPAREN binaryop expr expr RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On VAL reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On UNIT reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On STRING reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On RPAREN reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On POINTER reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On LPAREN reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On INTCONST reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On INT reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On IDENT reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On FLOATCONST reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On FLOAT reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On EXIT reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On CASE reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On AND reduce production expr -> LPAREN binaryop expr expr RPAREN
-- On ADDR reduce production expr -> LPAREN binaryop expr expr RPAREN

State 214:
## Known stack suffix:
## sequence
## LR(1) items:
catch_handler -> sequence . [ RPAREN AND ]
## Transitions:
## Reductions:
-- On RPAREN reduce production catch_handler -> sequence
-- On AND reduce production catch_handler -> sequence

State 215:
## Known stack suffix:
## LPAREN CATCH sequence WITH catch_handlers
## LR(1) items:
expr -> LPAREN CATCH sequence WITH catch_handlers . RPAREN [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
-- On RPAREN shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## LPAREN CATCH sequence WITH catch_handlers RPAREN
## LR(1) items:
expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN . [ WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On VAL reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On UNIT reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On STRING reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On RPAREN reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On POINTER reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On LPAREN reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On LBRACKET reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On INTCONST reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On INT reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On IDENT reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On FLOATCONST reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On FLOAT reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On EXIT reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On CASE reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On AND reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN
-- On ADDR reduce production expr -> LPAREN CATCH sequence WITH catch_handlers RPAREN

State 217:
## Known stack suffix:
## catch_handler
## LR(1) items:
catch_handlers -> catch_handler . [ RPAREN ]
catch_handlers -> catch_handler . AND catch_handlers [ RPAREN ]
## Transitions:
-- On AND shift to state 218
## Reductions:
-- On RPAREN reduce production catch_handlers -> catch_handler

State 218:
## Known stack suffix:
## catch_handler AND
## LR(1) items:
catch_handlers -> catch_handler AND . catch_handlers [ RPAREN ]
## Transitions:
-- On STRING shift to state 21
-- On POINTER shift to state 22
-- On LPAREN shift to state 170
-- On LBRACKET shift to state 26
-- On INTCONST shift to state 28
-- On IDENT shift to state 29
-- On FLOATCONST shift to state 30
-- On EXIT shift to state 31
-- On sequence shift to state 214
-- On expr shift to state 35
-- On catch_handlers shift to state 219
-- On catch_handler shift to state 217
## Reductions:

State 219:
## Known stack suffix:
## catch_handler AND catch_handlers
## LR(1) items:
catch_handlers -> catch_handler AND catch_handlers . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN reduce production catch_handlers -> catch_handler AND catch_handlers

State 220:
## Known stack suffix:
## LPAREN FUNCTION fun_name LPAREN params RPAREN sequence
## LR(1) items:
fundecl -> LPAREN FUNCTION fun_name LPAREN params RPAREN sequence . RPAREN [ # ]
## Transitions:
-- On RPAREN shift to state 221
## Reductions:

State 221:
## Known stack suffix:
## LPAREN FUNCTION fun_name LPAREN params RPAREN sequence RPAREN
## LR(1) items:
fundecl -> LPAREN FUNCTION fun_name LPAREN params RPAREN sequence RPAREN . [ # ]
## Transitions:
## Reductions:
-- On # reduce production fundecl -> LPAREN FUNCTION fun_name LPAREN params RPAREN sequence RPAREN

State 222:
## Known stack suffix:
## oneparam
## LR(1) items:
params -> oneparam . params [ RPAREN ]
## Transitions:
-- On IDENT shift to state 7
-- On params shift to state 223
-- On oneparam shift to state 222
## Reductions:
-- On RPAREN reduce production params ->

State 223:
## Known stack suffix:
## oneparam params
## LR(1) items:
params -> oneparam params . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN reduce production params -> oneparam params

State 224:
## Known stack suffix:
## LPAREN DATA
## LR(1) items:
datadecl -> LPAREN DATA . datalist RPAREN [ # ]
## Transitions:
-- On datalist shift to state 225
## Reductions:
-- On VAL reduce production datalist ->
-- On STRING reduce production datalist ->
-- On SKIP reduce production datalist ->
-- On RPAREN reduce production datalist ->
-- On KSTRING reduce production datalist ->
-- On INT reduce production datalist ->
-- On HALF reduce production datalist ->
-- On GLOBAL reduce production datalist ->
-- On FLOAT reduce production datalist ->
-- On BYTE reduce production datalist ->
-- On ALIGN reduce production datalist ->
-- On ADDR reduce production datalist ->

State 225:
## Known stack suffix:
## LPAREN DATA datalist
## LR(1) items:
datadecl -> LPAREN DATA datalist . RPAREN [ # ]
datalist -> datalist . dataitem [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On VAL shift to state 226
-- On STRING shift to state 228
-- On SKIP shift to state 230
-- On RPAREN shift to state 232
-- On KSTRING shift to state 233
-- On INT shift to state 235
-- On HALF shift to state 237
-- On GLOBAL shift to state 239
-- On FLOAT shift to state 241
-- On BYTE shift to state 243
-- On ALIGN shift to state 245
-- On ADDR shift to state 247
-- On dataitem shift to state 249
## Reductions:

State 226:
## Known stack suffix:
## VAL
## LR(1) items:
dataitem -> VAL . STRING [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On STRING shift to state 227
## Reductions:

State 227:
## Known stack suffix:
## VAL STRING
## LR(1) items:
dataitem -> VAL STRING . [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Reductions:
-- On VAL reduce production dataitem -> VAL STRING
-- On STRING reduce production dataitem -> VAL STRING
-- On SKIP reduce production dataitem -> VAL STRING
-- On RPAREN reduce production dataitem -> VAL STRING
-- On KSTRING reduce production dataitem -> VAL STRING
-- On INT reduce production dataitem -> VAL STRING
-- On HALF reduce production dataitem -> VAL STRING
-- On GLOBAL reduce production dataitem -> VAL STRING
-- On FLOAT reduce production dataitem -> VAL STRING
-- On BYTE reduce production dataitem -> VAL STRING
-- On ALIGN reduce production dataitem -> VAL STRING
-- On ADDR reduce production dataitem -> VAL STRING

State 228:
## Known stack suffix:
## STRING
## LR(1) items:
dataitem -> STRING . COLON [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On COLON shift to state 229
## Reductions:

State 229:
## Known stack suffix:
## STRING COLON
## LR(1) items:
dataitem -> STRING COLON . [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Reductions:
-- On VAL reduce production dataitem -> STRING COLON
-- On STRING reduce production dataitem -> STRING COLON
-- On SKIP reduce production dataitem -> STRING COLON
-- On RPAREN reduce production dataitem -> STRING COLON
-- On KSTRING reduce production dataitem -> STRING COLON
-- On INT reduce production dataitem -> STRING COLON
-- On HALF reduce production dataitem -> STRING COLON
-- On GLOBAL reduce production dataitem -> STRING COLON
-- On FLOAT reduce production dataitem -> STRING COLON
-- On BYTE reduce production dataitem -> STRING COLON
-- On ALIGN reduce production dataitem -> STRING COLON
-- On ADDR reduce production dataitem -> STRING COLON

State 230:
## Known stack suffix:
## SKIP
## LR(1) items:
dataitem -> SKIP . INTCONST [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On INTCONST shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## SKIP INTCONST
## LR(1) items:
dataitem -> SKIP INTCONST . [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Reductions:
-- On VAL reduce production dataitem -> SKIP INTCONST
-- On STRING reduce production dataitem -> SKIP INTCONST
-- On SKIP reduce production dataitem -> SKIP INTCONST
-- On RPAREN reduce production dataitem -> SKIP INTCONST
-- On KSTRING reduce production dataitem -> SKIP INTCONST
-- On INT reduce production dataitem -> SKIP INTCONST
-- On HALF reduce production dataitem -> SKIP INTCONST
-- On GLOBAL reduce production dataitem -> SKIP INTCONST
-- On FLOAT reduce production dataitem -> SKIP INTCONST
-- On BYTE reduce production dataitem -> SKIP INTCONST
-- On ALIGN reduce production dataitem -> SKIP INTCONST
-- On ADDR reduce production dataitem -> SKIP INTCONST

State 232:
## Known stack suffix:
## LPAREN DATA datalist RPAREN
## LR(1) items:
datadecl -> LPAREN DATA datalist RPAREN . [ # ]
## Transitions:
## Reductions:
-- On # reduce production datadecl -> LPAREN DATA datalist RPAREN

State 233:
## Known stack suffix:
## KSTRING
## LR(1) items:
dataitem -> KSTRING . STRING [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On STRING shift to state 234
## Reductions:

State 234:
## Known stack suffix:
## KSTRING STRING
## LR(1) items:
dataitem -> KSTRING STRING . [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Reductions:
-- On VAL reduce production dataitem -> KSTRING STRING
-- On STRING reduce production dataitem -> KSTRING STRING
-- On SKIP reduce production dataitem -> KSTRING STRING
-- On RPAREN reduce production dataitem -> KSTRING STRING
-- On KSTRING reduce production dataitem -> KSTRING STRING
-- On INT reduce production dataitem -> KSTRING STRING
-- On HALF reduce production dataitem -> KSTRING STRING
-- On GLOBAL reduce production dataitem -> KSTRING STRING
-- On FLOAT reduce production dataitem -> KSTRING STRING
-- On BYTE reduce production dataitem -> KSTRING STRING
-- On ALIGN reduce production dataitem -> KSTRING STRING
-- On ADDR reduce production dataitem -> KSTRING STRING

State 235:
## Known stack suffix:
## INT
## LR(1) items:
dataitem -> INT . INTCONST [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On INTCONST shift to state 236
## Reductions:

State 236:
## Known stack suffix:
## INT INTCONST
## LR(1) items:
dataitem -> INT INTCONST . [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Reductions:
-- On VAL reduce production dataitem -> INT INTCONST
-- On STRING reduce production dataitem -> INT INTCONST
-- On SKIP reduce production dataitem -> INT INTCONST
-- On RPAREN reduce production dataitem -> INT INTCONST
-- On KSTRING reduce production dataitem -> INT INTCONST
-- On INT reduce production dataitem -> INT INTCONST
-- On HALF reduce production dataitem -> INT INTCONST
-- On GLOBAL reduce production dataitem -> INT INTCONST
-- On FLOAT reduce production dataitem -> INT INTCONST
-- On BYTE reduce production dataitem -> INT INTCONST
-- On ALIGN reduce production dataitem -> INT INTCONST
-- On ADDR reduce production dataitem -> INT INTCONST

State 237:
## Known stack suffix:
## HALF
## LR(1) items:
dataitem -> HALF . INTCONST [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On INTCONST shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## HALF INTCONST
## LR(1) items:
dataitem -> HALF INTCONST . [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Reductions:
-- On VAL reduce production dataitem -> HALF INTCONST
-- On STRING reduce production dataitem -> HALF INTCONST
-- On SKIP reduce production dataitem -> HALF INTCONST
-- On RPAREN reduce production dataitem -> HALF INTCONST
-- On KSTRING reduce production dataitem -> HALF INTCONST
-- On INT reduce production dataitem -> HALF INTCONST
-- On HALF reduce production dataitem -> HALF INTCONST
-- On GLOBAL reduce production dataitem -> HALF INTCONST
-- On FLOAT reduce production dataitem -> HALF INTCONST
-- On BYTE reduce production dataitem -> HALF INTCONST
-- On ALIGN reduce production dataitem -> HALF INTCONST
-- On ADDR reduce production dataitem -> HALF INTCONST

State 239:
## Known stack suffix:
## GLOBAL
## LR(1) items:
dataitem -> GLOBAL . STRING [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On STRING shift to state 240
## Reductions:

State 240:
## Known stack suffix:
## GLOBAL STRING
## LR(1) items:
dataitem -> GLOBAL STRING . [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Reductions:
-- On VAL reduce production dataitem -> GLOBAL STRING
-- On STRING reduce production dataitem -> GLOBAL STRING
-- On SKIP reduce production dataitem -> GLOBAL STRING
-- On RPAREN reduce production dataitem -> GLOBAL STRING
-- On KSTRING reduce production dataitem -> GLOBAL STRING
-- On INT reduce production dataitem -> GLOBAL STRING
-- On HALF reduce production dataitem -> GLOBAL STRING
-- On GLOBAL reduce production dataitem -> GLOBAL STRING
-- On FLOAT reduce production dataitem -> GLOBAL STRING
-- On BYTE reduce production dataitem -> GLOBAL STRING
-- On ALIGN reduce production dataitem -> GLOBAL STRING
-- On ADDR reduce production dataitem -> GLOBAL STRING

State 241:
## Known stack suffix:
## FLOAT
## LR(1) items:
dataitem -> FLOAT . FLOATCONST [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On FLOATCONST shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## FLOAT FLOATCONST
## LR(1) items:
dataitem -> FLOAT FLOATCONST . [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Reductions:
-- On VAL reduce production dataitem -> FLOAT FLOATCONST
-- On STRING reduce production dataitem -> FLOAT FLOATCONST
-- On SKIP reduce production dataitem -> FLOAT FLOATCONST
-- On RPAREN reduce production dataitem -> FLOAT FLOATCONST
-- On KSTRING reduce production dataitem -> FLOAT FLOATCONST
-- On INT reduce production dataitem -> FLOAT FLOATCONST
-- On HALF reduce production dataitem -> FLOAT FLOATCONST
-- On GLOBAL reduce production dataitem -> FLOAT FLOATCONST
-- On FLOAT reduce production dataitem -> FLOAT FLOATCONST
-- On BYTE reduce production dataitem -> FLOAT FLOATCONST
-- On ALIGN reduce production dataitem -> FLOAT FLOATCONST
-- On ADDR reduce production dataitem -> FLOAT FLOATCONST

State 243:
## Known stack suffix:
## BYTE
## LR(1) items:
dataitem -> BYTE . INTCONST [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On INTCONST shift to state 244
## Reductions:

State 244:
## Known stack suffix:
## BYTE INTCONST
## LR(1) items:
dataitem -> BYTE INTCONST . [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Reductions:
-- On VAL reduce production dataitem -> BYTE INTCONST
-- On STRING reduce production dataitem -> BYTE INTCONST
-- On SKIP reduce production dataitem -> BYTE INTCONST
-- On RPAREN reduce production dataitem -> BYTE INTCONST
-- On KSTRING reduce production dataitem -> BYTE INTCONST
-- On INT reduce production dataitem -> BYTE INTCONST
-- On HALF reduce production dataitem -> BYTE INTCONST
-- On GLOBAL reduce production dataitem -> BYTE INTCONST
-- On FLOAT reduce production dataitem -> BYTE INTCONST
-- On BYTE reduce production dataitem -> BYTE INTCONST
-- On ALIGN reduce production dataitem -> BYTE INTCONST
-- On ADDR reduce production dataitem -> BYTE INTCONST

State 245:
## Known stack suffix:
## ALIGN
## LR(1) items:
dataitem -> ALIGN . INTCONST [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On INTCONST shift to state 246
## Reductions:

State 246:
## Known stack suffix:
## ALIGN INTCONST
## LR(1) items:
dataitem -> ALIGN INTCONST . [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Reductions:
-- On VAL reduce production dataitem -> ALIGN INTCONST
-- On STRING reduce production dataitem -> ALIGN INTCONST
-- On SKIP reduce production dataitem -> ALIGN INTCONST
-- On RPAREN reduce production dataitem -> ALIGN INTCONST
-- On KSTRING reduce production dataitem -> ALIGN INTCONST
-- On INT reduce production dataitem -> ALIGN INTCONST
-- On HALF reduce production dataitem -> ALIGN INTCONST
-- On GLOBAL reduce production dataitem -> ALIGN INTCONST
-- On FLOAT reduce production dataitem -> ALIGN INTCONST
-- On BYTE reduce production dataitem -> ALIGN INTCONST
-- On ALIGN reduce production dataitem -> ALIGN INTCONST
-- On ADDR reduce production dataitem -> ALIGN INTCONST

State 247:
## Known stack suffix:
## ADDR
## LR(1) items:
dataitem -> ADDR . STRING [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On STRING shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## ADDR STRING
## LR(1) items:
dataitem -> ADDR STRING . [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Reductions:
-- On VAL reduce production dataitem -> ADDR STRING
-- On STRING reduce production dataitem -> ADDR STRING
-- On SKIP reduce production dataitem -> ADDR STRING
-- On RPAREN reduce production dataitem -> ADDR STRING
-- On KSTRING reduce production dataitem -> ADDR STRING
-- On INT reduce production dataitem -> ADDR STRING
-- On HALF reduce production dataitem -> ADDR STRING
-- On GLOBAL reduce production dataitem -> ADDR STRING
-- On FLOAT reduce production dataitem -> ADDR STRING
-- On BYTE reduce production dataitem -> ADDR STRING
-- On ALIGN reduce production dataitem -> ADDR STRING
-- On ADDR reduce production dataitem -> ADDR STRING

State 249:
## Known stack suffix:
## datalist dataitem
## LR(1) items:
datalist -> datalist dataitem . [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Reductions:
-- On VAL reduce production datalist -> datalist dataitem
-- On STRING reduce production datalist -> datalist dataitem
-- On SKIP reduce production datalist -> datalist dataitem
-- On RPAREN reduce production datalist -> datalist dataitem
-- On KSTRING reduce production datalist -> datalist dataitem
-- On INT reduce production datalist -> datalist dataitem
-- On HALF reduce production datalist -> datalist dataitem
-- On GLOBAL reduce production datalist -> datalist dataitem
-- On FLOAT reduce production datalist -> datalist dataitem
-- On BYTE reduce production datalist -> datalist dataitem
-- On ALIGN reduce production datalist -> datalist dataitem
-- On ADDR reduce production datalist -> datalist dataitem

State 250:
## Known stack suffix:
## LPAREN datalist
## LR(1) items:
datadecl -> LPAREN datalist . RPAREN [ # ]
datalist -> datalist . dataitem [ VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On VAL shift to state 226
-- On STRING shift to state 228
-- On SKIP shift to state 230
-- On RPAREN shift to state 251
-- On KSTRING shift to state 233
-- On INT shift to state 235
-- On HALF shift to state 237
-- On GLOBAL shift to state 239
-- On FLOAT shift to state 241
-- On BYTE shift to state 243
-- On ALIGN shift to state 245
-- On ADDR shift to state 247
-- On dataitem shift to state 249
## Reductions:

State 251:
## Known stack suffix:
## LPAREN datalist RPAREN
## LR(1) items:
datadecl -> LPAREN datalist RPAREN . [ # ]
## Transitions:
## Reductions:
-- On # reduce production datadecl -> LPAREN datalist RPAREN

State 252:
## Known stack suffix:
## EOF
## LR(1) items:
phrase -> EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production phrase -> EOF

State 253:
## Known stack suffix:
## phrase
## LR(1) items:
phrase' -> phrase . [ # ]
## Transitions:
## Reductions:
-- On # accept phrase

State 254:
## Known stack suffix:
## fundecl
## LR(1) items:
phrase -> fundecl . [ # ]
## Transitions:
## Reductions:
-- On # reduce production phrase -> fundecl

State 255:
## Known stack suffix:
## datadecl
## LR(1) items:
phrase -> datadecl . [ # ]
## Transitions:
## Reductions:
-- On # reduce production phrase -> datadecl

