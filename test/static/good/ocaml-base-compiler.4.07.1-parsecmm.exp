File "ocaml-base-compiler.4.07.1-parsecmm.mly", line 100, characters 7-11:
Warning: the token MULI is unused.
File "ocaml-base-compiler.4.07.1-parsecmm.mly", line 110, characters 7-11:
Warning: the token PROJ is unused.
Grammar has 27 nonterminal symbols, among which 1 start symbols.
Grammar has 99 terminal symbols.
Grammar has 142 productions.
nullable(unaryop) = false
nullable(sequence) = false
nullable(phrase) = false
nullable(params) = true
nullable(oneparam) = false
nullable(oneletdef) = false
nullable(onecase) = false
nullable(machtype) = false
nullable(location) = true
nullable(letdefmult) = true
nullable(letdef) = false
nullable(fundecl) = false
nullable(fun_name) = false
nullable(exprlist) = true
nullable(expr) = false
nullable(datalist) = true
nullable(dataitem) = false
nullable(datadecl) = false
nullable(componentlist) = false
nullable(component) = false
nullable(chunk) = false
nullable(catch_handlers) = false
nullable(catch_handler) = false
nullable(caselist) = true
nullable(bind_identlist) = true
nullable(bind_ident) = false
nullable(binaryop) = false
first(unaryop) = RAISE LOAD INTOFFLOAT FLOATOFINT ABSF
first(sequence) = STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT
first(phrase) = LPAREN EOF
first(params) = IDENT
first(oneparam) = IDENT
first(oneletdef) = IDENT
first(onecase) = CASE
first(machtype) = VAL UNIT INT FLOAT ADDR
first(location) = LOCATION
first(letdefmult) = IDENT
first(letdef) = LPAREN IDENT
first(fundecl) = LPAREN
first(fun_name) = STRING IDENT
first(exprlist) = STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT
first(expr) = STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT
first(datalist) = VAL STRING SKIP KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR
first(dataitem) = VAL STRING SKIP KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR
first(datadecl) = LPAREN
first(componentlist) = VAL INT FLOAT ADDR
first(component) = VAL INT FLOAT ADDR
first(chunk) = VAL UNSIGNED SIGNED INT FLOAT64 FLOAT32 FLOAT ADDR
first(catch_handlers) = STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT
first(catch_handler) = STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT
first(caselist) = CASE
first(bind_identlist) = IDENT
first(bind_ident) = IDENT
first(binaryop) = XOR SUBI STORE STAR OR NLTF NLEF NGTF NGEF NEI NEF NEA MULH MULF MODI LTI LTF LTA LSR LSL LEI LEF LEA GTI GTF GTA GEI GEF GEA EQI EQF EQA DIVI DIVF CHECKBOUND ASR AND ADDV ADDI ADDF ADDA
minimal(unaryop) = (* 1 *) FLOATOFINT
minimal(sequence) = (* 1 *) INTCONST
minimal(phrase) = (* 1 *) EOF
minimal(params) = (* 0 *)
minimal(oneparam) = (* 3 *) IDENT COLON UNIT
minimal(oneletdef) = (* 2 *) IDENT INTCONST
minimal(onecase) = (* 3 *) CASE INTCONST COLON
minimal(machtype) = (* 1 *) UNIT
minimal(location) = (* 0 *)
minimal(letdefmult) = (* 0 *)
minimal(letdef) = (* 2 *) LPAREN RPAREN
minimal(fundecl) = (* 7 *) LPAREN FUNCTION STRING LPAREN RPAREN INTCONST RPAREN
minimal(fun_name) = (* 1 *) STRING
minimal(exprlist) = (* 0 *)
minimal(expr) = (* 1 *) INTCONST
minimal(datalist) = (* 0 *)
minimal(dataitem) = (* 2 *) STRING COLON
minimal(datadecl) = (* 2 *) LPAREN RPAREN
minimal(componentlist) = (* 1 *) VAL
minimal(component) = (* 1 *) VAL
minimal(chunk) = (* 1 *) INT
minimal(catch_handlers) = (* 1 *) INTCONST
minimal(catch_handler) = (* 1 *) INTCONST
minimal(caselist) = (* 0 *)
minimal(bind_identlist) = (* 0 *)
minimal(bind_ident) = (* 1 *) IDENT
minimal(binaryop) = (* 1 *) ADDI
follow(unaryop) = STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT
follow(sequence) = WITH RPAREN CASE AND
follow(phrase) = #
follow(params) = RPAREN
follow(oneparam) = RPAREN IDENT
follow(oneletdef) = STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT
follow(onecase) = STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT
follow(machtype) = RPAREN IDENT
follow(location) = STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT
follow(letdefmult) = RPAREN
follow(letdef) = STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT
follow(fundecl) = #
follow(fun_name) = LPAREN
follow(exprlist) = VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT ADDR
follow(expr) = WITH VAL UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE AND ADDR
follow(datalist) = VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR
follow(dataitem) = VAL STRING SKIP RPAREN KSTRING INT HALF GLOBAL FLOAT BYTE ALIGN ADDR
follow(datadecl) = #
follow(componentlist) = STAR RPAREN IDENT
follow(component) = STAR RPAREN IDENT
follow(chunk) = STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT
follow(catch_handlers) = RPAREN
follow(catch_handler) = RPAREN AND
follow(caselist) = RPAREN
follow(bind_identlist) = RPAREN
follow(bind_ident) = STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT
follow(binaryop) = STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT
Built an LR(0) automaton with 256 states.
The grammar is SLR(1).
The construction mode is pager.
Built an LR(1) automaton with 256 states.
137 out of 256 states have a default reduction.
67 out of 256 states are represented.
0 out of 129 symbols keep track of their start position.
0 out of 129 symbols keep track of their end position.
119 out of 143 productions exploit shiftreduce optimization.
431 functions before inlining, 136 functions after inlining.
