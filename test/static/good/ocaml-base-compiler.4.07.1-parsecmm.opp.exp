File "ocaml-base-compiler.4.07.1-parsecmm.mly", line 100, characters 7-11:
Warning: the token MULI is unused.
File "ocaml-base-compiler.4.07.1-parsecmm.mly", line 110, characters 7-11:
Warning: the token PROJ is unused.
%{
open Cmm
open Parsecmmaux

let rec make_letdef def body =
  match def with
    [] -> body
  | (id, def) :: rem ->
      unbind_ident id;
      Clet(id, def, make_letdef rem body)

let make_switch n selector caselist =
  let index = Array.make n 0 in
  let casev = Array.of_list caselist in
  let actv = Array.make (Array.length casev) (Cexit(0,[])) in
  for i = 0 to Array.length casev - 1 do
    let (posl, e) = casev.(i) in
    List.iter (fun pos -> index.(pos) <- i) posl;
    actv.(i) <- e
  done;
  Cswitch(selector, index, actv, Debuginfo.none)

let access_array base numelt size =
  match numelt with
    Cconst_int 0 -> base
  | Cconst_int n -> Cop(Cadda, [base; Cconst_int(n * size)], Debuginfo.none)
  | _ -> Cop(Cadda, [base;
                     Cop(Clsl, [numelt; Cconst_int(Misc.log2 size)],
                         Debuginfo.none)],
             Debuginfo.none)

%}
%start phrase
%token ABSF
%token ADDA
%token ADDF
%token ADDI
%token ADDR
%token ADDRAREF
%token ADDRASET
%token ADDV
%token ALIGN
%token ALLOC
%token AND
%token APPLY
%token ASR
%token ASSIGN
%token BYTE
%token CASE
%token CATCH
%token CHECKBOUND
%token COLON
%token DATA
%token DIVF
%token DIVI
%token EOF
%token EQA
%token EQF
%token EQI
%token EXIT
%token EXTCALL
%token FLOAT
%token FLOAT32
%token FLOAT64
%token FLOATAREF
%token FLOATASET
%token <string> FLOATCONST
%token FLOATOFINT
%token FUNCTION
%token GEA
%token GEF
%token GEI
%token GLOBAL
%token GTA
%token GTF
%token GTI
%token HALF
%token <string> IDENT
%token IF
%token INT
%token INT32
%token INTAREF
%token INTASET
%token <int> INTCONST
%token INTOFFLOAT
%token KSTRING
%token LBRACKET
%token LEA
%token LEF
%token LEI
%token LET
%token LOAD
%token <Location.t> LOCATION
%token LPAREN
%token LSL
%token LSR
%token LTA
%token LTF
%token LTI
%token MODI
%token MULF
%token MULH
%token MULI
%token NEA
%token NEF
%token NEI
%token NGEF
%token NGTF
%token NLEF
%token NLTF
%token OR
%token <int> POINTER
%token PROJ
%token <Cmm.raise_kind> RAISE
%token RBRACKET
%token RPAREN
%token SEQ
%token SIGNED
%token SKIP
%token STAR
%token STORE
%token <string> STRING
%token SUBF
%token SUBI
%token SWITCH
%token TRY
%token UNIT
%token UNSIGNED
%token VAL
%token WHILE
%token WITH
%token XOR
%type <Cmm.phrase> phrase
%%

phrase:
  _1 = fundecl
    {                ( Cfunction _1 )}
| _1 = datadecl
    {                ( Cdata _1 )}
| _1 = EOF
    {                ( raise End_of_file )}

fundecl:
  _1 = LPAREN _2 = FUNCTION _3 = fun_name _4 = LPAREN _5 = params _6 = RPAREN _7 = sequence _8 = RPAREN
    {      ( List.iter (fun (id, ty) -> unbind_ident id) _5;
        {fun_name = _3; fun_args = _5; fun_body = _7;
         fun_codegen_options =
           if Config.flambda then [
             Reduce_code_size;
             No_CSE;
           ]
           else [ Reduce_code_size ];
         fun_dbg = debuginfo ()} )}

fun_name:
  _1 = STRING
    {                        ( _1 )}
| _1 = IDENT
    {                        ( _1 )}

params:
  _1 = oneparam _2 = params
    {                        ( _1 :: _2 )}
| 
    {                        ( [] )}

oneparam:
  _1 = IDENT _2 = COLON _3 = machtype
    {                         ( (bind_ident _1, _3) )}

machtype:
  _1 = UNIT
    {                                ( [||] )}
| _1 = componentlist
    {                                ( Array.of_list(List.rev _1) )}

component:
  _1 = VAL
    {                                ( Val )}
| _1 = ADDR
    {                                ( Addr )}
| _1 = INT
    {                                ( Int )}
| _1 = FLOAT
    {                                ( Float )}

componentlist:
  _1 = component
    {                                 ( [_1] )}
| _1 = componentlist _2 = STAR _3 = component
    {                                 ( _3 :: _1 )}

expr:
  _1 = INTCONST
    {                ( Cconst_int _1 )}
| _1 = FLOATCONST
    {                ( Cconst_float (float_of_string _1) )}
| _1 = STRING
    {                ( Cconst_symbol _1 )}
| _1 = POINTER
    {                ( Cconst_pointer _1 )}
| _1 = IDENT
    {                ( Cvar(find_ident _1) )}
| _1 = LBRACKET _2 = RBRACKET
    {                      ( Ctuple [] )}
| _1 = LPAREN _2 = LET _3 = letdef _4 = sequence _5 = RPAREN
    {                                      ( make_letdef _3 _4 )}
| _1 = LPAREN _2 = ASSIGN _3 = IDENT _4 = expr _5 = RPAREN
    {                                    ( Cassign(find_ident _3, _4) )}
| _1 = LPAREN _2 = APPLY _3 = location _4 = expr _5 = exprlist _6 = machtype _7 = RPAREN
    {                ( Cop(Capply _6, _4 :: List.rev _5, debuginfo ?loc:_3 ()) )}
| _1 = LPAREN _2 = EXTCALL _3 = STRING _4 = exprlist _5 = machtype _6 = RPAREN
    {               (Cop(Cextcall(_3, _5, false, None), List.rev _4, debuginfo ()))}
| _1 = LPAREN _2 = ALLOC _3 = exprlist _4 = RPAREN
    {                                 ( Cop(Calloc, List.rev _3, debuginfo ()) )}
| _1 = LPAREN _2 = SUBF _3 = expr _4 = RPAREN
    {                            ( Cop(Cnegf, [_3], debuginfo ()) )}
| _1 = LPAREN _2 = SUBF _3 = expr _4 = expr _5 = RPAREN
    {                                 ( Cop(Csubf, [_3; _4], debuginfo ()) )}
| _1 = LPAREN _2 = unaryop _3 = expr _4 = RPAREN
    {                               ( Cop(_2, [_3], debuginfo ()) )}
| _1 = LPAREN _2 = binaryop _3 = expr _4 = expr _5 = RPAREN
    {                                     ( Cop(_2, [_3; _4], debuginfo ()) )}
| _1 = LPAREN _2 = SEQ _3 = sequence _4 = RPAREN
    {                               ( _3 )}
| _1 = LPAREN _2 = IF _3 = expr _4 = expr _5 = expr _6 = RPAREN
    {                                    ( Cifthenelse(_3, _4, _5) )}
| _1 = LPAREN _2 = SWITCH _3 = INTCONST _4 = expr _5 = caselist _6 = RPAREN
    {                                                ( make_switch _3 _4 _5 )}
| _1 = LPAREN _2 = WHILE _3 = expr _4 = sequence _5 = RPAREN
    {      ( let body =
          match _3 with
            Cconst_int x when x <> 0 -> _4
          | _ -> Cifthenelse(_3, _4, (Cexit(0,[]))) in
        Ccatch(Recursive, [0, [], Cloop body], Ctuple []) )}
| _1 = LPAREN _2 = EXIT _3 = IDENT _4 = exprlist _5 = RPAREN
    {    ( Cexit(find_label _3, List.rev _4) )}
| _1 = LPAREN _2 = CATCH _3 = sequence _4 = WITH _5 = catch_handlers _6 = RPAREN
    {    ( let handlers = _5 in
      List.iter (fun (_, l, _) -> List.iter unbind_ident l) handlers;
      Ccatch(Recursive, handlers, _3) )}
| _1 = EXIT
    {                ( Cexit(0,[]) )}
| _1 = LPAREN _2 = TRY _3 = sequence _4 = WITH _5 = bind_ident _6 = sequence _7 = RPAREN
    {                ( unbind_ident _5; Ctrywith(_3, _5, _6) )}
| _1 = LPAREN _2 = VAL _3 = expr _4 = expr _5 = RPAREN
    {      ( Cop(Cload (Word_val, Mutable), [access_array _3 _4 Arch.size_addr],
          debuginfo ()) )}
| _1 = LPAREN _2 = ADDRAREF _3 = expr _4 = expr _5 = RPAREN
    {      ( Cop(Cload (Word_val, Mutable), [access_array _3 _4 Arch.size_addr],
          Debuginfo.none) )}
| _1 = LPAREN _2 = INTAREF _3 = expr _4 = expr _5 = RPAREN
    {      ( Cop(Cload (Word_int, Mutable), [access_array _3 _4 Arch.size_int],
          Debuginfo.none) )}
| _1 = LPAREN _2 = FLOATAREF _3 = expr _4 = expr _5 = RPAREN
    {      ( Cop(Cload (Double_u, Mutable), [access_array _3 _4 Arch.size_float],
          Debuginfo.none) )}
| _1 = LPAREN _2 = ADDRASET _3 = expr _4 = expr _5 = expr _6 = RPAREN
    {      ( Cop(Cstore (Word_val, Assignment),
            [access_array _3 _4 Arch.size_addr; _5], Debuginfo.none) )}
| _1 = LPAREN _2 = INTASET _3 = expr _4 = expr _5 = expr _6 = RPAREN
    {      ( Cop(Cstore (Word_int, Assignment),
            [access_array _3 _4 Arch.size_int; _5], Debuginfo.none) )}
| _1 = LPAREN _2 = FLOATASET _3 = expr _4 = expr _5 = expr _6 = RPAREN
    {      ( Cop(Cstore (Double_u, Assignment),
            [access_array _3 _4 Arch.size_float; _5], Debuginfo.none) )}

exprlist:
  _1 = exprlist _2 = expr
    {                                ( _2 :: _1 )}
| 
    {                                ( [] )}

letdef:
  _1 = oneletdef
    {                                ( [_1] )}
| _1 = LPAREN _2 = letdefmult _3 = RPAREN
    {                                ( _2 )}

letdefmult:
  
    {                                ( [] )}
| _1 = oneletdef _2 = letdefmult
    {                                ( _1 :: _2 )}

oneletdef:
  _1 = IDENT _2 = expr
    {                                ( (bind_ident _1, _2) )}

chunk:
  _1 = UNSIGNED _2 = BYTE
    {                                ( Byte_unsigned )}
| _1 = SIGNED _2 = BYTE
    {                                ( Byte_signed )}
| _1 = UNSIGNED _2 = HALF
    {                                ( Sixteen_unsigned )}
| _1 = SIGNED _2 = HALF
    {                                ( Sixteen_signed )}
| _1 = UNSIGNED _2 = INT32
    {                                ( Thirtytwo_unsigned )}
| _1 = SIGNED _2 = INT32
    {                                ( Thirtytwo_signed )}
| _1 = INT
    {                                ( Word_int )}
| _1 = ADDR
    {                                ( Word_val )}
| _1 = FLOAT32
    {                                ( Single )}
| _1 = FLOAT64
    {                                ( Double )}
| _1 = FLOAT
    {                                ( Double_u )}
| _1 = VAL
    {                                ( Word_val )}

unaryop:
  _1 = LOAD _2 = chunk
    {                                ( Cload (_2, Mutable) )}
| _1 = FLOATOFINT
    {                                ( Cfloatofint )}
| _1 = INTOFFLOAT
    {                                ( Cintoffloat )}
| _1 = RAISE
    {                                ( Craise _1 )}
| _1 = ABSF
    {                                ( Cabsf )}

binaryop:
  _1 = STORE _2 = chunk
    {                                ( Cstore (_2, Assignment) )}
| _1 = ADDI
    {                                ( Caddi )}
| _1 = SUBI
    {                                ( Csubi )}
| _1 = STAR
    {                                ( Cmuli )}
| _1 = DIVI
    {                                ( Cdivi )}
| _1 = MODI
    {                                ( Cmodi )}
| _1 = AND
    {                                ( Cand )}
| _1 = OR
    {                                ( Cor )}
| _1 = XOR
    {                                ( Cxor )}
| _1 = LSL
    {                                ( Clsl )}
| _1 = LSR
    {                                ( Clsr )}
| _1 = ASR
    {                                ( Casr )}
| _1 = EQI
    {                                ( Ccmpi Ceq )}
| _1 = NEI
    {                                ( Ccmpi Cne )}
| _1 = LTI
    {                                ( Ccmpi Clt )}
| _1 = LEI
    {                                ( Ccmpi Cle )}
| _1 = GTI
    {                                ( Ccmpi Cgt )}
| _1 = GEI
    {                                ( Ccmpi Cge )}
| _1 = ADDA
    {                                ( Cadda )}
| _1 = ADDV
    {                                ( Caddv )}
| _1 = EQA
    {                                ( Ccmpa Ceq )}
| _1 = NEA
    {                                ( Ccmpa Cne )}
| _1 = LTA
    {                                ( Ccmpa Clt )}
| _1 = LEA
    {                                ( Ccmpa Cle )}
| _1 = GTA
    {                                ( Ccmpa Cgt )}
| _1 = GEA
    {                                ( Ccmpa Cge )}
| _1 = ADDF
    {                                ( Caddf )}
| _1 = MULF
    {                                ( Cmulf )}
| _1 = DIVF
    {                                ( Cdivf )}
| _1 = EQF
    {                                ( Ccmpf CFeq )}
| _1 = NEF
    {                                ( Ccmpf CFneq )}
| _1 = LTF
    {                                ( Ccmpf CFlt )}
| _1 = NLTF
    {                                ( Ccmpf CFnlt )}
| _1 = LEF
    {                                ( Ccmpf CFle )}
| _1 = NLEF
    {                                ( Ccmpf CFnle )}
| _1 = GTF
    {                                ( Ccmpf CFgt )}
| _1 = NGTF
    {                                ( Ccmpf CFngt )}
| _1 = GEF
    {                                ( Ccmpf CFge )}
| _1 = NGEF
    {                                ( Ccmpf CFnge )}
| _1 = CHECKBOUND
    {                                ( Ccheckbound )}
| _1 = MULH
    {                                ( Cmulhi )}

sequence:
  _1 = expr _2 = sequence
    {                                ( Csequence(_1, _2) )}
| _1 = expr
    {                                ( _1 )}

caselist:
  _1 = onecase _2 = sequence _3 = caselist
    {                                ( (_1, _2) :: _3 )}
| 
    {                                ( [] )}

onecase:
  _1 = CASE _2 = INTCONST _3 = COLON _4 = onecase
    {                                ( _2 :: _4 )}
| _1 = CASE _2 = INTCONST _3 = COLON
    {                                ( [_2] )}

bind_ident:
  _1 = IDENT
    {                                ( bind_ident _1 )}

datadecl:
  _1 = LPAREN _2 = datalist _3 = RPAREN
    {                                ( List.rev _2 )}
| _1 = LPAREN _2 = DATA _3 = datalist _4 = RPAREN
    {                                ( List.rev _3 )}

datalist:
  _1 = datalist _2 = dataitem
    {                                ( _2 :: _1 )}
| 
    {                                ( [] )}

dataitem:
  _1 = STRING _2 = COLON
    {                                ( Cdefine_symbol _1 )}
| _1 = BYTE _2 = INTCONST
    {                                ( Cint8 _2 )}
| _1 = HALF _2 = INTCONST
    {                                ( Cint16 _2 )}
| _1 = INT _2 = INTCONST
    {                                ( Cint(Nativeint.of_int _2) )}
| _1 = FLOAT _2 = FLOATCONST
    {                                ( Cdouble (float_of_string _2) )}
| _1 = ADDR _2 = STRING
    {                                ( Csymbol_address _2 )}
| _1 = VAL _2 = STRING
    {                               ( Csymbol_address _2 )}
| _1 = KSTRING _2 = STRING
    {                                ( Cstring _2 )}
| _1 = SKIP _2 = INTCONST
    {                                ( Cskip _2 )}
| _1 = ALIGN _2 = INTCONST
    {                                ( Calign _2 )}
| _1 = GLOBAL _2 = STRING
    {                                ( Cglobal_symbol _2 )}

catch_handlers:
  _1 = catch_handler
    {    ( [_1] )}
| _1 = catch_handler _2 = AND _3 = catch_handlers
    {    ( _1 :: _3 )}

catch_handler:
  _1 = sequence
    {    ( 0, [], _1 )}
| _1 = LPAREN _2 = IDENT _3 = bind_identlist _4 = RPAREN _5 = sequence
    {    ( find_label _2, _3, _5 )}

bind_identlist:
  
    {                                ( [] )}
| _1 = bind_ident _2 = bind_identlist
    {                                ( _1 :: _2 )}

location:
  
    {                                ( None )}
| _1 = LOCATION
    {                                ( Some _1 )}

%%
