%{

open Int64ops
open Primitives
open Input_handling
open Longident
open Parser_aux

%}
%start argument_eol
%start argument_list_eol
%start break_argument_eol
%start end_of_line
%start expression_list_eol
%start identifier
%start identifier_eol
%start identifier_or_eol
%start int64_eol
%start integer
%start integer_eol
%start integer_list_eol
%start list_arguments_eol
%start longident_eol
%start opt_identifier
%start opt_identifier_eol
%start opt_integer_eol
%start opt_signed_int64_eol
%start opt_signed_integer_eol
%token <string> ARGUMENT
%token AT
%token BANG
%token DOLLAR
%token DOT
%token EOL
%token <int64> INTEGER
%token LBRACKET
%token <string> LIDENT
%token LPAREN
%token MINUS
%token <string> OPERATOR
%token RBRACKET
%token RPAREN
%token SHARP
%token STAR
%token <string> UIDENT
%right DOT
%right BANG
%type <string> argument_eol
%type <string list> argument_list_eol
%type <Parser_aux.break_arg> break_argument_eol
%type <unit> end_of_line
%type <Parser_aux.expression list> expression_list_eol
%type <string> identifier
%type <string> identifier_eol
%type <string option> identifier_or_eol
%type <int64> int64_eol
%type <int> integer
%type <int> integer_eol
%type <int list> integer_list_eol
%type <string option * int option * int option> list_arguments_eol
%type <Longident.t> longident_eol
%type <string option> opt_identifier
%type <string option> opt_identifier_eol
%type <int option> opt_integer_eol
%type <int64 option> opt_signed_int64_eol
%type <int option> opt_signed_integer_eol
%%

argument_list_eol:
  _1 = ARGUMENT _2 = argument_list_eol
    {      ( _1::_2 )}
| _1 = end_of_line
    {      ( [] )}

argument_eol:
  _1 = ARGUMENT _2 = end_of_line
    {      ( _1 )}

integer_list_eol:
  _1 = INTEGER _2 = integer_list_eol
    {      ( (to_int _1) :: _2 )}
| _1 = end_of_line
    {      ( [] )}

integer_eol:
  _1 = INTEGER _2 = end_of_line
    {      ( to_int _1 )}

int64_eol:
  _1 = INTEGER _2 = end_of_line
    {      ( _1 )}

integer:
  _1 = INTEGER
    {      ( to_int _1 )}

opt_integer_eol:
  _1 = INTEGER _2 = end_of_line
    {      ( Some (to_int _1) )}
| _1 = end_of_line
    {      ( None )}

opt_int64_eol:
  _1 = INTEGER _2 = end_of_line
    {      ( Some _1 )}
| _1 = end_of_line
    {      ( None )}

opt_signed_integer_eol:
  _1 = MINUS _2 = integer_eol
    {      ( Some (- _2) )}
| _1 = opt_integer_eol
    {      ( _1 )}

opt_signed_int64_eol:
  _1 = MINUS _2 = int64_eol
    {      ( Some (Int64.neg _2) )}
| _1 = opt_int64_eol
    {      ( _1 )}

longident:
  _1 = LIDENT
    {                                ( Lident _1 )}
| _1 = module_path _2 = DOT _3 = LIDENT
    {                                ( Ldot(_1, _3) )}
| _1 = OPERATOR
    {                                ( Lident _1 )}

module_path:
  _1 = UIDENT
    {                                ( Lident _1 )}
| _1 = module_path _2 = DOT _3 = UIDENT
    {                                ( Ldot(_1, _3) )}

longident_eol:
  _1 = longident _2 = end_of_line
    {                               ( _1 )}

identifier:
  _1 = LIDENT
    {                                ( _1 )}
| _1 = UIDENT
    {                                ( _1 )}

identifier_eol:
  _1 = identifier _2 = end_of_line
    {                                ( _1 )}

identifier_or_eol:
  _1 = identifier
    {                                ( Some _1 )}
| _1 = end_of_line
    {                                ( None )}

opt_identifier:
  _1 = identifier
    {                                ( Some _1 )}
| 
    {                                ( None )}

opt_identifier_eol:
  _1 = opt_identifier _2 = end_of_line
    {                                ( _1 )}

expression:
  _1 = longident
    {                                               ( E_ident _1 )}
| _1 = STAR
    {                                                ( E_result )}
| _1 = DOLLAR _2 = INTEGER
    {                                                ( E_name (to_int _2) )}
| _1 = expression _2 = DOT _3 = INTEGER
    {                                                ( E_item(_1, (to_int _3)) )}
| _1 = expression _2 = DOT _3 = LBRACKET _4 = INTEGER _5 = RBRACKET
    {                                                ( E_item(_1, (to_int _4)) )}
| _1 = expression _2 = DOT _3 = LPAREN _4 = INTEGER _5 = RPAREN
    {                                                ( E_item(_1, (to_int _4)) )}
| _1 = expression _2 = DOT _3 = LIDENT
    {                                                ( E_field(_1, _3) )}
| _1 = BANG _2 = expression
    {                                                ( E_field(_2, "contents") )}
| _1 = LPAREN _2 = expression _3 = RPAREN
    {                                                ( _2 )}

expression_list_eol:
  _1 = expression _2 = expression_list_eol
    {                                                ( _1::_2 )}
| _1 = end_of_line
    {                                                ( [] )}

break_argument_eol:
  _1 = end_of_line
    {                                                ( BA_none )}
| _1 = integer_eol
    {                                                ( BA_pc _1 )}
| _1 = expression _2 = end_of_line
    {                                                ( BA_function _1 )}
| _1 = AT _2 = opt_identifier _3 = INTEGER _4 = opt_integer_eol
    {                                                ( BA_pos1 (_2, (to_int _3), _4))}
| _1 = AT _2 = opt_identifier _3 = SHARP _4 = integer_eol
    {                                                ( BA_pos2 (_2, _4) )}

list_arguments_eol:
  _1 = opt_identifier _2 = integer _3 = opt_integer_eol
    {      ( (_1, Some _2, _3) )}
| _1 = opt_identifier_eol
    {      ( (_1, None, None) )}

end_of_line:
  _1 = EOL
    {        ( stop_user_input () )}

%%
