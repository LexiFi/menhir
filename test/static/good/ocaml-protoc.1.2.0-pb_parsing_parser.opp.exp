%start enum_
%start enum_value_
%start extension_
%start extension_range_list_
%start field_options_
%start import_
%start message_
%start normal_field_
%start oneof_
%start option_
%start proto_
%start reserved_
%token COMMA
%token ENUM
%token EOF
%token EQUAL
%token EXTEND
%token EXTENSIONS
%token <float> FLOAT
%token <Pb_location.t * string> IDENT
%token <Pb_location.t> IMPORT
%token <int> INT
%token LANGLEB
%token LBRACE
%token LBRACKET
%token LPAREN
%token MAP
%token MAX
%token MESSAGE
%token <Pb_location.t> ONE_OF
%token OPTION
%token OPTIONAL
%token PACKAGE
%token PUBLIC
%token RANGLEB
%token RBRACE
%token RBRACKET
%token REPEATED
%token REQUIRED
%token RESERVED
%token RPAREN
%token SEMICOLON
%token <string> STRING
%token SYNTAX
%token TO
%type <Pb_parsing_parse_tree.enum> enum_
%type <Pb_parsing_parse_tree.enum_body_content> enum_value_
%type <Pb_parsing_parse_tree.extension_range list> extension_
%type <Pb_parsing_parse_tree.extension_range list> extension_range_list_
%type <Pb_option.set> field_options_
%type <Pb_parsing_parse_tree.import> import_
%type <Pb_parsing_parse_tree.message> message_
%type <Pb_parsing_parse_tree.message_field> normal_field_
%type <Pb_parsing_parse_tree.oneof> oneof_
%type <Pb_option.t> option_
%type <Pb_parsing_parse_tree.proto> proto_
%type <Pb_parsing_parse_tree.extension_range list> reserved_
%%

field_options_:
  _1 = field_options _2 = EOF
    {                                     (_1)}

normal_field_:
  _1 = normal_field _2 = EOF
    {                                     (_1)}

enum_value_:
  _1 = enum_value _2 = EOF
    {                                     (_1)}

enum_:
  _1 = enum _2 = EOF
    {                                     (_1)}

oneof_:
  _1 = oneof _2 = EOF
    {                                     (_1)}

message_:
  _1 = message _2 = EOF
    {                                     (_1)}

import_:
  _1 = import _2 = EOF
    {                                     (_1)}

option_:
  _1 = ocaml_protoc_1_2_0_pb_parsing_parser_option _2 = EOF
    {                                     (_1)}

extension_range_list_:
  _1 = extension_range_list _2 = EOF
    {                                                 (_1)}

extension_:
  _1 = extension _2 = EOF
    {                                     (_1)}

reserved_:
  _1 = reserved _2 = EOF
    {                                     (_1)}

proto_:
  _1 = proto _2 = EOF
    {                                     (_1)}

proto:
  _1 = syntax _2 = proto_content
    {                         (Pb_parsing_util.proto ~syntax:_1 ~proto:_2 ())}
| _1 = proto_content
    {                         (_1)}

proto_content:
  _1 = import
    {                        (Pb_parsing_util.proto ~import:_1  ())}
| _1 = ocaml_protoc_1_2_0_pb_parsing_parser_option
    {                        (Pb_parsing_util.proto ~file_option:_1  ())}
| _1 = package_declaration
    {                        (Pb_parsing_util.proto ~package:_1 ())}
| _1 = message
    {                        (Pb_parsing_util.proto ~message:_1 ())}
| _1 = enum
    {                        (Pb_parsing_util.proto ~enum:_1 ())}
| _1 = extend
    {                        (Pb_parsing_util.proto ~extend:_1 ())}
| _1 = import _2 = proto
    {                              (Pb_parsing_util.proto ~import:_1  ~proto:_2 ())}
| _1 = ocaml_protoc_1_2_0_pb_parsing_parser_option _2 = proto
    {                              (Pb_parsing_util.proto ~file_option:_1  ~proto:_2 ())}
| _1 = package_declaration _2 = proto
    {                              (Pb_parsing_util.proto ~package:_1 ~proto:_2 ())}
| _1 = message _2 = proto
    {                              (Pb_parsing_util.proto ~message:_1 ~proto:_2 ())}
| _1 = enum _2 = proto
    {                              (Pb_parsing_util.proto ~enum:_1 ~proto:_2 ())}
| _1 = extend _2 = proto
    {                              (Pb_parsing_util.proto ~extend:_1 ~proto:_2 ())}

syntax:
  _1 = SYNTAX _2 = EQUAL _3 = STRING _4 = semicolon
    {                                  ( _3 )}

import:
  _1 = IMPORT _2 = STRING _3 = semicolon
    {                                    ( Pb_parsing_util.import _2)}
| _1 = IMPORT _2 = PUBLIC _3 = STRING _4 = semicolon
    {                                    ( Pb_parsing_util.import ~public:() _3 )}
| _1 = IMPORT _2 = IDENT _3 = STRING _4 = semicolon
    {                                    ( Pb_exception.invalid_import_qualifier _1 )}

package_declaration:
  _1 = PACKAGE _2 = IDENT _3 = semicolon
    {                            (snd _2)}

message:
  _1 = MESSAGE _2 = IDENT _3 = LBRACE _4 = message_body_content_list _5 = rbrace
    {                                                          (
    Pb_parsing_util.message ~content:_4 (snd _2)
  )}
| _1 = MESSAGE _2 = IDENT _3 = LBRACE _4 = rbrace
    {                                (
    Pb_parsing_util.message ~content:[]  (snd _2)
  )}

message_body_content_list:
  _1 = message_body_content
    {                          ( [_1] )}
| _1 = message_body_content _2 = message_body_content_list
    {                                                   ( _1::_2 )}

message_body_content:
  _1 = normal_field
    {                 ( Pb_parsing_util.message_body_field  _1 )}
| _1 = map
    {                 ( Pb_parsing_util.message_body_map_field _1 )}
| _1 = oneof
    {                 ( Pb_parsing_util.message_body_oneof_field _1 )}
| _1 = message
    {                 ( Pb_parsing_util.message_body_sub _1 )}
| _1 = enum
    {                 ( Pb_parsing_util.message_body_enum _1 )}
| _1 = extension
    {                 ( Pb_parsing_util.message_body_extension _1 )}
| _1 = reserved
    {                 ( Pb_parsing_util.message_body_reserved _1 )}
| _1 = ocaml_protoc_1_2_0_pb_parsing_parser_option
    {                 ( Pb_parsing_util.message_body_option _1 )}

extend:
  _1 = EXTEND _2 = IDENT _3 = LBRACE _4 = normal_field_list _5 = rbrace
    {                                                 (
    Pb_parsing_util.extend (snd _2) _4
  )}
| _1 = EXTEND _2 = IDENT _3 = LBRACE _4 = rbrace
    {                               (
    Pb_parsing_util.extend (snd _2) []
  )}

normal_field_list:
  _1 = normal_field
    {                                   (_1 :: [])}
| _1 = normal_field _2 = normal_field_list
    {                                   (_1 :: _2)}

extension:
  _1 = EXTENSIONS _2 = extension_range_list _3 = semicolon
    {                                              (_2)}

reserved:
  _1 = RESERVED _2 = extension_range_list _3 = semicolon
    {                                            (_2)}

extension_range_list:
  _1 = extension_range
    {                                               (_1 :: [])}
| _1 = extension_range _2 = COMMA _3 = extension_range_list
    {                                               (_1 :: _3)}

extension_range:
  _1 = INT
    {                   ( Pb_parsing_util.extension_range_single_number _1)}
| _1 = INT _2 = TO _3 = INT
    {                   ( Pb_parsing_util.extension_range_range _1 (`Number _3) )}
| _1 = INT _2 = TO _3 = MAX
    {                   ( Pb_parsing_util.extension_range_range _1 `Max )}

oneof:
  _1 = ONE_OF _2 = IDENT _3 = LBRACE _4 = oneof_field_list _5 = rbrace
    {                                                (
    Pb_parsing_util.oneof ~fields:_4 (snd _2)
  )}
| _1 = ONE_OF _2 = LBRACE _3 = oneof_field_list _4 = rbrace
    {                                          (
    Pb_exception.missing_one_of_name _1
  )}

oneof_field_list:
  
    {                                        ( []   )}
| _1 = oneof_field _2 = oneof_field_list
    {                                        ( _1::_2 )}

oneof_field:
  _1 = IDENT _2 = field_name _3 = EQUAL _4 = INT _5 = field_options _6 = semicolon
    {                                                       (
    Pb_parsing_util.oneof_field ~type_:(snd _1) ~number:_4 ~options:_5 _2
  )}
| _1 = IDENT _2 = field_name _3 = EQUAL _4 = INT _5 = semicolon
    {                                         (
    Pb_parsing_util.oneof_field ~type_:(snd _1) ~number:_4 _2
  )}

map:
  _1 = MAP _2 = LANGLEB _3 = IDENT _4 = COMMA _5 = IDENT _6 = RANGLEB _7 = field_name _8 = EQUAL _9 = INT _10 = semicolon
    {                                                                         (
    Pb_parsing_util.map_field
        ~key_type:(snd _3) ~value_type:(snd _5) ~number:_9 _7
  )}
| _1 = MAP _2 = LANGLEB _3 = IDENT _4 = COMMA _5 = IDENT _6 = RANGLEB _7 = field_name _8 = EQUAL _9 = INT _10 = field_options _11 = semicolon
    {                                                                                       (
    Pb_parsing_util.map_field
        ~options:_10 ~key_type:(snd _3) ~value_type:(snd _5) ~number:_9 _7
  )}

normal_field:
  _1 = label _2 = IDENT _3 = field_name _4 = EQUAL _5 = INT _6 = field_options _7 = semicolon
    {                                                             (
    Pb_parsing_util.field ~label:_1 ~type_:(snd _2) ~number:_5 ~options:_6 _3
  )}
| _1 = label _2 = IDENT _3 = field_name _4 = EQUAL _5 = INT _6 = semicolon
    {                                               (
    Pb_parsing_util.field ~label:_1 ~type_:(snd _2) ~number:_5 _3
  )}
| _1 = IDENT _2 = field_name _3 = EQUAL _4 = INT _5 = field_options _6 = semicolon
    {                                                       (
    Pb_parsing_util.field
        ~label:`Nolabel ~type_:(snd _1) ~number:_4 ~options:_5 _2
  )}
| _1 = IDENT _2 = field_name _3 = EQUAL _4 = INT _5 = semicolon
    {                                         (
    Pb_parsing_util.field ~label:`Nolabel ~type_:(snd _1) ~number:_4 _2
  )}

field_name:
  _1 = IDENT
    {              (snd _1)}
| _1 = REQUIRED
    {              ("required")}
| _1 = OPTIONAL
    {              ("optional")}
| _1 = REPEATED
    {              ("repeated")}
| _1 = ONE_OF
    {              ("oneof")}
| _1 = ENUM
    {              ("enum")}
| _1 = PACKAGE
    {              ("package")}
| _1 = IMPORT
    {              ("import")}
| _1 = PUBLIC
    {              ("public")}
| _1 = OPTION
    {              ("option")}
| _1 = EXTENSIONS
    {              ("extensions")}
| _1 = EXTEND
    {              ("extend")}
| _1 = RESERVED
    {              ("reserved")}
| _1 = SYNTAX
    {              ("syntax")}
| _1 = MESSAGE
    {              ("message")}
| _1 = TO
    {              ("to")}
| _1 = MAX
    {              ("max")}
| _1 = MAP
    {              ("map")}

label:
  _1 = REQUIRED
    {             ( `Required )}
| _1 = REPEATED
    {             ( `Repeated )}
| _1 = OPTIONAL
    {             ( `Optional )}

field_options:
  _1 = LBRACKET _2 = field_option_list _3 = RBRACKET
    {                                        ( _2 )}
| _1 = LBRACKET _2 = RBRACKET
    {                                        ( Pb_option.empty )}

field_option_list:
  _1 = field_option
    {                                          (
    let option_name, option_value = _1 in
    Pb_option.add Pb_option.empty option_name option_value
  )}
| _1 = field_option _2 = COMMA _3 = field_option_list
    {                                          (
    Pb_option.add _3 (fst _1) (snd _1)
  )}

field_option:
  _1 = IDENT _2 = EQUAL _3 = constant
    {                                       ( (snd _1, _3) )}
| _1 = LPAREN _2 = IDENT _3 = RPAREN _4 = EQUAL _5 = constant
    {                                       ( (snd _2, _5))}

option_identifier_item:
  _1 = IDENT
    {                            (snd _1)}
| _1 = LPAREN _2 = IDENT _3 = RPAREN
    {                            (snd _2)}

option_identifier:
  _1 = option_identifier_item
    {                              (_1)}
| _1 = option_identifier _2 = IDENT
    {                              (_1 ^ (snd _2))}

ocaml_protoc_1_2_0_pb_parsing_parser_option:
  _1 = OPTION _2 = option_identifier _3 = EQUAL _4 = constant _5 = semicolon
    {                                                      ( (_2, _4) )}

constant:
  _1 = INT
    {               ( Pb_option.Constant_int _1 )}
| _1 = FLOAT
    {               ( Pb_option.Constant_float _1 )}
| _1 = IDENT
    {               (
    match (snd _1) with
    | "true"   -> Pb_option.Constant_bool true
    | "false"  -> Pb_option.Constant_bool false
    | litteral -> Pb_option.Constant_litteral litteral
  )}
| _1 = STRING
    {               ( Pb_option.Constant_string _1 )}

enum:
  _1 = ENUM _2 = IDENT _3 = LBRACE _4 = enum_values _5 = rbrace
    {                                         ( Pb_parsing_util.enum ~enum_body:_4 (snd _2) )}

enum_values:
  
    {                                   ( [] )}
| _1 = enum_body_content _2 = enum_values
    {                                   ( _1::_2 )}

enum_body_content:
  _1 = ocaml_protoc_1_2_0_pb_parsing_parser_option
    {               ( Pb_parsing_util.enum_option _1 )}
| _1 = enum_value
    {               ( _1 )}

enum_value:
  _1 = IDENT _2 = EQUAL _3 = INT _4 = semicolon
    {                               ( Pb_parsing_util.enum_value ~int_value:_3 (snd _1) )}
| _1 = IDENT _2 = EQUAL _3 = INT
    {                    (
    Pb_exception.missing_semicolon_for_enum_value (snd _1) (fst _1)
  )}
| _1 = IDENT _2 = EQUAL _3 = INT _4 = COMMA
    {                          ( Pb_exception.invalid_enum_specification (snd _1) (fst _1))}
| _1 = IDENT _2 = COMMA
    {                          ( Pb_exception.invalid_enum_specification (snd _1) (fst _1))}
| _1 = IDENT _2 = SEMICOLON
    {                          ( Pb_exception.invalid_enum_specification (snd _1) (fst _1))}
| _1 = IDENT
    {                          ( Pb_exception.invalid_enum_specification (snd _1) (fst _1))}

semicolon:
  _1 = SEMICOLON
    {                        (())}
| _1 = semicolon _2 = SEMICOLON
    {                        (())}

rbrace:
  _1 = RBRACE
    {                     ( () )}
| _1 = rbrace _2 = SEMICOLON
    {                     ( () )}

%%


Note: the nonterminal symbol option (from ocaml-protoc.1.2.0-pb_parsing_parser.mly) is renamed ocaml_protoc_1_2_0_pb_parsing_parser_option.
