%{
open Syntax
open Gram_aux
%}
%start lexer_definition
%token <Syntax.location> Taction
%token Tand
%token Tcaret
%token <char> Tchar
%token Tdash
%token Tend
%token Teof
%token Tequal
%token <string> Tident
%token Tlbracket
%token Tlparen
%token Tmaybe
%token Tor
%token Tparse
%token Tplus
%token Trbracket
%token Trparen
%token Trule
%token Tstar
%token <string> Tstring
%token Tunderscore
%left Tor
%left CONCAT
%nonassoc Tmaybe
%left Tstar
%left Tplus
%type <Syntax.lexer_definition> lexer_definition
%%

lexer_definition:
  _1 = header _2 = Trule _3 = definition _4 = other_definitions _5 = Tend
    {        ( Lexdef(_1, _3::(List.rev _4)) )}

header:
  _1 = Taction
    {        ( _1 )}
| 
    {        ( Location(0,0) )}

other_definitions:
  _1 = other_definitions _2 = Tand _3 = definition
    {        ( _3::_1 )}
| 
    {        ( [] )}

definition:
  _1 = Tident _2 = Tequal _3 = entry
    {        ( (_1,_3) )}

entry:
  _1 = Tparse _2 = case _3 = rest_of_entry
    {        ( _2 :: List.rev _3 )}

rest_of_entry:
  _1 = rest_of_entry _2 = Tor _3 = case
    {        ( _3::_1 )}
| 
    {        ( [] )}

case:
  _1 = regexp _2 = Taction
    {        ( (_1,_2) )}

regexp:
  _1 = Tunderscore
    {        ( Characters all_chars )}
| _1 = Teof
    {        ( Characters ['\000'] )}
| _1 = Tchar
    {        ( Characters [_1] )}
| _1 = Tstring
    {        ( regexp_for_string _1 )}
| _1 = Tlbracket _2 = char_class _3 = Trbracket
    {        ( Characters _2 )}
| _1 = regexp _2 = Tstar
    {        ( Repetition _1 )}
| _1 = regexp _2 = Tmaybe
    {        ( Alternative(_1, Epsilon) )}
| _1 = regexp _2 = Tplus
    {        ( Sequence(_1, Repetition _1) )}
| _1 = regexp _2 = Tor _3 = regexp
    {        ( Alternative(_1,_3) )}
| _1 = regexp _2 = regexp %prec CONCAT
    {        ( Sequence(_1,_2) )}
| _1 = Tlparen _2 = regexp _3 = Trparen
    {        ( _2 )}

char_class:
  _1 = Tcaret _2 = char_class1
    {        ( subtract all_chars _2 )}
| _1 = char_class1
    {        ( _1 )}

char_class1:
  _1 = Tchar _2 = Tdash _3 = Tchar
    {        ( char_class _1 _3 )}
| _1 = Tchar
    {        ( [_1] )}
| _1 = char_class _2 = char_class %prec CONCAT
    {        ( _1 @ _2 )}

%%



