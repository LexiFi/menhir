State 0:
## Known stack suffix:
##
## LR(1) items:
phrase' -> . phrase [ # ]
## Transitions:
-- On LPAREN shift to state 1
-- On EOF shift to state 216
-- On phrase shift to state 217
-- On fundecl shift to state 218
-- On datadecl shift to state 219
## Reductions:

State 1:
## Known stack suffix:
## LPAREN
## LR(1) items:
datadecl -> LPAREN . datalist RPAREN [ # ]
fundecl -> LPAREN . FUNCTION STRING LPAREN params RPAREN sequence RPAREN [ # ]
## Transitions:
-- On FUNCTION shift to state 2
-- On datalist shift to state 192
## Reductions:
-- On STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR
--   reduce production datalist ->

State 2:
## Known stack suffix:
## LPAREN FUNCTION
## LR(1) items:
fundecl -> LPAREN FUNCTION . STRING LPAREN params RPAREN sequence RPAREN [ # ]
## Transitions:
-- On STRING shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## LPAREN FUNCTION STRING
## LR(1) items:
fundecl -> LPAREN FUNCTION STRING . LPAREN params RPAREN sequence RPAREN [ # ]
## Transitions:
-- On LPAREN shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## LPAREN FUNCTION STRING LPAREN
## LR(1) items:
fundecl -> LPAREN FUNCTION STRING LPAREN . params RPAREN sequence RPAREN [ # ]
## Transitions:
-- On IDENT shift to state 5
-- On params shift to state 16
-- On oneparam shift to state 190
## Reductions:
-- On RPAREN
--   reduce production params ->

State 5:
## Known stack suffix:
## IDENT
## LR(1) items:
oneparam -> IDENT . COLON machtype [ RPAREN IDENT ]
## Transitions:
-- On COLON shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
oneparam -> IDENT COLON . machtype [ RPAREN IDENT ]
## Transitions:
-- On UNIT shift to state 7
-- On INT shift to state 8
-- On FLOAT shift to state 9
-- On ADDR shift to state 10
-- On machtype shift to state 11
-- On componentlist shift to state 12
-- On component shift to state 15
## Reductions:

State 7:
## Known stack suffix:
## UNIT
## LR(1) items:
machtype -> UNIT . [ RPAREN IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production machtype -> UNIT

State 8:
## Known stack suffix:
## INT
## LR(1) items:
component -> INT . [ STAR RPAREN IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production component -> INT

State 9:
## Known stack suffix:
## FLOAT
## LR(1) items:
component -> FLOAT . [ STAR RPAREN IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production component -> FLOAT

State 10:
## Known stack suffix:
## ADDR
## LR(1) items:
component -> ADDR . [ STAR RPAREN IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production component -> ADDR

State 11:
## Known stack suffix:
## IDENT COLON machtype
## LR(1) items:
oneparam -> IDENT COLON machtype . [ RPAREN IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production oneparam -> IDENT COLON machtype

State 12:
## Known stack suffix:
## componentlist
## LR(1) items:
componentlist -> componentlist . STAR component [ STAR RPAREN IDENT ]
machtype -> componentlist . [ RPAREN IDENT ]
## Transitions:
-- On STAR shift to state 13
## Reductions:
-- On RPAREN IDENT
--   reduce production machtype -> componentlist

State 13:
## Known stack suffix:
## componentlist STAR
## LR(1) items:
componentlist -> componentlist STAR . component [ STAR RPAREN IDENT ]
## Transitions:
-- On INT shift to state 8
-- On FLOAT shift to state 9
-- On ADDR shift to state 10
-- On component shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## componentlist STAR component
## LR(1) items:
componentlist -> componentlist STAR component . [ STAR RPAREN IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production componentlist -> componentlist STAR component

State 15:
## Known stack suffix:
## component
## LR(1) items:
componentlist -> component . [ STAR RPAREN IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production componentlist -> component

State 16:
## Known stack suffix:
## LPAREN FUNCTION STRING LPAREN params
## LR(1) items:
fundecl -> LPAREN FUNCTION STRING LPAREN params . RPAREN sequence RPAREN [ # ]
## Transitions:
-- On RPAREN shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## LPAREN FUNCTION STRING LPAREN params RPAREN
## LR(1) items:
fundecl -> LPAREN FUNCTION STRING LPAREN params RPAREN . sequence RPAREN [ # ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On sequence shift to state 188
-- On expr shift to state 32
## Reductions:

State 18:
## Known stack suffix:
## STRING
## LR(1) items:
expr -> STRING . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> STRING

State 19:
## Known stack suffix:
## POINTER
## LR(1) items:
expr -> POINTER . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> POINTER

State 20:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . LET letdef sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . ASSIGN IDENT expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . APPLY expr exprlist machtype RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . EXTCALL STRING exprlist machtype RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . SUBF expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . SUBF expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . unaryop expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . binaryop expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . SEQ sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . IF expr expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . SWITCH INTCONST expr caselist RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . WHILE expr sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . CATCH sequence WITH sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . TRY sequence WITH bind_ident sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . ADDRAREF expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . INTAREF expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . FLOATAREF expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . ADDRASET expr expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . INTASET expr expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN . FLOATASET expr expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On XOR shift to state 21
-- On WHILE shift to state 22
-- On TRY shift to state 34
-- On SWITCH shift to state 41
-- On SUBI shift to state 53
-- On SUBF shift to state 54
-- On SUBA shift to state 59
-- On STORE shift to state 60
-- On SEQ shift to state 75
-- On RAISE shift to state 78
-- On OR shift to state 79
-- On NEI shift to state 80
-- On NEF shift to state 81
-- On NEA shift to state 82
-- On MULI shift to state 83
-- On MULF shift to state 84
-- On MODI shift to state 85
-- On LTI shift to state 86
-- On LTF shift to state 87
-- On LTA shift to state 88
-- On LSR shift to state 89
-- On LSL shift to state 90
-- On LOAD shift to state 91
-- On LET shift to state 93
-- On LEI shift to state 105
-- On LEF shift to state 106
-- On LEA shift to state 107
-- On INTOFFLOAT shift to state 108
-- On INTASET shift to state 109
-- On INTAREF shift to state 114
-- On IF shift to state 118
-- On GTI shift to state 123
-- On GTF shift to state 124
-- On GTA shift to state 125
-- On GEI shift to state 126
-- On GEF shift to state 127
-- On GEA shift to state 128
-- On FLOATOFINT shift to state 129
-- On FLOATASET shift to state 130
-- On FLOATAREF shift to state 135
-- On EXTCALL shift to state 139
-- On EQI shift to state 145
-- On EQF shift to state 146
-- On EQA shift to state 147
-- On DIVI shift to state 148
-- On DIVF shift to state 149
-- On CHECKBOUND shift to state 150
-- On CATCH shift to state 151
-- On ASSIGN shift to state 156
-- On ASR shift to state 160
-- On APPLY shift to state 161
-- On AND shift to state 166
-- On ALLOC shift to state 167
-- On ADDRASET shift to state 168
-- On ADDRAREF shift to state 173
-- On ADDI shift to state 177
-- On ADDF shift to state 178
-- On ADDA shift to state 179
-- On ABSF shift to state 180
-- On unaryop shift to state 181
-- On binaryop shift to state 184
## Reductions:

State 21:
## Known stack suffix:
## XOR
## LR(1) items:
binaryop -> XOR . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> XOR

State 22:
## Known stack suffix:
## LPAREN WHILE
## LR(1) items:
expr -> LPAREN WHILE . expr sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 29
## Reductions:

State 23:
## Known stack suffix:
## LBRACKET
## LR(1) items:
expr -> LBRACKET . RBRACKET [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RBRACKET shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
expr -> LBRACKET RBRACKET . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LBRACKET RBRACKET

State 25:
## Known stack suffix:
## INTCONST
## LR(1) items:
expr -> INTCONST . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> INTCONST

State 26:
## Known stack suffix:
## IDENT
## LR(1) items:
expr -> IDENT . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> IDENT

State 27:
## Known stack suffix:
## FLOATCONST
## LR(1) items:
expr -> FLOATCONST . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FLOATCONST

State 28:
## Known stack suffix:
## EXIT
## LR(1) items:
expr -> EXIT . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> EXIT

State 29:
## Known stack suffix:
## LPAREN WHILE expr
## LR(1) items:
expr -> LPAREN WHILE expr . sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On sequence shift to state 30
-- On expr shift to state 32
## Reductions:

State 30:
## Known stack suffix:
## LPAREN WHILE expr sequence
## LR(1) items:
expr -> LPAREN WHILE expr sequence . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## LPAREN WHILE expr sequence RPAREN
## LR(1) items:
expr -> LPAREN WHILE expr sequence RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN WHILE expr sequence RPAREN

State 32:
## Known stack suffix:
## expr
## LR(1) items:
sequence -> expr . sequence [ WITH RPAREN CASE ]
sequence -> expr . [ WITH RPAREN CASE ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On sequence shift to state 33
-- On expr shift to state 32
## Reductions:
-- On WITH RPAREN CASE
--   reduce production sequence -> expr

State 33:
## Known stack suffix:
## expr sequence
## LR(1) items:
sequence -> expr sequence . [ WITH RPAREN CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sequence -> expr sequence

State 34:
## Known stack suffix:
## LPAREN TRY
## LR(1) items:
expr -> LPAREN TRY . sequence WITH bind_ident sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On sequence shift to state 35
-- On expr shift to state 32
## Reductions:

State 35:
## Known stack suffix:
## LPAREN TRY sequence
## LR(1) items:
expr -> LPAREN TRY sequence . WITH bind_ident sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On WITH shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## LPAREN TRY sequence WITH
## LR(1) items:
expr -> LPAREN TRY sequence WITH . bind_ident sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On IDENT shift to state 37
-- On bind_ident shift to state 38
## Reductions:

State 37:
## Known stack suffix:
## IDENT
## LR(1) items:
bind_ident -> IDENT . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bind_ident -> IDENT

State 38:
## Known stack suffix:
## LPAREN TRY sequence WITH bind_ident
## LR(1) items:
expr -> LPAREN TRY sequence WITH bind_ident . sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On sequence shift to state 39
-- On expr shift to state 32
## Reductions:

State 39:
## Known stack suffix:
## LPAREN TRY sequence WITH bind_ident sequence
## LR(1) items:
expr -> LPAREN TRY sequence WITH bind_ident sequence . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## LPAREN TRY sequence WITH bind_ident sequence RPAREN
## LR(1) items:
expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN TRY sequence WITH bind_ident sequence RPAREN

State 41:
## Known stack suffix:
## LPAREN SWITCH
## LR(1) items:
expr -> LPAREN SWITCH . INTCONST expr caselist RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On INTCONST shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## LPAREN SWITCH INTCONST
## LR(1) items:
expr -> LPAREN SWITCH INTCONST . expr caselist RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## LPAREN SWITCH INTCONST expr
## LR(1) items:
expr -> LPAREN SWITCH INTCONST expr . caselist RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On CASE shift to state 44
-- On onecase shift to state 48
-- On caselist shift to state 51
## Reductions:
-- On RPAREN
--   reduce production caselist ->

State 44:
## Known stack suffix:
## CASE
## LR(1) items:
onecase -> CASE . INTCONST COLON onecase [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
onecase -> CASE . INTCONST COLON [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On INTCONST shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## CASE INTCONST
## LR(1) items:
onecase -> CASE INTCONST . COLON onecase [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
onecase -> CASE INTCONST . COLON [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On COLON shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## CASE INTCONST COLON
## LR(1) items:
onecase -> CASE INTCONST COLON . onecase [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
onecase -> CASE INTCONST COLON . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On CASE shift to state 44
-- On onecase shift to state 47
## Reductions:
-- On STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT
--   reduce production onecase -> CASE INTCONST COLON

State 47:
## Known stack suffix:
## CASE INTCONST COLON onecase
## LR(1) items:
onecase -> CASE INTCONST COLON onecase . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production onecase -> CASE INTCONST COLON onecase

State 48:
## Known stack suffix:
## onecase
## LR(1) items:
caselist -> onecase . sequence caselist [ RPAREN ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On sequence shift to state 49
-- On expr shift to state 32
## Reductions:

State 49:
## Known stack suffix:
## onecase sequence
## LR(1) items:
caselist -> onecase sequence . caselist [ RPAREN ]
## Transitions:
-- On CASE shift to state 44
-- On onecase shift to state 48
-- On caselist shift to state 50
## Reductions:
-- On RPAREN
--   reduce production caselist ->

State 50:
## Known stack suffix:
## onecase sequence caselist
## LR(1) items:
caselist -> onecase sequence caselist . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production caselist -> onecase sequence caselist

State 51:
## Known stack suffix:
## LPAREN SWITCH INTCONST expr caselist
## LR(1) items:
expr -> LPAREN SWITCH INTCONST expr caselist . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## LPAREN SWITCH INTCONST expr caselist RPAREN
## LR(1) items:
expr -> LPAREN SWITCH INTCONST expr caselist RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN SWITCH INTCONST expr caselist RPAREN

State 53:
## Known stack suffix:
## SUBI
## LR(1) items:
binaryop -> SUBI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> SUBI

State 54:
## Known stack suffix:
## LPAREN SUBF
## LR(1) items:
expr -> LPAREN SUBF . expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN SUBF . expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## LPAREN SUBF expr
## LR(1) items:
expr -> LPAREN SUBF expr . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
expr -> LPAREN SUBF expr . expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On RPAREN shift to state 56
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 57
## Reductions:

State 56:
## Known stack suffix:
## LPAREN SUBF expr RPAREN
## LR(1) items:
expr -> LPAREN SUBF expr RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN SUBF expr RPAREN

State 57:
## Known stack suffix:
## LPAREN SUBF expr expr
## LR(1) items:
expr -> LPAREN SUBF expr expr . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## LPAREN SUBF expr expr RPAREN
## LR(1) items:
expr -> LPAREN SUBF expr expr RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN SUBF expr expr RPAREN

State 59:
## Known stack suffix:
## SUBA
## LR(1) items:
binaryop -> SUBA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> SUBA

State 60:
## Known stack suffix:
## STORE
## LR(1) items:
binaryop -> STORE . chunk [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On UNSIGNED shift to state 61
-- On SIGNED shift to state 65
-- On INT shift to state 69
-- On FLOAT64 shift to state 70
-- On FLOAT32 shift to state 71
-- On FLOAT shift to state 72
-- On ADDR shift to state 73
-- On chunk shift to state 74
## Reductions:

State 61:
## Known stack suffix:
## UNSIGNED
## LR(1) items:
chunk -> UNSIGNED . BYTE [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
chunk -> UNSIGNED . HALF [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
chunk -> UNSIGNED . INT32 [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On INT32 shift to state 62
-- On HALF shift to state 63
-- On BYTE shift to state 64
## Reductions:

State 62:
## Known stack suffix:
## UNSIGNED INT32
## LR(1) items:
chunk -> UNSIGNED INT32 . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production chunk -> UNSIGNED INT32

State 63:
## Known stack suffix:
## UNSIGNED HALF
## LR(1) items:
chunk -> UNSIGNED HALF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production chunk -> UNSIGNED HALF

State 64:
## Known stack suffix:
## UNSIGNED BYTE
## LR(1) items:
chunk -> UNSIGNED BYTE . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production chunk -> UNSIGNED BYTE

State 65:
## Known stack suffix:
## SIGNED
## LR(1) items:
chunk -> SIGNED . BYTE [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
chunk -> SIGNED . HALF [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
chunk -> SIGNED . INT32 [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On INT32 shift to state 66
-- On HALF shift to state 67
-- On BYTE shift to state 68
## Reductions:

State 66:
## Known stack suffix:
## SIGNED INT32
## LR(1) items:
chunk -> SIGNED INT32 . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production chunk -> SIGNED INT32

State 67:
## Known stack suffix:
## SIGNED HALF
## LR(1) items:
chunk -> SIGNED HALF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production chunk -> SIGNED HALF

State 68:
## Known stack suffix:
## SIGNED BYTE
## LR(1) items:
chunk -> SIGNED BYTE . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production chunk -> SIGNED BYTE

State 69:
## Known stack suffix:
## INT
## LR(1) items:
chunk -> INT . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production chunk -> INT

State 70:
## Known stack suffix:
## FLOAT64
## LR(1) items:
chunk -> FLOAT64 . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production chunk -> FLOAT64

State 71:
## Known stack suffix:
## FLOAT32
## LR(1) items:
chunk -> FLOAT32 . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production chunk -> FLOAT32

State 72:
## Known stack suffix:
## FLOAT
## LR(1) items:
chunk -> FLOAT . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production chunk -> FLOAT

State 73:
## Known stack suffix:
## ADDR
## LR(1) items:
chunk -> ADDR . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production chunk -> ADDR

State 74:
## Known stack suffix:
## STORE chunk
## LR(1) items:
binaryop -> STORE chunk . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> STORE chunk

State 75:
## Known stack suffix:
## LPAREN SEQ
## LR(1) items:
expr -> LPAREN SEQ . sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On sequence shift to state 76
-- On expr shift to state 32
## Reductions:

State 76:
## Known stack suffix:
## LPAREN SEQ sequence
## LR(1) items:
expr -> LPAREN SEQ sequence . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## LPAREN SEQ sequence RPAREN
## LR(1) items:
expr -> LPAREN SEQ sequence RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN SEQ sequence RPAREN

State 78:
## Known stack suffix:
## RAISE
## LR(1) items:
unaryop -> RAISE . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unaryop -> RAISE

State 79:
## Known stack suffix:
## OR
## LR(1) items:
binaryop -> OR . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> OR

State 80:
## Known stack suffix:
## NEI
## LR(1) items:
binaryop -> NEI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> NEI

State 81:
## Known stack suffix:
## NEF
## LR(1) items:
binaryop -> NEF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> NEF

State 82:
## Known stack suffix:
## NEA
## LR(1) items:
binaryop -> NEA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> NEA

State 83:
## Known stack suffix:
## MULI
## LR(1) items:
binaryop -> MULI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> MULI

State 84:
## Known stack suffix:
## MULF
## LR(1) items:
binaryop -> MULF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> MULF

State 85:
## Known stack suffix:
## MODI
## LR(1) items:
binaryop -> MODI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> MODI

State 86:
## Known stack suffix:
## LTI
## LR(1) items:
binaryop -> LTI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> LTI

State 87:
## Known stack suffix:
## LTF
## LR(1) items:
binaryop -> LTF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> LTF

State 88:
## Known stack suffix:
## LTA
## LR(1) items:
binaryop -> LTA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> LTA

State 89:
## Known stack suffix:
## LSR
## LR(1) items:
binaryop -> LSR . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> LSR

State 90:
## Known stack suffix:
## LSL
## LR(1) items:
binaryop -> LSL . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> LSL

State 91:
## Known stack suffix:
## LOAD
## LR(1) items:
unaryop -> LOAD . chunk [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On UNSIGNED shift to state 61
-- On SIGNED shift to state 65
-- On INT shift to state 69
-- On FLOAT64 shift to state 70
-- On FLOAT32 shift to state 71
-- On FLOAT shift to state 72
-- On ADDR shift to state 73
-- On chunk shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## LOAD chunk
## LR(1) items:
unaryop -> LOAD chunk . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unaryop -> LOAD chunk

State 93:
## Known stack suffix:
## LPAREN LET
## LR(1) items:
expr -> LPAREN LET . letdef sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On LPAREN shift to state 94
-- On IDENT shift to state 95
-- On oneletdef shift to state 101
-- On letdef shift to state 102
## Reductions:

State 94:
## Known stack suffix:
## LPAREN
## LR(1) items:
letdef -> LPAREN . letdefmult RPAREN [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On IDENT shift to state 95
-- On oneletdef shift to state 97
-- On letdefmult shift to state 99
## Reductions:
-- On RPAREN
--   reduce production letdefmult ->

State 95:
## Known stack suffix:
## IDENT
## LR(1) items:
oneletdef -> IDENT . expr [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## IDENT expr
## LR(1) items:
oneletdef -> IDENT expr . [ STRING RPAREN POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production oneletdef -> IDENT expr

State 97:
## Known stack suffix:
## oneletdef
## LR(1) items:
letdefmult -> oneletdef . letdefmult [ RPAREN ]
## Transitions:
-- On IDENT shift to state 95
-- On oneletdef shift to state 97
-- On letdefmult shift to state 98
## Reductions:
-- On RPAREN
--   reduce production letdefmult ->

State 98:
## Known stack suffix:
## oneletdef letdefmult
## LR(1) items:
letdefmult -> oneletdef letdefmult . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production letdefmult -> oneletdef letdefmult

State 99:
## Known stack suffix:
## LPAREN letdefmult
## LR(1) items:
letdef -> LPAREN letdefmult . RPAREN [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
-- On RPAREN shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## LPAREN letdefmult RPAREN
## LR(1) items:
letdef -> LPAREN letdefmult RPAREN . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production letdef -> LPAREN letdefmult RPAREN

State 101:
## Known stack suffix:
## oneletdef
## LR(1) items:
letdef -> oneletdef . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production letdef -> oneletdef

State 102:
## Known stack suffix:
## LPAREN LET letdef
## LR(1) items:
expr -> LPAREN LET letdef . sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On sequence shift to state 103
-- On expr shift to state 32
## Reductions:

State 103:
## Known stack suffix:
## LPAREN LET letdef sequence
## LR(1) items:
expr -> LPAREN LET letdef sequence . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## LPAREN LET letdef sequence RPAREN
## LR(1) items:
expr -> LPAREN LET letdef sequence RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN LET letdef sequence RPAREN

State 105:
## Known stack suffix:
## LEI
## LR(1) items:
binaryop -> LEI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> LEI

State 106:
## Known stack suffix:
## LEF
## LR(1) items:
binaryop -> LEF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> LEF

State 107:
## Known stack suffix:
## LEA
## LR(1) items:
binaryop -> LEA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> LEA

State 108:
## Known stack suffix:
## INTOFFLOAT
## LR(1) items:
unaryop -> INTOFFLOAT . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unaryop -> INTOFFLOAT

State 109:
## Known stack suffix:
## LPAREN INTASET
## LR(1) items:
expr -> LPAREN INTASET . expr expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## LPAREN INTASET expr
## LR(1) items:
expr -> LPAREN INTASET expr . expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## LPAREN INTASET expr expr
## LR(1) items:
expr -> LPAREN INTASET expr expr . expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## LPAREN INTASET expr expr expr
## LR(1) items:
expr -> LPAREN INTASET expr expr expr . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## LPAREN INTASET expr expr expr RPAREN
## LR(1) items:
expr -> LPAREN INTASET expr expr expr RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN INTASET expr expr expr RPAREN

State 114:
## Known stack suffix:
## LPAREN INTAREF
## LR(1) items:
expr -> LPAREN INTAREF . expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## LPAREN INTAREF expr
## LR(1) items:
expr -> LPAREN INTAREF expr . expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## LPAREN INTAREF expr expr
## LR(1) items:
expr -> LPAREN INTAREF expr expr . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## LPAREN INTAREF expr expr RPAREN
## LR(1) items:
expr -> LPAREN INTAREF expr expr RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN INTAREF expr expr RPAREN

State 118:
## Known stack suffix:
## LPAREN IF
## LR(1) items:
expr -> LPAREN IF . expr expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## LPAREN IF expr
## LR(1) items:
expr -> LPAREN IF expr . expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## LPAREN IF expr expr
## LR(1) items:
expr -> LPAREN IF expr expr . expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## LPAREN IF expr expr expr
## LR(1) items:
expr -> LPAREN IF expr expr expr . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## LPAREN IF expr expr expr RPAREN
## LR(1) items:
expr -> LPAREN IF expr expr expr RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN IF expr expr expr RPAREN

State 123:
## Known stack suffix:
## GTI
## LR(1) items:
binaryop -> GTI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> GTI

State 124:
## Known stack suffix:
## GTF
## LR(1) items:
binaryop -> GTF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> GTF

State 125:
## Known stack suffix:
## GTA
## LR(1) items:
binaryop -> GTA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> GTA

State 126:
## Known stack suffix:
## GEI
## LR(1) items:
binaryop -> GEI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> GEI

State 127:
## Known stack suffix:
## GEF
## LR(1) items:
binaryop -> GEF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> GEF

State 128:
## Known stack suffix:
## GEA
## LR(1) items:
binaryop -> GEA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> GEA

State 129:
## Known stack suffix:
## FLOATOFINT
## LR(1) items:
unaryop -> FLOATOFINT . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unaryop -> FLOATOFINT

State 130:
## Known stack suffix:
## LPAREN FLOATASET
## LR(1) items:
expr -> LPAREN FLOATASET . expr expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## LPAREN FLOATASET expr
## LR(1) items:
expr -> LPAREN FLOATASET expr . expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## LPAREN FLOATASET expr expr
## LR(1) items:
expr -> LPAREN FLOATASET expr expr . expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## LPAREN FLOATASET expr expr expr
## LR(1) items:
expr -> LPAREN FLOATASET expr expr expr . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## LPAREN FLOATASET expr expr expr RPAREN
## LR(1) items:
expr -> LPAREN FLOATASET expr expr expr RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN FLOATASET expr expr expr RPAREN

State 135:
## Known stack suffix:
## LPAREN FLOATAREF
## LR(1) items:
expr -> LPAREN FLOATAREF . expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## LPAREN FLOATAREF expr
## LR(1) items:
expr -> LPAREN FLOATAREF expr . expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## LPAREN FLOATAREF expr expr
## LR(1) items:
expr -> LPAREN FLOATAREF expr expr . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## LPAREN FLOATAREF expr expr RPAREN
## LR(1) items:
expr -> LPAREN FLOATAREF expr expr RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN FLOATAREF expr expr RPAREN

State 139:
## Known stack suffix:
## LPAREN EXTCALL
## LR(1) items:
expr -> LPAREN EXTCALL . STRING exprlist machtype RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## LPAREN EXTCALL STRING
## LR(1) items:
expr -> LPAREN EXTCALL STRING . exprlist machtype RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On exprlist shift to state 141
## Default reduction:
-- After reading the next token, reduce production exprlist ->

State 141:
## Known stack suffix:
## LPAREN EXTCALL STRING exprlist
## LR(1) items:
expr -> LPAREN EXTCALL STRING exprlist . machtype RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
exprlist -> exprlist . expr [ UNIT STRING POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT ADDR ]
## Transitions:
-- On UNIT shift to state 7
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On INT shift to state 8
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On FLOAT shift to state 9
-- On EXIT shift to state 28
-- On ADDR shift to state 10
-- On machtype shift to state 142
-- On expr shift to state 144
-- On componentlist shift to state 12
-- On component shift to state 15
## Reductions:

State 142:
## Known stack suffix:
## LPAREN EXTCALL STRING exprlist machtype
## LR(1) items:
expr -> LPAREN EXTCALL STRING exprlist machtype . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## LPAREN EXTCALL STRING exprlist machtype RPAREN
## LR(1) items:
expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN EXTCALL STRING exprlist machtype RPAREN

State 144:
## Known stack suffix:
## exprlist expr
## LR(1) items:
exprlist -> exprlist expr . [ UNIT STRING POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprlist -> exprlist expr

State 145:
## Known stack suffix:
## EQI
## LR(1) items:
binaryop -> EQI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> EQI

State 146:
## Known stack suffix:
## EQF
## LR(1) items:
binaryop -> EQF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> EQF

State 147:
## Known stack suffix:
## EQA
## LR(1) items:
binaryop -> EQA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> EQA

State 148:
## Known stack suffix:
## DIVI
## LR(1) items:
binaryop -> DIVI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> DIVI

State 149:
## Known stack suffix:
## DIVF
## LR(1) items:
binaryop -> DIVF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> DIVF

State 150:
## Known stack suffix:
## CHECKBOUND
## LR(1) items:
binaryop -> CHECKBOUND . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> CHECKBOUND

State 151:
## Known stack suffix:
## LPAREN CATCH
## LR(1) items:
expr -> LPAREN CATCH . sequence WITH sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On sequence shift to state 152
-- On expr shift to state 32
## Reductions:

State 152:
## Known stack suffix:
## LPAREN CATCH sequence
## LR(1) items:
expr -> LPAREN CATCH sequence . WITH sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On WITH shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## LPAREN CATCH sequence WITH
## LR(1) items:
expr -> LPAREN CATCH sequence WITH . sequence RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On sequence shift to state 154
-- On expr shift to state 32
## Reductions:

State 154:
## Known stack suffix:
## LPAREN CATCH sequence WITH sequence
## LR(1) items:
expr -> LPAREN CATCH sequence WITH sequence . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 155
## Reductions:

State 155:
## Known stack suffix:
## LPAREN CATCH sequence WITH sequence RPAREN
## LR(1) items:
expr -> LPAREN CATCH sequence WITH sequence RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN CATCH sequence WITH sequence RPAREN

State 156:
## Known stack suffix:
## LPAREN ASSIGN
## LR(1) items:
expr -> LPAREN ASSIGN . IDENT expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On IDENT shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## LPAREN ASSIGN IDENT
## LR(1) items:
expr -> LPAREN ASSIGN IDENT . expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## LPAREN ASSIGN IDENT expr
## LR(1) items:
expr -> LPAREN ASSIGN IDENT expr . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## LPAREN ASSIGN IDENT expr RPAREN
## LR(1) items:
expr -> LPAREN ASSIGN IDENT expr RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN ASSIGN IDENT expr RPAREN

State 160:
## Known stack suffix:
## ASR
## LR(1) items:
binaryop -> ASR . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> ASR

State 161:
## Known stack suffix:
## LPAREN APPLY
## LR(1) items:
expr -> LPAREN APPLY . expr exprlist machtype RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## LPAREN APPLY expr
## LR(1) items:
expr -> LPAREN APPLY expr . exprlist machtype RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On exprlist shift to state 163
## Default reduction:
-- After reading the next token, reduce production exprlist ->

State 163:
## Known stack suffix:
## LPAREN APPLY expr exprlist
## LR(1) items:
expr -> LPAREN APPLY expr exprlist . machtype RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
exprlist -> exprlist . expr [ UNIT STRING POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT ADDR ]
## Transitions:
-- On UNIT shift to state 7
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On INT shift to state 8
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On FLOAT shift to state 9
-- On EXIT shift to state 28
-- On ADDR shift to state 10
-- On machtype shift to state 164
-- On expr shift to state 144
-- On componentlist shift to state 12
-- On component shift to state 15
## Reductions:

State 164:
## Known stack suffix:
## LPAREN APPLY expr exprlist machtype
## LR(1) items:
expr -> LPAREN APPLY expr exprlist machtype . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## LPAREN APPLY expr exprlist machtype RPAREN
## LR(1) items:
expr -> LPAREN APPLY expr exprlist machtype RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN APPLY expr exprlist machtype RPAREN

State 166:
## Known stack suffix:
## AND
## LR(1) items:
binaryop -> AND . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> AND

State 167:
## Known stack suffix:
## ALLOC
## LR(1) items:
unaryop -> ALLOC . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unaryop -> ALLOC

State 168:
## Known stack suffix:
## LPAREN ADDRASET
## LR(1) items:
expr -> LPAREN ADDRASET . expr expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## LPAREN ADDRASET expr
## LR(1) items:
expr -> LPAREN ADDRASET expr . expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 170
## Reductions:

State 170:
## Known stack suffix:
## LPAREN ADDRASET expr expr
## LR(1) items:
expr -> LPAREN ADDRASET expr expr . expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## LPAREN ADDRASET expr expr expr
## LR(1) items:
expr -> LPAREN ADDRASET expr expr expr . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## LPAREN ADDRASET expr expr expr RPAREN
## LR(1) items:
expr -> LPAREN ADDRASET expr expr expr RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN ADDRASET expr expr expr RPAREN

State 173:
## Known stack suffix:
## LPAREN ADDRAREF
## LR(1) items:
expr -> LPAREN ADDRAREF . expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## LPAREN ADDRAREF expr
## LR(1) items:
expr -> LPAREN ADDRAREF expr . expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## LPAREN ADDRAREF expr expr
## LR(1) items:
expr -> LPAREN ADDRAREF expr expr . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## LPAREN ADDRAREF expr expr RPAREN
## LR(1) items:
expr -> LPAREN ADDRAREF expr expr RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN ADDRAREF expr expr RPAREN

State 177:
## Known stack suffix:
## ADDI
## LR(1) items:
binaryop -> ADDI . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> ADDI

State 178:
## Known stack suffix:
## ADDF
## LR(1) items:
binaryop -> ADDF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> ADDF

State 179:
## Known stack suffix:
## ADDA
## LR(1) items:
binaryop -> ADDA . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binaryop -> ADDA

State 180:
## Known stack suffix:
## ABSF
## LR(1) items:
unaryop -> ABSF . [ STRING POINTER LPAREN LBRACKET INTCONST IDENT FLOATCONST EXIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unaryop -> ABSF

State 181:
## Known stack suffix:
## LPAREN unaryop
## LR(1) items:
expr -> LPAREN unaryop . expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## LPAREN unaryop expr
## LR(1) items:
expr -> LPAREN unaryop expr . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 183
## Reductions:

State 183:
## Known stack suffix:
## LPAREN unaryop expr RPAREN
## LR(1) items:
expr -> LPAREN unaryop expr RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN unaryop expr RPAREN

State 184:
## Known stack suffix:
## LPAREN binaryop
## LR(1) items:
expr -> LPAREN binaryop . expr expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## LPAREN binaryop expr
## LR(1) items:
expr -> LPAREN binaryop expr . expr RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On STRING shift to state 18
-- On POINTER shift to state 19
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 23
-- On INTCONST shift to state 25
-- On IDENT shift to state 26
-- On FLOATCONST shift to state 27
-- On EXIT shift to state 28
-- On expr shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## LPAREN binaryop expr expr
## LR(1) items:
expr -> LPAREN binaryop expr expr . RPAREN [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
-- On RPAREN shift to state 187
## Reductions:

State 187:
## Known stack suffix:
## LPAREN binaryop expr expr RPAREN
## LR(1) items:
expr -> LPAREN binaryop expr expr RPAREN . [ WITH UNIT STRING RPAREN POINTER LPAREN LBRACKET INTCONST INT IDENT FLOATCONST FLOAT EXIT CASE ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN binaryop expr expr RPAREN

State 188:
## Known stack suffix:
## LPAREN FUNCTION STRING LPAREN params RPAREN sequence
## LR(1) items:
fundecl -> LPAREN FUNCTION STRING LPAREN params RPAREN sequence . RPAREN [ # ]
## Transitions:
-- On RPAREN shift to state 189
## Reductions:

State 189:
## Known stack suffix:
## LPAREN FUNCTION STRING LPAREN params RPAREN sequence RPAREN
## LR(1) items:
fundecl -> LPAREN FUNCTION STRING LPAREN params RPAREN sequence RPAREN . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production fundecl -> LPAREN FUNCTION STRING LPAREN params RPAREN sequence RPAREN

State 190:
## Known stack suffix:
## oneparam
## LR(1) items:
params -> oneparam . params [ RPAREN ]
## Transitions:
-- On IDENT shift to state 5
-- On params shift to state 191
-- On oneparam shift to state 190
## Reductions:
-- On RPAREN
--   reduce production params ->

State 191:
## Known stack suffix:
## oneparam params
## LR(1) items:
params -> oneparam params . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production params -> oneparam params

State 192:
## Known stack suffix:
## LPAREN datalist
## LR(1) items:
datadecl -> LPAREN datalist . RPAREN [ # ]
datalist -> datalist . dataitem [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On STRING shift to state 193
-- On SKIP shift to state 195
-- On RPAREN shift to state 197
-- On KSTRING shift to state 198
-- On INTCONST shift to state 200
-- On INT shift to state 202
-- On HALF shift to state 204
-- On FLOAT shift to state 206
-- On BYTE shift to state 208
-- On ALIGN shift to state 210
-- On ADDR shift to state 212
-- On dataitem shift to state 215
## Reductions:

State 193:
## Known stack suffix:
## STRING
## LR(1) items:
dataitem -> STRING . COLON [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On COLON shift to state 194
## Reductions:

State 194:
## Known stack suffix:
## STRING COLON
## LR(1) items:
dataitem -> STRING COLON . [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dataitem -> STRING COLON

State 195:
## Known stack suffix:
## SKIP
## LR(1) items:
dataitem -> SKIP . INTCONST [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On INTCONST shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## SKIP INTCONST
## LR(1) items:
dataitem -> SKIP INTCONST . [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dataitem -> SKIP INTCONST

State 197:
## Known stack suffix:
## LPAREN datalist RPAREN
## LR(1) items:
datadecl -> LPAREN datalist RPAREN . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production datadecl -> LPAREN datalist RPAREN

State 198:
## Known stack suffix:
## KSTRING
## LR(1) items:
dataitem -> KSTRING . STRING [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On STRING shift to state 199
## Reductions:

State 199:
## Known stack suffix:
## KSTRING STRING
## LR(1) items:
dataitem -> KSTRING STRING . [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dataitem -> KSTRING STRING

State 200:
## Known stack suffix:
## INTCONST
## LR(1) items:
dataitem -> INTCONST . COLON [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On COLON shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## INTCONST COLON
## LR(1) items:
dataitem -> INTCONST COLON . [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dataitem -> INTCONST COLON

State 202:
## Known stack suffix:
## INT
## LR(1) items:
dataitem -> INT . INTCONST [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On INTCONST shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## INT INTCONST
## LR(1) items:
dataitem -> INT INTCONST . [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dataitem -> INT INTCONST

State 204:
## Known stack suffix:
## HALF
## LR(1) items:
dataitem -> HALF . INTCONST [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On INTCONST shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## HALF INTCONST
## LR(1) items:
dataitem -> HALF INTCONST . [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dataitem -> HALF INTCONST

State 206:
## Known stack suffix:
## FLOAT
## LR(1) items:
dataitem -> FLOAT . FLOATCONST [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On FLOATCONST shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## FLOAT FLOATCONST
## LR(1) items:
dataitem -> FLOAT FLOATCONST . [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dataitem -> FLOAT FLOATCONST

State 208:
## Known stack suffix:
## BYTE
## LR(1) items:
dataitem -> BYTE . INTCONST [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On INTCONST shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## BYTE INTCONST
## LR(1) items:
dataitem -> BYTE INTCONST . [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dataitem -> BYTE INTCONST

State 210:
## Known stack suffix:
## ALIGN
## LR(1) items:
dataitem -> ALIGN . INTCONST [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On INTCONST shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## ALIGN INTCONST
## LR(1) items:
dataitem -> ALIGN INTCONST . [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dataitem -> ALIGN INTCONST

State 212:
## Known stack suffix:
## ADDR
## LR(1) items:
dataitem -> ADDR . STRING [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
dataitem -> ADDR . INTCONST [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
-- On STRING shift to state 213
-- On INTCONST shift to state 214
## Reductions:

State 213:
## Known stack suffix:
## ADDR STRING
## LR(1) items:
dataitem -> ADDR STRING . [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dataitem -> ADDR STRING

State 214:
## Known stack suffix:
## ADDR INTCONST
## LR(1) items:
dataitem -> ADDR INTCONST . [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dataitem -> ADDR INTCONST

State 215:
## Known stack suffix:
## datalist dataitem
## LR(1) items:
datalist -> datalist dataitem . [ STRING SKIP RPAREN KSTRING INTCONST INT HALF FLOAT BYTE ALIGN ADDR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datalist -> datalist dataitem

State 216:
## Known stack suffix:
## EOF
## LR(1) items:
phrase -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production phrase -> EOF

State 217:
## Known stack suffix:
## phrase
## LR(1) items:
phrase' -> phrase . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept phrase

State 218:
## Known stack suffix:
## fundecl
## LR(1) items:
phrase -> fundecl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production phrase -> fundecl

State 219:
## Known stack suffix:
## datadecl
## LR(1) items:
phrase -> datadecl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production phrase -> datadecl

