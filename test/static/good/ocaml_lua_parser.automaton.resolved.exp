State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On SEMI shift to state 1
-- On statlist shift to state 2
-- On prog shift to state 210
-- On chunk shift to state 211
-- On OSC shift to state 20
## Reductions:
-- On WHILE reduce production OSC ->
-- On RETURN reduce production OSC ->
-- On REPEAT reduce production OSC ->
-- On LPAR reduce production OSC ->
-- On LOCAL reduce production OSC ->
-- On IF reduce production OSC ->
-- On IDENT reduce production OSC ->
-- On GOTO reduce production OSC ->
-- On FUNCTION reduce production OSC ->
-- On FOR reduce production OSC ->
-- On EOF reduce production OSC ->
-- On DO reduce production OSC ->
-- On DCOLON reduce production OSC ->
-- On BREAK reduce production OSC ->

State 1:
## Known stack suffix:
## SEMI
## LR(1) items:
OSC -> SEMI . [ WHILE UNTIL RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production OSC -> SEMI

State 2:
## Known stack suffix:
## statlist
## LR(1) items:
chunk -> statlist . retstat OSC [ UNTIL EOF END ELSEIF ELSE ]
chunk -> statlist . [ UNTIL EOF END ELSEIF ELSE ]
statlist -> statlist . stat OSC [ WHILE UNTIL RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On WHILE shift to state 3
-- On RETURN shift to state 125
-- On REPEAT shift to state 127
-- On LPAR shift to state 8
-- On LOCAL shift to state 131
-- On IF shift to state 139
-- On IDENT shift to state 12
-- On GOTO shift to state 158
-- On FUNCTION shift to state 160
-- On FOR shift to state 169
-- On DO shift to state 189
-- On DCOLON shift to state 192
-- On BREAK shift to state 195
-- On varlist shift to state 196
-- On var shift to state 203
-- On stat shift to state 204
-- On retstat shift to state 206
-- On label shift to state 208
-- On ident shift to state 40
-- On functioncall shift to state 209
-- On bracket shift to state 200
## Reductions:
-- On UNTIL reduce production chunk -> statlist
-- On EOF reduce production chunk -> statlist
-- On END reduce production chunk -> statlist
-- On ELSEIF reduce production chunk -> statlist
-- On ELSE reduce production chunk -> statlist

State 3:
## Known stack suffix:
## WHILE
## LR(1) items:
stat -> WHILE . exp DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 121
-- On bracket shift to state 52
## Reductions:

State 4:
## Known stack suffix:
## STR_CONST
## LR(1) items:
primary -> STR_CONST . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> STR_CONST

State 5:
## Known stack suffix:
## NUM_CONST
## LR(1) items:
primary -> NUM_CONST . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> NUM_CONST

State 6:
## Known stack suffix:
## NOT
## LR(1) items:
exp -> NOT . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 120
-- On bracket shift to state 52
## Reductions:

State 7:
## Known stack suffix:
## MINUS
## LR(1) items:
exp -> MINUS . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 119
-- On bracket shift to state 52
## Reductions:

State 8:
## Known stack suffix:
## LPAR
## LR(1) items:
bracket -> LPAR . exp RPAR [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 117
-- On bracket shift to state 52
## Reductions:

State 9:
## Known stack suffix:
## LCB
## LR(1) items:
tableconstructor -> LCB . RCB [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
tableconstructor -> LCB . fieldlist RCB [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On RCB shift to state 10
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On LB shift to state 11
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 105
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On fields shift to state 108
-- On fieldlist shift to state 114
-- On field shift to state 116
-- On exp shift to state 113
-- On bracket shift to state 52
## Reductions:

State 10:
## Known stack suffix:
## LCB RCB
## LR(1) items:
tableconstructor -> LCB RCB . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tableconstructor -> LCB RCB

State 11:
## Known stack suffix:
## LB
## LR(1) items:
field -> LB . exp RB ASSIGN exp [ SEMI RCB COMMA ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 101
-- On bracket shift to state 52
## Reductions:

State 12:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IN IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK ASSIGN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> IDENT

State 13:
## Known stack suffix:
## HASH
## LR(1) items:
exp -> HASH . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 100
-- On bracket shift to state 52
## Reductions:

State 14:
## Known stack suffix:
## FUNCTION
## LR(1) items:
functiondef -> FUNCTION . funcbody [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On LPAR shift to state 15
-- On funcbody shift to state 31
## Reductions:

State 15:
## Known stack suffix:
## LPAR
## LR(1) items:
funcbody -> LPAR . RPAR block END [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
funcbody -> LPAR . parlist RPAR block END [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On RPAR shift to state 16
-- On IDENT shift to state 12
-- On ELLIPSIS shift to state 21
-- On parlist shift to state 22
-- On namelist shift to state 26
-- On ident shift to state 30
## Reductions:

State 16:
## Known stack suffix:
## LPAR RPAR
## LR(1) items:
funcbody -> LPAR RPAR . block END [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On SEMI shift to state 1
-- On statlist shift to state 2
-- On chunk shift to state 17
-- On block shift to state 18
-- On OSC shift to state 20
## Reductions:
-- On WHILE reduce production OSC ->
-- On RETURN reduce production OSC ->
-- On REPEAT reduce production OSC ->
-- On LPAR reduce production OSC ->
-- On LOCAL reduce production OSC ->
-- On IF reduce production OSC ->
-- On IDENT reduce production OSC ->
-- On GOTO reduce production OSC ->
-- On FUNCTION reduce production OSC ->
-- On FOR reduce production OSC ->
-- On END reduce production OSC ->
-- On DO reduce production OSC ->
-- On DCOLON reduce production OSC ->
-- On BREAK reduce production OSC ->

State 17:
## Known stack suffix:
## chunk
## LR(1) items:
block -> chunk . [ UNTIL END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block -> chunk

State 18:
## Known stack suffix:
## LPAR RPAR block
## LR(1) items:
funcbody -> LPAR RPAR block . END [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On END shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## LPAR RPAR block END
## LR(1) items:
funcbody -> LPAR RPAR block END . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production funcbody -> LPAR RPAR block END

State 20:
## Known stack suffix:
## OSC
## LR(1) items:
statlist -> OSC . [ WHILE UNTIL RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statlist -> OSC

State 21:
## Known stack suffix:
## ELLIPSIS
## LR(1) items:
parlist -> ELLIPSIS . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parlist -> ELLIPSIS

State 22:
## Known stack suffix:
## LPAR parlist
## LR(1) items:
funcbody -> LPAR parlist . RPAR block END [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On RPAR shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## LPAR parlist RPAR
## LR(1) items:
funcbody -> LPAR parlist RPAR . block END [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On SEMI shift to state 1
-- On statlist shift to state 2
-- On chunk shift to state 17
-- On block shift to state 24
-- On OSC shift to state 20
## Reductions:
-- On WHILE reduce production OSC ->
-- On RETURN reduce production OSC ->
-- On REPEAT reduce production OSC ->
-- On LPAR reduce production OSC ->
-- On LOCAL reduce production OSC ->
-- On IF reduce production OSC ->
-- On IDENT reduce production OSC ->
-- On GOTO reduce production OSC ->
-- On FUNCTION reduce production OSC ->
-- On FOR reduce production OSC ->
-- On END reduce production OSC ->
-- On DO reduce production OSC ->
-- On DCOLON reduce production OSC ->
-- On BREAK reduce production OSC ->

State 24:
## Known stack suffix:
## LPAR parlist RPAR block
## LR(1) items:
funcbody -> LPAR parlist RPAR block . END [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On END shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## LPAR parlist RPAR block END
## LR(1) items:
funcbody -> LPAR parlist RPAR block END . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production funcbody -> LPAR parlist RPAR block END

State 26:
## Known stack suffix:
## namelist
## LR(1) items:
namelist -> namelist . COMMA ident [ RPAR COMMA ]
parlist -> namelist . [ RPAR ]
parlist -> namelist . COMMA ELLIPSIS [ RPAR ]
## Transitions:
-- On COMMA shift to state 27
## Reductions:
-- On RPAR reduce production parlist -> namelist

State 27:
## Known stack suffix:
## namelist COMMA
## LR(1) items:
namelist -> namelist COMMA . ident [ RPAR COMMA ]
parlist -> namelist COMMA . ELLIPSIS [ RPAR ]
## Transitions:
-- On IDENT shift to state 12
-- On ELLIPSIS shift to state 28
-- On ident shift to state 29
## Reductions:

State 28:
## Known stack suffix:
## namelist COMMA ELLIPSIS
## LR(1) items:
parlist -> namelist COMMA ELLIPSIS . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parlist -> namelist COMMA ELLIPSIS

State 29:
## Known stack suffix:
## namelist COMMA ident
## LR(1) items:
namelist -> namelist COMMA ident . [ WHILE UNTIL SEMI RPAR RETURN REPEAT LPAR LOCAL IN IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON COMMA BREAK ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production namelist -> namelist COMMA ident

State 30:
## Known stack suffix:
## ident
## LR(1) items:
namelist -> ident . [ WHILE UNTIL SEMI RPAR RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON COMMA BREAK ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production namelist -> ident

State 31:
## Known stack suffix:
## FUNCTION funcbody
## LR(1) items:
functiondef -> FUNCTION funcbody . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production functiondef -> FUNCTION funcbody

State 32:
## Known stack suffix:
## ELLIPSIS
## LR(1) items:
primary -> ELLIPSIS . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> ELLIPSIS

State 33:
## Known stack suffix:
## BOOL
## LR(1) items:
primary -> BOOL . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> BOOL

State 34:
## Known stack suffix:
## var
## LR(1) items:
exp -> var . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
functioncall -> var . args [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
functioncall -> var . COLON ident args [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
var -> var . key [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 35
-- On LPAR shift to state 36
-- On LCB shift to state 9
-- On LB shift to state 43
-- On DOT shift to state 53
-- On COLON shift to state 95
-- On tableconstructor shift to state 57
-- On key shift to state 98
-- On args shift to state 99
## Reductions:
-- On WHILE reduce production exp -> var
-- On UNTIL reduce production exp -> var
-- On THEN reduce production exp -> var
-- On SEMI reduce production exp -> var
-- On RPAR reduce production exp -> var
-- On RETURN reduce production exp -> var
-- On REPEAT reduce production exp -> var
-- On RCB reduce production exp -> var
-- On RB reduce production exp -> var
-- On PLUS reduce production exp -> var
-- On OR reduce production exp -> var
-- On NE reduce production exp -> var
-- On MULT reduce production exp -> var
-- On MOD reduce production exp -> var
-- On MINUS reduce production exp -> var
-- On LT reduce production exp -> var
-- On LOCAL reduce production exp -> var
-- On LE reduce production exp -> var
-- On IF reduce production exp -> var
-- On IDENT reduce production exp -> var
-- On GT reduce production exp -> var
-- On GOTO reduce production exp -> var
-- On GE reduce production exp -> var
-- On FUNCTION reduce production exp -> var
-- On FOR reduce production exp -> var
-- On EQ reduce production exp -> var
-- On EOF reduce production exp -> var
-- On END reduce production exp -> var
-- On ELSEIF reduce production exp -> var
-- On ELSE reduce production exp -> var
-- On DO reduce production exp -> var
-- On DIV reduce production exp -> var
-- On DCOLON reduce production exp -> var
-- On COMMA reduce production exp -> var
-- On CAT reduce production exp -> var
-- On CARAT reduce production exp -> var
-- On BREAK reduce production exp -> var
-- On AND reduce production exp -> var

State 35:
## Known stack suffix:
## STR_CONST
## LR(1) items:
args -> STR_CONST . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args -> STR_CONST

State 36:
## Known stack suffix:
## LPAR
## LR(1) items:
args -> LPAR . RPAR [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
args -> LPAR . explist RPAR [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On RPAR shift to state 37
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On explist shift to state 90
-- On exp shift to state 94
-- On bracket shift to state 52
## Reductions:

State 37:
## Known stack suffix:
## LPAR RPAR
## LR(1) items:
args -> LPAR RPAR . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args -> LPAR RPAR

State 38:
## Known stack suffix:
## tableconstructor
## LR(1) items:
primary -> tableconstructor . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> tableconstructor

State 39:
## Known stack suffix:
## primary
## LR(1) items:
exp -> primary . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp -> primary

State 40:
## Known stack suffix:
## ident
## LR(1) items:
var -> ident . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK ASSIGN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var -> ident

State 41:
## Known stack suffix:
## functiondef
## LR(1) items:
primary -> functiondef . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> functiondef

State 42:
## Known stack suffix:
## functioncall
## LR(1) items:
exp -> functioncall . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
functioncall -> functioncall . args [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
functioncall -> functioncall . COLON ident args [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
var -> functioncall . key [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 35
-- On LPAR shift to state 36
-- On LCB shift to state 9
-- On LB shift to state 43
-- On DOT shift to state 53
-- On COLON shift to state 85
-- On tableconstructor shift to state 57
-- On key shift to state 88
-- On args shift to state 89
## Reductions:
-- On WHILE reduce production exp -> functioncall
-- On UNTIL reduce production exp -> functioncall
-- On THEN reduce production exp -> functioncall
-- On SEMI reduce production exp -> functioncall
-- On RPAR reduce production exp -> functioncall
-- On RETURN reduce production exp -> functioncall
-- On REPEAT reduce production exp -> functioncall
-- On RCB reduce production exp -> functioncall
-- On RB reduce production exp -> functioncall
-- On PLUS reduce production exp -> functioncall
-- On OR reduce production exp -> functioncall
-- On NE reduce production exp -> functioncall
-- On MULT reduce production exp -> functioncall
-- On MOD reduce production exp -> functioncall
-- On MINUS reduce production exp -> functioncall
-- On LT reduce production exp -> functioncall
-- On LOCAL reduce production exp -> functioncall
-- On LE reduce production exp -> functioncall
-- On IF reduce production exp -> functioncall
-- On IDENT reduce production exp -> functioncall
-- On GT reduce production exp -> functioncall
-- On GOTO reduce production exp -> functioncall
-- On GE reduce production exp -> functioncall
-- On FUNCTION reduce production exp -> functioncall
-- On FOR reduce production exp -> functioncall
-- On EQ reduce production exp -> functioncall
-- On EOF reduce production exp -> functioncall
-- On END reduce production exp -> functioncall
-- On ELSEIF reduce production exp -> functioncall
-- On ELSE reduce production exp -> functioncall
-- On DO reduce production exp -> functioncall
-- On DIV reduce production exp -> functioncall
-- On DCOLON reduce production exp -> functioncall
-- On COMMA reduce production exp -> functioncall
-- On CAT reduce production exp -> functioncall
-- On CARAT reduce production exp -> functioncall
-- On BREAK reduce production exp -> functioncall
-- On AND reduce production exp -> functioncall

State 43:
## Known stack suffix:
## LB
## LR(1) items:
key -> LB . exp RB [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK ASSIGN AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 44
-- On bracket shift to state 52
## Reductions:

State 44:
## Known stack suffix:
## LB exp
## LR(1) items:
exp -> exp . OR exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . AND exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . LT exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . GT exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . LE exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . GE exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . NE exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . EQ exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . CAT exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . PLUS exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MINUS exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MULT exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . DIV exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MOD exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . CARAT exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
key -> LB exp . RB [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK ASSIGN AND ]
## Transitions:
-- On RB shift to state 45
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:

State 45:
## Known stack suffix:
## LB exp RB
## LR(1) items:
key -> LB exp RB . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK ASSIGN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production key -> LB exp RB

State 46:
## Known stack suffix:
## exp PLUS
## LR(1) items:
exp -> exp PLUS . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 47
-- On bracket shift to state 52
## Reductions:

State 47:
## Known stack suffix:
## exp PLUS exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp PLUS exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On DIV shift to state 63
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> exp PLUS exp
-- On UNTIL reduce production exp -> exp PLUS exp
-- On THEN reduce production exp -> exp PLUS exp
-- On SEMI reduce production exp -> exp PLUS exp
-- On RPAR reduce production exp -> exp PLUS exp
-- On RETURN reduce production exp -> exp PLUS exp
-- On REPEAT reduce production exp -> exp PLUS exp
-- On RCB reduce production exp -> exp PLUS exp
-- On RB reduce production exp -> exp PLUS exp
-- On PLUS reduce production exp -> exp PLUS exp
-- On OR reduce production exp -> exp PLUS exp
-- On NE reduce production exp -> exp PLUS exp
-- On MINUS reduce production exp -> exp PLUS exp
-- On LT reduce production exp -> exp PLUS exp
-- On LPAR reduce production exp -> exp PLUS exp
-- On LOCAL reduce production exp -> exp PLUS exp
-- On LE reduce production exp -> exp PLUS exp
-- On IF reduce production exp -> exp PLUS exp
-- On IDENT reduce production exp -> exp PLUS exp
-- On GT reduce production exp -> exp PLUS exp
-- On GOTO reduce production exp -> exp PLUS exp
-- On GE reduce production exp -> exp PLUS exp
-- On FUNCTION reduce production exp -> exp PLUS exp
-- On FOR reduce production exp -> exp PLUS exp
-- On EQ reduce production exp -> exp PLUS exp
-- On EOF reduce production exp -> exp PLUS exp
-- On END reduce production exp -> exp PLUS exp
-- On ELSEIF reduce production exp -> exp PLUS exp
-- On ELSE reduce production exp -> exp PLUS exp
-- On DO reduce production exp -> exp PLUS exp
-- On DCOLON reduce production exp -> exp PLUS exp
-- On COMMA reduce production exp -> exp PLUS exp
-- On CAT reduce production exp -> exp PLUS exp
-- On BREAK reduce production exp -> exp PLUS exp
-- On AND reduce production exp -> exp PLUS exp

State 48:
## Known stack suffix:
## exp MULT
## LR(1) items:
exp -> exp MULT . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 49
-- On bracket shift to state 52
## Reductions:

State 49:
## Known stack suffix:
## exp MULT exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp MULT exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> exp MULT exp
-- On UNTIL reduce production exp -> exp MULT exp
-- On THEN reduce production exp -> exp MULT exp
-- On SEMI reduce production exp -> exp MULT exp
-- On RPAR reduce production exp -> exp MULT exp
-- On RETURN reduce production exp -> exp MULT exp
-- On REPEAT reduce production exp -> exp MULT exp
-- On RCB reduce production exp -> exp MULT exp
-- On RB reduce production exp -> exp MULT exp
-- On PLUS reduce production exp -> exp MULT exp
-- On OR reduce production exp -> exp MULT exp
-- On NE reduce production exp -> exp MULT exp
-- On MULT reduce production exp -> exp MULT exp
-- On MOD reduce production exp -> exp MULT exp
-- On MINUS reduce production exp -> exp MULT exp
-- On LT reduce production exp -> exp MULT exp
-- On LPAR reduce production exp -> exp MULT exp
-- On LOCAL reduce production exp -> exp MULT exp
-- On LE reduce production exp -> exp MULT exp
-- On IF reduce production exp -> exp MULT exp
-- On IDENT reduce production exp -> exp MULT exp
-- On GT reduce production exp -> exp MULT exp
-- On GOTO reduce production exp -> exp MULT exp
-- On GE reduce production exp -> exp MULT exp
-- On FUNCTION reduce production exp -> exp MULT exp
-- On FOR reduce production exp -> exp MULT exp
-- On EQ reduce production exp -> exp MULT exp
-- On EOF reduce production exp -> exp MULT exp
-- On END reduce production exp -> exp MULT exp
-- On ELSEIF reduce production exp -> exp MULT exp
-- On ELSE reduce production exp -> exp MULT exp
-- On DO reduce production exp -> exp MULT exp
-- On DIV reduce production exp -> exp MULT exp
-- On DCOLON reduce production exp -> exp MULT exp
-- On COMMA reduce production exp -> exp MULT exp
-- On CAT reduce production exp -> exp MULT exp
-- On BREAK reduce production exp -> exp MULT exp
-- On AND reduce production exp -> exp MULT exp

State 50:
## Known stack suffix:
## exp CARAT
## LR(1) items:
exp -> exp CARAT . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 51
-- On bracket shift to state 52
## Reductions:

State 51:
## Known stack suffix:
## exp CARAT exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp CARAT exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> exp CARAT exp
-- On UNTIL reduce production exp -> exp CARAT exp
-- On THEN reduce production exp -> exp CARAT exp
-- On SEMI reduce production exp -> exp CARAT exp
-- On RPAR reduce production exp -> exp CARAT exp
-- On RETURN reduce production exp -> exp CARAT exp
-- On REPEAT reduce production exp -> exp CARAT exp
-- On RCB reduce production exp -> exp CARAT exp
-- On RB reduce production exp -> exp CARAT exp
-- On PLUS reduce production exp -> exp CARAT exp
-- On OR reduce production exp -> exp CARAT exp
-- On NE reduce production exp -> exp CARAT exp
-- On MULT reduce production exp -> exp CARAT exp
-- On MOD reduce production exp -> exp CARAT exp
-- On MINUS reduce production exp -> exp CARAT exp
-- On LT reduce production exp -> exp CARAT exp
-- On LPAR reduce production exp -> exp CARAT exp
-- On LOCAL reduce production exp -> exp CARAT exp
-- On LE reduce production exp -> exp CARAT exp
-- On IF reduce production exp -> exp CARAT exp
-- On IDENT reduce production exp -> exp CARAT exp
-- On GT reduce production exp -> exp CARAT exp
-- On GOTO reduce production exp -> exp CARAT exp
-- On GE reduce production exp -> exp CARAT exp
-- On FUNCTION reduce production exp -> exp CARAT exp
-- On FOR reduce production exp -> exp CARAT exp
-- On EQ reduce production exp -> exp CARAT exp
-- On EOF reduce production exp -> exp CARAT exp
-- On END reduce production exp -> exp CARAT exp
-- On ELSEIF reduce production exp -> exp CARAT exp
-- On ELSE reduce production exp -> exp CARAT exp
-- On DO reduce production exp -> exp CARAT exp
-- On DIV reduce production exp -> exp CARAT exp
-- On DCOLON reduce production exp -> exp CARAT exp
-- On COMMA reduce production exp -> exp CARAT exp
-- On CAT reduce production exp -> exp CARAT exp
-- On BREAK reduce production exp -> exp CARAT exp
-- On AND reduce production exp -> exp CARAT exp

State 52:
## Known stack suffix:
## bracket
## LR(1) items:
functioncall -> bracket . args [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
functioncall -> bracket . COLON ident args [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
primary -> bracket . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
var -> bracket . key [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 35
-- On LPAR shift to state 36
-- On LCB shift to state 9
-- On LB shift to state 43
-- On DOT shift to state 53
-- On COLON shift to state 55
-- On tableconstructor shift to state 57
-- On key shift to state 59
-- On args shift to state 60
## Reductions:
-- On WHILE reduce production primary -> bracket
-- On UNTIL reduce production primary -> bracket
-- On THEN reduce production primary -> bracket
-- On SEMI reduce production primary -> bracket
-- On RPAR reduce production primary -> bracket
-- On RETURN reduce production primary -> bracket
-- On REPEAT reduce production primary -> bracket
-- On RCB reduce production primary -> bracket
-- On RB reduce production primary -> bracket
-- On PLUS reduce production primary -> bracket
-- On OR reduce production primary -> bracket
-- On NE reduce production primary -> bracket
-- On MULT reduce production primary -> bracket
-- On MOD reduce production primary -> bracket
-- On MINUS reduce production primary -> bracket
-- On LT reduce production primary -> bracket
-- On LOCAL reduce production primary -> bracket
-- On LE reduce production primary -> bracket
-- On IF reduce production primary -> bracket
-- On IDENT reduce production primary -> bracket
-- On GT reduce production primary -> bracket
-- On GOTO reduce production primary -> bracket
-- On GE reduce production primary -> bracket
-- On FUNCTION reduce production primary -> bracket
-- On FOR reduce production primary -> bracket
-- On EQ reduce production primary -> bracket
-- On EOF reduce production primary -> bracket
-- On END reduce production primary -> bracket
-- On ELSEIF reduce production primary -> bracket
-- On ELSE reduce production primary -> bracket
-- On DO reduce production primary -> bracket
-- On DIV reduce production primary -> bracket
-- On DCOLON reduce production primary -> bracket
-- On COMMA reduce production primary -> bracket
-- On CAT reduce production primary -> bracket
-- On CARAT reduce production primary -> bracket
-- On BREAK reduce production primary -> bracket
-- On AND reduce production primary -> bracket

State 53:
## Known stack suffix:
## DOT
## LR(1) items:
key -> DOT . ident [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK ASSIGN AND ]
## Transitions:
-- On IDENT shift to state 12
-- On ident shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## DOT ident
## LR(1) items:
key -> DOT ident . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK ASSIGN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production key -> DOT ident

State 55:
## Known stack suffix:
## bracket COLON
## LR(1) items:
functioncall -> bracket COLON . ident args [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
-- On IDENT shift to state 12
-- On ident shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## bracket COLON ident
## LR(1) items:
functioncall -> bracket COLON ident . args [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 35
-- On LPAR shift to state 36
-- On LCB shift to state 9
-- On tableconstructor shift to state 57
-- On args shift to state 58
## Reductions:

State 57:
## Known stack suffix:
## tableconstructor
## LR(1) items:
args -> tableconstructor . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args -> tableconstructor

State 58:
## Known stack suffix:
## bracket COLON ident args
## LR(1) items:
functioncall -> bracket COLON ident args . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production functioncall -> bracket COLON ident args

State 59:
## Known stack suffix:
## bracket key
## LR(1) items:
var -> bracket key . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK ASSIGN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var -> bracket key

State 60:
## Known stack suffix:
## bracket args
## LR(1) items:
functioncall -> bracket args . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production functioncall -> bracket args

State 61:
## Known stack suffix:
## exp MOD
## LR(1) items:
exp -> exp MOD . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 62
-- On bracket shift to state 52
## Reductions:

State 62:
## Known stack suffix:
## exp MOD exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp MOD exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> exp MOD exp
-- On UNTIL reduce production exp -> exp MOD exp
-- On THEN reduce production exp -> exp MOD exp
-- On SEMI reduce production exp -> exp MOD exp
-- On RPAR reduce production exp -> exp MOD exp
-- On RETURN reduce production exp -> exp MOD exp
-- On REPEAT reduce production exp -> exp MOD exp
-- On RCB reduce production exp -> exp MOD exp
-- On RB reduce production exp -> exp MOD exp
-- On PLUS reduce production exp -> exp MOD exp
-- On OR reduce production exp -> exp MOD exp
-- On NE reduce production exp -> exp MOD exp
-- On MULT reduce production exp -> exp MOD exp
-- On MOD reduce production exp -> exp MOD exp
-- On MINUS reduce production exp -> exp MOD exp
-- On LT reduce production exp -> exp MOD exp
-- On LPAR reduce production exp -> exp MOD exp
-- On LOCAL reduce production exp -> exp MOD exp
-- On LE reduce production exp -> exp MOD exp
-- On IF reduce production exp -> exp MOD exp
-- On IDENT reduce production exp -> exp MOD exp
-- On GT reduce production exp -> exp MOD exp
-- On GOTO reduce production exp -> exp MOD exp
-- On GE reduce production exp -> exp MOD exp
-- On FUNCTION reduce production exp -> exp MOD exp
-- On FOR reduce production exp -> exp MOD exp
-- On EQ reduce production exp -> exp MOD exp
-- On EOF reduce production exp -> exp MOD exp
-- On END reduce production exp -> exp MOD exp
-- On ELSEIF reduce production exp -> exp MOD exp
-- On ELSE reduce production exp -> exp MOD exp
-- On DO reduce production exp -> exp MOD exp
-- On DIV reduce production exp -> exp MOD exp
-- On DCOLON reduce production exp -> exp MOD exp
-- On COMMA reduce production exp -> exp MOD exp
-- On CAT reduce production exp -> exp MOD exp
-- On BREAK reduce production exp -> exp MOD exp
-- On AND reduce production exp -> exp MOD exp

State 63:
## Known stack suffix:
## exp DIV
## LR(1) items:
exp -> exp DIV . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 64
-- On bracket shift to state 52
## Reductions:

State 64:
## Known stack suffix:
## exp DIV exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp DIV exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> exp DIV exp
-- On UNTIL reduce production exp -> exp DIV exp
-- On THEN reduce production exp -> exp DIV exp
-- On SEMI reduce production exp -> exp DIV exp
-- On RPAR reduce production exp -> exp DIV exp
-- On RETURN reduce production exp -> exp DIV exp
-- On REPEAT reduce production exp -> exp DIV exp
-- On RCB reduce production exp -> exp DIV exp
-- On RB reduce production exp -> exp DIV exp
-- On PLUS reduce production exp -> exp DIV exp
-- On OR reduce production exp -> exp DIV exp
-- On NE reduce production exp -> exp DIV exp
-- On MULT reduce production exp -> exp DIV exp
-- On MOD reduce production exp -> exp DIV exp
-- On MINUS reduce production exp -> exp DIV exp
-- On LT reduce production exp -> exp DIV exp
-- On LPAR reduce production exp -> exp DIV exp
-- On LOCAL reduce production exp -> exp DIV exp
-- On LE reduce production exp -> exp DIV exp
-- On IF reduce production exp -> exp DIV exp
-- On IDENT reduce production exp -> exp DIV exp
-- On GT reduce production exp -> exp DIV exp
-- On GOTO reduce production exp -> exp DIV exp
-- On GE reduce production exp -> exp DIV exp
-- On FUNCTION reduce production exp -> exp DIV exp
-- On FOR reduce production exp -> exp DIV exp
-- On EQ reduce production exp -> exp DIV exp
-- On EOF reduce production exp -> exp DIV exp
-- On END reduce production exp -> exp DIV exp
-- On ELSEIF reduce production exp -> exp DIV exp
-- On ELSE reduce production exp -> exp DIV exp
-- On DO reduce production exp -> exp DIV exp
-- On DIV reduce production exp -> exp DIV exp
-- On DCOLON reduce production exp -> exp DIV exp
-- On COMMA reduce production exp -> exp DIV exp
-- On CAT reduce production exp -> exp DIV exp
-- On BREAK reduce production exp -> exp DIV exp
-- On AND reduce production exp -> exp DIV exp

State 65:
## Known stack suffix:
## exp OR
## LR(1) items:
exp -> exp OR . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 66
-- On bracket shift to state 52
## Reductions:

State 66:
## Known stack suffix:
## exp OR exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp OR exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On PLUS shift to state 46
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:
-- On WHILE reduce production exp -> exp OR exp
-- On UNTIL reduce production exp -> exp OR exp
-- On THEN reduce production exp -> exp OR exp
-- On SEMI reduce production exp -> exp OR exp
-- On RPAR reduce production exp -> exp OR exp
-- On RETURN reduce production exp -> exp OR exp
-- On REPEAT reduce production exp -> exp OR exp
-- On RCB reduce production exp -> exp OR exp
-- On RB reduce production exp -> exp OR exp
-- On OR reduce production exp -> exp OR exp
-- On LPAR reduce production exp -> exp OR exp
-- On LOCAL reduce production exp -> exp OR exp
-- On IF reduce production exp -> exp OR exp
-- On IDENT reduce production exp -> exp OR exp
-- On GOTO reduce production exp -> exp OR exp
-- On FUNCTION reduce production exp -> exp OR exp
-- On FOR reduce production exp -> exp OR exp
-- On EOF reduce production exp -> exp OR exp
-- On END reduce production exp -> exp OR exp
-- On ELSEIF reduce production exp -> exp OR exp
-- On ELSE reduce production exp -> exp OR exp
-- On DO reduce production exp -> exp OR exp
-- On DCOLON reduce production exp -> exp OR exp
-- On COMMA reduce production exp -> exp OR exp
-- On BREAK reduce production exp -> exp OR exp

State 67:
## Known stack suffix:
## exp NE
## LR(1) items:
exp -> exp NE . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 68
-- On bracket shift to state 52
## Reductions:

State 68:
## Known stack suffix:
## exp NE exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp NE exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On PLUS shift to state 46
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> exp NE exp
-- On UNTIL reduce production exp -> exp NE exp
-- On THEN reduce production exp -> exp NE exp
-- On SEMI reduce production exp -> exp NE exp
-- On RPAR reduce production exp -> exp NE exp
-- On RETURN reduce production exp -> exp NE exp
-- On REPEAT reduce production exp -> exp NE exp
-- On RCB reduce production exp -> exp NE exp
-- On RB reduce production exp -> exp NE exp
-- On OR reduce production exp -> exp NE exp
-- On NE reduce production exp -> exp NE exp
-- On LT reduce production exp -> exp NE exp
-- On LPAR reduce production exp -> exp NE exp
-- On LOCAL reduce production exp -> exp NE exp
-- On LE reduce production exp -> exp NE exp
-- On IF reduce production exp -> exp NE exp
-- On IDENT reduce production exp -> exp NE exp
-- On GT reduce production exp -> exp NE exp
-- On GOTO reduce production exp -> exp NE exp
-- On GE reduce production exp -> exp NE exp
-- On FUNCTION reduce production exp -> exp NE exp
-- On FOR reduce production exp -> exp NE exp
-- On EQ reduce production exp -> exp NE exp
-- On EOF reduce production exp -> exp NE exp
-- On END reduce production exp -> exp NE exp
-- On ELSEIF reduce production exp -> exp NE exp
-- On ELSE reduce production exp -> exp NE exp
-- On DO reduce production exp -> exp NE exp
-- On DCOLON reduce production exp -> exp NE exp
-- On COMMA reduce production exp -> exp NE exp
-- On BREAK reduce production exp -> exp NE exp
-- On AND reduce production exp -> exp NE exp

State 69:
## Known stack suffix:
## exp MINUS
## LR(1) items:
exp -> exp MINUS . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 70
-- On bracket shift to state 52
## Reductions:

State 70:
## Known stack suffix:
## exp MINUS exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp MINUS exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On DIV shift to state 63
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> exp MINUS exp
-- On UNTIL reduce production exp -> exp MINUS exp
-- On THEN reduce production exp -> exp MINUS exp
-- On SEMI reduce production exp -> exp MINUS exp
-- On RPAR reduce production exp -> exp MINUS exp
-- On RETURN reduce production exp -> exp MINUS exp
-- On REPEAT reduce production exp -> exp MINUS exp
-- On RCB reduce production exp -> exp MINUS exp
-- On RB reduce production exp -> exp MINUS exp
-- On PLUS reduce production exp -> exp MINUS exp
-- On OR reduce production exp -> exp MINUS exp
-- On NE reduce production exp -> exp MINUS exp
-- On MINUS reduce production exp -> exp MINUS exp
-- On LT reduce production exp -> exp MINUS exp
-- On LPAR reduce production exp -> exp MINUS exp
-- On LOCAL reduce production exp -> exp MINUS exp
-- On LE reduce production exp -> exp MINUS exp
-- On IF reduce production exp -> exp MINUS exp
-- On IDENT reduce production exp -> exp MINUS exp
-- On GT reduce production exp -> exp MINUS exp
-- On GOTO reduce production exp -> exp MINUS exp
-- On GE reduce production exp -> exp MINUS exp
-- On FUNCTION reduce production exp -> exp MINUS exp
-- On FOR reduce production exp -> exp MINUS exp
-- On EQ reduce production exp -> exp MINUS exp
-- On EOF reduce production exp -> exp MINUS exp
-- On END reduce production exp -> exp MINUS exp
-- On ELSEIF reduce production exp -> exp MINUS exp
-- On ELSE reduce production exp -> exp MINUS exp
-- On DO reduce production exp -> exp MINUS exp
-- On DCOLON reduce production exp -> exp MINUS exp
-- On COMMA reduce production exp -> exp MINUS exp
-- On CAT reduce production exp -> exp MINUS exp
-- On BREAK reduce production exp -> exp MINUS exp
-- On AND reduce production exp -> exp MINUS exp

State 71:
## Known stack suffix:
## exp CAT
## LR(1) items:
exp -> exp CAT . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 72
-- On bracket shift to state 52
## Reductions:

State 72:
## Known stack suffix:
## exp CAT exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp CAT exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On PLUS shift to state 46
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> exp CAT exp
-- On UNTIL reduce production exp -> exp CAT exp
-- On THEN reduce production exp -> exp CAT exp
-- On SEMI reduce production exp -> exp CAT exp
-- On RPAR reduce production exp -> exp CAT exp
-- On RETURN reduce production exp -> exp CAT exp
-- On REPEAT reduce production exp -> exp CAT exp
-- On RCB reduce production exp -> exp CAT exp
-- On RB reduce production exp -> exp CAT exp
-- On OR reduce production exp -> exp CAT exp
-- On NE reduce production exp -> exp CAT exp
-- On LT reduce production exp -> exp CAT exp
-- On LPAR reduce production exp -> exp CAT exp
-- On LOCAL reduce production exp -> exp CAT exp
-- On LE reduce production exp -> exp CAT exp
-- On IF reduce production exp -> exp CAT exp
-- On IDENT reduce production exp -> exp CAT exp
-- On GT reduce production exp -> exp CAT exp
-- On GOTO reduce production exp -> exp CAT exp
-- On GE reduce production exp -> exp CAT exp
-- On FUNCTION reduce production exp -> exp CAT exp
-- On FOR reduce production exp -> exp CAT exp
-- On EQ reduce production exp -> exp CAT exp
-- On EOF reduce production exp -> exp CAT exp
-- On END reduce production exp -> exp CAT exp
-- On ELSEIF reduce production exp -> exp CAT exp
-- On ELSE reduce production exp -> exp CAT exp
-- On DO reduce production exp -> exp CAT exp
-- On DCOLON reduce production exp -> exp CAT exp
-- On COMMA reduce production exp -> exp CAT exp
-- On BREAK reduce production exp -> exp CAT exp
-- On AND reduce production exp -> exp CAT exp

State 73:
## Known stack suffix:
## exp LT
## LR(1) items:
exp -> exp LT . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 74
-- On bracket shift to state 52
## Reductions:

State 74:
## Known stack suffix:
## exp LT exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp LT exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On PLUS shift to state 46
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> exp LT exp
-- On UNTIL reduce production exp -> exp LT exp
-- On THEN reduce production exp -> exp LT exp
-- On SEMI reduce production exp -> exp LT exp
-- On RPAR reduce production exp -> exp LT exp
-- On RETURN reduce production exp -> exp LT exp
-- On REPEAT reduce production exp -> exp LT exp
-- On RCB reduce production exp -> exp LT exp
-- On RB reduce production exp -> exp LT exp
-- On OR reduce production exp -> exp LT exp
-- On NE reduce production exp -> exp LT exp
-- On LT reduce production exp -> exp LT exp
-- On LPAR reduce production exp -> exp LT exp
-- On LOCAL reduce production exp -> exp LT exp
-- On LE reduce production exp -> exp LT exp
-- On IF reduce production exp -> exp LT exp
-- On IDENT reduce production exp -> exp LT exp
-- On GT reduce production exp -> exp LT exp
-- On GOTO reduce production exp -> exp LT exp
-- On GE reduce production exp -> exp LT exp
-- On FUNCTION reduce production exp -> exp LT exp
-- On FOR reduce production exp -> exp LT exp
-- On EQ reduce production exp -> exp LT exp
-- On EOF reduce production exp -> exp LT exp
-- On END reduce production exp -> exp LT exp
-- On ELSEIF reduce production exp -> exp LT exp
-- On ELSE reduce production exp -> exp LT exp
-- On DO reduce production exp -> exp LT exp
-- On DCOLON reduce production exp -> exp LT exp
-- On COMMA reduce production exp -> exp LT exp
-- On BREAK reduce production exp -> exp LT exp
-- On AND reduce production exp -> exp LT exp

State 75:
## Known stack suffix:
## exp LE
## LR(1) items:
exp -> exp LE . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 76
-- On bracket shift to state 52
## Reductions:

State 76:
## Known stack suffix:
## exp LE exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp LE exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On PLUS shift to state 46
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> exp LE exp
-- On UNTIL reduce production exp -> exp LE exp
-- On THEN reduce production exp -> exp LE exp
-- On SEMI reduce production exp -> exp LE exp
-- On RPAR reduce production exp -> exp LE exp
-- On RETURN reduce production exp -> exp LE exp
-- On REPEAT reduce production exp -> exp LE exp
-- On RCB reduce production exp -> exp LE exp
-- On RB reduce production exp -> exp LE exp
-- On OR reduce production exp -> exp LE exp
-- On NE reduce production exp -> exp LE exp
-- On LT reduce production exp -> exp LE exp
-- On LPAR reduce production exp -> exp LE exp
-- On LOCAL reduce production exp -> exp LE exp
-- On LE reduce production exp -> exp LE exp
-- On IF reduce production exp -> exp LE exp
-- On IDENT reduce production exp -> exp LE exp
-- On GT reduce production exp -> exp LE exp
-- On GOTO reduce production exp -> exp LE exp
-- On GE reduce production exp -> exp LE exp
-- On FUNCTION reduce production exp -> exp LE exp
-- On FOR reduce production exp -> exp LE exp
-- On EQ reduce production exp -> exp LE exp
-- On EOF reduce production exp -> exp LE exp
-- On END reduce production exp -> exp LE exp
-- On ELSEIF reduce production exp -> exp LE exp
-- On ELSE reduce production exp -> exp LE exp
-- On DO reduce production exp -> exp LE exp
-- On DCOLON reduce production exp -> exp LE exp
-- On COMMA reduce production exp -> exp LE exp
-- On BREAK reduce production exp -> exp LE exp
-- On AND reduce production exp -> exp LE exp

State 77:
## Known stack suffix:
## exp GT
## LR(1) items:
exp -> exp GT . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 78
-- On bracket shift to state 52
## Reductions:

State 78:
## Known stack suffix:
## exp GT exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp GT exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On PLUS shift to state 46
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> exp GT exp
-- On UNTIL reduce production exp -> exp GT exp
-- On THEN reduce production exp -> exp GT exp
-- On SEMI reduce production exp -> exp GT exp
-- On RPAR reduce production exp -> exp GT exp
-- On RETURN reduce production exp -> exp GT exp
-- On REPEAT reduce production exp -> exp GT exp
-- On RCB reduce production exp -> exp GT exp
-- On RB reduce production exp -> exp GT exp
-- On OR reduce production exp -> exp GT exp
-- On NE reduce production exp -> exp GT exp
-- On LT reduce production exp -> exp GT exp
-- On LPAR reduce production exp -> exp GT exp
-- On LOCAL reduce production exp -> exp GT exp
-- On LE reduce production exp -> exp GT exp
-- On IF reduce production exp -> exp GT exp
-- On IDENT reduce production exp -> exp GT exp
-- On GT reduce production exp -> exp GT exp
-- On GOTO reduce production exp -> exp GT exp
-- On GE reduce production exp -> exp GT exp
-- On FUNCTION reduce production exp -> exp GT exp
-- On FOR reduce production exp -> exp GT exp
-- On EQ reduce production exp -> exp GT exp
-- On EOF reduce production exp -> exp GT exp
-- On END reduce production exp -> exp GT exp
-- On ELSEIF reduce production exp -> exp GT exp
-- On ELSE reduce production exp -> exp GT exp
-- On DO reduce production exp -> exp GT exp
-- On DCOLON reduce production exp -> exp GT exp
-- On COMMA reduce production exp -> exp GT exp
-- On BREAK reduce production exp -> exp GT exp
-- On AND reduce production exp -> exp GT exp

State 79:
## Known stack suffix:
## exp GE
## LR(1) items:
exp -> exp GE . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 80
-- On bracket shift to state 52
## Reductions:

State 80:
## Known stack suffix:
## exp GE exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp GE exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On PLUS shift to state 46
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> exp GE exp
-- On UNTIL reduce production exp -> exp GE exp
-- On THEN reduce production exp -> exp GE exp
-- On SEMI reduce production exp -> exp GE exp
-- On RPAR reduce production exp -> exp GE exp
-- On RETURN reduce production exp -> exp GE exp
-- On REPEAT reduce production exp -> exp GE exp
-- On RCB reduce production exp -> exp GE exp
-- On RB reduce production exp -> exp GE exp
-- On OR reduce production exp -> exp GE exp
-- On NE reduce production exp -> exp GE exp
-- On LT reduce production exp -> exp GE exp
-- On LPAR reduce production exp -> exp GE exp
-- On LOCAL reduce production exp -> exp GE exp
-- On LE reduce production exp -> exp GE exp
-- On IF reduce production exp -> exp GE exp
-- On IDENT reduce production exp -> exp GE exp
-- On GT reduce production exp -> exp GE exp
-- On GOTO reduce production exp -> exp GE exp
-- On GE reduce production exp -> exp GE exp
-- On FUNCTION reduce production exp -> exp GE exp
-- On FOR reduce production exp -> exp GE exp
-- On EQ reduce production exp -> exp GE exp
-- On EOF reduce production exp -> exp GE exp
-- On END reduce production exp -> exp GE exp
-- On ELSEIF reduce production exp -> exp GE exp
-- On ELSE reduce production exp -> exp GE exp
-- On DO reduce production exp -> exp GE exp
-- On DCOLON reduce production exp -> exp GE exp
-- On COMMA reduce production exp -> exp GE exp
-- On BREAK reduce production exp -> exp GE exp
-- On AND reduce production exp -> exp GE exp

State 81:
## Known stack suffix:
## exp EQ
## LR(1) items:
exp -> exp EQ . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 82
-- On bracket shift to state 52
## Reductions:

State 82:
## Known stack suffix:
## exp EQ exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp EQ exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On PLUS shift to state 46
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> exp EQ exp
-- On UNTIL reduce production exp -> exp EQ exp
-- On THEN reduce production exp -> exp EQ exp
-- On SEMI reduce production exp -> exp EQ exp
-- On RPAR reduce production exp -> exp EQ exp
-- On RETURN reduce production exp -> exp EQ exp
-- On REPEAT reduce production exp -> exp EQ exp
-- On RCB reduce production exp -> exp EQ exp
-- On RB reduce production exp -> exp EQ exp
-- On OR reduce production exp -> exp EQ exp
-- On NE reduce production exp -> exp EQ exp
-- On LT reduce production exp -> exp EQ exp
-- On LPAR reduce production exp -> exp EQ exp
-- On LOCAL reduce production exp -> exp EQ exp
-- On LE reduce production exp -> exp EQ exp
-- On IF reduce production exp -> exp EQ exp
-- On IDENT reduce production exp -> exp EQ exp
-- On GT reduce production exp -> exp EQ exp
-- On GOTO reduce production exp -> exp EQ exp
-- On GE reduce production exp -> exp EQ exp
-- On FUNCTION reduce production exp -> exp EQ exp
-- On FOR reduce production exp -> exp EQ exp
-- On EQ reduce production exp -> exp EQ exp
-- On EOF reduce production exp -> exp EQ exp
-- On END reduce production exp -> exp EQ exp
-- On ELSEIF reduce production exp -> exp EQ exp
-- On ELSE reduce production exp -> exp EQ exp
-- On DO reduce production exp -> exp EQ exp
-- On DCOLON reduce production exp -> exp EQ exp
-- On COMMA reduce production exp -> exp EQ exp
-- On BREAK reduce production exp -> exp EQ exp
-- On AND reduce production exp -> exp EQ exp

State 83:
## Known stack suffix:
## exp AND
## LR(1) items:
exp -> exp AND . exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 84
-- On bracket shift to state 52
## Reductions:

State 84:
## Known stack suffix:
## exp AND exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp AND exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On PLUS shift to state 46
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> exp AND exp
-- On UNTIL reduce production exp -> exp AND exp
-- On THEN reduce production exp -> exp AND exp
-- On SEMI reduce production exp -> exp AND exp
-- On RPAR reduce production exp -> exp AND exp
-- On RETURN reduce production exp -> exp AND exp
-- On REPEAT reduce production exp -> exp AND exp
-- On RCB reduce production exp -> exp AND exp
-- On RB reduce production exp -> exp AND exp
-- On OR reduce production exp -> exp AND exp
-- On LPAR reduce production exp -> exp AND exp
-- On LOCAL reduce production exp -> exp AND exp
-- On IF reduce production exp -> exp AND exp
-- On IDENT reduce production exp -> exp AND exp
-- On GOTO reduce production exp -> exp AND exp
-- On FUNCTION reduce production exp -> exp AND exp
-- On FOR reduce production exp -> exp AND exp
-- On EOF reduce production exp -> exp AND exp
-- On END reduce production exp -> exp AND exp
-- On ELSEIF reduce production exp -> exp AND exp
-- On ELSE reduce production exp -> exp AND exp
-- On DO reduce production exp -> exp AND exp
-- On DCOLON reduce production exp -> exp AND exp
-- On COMMA reduce production exp -> exp AND exp
-- On BREAK reduce production exp -> exp AND exp
-- On AND reduce production exp -> exp AND exp

State 85:
## Known stack suffix:
## functioncall COLON
## LR(1) items:
functioncall -> functioncall COLON . ident args [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
-- On IDENT shift to state 12
-- On ident shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## functioncall COLON ident
## LR(1) items:
functioncall -> functioncall COLON ident . args [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 35
-- On LPAR shift to state 36
-- On LCB shift to state 9
-- On tableconstructor shift to state 57
-- On args shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## functioncall COLON ident args
## LR(1) items:
functioncall -> functioncall COLON ident args . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production functioncall -> functioncall COLON ident args

State 88:
## Known stack suffix:
## functioncall key
## LR(1) items:
var -> functioncall key . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK ASSIGN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var -> functioncall key

State 89:
## Known stack suffix:
## functioncall args
## LR(1) items:
functioncall -> functioncall args . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production functioncall -> functioncall args

State 90:
## Known stack suffix:
## LPAR explist
## LR(1) items:
args -> LPAR explist . RPAR [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
explist -> explist . COMMA exp [ RPAR COMMA ]
## Transitions:
-- On RPAR shift to state 91
-- On COMMA shift to state 92
## Reductions:

State 91:
## Known stack suffix:
## LPAR explist RPAR
## LR(1) items:
args -> LPAR explist RPAR . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args -> LPAR explist RPAR

State 92:
## Known stack suffix:
## explist COMMA
## LR(1) items:
explist -> explist COMMA . exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON COMMA BREAK ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 93
-- On bracket shift to state 52
## Reductions:

State 93:
## Known stack suffix:
## explist COMMA exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
explist -> explist COMMA exp . [ WHILE UNTIL SEMI RPAR RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON COMMA BREAK ]
## Transitions:
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:
-- On WHILE reduce production explist -> explist COMMA exp
-- On UNTIL reduce production explist -> explist COMMA exp
-- On SEMI reduce production explist -> explist COMMA exp
-- On RPAR reduce production explist -> explist COMMA exp
-- On RETURN reduce production explist -> explist COMMA exp
-- On REPEAT reduce production explist -> explist COMMA exp
-- On LPAR reduce production explist -> explist COMMA exp
-- On LOCAL reduce production explist -> explist COMMA exp
-- On IF reduce production explist -> explist COMMA exp
-- On IDENT reduce production explist -> explist COMMA exp
-- On GOTO reduce production explist -> explist COMMA exp
-- On FUNCTION reduce production explist -> explist COMMA exp
-- On FOR reduce production explist -> explist COMMA exp
-- On EOF reduce production explist -> explist COMMA exp
-- On END reduce production explist -> explist COMMA exp
-- On ELSEIF reduce production explist -> explist COMMA exp
-- On ELSE reduce production explist -> explist COMMA exp
-- On DO reduce production explist -> explist COMMA exp
-- On DCOLON reduce production explist -> explist COMMA exp
-- On COMMA reduce production explist -> explist COMMA exp
-- On BREAK reduce production explist -> explist COMMA exp

State 94:
## Known stack suffix:
## exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL SEMI RPAR RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
explist -> exp . [ WHILE UNTIL SEMI RPAR RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON COMMA BREAK ]
## Transitions:
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:
-- On WHILE reduce production explist -> exp
-- On UNTIL reduce production explist -> exp
-- On SEMI reduce production explist -> exp
-- On RPAR reduce production explist -> exp
-- On RETURN reduce production explist -> exp
-- On REPEAT reduce production explist -> exp
-- On LPAR reduce production explist -> exp
-- On LOCAL reduce production explist -> exp
-- On IF reduce production explist -> exp
-- On IDENT reduce production explist -> exp
-- On GOTO reduce production explist -> exp
-- On FUNCTION reduce production explist -> exp
-- On FOR reduce production explist -> exp
-- On EOF reduce production explist -> exp
-- On END reduce production explist -> exp
-- On ELSEIF reduce production explist -> exp
-- On ELSE reduce production explist -> exp
-- On DO reduce production explist -> exp
-- On DCOLON reduce production explist -> exp
-- On COMMA reduce production explist -> exp
-- On BREAK reduce production explist -> exp

State 95:
## Known stack suffix:
## var COLON
## LR(1) items:
functioncall -> var COLON . ident args [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
-- On IDENT shift to state 12
-- On ident shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## var COLON ident
## LR(1) items:
functioncall -> var COLON ident . args [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
-- On STR_CONST shift to state 35
-- On LPAR shift to state 36
-- On LCB shift to state 9
-- On tableconstructor shift to state 57
-- On args shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## var COLON ident args
## LR(1) items:
functioncall -> var COLON ident args . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production functioncall -> var COLON ident args

State 98:
## Known stack suffix:
## var key
## LR(1) items:
var -> var key . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK ASSIGN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var -> var key

State 99:
## Known stack suffix:
## var args
## LR(1) items:
functioncall -> var args . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production functioncall -> var args

State 100:
## Known stack suffix:
## HASH exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> HASH exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> HASH exp
-- On UNTIL reduce production exp -> HASH exp
-- On THEN reduce production exp -> HASH exp
-- On SEMI reduce production exp -> HASH exp
-- On RPAR reduce production exp -> HASH exp
-- On RETURN reduce production exp -> HASH exp
-- On REPEAT reduce production exp -> HASH exp
-- On RCB reduce production exp -> HASH exp
-- On RB reduce production exp -> HASH exp
-- On PLUS reduce production exp -> HASH exp
-- On OR reduce production exp -> HASH exp
-- On NE reduce production exp -> HASH exp
-- On MULT reduce production exp -> HASH exp
-- On MOD reduce production exp -> HASH exp
-- On MINUS reduce production exp -> HASH exp
-- On LT reduce production exp -> HASH exp
-- On LPAR reduce production exp -> HASH exp
-- On LOCAL reduce production exp -> HASH exp
-- On LE reduce production exp -> HASH exp
-- On IF reduce production exp -> HASH exp
-- On IDENT reduce production exp -> HASH exp
-- On GT reduce production exp -> HASH exp
-- On GOTO reduce production exp -> HASH exp
-- On GE reduce production exp -> HASH exp
-- On FUNCTION reduce production exp -> HASH exp
-- On FOR reduce production exp -> HASH exp
-- On EQ reduce production exp -> HASH exp
-- On EOF reduce production exp -> HASH exp
-- On END reduce production exp -> HASH exp
-- On ELSEIF reduce production exp -> HASH exp
-- On ELSE reduce production exp -> HASH exp
-- On DO reduce production exp -> HASH exp
-- On DIV reduce production exp -> HASH exp
-- On DCOLON reduce production exp -> HASH exp
-- On COMMA reduce production exp -> HASH exp
-- On CAT reduce production exp -> HASH exp
-- On BREAK reduce production exp -> HASH exp
-- On AND reduce production exp -> HASH exp

State 101:
## Known stack suffix:
## LB exp
## LR(1) items:
exp -> exp . OR exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . AND exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . LT exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . GT exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . LE exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . GE exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . NE exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . EQ exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . CAT exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . PLUS exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MINUS exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MULT exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . DIV exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MOD exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . CARAT exp [ RB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
field -> LB exp . RB ASSIGN exp [ SEMI RCB COMMA ]
## Transitions:
-- On RB shift to state 102
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:

State 102:
## Known stack suffix:
## LB exp RB
## LR(1) items:
field -> LB exp RB . ASSIGN exp [ SEMI RCB COMMA ]
## Transitions:
-- On ASSIGN shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## LB exp RB ASSIGN
## LR(1) items:
field -> LB exp RB ASSIGN . exp [ SEMI RCB COMMA ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 104
-- On bracket shift to state 52
## Reductions:

State 104:
## Known stack suffix:
## LB exp RB ASSIGN exp
## LR(1) items:
exp -> exp . OR exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . AND exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . LT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . GT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . LE exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . GE exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . NE exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . EQ exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . CAT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . PLUS exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . MINUS exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . MULT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . DIV exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . MOD exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . CARAT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
field -> LB exp RB ASSIGN exp . [ SEMI RCB COMMA ]
## Transitions:
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:
-- On SEMI reduce production field -> LB exp RB ASSIGN exp
-- On RCB reduce production field -> LB exp RB ASSIGN exp
-- On COMMA reduce production field -> LB exp RB ASSIGN exp

State 105:
## Known stack suffix:
## ident
## LR(1) items:
field -> ident . ASSIGN exp [ SEMI RCB COMMA ]
var -> ident . [ STR_CONST SEMI RCB PLUS OR NE MULT MOD MINUS LT LPAR LE LCB LB GT GE EQ DOT DIV COMMA COLON CAT CARAT AND ]
## Transitions:
-- On ASSIGN shift to state 106
## Reductions:
-- On STR_CONST reduce production var -> ident
-- On SEMI reduce production var -> ident
-- On RCB reduce production var -> ident
-- On PLUS reduce production var -> ident
-- On OR reduce production var -> ident
-- On NE reduce production var -> ident
-- On MULT reduce production var -> ident
-- On MOD reduce production var -> ident
-- On MINUS reduce production var -> ident
-- On LT reduce production var -> ident
-- On LPAR reduce production var -> ident
-- On LE reduce production var -> ident
-- On LCB reduce production var -> ident
-- On LB reduce production var -> ident
-- On GT reduce production var -> ident
-- On GE reduce production var -> ident
-- On EQ reduce production var -> ident
-- On DOT reduce production var -> ident
-- On DIV reduce production var -> ident
-- On COMMA reduce production var -> ident
-- On COLON reduce production var -> ident
-- On CAT reduce production var -> ident
-- On CARAT reduce production var -> ident
-- On AND reduce production var -> ident

State 106:
## Known stack suffix:
## ident ASSIGN
## LR(1) items:
field -> ident ASSIGN . exp [ SEMI RCB COMMA ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 107
-- On bracket shift to state 52
## Reductions:

State 107:
## Known stack suffix:
## ident ASSIGN exp
## LR(1) items:
exp -> exp . OR exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . AND exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . LT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . GT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . LE exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . GE exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . NE exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . EQ exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . CAT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . PLUS exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . MINUS exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . MULT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . DIV exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . MOD exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . CARAT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
field -> ident ASSIGN exp . [ SEMI RCB COMMA ]
## Transitions:
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:
-- On SEMI reduce production field -> ident ASSIGN exp
-- On RCB reduce production field -> ident ASSIGN exp
-- On COMMA reduce production field -> ident ASSIGN exp

State 108:
## Known stack suffix:
## fields
## LR(1) items:
fieldlist -> fields . [ RCB ]
fieldlist -> fields . fieldsep [ RCB ]
fields -> fields . fieldsep field [ SEMI RCB COMMA ]
## Transitions:
-- On SEMI shift to state 109
-- On COMMA shift to state 110
-- On fieldsep shift to state 111
## Reductions:
-- On RCB reduce production fieldlist -> fields

State 109:
## Known stack suffix:
## SEMI
## LR(1) items:
fieldsep -> SEMI . [ STR_CONST RCB NUM_CONST NOT MINUS LPAR LCB LB IDENT HASH FUNCTION ELLIPSIS BOOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldsep -> SEMI

State 110:
## Known stack suffix:
## COMMA
## LR(1) items:
fieldsep -> COMMA . [ STR_CONST RCB NUM_CONST NOT MINUS LPAR LCB LB IDENT HASH FUNCTION ELLIPSIS BOOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldsep -> COMMA

State 111:
## Known stack suffix:
## fields fieldsep
## LR(1) items:
fieldlist -> fields fieldsep . [ RCB ]
fields -> fields fieldsep . field [ SEMI RCB COMMA ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On LB shift to state 11
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 105
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On field shift to state 112
-- On exp shift to state 113
-- On bracket shift to state 52
## Reductions:
-- On RCB reduce production fieldlist -> fields fieldsep

State 112:
## Known stack suffix:
## fields fieldsep field
## LR(1) items:
fields -> fields fieldsep field . [ SEMI RCB COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fields -> fields fieldsep field

State 113:
## Known stack suffix:
## exp
## LR(1) items:
exp -> exp . OR exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . AND exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . LT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . GT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . LE exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . GE exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . NE exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . EQ exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . CAT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . PLUS exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . MINUS exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . MULT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . DIV exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . MOD exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . CARAT exp [ SEMI RCB PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
field -> exp . [ SEMI RCB COMMA ]
## Transitions:
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:
-- On SEMI reduce production field -> exp
-- On RCB reduce production field -> exp
-- On COMMA reduce production field -> exp

State 114:
## Known stack suffix:
## LCB fieldlist
## LR(1) items:
tableconstructor -> LCB fieldlist . RCB [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
-- On RCB shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## LCB fieldlist RCB
## LR(1) items:
tableconstructor -> LCB fieldlist RCB . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tableconstructor -> LCB fieldlist RCB

State 116:
## Known stack suffix:
## field
## LR(1) items:
fields -> field . [ SEMI RCB COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fields -> field

State 117:
## Known stack suffix:
## LPAR exp
## LR(1) items:
bracket -> LPAR exp . RPAR [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
exp -> exp . OR exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . AND exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . LT exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . GT exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . LE exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . GE exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . NE exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . EQ exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . CAT exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . PLUS exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MINUS exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MULT exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . DIV exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MOD exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . CARAT exp [ RPAR PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
## Transitions:
-- On RPAR shift to state 118
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:

State 118:
## Known stack suffix:
## LPAR exp RPAR
## LR(1) items:
bracket -> LPAR exp RPAR . [ WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bracket -> LPAR exp RPAR

State 119:
## Known stack suffix:
## MINUS exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> MINUS exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> MINUS exp
-- On UNTIL reduce production exp -> MINUS exp
-- On THEN reduce production exp -> MINUS exp
-- On SEMI reduce production exp -> MINUS exp
-- On RPAR reduce production exp -> MINUS exp
-- On RETURN reduce production exp -> MINUS exp
-- On REPEAT reduce production exp -> MINUS exp
-- On RCB reduce production exp -> MINUS exp
-- On RB reduce production exp -> MINUS exp
-- On PLUS reduce production exp -> MINUS exp
-- On OR reduce production exp -> MINUS exp
-- On NE reduce production exp -> MINUS exp
-- On MULT reduce production exp -> MINUS exp
-- On MOD reduce production exp -> MINUS exp
-- On MINUS reduce production exp -> MINUS exp
-- On LT reduce production exp -> MINUS exp
-- On LPAR reduce production exp -> MINUS exp
-- On LOCAL reduce production exp -> MINUS exp
-- On LE reduce production exp -> MINUS exp
-- On IF reduce production exp -> MINUS exp
-- On IDENT reduce production exp -> MINUS exp
-- On GT reduce production exp -> MINUS exp
-- On GOTO reduce production exp -> MINUS exp
-- On GE reduce production exp -> MINUS exp
-- On FUNCTION reduce production exp -> MINUS exp
-- On FOR reduce production exp -> MINUS exp
-- On EQ reduce production exp -> MINUS exp
-- On EOF reduce production exp -> MINUS exp
-- On END reduce production exp -> MINUS exp
-- On ELSEIF reduce production exp -> MINUS exp
-- On ELSE reduce production exp -> MINUS exp
-- On DO reduce production exp -> MINUS exp
-- On DIV reduce production exp -> MINUS exp
-- On DCOLON reduce production exp -> MINUS exp
-- On COMMA reduce production exp -> MINUS exp
-- On CAT reduce production exp -> MINUS exp
-- On BREAK reduce production exp -> MINUS exp
-- On AND reduce production exp -> MINUS exp

State 120:
## Known stack suffix:
## NOT exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
exp -> NOT exp . [ WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND ]
## Transitions:
-- On CARAT shift to state 50
## Reductions:
-- On WHILE reduce production exp -> NOT exp
-- On UNTIL reduce production exp -> NOT exp
-- On THEN reduce production exp -> NOT exp
-- On SEMI reduce production exp -> NOT exp
-- On RPAR reduce production exp -> NOT exp
-- On RETURN reduce production exp -> NOT exp
-- On REPEAT reduce production exp -> NOT exp
-- On RCB reduce production exp -> NOT exp
-- On RB reduce production exp -> NOT exp
-- On PLUS reduce production exp -> NOT exp
-- On OR reduce production exp -> NOT exp
-- On NE reduce production exp -> NOT exp
-- On MULT reduce production exp -> NOT exp
-- On MOD reduce production exp -> NOT exp
-- On MINUS reduce production exp -> NOT exp
-- On LT reduce production exp -> NOT exp
-- On LPAR reduce production exp -> NOT exp
-- On LOCAL reduce production exp -> NOT exp
-- On LE reduce production exp -> NOT exp
-- On IF reduce production exp -> NOT exp
-- On IDENT reduce production exp -> NOT exp
-- On GT reduce production exp -> NOT exp
-- On GOTO reduce production exp -> NOT exp
-- On GE reduce production exp -> NOT exp
-- On FUNCTION reduce production exp -> NOT exp
-- On FOR reduce production exp -> NOT exp
-- On EQ reduce production exp -> NOT exp
-- On EOF reduce production exp -> NOT exp
-- On END reduce production exp -> NOT exp
-- On ELSEIF reduce production exp -> NOT exp
-- On ELSE reduce production exp -> NOT exp
-- On DO reduce production exp -> NOT exp
-- On DIV reduce production exp -> NOT exp
-- On DCOLON reduce production exp -> NOT exp
-- On COMMA reduce production exp -> NOT exp
-- On CAT reduce production exp -> NOT exp
-- On BREAK reduce production exp -> NOT exp
-- On AND reduce production exp -> NOT exp

State 121:
## Known stack suffix:
## WHILE exp
## LR(1) items:
exp -> exp . OR exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . AND exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . LT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . GT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . LE exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . GE exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . NE exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . EQ exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . CAT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . PLUS exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . MINUS exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . MULT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . DIV exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . MOD exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . CARAT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
stat -> WHILE exp . DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DO shift to state 122
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:

State 122:
## Known stack suffix:
## WHILE exp DO
## LR(1) items:
stat -> WHILE exp DO . block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On SEMI shift to state 1
-- On statlist shift to state 2
-- On chunk shift to state 17
-- On block shift to state 123
-- On OSC shift to state 20
## Reductions:
-- On WHILE reduce production OSC ->
-- On RETURN reduce production OSC ->
-- On REPEAT reduce production OSC ->
-- On LPAR reduce production OSC ->
-- On LOCAL reduce production OSC ->
-- On IF reduce production OSC ->
-- On IDENT reduce production OSC ->
-- On GOTO reduce production OSC ->
-- On FUNCTION reduce production OSC ->
-- On FOR reduce production OSC ->
-- On END reduce production OSC ->
-- On DO reduce production OSC ->
-- On DCOLON reduce production OSC ->
-- On BREAK reduce production OSC ->

State 123:
## Known stack suffix:
## WHILE exp DO block
## LR(1) items:
stat -> WHILE exp DO block . END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On END shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## WHILE exp DO block END
## LR(1) items:
stat -> WHILE exp DO block END . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stat -> WHILE exp DO block END

State 125:
## Known stack suffix:
## RETURN
## LR(1) items:
retstat -> RETURN . [ UNTIL SEMI EOF END ELSEIF ELSE ]
retstat -> RETURN . explist [ UNTIL SEMI EOF END ELSEIF ELSE ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On explist shift to state 126
-- On exp shift to state 94
-- On bracket shift to state 52
## Reductions:
-- On UNTIL reduce production retstat -> RETURN
-- On SEMI reduce production retstat -> RETURN
-- On EOF reduce production retstat -> RETURN
-- On END reduce production retstat -> RETURN
-- On ELSEIF reduce production retstat -> RETURN
-- On ELSE reduce production retstat -> RETURN

State 126:
## Known stack suffix:
## RETURN explist
## LR(1) items:
explist -> explist . COMMA exp [ UNTIL SEMI EOF END ELSEIF ELSE COMMA ]
retstat -> RETURN explist . [ UNTIL SEMI EOF END ELSEIF ELSE ]
## Transitions:
-- On COMMA shift to state 92
## Reductions:
-- On UNTIL reduce production retstat -> RETURN explist
-- On SEMI reduce production retstat -> RETURN explist
-- On EOF reduce production retstat -> RETURN explist
-- On END reduce production retstat -> RETURN explist
-- On ELSEIF reduce production retstat -> RETURN explist
-- On ELSE reduce production retstat -> RETURN explist

State 127:
## Known stack suffix:
## REPEAT
## LR(1) items:
stat -> REPEAT . block UNTIL exp [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On SEMI shift to state 1
-- On statlist shift to state 2
-- On chunk shift to state 17
-- On block shift to state 128
-- On OSC shift to state 20
## Reductions:
-- On WHILE reduce production OSC ->
-- On UNTIL reduce production OSC ->
-- On RETURN reduce production OSC ->
-- On REPEAT reduce production OSC ->
-- On LPAR reduce production OSC ->
-- On LOCAL reduce production OSC ->
-- On IF reduce production OSC ->
-- On IDENT reduce production OSC ->
-- On GOTO reduce production OSC ->
-- On FUNCTION reduce production OSC ->
-- On FOR reduce production OSC ->
-- On DO reduce production OSC ->
-- On DCOLON reduce production OSC ->
-- On BREAK reduce production OSC ->

State 128:
## Known stack suffix:
## REPEAT block
## LR(1) items:
stat -> REPEAT block . UNTIL exp [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On UNTIL shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## REPEAT block UNTIL
## LR(1) items:
stat -> REPEAT block UNTIL . exp [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 130
-- On bracket shift to state 52
## Reductions:

State 130:
## Known stack suffix:
## REPEAT block UNTIL exp
## LR(1) items:
exp -> exp . OR exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
exp -> exp . AND exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
exp -> exp . LT exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
exp -> exp . GT exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
exp -> exp . LE exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
exp -> exp . GE exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
exp -> exp . NE exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
exp -> exp . EQ exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
exp -> exp . CAT exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
exp -> exp . PLUS exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
exp -> exp . MINUS exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
exp -> exp . MULT exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
exp -> exp . DIV exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
exp -> exp . MOD exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
exp -> exp . CARAT exp [ WHILE UNTIL SEMI RETURN REPEAT PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON CAT CARAT BREAK AND ]
stat -> REPEAT block UNTIL exp . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:
-- On WHILE reduce production stat -> REPEAT block UNTIL exp
-- On UNTIL reduce production stat -> REPEAT block UNTIL exp
-- On SEMI reduce production stat -> REPEAT block UNTIL exp
-- On RETURN reduce production stat -> REPEAT block UNTIL exp
-- On REPEAT reduce production stat -> REPEAT block UNTIL exp
-- On LPAR reduce production stat -> REPEAT block UNTIL exp
-- On LOCAL reduce production stat -> REPEAT block UNTIL exp
-- On IF reduce production stat -> REPEAT block UNTIL exp
-- On IDENT reduce production stat -> REPEAT block UNTIL exp
-- On GOTO reduce production stat -> REPEAT block UNTIL exp
-- On FUNCTION reduce production stat -> REPEAT block UNTIL exp
-- On FOR reduce production stat -> REPEAT block UNTIL exp
-- On EOF reduce production stat -> REPEAT block UNTIL exp
-- On END reduce production stat -> REPEAT block UNTIL exp
-- On ELSEIF reduce production stat -> REPEAT block UNTIL exp
-- On ELSE reduce production stat -> REPEAT block UNTIL exp
-- On DO reduce production stat -> REPEAT block UNTIL exp
-- On DCOLON reduce production stat -> REPEAT block UNTIL exp
-- On BREAK reduce production stat -> REPEAT block UNTIL exp

State 131:
## Known stack suffix:
## LOCAL
## LR(1) items:
stat -> LOCAL . FUNCTION ident funcbody [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> LOCAL . namelist [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> LOCAL . namelist ASSIGN explist [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On IDENT shift to state 12
-- On FUNCTION shift to state 132
-- On namelist shift to state 135
-- On ident shift to state 30
## Reductions:

State 132:
## Known stack suffix:
## LOCAL FUNCTION
## LR(1) items:
stat -> LOCAL FUNCTION . ident funcbody [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On IDENT shift to state 12
-- On ident shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## LOCAL FUNCTION ident
## LR(1) items:
stat -> LOCAL FUNCTION ident . funcbody [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On LPAR shift to state 15
-- On funcbody shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## LOCAL FUNCTION ident funcbody
## LR(1) items:
stat -> LOCAL FUNCTION ident funcbody . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stat -> LOCAL FUNCTION ident funcbody

State 135:
## Known stack suffix:
## LOCAL namelist
## LR(1) items:
namelist -> namelist . COMMA ident [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON COMMA BREAK ASSIGN ]
stat -> LOCAL namelist . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> LOCAL namelist . ASSIGN explist [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On COMMA shift to state 136
-- On ASSIGN shift to state 137
## Reductions:
-- On WHILE reduce production stat -> LOCAL namelist
-- On UNTIL reduce production stat -> LOCAL namelist
-- On SEMI reduce production stat -> LOCAL namelist
-- On RETURN reduce production stat -> LOCAL namelist
-- On REPEAT reduce production stat -> LOCAL namelist
-- On LPAR reduce production stat -> LOCAL namelist
-- On LOCAL reduce production stat -> LOCAL namelist
-- On IF reduce production stat -> LOCAL namelist
-- On IDENT reduce production stat -> LOCAL namelist
-- On GOTO reduce production stat -> LOCAL namelist
-- On FUNCTION reduce production stat -> LOCAL namelist
-- On FOR reduce production stat -> LOCAL namelist
-- On EOF reduce production stat -> LOCAL namelist
-- On END reduce production stat -> LOCAL namelist
-- On ELSEIF reduce production stat -> LOCAL namelist
-- On ELSE reduce production stat -> LOCAL namelist
-- On DO reduce production stat -> LOCAL namelist
-- On DCOLON reduce production stat -> LOCAL namelist
-- On BREAK reduce production stat -> LOCAL namelist

State 136:
## Known stack suffix:
## namelist COMMA
## LR(1) items:
namelist -> namelist COMMA . ident [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IN IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON COMMA BREAK ASSIGN ]
## Transitions:
-- On IDENT shift to state 12
-- On ident shift to state 29
## Reductions:

State 137:
## Known stack suffix:
## LOCAL namelist ASSIGN
## LR(1) items:
stat -> LOCAL namelist ASSIGN . explist [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On explist shift to state 138
-- On exp shift to state 94
-- On bracket shift to state 52
## Reductions:

State 138:
## Known stack suffix:
## LOCAL namelist ASSIGN explist
## LR(1) items:
explist -> explist . COMMA exp [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON COMMA BREAK ]
stat -> LOCAL namelist ASSIGN explist . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On COMMA shift to state 92
## Reductions:
-- On WHILE reduce production stat -> LOCAL namelist ASSIGN explist
-- On UNTIL reduce production stat -> LOCAL namelist ASSIGN explist
-- On SEMI reduce production stat -> LOCAL namelist ASSIGN explist
-- On RETURN reduce production stat -> LOCAL namelist ASSIGN explist
-- On REPEAT reduce production stat -> LOCAL namelist ASSIGN explist
-- On LPAR reduce production stat -> LOCAL namelist ASSIGN explist
-- On LOCAL reduce production stat -> LOCAL namelist ASSIGN explist
-- On IF reduce production stat -> LOCAL namelist ASSIGN explist
-- On IDENT reduce production stat -> LOCAL namelist ASSIGN explist
-- On GOTO reduce production stat -> LOCAL namelist ASSIGN explist
-- On FUNCTION reduce production stat -> LOCAL namelist ASSIGN explist
-- On FOR reduce production stat -> LOCAL namelist ASSIGN explist
-- On EOF reduce production stat -> LOCAL namelist ASSIGN explist
-- On END reduce production stat -> LOCAL namelist ASSIGN explist
-- On ELSEIF reduce production stat -> LOCAL namelist ASSIGN explist
-- On ELSE reduce production stat -> LOCAL namelist ASSIGN explist
-- On DO reduce production stat -> LOCAL namelist ASSIGN explist
-- On DCOLON reduce production stat -> LOCAL namelist ASSIGN explist
-- On BREAK reduce production stat -> LOCAL namelist ASSIGN explist

State 139:
## Known stack suffix:
## IF
## LR(1) items:
stat -> IF . exp THEN block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> IF . exp THEN block ELSE block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> IF . exp THEN block elseifps END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> IF . exp THEN block elseifps ELSE block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 140
-- On bracket shift to state 52
## Reductions:

State 140:
## Known stack suffix:
## IF exp
## LR(1) items:
exp -> exp . OR exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . AND exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . LT exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . GT exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . LE exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . GE exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . NE exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . EQ exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . CAT exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . PLUS exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MINUS exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MULT exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . DIV exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MOD exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . CARAT exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
stat -> IF exp . THEN block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> IF exp . THEN block ELSE block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> IF exp . THEN block elseifps END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> IF exp . THEN block elseifps ELSE block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On THEN shift to state 141
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:

State 141:
## Known stack suffix:
## IF exp THEN
## LR(1) items:
stat -> IF exp THEN . block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> IF exp THEN . block ELSE block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> IF exp THEN . block elseifps END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> IF exp THEN . block elseifps ELSE block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On SEMI shift to state 1
-- On statlist shift to state 2
-- On chunk shift to state 17
-- On block shift to state 142
-- On OSC shift to state 20
## Reductions:
-- On WHILE reduce production OSC ->
-- On RETURN reduce production OSC ->
-- On REPEAT reduce production OSC ->
-- On LPAR reduce production OSC ->
-- On LOCAL reduce production OSC ->
-- On IF reduce production OSC ->
-- On IDENT reduce production OSC ->
-- On GOTO reduce production OSC ->
-- On FUNCTION reduce production OSC ->
-- On FOR reduce production OSC ->
-- On END reduce production OSC ->
-- On ELSEIF reduce production OSC ->
-- On ELSE reduce production OSC ->
-- On DO reduce production OSC ->
-- On DCOLON reduce production OSC ->
-- On BREAK reduce production OSC ->

State 142:
## Known stack suffix:
## IF exp THEN block
## LR(1) items:
stat -> IF exp THEN block . END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> IF exp THEN block . ELSE block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> IF exp THEN block . elseifps END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> IF exp THEN block . elseifps ELSE block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On END shift to state 143
-- On ELSEIF shift to state 144
-- On ELSE shift to state 148
-- On elseifps shift to state 151
-- On elseifp shift to state 157
## Reductions:

State 143:
## Known stack suffix:
## IF exp THEN block END
## LR(1) items:
stat -> IF exp THEN block END . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stat -> IF exp THEN block END

State 144:
## Known stack suffix:
## ELSEIF
## LR(1) items:
elseifp -> ELSEIF . exp THEN block [ END ELSEIF ELSE ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 145
-- On bracket shift to state 52
## Reductions:

State 145:
## Known stack suffix:
## ELSEIF exp
## LR(1) items:
elseifp -> ELSEIF exp . THEN block [ END ELSEIF ELSE ]
exp -> exp . OR exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . AND exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . LT exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . GT exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . LE exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . GE exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . NE exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . EQ exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . CAT exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . PLUS exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MINUS exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MULT exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . DIV exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . MOD exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
exp -> exp . CARAT exp [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV CAT CARAT AND ]
## Transitions:
-- On THEN shift to state 146
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:

State 146:
## Known stack suffix:
## ELSEIF exp THEN
## LR(1) items:
elseifp -> ELSEIF exp THEN . block [ END ELSEIF ELSE ]
## Transitions:
-- On SEMI shift to state 1
-- On statlist shift to state 2
-- On chunk shift to state 17
-- On block shift to state 147
-- On OSC shift to state 20
## Reductions:
-- On WHILE reduce production OSC ->
-- On RETURN reduce production OSC ->
-- On REPEAT reduce production OSC ->
-- On LPAR reduce production OSC ->
-- On LOCAL reduce production OSC ->
-- On IF reduce production OSC ->
-- On IDENT reduce production OSC ->
-- On GOTO reduce production OSC ->
-- On FUNCTION reduce production OSC ->
-- On FOR reduce production OSC ->
-- On END reduce production OSC ->
-- On ELSEIF reduce production OSC ->
-- On ELSE reduce production OSC ->
-- On DO reduce production OSC ->
-- On DCOLON reduce production OSC ->
-- On BREAK reduce production OSC ->

State 147:
## Known stack suffix:
## ELSEIF exp THEN block
## LR(1) items:
elseifp -> ELSEIF exp THEN block . [ END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elseifp -> ELSEIF exp THEN block

State 148:
## Known stack suffix:
## IF exp THEN block ELSE
## LR(1) items:
stat -> IF exp THEN block ELSE . block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On SEMI shift to state 1
-- On statlist shift to state 2
-- On chunk shift to state 17
-- On block shift to state 149
-- On OSC shift to state 20
## Reductions:
-- On WHILE reduce production OSC ->
-- On RETURN reduce production OSC ->
-- On REPEAT reduce production OSC ->
-- On LPAR reduce production OSC ->
-- On LOCAL reduce production OSC ->
-- On IF reduce production OSC ->
-- On IDENT reduce production OSC ->
-- On GOTO reduce production OSC ->
-- On FUNCTION reduce production OSC ->
-- On FOR reduce production OSC ->
-- On END reduce production OSC ->
-- On DO reduce production OSC ->
-- On DCOLON reduce production OSC ->
-- On BREAK reduce production OSC ->

State 149:
## Known stack suffix:
## IF exp THEN block ELSE block
## LR(1) items:
stat -> IF exp THEN block ELSE block . END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On END shift to state 150
## Reductions:

State 150:
## Known stack suffix:
## IF exp THEN block ELSE block END
## LR(1) items:
stat -> IF exp THEN block ELSE block END . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stat -> IF exp THEN block ELSE block END

State 151:
## Known stack suffix:
## IF exp THEN block elseifps
## LR(1) items:
elseifps -> elseifps . elseifp [ END ELSEIF ELSE ]
stat -> IF exp THEN block elseifps . END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> IF exp THEN block elseifps . ELSE block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On END shift to state 152
-- On ELSEIF shift to state 144
-- On ELSE shift to state 153
-- On elseifp shift to state 156
## Reductions:

State 152:
## Known stack suffix:
## IF exp THEN block elseifps END
## LR(1) items:
stat -> IF exp THEN block elseifps END . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stat -> IF exp THEN block elseifps END

State 153:
## Known stack suffix:
## IF exp THEN block elseifps ELSE
## LR(1) items:
stat -> IF exp THEN block elseifps ELSE . block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On SEMI shift to state 1
-- On statlist shift to state 2
-- On chunk shift to state 17
-- On block shift to state 154
-- On OSC shift to state 20
## Reductions:
-- On WHILE reduce production OSC ->
-- On RETURN reduce production OSC ->
-- On REPEAT reduce production OSC ->
-- On LPAR reduce production OSC ->
-- On LOCAL reduce production OSC ->
-- On IF reduce production OSC ->
-- On IDENT reduce production OSC ->
-- On GOTO reduce production OSC ->
-- On FUNCTION reduce production OSC ->
-- On FOR reduce production OSC ->
-- On END reduce production OSC ->
-- On DO reduce production OSC ->
-- On DCOLON reduce production OSC ->
-- On BREAK reduce production OSC ->

State 154:
## Known stack suffix:
## IF exp THEN block elseifps ELSE block
## LR(1) items:
stat -> IF exp THEN block elseifps ELSE block . END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On END shift to state 155
## Reductions:

State 155:
## Known stack suffix:
## IF exp THEN block elseifps ELSE block END
## LR(1) items:
stat -> IF exp THEN block elseifps ELSE block END . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stat -> IF exp THEN block elseifps ELSE block END

State 156:
## Known stack suffix:
## elseifps elseifp
## LR(1) items:
elseifps -> elseifps elseifp . [ END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elseifps -> elseifps elseifp

State 157:
## Known stack suffix:
## elseifp
## LR(1) items:
elseifps -> elseifp . [ END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elseifps -> elseifp

State 158:
## Known stack suffix:
## GOTO
## LR(1) items:
stat -> GOTO . ident [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On IDENT shift to state 12
-- On ident shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## GOTO ident
## LR(1) items:
stat -> GOTO ident . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stat -> GOTO ident

State 160:
## Known stack suffix:
## FUNCTION
## LR(1) items:
stat -> FUNCTION . funcname funcbody [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On IDENT shift to state 12
-- On ident shift to state 161
-- On funcname shift to state 162
-- On fname shift to state 164
## Reductions:

State 161:
## Known stack suffix:
## ident
## LR(1) items:
fname -> ident . [ LPAR DOT COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fname -> ident

State 162:
## Known stack suffix:
## FUNCTION funcname
## LR(1) items:
stat -> FUNCTION funcname . funcbody [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On LPAR shift to state 15
-- On funcbody shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## FUNCTION funcname funcbody
## LR(1) items:
stat -> FUNCTION funcname funcbody . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stat -> FUNCTION funcname funcbody

State 164:
## Known stack suffix:
## fname
## LR(1) items:
fname -> fname . DOT ident [ LPAR DOT COLON ]
funcname -> fname . [ LPAR ]
funcname -> fname . COLON ident [ LPAR ]
## Transitions:
-- On DOT shift to state 165
-- On COLON shift to state 167
## Reductions:
-- On LPAR reduce production funcname -> fname

State 165:
## Known stack suffix:
## fname DOT
## LR(1) items:
fname -> fname DOT . ident [ LPAR DOT COLON ]
## Transitions:
-- On IDENT shift to state 12
-- On ident shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## fname DOT ident
## LR(1) items:
fname -> fname DOT ident . [ LPAR DOT COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fname -> fname DOT ident

State 167:
## Known stack suffix:
## fname COLON
## LR(1) items:
funcname -> fname COLON . ident [ LPAR ]
## Transitions:
-- On IDENT shift to state 12
-- On ident shift to state 168
## Reductions:

State 168:
## Known stack suffix:
## fname COLON ident
## LR(1) items:
funcname -> fname COLON ident . [ LPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production funcname -> fname COLON ident

State 169:
## Known stack suffix:
## FOR
## LR(1) items:
stat -> FOR . ident ASSIGN exp COMMA exp DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> FOR . ident ASSIGN exp COMMA exp COMMA exp DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> FOR . namelist IN explist DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On IDENT shift to state 12
-- On namelist shift to state 170
-- On ident shift to state 176
## Reductions:

State 170:
## Known stack suffix:
## FOR namelist
## LR(1) items:
namelist -> namelist . COMMA ident [ IN COMMA ]
stat -> FOR namelist . IN explist DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On IN shift to state 171
-- On COMMA shift to state 136
## Reductions:

State 171:
## Known stack suffix:
## FOR namelist IN
## LR(1) items:
stat -> FOR namelist IN . explist DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On explist shift to state 172
-- On exp shift to state 94
-- On bracket shift to state 52
## Reductions:

State 172:
## Known stack suffix:
## FOR namelist IN explist
## LR(1) items:
explist -> explist . COMMA exp [ DO COMMA ]
stat -> FOR namelist IN explist . DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On DO shift to state 173
-- On COMMA shift to state 92
## Reductions:

State 173:
## Known stack suffix:
## FOR namelist IN explist DO
## LR(1) items:
stat -> FOR namelist IN explist DO . block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On SEMI shift to state 1
-- On statlist shift to state 2
-- On chunk shift to state 17
-- On block shift to state 174
-- On OSC shift to state 20
## Reductions:
-- On WHILE reduce production OSC ->
-- On RETURN reduce production OSC ->
-- On REPEAT reduce production OSC ->
-- On LPAR reduce production OSC ->
-- On LOCAL reduce production OSC ->
-- On IF reduce production OSC ->
-- On IDENT reduce production OSC ->
-- On GOTO reduce production OSC ->
-- On FUNCTION reduce production OSC ->
-- On FOR reduce production OSC ->
-- On END reduce production OSC ->
-- On DO reduce production OSC ->
-- On DCOLON reduce production OSC ->
-- On BREAK reduce production OSC ->

State 174:
## Known stack suffix:
## FOR namelist IN explist DO block
## LR(1) items:
stat -> FOR namelist IN explist DO block . END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On END shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## FOR namelist IN explist DO block END
## LR(1) items:
stat -> FOR namelist IN explist DO block END . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stat -> FOR namelist IN explist DO block END

State 176:
## Known stack suffix:
## FOR ident
## LR(1) items:
namelist -> ident . [ IN COMMA ]
stat -> FOR ident . ASSIGN exp COMMA exp DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> FOR ident . ASSIGN exp COMMA exp COMMA exp DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On ASSIGN shift to state 177
## Reductions:
-- On IN reduce production namelist -> ident
-- On COMMA reduce production namelist -> ident

State 177:
## Known stack suffix:
## FOR ident ASSIGN
## LR(1) items:
stat -> FOR ident ASSIGN . exp COMMA exp DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> FOR ident ASSIGN . exp COMMA exp COMMA exp DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 178
-- On bracket shift to state 52
## Reductions:

State 178:
## Known stack suffix:
## FOR ident ASSIGN exp
## LR(1) items:
exp -> exp . OR exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . AND exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . LT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . GT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . LE exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . GE exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . NE exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . EQ exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . CAT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . PLUS exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . MINUS exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . MULT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . DIV exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . MOD exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
exp -> exp . CARAT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DIV COMMA CAT CARAT AND ]
stat -> FOR ident ASSIGN exp . COMMA exp DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> FOR ident ASSIGN exp . COMMA exp COMMA exp DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DIV shift to state 63
-- On COMMA shift to state 179
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:

State 179:
## Known stack suffix:
## FOR ident ASSIGN exp COMMA
## LR(1) items:
stat -> FOR ident ASSIGN exp COMMA . exp DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> FOR ident ASSIGN exp COMMA . exp COMMA exp DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 180
-- On bracket shift to state 52
## Reductions:

State 180:
## Known stack suffix:
## FOR ident ASSIGN exp COMMA exp
## LR(1) items:
exp -> exp . OR exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
exp -> exp . AND exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
exp -> exp . LT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
exp -> exp . GT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
exp -> exp . LE exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
exp -> exp . GE exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
exp -> exp . NE exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
exp -> exp . EQ exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
exp -> exp . CAT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
exp -> exp . PLUS exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
exp -> exp . MINUS exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
exp -> exp . MULT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
exp -> exp . DIV exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
exp -> exp . MOD exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
exp -> exp . CARAT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV COMMA CAT CARAT AND ]
stat -> FOR ident ASSIGN exp COMMA exp . DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
stat -> FOR ident ASSIGN exp COMMA exp . COMMA exp DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DO shift to state 181
-- On DIV shift to state 63
-- On COMMA shift to state 184
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:

State 181:
## Known stack suffix:
## FOR ident ASSIGN exp COMMA exp DO
## LR(1) items:
stat -> FOR ident ASSIGN exp COMMA exp DO . block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On SEMI shift to state 1
-- On statlist shift to state 2
-- On chunk shift to state 17
-- On block shift to state 182
-- On OSC shift to state 20
## Reductions:
-- On WHILE reduce production OSC ->
-- On RETURN reduce production OSC ->
-- On REPEAT reduce production OSC ->
-- On LPAR reduce production OSC ->
-- On LOCAL reduce production OSC ->
-- On IF reduce production OSC ->
-- On IDENT reduce production OSC ->
-- On GOTO reduce production OSC ->
-- On FUNCTION reduce production OSC ->
-- On FOR reduce production OSC ->
-- On END reduce production OSC ->
-- On DO reduce production OSC ->
-- On DCOLON reduce production OSC ->
-- On BREAK reduce production OSC ->

State 182:
## Known stack suffix:
## FOR ident ASSIGN exp COMMA exp DO block
## LR(1) items:
stat -> FOR ident ASSIGN exp COMMA exp DO block . END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On END shift to state 183
## Reductions:

State 183:
## Known stack suffix:
## FOR ident ASSIGN exp COMMA exp DO block END
## LR(1) items:
stat -> FOR ident ASSIGN exp COMMA exp DO block END . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stat -> FOR ident ASSIGN exp COMMA exp DO block END

State 184:
## Known stack suffix:
## FOR ident ASSIGN exp COMMA exp COMMA
## LR(1) items:
stat -> FOR ident ASSIGN exp COMMA exp COMMA . exp DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On exp shift to state 185
-- On bracket shift to state 52
## Reductions:

State 185:
## Known stack suffix:
## FOR ident ASSIGN exp COMMA exp COMMA exp
## LR(1) items:
exp -> exp . OR exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . AND exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . LT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . GT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . LE exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . GE exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . NE exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . EQ exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . CAT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . PLUS exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . MINUS exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . MULT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . DIV exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . MOD exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
exp -> exp . CARAT exp [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQ DO DIV CAT CARAT AND ]
stat -> FOR ident ASSIGN exp COMMA exp COMMA exp . DO block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On PLUS shift to state 46
-- On OR shift to state 65
-- On NE shift to state 67
-- On MULT shift to state 48
-- On MOD shift to state 61
-- On MINUS shift to state 69
-- On LT shift to state 73
-- On LE shift to state 75
-- On GT shift to state 77
-- On GE shift to state 79
-- On EQ shift to state 81
-- On DO shift to state 186
-- On DIV shift to state 63
-- On CAT shift to state 71
-- On CARAT shift to state 50
-- On AND shift to state 83
## Reductions:

State 186:
## Known stack suffix:
## FOR ident ASSIGN exp COMMA exp COMMA exp DO
## LR(1) items:
stat -> FOR ident ASSIGN exp COMMA exp COMMA exp DO . block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On SEMI shift to state 1
-- On statlist shift to state 2
-- On chunk shift to state 17
-- On block shift to state 187
-- On OSC shift to state 20
## Reductions:
-- On WHILE reduce production OSC ->
-- On RETURN reduce production OSC ->
-- On REPEAT reduce production OSC ->
-- On LPAR reduce production OSC ->
-- On LOCAL reduce production OSC ->
-- On IF reduce production OSC ->
-- On IDENT reduce production OSC ->
-- On GOTO reduce production OSC ->
-- On FUNCTION reduce production OSC ->
-- On FOR reduce production OSC ->
-- On END reduce production OSC ->
-- On DO reduce production OSC ->
-- On DCOLON reduce production OSC ->
-- On BREAK reduce production OSC ->

State 187:
## Known stack suffix:
## FOR ident ASSIGN exp COMMA exp COMMA exp DO block
## LR(1) items:
stat -> FOR ident ASSIGN exp COMMA exp COMMA exp DO block . END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On END shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## FOR ident ASSIGN exp COMMA exp COMMA exp DO block END
## LR(1) items:
stat -> FOR ident ASSIGN exp COMMA exp COMMA exp DO block END . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stat -> FOR ident ASSIGN exp COMMA exp COMMA exp DO block END

State 189:
## Known stack suffix:
## DO
## LR(1) items:
stat -> DO . block END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On SEMI shift to state 1
-- On statlist shift to state 2
-- On chunk shift to state 17
-- On block shift to state 190
-- On OSC shift to state 20
## Reductions:
-- On WHILE reduce production OSC ->
-- On RETURN reduce production OSC ->
-- On REPEAT reduce production OSC ->
-- On LPAR reduce production OSC ->
-- On LOCAL reduce production OSC ->
-- On IF reduce production OSC ->
-- On IDENT reduce production OSC ->
-- On GOTO reduce production OSC ->
-- On FUNCTION reduce production OSC ->
-- On FOR reduce production OSC ->
-- On END reduce production OSC ->
-- On DO reduce production OSC ->
-- On DCOLON reduce production OSC ->
-- On BREAK reduce production OSC ->

State 190:
## Known stack suffix:
## DO block
## LR(1) items:
stat -> DO block . END [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On END shift to state 191
## Reductions:

State 191:
## Known stack suffix:
## DO block END
## LR(1) items:
stat -> DO block END . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stat -> DO block END

State 192:
## Known stack suffix:
## DCOLON
## LR(1) items:
label -> DCOLON . ident DCOLON [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On IDENT shift to state 12
-- On ident shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## DCOLON ident
## LR(1) items:
label -> DCOLON ident . DCOLON [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On DCOLON shift to state 194
## Reductions:

State 194:
## Known stack suffix:
## DCOLON ident DCOLON
## LR(1) items:
label -> DCOLON ident DCOLON . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label -> DCOLON ident DCOLON

State 195:
## Known stack suffix:
## BREAK
## LR(1) items:
retstat -> BREAK . [ UNTIL SEMI EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production retstat -> BREAK

State 196:
## Known stack suffix:
## varlist
## LR(1) items:
stat -> varlist . ASSIGN explist [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
varlist -> varlist . COMMA var [ COMMA ASSIGN ]
## Transitions:
-- On COMMA shift to state 197
-- On ASSIGN shift to state 201
## Reductions:

State 197:
## Known stack suffix:
## varlist COMMA
## LR(1) items:
varlist -> varlist COMMA . var [ COMMA ASSIGN ]
## Transitions:
-- On LPAR shift to state 8
-- On IDENT shift to state 12
-- On var shift to state 198
-- On ident shift to state 40
-- On functioncall shift to state 199
-- On bracket shift to state 200
## Reductions:

State 198:
## Known stack suffix:
## varlist COMMA var
## LR(1) items:
functioncall -> var . args [ STR_CONST LPAR LCB LB DOT COLON ]
functioncall -> var . COLON ident args [ STR_CONST LPAR LCB LB DOT COLON ]
var -> var . key [ STR_CONST LPAR LCB LB DOT COMMA COLON ASSIGN ]
varlist -> varlist COMMA var . [ COMMA ASSIGN ]
## Transitions:
-- On STR_CONST shift to state 35
-- On LPAR shift to state 36
-- On LCB shift to state 9
-- On LB shift to state 43
-- On DOT shift to state 53
-- On COLON shift to state 95
-- On tableconstructor shift to state 57
-- On key shift to state 98
-- On args shift to state 99
## Reductions:
-- On COMMA reduce production varlist -> varlist COMMA var
-- On ASSIGN reduce production varlist -> varlist COMMA var

State 199:
## Known stack suffix:
## functioncall
## LR(1) items:
functioncall -> functioncall . args [ STR_CONST LPAR LCB LB DOT COLON ]
functioncall -> functioncall . COLON ident args [ STR_CONST LPAR LCB LB DOT COLON ]
var -> functioncall . key [ STR_CONST LPAR LCB LB DOT COMMA COLON ASSIGN ]
## Transitions:
-- On STR_CONST shift to state 35
-- On LPAR shift to state 36
-- On LCB shift to state 9
-- On LB shift to state 43
-- On DOT shift to state 53
-- On COLON shift to state 85
-- On tableconstructor shift to state 57
-- On key shift to state 88
-- On args shift to state 89
## Reductions:

State 200:
## Known stack suffix:
## bracket
## LR(1) items:
functioncall -> bracket . args [ WHILE UNTIL STR_CONST SEMI RETURN REPEAT LPAR LOCAL LCB LB IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DOT DO DCOLON COLON BREAK ]
functioncall -> bracket . COLON ident args [ WHILE UNTIL STR_CONST SEMI RETURN REPEAT LPAR LOCAL LCB LB IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DOT DO DCOLON COLON BREAK ]
var -> bracket . key [ STR_CONST LPAR LCB LB DOT COMMA COLON ASSIGN ]
## Transitions:
-- On STR_CONST shift to state 35
-- On LPAR shift to state 36
-- On LCB shift to state 9
-- On LB shift to state 43
-- On DOT shift to state 53
-- On COLON shift to state 55
-- On tableconstructor shift to state 57
-- On key shift to state 59
-- On args shift to state 60
## Reductions:

State 201:
## Known stack suffix:
## varlist ASSIGN
## LR(1) items:
stat -> varlist ASSIGN . explist [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On STR_CONST shift to state 4
-- On NUM_CONST shift to state 5
-- On NOT shift to state 6
-- On MINUS shift to state 7
-- On LPAR shift to state 8
-- On LCB shift to state 9
-- On IDENT shift to state 12
-- On HASH shift to state 13
-- On FUNCTION shift to state 14
-- On ELLIPSIS shift to state 32
-- On BOOL shift to state 33
-- On var shift to state 34
-- On tableconstructor shift to state 38
-- On primary shift to state 39
-- On ident shift to state 40
-- On functiondef shift to state 41
-- On functioncall shift to state 42
-- On explist shift to state 202
-- On exp shift to state 94
-- On bracket shift to state 52
## Reductions:

State 202:
## Known stack suffix:
## varlist ASSIGN explist
## LR(1) items:
explist -> explist . COMMA exp [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON COMMA BREAK ]
stat -> varlist ASSIGN explist . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On COMMA shift to state 92
## Reductions:
-- On WHILE reduce production stat -> varlist ASSIGN explist
-- On UNTIL reduce production stat -> varlist ASSIGN explist
-- On SEMI reduce production stat -> varlist ASSIGN explist
-- On RETURN reduce production stat -> varlist ASSIGN explist
-- On REPEAT reduce production stat -> varlist ASSIGN explist
-- On LPAR reduce production stat -> varlist ASSIGN explist
-- On LOCAL reduce production stat -> varlist ASSIGN explist
-- On IF reduce production stat -> varlist ASSIGN explist
-- On IDENT reduce production stat -> varlist ASSIGN explist
-- On GOTO reduce production stat -> varlist ASSIGN explist
-- On FUNCTION reduce production stat -> varlist ASSIGN explist
-- On FOR reduce production stat -> varlist ASSIGN explist
-- On EOF reduce production stat -> varlist ASSIGN explist
-- On END reduce production stat -> varlist ASSIGN explist
-- On ELSEIF reduce production stat -> varlist ASSIGN explist
-- On ELSE reduce production stat -> varlist ASSIGN explist
-- On DO reduce production stat -> varlist ASSIGN explist
-- On DCOLON reduce production stat -> varlist ASSIGN explist
-- On BREAK reduce production stat -> varlist ASSIGN explist

State 203:
## Known stack suffix:
## var
## LR(1) items:
functioncall -> var . args [ WHILE UNTIL STR_CONST SEMI RETURN REPEAT LPAR LOCAL LCB LB IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DOT DO DCOLON COLON BREAK ]
functioncall -> var . COLON ident args [ WHILE UNTIL STR_CONST SEMI RETURN REPEAT LPAR LOCAL LCB LB IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DOT DO DCOLON COLON BREAK ]
var -> var . key [ STR_CONST LPAR LCB LB DOT COMMA COLON ASSIGN ]
varlist -> var . [ COMMA ASSIGN ]
## Transitions:
-- On STR_CONST shift to state 35
-- On LPAR shift to state 36
-- On LCB shift to state 9
-- On LB shift to state 43
-- On DOT shift to state 53
-- On COLON shift to state 95
-- On tableconstructor shift to state 57
-- On key shift to state 98
-- On args shift to state 99
## Reductions:
-- On COMMA reduce production varlist -> var
-- On ASSIGN reduce production varlist -> var

State 204:
## Known stack suffix:
## statlist stat
## LR(1) items:
statlist -> statlist stat . OSC [ WHILE UNTIL RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
-- On SEMI shift to state 1
-- On OSC shift to state 205
## Reductions:
-- On WHILE reduce production OSC ->
-- On UNTIL reduce production OSC ->
-- On RETURN reduce production OSC ->
-- On REPEAT reduce production OSC ->
-- On LPAR reduce production OSC ->
-- On LOCAL reduce production OSC ->
-- On IF reduce production OSC ->
-- On IDENT reduce production OSC ->
-- On GOTO reduce production OSC ->
-- On FUNCTION reduce production OSC ->
-- On FOR reduce production OSC ->
-- On EOF reduce production OSC ->
-- On END reduce production OSC ->
-- On ELSEIF reduce production OSC ->
-- On ELSE reduce production OSC ->
-- On DO reduce production OSC ->
-- On DCOLON reduce production OSC ->
-- On BREAK reduce production OSC ->

State 205:
## Known stack suffix:
## statlist stat OSC
## LR(1) items:
statlist -> statlist stat OSC . [ WHILE UNTIL RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statlist -> statlist stat OSC

State 206:
## Known stack suffix:
## statlist retstat
## LR(1) items:
chunk -> statlist retstat . OSC [ UNTIL EOF END ELSEIF ELSE ]
## Transitions:
-- On SEMI shift to state 1
-- On OSC shift to state 207
## Reductions:
-- On UNTIL reduce production OSC ->
-- On EOF reduce production OSC ->
-- On END reduce production OSC ->
-- On ELSEIF reduce production OSC ->
-- On ELSE reduce production OSC ->

State 207:
## Known stack suffix:
## statlist retstat OSC
## LR(1) items:
chunk -> statlist retstat OSC . [ UNTIL EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production chunk -> statlist retstat OSC

State 208:
## Known stack suffix:
## label
## LR(1) items:
stat -> label . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stat -> label

State 209:
## Known stack suffix:
## functioncall
## LR(1) items:
functioncall -> functioncall . args [ WHILE UNTIL STR_CONST SEMI RETURN REPEAT LPAR LOCAL LCB LB IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DOT DO DCOLON COLON BREAK ]
functioncall -> functioncall . COLON ident args [ WHILE UNTIL STR_CONST SEMI RETURN REPEAT LPAR LOCAL LCB LB IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DOT DO DCOLON COLON BREAK ]
stat -> functioncall . [ WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK ]
var -> functioncall . key [ STR_CONST LPAR LCB LB DOT COMMA COLON ASSIGN ]
## Transitions:
-- On STR_CONST shift to state 35
-- On LPAR shift to state 36
-- On LCB shift to state 9
-- On LB shift to state 43
-- On DOT shift to state 53
-- On COLON shift to state 85
-- On tableconstructor shift to state 57
-- On key shift to state 88
-- On args shift to state 89
## Reductions:
-- On WHILE reduce production stat -> functioncall
-- On UNTIL reduce production stat -> functioncall
-- On SEMI reduce production stat -> functioncall
-- On RETURN reduce production stat -> functioncall
-- On REPEAT reduce production stat -> functioncall
-- On LOCAL reduce production stat -> functioncall
-- On IF reduce production stat -> functioncall
-- On IDENT reduce production stat -> functioncall
-- On GOTO reduce production stat -> functioncall
-- On FUNCTION reduce production stat -> functioncall
-- On FOR reduce production stat -> functioncall
-- On EOF reduce production stat -> functioncall
-- On END reduce production stat -> functioncall
-- On ELSEIF reduce production stat -> functioncall
-- On ELSE reduce production stat -> functioncall
-- On DO reduce production stat -> functioncall
-- On DCOLON reduce production stat -> functioncall
-- On BREAK reduce production stat -> functioncall

State 210:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept prog

State 211:
## Known stack suffix:
## chunk
## LR(1) items:
prog -> chunk . EOF [ # ]
## Transitions:
-- On EOF shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## chunk EOF
## LR(1) items:
prog -> chunk EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production prog -> chunk EOF

