Grammar has 31 nonterminal symbols, among which 1 start symbols.
Grammar has 52 terminal symbols.
Grammar has 106 productions.
nullable(varlist) = false
nullable(var) = false
nullable(tableconstructor) = false
nullable(statlist) = true
nullable(stat) = false
nullable(retstat) = false
nullable(prog) = false
nullable(primary) = false
nullable(parlist) = false
nullable(namelist) = false
nullable(label) = false
nullable(key) = false
nullable(ident) = false
nullable(functiondef) = false
nullable(functioncall) = false
nullable(funcname) = false
nullable(funcbody) = false
nullable(fname) = false
nullable(fieldsep) = false
nullable(fields) = false
nullable(fieldlist) = false
nullable(field) = false
nullable(explist) = false
nullable(exp) = false
nullable(elseifps) = false
nullable(elseifp) = false
nullable(chunk) = true
nullable(bracket) = false
nullable(block) = true
nullable(args) = false
nullable(OSC) = true
first(varlist) = LPAR IDENT
first(var) = LPAR IDENT
first(tableconstructor) = LCB
first(statlist) = WHILE SEMI REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR DO DCOLON
first(stat) = WHILE REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR DO DCOLON
first(retstat) = RETURN BREAK
first(prog) = WHILE SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF DO DCOLON BREAK
first(primary) = STR_CONST NUM_CONST LPAR LCB FUNCTION ELLIPSIS BOOL
first(parlist) = IDENT ELLIPSIS
first(namelist) = IDENT
first(label) = DCOLON
first(key) = LB DOT
first(ident) = IDENT
first(functiondef) = FUNCTION
first(functioncall) = LPAR IDENT
first(funcname) = IDENT
first(funcbody) = LPAR
first(fname) = IDENT
first(fieldsep) = SEMI COMMA
first(fields) = STR_CONST NUM_CONST NOT MINUS LPAR LCB LB IDENT HASH FUNCTION ELLIPSIS BOOL
first(fieldlist) = STR_CONST NUM_CONST NOT MINUS LPAR LCB LB IDENT HASH FUNCTION ELLIPSIS BOOL
first(field) = STR_CONST NUM_CONST NOT MINUS LPAR LCB LB IDENT HASH FUNCTION ELLIPSIS BOOL
first(explist) = STR_CONST NUM_CONST NOT MINUS LPAR LCB IDENT HASH FUNCTION ELLIPSIS BOOL
first(exp) = STR_CONST NUM_CONST NOT MINUS LPAR LCB IDENT HASH FUNCTION ELLIPSIS BOOL
first(elseifps) = ELSEIF
first(elseifp) = ELSEIF
first(chunk) = WHILE SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR DO DCOLON BREAK
first(bracket) = LPAR
first(block) = WHILE SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR DO DCOLON BREAK
first(args) = STR_CONST LPAR LCB
first(OSC) = SEMI
minimal(varlist) = (* 1 *) IDENT
minimal(var) = (* 1 *) IDENT
minimal(tableconstructor) = (* 2 *) LCB RCB
minimal(statlist) = (* 0 *)
minimal(stat) = (* 2 *) IDENT STR_CONST
minimal(retstat) = (* 1 *) RETURN
minimal(prog) = (* 1 *) EOF
minimal(primary) = (* 1 *) BOOL
minimal(parlist) = (* 1 *) IDENT
minimal(namelist) = (* 1 *) IDENT
minimal(label) = (* 3 *) DCOLON IDENT DCOLON
minimal(key) = (* 2 *) DOT IDENT
minimal(ident) = (* 1 *) IDENT
minimal(functiondef) = (* 4 *) FUNCTION LPAR RPAR END
minimal(functioncall) = (* 2 *) IDENT STR_CONST
minimal(funcname) = (* 1 *) IDENT
minimal(funcbody) = (* 3 *) LPAR RPAR END
minimal(fname) = (* 1 *) IDENT
minimal(fieldsep) = (* 1 *) COMMA
minimal(fields) = (* 1 *) BOOL
minimal(fieldlist) = (* 1 *) BOOL
minimal(field) = (* 1 *) BOOL
minimal(explist) = (* 1 *) BOOL
minimal(exp) = (* 1 *) BOOL
minimal(elseifps) = (* 3 *) ELSEIF BOOL THEN
minimal(elseifp) = (* 3 *) ELSEIF BOOL THEN
minimal(chunk) = (* 0 *)
minimal(bracket) = (* 3 *) LPAR BOOL RPAR
minimal(block) = (* 0 *)
minimal(args) = (* 1 *) STR_CONST
minimal(OSC) = (* 0 *)
maximal(varlist) = infinity
maximal(var) = infinity
maximal(tableconstructor) = infinity
maximal(statlist) = infinity
maximal(stat) = infinity
maximal(retstat) = infinity
maximal(prog) = infinity
maximal(primary) = infinity
maximal(parlist) = infinity
maximal(namelist) = infinity
maximal(label) = 3
maximal(key) = infinity
maximal(ident) = 1
maximal(functiondef) = infinity
maximal(functioncall) = infinity
maximal(funcname) = infinity
maximal(funcbody) = infinity
maximal(fname) = infinity
maximal(fieldsep) = 1
maximal(fields) = infinity
maximal(fieldlist) = infinity
maximal(field) = infinity
maximal(explist) = infinity
maximal(exp) = infinity
maximal(elseifps) = infinity
maximal(elseifp) = infinity
maximal(chunk) = infinity
maximal(bracket) = infinity
maximal(block) = infinity
maximal(args) = infinity
maximal(OSC) = 1
follow(varlist) = COMMA ASSIGN
follow(var) = WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK ASSIGN AND
follow(tableconstructor) = WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND
follow(statlist) = WHILE UNTIL RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK
follow(stat) = WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK
follow(retstat) = UNTIL SEMI EOF END ELSEIF ELSE
follow(prog) = #
follow(primary) = WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND
follow(parlist) = RPAR
follow(namelist) = WHILE UNTIL SEMI RPAR RETURN REPEAT LPAR LOCAL IN IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON COMMA BREAK ASSIGN
follow(label) = WHILE UNTIL SEMI RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK
follow(key) = WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK ASSIGN AND
follow(ident) = WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IN IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK ASSIGN AND
follow(functiondef) = WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND
follow(functioncall) = WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND
follow(funcname) = LPAR
follow(funcbody) = WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND
follow(fname) = LPAR DOT COLON
follow(fieldsep) = STR_CONST RCB NUM_CONST NOT MINUS LPAR LCB LB IDENT HASH FUNCTION ELLIPSIS BOOL
follow(fields) = SEMI RCB COMMA
follow(fieldlist) = RCB
follow(field) = SEMI RCB COMMA
follow(explist) = WHILE UNTIL SEMI RPAR RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON COMMA BREAK
follow(exp) = WHILE UNTIL THEN SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DO DIV DCOLON COMMA CAT CARAT BREAK AND
follow(elseifps) = END ELSEIF ELSE
follow(elseifp) = END ELSEIF ELSE
follow(chunk) = UNTIL EOF END ELSEIF ELSE
follow(bracket) = WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND
follow(block) = UNTIL END ELSEIF ELSE
follow(args) = WHILE UNTIL THEN STR_CONST SEMI RPAR RETURN REPEAT RCB RB PLUS OR NE MULT MOD MINUS LT LPAR LOCAL LE LCB LB IF IDENT GT GOTO GE FUNCTION FOR EQ EOF END ELSEIF ELSE DOT DO DIV DCOLON COMMA COLON CAT CARAT BREAK AND
follow(OSC) = WHILE UNTIL RETURN REPEAT LPAR LOCAL IF IDENT GOTO FUNCTION FOR EOF END ELSEIF ELSE DO DCOLON BREAK
Built an LR(0) automaton with 213 states.
The grammar is not SLR(1) -- 24 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 213 states.
274 shift/reduce conflicts were silently solved.
66 out of 213 states have a default reduction.
The action table is 11289 entries; 2028 non-zero; 2084 compressed.
The action table occupies roughly 4264 bytes.
The goto table is 6816 entries; 437 non-zero; 895 compressed.
The goto table occupies roughly 1208 bytes.
The error table occupies roughly 1448 bytes.
The default_reduction table occupies roughly 248 bytes.
The lhs table occupies roughly 144 bytes.
The trace table occupies roughly 8 bytes.
