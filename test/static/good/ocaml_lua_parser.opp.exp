%{
 open Ast
%}
%start prog
%token AND
%token ASSIGN
%token <string> BOOL
%token BREAK
%token CARAT
%token CAT
%token COLON
%token COMMA
%token DCOLON
%token DIV
%token DO
%token DOT
%token ELLIPSIS
%token ELSE
%token ELSEIF
%token END
%token EOF
%token EQ
%token FOR
%token FUNCTION
%token GE
%token GOTO
%token GT
%token HASH
%token <string> IDENT
%token IF
%token IN
%token LB
%token LCB
%token LE
%token LOCAL
%token LPAR
%token LT
%token MINUS
%token MOD
%token MULT
%token NE
%token NOARG
%token NOT
%token <string> NUM_CONST
%token OR
%token PLUS
%token RB
%token RCB
%token REPEAT
%token RETURN
%token RPAR
%token SEMI
%token <string> STR_CONST
%token THEN
%token UNTIL
%token WHILE
%nonassoc NOARG
%nonassoc LPAR
%left OR
%left AND
%left EQ GE GT LE LT NE
%right CAT
%left MINUS PLUS
%left DIV MOD MULT
%left HASH NOT
%right CARAT
%type <Ast.ast> prog
%%

prog:
  _1 = chunk _2 = EOF
    {                  ( _1 )}

chunk:
  _1 = statlist _2 = retstat _3 = OSC
    {                              ( Slist((extract_list _1) @ [_2]) )}
| _1 = statlist
    {                              ( _1 )}

statlist:
  _1 = OSC
    {                              ( Slist([]) )}
| _1 = statlist _2 = stat _3 = OSC
    {                              ( Slist((extract_list _1) @ [_2]) )}

block:
  _1 = chunk
    {               ( _1 )}

stat:
  _1 = varlist _2 = ASSIGN _3 = explist
    {                                                              ( Assign(_1, _3) )}
| _1 = functioncall %prec NOARG
    {                                                              ( _1 )}
| _1 = label
    {                                                              ( _1 )}
| _1 = GOTO _2 = ident
    {                                                              ( Goto(_2) )}
| _1 = DO _2 = block _3 = END
    {                                                              ( Do(_2) )}
| _1 = WHILE _2 = exp _3 = DO _4 = block _5 = END
    {                                                              ( While(_2, _4) )}
| _1 = REPEAT _2 = block _3 = UNTIL _4 = exp
    {                                                              ( Repeat(_2, _4) )}
| _1 = IF _2 = exp _3 = THEN _4 = block _5 = END
    {                                                              ( If1(_2, _4) )}
| _1 = IF _2 = exp _3 = THEN _4 = block _5 = ELSE _6 = block _7 = END
    {                                                              ( If2(_2, _4, _6) )}
| _1 = IF _2 = exp _3 = THEN _4 = block _5 = elseifps _6 = END
    {                                                              ( If3(_2, _4, _5) )}
| _1 = IF _2 = exp _3 = THEN _4 = block _5 = elseifps _6 = ELSE _7 = block _8 = END
    {                                                              ( If4(_2, _4, _5, _7) )}
| _1 = FOR _2 = ident _3 = ASSIGN _4 = exp _5 = COMMA _6 = exp _7 = DO _8 = block _9 = END
    {                                                              ( For1(_2, _4, _6, _8) )}
| _1 = FOR _2 = ident _3 = ASSIGN _4 = exp _5 = COMMA _6 = exp _7 = COMMA _8 = exp _9 = DO _10 = block _11 = END
    {                                                              ( For2(_2, _4, _6, _8, _10) )}
| _1 = FOR _2 = namelist _3 = IN _4 = explist _5 = DO _6 = block _7 = END
    {                                                              ( Forin(_2, _4, _6) )}
| _1 = FUNCTION _2 = funcname _3 = funcbody
    {                                                              ( Function(_2, _3) )}
| _1 = LOCAL _2 = FUNCTION _3 = ident _4 = funcbody
    {                                                              ( Lfunction(_3, _4) )}
| _1 = LOCAL _2 = namelist
    {                                                              ( Lnames(_2) )}
| _1 = LOCAL _2 = namelist _3 = ASSIGN _4 = explist
    {                                                              ( Lassign(_2, _4) )}

elseifp:
  _1 = ELSEIF _2 = exp _3 = THEN _4 = block
    {                                 ( Elseif(_2, _4) )}

elseifps:
  _1 = elseifp
    {                             ( Slist([_1]) )}
| _1 = elseifps _2 = elseifp
    {                             ( Slist((extract_list _1) @ [_2]) )}

retstat:
  _1 = RETURN
    {                           ( Return(Elist([])) )}
| _1 = RETURN _2 = explist
    {                           ( Return(_2) )}
| _1 = BREAK
    {                           ( Break )}

label:
  _1 = DCOLON _2 = ident _3 = DCOLON
    {                             ( Label(_2) )}

funcname:
  _1 = fname
    {                              ( _1 )}
| _1 = fname _2 = COLON _3 = ident
    {                              ( Member(_1, _3) )}

varlist:
  _1 = var
    {                             ( Elist([_1]) )}
| _1 = varlist _2 = COMMA _3 = var
    {                             ( Elist((extract_list _1) @ [_3]) )}

var:
  _1 = ident
    {                         ( _1 )}
| _1 = bracket _2 = key
    {                         ( Clist([_1; _2]) )}
| _1 = functioncall _2 = key
    {                         ( Clist([_1; _2]) )}
| _1 = var _2 = key
    {                         ( Clist([_1; _2]) )}

key:
  _1 = LB _2 = exp _3 = RB
    {                 ( Key1(_2) )}
| _1 = DOT _2 = ident
    {                 ( Key2(_2) )}

fname:
  _1 = ident
    {                         ( FNlist([_1]) )}
| _1 = fname _2 = DOT _3 = ident
    {                         ( FNlist((extract_list _1) @ [_3]) )}

namelist:
  _1 = ident
    {                                 ( Elist([_1]) )}
| _1 = namelist _2 = COMMA _3 = ident
    {                                 ( Elist((extract_list _1) @ [_3]) )}

explist:
  _1 = exp
    {                             ( Elist([_1]) )}
| _1 = explist _2 = COMMA _3 = exp
    {                             ( Elist((extract_list _1) @ [_3]) )}

exp:
  _1 = primary
    {                                ( _1 )}
| _1 = var %prec NOARG
    {                                ( _1 )}
| _1 = functioncall %prec NOARG
    {                                ( _1 )}
| _1 = exp _2 = OR _3 = exp
    {                                ( Binop("or", _1, _3) )}
| _1 = exp _2 = AND _3 = exp
    {                                ( Binop("and", _1, _3) )}
| _1 = exp _2 = LT _3 = exp
    {                                ( Binop("<", _1, _3) )}
| _1 = exp _2 = GT _3 = exp
    {                                ( Binop(">", _1, _3) )}
| _1 = exp _2 = LE _3 = exp
    {                                ( Binop("<=", _1, _3) )}
| _1 = exp _2 = GE _3 = exp
    {                                ( Binop(">=", _1, _3) )}
| _1 = exp _2 = NE _3 = exp
    {                                ( Binop("~=", _1, _3) )}
| _1 = exp _2 = EQ _3 = exp
    {                                ( Binop("==", _1, _3) )}
| _1 = exp _2 = CAT _3 = exp
    {                                ( Binop("..", _1, _3) )}
| _1 = exp _2 = PLUS _3 = exp
    {                                ( Binop("+", _1, _3) )}
| _1 = exp _2 = MINUS _3 = exp
    {                                ( Binop("-", _1, _3) )}
| _1 = exp _2 = MULT _3 = exp
    {                                ( Binop("*", _1, _3) )}
| _1 = exp _2 = DIV _3 = exp
    {                                ( Binop("/", _1, _3) )}
| _1 = exp _2 = MOD _3 = exp
    {                                ( Binop("%", _1, _3) )}
| _1 = exp _2 = CARAT _3 = exp
    {                                ( Binop("^", _1, _3) )}
| _1 = NOT _2 = exp
    {                                ( Unop("not ", _2) )}
| _1 = HASH _2 = exp
    {                                ( Unop("#", _2) )}
| _1 = MINUS _2 = exp %prec NOT
    {                                ( Unop("- ", _2) )}

primary:
  _1 = BOOL
    {                               ( Bool(_1) )}
| _1 = NUM_CONST
    {                               ( Number(_1) )}
| _1 = STR_CONST
    {                               ( String(_1) )}
| _1 = ELLIPSIS
    {                               ( Ellipsis )}
| _1 = functiondef
    {                               ( _1 )}
| _1 = tableconstructor
    {                               ( _1 )}
| _1 = bracket %prec NOARG
    {                               ( _1 )}

bracket:
  _1 = LPAR _2 = exp _3 = RPAR
    {                               ( Pexp(_2) )}

functioncall:
  _1 = bracket _2 = args
    {                                              ( Clist([_1; _2]) )}
| _1 = bracket _2 = COLON _3 = ident _4 = args
    {                                              ( Mcall(_1, _3, _4) )}
| _1 = var _2 = args
    {                                              ( Clist([_1; _2]) )}
| _1 = var _2 = COLON _3 = ident _4 = args
    {                                              ( Mcall(_1, _3, _4) )}
| _1 = functioncall _2 = args
    {                                              ( Clist((extract_list _1) @ [_2]) )}
| _1 = functioncall _2 = COLON _3 = ident _4 = args
    {                                              ( Mcall(_1, _3, _4) )}

args:
  _1 = LPAR _2 = RPAR
    {                          ( Args(Elist([])) )}
| _1 = LPAR _2 = explist _3 = RPAR
    {                          ( Args(_2) )}
| _1 = tableconstructor
    {                          ( _1 )}
| _1 = STR_CONST
    {                          ( String(_1) )}

functiondef:
  _1 = FUNCTION _2 = funcbody
    {                                 ( FunctionE(_2) )}

funcbody:
  _1 = LPAR _2 = RPAR _3 = block _4 = END
    {                                        ( Fbody(Elist([]), _3) )}
| _1 = LPAR _2 = parlist _3 = RPAR _4 = block _5 = END
    {                                        ( Fbody(_2, _4) )}

parlist:
  _1 = namelist
    {                                   ( _1 )}
| _1 = namelist _2 = COMMA _3 = ELLIPSIS
    {                                   ( Vargs(_1) )}
| _1 = ELLIPSIS
    {                                   ( Ellipsis )}

tableconstructor:
  _1 = LCB _2 = RCB
    {                                      ( Table(Elist([])) )}
| _1 = LCB _2 = fieldlist _3 = RCB
    {                                      ( Table(_2) )}

fieldlist:
  _1 = fields
    {                             ( _1 )}
| _1 = fields _2 = fieldsep
    {                             ( _1 )}

fields:
  _1 = field
    {                                ( Elist([_1]) )}
| _1 = fields _2 = fieldsep _3 = field
    {                                ( Elist((extract_list _1) @ [_3]) )}

field:
  _1 = LB _2 = exp _3 = RB _4 = ASSIGN _5 = exp
    {                              ( Fassign(_2, _5) )}
| _1 = ident _2 = ASSIGN _3 = exp
    {                              ( Assign(_1, _3) )}
| _1 = exp
    {                              ( _1 )}

fieldsep:
  _1 = COMMA
    {                  ()}
| _1 = SEMI
    {                  ()}

ident:
  _1 = IDENT
    {               ( Ident(_1) )}

OSC:
  
    {             ()}
| _1 = SEMI
    {             ()}

%%


