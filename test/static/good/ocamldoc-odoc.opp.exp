%{
(***********************************************************************)
(*                             OCamldoc                                *)
(*                                                                     *)
(*            Maxence Guesdon, projet Cristal, INRIA Rocquencourt      *)
(*                                                                     *)
(*  Copyright 2001 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the Q Public License version 1.0.               *)
(*                                                                     *)
(***********************************************************************)

(* $Id: odoc_parser.mly,v 1.3 2003/11/24 10:43:11 starynke Exp $ *)

open Odoc_types
open Odoc_comments_global

let uppercase = "[A-Z\192-\214\216-\222]"
let identchar =
  "[A-Za-z_\192-\214\216-\246\248-\255'0-9]"
let blank = "[ \010\013\009\012]"

let print_DEBUG s = print_string s; print_newline ()
%}
%start info_part2
%start main
%start see_info
%token <string> Desc
%token <string * (string option)> Description
%token EOF
%token <string> See_doc
%token <string> See_file
%token <string> See_url
%token T_AUTHOR
%token <string> T_CUSTOM
%token T_DEPRECATED
%token T_PARAM
%token T_RAISES
%token T_RETURN
%token T_SEE
%token T_SINCE
%token T_VERSION
%type <unit> info_part2
%type <(string * (string option)) option> main
%type <Odoc_types.see_ref * string> see_info
%%

see_info:
  _1 = see_ref _2 = Desc
    {               ( (_1, _2) )}

see_ref:
  _1 = See_url
    {            ( Odoc_types.See_url _1 )}
| _1 = See_file
    {           ( Odoc_types.See_file _1 )}
| _1 = See_doc
    {          ( Odoc_types.See_doc _1 )}

main:
  _1 = Description
    {              ( Some _1 )}
| _1 = EOF
    {      ( None )}

info_part2:
  _1 = element_list _2 = EOF
    {                   ( () )}

element_list:
  _1 = element
    {          ( () )}
| _1 = element _2 = element_list
    {                       ( () )}

element:
  _1 = param
    {        ( () )}
| _1 = author
    {         ( () )}
| _1 = version
    {          ( () )}
| _1 = see
    {      ( () )}
| _1 = since
    {        ( () )}
| _1 = deprecated
    {             ( () )}
| _1 = raise_exc
    {            ( () )}
| _1 = return
    {         ( () )}
| _1 = custom
    {         ( () )}

param:
  _1 = T_PARAM _2 = Desc
    {    (
      (* isolate the identificator *)
      (* we only look for simple id, no pattern nor tuples *)
      let s = _2 in
      match Str.split (Str.regexp (blank^"+")) s with
        []
      | _ :: [] ->
          raise (Failure "usage: @param id description")
      | id :: _ ->
          print_DEBUG ("Identificator "^id);
          let reg = identchar^"+" in
          print_DEBUG ("reg="^reg);
          if Str.string_match (Str.regexp reg) id 0 then
            let remain = String.sub s (String.length id) ((String.length s) - (String.length id)) in
            print_DEBUG ("T_PARAM Desc remain="^remain);
            let remain2 = Str.replace_first (Str.regexp ("^"^blank^"+")) "" remain in
            params := !params @ [(id, remain2)]
          else
            raise (Failure (id^" is not a valid parameter identificator in \"@param "^s^"\""))
    )}

author:
  _1 = T_AUTHOR _2 = Desc
    {                  ( authors := !authors @ [ _2 ] )}

version:
  _1 = T_VERSION _2 = Desc
    {                   ( version := Some _2 )}

see:
  _1 = T_SEE _2 = Desc
    {               ( sees := !sees @ [_2] )}

since:
  _1 = T_SINCE _2 = Desc
    {                 ( since := Some _2 )}

deprecated:
  _1 = T_DEPRECATED _2 = Desc
    {                      ( deprecated := Some _2 )}

raise_exc:
  _1 = T_RAISES _2 = Desc
    {    (
      (* isolate the exception construtor name *)
      let s = _2 in
      match Str.split (Str.regexp (blank^"+")) s with
        []
      | _ :: [] ->
          raise (Failure "usage: @raise Exception description")
      | id :: _ ->
          print_DEBUG ("exception "^id);
          let reg = uppercase^identchar^"*"^"\\(\\."^uppercase^identchar^"*\\)*" in
          print_DEBUG ("reg="^reg);
          if Str.string_match (Str.regexp reg) id 0 then
            let remain = String.sub s (String.length id) ((String.length s) - (String.length id)) in
            let remain2 = Str.replace_first (Str.regexp ("^"^blank^"+")) "" remain in
            raised_exceptions := !raised_exceptions @ [(id, remain2)]
          else
            raise (Failure (id^" is not a valid exception constructor in \"@raise "^s^"\""))
    )}

return:
  _1 = T_RETURN _2 = Desc
    {                  ( return_value := Some _2 )}

custom:
  _1 = T_CUSTOM _2 = Desc
    {                  ( customs := !customs @ [(_1, _2)] )}

%%


