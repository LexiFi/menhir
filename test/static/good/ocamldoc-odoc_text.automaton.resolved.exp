State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On EOF shift to state 119
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 120
-- On string shift to state 80
-- On main shift to state 122
## Reductions:

State 1:
## Known stack suffix:
## VERB
## LR(1) items:
text_element -> VERB . string END_VERB [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 4
## Reductions:

State 2:
## Known stack suffix:
## Char
## LR(1) items:
string -> Char . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITEM ITALIC INDEX_LIST EXC_REF EOF ENUM END_VERB END_SHORTCUT_LIST END_LATEX END_CODE_PRE END_CODE END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
string -> Char . string [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITEM ITALIC INDEX_LIST EXC_REF EOF ENUM END_VERB END_SHORTCUT_LIST END_LATEX END_CODE_PRE END_CODE END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 3
## Reductions:
-- On VERB reduce production string -> Char
-- On VAL_REF reduce production string -> Char
-- On Title reduce production string -> Char
-- On TYP_REF reduce production string -> Char
-- On SUPERSCRIPT reduce production string -> Char
-- On SUBSCRIPT reduce production string -> Char
-- On SHORTCUT_LIST_ITEM reduce production string -> Char
-- On SHORTCUT_ENUM_ITEM reduce production string -> Char
-- On SEC_REF reduce production string -> Char
-- On RIGHT reduce production string -> Char
-- On MOD_REF reduce production string -> Char
-- On MOD_LIST_REF reduce production string -> Char
-- On MODT_REF reduce production string -> Char
-- On MET_REF reduce production string -> Char
-- On LIST reduce production string -> Char
-- On LINK reduce production string -> Char
-- On LEFT reduce production string -> Char
-- On LATEX reduce production string -> Char
-- On ITEM reduce production string -> Char
-- On ITALIC reduce production string -> Char
-- On INDEX_LIST reduce production string -> Char
-- On EXC_REF reduce production string -> Char
-- On EOF reduce production string -> Char
-- On ENUM reduce production string -> Char
-- On END_VERB reduce production string -> Char
-- On END_SHORTCUT_LIST reduce production string -> Char
-- On END_LATEX reduce production string -> Char
-- On END_CODE_PRE reduce production string -> Char
-- On END_CODE reduce production string -> Char
-- On END reduce production string -> Char
-- On EMP reduce production string -> Char
-- On ELE_REF reduce production string -> Char
-- On CODE_PRE reduce production string -> Char
-- On CODE reduce production string -> Char
-- On CLT_REF reduce production string -> Char
-- On CLA_REF reduce production string -> Char
-- On CENTER reduce production string -> Char
-- On BOLD reduce production string -> Char
-- On BLANK_LINE reduce production string -> Char
-- On BEGIN_SHORTCUT_LIST_ITEM reduce production string -> Char
-- On BEGIN_SHORTCUT_ENUM_ITEM reduce production string -> Char
-- On ATT_REF reduce production string -> Char

State 3:
## Known stack suffix:
## Char string
## LR(1) items:
string -> Char string . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITEM ITALIC INDEX_LIST EXC_REF EOF ENUM END_VERB END_SHORTCUT_LIST END_LATEX END_CODE_PRE END_CODE END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string -> Char string

State 4:
## Known stack suffix:
## VERB string
## LR(1) items:
text_element -> VERB string . END_VERB [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END_VERB shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## VERB string END_VERB
## LR(1) items:
text_element -> VERB string END_VERB . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> VERB string END_VERB

State 6:
## Known stack suffix:
## VAL_REF
## LR(1) items:
text_element -> VAL_REF . string END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## VAL_REF string
## LR(1) items:
text_element -> VAL_REF string . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## VAL_REF string END
## LR(1) items:
text_element -> VAL_REF string END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> VAL_REF string END

State 9:
## Known stack suffix:
## Title
## LR(1) items:
text_element -> Title . text END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 117
-- On string shift to state 80
## Reductions:

State 10:
## Known stack suffix:
## TYP_REF
## LR(1) items:
text_element -> TYP_REF . string END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## TYP_REF string
## LR(1) items:
text_element -> TYP_REF string . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## TYP_REF string END
## LR(1) items:
text_element -> TYP_REF string END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> TYP_REF string END

State 13:
## Known stack suffix:
## SUPERSCRIPT
## LR(1) items:
text_element -> SUPERSCRIPT . text END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 115
-- On string shift to state 80
## Reductions:

State 14:
## Known stack suffix:
## SUBSCRIPT
## LR(1) items:
text_element -> SUBSCRIPT . text END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 113
-- On string shift to state 80
## Reductions:

State 15:
## Known stack suffix:
## SEC_REF
## LR(1) items:
text_element -> SEC_REF . string END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## SEC_REF string
## LR(1) items:
text_element -> SEC_REF string . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## SEC_REF string END
## LR(1) items:
text_element -> SEC_REF string END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> SEC_REF string END

State 18:
## Known stack suffix:
## RIGHT
## LR(1) items:
text_element -> RIGHT . text END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 111
-- On string shift to state 80
## Reductions:

State 19:
## Known stack suffix:
## MOD_REF
## LR(1) items:
text_element -> MOD_REF . string END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## MOD_REF string
## LR(1) items:
text_element -> MOD_REF string . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## MOD_REF string END
## LR(1) items:
text_element -> MOD_REF string END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> MOD_REF string END

State 22:
## Known stack suffix:
## MOD_LIST_REF
## LR(1) items:
text_element -> MOD_LIST_REF . string END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## MOD_LIST_REF string
## LR(1) items:
text_element -> MOD_LIST_REF string . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## MOD_LIST_REF string END
## LR(1) items:
text_element -> MOD_LIST_REF string END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> MOD_LIST_REF string END

State 25:
## Known stack suffix:
## MODT_REF
## LR(1) items:
text_element -> MODT_REF . string END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## MODT_REF string
## LR(1) items:
text_element -> MODT_REF string . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## MODT_REF string END
## LR(1) items:
text_element -> MODT_REF string END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> MODT_REF string END

State 28:
## Known stack suffix:
## MET_REF
## LR(1) items:
text_element -> MET_REF . string END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## MET_REF string
## LR(1) items:
text_element -> MET_REF string . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## MET_REF string END
## LR(1) items:
text_element -> MET_REF string END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> MET_REF string END

State 31:
## Known stack suffix:
## LIST
## LR(1) items:
text_element -> LIST . ocamldoc_odoc_text_list END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On ITEM shift to state 32
-- On Char shift to state 2
-- On string shift to state 46
-- On ocamldoc_odoc_text_list shift to state 109
-- On item shift to state 49
## Reductions:

State 32:
## Known stack suffix:
## ITEM
## LR(1) items:
item -> ITEM . text END [ ITEM END Char ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 107
-- On string shift to state 80
## Reductions:

State 33:
## Known stack suffix:
## LINK
## LR(1) items:
text_element -> LINK . string END text END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## LINK string
## LR(1) items:
text_element -> LINK string . END text END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## LINK string END
## LR(1) items:
text_element -> LINK string END . text END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 105
-- On string shift to state 80
## Reductions:

State 36:
## Known stack suffix:
## LEFT
## LR(1) items:
text_element -> LEFT . text END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 103
-- On string shift to state 80
## Reductions:

State 37:
## Known stack suffix:
## LATEX
## LR(1) items:
text_element -> LATEX . string END_LATEX [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## LATEX string
## LR(1) items:
text_element -> LATEX string . END_LATEX [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END_LATEX shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## LATEX string END_LATEX
## LR(1) items:
text_element -> LATEX string END_LATEX . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> LATEX string END_LATEX

State 40:
## Known stack suffix:
## ITALIC
## LR(1) items:
text_element -> ITALIC . text END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 101
-- On string shift to state 80
## Reductions:

State 41:
## Known stack suffix:
## INDEX_LIST
## LR(1) items:
text_element -> INDEX_LIST . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> INDEX_LIST

State 42:
## Known stack suffix:
## EXC_REF
## LR(1) items:
text_element -> EXC_REF . string END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## EXC_REF string
## LR(1) items:
text_element -> EXC_REF string . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## EXC_REF string END
## LR(1) items:
text_element -> EXC_REF string END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> EXC_REF string END

State 45:
## Known stack suffix:
## ENUM
## LR(1) items:
text_element -> ENUM . ocamldoc_odoc_text_list END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On ITEM shift to state 32
-- On Char shift to state 2
-- On string shift to state 46
-- On ocamldoc_odoc_text_list shift to state 51
-- On item shift to state 49
## Reductions:

State 46:
## Known stack suffix:
## string
## LR(1) items:
ocamldoc_odoc_text_list -> string . [ END Char ]
ocamldoc_odoc_text_list -> string . ocamldoc_odoc_text_list [ END Char ]
## Transitions:
-- On ITEM shift to state 32
-- On Char shift to state 2
-- On string shift to state 46
-- On ocamldoc_odoc_text_list shift to state 47
-- On item shift to state 49
## Reductions:
-- On END reduce production ocamldoc_odoc_text_list -> string

State 47:
## Known stack suffix:
## string ocamldoc_odoc_text_list
## LR(1) items:
ocamldoc_odoc_text_list -> string ocamldoc_odoc_text_list . [ END Char ]
ocamldoc_odoc_text_list -> ocamldoc_odoc_text_list . string [ END Char ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 48
## Reductions:
-- On END reduce production ocamldoc_odoc_text_list -> string ocamldoc_odoc_text_list

State 48:
## Known stack suffix:
## ocamldoc_odoc_text_list string
## LR(1) items:
ocamldoc_odoc_text_list -> ocamldoc_odoc_text_list string . [ END Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ocamldoc_odoc_text_list -> ocamldoc_odoc_text_list string

State 49:
## Known stack suffix:
## item
## LR(1) items:
ocamldoc_odoc_text_list -> item . [ END Char ]
ocamldoc_odoc_text_list -> item . ocamldoc_odoc_text_list [ END Char ]
## Transitions:
-- On ITEM shift to state 32
-- On Char shift to state 2
-- On string shift to state 46
-- On ocamldoc_odoc_text_list shift to state 50
-- On item shift to state 49
## Reductions:
-- On END reduce production ocamldoc_odoc_text_list -> item

State 50:
## Known stack suffix:
## item ocamldoc_odoc_text_list
## LR(1) items:
ocamldoc_odoc_text_list -> ocamldoc_odoc_text_list . string [ END Char ]
ocamldoc_odoc_text_list -> item ocamldoc_odoc_text_list . [ END Char ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 48
## Reductions:
-- On END reduce production ocamldoc_odoc_text_list -> item ocamldoc_odoc_text_list

State 51:
## Known stack suffix:
## ENUM ocamldoc_odoc_text_list
## LR(1) items:
ocamldoc_odoc_text_list -> ocamldoc_odoc_text_list . string [ END Char ]
text_element -> ENUM ocamldoc_odoc_text_list . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 52
-- On Char shift to state 2
-- On string shift to state 48
## Reductions:

State 52:
## Known stack suffix:
## ENUM ocamldoc_odoc_text_list END
## LR(1) items:
text_element -> ENUM ocamldoc_odoc_text_list END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> ENUM ocamldoc_odoc_text_list END

State 53:
## Known stack suffix:
## EMP
## LR(1) items:
text_element -> EMP . text END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 99
-- On string shift to state 80
## Reductions:

State 54:
## Known stack suffix:
## ELE_REF
## LR(1) items:
text_element -> ELE_REF . string END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## ELE_REF string
## LR(1) items:
text_element -> ELE_REF string . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## ELE_REF string END
## LR(1) items:
text_element -> ELE_REF string END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> ELE_REF string END

State 57:
## Known stack suffix:
## CODE_PRE
## LR(1) items:
text_element -> CODE_PRE . string END_CODE_PRE [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## CODE_PRE string
## LR(1) items:
text_element -> CODE_PRE string . END_CODE_PRE [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END_CODE_PRE shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## CODE_PRE string END_CODE_PRE
## LR(1) items:
text_element -> CODE_PRE string END_CODE_PRE . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> CODE_PRE string END_CODE_PRE

State 60:
## Known stack suffix:
## CODE
## LR(1) items:
text_element -> CODE . string END_CODE [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## CODE string
## LR(1) items:
text_element -> CODE string . END_CODE [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END_CODE shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## CODE string END_CODE
## LR(1) items:
text_element -> CODE string END_CODE . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> CODE string END_CODE

State 63:
## Known stack suffix:
## CLT_REF
## LR(1) items:
text_element -> CLT_REF . string END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## CLT_REF string
## LR(1) items:
text_element -> CLT_REF string . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## CLT_REF string END
## LR(1) items:
text_element -> CLT_REF string END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> CLT_REF string END

State 66:
## Known stack suffix:
## CLA_REF
## LR(1) items:
text_element -> CLA_REF . string END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## CLA_REF string
## LR(1) items:
text_element -> CLA_REF string . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## CLA_REF string END
## LR(1) items:
text_element -> CLA_REF string END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> CLA_REF string END

State 69:
## Known stack suffix:
## CENTER
## LR(1) items:
text_element -> CENTER . text END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 97
-- On string shift to state 80
## Reductions:

State 70:
## Known stack suffix:
## BOLD
## LR(1) items:
text_element -> BOLD . text END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 95
-- On string shift to state 80
## Reductions:

State 71:
## Known stack suffix:
## BLANK_LINE
## LR(1) items:
text_element -> BLANK_LINE . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> BLANK_LINE

State 72:
## Known stack suffix:
## BEGIN_SHORTCUT_LIST_ITEM
## LR(1) items:
text_element -> BEGIN_SHORTCUT_LIST_ITEM . shortcut_list END_SHORTCUT_LIST [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
text_element -> BEGIN_SHORTCUT_LIST_ITEM . shortcut_list EOF [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 88
-- On string shift to state 80
-- On shortcut_list shift to state 92
## Reductions:

State 73:
## Known stack suffix:
## BEGIN_SHORTCUT_ENUM_ITEM
## LR(1) items:
text_element -> BEGIN_SHORTCUT_ENUM_ITEM . shortcut_enum END_SHORTCUT_LIST [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
text_element -> BEGIN_SHORTCUT_ENUM_ITEM . shortcut_enum EOF [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 81
-- On string shift to state 80
-- On shortcut_enum shift to state 85
## Reductions:

State 74:
## Known stack suffix:
## ATT_REF
## LR(1) items:
text_element -> ATT_REF . string END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On Char shift to state 2
-- On string shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## ATT_REF string
## LR(1) items:
text_element -> ATT_REF string . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## ATT_REF string END
## LR(1) items:
text_element -> ATT_REF string END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> ATT_REF string END

State 77:
## Known stack suffix:
## text_element_list
## LR(1) items:
text -> text_element_list . [ SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM EOF END_SHORTCUT_LIST END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text -> text_element_list

State 78:
## Known stack suffix:
## text_element
## LR(1) items:
text_element_list -> text_element . [ SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM EOF END_SHORTCUT_LIST END ]
text_element_list -> text_element . text_element_list [ SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM EOF END_SHORTCUT_LIST END ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 79
-- On text_element shift to state 78
-- On string shift to state 80
## Reductions:
-- On SHORTCUT_LIST_ITEM reduce production text_element_list -> text_element
-- On SHORTCUT_ENUM_ITEM reduce production text_element_list -> text_element
-- On EOF reduce production text_element_list -> text_element
-- On END_SHORTCUT_LIST reduce production text_element_list -> text_element
-- On END reduce production text_element_list -> text_element

State 79:
## Known stack suffix:
## text_element text_element_list
## LR(1) items:
text_element_list -> text_element text_element_list . [ SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM EOF END_SHORTCUT_LIST END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element_list -> text_element text_element_list

State 80:
## Known stack suffix:
## string
## LR(1) items:
text_element -> string . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> string

State 81:
## Known stack suffix:
## text
## LR(1) items:
shortcut_enum -> text . shortcut_enum2 [ EOF END_SHORTCUT_LIST ]
shortcut_enum -> text . [ EOF END_SHORTCUT_LIST ]
## Transitions:
-- On SHORTCUT_ENUM_ITEM shift to state 82
-- On shortcut_enum2 shift to state 84
## Reductions:
-- On EOF reduce production shortcut_enum -> text
-- On END_SHORTCUT_LIST reduce production shortcut_enum -> text

State 82:
## Known stack suffix:
## SHORTCUT_ENUM_ITEM
## LR(1) items:
shortcut_enum2 -> SHORTCUT_ENUM_ITEM . shortcut_enum [ EOF END_SHORTCUT_LIST ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 81
-- On string shift to state 80
-- On shortcut_enum shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## SHORTCUT_ENUM_ITEM shortcut_enum
## LR(1) items:
shortcut_enum2 -> SHORTCUT_ENUM_ITEM shortcut_enum . [ EOF END_SHORTCUT_LIST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production shortcut_enum2 -> SHORTCUT_ENUM_ITEM shortcut_enum

State 84:
## Known stack suffix:
## text shortcut_enum2
## LR(1) items:
shortcut_enum -> text shortcut_enum2 . [ EOF END_SHORTCUT_LIST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production shortcut_enum -> text shortcut_enum2

State 85:
## Known stack suffix:
## BEGIN_SHORTCUT_ENUM_ITEM shortcut_enum
## LR(1) items:
text_element -> BEGIN_SHORTCUT_ENUM_ITEM shortcut_enum . END_SHORTCUT_LIST [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
text_element -> BEGIN_SHORTCUT_ENUM_ITEM shortcut_enum . EOF [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On EOF shift to state 86
-- On END_SHORTCUT_LIST shift to state 87
## Reductions:

State 86:
## Known stack suffix:
## BEGIN_SHORTCUT_ENUM_ITEM shortcut_enum EOF
## LR(1) items:
text_element -> BEGIN_SHORTCUT_ENUM_ITEM shortcut_enum EOF . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> BEGIN_SHORTCUT_ENUM_ITEM shortcut_enum EOF

State 87:
## Known stack suffix:
## BEGIN_SHORTCUT_ENUM_ITEM shortcut_enum END_SHORTCUT_LIST
## LR(1) items:
text_element -> BEGIN_SHORTCUT_ENUM_ITEM shortcut_enum END_SHORTCUT_LIST . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> BEGIN_SHORTCUT_ENUM_ITEM shortcut_enum END_SHORTCUT_LIST

State 88:
## Known stack suffix:
## text
## LR(1) items:
shortcut_list -> text . shortcut_list2 [ EOF END_SHORTCUT_LIST ]
shortcut_list -> text . [ EOF END_SHORTCUT_LIST ]
## Transitions:
-- On SHORTCUT_LIST_ITEM shift to state 89
-- On shortcut_list2 shift to state 91
## Reductions:
-- On EOF reduce production shortcut_list -> text
-- On END_SHORTCUT_LIST reduce production shortcut_list -> text

State 89:
## Known stack suffix:
## SHORTCUT_LIST_ITEM
## LR(1) items:
shortcut_list2 -> SHORTCUT_LIST_ITEM . shortcut_list [ EOF END_SHORTCUT_LIST ]
## Transitions:
-- On VERB shift to state 1
-- On VAL_REF shift to state 6
-- On Title shift to state 9
-- On TYP_REF shift to state 10
-- On SUPERSCRIPT shift to state 13
-- On SUBSCRIPT shift to state 14
-- On SEC_REF shift to state 15
-- On RIGHT shift to state 18
-- On MOD_REF shift to state 19
-- On MOD_LIST_REF shift to state 22
-- On MODT_REF shift to state 25
-- On MET_REF shift to state 28
-- On LIST shift to state 31
-- On LINK shift to state 33
-- On LEFT shift to state 36
-- On LATEX shift to state 37
-- On ITALIC shift to state 40
-- On INDEX_LIST shift to state 41
-- On EXC_REF shift to state 42
-- On ENUM shift to state 45
-- On EMP shift to state 53
-- On ELE_REF shift to state 54
-- On Char shift to state 2
-- On CODE_PRE shift to state 57
-- On CODE shift to state 60
-- On CLT_REF shift to state 63
-- On CLA_REF shift to state 66
-- On CENTER shift to state 69
-- On BOLD shift to state 70
-- On BLANK_LINE shift to state 71
-- On BEGIN_SHORTCUT_LIST_ITEM shift to state 72
-- On BEGIN_SHORTCUT_ENUM_ITEM shift to state 73
-- On ATT_REF shift to state 74
-- On text_element_list shift to state 77
-- On text_element shift to state 78
-- On text shift to state 88
-- On string shift to state 80
-- On shortcut_list shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## SHORTCUT_LIST_ITEM shortcut_list
## LR(1) items:
shortcut_list2 -> SHORTCUT_LIST_ITEM shortcut_list . [ EOF END_SHORTCUT_LIST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production shortcut_list2 -> SHORTCUT_LIST_ITEM shortcut_list

State 91:
## Known stack suffix:
## text shortcut_list2
## LR(1) items:
shortcut_list -> text shortcut_list2 . [ EOF END_SHORTCUT_LIST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production shortcut_list -> text shortcut_list2

State 92:
## Known stack suffix:
## BEGIN_SHORTCUT_LIST_ITEM shortcut_list
## LR(1) items:
text_element -> BEGIN_SHORTCUT_LIST_ITEM shortcut_list . END_SHORTCUT_LIST [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
text_element -> BEGIN_SHORTCUT_LIST_ITEM shortcut_list . EOF [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On EOF shift to state 93
-- On END_SHORTCUT_LIST shift to state 94
## Reductions:

State 93:
## Known stack suffix:
## BEGIN_SHORTCUT_LIST_ITEM shortcut_list EOF
## LR(1) items:
text_element -> BEGIN_SHORTCUT_LIST_ITEM shortcut_list EOF . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> BEGIN_SHORTCUT_LIST_ITEM shortcut_list EOF

State 94:
## Known stack suffix:
## BEGIN_SHORTCUT_LIST_ITEM shortcut_list END_SHORTCUT_LIST
## LR(1) items:
text_element -> BEGIN_SHORTCUT_LIST_ITEM shortcut_list END_SHORTCUT_LIST . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> BEGIN_SHORTCUT_LIST_ITEM shortcut_list END_SHORTCUT_LIST

State 95:
## Known stack suffix:
## BOLD text
## LR(1) items:
text_element -> BOLD text . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## BOLD text END
## LR(1) items:
text_element -> BOLD text END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> BOLD text END

State 97:
## Known stack suffix:
## CENTER text
## LR(1) items:
text_element -> CENTER text . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## CENTER text END
## LR(1) items:
text_element -> CENTER text END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> CENTER text END

State 99:
## Known stack suffix:
## EMP text
## LR(1) items:
text_element -> EMP text . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## EMP text END
## LR(1) items:
text_element -> EMP text END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> EMP text END

State 101:
## Known stack suffix:
## ITALIC text
## LR(1) items:
text_element -> ITALIC text . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## ITALIC text END
## LR(1) items:
text_element -> ITALIC text END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> ITALIC text END

State 103:
## Known stack suffix:
## LEFT text
## LR(1) items:
text_element -> LEFT text . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## LEFT text END
## LR(1) items:
text_element -> LEFT text END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> LEFT text END

State 105:
## Known stack suffix:
## LINK string END text
## LR(1) items:
text_element -> LINK string END text . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## LINK string END text END
## LR(1) items:
text_element -> LINK string END text END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> LINK string END text END

State 107:
## Known stack suffix:
## ITEM text
## LR(1) items:
item -> ITEM text . END [ ITEM END Char ]
## Transitions:
-- On END shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## ITEM text END
## LR(1) items:
item -> ITEM text END . [ ITEM END Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production item -> ITEM text END

State 109:
## Known stack suffix:
## LIST ocamldoc_odoc_text_list
## LR(1) items:
ocamldoc_odoc_text_list -> ocamldoc_odoc_text_list . string [ END Char ]
text_element -> LIST ocamldoc_odoc_text_list . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 110
-- On Char shift to state 2
-- On string shift to state 48
## Reductions:

State 110:
## Known stack suffix:
## LIST ocamldoc_odoc_text_list END
## LR(1) items:
text_element -> LIST ocamldoc_odoc_text_list END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> LIST ocamldoc_odoc_text_list END

State 111:
## Known stack suffix:
## RIGHT text
## LR(1) items:
text_element -> RIGHT text . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## RIGHT text END
## LR(1) items:
text_element -> RIGHT text END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> RIGHT text END

State 113:
## Known stack suffix:
## SUBSCRIPT text
## LR(1) items:
text_element -> SUBSCRIPT text . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## SUBSCRIPT text END
## LR(1) items:
text_element -> SUBSCRIPT text END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> SUBSCRIPT text END

State 115:
## Known stack suffix:
## SUPERSCRIPT text
## LR(1) items:
text_element -> SUPERSCRIPT text . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## SUPERSCRIPT text END
## LR(1) items:
text_element -> SUPERSCRIPT text END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> SUPERSCRIPT text END

State 117:
## Known stack suffix:
## Title text
## LR(1) items:
text_element -> Title text . END [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
-- On END shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## Title text END
## LR(1) items:
text_element -> Title text END . [ VERB VAL_REF Title TYP_REF SUPERSCRIPT SUBSCRIPT SHORTCUT_LIST_ITEM SHORTCUT_ENUM_ITEM SEC_REF RIGHT MOD_REF MOD_LIST_REF MODT_REF MET_REF LIST LINK LEFT LATEX ITALIC INDEX_LIST EXC_REF EOF ENUM END_SHORTCUT_LIST END EMP ELE_REF Char CODE_PRE CODE CLT_REF CLA_REF CENTER BOLD BLANK_LINE BEGIN_SHORTCUT_LIST_ITEM BEGIN_SHORTCUT_ENUM_ITEM ATT_REF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production text_element -> Title text END

State 119:
## Known stack suffix:
## EOF
## LR(1) items:
main -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production main -> EOF

State 120:
## Known stack suffix:
## text
## LR(1) items:
main -> text . EOF [ # ]
## Transitions:
-- On EOF shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## text EOF
## LR(1) items:
main -> text EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production main -> text EOF

State 122:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept main

