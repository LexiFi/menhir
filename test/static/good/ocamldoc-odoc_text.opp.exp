Note: the nonterminal symbol list (from ocamldoc-odoc_text.mly) is renamed ocamldoc_odoc_text_list.
File "ocamldoc-odoc_text.mly", line 30, characters 7-12:
Warning: the token ERROR is unused.
%{
(***********************************************************************)
(*                             OCamldoc                                *)
(*                                                                     *)
(*            Maxence Guesdon, projet Cristal, INRIA Rocquencourt      *)
(*                                                                     *)
(*  Copyright 2001 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the Q Public License version 1.0.               *)
(*                                                                     *)
(***********************************************************************)

(* $Id: odoc_text_parser.mly,v 1.4 2004/05/23 10:41:50 guesdon Exp $ *)

open Odoc_types

let identchar =
  "[A-Z a-z_\192-\214\216-\246\248-\255'0-9]"
let blank = "[ \010\013\009\012]"

let remove_beginning_blanks s =
  Str.global_replace (Str.regexp ("^"^blank^"+")) "" s

let remove_trailing_blanks s =
  Str.global_replace (Str.regexp (blank^"+$")) "" s

let print_DEBUG s = print_string s; print_newline ()
%}
%start main
%token ATT_REF
%token BEGIN_SHORTCUT_ENUM_ITEM
%token BEGIN_SHORTCUT_LIST_ITEM
%token BLANK_LINE
%token BOLD
%token CENTER
%token CLA_REF
%token CLT_REF
%token CODE
%token CODE_PRE
%token <string> Char
%token ELE_REF
%token EMP
%token END
%token END_CODE
%token END_CODE_PRE
%token END_LATEX
%token END_SHORTCUT_LIST
%token END_VERB
%token ENUM
%token EOF
%token ERROR
%token EXC_REF
%token INDEX_LIST
%token ITALIC
%token ITEM
%token LATEX
%token LEFT
%token LINK
%token LIST
%token MET_REF
%token MODT_REF
%token MOD_LIST_REF
%token MOD_REF
%token RIGHT
%token SEC_REF
%token SHORTCUT_ENUM_ITEM
%token SHORTCUT_LIST_ITEM
%token SUBSCRIPT
%token SUPERSCRIPT
%token TYP_REF
%token <int * string option> Title
%token VAL_REF
%token VERB
%type <Odoc_types.text> main
%%

main:
  _1 = text _2 = EOF
    {           ( _1 )}
| _1 = EOF
    {      ( [Raw ""] )}

text:
  _1 = text_element_list
    {                    ( _1 )}

text_element_list:
  _1 = text_element
    {               ( [ _1 ] )}
| _1 = text_element _2 = text_element_list
    {                                 ( _1 :: _2 )}

text_element:
  _1 = Title _2 = text _3 = END
    {                 ( let n, l_opt = _1 in Title (n, l_opt, _2) )}
| _1 = BOLD _2 = text _3 = END
    {                ( Bold _2 )}
| _1 = ITALIC _2 = text _3 = END
    {                  ( Italic _2 )}
| _1 = EMP _2 = text _3 = END
    {               ( Emphasize _2 )}
| _1 = SUPERSCRIPT _2 = text _3 = END
    {                       ( Superscript _2 )}
| _1 = SUBSCRIPT _2 = text _3 = END
    {                     ( Subscript _2 )}
| _1 = CENTER _2 = text _3 = END
    {                  ( Center _2 )}
| _1 = LEFT _2 = text _3 = END
    {                ( Left _2 )}
| _1 = RIGHT _2 = text _3 = END
    {                 ( Right _2 )}
| _1 = LIST _2 = ocamldoc_odoc_text_list _3 = END
    {                ( List _2 )}
| _1 = ENUM _2 = ocamldoc_odoc_text_list _3 = END
    {                ( Enum _2 )}
| _1 = CODE _2 = string _3 = END_CODE
    {                       ( Code _2 )}
| _1 = CODE_PRE _2 = string _3 = END_CODE_PRE
    {                               ( CodePre _2 )}
| _1 = ELE_REF _2 = string _3 = END
    {                     (
      let s2 = remove_beginning_blanks _2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, None)
     )}
| _1 = VAL_REF _2 = string _3 = END
    {                     (
      let s2 = remove_beginning_blanks _2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_value)
     )}
| _1 = TYP_REF _2 = string _3 = END
    {                     (
      let s2 = remove_beginning_blanks _2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_type)
     )}
| _1 = EXC_REF _2 = string _3 = END
    {                     (
      let s2 = remove_beginning_blanks _2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_exception)
     )}
| _1 = MOD_REF _2 = string _3 = END
    {                     (
      let s2 = remove_beginning_blanks _2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_module)
     )}
| _1 = MODT_REF _2 = string _3 = END
    {                      (
      let s2 = remove_beginning_blanks _2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_module_type)
     )}
| _1 = CLA_REF _2 = string _3 = END
    {                     (
      let s2 = remove_beginning_blanks _2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_class)
     )}
| _1 = CLT_REF _2 = string _3 = END
    {                     (
      let s2 = remove_beginning_blanks _2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_class_type)
     )}
| _1 = ATT_REF _2 = string _3 = END
    {                     (
      let s2 = remove_beginning_blanks _2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_attribute)
     )}
| _1 = MET_REF _2 = string _3 = END
    {                     (
      let s2 = remove_beginning_blanks _2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_method)
     )}
| _1 = SEC_REF _2 = string _3 = END
    {                     (
      let s2 = remove_beginning_blanks _2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some (RK_section []))
     )}
| _1 = MOD_LIST_REF _2 = string _3 = END
    {                          (
      let s2 = remove_beginning_blanks _2 in
      let s3 = remove_trailing_blanks s2 in
      let l = Odoc_misc.split_with_blanks s3 in
      Module_list l
     )}
| _1 = INDEX_LIST
    {             ( Index_list )}
| _1 = VERB _2 = string _3 = END_VERB
    {                       ( Verbatim _2 )}
| _1 = LATEX _2 = string _3 = END_LATEX
    {                         ( Latex _2 )}
| _1 = LINK _2 = string _3 = END _4 = text _5 = END
    {                           ( Link (_2, _4) )}
| _1 = BLANK_LINE
    {             ( Newline )}
| _1 = BEGIN_SHORTCUT_LIST_ITEM _2 = shortcut_list _3 = END_SHORTCUT_LIST
    {                                                           ( List _2 )}
| _1 = BEGIN_SHORTCUT_LIST_ITEM _2 = shortcut_list _3 = EOF
    {                                             ( List _2 )}
| _1 = BEGIN_SHORTCUT_ENUM_ITEM _2 = shortcut_enum _3 = END_SHORTCUT_LIST
    {                                                           ( Enum _2 )}
| _1 = BEGIN_SHORTCUT_ENUM_ITEM _2 = shortcut_enum _3 = EOF
    {                                             ( Enum _2 )}
| _1 = string
    {         ( Raw _1 )}

ocamldoc_odoc_text_list:
  _1 = string
    {         ( [] (* A VOIR : un test pour voir qu'il n'y a que des blancs *) )}
| _1 = string _2 = ocamldoc_odoc_text_list
    {              ( _2 )}
| _1 = ocamldoc_odoc_text_list _2 = string
    {               ( _1 )}
| _1 = item
    {       ( [ _1 ] )}
| _1 = item _2 = ocamldoc_odoc_text_list
    {            ( _1 :: _2 )}

item:
  _1 = ITEM _2 = text _3 = END
    {                  ( _2 )}

shortcut_list:
  _1 = text _2 = shortcut_list2
    {                         ( _1 :: _2 )}
| _1 = text
    {       ( [ _1 ] )}

shortcut_list2:
  _1 = SHORTCUT_LIST_ITEM _2 = shortcut_list
    {                                   ( _2 )}

shortcut_enum:
  _1 = text _2 = shortcut_enum2
    {                         ( _1 :: _2 )}
| _1 = text
    {       ( [ _1 ] )}

shortcut_enum2:
  _1 = SHORTCUT_ENUM_ITEM _2 = shortcut_enum
    {                                   ( _2 )}

string:
  _1 = Char
    {         ( _1 )}
| _1 = Char _2 = string
    {              ( _1^_2 )}

%%


