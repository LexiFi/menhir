State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On Newline shift to state 1
-- On Name shift to state 2
-- On main shift to state 14
-- On components shift to state 15
-- On component shift to state 12
## Reductions:
-- On Eof reduce production components ->

State 1:
## Known stack suffix:
## Newline
## LR(1) items:
components -> Newline . components [ Eof ]
## Transitions:
-- On Newline shift to state 1
-- On Name shift to state 2
-- On components shift to state 11
-- On component shift to state 12
## Reductions:
-- On Eof reduce production components ->

State 2:
## Known stack suffix:
## Name
## LR(1) items:
component -> Name . options Newline [ Newline Name Eof ]
## Transitions:
-- On Name shift to state 3
-- On options shift to state 9
## Reductions:
-- On Newline reduce production options ->

State 3:
## Known stack suffix:
## Name
## LR(1) items:
options -> Name . Equal name_string options [ Newline ]
## Transitions:
-- On Equal shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## Name Equal
## LR(1) items:
options -> Name Equal . name_string options [ Newline ]
## Transitions:
-- On String shift to state 5
-- On Name shift to state 6
-- On name_string shift to state 7
## Reductions:

State 5:
## Known stack suffix:
## String
## LR(1) items:
name_string -> String . [ Newline Name ]
## Transitions:
## Reductions:
-- On Newline reduce production name_string -> String
-- On Name reduce production name_string -> String

State 6:
## Known stack suffix:
## Name
## LR(1) items:
name_string -> Name . [ Newline Name ]
## Transitions:
## Reductions:
-- On Newline reduce production name_string -> Name
-- On Name reduce production name_string -> Name

State 7:
## Known stack suffix:
## Name Equal name_string
## LR(1) items:
options -> Name Equal name_string . options [ Newline ]
## Transitions:
-- On Name shift to state 3
-- On options shift to state 8
## Reductions:
-- On Newline reduce production options ->

State 8:
## Known stack suffix:
## Name Equal name_string options
## LR(1) items:
options -> Name Equal name_string options . [ Newline ]
## Transitions:
## Reductions:
-- On Newline reduce production options -> Name Equal name_string options

State 9:
## Known stack suffix:
## Name options
## LR(1) items:
component -> Name options . Newline [ Newline Name Eof ]
## Transitions:
-- On Newline shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## Name options Newline
## LR(1) items:
component -> Name options Newline . [ Newline Name Eof ]
## Transitions:
## Reductions:
-- On Newline reduce production component -> Name options Newline
-- On Name reduce production component -> Name options Newline
-- On Eof reduce production component -> Name options Newline

State 11:
## Known stack suffix:
## Newline components
## LR(1) items:
components -> Newline components . [ Eof ]
## Transitions:
## Reductions:
-- On Eof reduce production components -> Newline components

State 12:
## Known stack suffix:
## component
## LR(1) items:
components -> component . components [ Eof ]
## Transitions:
-- On Newline shift to state 1
-- On Name shift to state 2
-- On components shift to state 13
-- On component shift to state 12
## Reductions:
-- On Eof reduce production components ->

State 13:
## Known stack suffix:
## component components
## LR(1) items:
components -> component components . [ Eof ]
## Transitions:
## Reductions:
-- On Eof reduce production components -> component components

State 14:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On # accept main

State 15:
## Known stack suffix:
## components
## LR(1) items:
main -> components . Eof [ # ]
## Transitions:
-- On Eof shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## components Eof
## LR(1) items:
main -> components Eof . [ # ]
## Transitions:
## Reductions:
-- On # reduce production main -> components Eof

