Note: the nonterminal symbol list (from octavius.1.2.0-octParser.mly) is renamed octavius_1_2_0_octParser_list.
File "octavius.1.2.0-octParser.mly", line 187, characters 7-10:
Warning: the token EOF is unused.
File "octavius.1.2.0-octParser.mly", line 202, characters 10-22:
Warning: the token Reduce_error is unused.
%{
open Common
open Types
open Errors

(* Convert lexing position into error position *)
let position p =
  { line = p.Lexing.pos_lnum;
    column = p.Lexing.pos_cnum - p.Lexing.pos_bol; }

(* Get the location of the symbol at a given position *)
let rhs_loc n =
  { start = position (Parsing.rhs_start_pos n);
    finish = position (Parsing.rhs_end_pos n); }

(* Useful strings *)

let sempty = ""

let sspace = " "

let snewline = "
"

let sblank_line = "

"

let sminus = "-"

let splus = "+"

(* Accumulators for text elements *)

type text_item =
    Blank
  | Newline
  | Blank_line
  | String of string
  | Element of text_element

let iminus = String sminus

let iplus = String splus

let skip_blank_or_newline = function
  | Blank :: rest -> rest
  | Newline :: rest -> rest
  | til -> til

let rec skip_whitespace = function
  | Blank :: rest -> skip_whitespace rest
  | Newline :: rest -> skip_whitespace rest
  | Blank_line :: rest -> skip_whitespace rest
  | til -> til

let rec convert acc stracc = function
  | [] ->
        if stracc = [] then acc
        else (Raw (String.concat sempty stracc)) :: acc
  | ti :: rest ->
      let acc, stracc =
        match ti with
        | Blank -> acc, (sspace :: stracc)
        | Newline -> acc, (snewline :: stracc)
        | String s -> acc, (s :: stracc)
        | Blank_line ->
            let acc =
              if stracc = [] then acc
              else (Raw (String.concat sempty stracc)) :: acc
            in
              (Newline :: acc), []
        | Element e ->
            let acc =
              if stracc = [] then acc
              else (Raw (String.concat sempty stracc)) :: acc
            in
              (e :: acc), []
      in
        convert acc stracc rest

let text til =
  let til = skip_whitespace til in
  let til = skip_whitespace (List.rev til) in
    convert [] [] til

let inner til =
  let til = skip_blank_or_newline til in
  let til = skip_blank_or_newline (List.rev til) in
    convert [] [] til

(* Error messages *)

let unclosed opening_name opening_num items closing_name closing_num =
  let error =
    let opening_loc = rhs_loc opening_num in
    let opening = opening_name in
    let closing = closing_name in
    Unclosed { opening_loc; opening; items; closing }
  in
  let loc = rhs_loc closing_num in
    raise (ParserError(loc, error))

let expecting num nonterm =
  let error = Expecting nonterm in
  let loc = rhs_loc num in
    raise (ParserError(loc, error))

(* Utilities for error messages *)

let title_to_string (i, _) =
  let i = string_of_int i in
    "{" ^ i

let style_to_string = function
  | SK_bold -> "{b"
  | SK_italic -> "{i"
  | SK_emphasize -> "{e"
  | SK_center -> "{C"
  | SK_left -> "{L"
  | SK_right -> "{R"
  | SK_superscript -> "{^"
  | SK_subscript -> "{_"
  | SK_custom s -> "{" ^ s

let item_to_string i = if i then "{-" else "{li"

let html_open_to_string t = "<" ^ t ^ ">"
let html_close_to_string t = "</" ^ t ^ ">"

%}
%start main
%start reference_parts
%token AUTHOR
%token BEGIN
%token BLANK
%token <string> Before
%token <string> Canonical
%token <string> Char
%token <string> Code
%token <string> Custom
%token DEPRECATED
%token DOT
%token END
%token ENUM
%token EOF
%token <string> HTML_Bold
%token <string> HTML_Center
%token HTML_END_BOLD
%token HTML_END_CENTER
%token HTML_END_ENUM
%token HTML_END_ITALIC
%token HTML_END_ITEM
%token HTML_END_LEFT
%token HTML_END_LIST
%token HTML_END_RIGHT
%token <int> HTML_END_Title
%token <string> HTML_Enum
%token <string> HTML_Italic
%token <string> HTML_Item
%token <string> HTML_Left
%token <string> HTML_List
%token <string> HTML_Right
%token <string * int> HTML_Title
%token INLINE
%token <bool> Item
%token LIST
%token MINUS
%token NEWLINE
%token PLUS
%token <string> Param
%token <string> Pre_Code
%token RETURN
%token <string> Raise
%token <Types.ref_kind * string> Ref
%token <string> Ref_part
%token <Types.see_ref> See
%token <string> Since
%token <Types.special_ref_kind> Special_Ref
%token <Types.style_kind> Style
%token <string option * string> Target
%token <int * string option> Title
%token <string> Verb
%token <string> Version
%nonassoc Shift_error
%right error
%nonassoc Reduce_error
%type <Types.t> main
%type <(string option * string) list> reference_parts
%%

main:
  _1 = text
    {                    ( (text _1, []) )}
| _1 = text _2 = tags
    {                    ( (text _1, List.rev _2) )}

reference_parts:
  _1 = reference_part
    {                 ( [_1] )}
| _1 = reference_parts _2 = DOT _3 = reference_part
    {                                     ( _3 :: _1 )}

reference_part:
  _1 = Ref_part
    {           ( (None, _1) )}
| _1 = Ref_part _2 = MINUS _3 = Ref_part
    {                          ( (Some _1, _3) )}

tags:
  _1 = simple_tag _2 = whitespace
    {                                   ( [_1] )}
| _1 = simple_tag _2 = error
    {                                   ( expecting 2 "tag" )}
| _1 = text_tag
    {                                   ( [_1] )}
| _1 = tags _2 = simple_tag _3 = whitespace
    {                                   ( _2 :: _1 )}
| _1 = tags _2 = simple_tag _3 = error
    {                                   ( expecting 3 "tag" )}
| _1 = tags _2 = text_tag
    {                                   ( _2 :: _1 )}

simple_tag:
  _1 = Version
    {                    ( Version _1 )}
| _1 = Since
    {                    ( Since _1 )}
| _1 = Canonical
    {                    ( Canonical _1 )}

text_tag:
  _1 = AUTHOR _2 = string
    {                         ( Author (String.concat sempty _2) )}
| _1 = See _2 = text
    {                         ( See(_1, (text _2)) )}
| _1 = Before _2 = text
    {                         ( Before(_1, (text _2)) )}
| _1 = DEPRECATED _2 = text
    {                         ( Deprecated (text _2) )}
| _1 = Param _2 = text
    {                         ( Param(_1, (text _2)) )}
| _1 = Raise _2 = text
    {                         ( Raised_exception(_1, (text _2)) )}
| _1 = RETURN _2 = text
    {                         ( Return_value (text _2) )}
| _1 = INLINE _2 = whitespace
    {                         ( Inline )}
| _1 = Custom _2 = text
    {                         ( Custom(_1, (text _2)) )}

blanks:
  _1 = BLANK
    {                    ( () )}
| _1 = blanks _2 = BLANK
    {                    ( () )}

newline:
  _1 = NEWLINE
    {                    ( () )}
| _1 = blanks _2 = NEWLINE
    {                    ( () )}
| _1 = newline _2 = BLANK
    {                    ( () )}

blank_line:
  _1 = newline _2 = NEWLINE
    {                    ( () )}
| _1 = blank_line _2 = BLANK
    {                     ( () )}
| _1 = blank_line _2 = NEWLINE
    {                     ( () )}

whitespace:
   %prec Shift_error
    {                        ( [] )}
| _1 = blanks
    {                        ( [Blank] )}
| _1 = newline
    {                        ( [Newline] )}
| _1 = blank_line
    {                        ( [Blank_line] )}

string:
  _1 = whitespace
    {                                                  ( [] )}
| _1 = error
    {                                                  ( expecting 1 "string" )}
| _1 = string_body _2 = whitespace
    {                                                  ( List.rev _1 )}

string_body:
  _1 = string_item
    {                                   ( [snd _1] )}
| _1 = string_body _2 = string_item
    {                                   ( (snd _2) :: (fst _2) :: _1 )}

string_item:
  _1 = string_char
    {                              ( (sempty, _1) )}
| _1 = blanks _2 = string_char
    {                              ( (sspace, _2) )}
| _1 = newline _2 = string_char
    {                              ( (snewline, _2) )}
| _1 = blank_line _2 = string_char
    {                              ( (sblank_line, _2) )}

string_char:
  _1 = Char
    {                              ( _1 )}
| _1 = MINUS
    {                              ( sminus )}
| _1 = PLUS
    {                              ( splus )}

text:
  _1 = whitespace
    {                                             ( _1 )}
| _1 = error
    {                                             ( expecting 1 "text" )}
| _1 = text_body _2 = whitespace
    {                                             ( List.rev_append _1 _2 )}
| _1 = text_body_with_line _2 = shortcut_list_final
    {                                             ( List.rev_append _1 [Element (List _2)] )}
| _1 = text_body_with_line _2 = shortcut_enum_final
    {                                             ( List.rev_append _1 [Element (Enum _2)] )}

text_body:
  _1 = text_item
    {                                             ( [_1] )}
| _1 = blanks _2 = text_item
    {                                             ( [_2; Blank] )}
| _1 = text_body _2 = text_item
    {                                             ( _2 :: _1 )}
| _1 = text_body _2 = blanks _3 = text_item
    {                                             ( _3 :: Blank :: _1 )}
| _1 = text_body_with_line _2 = text_item_after_line
    {                                             ( List.rev_append _2 _1 )}

text_body_with_line:
  _1 = newline
    {                                             ( [Newline] )}
| _1 = blank_line
    {                                             ( [Blank_line] )}
| _1 = text_body _2 = newline
    {                                             ( Newline :: _1 )}
| _1 = text_body _2 = blank_line
    {                                              ( Blank_line :: _1 )}
| _1 = text_body_with_line _2 = shortcut_list
    {                                             ( (Element (List _2)) :: _1 )}
| _1 = text_body_with_line _2 = shortcut_enum
    {                                             ( (Element (Enum _2)) :: _1 )}

text_item:
  _1 = MINUS
    {                                     ( iminus )}
| _1 = PLUS
    {                                     ( iplus )}
| _1 = text_element
    {                                     ( Element _1 )}
| _1 = html_text_element
    {                                     ( Element _1 )}
| _1 = Char
    {                                     ( String _1 )}

text_item_after_line:
  _1 = MINUS _2 = text_item
    {                             ( [iminus; _2] )}
| _1 = PLUS _2 = text_item
    {                             ( [iplus; _2] )}
| _1 = text_element
    {                             ( [Element _1] )}
| _1 = html_text_element
    {                             ( [Element _1] )}
| _1 = Char
    {                             ( [String _1] )}

shortcut_text_body:
  _1 = blanks _2 = text_item
    {                                                    ( [_2; Blank] )}
| _1 = newline _2 = text_item_after_line
    {                                                    ( List.rev_append _2 [Newline] )}
| _1 = shortcut_text_body _2 = text_item
    {                                                    ( _2 :: _1 )}
| _1 = shortcut_text_body _2 = blanks _3 = text_item
    {                                                    ( _3 :: Blank :: _1 )}
| _1 = shortcut_text_body _2 = newline _3 = text_item_after_line
    {                                                    ( List.rev_append _3 (Newline :: _1) )}

shortcut_list:
  _1 = MINUS _2 = blank_line
    {                                                    ( [[]] )}
| _1 = MINUS _2 = shortcut_text_body _3 = blank_line
    {                                                    ( [inner (List.rev _2)] )}
| _1 = MINUS _2 = newline _3 = shortcut_list
    {                                                    ( [] :: _3 )}
| _1 = MINUS _2 = shortcut_text_body _3 = newline _4 = shortcut_list
    {                                                    ( (inner (List.rev _2)) :: _4 )}
| _1 = MINUS _2 = error
    {                                                    ( expecting 2 "list item" )}

shortcut_enum:
  _1 = PLUS _2 = blank_line
    {                                                    ( [[]] )}
| _1 = PLUS _2 = shortcut_text_body _3 = blank_line
    {                                                    ( [inner (List.rev _2)] )}
| _1 = PLUS _2 = newline _3 = shortcut_enum
    {                                                    ( [] :: _3 )}
| _1 = PLUS _2 = shortcut_text_body _3 = newline _4 = shortcut_enum
    {                                                    ( (inner (List.rev _2)) :: _4 )}
| _1 = PLUS _2 = error
    {                                                    ( expecting 2 "enumerated list item" )}

shortcut_list_final:
  _1 = MINUS _2 = whitespace
    {                                                        ( [[]] )}
| _1 = MINUS _2 = shortcut_text_body _3 = whitespace
    {                                                        ( [inner (List.rev _2)] )}
| _1 = MINUS _2 = newline _3 = shortcut_list_final
    {                                                        ( [] :: _3 )}
| _1 = MINUS _2 = shortcut_text_body _3 = newline _4 = shortcut_list_final
    {                                                        ( (inner (List.rev _2)) :: _4 )}

shortcut_enum_final:
  _1 = PLUS _2 = whitespace
    {                                                        ( [[]] )}
| _1 = PLUS _2 = shortcut_text_body _3 = whitespace
    {                                                        ( [inner (List.rev _2)] )}
| _1 = PLUS _2 = newline _3 = shortcut_enum_final
    {                                                        ( [] :: _3 )}
| _1 = PLUS _2 = shortcut_text_body _3 = newline _4 = shortcut_enum_final
    {                                                        ( (inner (List.rev _2)) :: _4 )}

text_element:
  _1 = Title _2 = text _3 = END
    {    ( let n, l = _1 in
        Title (n, l, (inner _2)) )}
| _1 = Title _2 = text _3 = error
    {    ( unclosed (title_to_string _1) 1 "text" "}" 3 )}
| _1 = Style _2 = text _3 = END
    {    ( Style(_1, (inner _2)) )}
| _1 = Style _2 = text _3 = error
    {    ( unclosed (style_to_string _1) 1 "text" "}" 3 )}
| _1 = LIST _2 = whitespace _3 = octavius_1_2_0_octParser_list _4 = whitespace _5 = END
    {    ( List (List.rev _3) )}
| _1 = LIST _2 = whitespace _3 = octavius_1_2_0_octParser_list _4 = error
    {    ( unclosed "{ul" 1 "list item" "}" 4 )}
| _1 = LIST _2 = whitespace _3 = error
    {    ( expecting 3 "list item" )}
| _1 = ENUM _2 = whitespace _3 = octavius_1_2_0_octParser_list _4 = whitespace _5 = END
    {    ( Enum (List.rev _3) )}
| _1 = ENUM _2 = whitespace _3 = octavius_1_2_0_octParser_list _4 = error
    {    ( unclosed "{ol" 1 "list item" "}" 4 )}
| _1 = ENUM _2 = whitespace _3 = error
    {    ( expecting 3 "enumerated list item" )}
| _1 = Ref
    {    ( let k, n = _1 in
        Ref (k, n, None) )}
| _1 = BEGIN _2 = Ref _3 = text _4 = END
    {    ( let k, n = _2 in
        Ref (k, n, Some (inner _3)) )}
| _1 = BEGIN _2 = Ref _3 = text _4 = error
    {    ( unclosed "{" 1 "text" "}" 3 )}
| _1 = Special_Ref
    {    ( Special_ref _1 )}
| _1 = Code
    {    ( Code _1 )}
| _1 = Pre_Code
    {    ( PreCode _1 )}
| _1 = Verb
    {    ( Verbatim _1 )}
| _1 = Target
    {    ( let t, s = _1 in
        Target (t, s) )}

octavius_1_2_0_octParser_list:
  _1 = item
    {                         ( [ _1 ] )}
| _1 = octavius_1_2_0_octParser_list _2 = whitespace _3 = item
    {                         ( _3 :: _1 )}

item:
  _1 = Item _2 = text _3 = END
    {                      ( inner _2 )}
| _1 = Item _2 = text _3 = error
    {                      ( unclosed (item_to_string _1) 1 "text" "}" 3 )}

html_text_element:
  _1 = HTML_Title _2 = text _3 = HTML_END_Title
    {    ( let _, n = _1 in
      if n <> _3 then raise Parse_error;
      Title(n, None, (inner _2)) )}
| _1 = HTML_Title _2 = text _3 = error
    {    ( let tag, _ = _1 in
      unclosed (html_open_to_string tag) 1
        "text" (html_close_to_string tag) 3 )}
| _1 = HTML_Bold _2 = text _3 = HTML_END_BOLD
    {    ( Style(SK_bold, (inner _2)) )}
| _1 = HTML_Bold _2 = text _3 = error
    {    ( unclosed (html_open_to_string _1) 1
        "text" (html_close_to_string _1) 3 )}
| _1 = HTML_Italic _2 = text _3 = HTML_END_ITALIC
    {    ( Style(SK_italic, (inner _2)) )}
| _1 = HTML_Italic _2 = text _3 = error
    {    ( unclosed (html_open_to_string _1) 1
        "text" (html_close_to_string _1) 3 )}
| _1 = HTML_Center _2 = text _3 = HTML_END_CENTER
    {    ( Style(SK_center, (inner _2)) )}
| _1 = HTML_Center _2 = text _3 = error
    {    ( unclosed (html_open_to_string _1) 1
        "text" (html_close_to_string _1) 3 )}
| _1 = HTML_Left _2 = text _3 = HTML_END_LEFT
    {    ( Style(SK_left, (inner _2)) )}
| _1 = HTML_Left _2 = text _3 = error
    {    ( unclosed (html_open_to_string _1) 1
        "text" (html_close_to_string _1) 3 )}
| _1 = HTML_Right _2 = text _3 = HTML_END_RIGHT
    {    ( Style(SK_right, (inner _2)) )}
| _1 = HTML_Right _2 = text _3 = error
    {    ( unclosed (html_open_to_string _1) 1
        "text" (html_close_to_string _1) 3 )}
| _1 = HTML_List _2 = whitespace _3 = html_list _4 = whitespace _5 = HTML_END_LIST
    {    ( List (List.rev _3) )}
| _1 = HTML_List _2 = whitespace _3 = html_list _4 = error
    {    ( unclosed (html_open_to_string _1) 1
         "HTML list item" (html_close_to_string _1) 4 )}
| _1 = HTML_List _2 = whitespace _3 = error
    {    ( expecting 2 "HTML list item" )}
| _1 = HTML_Enum _2 = whitespace _3 = html_list _4 = whitespace _5 = HTML_END_ENUM
    {    ( Enum (List.rev _3) )}
| _1 = HTML_Enum _2 = whitespace _3 = html_list _4 = error
    {    ( unclosed (html_open_to_string _1) 1
        "HTML list item" (html_close_to_string _1) 4 )}
| _1 = HTML_Enum _2 = whitespace _3 = error
    {    ( expecting 3 "HTML list item" )}

html_list:
  _1 = html_item
    {                                     ( [ _1 ] )}
| _1 = html_list _2 = whitespace _3 = html_item
    {                                     ( _3 :: _1 )}

html_item:
  _1 = HTML_Item _2 = text _3 = HTML_END_ITEM
    {    ( inner _2 )}
| _1 = HTML_Item _2 = text _3 = error
    {    ( unclosed (html_open_to_string _1) 1
        "text" (html_close_to_string _1) 3 )}

%%


