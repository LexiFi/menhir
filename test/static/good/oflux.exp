File "oflux.mly", line 49, characters 51-57:
Warning: the token ATOMIC is unused.
File "oflux.mly", line 75, characters 16-23:
Warning: the token INCLUDE is unused.
File "oflux.mly", line 52, characters 51-64:
Warning: the token LEFT_CR_BRACE is unused.
File "oflux.mly", line 52, characters 66-80:
Warning: the token RIGHT_CR_BRACE is unused.
File "oflux.mly", line 55, characters 51-58:
Warning: the token TYPEDEF is unused.
Grammar has 53 nonterminal symbols, among which 1 start symbols.
Grammar has 73 terminal symbols.
Grammar has 136 productions.
nullable(where_guard_indentifications_opt) = true
nullable(uninterpreted_cpp_code_fragment) = false
nullable(uninterpreted_cpp_code_comma_list) = true
nullable(uninterpreted_cpp_code) = true
nullable(typed_or_guardref_item_list) = false
nullable(typed_or_guardref_item) = false
nullable(typed_item_list) = false
nullable(typed_item) = false
nullable(type_mod_opt) = true
nullable(top_level_program) = false
nullable(term_decl) = false
nullable(template_item_list) = false
nullable(template_item) = false
nullable(star_list) = true
nullable(source_or_initial_or_door) = false
nullable(simple_arg_list) = false
nullable(raw_data_type) = false
nullable(program) = true
nullable(plugin_depends_decl) = false
nullable(plugin_decl) = false
nullable(par_ident_list) = false
nullable(node_target_arg_list) = false
nullable(node_mod_list) = true
nullable(node_decl) = false
nullable(namespaced_ident) = false
nullable(mod_modifier_list) = true
nullable(mod_modifier) = false
nullable(mod_inst) = false
nullable(mod_decl) = false
nullable(main_fn) = false
nullable(if_condition_opt) = true
nullable(ident_list) = true
nullable(ident) = false
nullable(guardref_modifier_list) = true
nullable(guardref_item) = false
nullable(guard_order_list) = false
nullable(guard_order_decl) = false
nullable(guard_indentification_list) = false
nullable(guard_identification) = false
nullable(external_opt) = true
nullable(expr_part) = false
nullable(err_def) = false
nullable(data_type) = false
nullable(cond_decl) = false
nullable(comma_list) = false
nullable(code_list) = true
nullable(atom_type) = false
nullable(atom_mod_opt_list) = true
nullable(atom_mod) = false
nullable(atom_decl) = false
nullable(assn) = false
nullable(as_named_opt) = true
nullable(arg_list) = false
first(where_guard_indentifications_opt) = WHERE
first(uninterpreted_cpp_code_fragment) = STAR QUESTION PLUS PIPE NUMBER NOTEQUALS MINUS LESSTHAN LEFT_SQ_BRACE LEFT_PAREN ISEQUALS IDENTIFIER GREATERTHAN EXCLAMATION DOUBLECOLON DOUBLEBAR DOUBLEAMPERSAND DOT COLON BACKARROW ARROW
first(uninterpreted_cpp_code_comma_list) = STAR QUESTION PLUS PIPE NUMBER NOTEQUALS MINUS LESSTHAN LEFT_SQ_BRACE LEFT_PAREN ISEQUALS IDENTIFIER GREATERTHAN EXCLAMATION DOUBLECOLON DOUBLEBAR DOUBLEAMPERSAND DOT COMMA COLON BACKARROW ARROW
first(uninterpreted_cpp_code) = STAR QUESTION PLUS PIPE NUMBER NOTEQUALS MINUS LESSTHAN LEFT_SQ_BRACE LEFT_PAREN ISEQUALS IDENTIFIER GREATERTHAN EXCLAMATION DOUBLECOLON DOUBLEBAR DOUBLEAMPERSAND DOT COLON BACKARROW ARROW
first(typed_or_guardref_item_list) = LEFT_PAREN IDENTIFIER GUARD CONST BOOL
first(typed_or_guardref_item) = LEFT_PAREN IDENTIFIER GUARD CONST BOOL
first(typed_item_list) = LEFT_PAREN IDENTIFIER CONST BOOL
first(typed_item) = LEFT_PAREN IDENTIFIER CONST BOOL
first(type_mod_opt) = CONST
first(top_level_program) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE ENDOFFILE DOOR DEPENDS CONDITION
first(term_decl) = TERMINATE
first(template_item_list) = NUMBER LEFT_PAREN IDENTIFIER CONST BOOL
first(template_item) = NUMBER LEFT_PAREN IDENTIFIER CONST BOOL
first(star_list) = STAR AMPERSAND
first(source_or_initial_or_door) = SOURCE INITIAL DOOR
first(simple_arg_list) = LEFT_PAREN
first(raw_data_type) = LEFT_PAREN IDENTIFIER BOOL
first(program) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE DOOR DEPENDS CONDITION
first(plugin_depends_decl) = DEPENDS
first(plugin_decl) = PLUGIN
first(par_ident_list) = IDENTIFIER
first(node_target_arg_list) = LEFT_PAREN ELLIPSIS
first(node_mod_list) = MUTABLE DETACHED ABSTRACT
first(node_decl) = NODE EXTERNAL
first(namespaced_ident) = IDENTIFIER
first(mod_modifier_list) = STATIC
first(mod_modifier) = STATIC
first(mod_inst) = INSTANCE EXTERNAL
first(mod_decl) = STATIC MODULE
first(main_fn) = SOURCE INITIAL DOOR
first(if_condition_opt) = IF
first(ident_list) = PIPE IDENTIFIER
first(ident) = IDENTIFIER
first(guardref_modifier_list) = SLASH
first(guardref_item) = GUARD
first(guard_order_list) = IDENTIFIER
first(guard_order_decl) = PRECEDENCE
first(guard_indentification_list) = IDENTIFIER
first(guard_identification) = IDENTIFIER
first(external_opt) = EXTERNAL
first(expr_part) = IDENTIFIER
first(err_def) = HANDLE
first(data_type) = LEFT_PAREN IDENTIFIER CONST BOOL
first(cond_decl) = EXTERNAL CONDITION
first(comma_list) = STAR IDENTIFIER
first(code_list) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE DOOR DEPENDS CONDITION
first(atom_type) = SEQUENCE READWRITE POOL FREE EXCLUSIVE
first(atom_mod_opt_list) = SLASH
first(atom_mod) = UNORDERED GC
first(atom_decl) = SEQUENCE READWRITE POOL FREE EXTERNAL EXCLUSIVE
first(assn) = IDENTIFIER
first(as_named_opt) = AS
first(arg_list) = LEFT_PAREN
minimal(where_guard_indentifications_opt) = (* 0 *)
minimal(uninterpreted_cpp_code_fragment) = (* 1 *) NUMBER
minimal(uninterpreted_cpp_code_comma_list) = (* 0 *)
minimal(uninterpreted_cpp_code) = (* 0 *)
minimal(typed_or_guardref_item_list) = (* 1 *) BOOL
minimal(typed_or_guardref_item) = (* 1 *) BOOL
minimal(typed_item_list) = (* 1 *) BOOL
minimal(typed_item) = (* 1 *) BOOL
minimal(type_mod_opt) = (* 0 *)
minimal(top_level_program) = (* 1 *) ENDOFFILE
minimal(term_decl) = (* 3 *) TERMINATE IDENTIFIER SEMI
minimal(template_item_list) = (* 1 *) NUMBER
minimal(template_item) = (* 1 *) NUMBER
minimal(star_list) = (* 0 *)
minimal(source_or_initial_or_door) = (* 1 *) SOURCE
minimal(simple_arg_list) = (* 2 *) LEFT_PAREN RIGHT_PAREN
minimal(raw_data_type) = (* 1 *) BOOL
minimal(program) = (* 0 *)
minimal(plugin_depends_decl) = (* 3 *) DEPENDS IDENTIFIER SEMI
minimal(plugin_decl) = (* 4 *) PLUGIN IDENTIFIER BEGIN END
minimal(par_ident_list) = (* 1 *) IDENTIFIER
minimal(node_target_arg_list) = (* 1 *) ELLIPSIS
minimal(node_mod_list) = (* 0 *)
minimal(node_decl) = (* 7 *) NODE IDENTIFIER LEFT_PAREN RIGHT_PAREN ARROW ELLIPSIS SEMI
minimal(namespaced_ident) = (* 1 *) IDENTIFIER
minimal(mod_modifier_list) = (* 0 *)
minimal(mod_modifier) = (* 1 *) STATIC
minimal(mod_inst) = (* 4 *) INSTANCE IDENTIFIER IDENTIFIER SEMI
minimal(mod_decl) = (* 4 *) MODULE IDENTIFIER BEGIN END
minimal(main_fn) = (* 3 *) SOURCE IDENTIFIER SEMI
minimal(if_condition_opt) = (* 0 *)
minimal(ident_list) = (* 0 *)
minimal(ident) = (* 1 *) IDENTIFIER
minimal(guardref_modifier_list) = (* 0 *)
minimal(guardref_item) = (* 4 *) GUARD IDENTIFIER LEFT_PAREN RIGHT_PAREN
minimal(guard_order_list) = (* 3 *) IDENTIFIER LESSTHAN IDENTIFIER
minimal(guard_order_decl) = (* 5 *) PRECEDENCE IDENTIFIER LESSTHAN IDENTIFIER SEMI
minimal(guard_indentification_list) = (* 3 *) IDENTIFIER EQUALS IDENTIFIER
minimal(guard_identification) = (* 3 *) IDENTIFIER EQUALS IDENTIFIER
minimal(external_opt) = (* 0 *)
minimal(expr_part) = (* 3 *) IDENTIFIER EQUALS SEMI
minimal(err_def) = (* 5 *) HANDLE ERROR PIPE IDENTIFIER SEMI
minimal(data_type) = (* 1 *) BOOL
minimal(cond_decl) = (* 7 *) CONDITION IDENTIFIER LEFT_PAREN RIGHT_PAREN ARROW BOOL SEMI
minimal(comma_list) = (* 1 *) STAR
minimal(code_list) = (* 0 *)
minimal(atom_type) = (* 1 *) EXCLUSIVE
minimal(atom_mod_opt_list) = (* 0 *)
minimal(atom_mod) = (* 1 *) UNORDERED
minimal(atom_decl) = (* 7 *) EXCLUSIVE IDENTIFIER LEFT_PAREN RIGHT_PAREN ARROW BOOL SEMI
minimal(assn) = (* 2 *) IDENTIFIER EQUALS
minimal(as_named_opt) = (* 0 *)
minimal(arg_list) = (* 2 *) LEFT_PAREN RIGHT_PAREN
follow(where_guard_indentifications_opt) = SEMI
follow(uninterpreted_cpp_code_fragment) = STAR RIGHT_SQ_BRACE RIGHT_PAREN QUESTION PLUS PIPE NUMBER NOTEQUALS MINUS LESSTHAN LEFT_SQ_BRACE LEFT_PAREN ISEQUALS IDENTIFIER GREATERTHAN EXCLAMATION DOUBLECOLON DOUBLEBAR DOUBLEAMPERSAND DOT COMMA COLON BACKARROW ARROW
follow(uninterpreted_cpp_code_comma_list) = RIGHT_PAREN
follow(uninterpreted_cpp_code) = RIGHT_SQ_BRACE RIGHT_PAREN COMMA
follow(typed_or_guardref_item_list) = RIGHT_PAREN COMMA
follow(typed_or_guardref_item) = RIGHT_PAREN COMMA
follow(typed_item_list) = RIGHT_PAREN COMMA
follow(typed_item) = RIGHT_PAREN COMMA
follow(type_mod_opt) = LEFT_PAREN IDENTIFIER BOOL
follow(top_level_program) = #
follow(term_decl) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE ENDOFFILE END DOOR DEPENDS CONDITION
follow(template_item_list) = GREATERTHAN COMMA
follow(template_item) = GREATERTHAN COMMA
follow(star_list) = STAR SEMI RIGHT_PAREN IDENTIFIER GREATERTHAN COMMA AMPERSAND
follow(source_or_initial_or_door) = IDENTIFIER
follow(simple_arg_list) = SEMI ARROW
follow(raw_data_type) = STAR SEMI RIGHT_PAREN IDENTIFIER GREATERTHAN COMMA AMPERSAND
follow(program) = ENDOFFILE END
follow(plugin_depends_decl) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE ENDOFFILE END DOOR DEPENDS CONDITION
follow(plugin_decl) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE ENDOFFILE END DOOR DEPENDS CONDITION
follow(par_ident_list) = SEMI AMPERSAND
follow(node_target_arg_list) = SEMI
follow(node_mod_list) = IDENTIFIER
follow(node_decl) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE ENDOFFILE END DOOR DEPENDS CONDITION
follow(namespaced_ident) = SEMI PIPE LEFT_PAREN IDENTIFIER BEGIN AMPERSAND
follow(mod_modifier_list) = MODULE
follow(mod_modifier) = STATIC MODULE
follow(mod_inst) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE ENDOFFILE END DOOR DEPENDS CONDITION
follow(mod_decl) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE ENDOFFILE END DOOR DEPENDS CONDITION
follow(main_fn) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE ENDOFFILE END DOOR DEPENDS CONDITION
follow(if_condition_opt) = RIGHT_PAREN COMMA
follow(ident_list) = SEMI PIPE
follow(ident) = STAR SEMI RIGHT_SQ_BRACE RIGHT_PAREN QUESTION PLUS PIPE NUMBER NOTEQUALS MINUS LESSTHAN LEFT_SQ_BRACE LEFT_PAREN ISEQUALS IDENTIFIER GREATERTHAN EXCLAMATION DOUBLECOLON DOUBLEBAR DOUBLEAMPERSAND DOT COMMA COLON BACKARROW ARROW
follow(guardref_modifier_list) = LEFT_PAREN
follow(guardref_item) = RIGHT_PAREN COMMA
follow(guard_order_list) = SEMI
follow(guard_order_decl) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE ENDOFFILE END DOOR DEPENDS CONDITION
follow(guard_indentification_list) = SEMI
follow(guard_identification) = SEMI COMMA
follow(external_opt) = SEQUENCE READWRITE POOL NODE INSTANCE FREE EXCLUSIVE CONDITION
follow(expr_part) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE ENDOFFILE END DOOR DEPENDS CONDITION
follow(err_def) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE ENDOFFILE END DOOR DEPENDS CONDITION
follow(data_type) = SEMI RIGHT_PAREN IDENTIFIER GREATERTHAN COMMA
follow(cond_decl) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE ENDOFFILE END DOOR DEPENDS CONDITION
follow(comma_list) = RIGHT_SQ_BRACE COMMA
follow(code_list) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE ENDOFFILE END DOOR DEPENDS CONDITION
follow(atom_type) = SLASH IDENTIFIER
follow(atom_mod_opt_list) = IDENTIFIER
follow(atom_mod) = SLASH IDENTIFIER
follow(atom_decl) = TERMINATE STATIC SOURCE SEQUENCE READWRITE PRECEDENCE POOL PLUGIN NODE MODULE INSTANCE INITIAL IDENTIFIER HANDLE FREE EXTERNAL EXCLUSIVE ENDOFFILE END DOOR DEPENDS CONDITION
follow(assn) = SEMI
follow(as_named_opt) = RIGHT_PAREN IF COMMA
follow(arg_list) = ARROW
Built an LR(0) automaton with 250 states.
The grammar is not SLR(1) -- 1 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 250 states.
File "oflux.mly", line 78, characters 0-6:
Warning: the precedence level assigned to ARROW is never useful.
File "oflux.mly", line 79, characters 0-6:
Warning: the precedence level assigned to PIPE is never useful.
File "oflux.mly", line 76, characters 0-5:
Warning: the precedence level assigned to PLUS is never useful.
File "oflux.mly", line 77, characters 0-5:
Warning: the precedence level assigned to STAR is never useful.
117 out of 250 states have a default reduction.
75 out of 250 states are represented.
0 out of 129 symbols keep track of their start position.
0 out of 129 symbols keep track of their end position.
73 out of 137 productions exploit shiftreduce optimization.
445 functions before inlining, 87 functions after inlining.
