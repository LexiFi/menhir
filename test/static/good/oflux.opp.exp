File "oflux.mly", line 49, characters 51-57:
Warning: the token ATOMIC is unused.
File "oflux.mly", line 75, characters 16-23:
Warning: the token INCLUDE is unused.
File "oflux.mly", line 52, characters 51-64:
Warning: the token LEFT_CR_BRACE is unused.
File "oflux.mly", line 52, characters 66-80:
Warning: the token RIGHT_CR_BRACE is unused.
File "oflux.mly", line 55, characters 51-58:
Warning: the token TYPEDEF is unused.
%{ (*code goes here*)

open ParserTypes

exception Heck of string

let star (ident,p1,p2) (t1,t2) = (ident^"*",p1,t2)

let make_node_decl name n =
	{ detached = false
	; abstract = true
	; ismutable = false
	; externalnode = false
	; nodename=name
	; nodefunction = (strip_position name)
	; inputs = (match n.outputs with
			(Some o) -> o
			| _ -> raise (Heck "make_node_decl expects source to have declared outputs"))
	; guardrefs = []
	; outputs = None }


type general_formal =
	Typed of decl_formal
	| GuardRef of
                ( string ParserTypes.positioned
                * string list list
                * ParserTypes.guardmod list
                * string ParserTypes.positioned option
                * string list )

let rec comma_separate ll =
	match ll with
		(h::(_::_ as t)) -> (h @ [ "," ] @ (comma_separate t))
		| _ -> List.concat ll

let rec break_dotted_name nsn =
        try let ind = String.index nsn '.' in
            let len = String.length nsn in
            let hstr = String.sub nsn 0 ind in
            let tstr = String.sub nsn (ind+1) (len-(ind+1))
            in  hstr::"."::(break_dotted_name tstr)
        with Not_found -> [nsn]


%}
%start top_level_program
%token <ParserTypes.position*ParserTypes.position> ABSTRACT
%token <ParserTypes.position*ParserTypes.position> AMPERSAND
%token <ParserTypes.position*ParserTypes.position> AMPERSANDEQUALS
%token <ParserTypes.position*ParserTypes.position> ARROW
%token <ParserTypes.position*ParserTypes.position> AS
%token <ParserTypes.position*ParserTypes.position> ATOMIC
%token <ParserTypes.position*ParserTypes.position> BACKARROW
%token <ParserTypes.position*ParserTypes.position> BEGIN
%token <ParserTypes.position*ParserTypes.position> BOOL
%token <ParserTypes.position*ParserTypes.position> COLON
%token <ParserTypes.position*ParserTypes.position> COMMA
%token <ParserTypes.position*ParserTypes.position> CONDITION
%token <ParserTypes.position*ParserTypes.position> CONST
%token <ParserTypes.position*ParserTypes.position> DEPENDS
%token <ParserTypes.position*ParserTypes.position> DETACHED
%token <ParserTypes.position*ParserTypes.position> DOOR
%token <ParserTypes.position*ParserTypes.position> DOT
%token <ParserTypes.position*ParserTypes.position> DOUBLEAMPERSAND
%token <ParserTypes.position*ParserTypes.position> DOUBLEBAR
%token <ParserTypes.position*ParserTypes.position> DOUBLECOLON
%token <ParserTypes.position*ParserTypes.position> ELLIPSIS
%token <ParserTypes.position*ParserTypes.position> END
%token ENDOFFILE
%token <ParserTypes.position*ParserTypes.position> EQUALS
%token <ParserTypes.position*ParserTypes.position> ERROR
%token <ParserTypes.position*ParserTypes.position> EXCLAMATION
%token <ParserTypes.position*ParserTypes.position> EXCLUSIVE
%token <ParserTypes.position*ParserTypes.position> EXTERNAL
%token <ParserTypes.position*ParserTypes.position> FREE
%token <ParserTypes.position*ParserTypes.position> GC
%token <ParserTypes.position*ParserTypes.position> GREATERTHAN
%token <ParserTypes.position*ParserTypes.position> GUARD
%token <ParserTypes.position*ParserTypes.position> HANDLE
%token <string*ParserTypes.position*ParserTypes.position> IDENTIFIER
%token <ParserTypes.position*ParserTypes.position> IF
%token <string> INCLUDE
%token <ParserTypes.position*ParserTypes.position> INITIAL
%token <ParserTypes.position*ParserTypes.position> INSTANCE
%token <ParserTypes.position*ParserTypes.position> ISEQUALS
%token <ParserTypes.position*ParserTypes.position> LEFT_CR_BRACE
%token <ParserTypes.position*ParserTypes.position> LEFT_PAREN
%token <ParserTypes.position*ParserTypes.position> LEFT_SQ_BRACE
%token <ParserTypes.position*ParserTypes.position> LESSTHAN
%token <ParserTypes.position*ParserTypes.position> MINUS
%token <ParserTypes.position*ParserTypes.position> MODULE
%token <ParserTypes.position*ParserTypes.position> MUTABLE
%token <ParserTypes.position*ParserTypes.position> NODE
%token <ParserTypes.position*ParserTypes.position> NOTEQUALS
%token <ParserTypes.position*ParserTypes.position> NULLOK
%token <int*ParserTypes.position*ParserTypes.position> NUMBER
%token <ParserTypes.position*ParserTypes.position> PIPE
%token <ParserTypes.position*ParserTypes.position> PLUGIN
%token <ParserTypes.position*ParserTypes.position> PLUS
%token <ParserTypes.position*ParserTypes.position> POOL
%token <ParserTypes.position*ParserTypes.position> PRECEDENCE
%token <ParserTypes.position*ParserTypes.position> QUESTION
%token <ParserTypes.position*ParserTypes.position> READ
%token <ParserTypes.position*ParserTypes.position> READWRITE
%token <ParserTypes.position*ParserTypes.position> RIGHT_CR_BRACE
%token <ParserTypes.position*ParserTypes.position> RIGHT_PAREN
%token <ParserTypes.position*ParserTypes.position> RIGHT_SQ_BRACE
%token <ParserTypes.position*ParserTypes.position> SEMI
%token <ParserTypes.position*ParserTypes.position> SEQUENCE
%token <ParserTypes.position*ParserTypes.position> SLASH
%token <ParserTypes.position*ParserTypes.position> SOURCE
%token <ParserTypes.position*ParserTypes.position> STAR
%token <ParserTypes.position*ParserTypes.position> STATIC
%token <ParserTypes.position*ParserTypes.position> TERMINATE
%token <ParserTypes.position*ParserTypes.position> TYPEDEF
%token <ParserTypes.position*ParserTypes.position> UNORDERED
%token <ParserTypes.position*ParserTypes.position> UPGRADEABLE
%token <ParserTypes.position*ParserTypes.position> WHERE
%token <ParserTypes.position*ParserTypes.position> WRITE
%left PLUS
%left STAR
%right ARROW
%right PIPE
%type <ParserTypes.program> program
%type <ParserTypes.program> top_level_program
%%

top_level_program:
  _1 = program _2 = ENDOFFILE
    { ( _1 )}

program:
  _1 = code_list
    {  ( let sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl = _1
		  in { cond_decl_list=List.rev cl
		     ; atom_decl_list=List.rev al
		     ; node_decl_list=List.rev nl
		     ; mainfun_list=List.rev sl
		     ; expr_list=List.rev el
		     ; err_list=List.rev erl
		     ; mod_def_list=List.rev mdl
		     ; mod_inst_list=List.rev mil
                     ; plugin_list=List.rev pl
		     ; plugin_depend_list=List.rev pdl
                     ; terminate_list=List.rev tl
                     ; order_decl_list=List.rev odl
		     } )}

code_list:
  _1 = code_list _2 = main_fn
    { ( trace_thing "code_list";
	  let sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl = _1 in
	  let findsrc s =
		try List.find (fun n -> (strip_position s.sourcename) = (strip_position n.nodename)) nl
		with Not_found -> raise (Heck ("could not find source declaration before definition for "^(strip_position s.sourcename)))
	  in  match _2 with
		(s,None) -> (s::sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl)
	       |(s,Some e) -> (s::sl,e::el,erl,mil,cl,al,(make_node_decl e.exprname (findsrc s))::nl,mdl,pl,pdl,tl,odl) )}
| _1 = code_list _2 = expr_part
    { ( trace_thing "code_list";
	  let sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl = _1
	  in  (sl,_2::el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl) )}
| _1 = code_list _2 = err_def
    { ( trace_thing "code_list";
	  let sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl = _1
	  in  (sl,el,_2::erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl) )}
| _1 = code_list _2 = mod_inst
    { ( trace_thing "code_list";
	  let sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl = _1
	  in  (sl,el,erl,_2::mil,cl,al,nl,mdl,pl,pdl,tl,odl) )}
| _1 = code_list _2 = node_decl
    { ( trace_thing "code_list";
          let sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl = _1
          in sl,el,erl,mil,cl,al,_2::nl,mdl,pl,pdl,tl,odl )}
| _1 = code_list _2 = atom_decl
    { ( trace_thing "code_list";
          let sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl = _1
	  in sl,el,erl,mil,cl,_2::al,nl,mdl,pl,pdl,tl,odl )}
| _1 = code_list _2 = cond_decl
    { ( trace_thing "code_list";
          let sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl = _1
	  in sl,el,erl,mil,_2::cl,al,nl,mdl,pl,pdl,tl,odl )}
| _1 = code_list _2 = mod_decl
    { ( trace_thing "code_list";
          let sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl = _1
	  in sl,el,erl,mil,cl,al,nl,_2::mdl,pl,pdl,tl,odl )}
| _1 = code_list _2 = plugin_decl
    { ( trace_thing "code_list";
          let sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl = _1
	  in sl,el,erl,mil,cl,al,nl,mdl,_2::pl,pdl,tl,odl )}
| _1 = code_list _2 = plugin_depends_decl
    { ( trace_thing "code_list";
          let sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl = _1
	  in sl,el,erl,mil,cl,al,nl,mdl,pl,_2::pdl,tl,odl )}
| _1 = code_list _2 = term_decl
    { ( trace_thing "code_list";
          let sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl = _1
	  in  sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,_2::tl,odl )}
| _1 = code_list _2 = guard_order_decl
    { ( trace_thing "code_list";
          let sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,odl = _1
	  in  sl,el,erl,mil,cl,al,nl,mdl,pl,pdl,tl,_2 @ odl )}
| 
    { ( trace_thing "code_list";
          [],[],[],[],[],[],[],[],[],[],[],[] )}

mod_inst:
  _1 = external_opt _2 = INSTANCE _3 = namespaced_ident _4 = IDENTIFIER _5 = where_guard_indentifications_opt _6 = SEMI
    { ( trace_thing "mod_inst"
        ; { externalinst=_1; modsourcename=_3; modinstname=_4; guardaliases = _5 } )}

where_guard_indentifications_opt:
  _1 = WHERE _2 = guard_indentification_list
    {        ( _2 )}
| 
    {        ( [] )}

guard_indentification_list:
  _1 = guard_identification
    {        ( [ _1 ] )}
| _1 = guard_identification _2 = COMMA _3 = guard_indentification_list
    {        ( _1::_3 )}

guard_identification:
  _1 = IDENTIFIER _2 = EQUALS _3 = IDENTIFIER
    {        ( _1, _3 )}

mod_decl:
  _1 = mod_modifier_list _2 = MODULE _3 = namespaced_ident _4 = BEGIN _5 = program _6 = END
    { ( trace_thing "mod_decl";
	  { modulename=_3
	  ; isstaticmodule=List.mem "static" _1
	  ; programdef=_5 } )}

mod_modifier_list:
  
    { ( [] )}
| _1 = mod_modifier _2 = mod_modifier_list
    { ( _1::_2 )}

mod_modifier:
  _1 = STATIC
    { ( "static" )}

plugin_depends_decl:
  _1 = DEPENDS _2 = namespaced_ident _3 = SEMI
    { ( trace_thing "plugin_depends_def"; _2 )}

plugin_decl:
  _1 = PLUGIN _2 = namespaced_ident _3 = BEGIN _4 = program _5 = END
    {        ( trace_thing "plugin_def"; { pluginname=_2; pluginprogramdef=_4 } )}

namespaced_ident:
  _1 = IDENTIFIER
    { ( trace_thing "namespaced_ident"; _1 )}
| _1 = IDENTIFIER _2 = DOUBLECOLON _3 = namespaced_ident
    { ( let i,ip1,ip2 = _1 in
	  let d,dp1,dp2 = _3
	  in  trace_thing "namespaced_ident"; (i^"::"^d,ip1,dp2) )}

term_decl:
  _1 = TERMINATE _2 = namespaced_ident _3 = SEMI
    {        ( _2 )}

source_or_initial_or_door:
  _1 = SOURCE
    {        ( 0 )}
| _1 = INITIAL
    {        ( 1 )}
| _1 = DOOR
    {        ( 2 )}

main_fn:
  _1 = source_or_initial_or_door _2 = namespaced_ident _3 = SEMI
    { ( trace_thing "main_fn";
	  ({ sourcename =_2
          ; sourcefunction=strip_position _2
          ; successor=None
          ; runoncetype=_1
          }, None) )}
| _1 = source_or_initial_or_door _2 = namespaced_ident _3 = PIPE _4 = ident_list _5 = SEMI
    { ( trace_thing "main_fn";
          let rhs_name =
		let n,p1,p2 = _2
		in  (((n^"_RHS"),p1,p2) : string positioned)
	  in
	  ( { sourcename=_2
            ; sourcefunction=strip_position _2
            ; successor=(Some rhs_name)
            ; runoncetype=_1
            }
	  , Some
	    { exprname = rhs_name
	    ; condbinding=[]
	    ; successors = _4
	    ; etype = Choice
	    }
	  ) )}

cond_decl:
  _1 = external_opt _2 = CONDITION _3 = namespaced_ident _4 = simple_arg_list _5 = ARROW _6 = BOOL _7 = SEMI
    { ( trace_thing "cond_decl";
	  { externalcond=_1; condname=_3; condfunction=strip_position _3; condinputs=_4 } )}

atom_type:
  _1 = EXCLUSIVE
    { ( "exclusive" )}
| _1 = READWRITE
    { ( "readwrite" )}
| _1 = SEQUENCE
    { ( "sequence" )}
| _1 = POOL
    { ( "pool" )}
| _1 = FREE
    { ( "free" )}

atom_mod:
  _1 = UNORDERED
    {        ( "unordered" )}
| _1 = GC
    {        ( "gc" )}

atom_mod_opt_list:
  
    {        ( [] )}
| _1 = SLASH _2 = atom_mod _3 = atom_mod_opt_list
    {        ( _2::_3 )}

atom_decl:
  _1 = external_opt _2 = atom_type _3 = atom_mod_opt_list _4 = namespaced_ident _5 = simple_arg_list _6 = ARROW _7 = data_type _8 = SEMI
    { ( trace_thing "atom_decl";
	  { externalatom=_1
          ; atomname=_4
          ; atominputs=_5
          ; outputtype=_7
          ; atomtype = _2
          ; atommodifiers = _3
          } )}

external_opt:
  _1 = EXTERNAL
    {        ( true )}
| 
    {        ( false )}

guard_order_decl:
  _1 = PRECEDENCE _2 = guard_order_list _3 = SEMI
    {        ( _2 )}

guard_order_list:
  _1 = ident _2 = LESSTHAN _3 = ident
    {        ( [(_1,_3)] )}
| _1 = ident _2 = LESSTHAN _3 = guard_order_list
    {        ( let rhs = match _3 with
                        ((l,_)::_) -> l
                        | _ -> raise Not_found
          in  (_1,rhs)::_3 )}

node_target_arg_list:
  _1 = ELLIPSIS
    { ( None )}
| _1 = simple_arg_list
    { ( Some _1 )}

node_decl:
  _1 = external_opt _2 = NODE _3 = node_mod_list _4 = namespaced_ident _5 = arg_list _6 = ARROW _7 = node_target_arg_list _8 = SEMI
    { ( trace_thing "node_decl";
          let clean_cpp_uninterpreted args grefs =
                let strargs = List.map (fun x -> strip_position x.name) args in
                let strgargs = List.map
			(fun (x,_,_,xo,_) ->
				strip_position (match xo with
							(Some x') -> x'
							| _ -> x)) grefs in
		let strgargs = "self"::strgargs in
                let rec on_str_list' firstisarg firstisgarg strl =
                        match strl with
                                (h1::h2::tl) ->
                                        let h2isarg = List.mem h2 strargs in
					let h2isgarg = (not h2isarg) &&
						(List.mem h2 strgargs)
                                        in  if firstisarg || firstisgarg || h2isarg || h2isgarg then
                                                (if firstisarg
                                                 then Arg h1
                                                 else if firstisgarg
						 then GArg h1
						 else Context h1)
                                                ::(on_str_list' h2isarg h2isgarg (h2::tl))
                                            else on_str_list' false false ((h1^h2)::tl)
                                | [] -> []
                                | [x] -> [if firstisarg
                                          then Arg x
                                          else if firstisgarg
					  then GArg x
					  else Context x]
                        in
                let on_str_list strl =
                        match on_str_list' false false (""::strl) with
                                ((Context "")::tl) -> tl
                                | res -> res
                in  on_str_list in
	  let filt_type item =
		match item with
			Typed i -> true
			| _ -> false in
	  let ins, grefs = List.partition filt_type _5 in
	  let filttyped x =(match x with Typed i -> i | _ -> raise Not_found) in
	  let filtguardref x =(match x with GuardRef i -> i | _ -> raise Not_found) in
	  let ins = List.map filttyped ins in
	  let grefs = List.map filtguardref grefs in
          let grefs =
		let clean_cpp_un x = clean_cpp_uninterpreted ins grefs x
		in  List.map (fun (guardname,arguments,modifiers,localgname,guardcond) ->
                        { guardname = guardname
                        ; arguments = List.map clean_cpp_un arguments
                        ; modifiers = modifiers
                        ; localgname = localgname
                        ; guardcond = clean_cpp_un guardcond
                        }) grefs in
	  let is_mut = (List.mem "mutable" _3) in
	  let is_abs = (List.mem "abstract" _3) ||
	  	(match _7 with None -> true | _ -> false)
	  in
	  { detached=List.mem "detached" _3
          ; abstract=is_abs
          ; ismutable=is_mut
          ; externalnode=_1
          ; nodename=_4
          ; nodefunction=(strip_position _4)
          ; inputs=ins
          ; guardrefs=grefs
          ; outputs= _7 }
	)}

node_mod_list:
  
    { ( trace_thing "node_mod_list"; [] )}
| _1 = DETACHED _2 = node_mod_list
    { ( trace_thing "node_mod_list"; "detached"::_2 )}
| _1 = ABSTRACT _2 = node_mod_list
    { ( trace_thing "node_mod_list"; "abstract"::_2 )}
| _1 = MUTABLE _2 = node_mod_list
    { ( trace_thing "node_mod_list"; "mutable"::_2 )}

simple_arg_list:
  _1 = LEFT_PAREN _2 = typed_item_list _3 = RIGHT_PAREN
    { ( _2 )}
| _1 = LEFT_PAREN _2 = RIGHT_PAREN
    { ( [] )}

typed_item_list:
  _1 = typed_item_list _2 = COMMA _3 = typed_item
    { ( _1 @ [_3] )}
| _1 = typed_item
    { ( [ _1 ] )}

data_type:
  _1 = type_mod_opt _2 = raw_data_type _3 = star_list
    { ( let stars, pos2 = _3 in
	  let rt,pos1,_ = _2 in
	  if pos2 = noposition then { dctypemod=_1; dctype=_2 }
	  else { dctypemod=_1; dctype=(rt^stars,pos1,pos2) }
	)}

star_list:
  _1 = star_list _2 = STAR
    { ( let ses,_ = _1 in
	  let _,pend = _2 in
	  ses^"*", pend
	)}
| _1 = star_list _2 = AMPERSAND
    { ( let ses,_ = _1 in
	  let _,pend = _2 in
	  ses^"&", pend
	)}
| 
    { ( ("",noposition) )}

type_mod_opt:
  _1 = CONST
    { ( let p1,p2 = _1 in ("const",p1,p2) )}
| 
    { ( ("",noposition,noposition) )}

template_item_list:
  _1 = template_item_list _2 = COMMA _3 = template_item
    { ( let (a,pa1,pa2) = _1 in
	  let (b,pb1,pb2) = _3
	  in  (a^","^b,pa1,pb2) )}
| _1 = template_item
    { ( _1 )}

template_item:
  _1 = NUMBER
    { ( let n,p1,p2 = _1 in (string_of_int n),p1,p2 )}
| _1 = data_type
    { ( let (a,pa1,pa2),(b,pb1,pb2) = _1.dctypemod, _1.dctype
	  in  (a^b,pa1,pb2) )}

raw_data_type:
  _1 = BOOL
    { ( let p1,p2 = _1 in ("bool",p1,p2) )}
| _1 = IDENTIFIER
    { ( _1 )}
| _1 = LEFT_PAREN _2 = data_type _3 = RIGHT_PAREN
    { ( let (a,p1,_),(b,_,p2) = _2.dctypemod, _2.dctype
	  in (a^b,p1,p2) )}
| _1 = IDENTIFIER _2 = DOUBLECOLON _3 = raw_data_type
    { ( let i,ip1,ip2 = _1 in
	  let d,dp1,dp2 = _3
	  in  (i^"::"^d,ip1,dp2) )}
| _1 = IDENTIFIER _2 = LESSTHAN _3 = template_item_list _4 = GREATERTHAN
    { ( let i,ip1,_ = _1 in
	  let t,_,_ = _3 in
	  let _, pend = _4
	  in  (i^"<"^t^">",ip1,pend) )}

typed_item:
  _1 = data_type
    { ( let _,_,pend = _1.dctype in
	  { ctypemod=_1.dctypemod; ctype=_1.dctype; name=("",pend,pend) }
	)}
| _1 = data_type _2 = IDENTIFIER
    { ( { ctypemod=_1.dctypemod; ctype=_1.dctype; name=_2 } )}

arg_list:
  _1 = LEFT_PAREN _2 = RIGHT_PAREN
    { ( trace_thing "arg_list"; [] )}
| _1 = LEFT_PAREN _2 = typed_or_guardref_item_list _3 = RIGHT_PAREN
    { ( trace_thing "arg_list"; _2 )}

typed_or_guardref_item_list:
  _1 = typed_or_guardref_item_list _2 = COMMA _3 = typed_or_guardref_item
    { ( trace_thing "typed_or_guardref_item_list"; _1 @ [ _3 ] )}
| _1 = typed_or_guardref_item
    { ( trace_thing "typed_or_guardref_item_list"; [ _1 ] )}

typed_or_guardref_item:
  _1 = typed_item
    { ( trace_thing "typed_or_guardref_item"; Typed _1 )}
| _1 = guardref_item
    { ( trace_thing "typed_or_guardref_item"; GuardRef _1 )}

guardref_item:
  _1 = GUARD _2 = IDENTIFIER _3 = guardref_modifier_list _4 = LEFT_PAREN _5 = uninterpreted_cpp_code_comma_list _6 = RIGHT_PAREN _7 = as_named_opt _8 = if_condition_opt
    { ( trace_thing "guardref_item";
	  ( (*guardname= *) _2
          , (*arguments= *) _5
          , (*modifiers= *) _3
          , (*localgname= *) _7
          , (*guardcond= *) _8 ) )}

guardref_modifier_list:
  _1 = SLASH _2 = READ _3 = guardref_modifier_list
    { ( trace_thing "guardref_modifier_list"; (Read::_3) )}
| _1 = SLASH _2 = WRITE _3 = guardref_modifier_list
    { ( trace_thing "guardref_modifier_list"; (Write::_3) )}
| _1 = SLASH _2 = UPGRADEABLE _3 = guardref_modifier_list
    { ( trace_thing "guardref_modifier_list"; (Upgradeable::_3) )}
| _1 = SLASH _2 = NULLOK _3 = guardref_modifier_list
    { ( trace_thing "guardref_modifier_list"; (NullOk::_3) )}
| 
    { ( trace_thing "guardref_modifier_list"; [] )}

as_named_opt:
  _1 = AS _2 = IDENTIFIER
    { ( Some _2 )}
| 
    { ( None )}

if_condition_opt:
  
    {        ( [] )}
| _1 = IF _2 = uninterpreted_cpp_code
    {        ( _2 )}

uninterpreted_cpp_code:
  
    {        ( [] )}
| _1 = uninterpreted_cpp_code_fragment _2 = uninterpreted_cpp_code
    {        ( _1 @ _2 )}

uninterpreted_cpp_code_fragment:
  _1 = NUMBER
    {        ( let n,_,_ = _1 in [string_of_int n] )}
| _1 = ident
    {        ( let s,_,_ = _1 in break_dotted_name s )}
| _1 = DOUBLECOLON _2 = uninterpreted_cpp_code_fragment
    {        ( "::"::_2 )}
| _1 = LESSTHAN _2 = uninterpreted_cpp_code_fragment
    {        ( (" < "::_2) )}
| _1 = GREATERTHAN _2 = uninterpreted_cpp_code_fragment
    {        ( (" > "::_2) )}
| _1 = ARROW _2 = uninterpreted_cpp_code_fragment
    {        ( (" => "::_2) )}
| _1 = BACKARROW _2 = uninterpreted_cpp_code_fragment
    {        ( (" <= "::_2) )}
| _1 = ISEQUALS _2 = uninterpreted_cpp_code_fragment
    {        ( (" == "::_2) )}
| _1 = NOTEQUALS _2 = uninterpreted_cpp_code_fragment
    {        ( (" != "::_2) )}
| _1 = DOUBLEAMPERSAND _2 = uninterpreted_cpp_code_fragment
    {        ( (" && "::_2) )}
| _1 = DOUBLEBAR _2 = uninterpreted_cpp_code_fragment
    {        ( (" || "::_2) )}
| _1 = LEFT_PAREN _2 = uninterpreted_cpp_code_comma_list _3 = RIGHT_PAREN
    {        ( ("("::(comma_separate _2)) @ [")"] )}
| _1 = LEFT_SQ_BRACE _2 = uninterpreted_cpp_code _3 = RIGHT_SQ_BRACE
    { ( ("["::_2) @ [ "]" ] )}
| _1 = EXCLAMATION _2 = uninterpreted_cpp_code_fragment
    { ( "!"::_2 )}
| _1 = PIPE _2 = uninterpreted_cpp_code_fragment
    {        ( "->"::_2 )}
| _1 = STAR _2 = uninterpreted_cpp_code_fragment
    {        ( "*"::_2 )}
| _1 = PLUS _2 = uninterpreted_cpp_code_fragment
    {        ( "+"::_2 )}
| _1 = MINUS _2 = uninterpreted_cpp_code_fragment
    {        ( "-"::_2 )}
| _1 = QUESTION _2 = uninterpreted_cpp_code_fragment
    {        ( ("?"::_2) )}
| _1 = COLON _2 = uninterpreted_cpp_code_fragment
    {        ( (":"::_2) )}
| _1 = DOT _2 = uninterpreted_cpp_code_fragment
    {        ( ("."::_2) )}

uninterpreted_cpp_code_comma_list:
  _1 = uninterpreted_cpp_code
    {        ( match _1 with
                [] -> []
                | _ -> [_1] )}
| _1 = uninterpreted_cpp_code _2 = COMMA _3 = uninterpreted_cpp_code_comma_list
    {        ( _1::_3 )}

expr_part:
  _1 = assn _2 = SEMI
    { ( _1 )}

assn:
  _1 = IDENTIFIER _2 = EQUALS _3 = ident_list
    { ( { exprname=_1; condbinding=[]; successors=_3; etype=Choice } )}
| _1 = IDENTIFIER _2 = COLON _3 = LEFT_SQ_BRACE _4 = comma_list _5 = RIGHT_SQ_BRACE _6 = EQUALS _7 = ident_list
    { ( { exprname=_1; condbinding=_4; successors=_7; etype=Choice } )}
| _1 = IDENTIFIER _2 = EQUALS _3 = namespaced_ident _4 = AMPERSAND _5 = par_ident_list
    {        ( { exprname=_1; condbinding=[]; successors=_3::_5; etype=Concurrent } )}
| _1 = IDENTIFIER _2 = AMPERSANDEQUALS _3 = namespaced_ident
    {        ( let id,p1,p2 = _1
          in { exprname=("&"^id,p1,p2); condbinding=[]; successors=[_3]; etype=Concurrent } )}

par_ident_list:
  _1 = par_ident_list _2 = AMPERSAND _3 = namespaced_ident
    { ( _1 @ [ _3 ] )}
| _1 = namespaced_ident
    { ( [ _1 ] )}

ident_list:
  _1 = ident_list _2 = PIPE _3 = namespaced_ident
    { ( _1 @ [ _3 ] )}
| _1 = namespaced_ident
    { ( [ _1 ] )}
| 
    { ( [] )}

ident:
  _1 = IDENTIFIER
    { ( _1 )}

comma_list:
  _1 = comma_list _2 = COMMA _3 = IDENTIFIER
    { ( _1 @ [ Ident _3 ] )}
| _1 = comma_list _2 = COMMA _3 = STAR
    { ( _1 @ [ Star ] )}
| _1 = STAR
    { ( [ Star ] )}
| _1 = IDENTIFIER
    { ( [ Ident _1 ] )}

err_def:
  _1 = HANDLE _2 = ERROR _3 = ident_list _4 = PIPE _5 = namespaced_ident _6 = SEMI
    { ( { onnodes=_3; handler=_5 } )}

%%
