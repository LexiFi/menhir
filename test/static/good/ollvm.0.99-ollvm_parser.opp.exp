File "ollvm.0.99-ollvm_parser.mly", line 169, characters 0-14:
Warning: symbol instr_metadata is unreachable from any of the start symbol(s).
%{

open Ollvm_ast

(* att type is a workaround to simplify parsing of optionnal keywords in
 * global / function declaration / definition.
 * It is far from what would be ideal since it will allow to parse silly
 * LLVM IR (keywords at the bad place, or function attributes in global
 * variable declaration, ...).
 * It will work as expected with valid LLVM IR. *)

type att =
  | OPT_fn_attr of fn_attr list
  | OPT_align of int
  | OPT_section of string
  | OPT_linkage of linkage
  | OPT_visibility of visibility
  | OPT_thread_local of thread_local_storage
  | OPT_addrspace of int
  | OPT_unnamed_addr
  | OPT_cconv of cconv
  | OPT_dll_storage of dll_storage
  | OPT_externally_initialized
  | OPT_gc of string

let rec get_opt f  = function
  | []       -> None
  | hd :: tl -> match f hd with None -> get_opt f tl | x -> x

let get_fn_attrs l =
  match get_opt (function OPT_fn_attr a -> Some a | _ -> None) l with
  | None  -> []
  | Some l -> l

let get_section =
  get_opt (function OPT_section s -> Some s | _ -> None)

let get_align =
  get_opt (function OPT_align a -> Some a | _ -> None)

let get_linkage =
  get_opt (function OPT_linkage l -> Some l | _ -> None)

let get_visibility =
  get_opt (function OPT_visibility v -> Some v | _ -> None)

let get_addrspace =
  get_opt (function OPT_addrspace i -> Some i | _ -> None)

let get_dll_storage =
  get_opt (function OPT_dll_storage i -> Some i | _ -> None)

let get_cconv =
  get_opt (function OPT_cconv i -> Some i | _ -> None)

let get_thread_local =
  get_opt (function OPT_thread_local x -> Some x | _ -> None)

let get_gc =
  get_opt (function OPT_gc x -> Some x | _ -> None)

let is_unnamed_addr l =
  None <> get_opt (function OPT_unnamed_addr -> Some () | _ -> None) l

let is_externally_initialized l =
  None <> get_opt (function OPT_externally_initialized -> Some () | _ -> None) l

%}
%start toplevelentries
%token <int> ATTR_GRP_ID
%token BANGLCURLY
%token COMMA
%token EOF
%token EOL
%token EQ
%token <float> FLOAT
%token <string> GLOBAL
%token GT
%token <int> I
%token <int> INTEGER
%token KW_ADD
%token KW_ADDRSPACE
%token KW_ALIGN
%token KW_ALIGNSTACK
%token KW_ALLOCA
%token KW_ALWAYSINLINE
%token KW_AND
%token KW_APPENDING
%token KW_ARCP
%token KW_ASHR
%token KW_ATOMICCMPXCHG
%token KW_ATOMICRMW
%token KW_ATTRIBUTES
%token KW_AVAILABLE_EXTERNALLY
%token KW_BITCAST
%token KW_BR
%token KW_BUILTIN
%token KW_BYVAL
%token KW_CALL
%token KW_CC
%token KW_CCC
%token KW_COLD
%token KW_COLDCC
%token KW_COMMON
%token KW_CONSTANT
%token KW_DATALAYOUT
%token KW_DECLARE
%token KW_DEFAULT
%token KW_DEFINE
%token KW_DEREFERENCEABLE
%token KW_DLLEXPORT
%token KW_DLLIMPORT
%token KW_DOUBLE
%token KW_EQ
%token KW_EXACT
%token KW_EXTERNAL
%token KW_EXTERNALLY_INITIALIZED
%token KW_EXTERN_WEAK
%token KW_EXTRACTELEMENT
%token KW_EXTRACTVALUE
%token KW_FADD
%token KW_FALSE
%token KW_FAST
%token KW_FASTCC
%token KW_FCMP
%token KW_FDIV
%token KW_FENCE
%token KW_FLOAT
%token KW_FMUL
%token KW_FP128
%token KW_FPEXT
%token KW_FPTOSI
%token KW_FPTOUI
%token KW_FPTRUNC
%token KW_FREM
%token KW_FSUB
%token KW_GC
%token KW_GETELEMENTPTR
%token KW_GLOBAL
%token KW_HALF
%token KW_HIDDEN
%token KW_ICMP
%token KW_INALLOCA
%token KW_INBOUNDS
%token KW_INDIRECTBR
%token KW_INITIALEXEC
%token KW_INLINEHINT
%token KW_INREG
%token KW_INSERTELEMENT
%token KW_INSERTVALUE
%token KW_INTERNAL
%token KW_INTTOPTR
%token KW_INVOKE
%token KW_JUMPTABLE
%token KW_LABEL
%token KW_LANDINGPAD
%token KW_LINKONCE
%token KW_LINKONCE_ODR
%token KW_LOAD
%token KW_LOCALDYNAMIC
%token KW_LOCALEXEC
%token KW_LSHR
%token KW_METADATA
%token KW_MINSIZE
%token KW_MUL
%token KW_NAKED
%token KW_NE
%token KW_NEST
%token KW_NINF
%token KW_NNAN
%token KW_NOALIAS
%token KW_NOBUILTIN
%token KW_NOCAPTURE
%token KW_NODUPLICATE
%token KW_NOIMPLICITFLOAT
%token KW_NOINLINE
%token KW_NONLAZYBIND
%token KW_NONNULL
%token KW_NOREDZONE
%token KW_NORETURN
%token KW_NOUNWIND
%token KW_NSW
%token KW_NSZ
%token KW_NULL
%token KW_NUW
%token KW_OEQ
%token KW_OGE
%token KW_OGT
%token KW_OLE
%token KW_OLT
%token KW_ONE
%token KW_OPAQUE
%token KW_OPTNONE
%token KW_OPTSIZE
%token KW_OR
%token KW_ORD
%token KW_PHI
%token KW_PPC_FP128
%token KW_PRIVATE
%token KW_PROTECTED
%token KW_PTRTOINT
%token KW_READNONE
%token KW_READONLY
%token KW_RESUME
%token KW_RET
%token KW_RETURNED
%token KW_RETURNS_TWICE
%token KW_SANITIZE_ADDRESS
%token KW_SANITIZE_MEMORY
%token KW_SANITIZE_THREAD
%token KW_SDIV
%token KW_SECTION
%token KW_SELECT
%token KW_SEXT
%token KW_SGE
%token KW_SGT
%token KW_SHL
%token KW_SHUFFLEVECTOR
%token KW_SIGNEXT
%token KW_SITOFP
%token KW_SLE
%token KW_SLT
%token KW_SREM
%token KW_SRET
%token KW_SSP
%token KW_SSPREQ
%token KW_SSPSTRONG
%token KW_STORE
%token KW_SUB
%token KW_SWITCH
%token KW_TAIL
%token KW_TARGET
%token KW_THREAD_LOCAL
%token KW_TO
%token KW_TRIPLE
%token KW_TRUE
%token KW_TRUNC
%token KW_TYPE
%token KW_UDIV
%token KW_UEQ
%token KW_UGE
%token KW_UGT
%token KW_UITOFP
%token KW_ULE
%token KW_ULT
%token KW_UNDEF
%token KW_UNE
%token KW_UNNAMED_ADDR
%token KW_UNO
%token KW_UNREACHABLE
%token KW_UNWIND
%token KW_UREM
%token KW_UWTABLE
%token KW_VAARG
%token KW_VOID
%token KW_VOLATILE
%token KW_WEAK
%token KW_WEAK_ODR
%token KW_X
%token KW_X86_FP80
%token KW_X86_MMX
%token KW_XOR
%token KW_ZEROEXT
%token KW_ZEROINITIALIZER
%token KW_ZEXT
%token <string> LABEL
%token LCURLY
%token <string> LOCAL
%token LPAREN
%token LSQUARE
%token LT
%token LTLCURLY
%token <string> METADATA_ID
%token <string> METADATA_STRING
%token RCURLY
%token RCURLYGT
%token RPAREN
%token RSQUARE
%token STAR
%token <string> STRING
%type <Ollvm_ast.toplevelentries> toplevelentries
%%

option_EOL_:
  
    {    ( None )}
| x = EOL
    {    ( Some x )}

option_KW_EXACT_:
  
    {    ( None )}
| x = KW_EXACT
    {    ( Some x )}

option_KW_GETELEMENTPTR_:
  
    {    ( None )}
| x = KW_GETELEMENTPTR
    {    ( Some x )}

option_KW_NSW_:
  
    {    ( None )}
| x = KW_NSW
    {    ( Some x )}

option_KW_NUW_:
  
    {    ( None )}
| x = KW_NUW
    {    ( Some x )}

option_KW_TAIL_:
  
    {    ( None )}
| x = KW_TAIL
    {    ( Some x )}

option_KW_VOLATILE_:
  
    {    ( None )}
| x = KW_VOLATILE
    {    ( Some x )}

option_cconv_:
  
    {    ( None )}
| x = cconv
    {    ( Some x )}

option_const_:
  
    {    ( None )}
| x = const
    {    ( Some x )}

option_preceded_COMMA_align__:
  
    {    ( None )}
| _1 = COMMA x = align
    {let x =     ( x ) in
    ( Some x )}

option_preceded_COMMA_alloca_opt__:
  
    {    ( None )}
| _1 = COMMA x = alloca_opt
    {let x =     ( x ) in
    ( Some x )}

option_preceded_COMMA_separated_list_COMMA_global_attr___:
  
    {    ( None )}
| _1 = COMMA xs = loption_separated_nonempty_list_COMMA_global_attr__
    {let x =
  let x =     ( xs ) in
      ( x )
in
    ( Some x )}

option_terminated_LABEL_nonempty_list_EOL___:
  
    {    ( None )}
| x = LABEL _2 = nonempty_list_EOL_
    {let x =     ( x ) in
    ( Some x )}

loption_separated_nonempty_list_COMMA_METADATA_ID__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_METADATA_ID_
    {    ( x )}

loption_separated_nonempty_list_COMMA_call_arg__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_call_arg_
    {    ( x )}

loption_separated_nonempty_list_COMMA_dc_arg__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_dc_arg_
    {    ( x )}

loption_separated_nonempty_list_COMMA_df_arg__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_df_arg_
    {    ( x )}

loption_separated_nonempty_list_COMMA_global_attr__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_global_attr_
    {    ( x )}

loption_separated_nonempty_list_COMMA_metadata_value__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_metadata_value_
    {    ( x )}

loption_separated_nonempty_list_COMMA_tconst__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_tconst_
    {    ( x )}

loption_separated_nonempty_list_COMMA_tident__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_tident_
    {    ( x )}

loption_separated_nonempty_list_COMMA_typ__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_typ_
    {    ( x )}

list_EOL_:
  
    {    ( [] )}
| x = EOL xs = list_EOL_
    {    ( x :: xs )}

list_df_post_attr_:
  
    {    ( [] )}
| x = df_post_attr xs = list_df_post_attr_
    {    ( x :: xs )}

list_df_pre_attr_:
  
    {    ( [] )}
| x = df_pre_attr xs = list_df_pre_attr_
    {    ( x :: xs )}

list_fast_math_:
  
    {    ( [] )}
| x = fast_math xs = list_fast_math_
    {    ( x :: xs )}

list_fn_attr_:
  
    {    ( [] )}
| x = fn_attr xs = list_fn_attr_
    {    ( x :: xs )}

list_global_attr_:
  
    {    ( [] )}
| x = global_attr xs = list_global_attr_
    {    ( x :: xs )}

list_pair_terminated_LABEL_nonempty_list_EOL___nonempty_list_terminated_instr_nonempty_list_EOL_____:
  
    {    ( [] )}
| x = LABEL _2 = nonempty_list_EOL_ y = nonempty_list_terminated_instr_nonempty_list_EOL___ xs = list_pair_terminated_LABEL_nonempty_list_EOL___nonempty_list_terminated_instr_nonempty_list_EOL_____
    {let x =
  let x =     ( x ) in
      ( (x, y) )
in
    ( x :: xs )}

list_param_attr_:
  
    {    ( [] )}
| x = param_attr xs = list_param_attr_
    {    ( x :: xs )}

list_preceded_COMMA_tvalue__:
  
    {    ( [] )}
| _1 = COMMA x = tvalue xs = list_preceded_COMMA_tvalue__
    {let x =     ( x ) in
    ( x :: xs )}

list_switch_table_entry_:
  
    {    ( [] )}
| x = switch_table_entry xs = list_switch_table_entry_
    {    ( x :: xs )}

list_terminated_toplevelentry_nonempty_list_EOL___:
  
    {    ( [] )}
| x = toplevelentry _2 = nonempty_list_EOL_ xs = list_terminated_toplevelentry_nonempty_list_EOL___
    {let x =     ( x ) in
    ( x :: xs )}

nonempty_list_EOL_:
  x = EOL
    {    ( [ x ] )}
| x = EOL xs = nonempty_list_EOL_
    {    ( x :: xs )}

nonempty_list_fn_attr_:
  x = fn_attr
    {    ( [ x ] )}
| x = fn_attr xs = nonempty_list_fn_attr_
    {    ( x :: xs )}

nonempty_list_terminated_instr_nonempty_list_EOL___:
  x = instr _2 = nonempty_list_EOL_
    {let x =     ( x ) in
    ( [ x ] )}
| x = instr _2 = nonempty_list_EOL_ xs = nonempty_list_terminated_instr_nonempty_list_EOL___
    {let x =     ( x ) in
    ( x :: xs )}

separated_nonempty_list_COMMA_INTEGER_:
  x = INTEGER
    {    ( [ x ] )}
| x = INTEGER _2 = COMMA xs = separated_nonempty_list_COMMA_INTEGER_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_METADATA_ID_:
  x = METADATA_ID
    {    ( [ x ] )}
| x = METADATA_ID _2 = COMMA xs = separated_nonempty_list_COMMA_METADATA_ID_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_call_arg_:
  x = call_arg
    {    ( [ x ] )}
| x = call_arg _2 = COMMA xs = separated_nonempty_list_COMMA_call_arg_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_dc_arg_:
  x = dc_arg
    {    ( [ x ] )}
| x = dc_arg _2 = COMMA xs = separated_nonempty_list_COMMA_dc_arg_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_df_arg_:
  x = df_arg
    {    ( [ x ] )}
| x = df_arg _2 = COMMA xs = separated_nonempty_list_COMMA_df_arg_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_global_attr_:
  x = global_attr
    {    ( [ x ] )}
| x = global_attr _2 = COMMA xs = separated_nonempty_list_COMMA_global_attr_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_metadata_value_:
  x = metadata_value
    {    ( [ x ] )}
| x = metadata_value _2 = COMMA xs = separated_nonempty_list_COMMA_metadata_value_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_phi_table_entry_:
  x = phi_table_entry
    {    ( [ x ] )}
| x = phi_table_entry _2 = COMMA xs = separated_nonempty_list_COMMA_phi_table_entry_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_tconst_:
  x = tconst
    {    ( [ x ] )}
| x = tconst _2 = COMMA xs = separated_nonempty_list_COMMA_tconst_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_tident_:
  x = tident
    {    ( [ x ] )}
| x = tident _2 = COMMA xs = separated_nonempty_list_COMMA_tident_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_typ_:
  x = typ
    {    ( [ x ] )}
| x = typ _2 = COMMA xs = separated_nonempty_list_COMMA_typ_
    {    ( x :: xs )}

toplevelentries:
  _1 = list_EOL_ m = list_terminated_toplevelentry_nonempty_list_EOL___ _3 = EOF
    {                                                ( m )}

toplevelentry:
  d = definition
    {                                        ( TLE_Definition d               )}
| d = declaration
    {                                        ( TLE_Declaration d              )}
| _1 = KW_TARGET _2 = KW_DATALAYOUT _3 = EQ s = STRING
    {                                        ( TLE_Datalayout s               )}
| _1 = KW_TARGET _2 = KW_TRIPLE _3 = EQ s = STRING
    {                                        ( TLE_Target s                   )}
| i = LOCAL _2 = EQ _3 = KW_TYPE t = typ
    {                                        ( TLE_Type_decl (ID_Local i, t) )}
| g = global_decl
    {                                        ( TLE_Global g                   )}
| i = METADATA_ID _2 = EQ m = tle_metadata
    {                                        ( TLE_Metadata (i, m)            )}
| _1 = KW_ATTRIBUTES i = ATTR_GRP_ID _3 = EQ _4 = LCURLY a = list_fn_attr_ _6 = RCURLY
    {                                        ( TLE_Attribute_group (i, a)     )}

tle_metadata:
  _1 = BANGLCURLY xs = loption_separated_nonempty_list_COMMA_METADATA_ID__ _3 = RCURLY
    {let m =     ( xs ) in
   ( METADATA_Named m )}
| _1 = KW_METADATA m = metadata_node
    {    ( m )}

metadata_node:
  _1 = BANGLCURLY xs = loption_separated_nonempty_list_COMMA_metadata_value__ _3 = RCURLY
    {let m =     ( xs ) in
    ( METADATA_Node m )}

metadata_value:
  _1 = tconst
    {                                ( METADATA_Const _1  )}
| _1 = KW_NULL
    {                                ( METADATA_Null      )}
| _1 = KW_METADATA _2 = METADATA_STRING
    {                                ( METADATA_String _2 )}
| _1 = KW_METADATA _2 = METADATA_ID
    {                                ( METADATA_Id _2     )}
| _1 = KW_METADATA _2 = metadata_node
    {                                ( _2                 )}

global_decl:
  ident = GLOBAL _2 = EQ attrs = list_global_attr_ g_constant = global_is_constant g_typ = typ g_value = option_const_ opt = option_preceded_COMMA_separated_list_COMMA_global_attr___
    {      ( let opt = match opt with Some o -> o | None -> [] in
        { g_ident=ID_Global ident;
          g_typ;
          g_constant;
          g_value;

          g_linkage = get_linkage attrs;
          g_visibility = get_visibility attrs;
          g_dll_storage = get_dll_storage attrs;
          g_thread_local = get_thread_local attrs;
          g_unnamed_addr = is_unnamed_addr attrs;
          g_addrspace = get_addrspace attrs;
          g_externally_initialized = is_externally_initialized attrs;
          g_section = get_section opt;
          g_align = get_align opt; } )}

global_is_constant:
  _1 = KW_GLOBAL
    {              ( false )}
| _1 = KW_CONSTANT
    {                ( true )}

global_attr:
  a = linkage
    {                                        ( OPT_linkage a              )}
| a = visibility
    {                                        ( OPT_visibility a           )}
| a = dll_storage
    {                                        ( OPT_dll_storage a          )}
| _1 = KW_THREAD_LOCAL _2 = LPAREN t = tls _4 = RPAREN
    {                                        ( OPT_thread_local t         )}
| _1 = KW_UNNAMED_ADDR
    {                                        ( OPT_unnamed_addr           )}
| _1 = KW_EXTERNALLY_INITIALIZED
    {                                        ( OPT_externally_initialized )}

dll_storage:
  _1 = KW_DLLIMPORT
    {                 ( DLLSTORAGE_Dllimport )}
| _1 = KW_DLLEXPORT
    {                 ( DLLSTORAGE_Dllexport )}

tls:
  _1 = KW_LOCALDYNAMIC
    {                    ( TLS_Localdynamic )}
| _1 = KW_INITIALEXEC
    {                    ( TLS_Initialexec  )}
| _1 = KW_LOCALEXEC
    {                    ( TLS_Localexec    )}

declaration:
  _1 = KW_DECLARE dc_ret_attrs = list_param_attr_ dc_ret_typ = typ name = GLOBAL _5 = LPAREN xs = loption_separated_nonempty_list_COMMA_dc_arg__ _7 = RPAREN post_attrs = list_global_attr_
    {let dc_args =     ( xs ) in
    ( {dc_type=TYPE_Function(dc_ret_typ, List.map fst dc_args);
       dc_name=ID_Global name;
       dc_param_attrs=(dc_ret_attrs, List.map snd dc_args);} )}

definition:
  _1 = KW_DEFINE pre_attrs = list_df_pre_attr_ df_ret_attrs = list_param_attr_ df_ret_typ = typ name = GLOBAL _6 = LPAREN xs = loption_separated_nonempty_list_COMMA_df_arg__ _8 = RPAREN post_attrs = list_df_post_attr_ _10 = list_EOL_ _11 = LCURLY _12 = list_EOL_ df_blocks = df_blocks _14 = RCURLY
    {let df_args =     ( xs ) in
    ( { df_prototype = {
          dc_type = TYPE_Function (df_ret_typ,
                                   List.map (fun x -> fst (fst x)) df_args) ;
          dc_param_attrs = (df_ret_attrs,
                           List.map (fun x -> snd (fst x)) df_args) ;
          dc_name=ID_Global name ; } ;
        df_args=List.map snd df_args;
        df_instrs=df_blocks;

        df_linkage = get_linkage pre_attrs;
        df_visibility = get_visibility pre_attrs;
        df_dll_storage = get_dll_storage pre_attrs;
        df_cconv = get_cconv pre_attrs;
        df_attrs = get_fn_attrs post_attrs;
        df_section = get_section post_attrs;
        df_align = get_align post_attrs;
        df_gc = get_gc post_attrs;
        } )}

df_blocks:
  hd_lbl = option_terminated_LABEL_nonempty_list_EOL___ hd = nonempty_list_terminated_instr_nonempty_list_EOL___ tl = list_pair_terminated_LABEL_nonempty_list_EOL___nonempty_list_terminated_instr_nonempty_list_EOL_____
    {  ( let hb_lbl=match hd_lbl with Some x -> x | _ -> "" in
    (hb_lbl, hd) :: tl)}

df_pre_attr:
  a = linkage
    {                                         ( OPT_linkage a     )}
| a = visibility
    {                                         ( OPT_visibility a  )}
| a = dll_storage
    {                                         ( OPT_dll_storage a )}
| a = cconv
    {                                         ( OPT_cconv a       )}

df_post_attr:
  _1 = KW_ADDRSPACE _2 = LPAREN n = INTEGER _4 = RPAREN
    {                                         ( OPT_addrspace n   )}
| _1 = KW_UNNAMED_ADDR
    {                                         ( OPT_unnamed_addr  )}
| a = nonempty_list_fn_attr_
    {                                         ( OPT_fn_attr a     )}
| s = section
    {                                         ( OPT_section s     )}
| a = align
    {                                         ( OPT_align a       )}
| _1 = KW_GC a = STRING
    {                                         ( OPT_gc a          )}

linkage:
  _1 = KW_PRIVATE
    {                                    ( LINKAGE_Private                      )}
| _1 = KW_INTERNAL
    {                                    ( LINKAGE_Internal                     )}
| _1 = KW_AVAILABLE_EXTERNALLY
    {                                    ( LINKAGE_Available_externally         )}
| _1 = KW_LINKONCE
    {                                    ( LINKAGE_Linkonce                     )}
| _1 = KW_WEAK
    {                                    ( LINKAGE_Weak                         )}
| _1 = KW_COMMON
    {                                    ( LINKAGE_Common                       )}
| _1 = KW_APPENDING
    {                                    ( LINKAGE_Appending                    )}
| _1 = KW_EXTERN_WEAK
    {                                    ( LINKAGE_Extern_weak                  )}
| _1 = KW_LINKONCE_ODR
    {                                    ( LINKAGE_Linkonce_odr                 )}
| _1 = KW_WEAK_ODR
    {                                    ( LINKAGE_Weak_odr                     )}
| _1 = KW_EXTERNAL
    {                                    ( LINKAGE_External                     )}

visibility:
  _1 = KW_DEFAULT
    {                 ( VISIBILITY_Default   )}
| _1 = KW_HIDDEN
    {                 ( VISIBILITY_Hidden    )}
| _1 = KW_PROTECTED
    {                 ( VISIBILITY_Protected )}

cconv:
  _1 = KW_CCC
    {         (CC_Ccc)}
| _1 = KW_FASTCC
    {                           (CC_Fastcc)}
| _1 = KW_COLDCC
    {                                                (CC_Coldcc)}
| _1 = KW_CC n = INTEGER
    {                  (CC_Cc n)}

typ:
  n = I
    {                                                      ( TYPE_I n              )}
| _1 = KW_VOID
    {                                                      ( TYPE_Void             )}
| _1 = KW_HALF
    {                                                      ( TYPE_Half             )}
| _1 = KW_FLOAT
    {                                                      ( TYPE_Float            )}
| _1 = KW_DOUBLE
    {                                                      ( TYPE_Double           )}
| _1 = KW_X86_FP80
    {                                                      ( TYPE_X86_fp80         )}
| _1 = KW_FP128
    {                                                      ( TYPE_Fp128            )}
| _1 = KW_PPC_FP128
    {                                                      ( TYPE_Ppc_fp128        )}
| _1 = KW_LABEL
    {                                                      ( TYPE_Label            )}
| _1 = KW_METADATA
    {                                                      ( TYPE_Metadata         )}
| _1 = KW_X86_MMX
    {                                                      ( TYPE_X86_mmx          )}
| t = typ _2 = STAR
    {                                                      ( TYPE_Pointer t        )}
| _1 = LSQUARE n = INTEGER _3 = KW_X t = typ _5 = RSQUARE
    {                                                      ( TYPE_Array (n, t)     )}
| t = typ _2 = LPAREN xs = loption_separated_nonempty_list_COMMA_typ__ _4 = RPAREN
    {let ts =     ( xs ) in
                                                      ( TYPE_Function (t, ts) )}
| _1 = LCURLY xs = loption_separated_nonempty_list_COMMA_typ__ _3 = RCURLY
    {let ts =     ( xs ) in
                                                      ( TYPE_Struct ts        )}
| _1 = LTLCURLY xs = loption_separated_nonempty_list_COMMA_typ__ _3 = RCURLYGT
    {let ts =     ( xs ) in
                                                      ( TYPE_Packed_struct ts )}
| _1 = KW_OPAQUE
    {                                                      ( TYPE_Opaque           )}
| _1 = LT n = INTEGER _3 = KW_X t = typ _5 = GT
    {                                                      ( TYPE_Vector (n, t)    )}

param_attr:
  _1 = KW_ZEROEXT
    {                                 ( PARAMATTR_Zeroext           )}
| _1 = KW_SIGNEXT
    {                                 ( PARAMATTR_Signext           )}
| _1 = KW_INREG
    {                                 ( PARAMATTR_Inreg             )}
| _1 = KW_BYVAL
    {                                 ( PARAMATTR_Byval             )}
| _1 = KW_INALLOCA
    {                                 ( PARAMATTR_Inalloca          )}
| _1 = KW_SRET
    {                                 ( PARAMATTR_Sret              )}
| _1 = KW_ALIGN n = INTEGER
    {                                 ( PARAMATTR_Align n           )}
| _1 = KW_NOALIAS
    {                                 ( PARAMATTR_Noalias           )}
| _1 = KW_NOCAPTURE
    {                                 ( PARAMATTR_Nocapture         )}
| _1 = KW_NEST
    {                                 ( PARAMATTR_Nest              )}
| _1 = KW_RETURNED
    {                                 ( PARAMATTR_Returned          )}
| _1 = KW_NONNULL
    {                                 ( PARAMATTR_Nonnull           )}
| _1 = KW_DEREFERENCEABLE _2 = LPAREN n = INTEGER _4 = RPAREN
    {                                 ( PARAMATTR_Dereferenceable n )}

dc_arg:
  t = typ p = list_param_attr_
    {                                    ( (t, p)      )}

df_arg:
  t = typ p = list_param_attr_ i = ident
    {                                    ( ((t, p), i) )}

call_arg:
  t = typ i = value
    {                                    ( (t, i)      )}

fn_attr:
  _1 = KW_ALIGNSTACK _2 = LPAREN p = INTEGER _4 = RPAREN
    {                                          ( FNATTR_Alignstack p     )}
| _1 = KW_ALWAYSINLINE
    {                                          ( FNATTR_Alwaysinline     )}
| _1 = KW_BUILTIN
    {                                          ( FNATTR_Nobuiltin        )}
| _1 = KW_COLD
    {                                          ( FNATTR_Cold             )}
| _1 = KW_INLINEHINT
    {                                          ( FNATTR_Inlinehint       )}
| _1 = KW_JUMPTABLE
    {                                          ( FNATTR_Jumptable        )}
| _1 = KW_MINSIZE
    {                                          ( FNATTR_Minsize          )}
| _1 = KW_NAKED
    {                                          ( FNATTR_Naked            )}
| _1 = KW_NOBUILTIN
    {                                          ( FNATTR_Nobuiltin        )}
| _1 = KW_NODUPLICATE
    {                                          ( FNATTR_Noduplicate      )}
| _1 = KW_NOIMPLICITFLOAT
    {                                          ( FNATTR_Noimplicitfloat  )}
| _1 = KW_NOINLINE
    {                                          ( FNATTR_Noinline         )}
| _1 = KW_NONLAZYBIND
    {                                          ( FNATTR_Nonlazybind      )}
| _1 = KW_NOREDZONE
    {                                          ( FNATTR_Noredzone        )}
| _1 = KW_NORETURN
    {                                          ( FNATTR_Noreturn         )}
| _1 = KW_NOUNWIND
    {                                          ( FNATTR_Nounwind         )}
| _1 = KW_OPTNONE
    {                                          ( FNATTR_Optnone          )}
| _1 = KW_OPTSIZE
    {                                          ( FNATTR_Optsize          )}
| _1 = KW_READNONE
    {                                          ( FNATTR_Readnone         )}
| _1 = KW_READONLY
    {                                          ( FNATTR_Readonly         )}
| _1 = KW_RETURNS_TWICE
    {                                          ( FNATTR_Returns_twice    )}
| _1 = KW_SANITIZE_ADDRESS
    {                                          ( FNATTR_Sanitize_address )}
| _1 = KW_SANITIZE_MEMORY
    {                                          ( FNATTR_Sanitize_memory  )}
| _1 = KW_SANITIZE_THREAD
    {                                          ( FNATTR_Sanitize_thread  )}
| _1 = KW_SSP
    {                                          ( FNATTR_Ssp              )}
| _1 = KW_SSPREQ
    {                                          ( FNATTR_Sspreq           )}
| _1 = KW_SSPSTRONG
    {                                          ( FNATTR_Sspstrong        )}
| _1 = KW_UWTABLE
    {                                          ( FNATTR_Uwtable          )}
| s = STRING
    {                                          ( FNATTR_String s         )}
| k = STRING _2 = EQ v = STRING
    {                                          ( FNATTR_Key_value (k, v) )}
| i = ATTR_GRP_ID
    {                                          ( FNATTR_Attr_grp i       )}

align:
  _1 = KW_ALIGN p = INTEGER
    {                          ( p )}

section:
  _1 = KW_SECTION s = STRING
    {                             ( s )}

ibinop_nuw_nsw_opt:
  _1 = KW_ADD
    {           ( fun nuw nsw -> Add (nuw, nsw) )}
| _1 = KW_SUB
    {           ( fun nuw nsw -> Sub (nuw, nsw) )}
| _1 = KW_MUL
    {           ( fun nuw nsw -> Mul (nuw, nsw) )}
| _1 = KW_SHL
    {           ( fun nuw nsw -> Shl (nuw, nsw) )}

ibinop_exact_opt:
  _1 = KW_UDIV
    {            ( fun exact -> UDiv exact )}
| _1 = KW_SDIV
    {            ( fun exact -> SDiv exact )}
| _1 = KW_LSHR
    {            ( fun exact -> LShr exact )}
| _1 = KW_ASHR
    {            ( fun exact -> AShr exact )}

ibinop_no_opt:
  _1 = KW_UREM
    {          (URem)}
| _1 = KW_SREM
    {                        (SRem)}
| _1 = KW_AND
    {                                     (And)}
| _1 = KW_OR
    {                                                (Or)}
| _1 = KW_XOR
    {                                                           (Xor)}

icmp:
  _1 = KW_EQ
    {        (Eq)}
| _1 = KW_NE
    {                  (Ne)}
| _1 = KW_UGT
    {                             (Ugt)}
| _1 = KW_UGE
    {                                         (Uge)}
| _1 = KW_ULT
    {                                                      (Ult)}
| _1 = KW_ULE
    {                                                                  (Ule)}
| _1 = KW_SGT
    {         (Sgt)}
| _1 = KW_SGE
    {                     (Sge)}
| _1 = KW_SLT
    {                                 (Slt)}
| _1 = KW_SLE
    {                                             (Sle)}

fcmp:
  _1 = KW_FALSE
    {          (False)}
| _1 = KW_OEQ
    {                        (Oeq)}
| _1 = KW_OGT
    {                                    (Ogt)}
| _1 = KW_OGE
    {                                                (Oge)}
| _1 = KW_OLT
    {                                                            (Olt)}
| _1 = KW_OLE
    {                                                                        (Ole)}
| _1 = KW_ONE
    {         (One)}
| _1 = KW_ORD
    {                     (Ord)}
| _1 = KW_UNO
    {                                 (Uno)}
| _1 = KW_UEQ
    {                                             (Ueq)}
| _1 = KW_UGT
    {                                                         (Ugt)}
| _1 = KW_UGE
    {                                                                     (Uge)}
| _1 = KW_ULT
    {         (Ult)}
| _1 = KW_ULE
    {                     (Ule)}
| _1 = KW_UNE
    {                                 (Une)}
| _1 = KW_TRUE
    {                                              (True)}

conversion:
  _1 = KW_TRUNC
    {           (Trunc)}
| _1 = KW_ZEXT
    {                          (Zext)}
| _1 = KW_SEXT
    {                                        (Sext)}
| _1 = KW_FPTRUNC
    {                                                         (Fptrunc)}
| _1 = KW_FPEXT
    {           (Fpext)}
| _1 = KW_UITOFP
    {                            (Uitofp)}
| _1 = KW_SITOFP
    {                                              (Sitofp)}
| _1 = KW_FPTOUI
    {                                                                (Fptoui)}
| _1 = KW_FPTOSI
    {            (Fptosi)}
| _1 = KW_INTTOPTR
    {                                (Inttoptr)}
| _1 = KW_PTRTOINT
    {                                                      (Ptrtoint)}
| _1 = KW_BITCAST
    {             (Bitcast)}

ibinop:
  op = ibinop_nuw_nsw_opt nuw = option_KW_NUW_ nsw = option_KW_NSW_
    {    ( op (nuw <> None) (nsw <> None) )}
| op = ibinop_exact_opt exact = option_KW_EXACT_
    {                                        ( op (exact <> None) )}
| op = ibinop_no_opt
    {                     ( op )}

fbinop:
  _1 = KW_FADD
    {         (FAdd)}
| _1 = KW_FSUB
    {                       (FSub)}
| _1 = KW_FMUL
    {                                     (FMul)}
| _1 = KW_FDIV
    {                                                   (FDiv)}
| _1 = KW_FREM
    {                                                                 (FRem)}

fast_math:
  _1 = KW_NNAN
    {         (Nnan)}
| _1 = KW_NINF
    {                       (Ninf)}
| _1 = KW_NSZ
    {                                    (Nsz)}
| _1 = KW_ARCP
    {                                                 (Arcp)}
| _1 = KW_FAST
    {                                                               (Fast)}

instr:
  op = ibinop t = typ o1 = value _4 = COMMA o2 = value
    {    ( INSTR_IBinop (op, t, o1, o2) )}
| _1 = KW_ICMP op = icmp t = typ o1 = value _5 = COMMA o2 = value
    {    ( INSTR_ICmp (op, t, o1, o2) )}
| op = fbinop f = list_fast_math_ t = typ o1 = value _5 = COMMA o2 = value
    {    ( INSTR_FBinop (op, f, t, o1, o2) )}
| _1 = KW_FCMP op = fcmp t = typ o1 = value _5 = COMMA o2 = value
    {    ( INSTR_FCmp (op, t, o1, o2) )}
| c = conversion t1 = typ v = value _4 = KW_TO t2 = typ
    {    ( INSTR_Conversion (c, t1, v, t2) )}
| _1 = option_KW_GETELEMENTPTR_ _2 = KW_INBOUNDS ptr = tvalue idx = list_preceded_COMMA_tvalue__
    {    ( INSTR_GetElementPtr (ptr, idx) )}
| _1 = option_KW_TAIL_ _2 = KW_CALL _3 = option_cconv_ _4 = list_param_attr_ f = tident _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_call_arg__ _3_inlined1 = RPAREN _7 = list_fn_attr_
    {let a =
  let x =     ( xs ) in
      ( x )
in
    ( INSTR_Call (f, a) )}
| _1 = KW_ALLOCA t = typ opt = option_preceded_COMMA_alloca_opt__
    {    ( let (n, a) = match opt with Some x -> x | None -> (None, None) in
      INSTR_Alloca (t, n, a) )}
| _1 = KW_LOAD vol = option_KW_VOLATILE_ tv = tvalue a = option_preceded_COMMA_align__
    {    ( INSTR_Load (vol<>None, tv, a) )}
| _1 = KW_PHI t = typ table = separated_nonempty_list_COMMA_phi_table_entry_
    {    ( INSTR_Phi (t, table) )}
| _1 = KW_SELECT if_ = tvalue _3 = COMMA then_ = tvalue _5 = COMMA else_ = tvalue
    {    ( INSTR_Select (if_, then_, else_) )}
| _1 = KW_EXTRACTELEMENT vec = tvalue _3 = COMMA idx = tvalue
    {    ( INSTR_ExtractElement (vec, idx) )}
| _1 = KW_INSERTELEMENT vec = tvalue _3 = COMMA new_el = tvalue _5 = COMMA idx = tvalue
    {    ( INSTR_InsertElement (vec, new_el, idx)  )}
| _1 = KW_EXTRACTVALUE tv = tvalue _3 = COMMA idx = separated_nonempty_list_COMMA_INTEGER_
    {    ( INSTR_ExtractValue (tv, idx) )}
| _1 = KW_INSERTVALUE agg = tvalue _3 = COMMA new_val = tvalue _5 = COMMA idx = separated_nonempty_list_COMMA_INTEGER_
    {    ( INSTR_InsertValue (agg, new_val, idx) )}
| _1 = KW_SHUFFLEVECTOR v1 = tvalue _3 = COMMA v2 = tvalue _5 = COMMA mask = tvalue
    {    ( INSTR_ShuffleVector (v1, v2, mask)  )}
| _1 = KW_VAARG
    {              ( failwith"INSTR_VAArg"  )}
| _1 = KW_LANDINGPAD
    {                     ( failwith"INSTR_LandingPad"    )}
| _1 = KW_STORE vol = option_KW_VOLATILE_ all = tvalue _4 = COMMA ptr = tident a = option_preceded_COMMA_align__
    {    ( INSTR_Store (vol<>None, all, ptr, a) )}
| _1 = KW_ATOMICCMPXCHG
    {                     ( failwith"INSTR_AtomicCmpXchg" )}
| _1 = KW_ATOMICRMW
    {                     ( failwith"INSTR_AtomicRMW"     )}
| _1 = KW_FENCE
    {                     ( failwith"INSTR_Fence"         )}
| _1 = KW_RET t = typ o = value
    {    ( INSTR_Ret (t, o) )}
| _1 = KW_RET _2 = KW_VOID
    {    ( INSTR_Ret_void )}
| _1 = KW_BR c = tvalue _3 = COMMA o1 = tident _5 = COMMA o2 = tident
    {    ( INSTR_Br (c, o1, o2) )}
| _1 = KW_BR b = tident
    {    ( INSTR_Br_1 b )}
| _1 = KW_SWITCH c = tvalue _3 = COMMA def = tident _5 = LSQUARE _6 = option_EOL_ table = list_switch_table_entry_ _8 = RSQUARE
    {    ( INSTR_Switch (c, def, table) )}
| _1 = KW_INDIRECTBR tv = tvalue _3 = COMMA _4 = LSQUARE xs = loption_separated_nonempty_list_COMMA_tident__ _6 = RSQUARE
    {let til =     ( xs ) in
    ( INSTR_IndirectBr (tv, til) )}
| _1 = KW_RESUME tv = tvalue
    {    ( INSTR_Resume tv )}
| _1 = KW_UNREACHABLE
    {    ( INSTR_Unreachable )}
| _1 = KW_INVOKE _2 = option_cconv_ ret = tident _4 = LPAREN xs = loption_separated_nonempty_list_COMMA_call_arg__ _6 = RPAREN _7 = list_fn_attr_ _8 = KW_TO l1 = tident _10 = KW_UNWIND l2 = tident
    {let a =     ( xs ) in
    ( INSTR_Invoke (ret, a, l1, l2)  )}
| i = ident _2 = EQ inst = instr
    {                          ( INSTR_Assign (i, inst) )}

alloca_opt:
  a = align
    {                                        ( (None, Some a) )}
| nb = tvalue a = option_preceded_COMMA_align__
    {                                        ( (Some nb, a) )}

phi_table_entry:
  _1 = LSQUARE v = value _3 = COMMA l = ident _5 = RSQUARE
    {                                          ( (v, l) )}

switch_table_entry:
  v = tvalue _2 = COMMA i = tident _4 = option_EOL_
    {                                 ( (v, i) )}

const:
  i = INTEGER
    {                                                      ( VALUE_Integer i        )}
| f = FLOAT
    {                                                      ( VALUE_Float f          )}
| _1 = KW_TRUE
    {                                                      ( VALUE_Bool true        )}
| _1 = KW_FALSE
    {                                                      ( VALUE_Bool false       )}
| _1 = KW_NULL
    {                                                      ( VALUE_Null             )}
| _1 = KW_UNDEF
    {                                                      ( VALUE_Undef            )}
| _1 = KW_ZEROINITIALIZER
    {                                                      ( VALUE_Zero_initializer )}
| _1 = LCURLY xs = loption_separated_nonempty_list_COMMA_tconst__ _3 = RCURLY
    {let l =     ( xs ) in
                                                      ( VALUE_Struct l         )}
| _1 = LTLCURLY xs = loption_separated_nonempty_list_COMMA_tconst__ _3 = RCURLYGT
    {let l =     ( xs ) in
                                                      ( VALUE_Struct l         )}
| _1 = LSQUARE xs = loption_separated_nonempty_list_COMMA_tconst__ _3 = RSQUARE
    {let l =     ( xs ) in
                                                      ( VALUE_Array l          )}
| _1 = LT xs = loption_separated_nonempty_list_COMMA_tconst__ _3 = GT
    {let l =     ( xs ) in
                                                      ( VALUE_Vector l         )}

value:
  c = const
    {            ( c             )}
| i = ident
    {            ( VALUE_Ident i )}

ident:
  l = GLOBAL
    {             ( ID_Global l )}
| l = LOCAL
    {             ( ID_Local l  )}

tvalue:
  t = typ v = value
    {                      ( (t, v) )}

tconst:
  t = typ c = const
    {                      ( (t, c) )}

tident:
  t = typ i = ident
    {                      ( (t, i) )}

%%
