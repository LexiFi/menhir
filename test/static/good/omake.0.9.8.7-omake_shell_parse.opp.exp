File "omake.0.9.8.7-omake_shell_parse.mly", line 148, characters 34-43:
Warning: the token TokDefine is unused.
%{
open Lm_printf
open Lm_symbol
open Lm_location

open Omake_env
open Omake_pos
open Omake_shell_type
open Omake_command_type
open Omake_value_type

module Pos = MakePos (struct let name = "Omake_shell_parse" end)
open Pos

(*
 * If the command is a node, detect it here.
 *)
let collect_redirect chan =
   match chan with
      [ValNode node] ->
         RedirectNode node
    | _ ->
         RedirectArg chan

(*
 * Build a command from a sequence of words.
 *)
let null_command loc =
   { cmd_loc     = loc;
     cmd_env     = [];
     cmd_exe     = ();
     cmd_argv    = [];
     cmd_stdin   = RedirectNone;
     cmd_stdout  = RedirectNone;
     cmd_stderr  = false;
     cmd_append  = false
   }

let command_of_values argv loc =
   { cmd_loc     = loc;
     cmd_env     = [];
     cmd_exe     = ();
     cmd_argv    = argv;
     cmd_stdin   = RedirectNone;
     cmd_stdout  = RedirectNone;
     cmd_stderr  = false;
     cmd_append  = false
   }

(*
 * Diversions.
 *)
let rec set_stdin_inner pipe file =
   match pipe with
      PipeApply (loc, apply) ->
         let apply = { apply with apply_stdin = file } in
            PipeApply (loc, apply)
    | PipeCommand (loc, command) ->
         let command = { command with cmd_stdin = file } in
            PipeCommand (loc, command)
    | PipeCond (loc, _, _, _)
    | PipeCompose (loc, _, _, _) ->
         raise (Invalid_argument "Omake_shell_parse.set_stdin: internal error")
    | PipeGroup (loc, group) ->
         let group = { group with group_stdin = file } in
            PipeGroup (loc, group)
    | PipeBackground (loc, pipe) ->
         PipeBackground (loc, set_stdin_inner pipe file)

let rec set_stdout_inner pipe file stderr append =
   match pipe with
      PipeApply (loc, apply) ->
         let apply =
            { apply with apply_stdout = file;
                         apply_stderr = stderr;
                         apply_append = append
            }
         in
            PipeApply (loc, apply)
    | PipeCommand (loc, command) ->
         let command =
            { command with cmd_stdout = file;
                           cmd_stderr = stderr;
                           cmd_append = append
            }
         in
            PipeCommand (loc, command)
    | PipeCond (loc, _, _, _)
    | PipeCompose (loc, _, _, _) ->
         raise (Invalid_argument "Omake_shell_parse.set_stdout: internal error")
    | PipeGroup (loc, group) ->
         let group =
            { group with group_stdout = file;
                         group_stderr = stderr;
                         group_append = append
            }
         in
            PipeGroup (loc, group)
    | PipeBackground (loc, pipe) ->
         PipeBackground (loc, set_stdout_inner pipe file stderr append)

let set_stdin pipe file =
   set_stdin_inner pipe (collect_redirect file)

let set_stdout pipe file stderr append =
   set_stdout_inner pipe (collect_redirect file) stderr append
%}
%start prog
%token <string * Lm_location.loc> TokAmp
%token <string * Lm_location.loc> TokAnd
%token <string * Lm_location.loc> TokDefine
%token <Lm_location.loc> TokEof
%token <string * Lm_location.loc> TokGreaterGreaterThan
%token <string * Lm_location.loc> TokGreaterThan
%token <string * Lm_location.loc> TokLeftParen
%token <string * Lm_location.loc> TokLessThan
%token <string * Lm_location.loc> TokOr
%token <string * Lm_location.loc> TokPipe
%token <string * Lm_location.loc> TokRightParen
%token <string * Lm_location.loc> TokSemiColon
%token <Omake_value_type.value list * Lm_location.loc> TokValues
%nonassoc TokAmp
%right TokSemiColon
%right TokPipe
%right TokOr
%right TokAnd
%nonassoc TokGreaterGreaterThan TokGreaterThan TokLessThan
%type <Omake_env.value_pipe> prog
%%

prog:
  _1 = pipe _2 = TokEof
    {          ( let pipe, _ = _1 in
               pipe
          )}
| _1 = TokEof
    {          ( let loc = _1 in
               PipeCommand (loc, null_command loc)
          )}

pipe:
  _1 = command
    {          ( let command, loc = _1 in
               PipeCommand (loc, command), loc
          )}
| _1 = pipe _2 = TokSemiColon _3 = pipe
    {          ( let pipe1, loc1 = _1 in
            let pipe2, loc2 = _3 in
            let loc = union_loc loc1 loc2 in
               PipeCond (loc, PipeSequence, pipe1, pipe2), loc
          )}
| _1 = pipe _2 = TokAnd _3 = pipe
    {          ( let pipe1, loc1 = _1 in
            let pipe2, loc2 = _3 in
            let loc = union_loc loc1 loc2 in
               PipeCond (loc, PipeAnd, pipe1, pipe2), loc
          )}
| _1 = pipe _2 = TokOr _3 = pipe
    {          ( let pipe1, loc1 = _1 in
            let pipe2, loc2 = _3 in
            let loc = union_loc loc1 loc2 in
               PipeCond (loc, PipeOr, pipe1, pipe2), loc
          )}
| _1 = pipe _2 = TokPipe _3 = pipe
    {          ( let pipe1, loc1 = _1 in
            let pipe2, loc2 = _3 in
            let loc = union_loc loc1 loc2 in
               PipeCompose (loc, false, pipe1, pipe2), loc
          )}
| _1 = pipe _2 = TokPipe _3 = TokAmp _4 = pipe %prec TokPipe
    {          ( let pipe1, loc1 = _1 in
            let pipe2, loc2 = _4 in
            let loc = union_loc loc1 loc2 in
               PipeCompose (loc, true, pipe1, pipe2), loc
          )}
| _1 = pipe _2 = TokAmp
    {          ( let pipe, loc1 = _1 in
            let _, loc2 = _2 in
            let loc = union_loc loc1 loc2 in
               PipeBackground (loc, pipe), loc
          )}
| _1 = TokLeftParen _2 = pipe _3 = TokRightParen
    {          ( let _, loc1 = _1 in
            let _, loc2 = _3 in
            let loc = union_loc loc1 loc2 in
            let pipe, _ = _2 in
            let group =
               { group_stdin  = RedirectNone;
                 group_stdout = RedirectNone;
                 group_stderr = false;
                 group_append = false;
                 group_pipe = pipe
               }
            in
               PipeGroup (loc, group), loc
          )}
| _1 = pipe _2 = TokLessThan _3 = word
    {          ( let pipe, loc1 = _1 in
            let file, loc2 = _3 in
            let loc = union_loc loc1 loc2 in
            let pipe = set_stdin pipe file in
               pipe, loc
          )}
| _1 = pipe _2 = TokGreaterThan _3 = word
    {          ( let pipe, loc1 = _1 in
            let file, loc2 = _3 in
            let loc = union_loc loc1 loc2 in
            let pipe = set_stdout pipe file false false in
               pipe, loc
          )}
| _1 = pipe _2 = TokGreaterGreaterThan _3 = word
    {          ( let pipe, loc1 = _1 in
            let file, loc2 = _3 in
            let loc = union_loc loc1 loc2 in
            let pipe = set_stdout pipe file false true in
               pipe, loc
          )}
| _1 = pipe _2 = TokGreaterThan _3 = TokAmp _4 = word %prec TokGreaterThan
    {          ( let pipe, loc1 = _1 in
            let file, loc2 = _4 in
            let loc = union_loc loc1 loc2 in
            let pipe = set_stdout pipe file true false in
               pipe, loc
          )}
| _1 = pipe _2 = TokGreaterGreaterThan _3 = TokAmp _4 = word %prec TokGreaterGreaterThan
    {          ( let pipe, loc1 = _1 in
            let file, loc2 = _4 in
            let loc = union_loc loc1 loc2 in
            let pipe = set_stdout pipe file true true in
               pipe, loc
          )}

command:
  _1 = rev_command
    {          ( let rev_argv, loc = _1 in
            let command = command_of_values (List.rev rev_argv) loc in
               command, loc
          )}

rev_command:
  _1 = word
    {          ( let values, loc = _1 in
               [values], loc
          )}
| _1 = rev_command _2 = word
    {          ( let values1, loc1 = _1 in
            let values2, loc2 = _2 in
               values2 :: values1, union_loc loc1 loc2
          )}

word:
  _1 = TokValues
    {   ( _1 )}

%%
