Note: the nonterminal symbol list (from opam-doc.0.9.3-info_parser.mly) is renamed opam_doc_0_9_3_info_parser_list.
File "opam-doc.0.9.3-info_parser.mly", line 160, characters 7-10:
Warning: the token EOF is unused.
File "opam-doc.0.9.3-info_parser.mly", line 169, characters 10-21:
Warning: the token Reduce_eror is unused.
%{
(***********************************************************************)
(*                             OCamldoc                                *)
(*                                                                     *)
(*            Maxence Guesdon, projet Cristal, INRIA Rocquencourt      *)
(*                                                                     *)
(*  Copyright 2001 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the Q Public License version 1.0.               *)
(*                                                                     *)
(***********************************************************************)

open Info
open Bindoc_errors

(* Accumulators for text elements *)

type text_item = 
    Blank
  | Newline
  | Blank_line
  | String of string
  | Element of text_element

let minus = String "-"

let plus = String "+"

let skip_blank_or_newline = function 
  | Blank :: rest -> rest
  | Newline :: rest -> rest
  | til -> til

let rec skip_whitespace = function 
  | Blank :: rest -> skip_whitespace rest
  | Newline :: rest -> skip_whitespace rest
  | Blank_line :: rest -> skip_whitespace rest
  | til -> til

let rec convert acc stracc = function
  | [] ->
        if stracc = [] then acc
        else (Info.Raw (String.concat "" stracc)) :: acc
  | ti :: rest ->
      let acc, stracc =
        match ti with
        | Blank -> acc, (" " :: stracc)
        | Newline -> acc, ("
" :: stracc)
        | String s -> acc, (s :: stracc)
        | Blank_line -> 
            let acc = 
              if stracc = [] then acc
              else (Info.Raw (String.concat "" stracc)) :: acc
            in
              (Info.Newline :: acc), []
        | Element e -> 
            let acc = 
              if stracc = [] then acc
              else (Info.Raw (String.concat "" stracc)) :: acc
            in
              (e :: acc), []
      in
        convert acc stracc rest

let text til =
  let til = skip_whitespace til in
  let til = skip_whitespace (List.rev til) in
    convert [] [] til

let inner til = 
  let til = skip_blank_or_newline til in
  let til = skip_blank_or_newline (List.rev til) in
    convert [] [] til

(* Error messages *)

let unclosed opening_name opening_num closing_name closing_num =
  raise (Error(Parser (Unclosed(Location.rhs_loc opening_num, opening_name, closing_name)), Location.rhs_loc closing_num))

let expecting pos nonterm =
    raise (Error(Parser(Expecting nonterm), Location.rhs_loc pos))

(* Utilities for error messages *)

let title_to_string (i, _) =
  let i = string_of_int i in
    "{" ^ i

let style_to_string = function
  | SK_bold -> "{b"
  | SK_italic -> "{i"
  | SK_emphasize -> "{e"
  | SK_center -> "{C"
  | SK_left -> "{L"
  | SK_right -> "{R"
  | SK_superscript -> "{^"
  | SK_subscript -> "{_"
  | SK_custom s -> "{" ^ s

let item_to_string i = if i then "{-" else "{li"

let html_open_to_string t = "<" ^ t ^ ">"
let html_close_to_string t = "</" ^ t ^ ">"

%}
%start info
%token <string> Author
%token BEGIN
%token BLANK
%token <string> Before
%token <string> Char
%token <string> Code
%token <string> Custom
%token DEPRECATED
%token END
%token ENUM
%token EOF
%token <string> HTML_Bold
%token <string> HTML_Center
%token HTML_END_BOLD
%token HTML_END_CENTER
%token HTML_END_ENUM
%token HTML_END_ITALIC
%token HTML_END_ITEM
%token HTML_END_LEFT
%token HTML_END_LIST
%token HTML_END_RIGHT
%token <int> HTML_END_Title
%token <string> HTML_Enum
%token <string> HTML_Italic
%token <string> HTML_Item
%token <string> HTML_Left
%token <string> HTML_List
%token <string> HTML_Right
%token <string * int> HTML_Title
%token <bool> Item
%token LIST
%token MINUS
%token NEWLINE
%token PLUS
%token <string> Param
%token <string> Pre_Code
%token RETURN
%token <string> Raise
%token <Info.ref_kind * string> Ref
%token <Info.see_ref> See
%token <string> Since
%token <Info.special_ref_kind> Special_Ref
%token <Info.style_kind> Style
%token <string option * string> Target
%token <int * string option> Title
%token <string> Verb
%token <string> Version
%nonassoc Shift_error
%right error
%nonassoc Reduce_eror
%type <Info.t> info
%%

info:
  _1 = text
    {    ( {Info.dummy with i_desc = Some (text _1)} )}
| _1 = info _2 = Param _3 = text
    {    ( let info = _1 in
      let i_params = info.i_params @ [_2, (text _3)] in
        {info with i_params} )}
| _1 = info _2 = Author _3 = whitespace
    {    ( let info = _1 in
      let i_authors = info.i_authors @ [_2] in
        {info with i_authors} )}
| _1 = info _2 = Author _3 = error
    {    ( expecting 3 "tag" )}
| _1 = info _2 = Version _3 = whitespace
    {    ( {_1 with i_version = Some _2} )}
| _1 = info _2 = Version _3 = error
    {    ( expecting 3 "tag" )}
| _1 = info _2 = See _3 = text
    {    ( let info = _1 in
      let i_sees = info.i_sees @ [_2, (text _3)] in
        {info with i_sees} )}
| _1 = info _2 = Since _3 = whitespace
    {    ( {_1 with i_since = Some _2} )}
| _1 = info _2 = Since _3 = error
    {    ( expecting 3 "tag" )}
| _1 = info _2 = Before _3 = text
    {    ( let info = _1 in
      let i_before = info.i_before @ [_2, (text _3)] in
        {info with i_before} )}
| _1 = info _2 = DEPRECATED _3 = text
    {    ( {_1 with i_deprecated = Some (text _3)} )}
| _1 = info _2 = Raise _3 = text
    {    ( let info = _1 in
      let i_raised_exceptions = info.i_raised_exceptions @ [_2, (text _3)] in
        {info with i_raised_exceptions} )}
| _1 = info _2 = RETURN _3 = text
    {    ( {_1 with i_return_value = Some (text _3)} )}
| _1 = info _2 = Custom _3 = text
    {    ( let info = _1 in
      let i_custom = info.i_custom @ [_2, (text _3)] in
        {info with i_custom} )}

blanks:
  _1 = BLANK
    {                    ( () )}
| _1 = blanks _2 = BLANK
    {                    ( () )}

newline:
  _1 = NEWLINE
    {                    ( () )}
| _1 = blanks _2 = NEWLINE
    {                    ( () )}
| _1 = newline _2 = BLANK
    {                    ( () )}

blank_line:
  _1 = newline _2 = NEWLINE
    {                    ( () )}
| _1 = blank_line _2 = BLANK
    {                     ( () )}
| _1 = blank_line _2 = NEWLINE
    {                     ( () )}

whitespace:
   %prec Shift_error
    {                        ( [] )}
| _1 = blanks
    {                        ( [Blank] )}
| _1 = newline
    {                        ( [Newline] )}
| _1 = blank_line
    {                        ( [Blank_line] )}

text:
  _1 = whitespace
    {                                              ( _1 )}
| _1 = error
    {                                              ( expecting 1 "text" )}
| _1 = text_body _2 = whitespace
    {                                              ( List.rev_append _1 _2 )}
| _1 = text_body _2 = newline _3 = shortcuts_final
    {                                              ( List.rev_append _1 (List.rev _3) )}
| _1 = text_body _2 = blank_line _3 = shortcuts_final
    {                                              ( List.rev_append _1 (Blank_line :: (List.rev _3)) )}
| _1 = newline _2 = shortcuts_final
    {                                              ( List.rev _2 )}
| _1 = blank_line _2 = shortcuts_final
    {                                              ( Blank_line :: (List.rev _2) )}

text_body:
  _1 = text_item
    {                                   ( List.rev _1 )}
| _1 = text_body _2 = text_item
    {                                   ( List.rev_append _2 _1 )}

text_item:
  _1 = simple_text_item
    {                                   ( [_1] )}
| _1 = text_item_no_line
    {                                   ( [_1] )}
| _1 = blanks _2 = simple_text_item
    {                                   ( [Blank; _2] )}
| _1 = blanks _2 = text_item_no_line
    {                                   ( [Blank; _2] )}
| _1 = newline _2 = simple_text_item
    {                                   ( [Newline; _2] )}
| _1 = newline _2 = text_item_with_line
    {                                   ( _2 )}
| _1 = blank_line _2 = simple_text_item
    {                                   ( [Blank_line; _2] )}
| _1 = blank_line _2 = text_item_with_line
    {                                   ( Blank_line :: _2 )}

simple_text_item:
  _1 = text_element
    {                                     ( Element _1 )}
| _1 = html_text_element
    {                                     ( Element _1 )}
| _1 = Char
    {                                     ( String _1 )}

text_item_no_line:
  _1 = MINUS
    {                                     ( minus )}
| _1 = PLUS
    {                                     ( plus )}

text_item_with_line:
  _1 = shortcuts _2 = simple_text_item
    {                                     ( List.rev_append _1 [_2] )}

shortcut_text_body:
  _1 = blanks _2 = simple_text_item
    {                                           ( [_2; Blank] )}
| _1 = blanks _2 = text_item_no_line
    {                                           ( [_2; Blank] )}
| _1 = newline _2 = simple_text_item
    {                                           ( [_2; Newline] )}
| _1 = shortcut_text_body _2 = shortcut_text_item
    {                                           ( List.rev_append _2 _1 )}

shortcut_text_item:
  _1 = simple_text_item
    {                                      ( [_1] )}
| _1 = text_item_no_line
    {                                      ( [_1] )}
| _1 = blanks _2 = simple_text_item
    {                                      ( [Blank; _2] )}
| _1 = blanks _2 = text_item_no_line
    {                                      ( [Blank; _2] )}
| _1 = newline _2 = simple_text_item
    {                                      ( [Newline; _2] )}

shortcuts:
  _1 = shortcut_list
    {                                      ( [Element (List _1)] )}
| _1 = shortcut_enum
    {                                      ( [Element (Enum _1)] )}
| _1 = shortcuts _2 = shortcut_list
    {                                      ( Element (List _2) :: _1 )}
| _1 = shortcuts _2 = shortcut_enum
    {                                      ( Element (Enum _2) :: _1 )}

shortcut_list:
  _1 = MINUS _2 = blank_line
    {                                                    ( [[]] )}
| _1 = MINUS _2 = shortcut_text_body _3 = blank_line
    {                                                    ( [inner (List.rev _2)] )}
| _1 = MINUS _2 = newline _3 = shortcut_list
    {                                                    ( [] :: _3 )}
| _1 = MINUS _2 = shortcut_text_body _3 = newline _4 = shortcut_list
    {                                                    ( (inner (List.rev _2)) :: _4 )}
| _1 = MINUS _2 = error
    {                                                    ( expecting 2 "list item" )}

shortcut_enum:
  _1 = PLUS _2 = blank_line
    {                                                    ( [[]] )}
| _1 = PLUS _2 = shortcut_text_body _3 = blank_line
    {                                                    ( [inner (List.rev _2)] )}
| _1 = PLUS _2 = newline _3 = shortcut_enum
    {                                                    ( [] :: _3 )}
| _1 = PLUS _2 = shortcut_text_body _3 = newline _4 = shortcut_enum
    {                                                    ( (inner (List.rev _2)) :: _4 )}
| _1 = PLUS _2 = error
    {                                                    ( expecting 2 "list item" )}

shortcuts_final:
  _1 = shortcut_list_final
    {                                      ( [Element (List _1)] )}
| _1 = shortcut_enum_final
    {                                      ( [Element (Enum _1)] )}
| _1 = shortcuts _2 = shortcut_list_final
    {                                      ( Element (List _2) :: _1 )}
| _1 = shortcuts _2 = shortcut_enum_final
    {                                      ( Element (Enum _2) :: _1 )}

shortcut_list_final:
  _1 = MINUS _2 = whitespace
    {                                                        ( [[]] )}
| _1 = MINUS _2 = shortcut_text_body _3 = whitespace
    {                                                        ( [inner (List.rev _2)] )}
| _1 = MINUS _2 = newline _3 = shortcut_list_final
    {                                                        ( [] :: _3 )}
| _1 = MINUS _2 = shortcut_text_body _3 = newline _4 = shortcut_list_final
    {                                                        ( (inner (List.rev _2)) :: _4 )}

shortcut_enum_final:
  _1 = PLUS _2 = whitespace
    {                                                        ( [[]] )}
| _1 = PLUS _2 = shortcut_text_body _3 = whitespace
    {                                                        ( [inner (List.rev _2)] )}
| _1 = PLUS _2 = newline _3 = shortcut_enum_final
    {                                                        ( [] :: _3 )}
| _1 = PLUS _2 = shortcut_text_body _3 = newline _4 = shortcut_enum_final
    {                                                        ( (inner (List.rev _2)) :: _4 )}

text_element:
  _1 = Title _2 = text _3 = END
    {    ( let n, l = _1 in 
        Title (n, l, (inner _2)) )}
| _1 = Title _2 = text _3 = error
    {    ( unclosed (title_to_string _1) 1 "}" 3 )}
| _1 = Style _2 = text _3 = END
    {    ( Style(_1, (inner _2)) )}
| _1 = Style _2 = text _3 = error
    {    ( unclosed (style_to_string _1) 1 "}" 3 )}
| _1 = LIST _2 = whitespace _3 = opam_doc_0_9_3_info_parser_list _4 = whitespace _5 = END
    {    ( List (List.rev _3) )}
| _1 = LIST _2 = whitespace _3 = opam_doc_0_9_3_info_parser_list _4 = error
    {    ( unclosed "{ul" 1 "}" 4 )}
| _1 = LIST _2 = whitespace _3 = error
    {    ( expecting 3 "list item" )}
| _1 = ENUM _2 = whitespace _3 = opam_doc_0_9_3_info_parser_list _4 = whitespace _5 = END
    {    ( Enum (List.rev _3) )}
| _1 = ENUM _2 = whitespace _3 = opam_doc_0_9_3_info_parser_list _4 = error
    {    ( unclosed "{ol" 1 "}" 4 )}
| _1 = ENUM _2 = whitespace _3 = error
    {    ( expecting 3 "list item" )}
| _1 = Ref
    {    ( let k, n = _1 in 
        Ref (k, n, None) )}
| _1 = BEGIN _2 = Ref _3 = text _4 = END
    {    ( let k, n = _2 in 
        Ref (k, n, Some (inner _3)) )}
| _1 = BEGIN _2 = Ref _3 = text _4 = error
    {    ( unclosed "{" 1 "}" 3 )}
| _1 = Special_Ref
    {    ( Special_ref _1 )}
| _1 = Code
    {    ( Code _1 )}
| _1 = Pre_Code
    {    ( PreCode _1 )}
| _1 = Verb
    {    ( Verbatim _1 )}
| _1 = Target
    {    ( let t, s = _1 in 
        Target (t, s) )}

opam_doc_0_9_3_info_parser_list:
  _1 = item
    {                         ( [ _1 ] )}
| _1 = opam_doc_0_9_3_info_parser_list _2 = whitespace _3 = item
    {                         ( _3 :: _1 )}

item:
  _1 = Item _2 = text _3 = END
    {                      ( inner _2 )}
| _1 = Item _2 = text _3 = error
    {                      ( unclosed (item_to_string _1) 1 "}" 3 )}

html_text_element:
  _1 = HTML_Title _2 = text _3 = HTML_END_Title
    {    ( let _, n = _1 in
      if n <> _3 then raise Parse_error; 
      Title(n, None, (inner _2)) )}
| _1 = HTML_Title _2 = text _3 = error
    {    ( let tag, _ = _1 in
      unclosed (html_open_to_string tag) 1 (html_close_to_string tag) 3 )}
| _1 = HTML_Bold _2 = text _3 = HTML_END_BOLD
    {    ( Style(SK_bold, (inner _2)) )}
| _1 = HTML_Bold _2 = text _3 = error
    {    ( unclosed (html_open_to_string _1) 1 (html_close_to_string _1) 3 )}
| _1 = HTML_Italic _2 = text _3 = HTML_END_ITALIC
    {    ( Style(SK_italic, (inner _2)) )}
| _1 = HTML_Italic _2 = text _3 = error
    {    ( unclosed (html_open_to_string _1) 1 (html_close_to_string _1) 3 )}
| _1 = HTML_Center _2 = text _3 = HTML_END_CENTER
    {    ( Style(SK_center, (inner _2)) )}
| _1 = HTML_Center _2 = text _3 = error
    {    ( unclosed (html_open_to_string _1) 1 (html_close_to_string _1) 3 )}
| _1 = HTML_Left _2 = text _3 = HTML_END_LEFT
    {    ( Style(SK_left, (inner _2)) )}
| _1 = HTML_Left _2 = text _3 = error
    {    ( unclosed (html_open_to_string _1) 1 (html_close_to_string _1) 3 )}
| _1 = HTML_Right _2 = text _3 = HTML_END_RIGHT
    {    ( Style(SK_right, (inner _2)) )}
| _1 = HTML_Right _2 = text _3 = error
    {    ( unclosed (html_open_to_string _1) 1 (html_close_to_string _1) 3 )}
| _1 = HTML_List _2 = whitespace _3 = html_list _4 = whitespace _5 = HTML_END_LIST
    {    ( List (List.rev _3) )}
| _1 = HTML_List _2 = whitespace _3 = html_list _4 = error
    {    ( unclosed (html_open_to_string _1) 1 (html_close_to_string _1) 4 )}
| _1 = HTML_List _2 = whitespace _3 = error
    {    ( expecting 2 "html list item" )}
| _1 = HTML_Enum _2 = whitespace _3 = html_list _4 = whitespace _5 = HTML_END_ENUM
    {    ( Enum (List.rev _3) )}
| _1 = HTML_Enum _2 = whitespace _3 = html_list _4 = error
    {    ( unclosed (html_open_to_string _1) 1 (html_close_to_string _1) 4 )}
| _1 = HTML_Enum _2 = whitespace _3 = error
    {    ( expecting 3 "html list item" )}

html_list:
  _1 = html_item
    {                                     ( [ _1 ] )}
| _1 = html_list _2 = whitespace _3 = html_item
    {                                     ( _3 :: _1 )}

html_item:
  _1 = HTML_Item _2 = text _3 = HTML_END_ITEM
    {    ( inner _2 )}
| _1 = HTML_Item _2 = text _3 = error
    {    ( unclosed (html_open_to_string _1) 1 (html_close_to_string _1) 3 )}

%%


