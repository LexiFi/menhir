State 0:
## Known stack suffix:
##
## LR(1) items:
mainprogram' -> . mainprogram [ # ]
## Transitions:
-- On OPENQASM shift to state 1
-- On mainprogram shift to state 139
## Reductions:

State 1:
## Known stack suffix:
## OPENQASM
## LR(1) items:
mainprogram -> OPENQASM . REAL SEMICOLON program EOF [ # ]
## Transitions:
-- On REAL shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## OPENQASM REAL
## LR(1) items:
mainprogram -> OPENQASM REAL . SEMICOLON program EOF [ # ]
## Transitions:
-- On SEMICOLON shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## OPENQASM REAL SEMICOLON
## LR(1) items:
mainprogram -> OPENQASM REAL SEMICOLON . program EOF [ # ]
## Transitions:
-- On U shift to state 4
-- On RESET shift to state 48
-- On QREG shift to state 51
-- On OPAQUE shift to state 57
-- On MEASURE shift to state 71
-- On INCLUDE shift to state 76
-- On IF shift to state 79
-- On ID shift to state 85
-- On GATE shift to state 105
-- On CX shift to state 98
-- On CREG shift to state 112
-- On BARRIER shift to state 118
-- On uop shift to state 103
-- On statement shift to state 121
-- On qop shift to state 122
-- On program shift to state 136
-- On list(statement) shift to state 138
-- On gatedecl shift to state 124
-- On decl shift to state 135
## Reductions:
-- On EOF
--   reduce production list(statement) ->

State 4:
## Known stack suffix:
## U
## LR(1) items:
uop -> U . LPAREN explist RPAREN argument SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On LPAREN shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## U LPAREN
## LR(1) items:
uop -> U LPAREN . explist RPAREN argument SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On TAN shift to state 6
-- On SQRT shift to state 7
-- On SIN shift to state 8
-- On REAL shift to state 9
-- On PI shift to state 10
-- On NINT shift to state 11
-- On MINUS shift to state 12
-- On LPAREN shift to state 13
-- On LN shift to state 14
-- On ID shift to state 15
-- On EXP shift to state 16
-- On COS shift to state 17
-- On unaryop shift to state 18
-- On separated_nonempty_list(COMMA,exp) shift to state 35
-- On loption(separated_nonempty_list(COMMA,exp)) shift to state 36
-- On explist shift to state 37
-- On exp shift to state 45
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,exp)) ->

State 6:
## Known stack suffix:
## TAN
## LR(1) items:
unaryop -> TAN . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN
--   reduce production unaryop -> TAN

State 7:
## Known stack suffix:
## SQRT
## LR(1) items:
unaryop -> SQRT . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN
--   reduce production unaryop -> SQRT

State 8:
## Known stack suffix:
## SIN
## LR(1) items:
unaryop -> SIN . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN
--   reduce production unaryop -> SIN

State 9:
## Known stack suffix:
## REAL
## LR(1) items:
exp -> REAL . [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
## Reductions:
-- On TIMES RPAREN POW PLUS MINUS DIV COMMA
--   reduce production exp -> REAL

State 10:
## Known stack suffix:
## PI
## LR(1) items:
exp -> PI . [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
## Reductions:
-- On TIMES RPAREN POW PLUS MINUS DIV COMMA
--   reduce production exp -> PI

State 11:
## Known stack suffix:
## NINT
## LR(1) items:
exp -> NINT . [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
## Reductions:
-- On TIMES RPAREN POW PLUS MINUS DIV COMMA
--   reduce production exp -> NINT

State 12:
## Known stack suffix:
## MINUS
## LR(1) items:
exp -> MINUS . exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On TAN shift to state 6
-- On SQRT shift to state 7
-- On SIN shift to state 8
-- On REAL shift to state 9
-- On PI shift to state 10
-- On NINT shift to state 11
-- On MINUS shift to state 12
-- On LPAREN shift to state 13
-- On LN shift to state 14
-- On ID shift to state 15
-- On EXP shift to state 16
-- On COS shift to state 17
-- On unaryop shift to state 18
-- On exp shift to state 34
## Reductions:

State 13:
## Known stack suffix:
## LPAREN
## LR(1) items:
exp -> LPAREN . exp RPAREN [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On TAN shift to state 6
-- On SQRT shift to state 7
-- On SIN shift to state 8
-- On REAL shift to state 9
-- On PI shift to state 10
-- On NINT shift to state 11
-- On MINUS shift to state 12
-- On LPAREN shift to state 13
-- On LN shift to state 14
-- On ID shift to state 15
-- On EXP shift to state 16
-- On COS shift to state 17
-- On unaryop shift to state 18
-- On exp shift to state 32
## Reductions:

State 14:
## Known stack suffix:
## LN
## LR(1) items:
unaryop -> LN . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN
--   reduce production unaryop -> LN

State 15:
## Known stack suffix:
## ID
## LR(1) items:
exp -> ID . [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
## Reductions:
-- On TIMES RPAREN POW PLUS MINUS DIV COMMA
--   reduce production exp -> ID

State 16:
## Known stack suffix:
## EXP
## LR(1) items:
unaryop -> EXP . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN
--   reduce production unaryop -> EXP

State 17:
## Known stack suffix:
## COS
## LR(1) items:
unaryop -> COS . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN
--   reduce production unaryop -> COS

State 18:
## Known stack suffix:
## unaryop
## LR(1) items:
exp -> unaryop . LPAREN exp RPAREN [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On LPAREN shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## unaryop LPAREN
## LR(1) items:
exp -> unaryop LPAREN . exp RPAREN [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On TAN shift to state 6
-- On SQRT shift to state 7
-- On SIN shift to state 8
-- On REAL shift to state 9
-- On PI shift to state 10
-- On NINT shift to state 11
-- On MINUS shift to state 12
-- On LPAREN shift to state 13
-- On LN shift to state 14
-- On ID shift to state 15
-- On EXP shift to state 16
-- On COS shift to state 17
-- On unaryop shift to state 18
-- On exp shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## unaryop LPAREN exp
## LR(1) items:
exp -> exp . PLUS exp [ TIMES RPAREN POW PLUS MINUS DIV ]
exp -> exp . MINUS exp [ TIMES RPAREN POW PLUS MINUS DIV ]
exp -> exp . TIMES exp [ TIMES RPAREN POW PLUS MINUS DIV ]
exp -> exp . DIV exp [ TIMES RPAREN POW PLUS MINUS DIV ]
exp -> exp . POW exp [ TIMES RPAREN POW PLUS MINUS DIV ]
exp -> unaryop LPAREN exp . RPAREN [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On TIMES shift to state 21
-- On RPAREN shift to state 25
-- On POW shift to state 23
-- On PLUS shift to state 26
-- On MINUS shift to state 30
-- On DIV shift to state 28
## Reductions:

State 21:
## Known stack suffix:
## exp TIMES
## LR(1) items:
exp -> exp TIMES . exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On TAN shift to state 6
-- On SQRT shift to state 7
-- On SIN shift to state 8
-- On REAL shift to state 9
-- On PI shift to state 10
-- On NINT shift to state 11
-- On MINUS shift to state 12
-- On LPAREN shift to state 13
-- On LN shift to state 14
-- On ID shift to state 15
-- On EXP shift to state 16
-- On COS shift to state 17
-- On unaryop shift to state 18
-- On exp shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## exp TIMES exp
## LR(1) items:
exp -> exp . PLUS exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . MINUS exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . TIMES exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp TIMES exp . [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . DIV exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . POW exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On POW shift to state 23
## Reductions:
-- On TIMES RPAREN PLUS MINUS DIV COMMA
--   reduce production exp -> exp TIMES exp

State 23:
## Known stack suffix:
## exp POW
## LR(1) items:
exp -> exp POW . exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On TAN shift to state 6
-- On SQRT shift to state 7
-- On SIN shift to state 8
-- On REAL shift to state 9
-- On PI shift to state 10
-- On NINT shift to state 11
-- On MINUS shift to state 12
-- On LPAREN shift to state 13
-- On LN shift to state 14
-- On ID shift to state 15
-- On EXP shift to state 16
-- On COS shift to state 17
-- On unaryop shift to state 18
-- On exp shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## exp POW exp
## LR(1) items:
exp -> exp . PLUS exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . MINUS exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . TIMES exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . DIV exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . POW exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp POW exp . [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On POW shift to state 23
## Reductions:
-- On TIMES RPAREN PLUS MINUS DIV COMMA
--   reduce production exp -> exp POW exp

State 25:
## Known stack suffix:
## unaryop LPAREN exp RPAREN
## LR(1) items:
exp -> unaryop LPAREN exp RPAREN . [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
## Reductions:
-- On TIMES RPAREN POW PLUS MINUS DIV COMMA
--   reduce production exp -> unaryop LPAREN exp RPAREN

State 26:
## Known stack suffix:
## exp PLUS
## LR(1) items:
exp -> exp PLUS . exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On TAN shift to state 6
-- On SQRT shift to state 7
-- On SIN shift to state 8
-- On REAL shift to state 9
-- On PI shift to state 10
-- On NINT shift to state 11
-- On MINUS shift to state 12
-- On LPAREN shift to state 13
-- On LN shift to state 14
-- On ID shift to state 15
-- On EXP shift to state 16
-- On COS shift to state 17
-- On unaryop shift to state 18
-- On exp shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## exp PLUS exp
## LR(1) items:
exp -> exp . PLUS exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp PLUS exp . [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . MINUS exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . TIMES exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . DIV exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . POW exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On TIMES shift to state 21
-- On POW shift to state 23
-- On DIV shift to state 28
## Reductions:
-- On RPAREN PLUS MINUS COMMA
--   reduce production exp -> exp PLUS exp

State 28:
## Known stack suffix:
## exp DIV
## LR(1) items:
exp -> exp DIV . exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On TAN shift to state 6
-- On SQRT shift to state 7
-- On SIN shift to state 8
-- On REAL shift to state 9
-- On PI shift to state 10
-- On NINT shift to state 11
-- On MINUS shift to state 12
-- On LPAREN shift to state 13
-- On LN shift to state 14
-- On ID shift to state 15
-- On EXP shift to state 16
-- On COS shift to state 17
-- On unaryop shift to state 18
-- On exp shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## exp DIV exp
## LR(1) items:
exp -> exp . PLUS exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . MINUS exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . TIMES exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . DIV exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp DIV exp . [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . POW exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On POW shift to state 23
## Reductions:
-- On TIMES RPAREN PLUS MINUS DIV COMMA
--   reduce production exp -> exp DIV exp

State 30:
## Known stack suffix:
## exp MINUS
## LR(1) items:
exp -> exp MINUS . exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On TAN shift to state 6
-- On SQRT shift to state 7
-- On SIN shift to state 8
-- On REAL shift to state 9
-- On PI shift to state 10
-- On NINT shift to state 11
-- On MINUS shift to state 12
-- On LPAREN shift to state 13
-- On LN shift to state 14
-- On ID shift to state 15
-- On EXP shift to state 16
-- On COS shift to state 17
-- On unaryop shift to state 18
-- On exp shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## exp MINUS exp
## LR(1) items:
exp -> exp . PLUS exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . MINUS exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp MINUS exp . [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . TIMES exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . DIV exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . POW exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On TIMES shift to state 21
-- On POW shift to state 23
-- On DIV shift to state 28
## Reductions:
-- On RPAREN PLUS MINUS COMMA
--   reduce production exp -> exp MINUS exp

State 32:
## Known stack suffix:
## LPAREN exp
## LR(1) items:
exp -> exp . PLUS exp [ TIMES RPAREN POW PLUS MINUS DIV ]
exp -> exp . MINUS exp [ TIMES RPAREN POW PLUS MINUS DIV ]
exp -> exp . TIMES exp [ TIMES RPAREN POW PLUS MINUS DIV ]
exp -> exp . DIV exp [ TIMES RPAREN POW PLUS MINUS DIV ]
exp -> exp . POW exp [ TIMES RPAREN POW PLUS MINUS DIV ]
exp -> LPAREN exp . RPAREN [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On TIMES shift to state 21
-- On RPAREN shift to state 33
-- On POW shift to state 23
-- On PLUS shift to state 26
-- On MINUS shift to state 30
-- On DIV shift to state 28
## Reductions:

State 33:
## Known stack suffix:
## LPAREN exp RPAREN
## LR(1) items:
exp -> LPAREN exp RPAREN . [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
## Reductions:
-- On TIMES RPAREN POW PLUS MINUS DIV COMMA
--   reduce production exp -> LPAREN exp RPAREN

State 34:
## Known stack suffix:
## MINUS exp
## LR(1) items:
exp -> exp . PLUS exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . MINUS exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . TIMES exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . DIV exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> MINUS exp . [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . POW exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
## Transitions:
-- On POW shift to state 23
## Reductions:
-- On TIMES RPAREN PLUS MINUS DIV COMMA
--   reduce production exp -> MINUS exp

State 35:
## Known stack suffix:
## separated_nonempty_list(COMMA,exp)
## LR(1) items:
loption(separated_nonempty_list(COMMA,exp)) -> separated_nonempty_list(COMMA,exp) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,exp)) -> separated_nonempty_list(COMMA,exp)

State 36:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,exp))
## LR(1) items:
explist -> loption(separated_nonempty_list(COMMA,exp)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production explist -> loption(separated_nonempty_list(COMMA,exp))

State 37:
## Known stack suffix:
## U LPAREN explist
## LR(1) items:
uop -> U LPAREN explist . RPAREN argument SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On RPAREN shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## U LPAREN explist RPAREN
## LR(1) items:
uop -> U LPAREN explist RPAREN . argument SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ID shift to state 39
-- On argument shift to state 43
## Reductions:

State 39:
## Known stack suffix:
## ID
## LR(1) items:
argument -> ID . [ SEMICOLON COMMA ARROW ]
argument -> ID . LBRACKET NINT RBRACKET [ SEMICOLON COMMA ARROW ]
## Transitions:
-- On LBRACKET shift to state 40
## Reductions:
-- On SEMICOLON COMMA ARROW
--   reduce production argument -> ID

State 40:
## Known stack suffix:
## ID LBRACKET
## LR(1) items:
argument -> ID LBRACKET . NINT RBRACKET [ SEMICOLON COMMA ARROW ]
## Transitions:
-- On NINT shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## ID LBRACKET NINT
## LR(1) items:
argument -> ID LBRACKET NINT . RBRACKET [ SEMICOLON COMMA ARROW ]
## Transitions:
-- On RBRACKET shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## ID LBRACKET NINT RBRACKET
## LR(1) items:
argument -> ID LBRACKET NINT RBRACKET . [ SEMICOLON COMMA ARROW ]
## Transitions:
## Reductions:
-- On SEMICOLON COMMA ARROW
--   reduce production argument -> ID LBRACKET NINT RBRACKET

State 43:
## Known stack suffix:
## U LPAREN explist RPAREN argument
## LR(1) items:
uop -> U LPAREN explist RPAREN argument . SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On SEMICOLON shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## U LPAREN explist RPAREN argument SEMICOLON
## LR(1) items:
uop -> U LPAREN explist RPAREN argument SEMICOLON . [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production uop -> U LPAREN explist RPAREN argument SEMICOLON

State 45:
## Known stack suffix:
## exp
## LR(1) items:
exp -> exp . PLUS exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . MINUS exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . TIMES exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . DIV exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
exp -> exp . POW exp [ TIMES RPAREN POW PLUS MINUS DIV COMMA ]
separated_nonempty_list(COMMA,exp) -> exp . [ RPAREN ]
separated_nonempty_list(COMMA,exp) -> exp . COMMA separated_nonempty_list(COMMA,exp) [ RPAREN ]
## Transitions:
-- On TIMES shift to state 21
-- On POW shift to state 23
-- On PLUS shift to state 26
-- On MINUS shift to state 30
-- On DIV shift to state 28
-- On COMMA shift to state 46
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,exp) -> exp

State 46:
## Known stack suffix:
## exp COMMA
## LR(1) items:
separated_nonempty_list(COMMA,exp) -> exp COMMA . separated_nonempty_list(COMMA,exp) [ RPAREN ]
## Transitions:
-- On TAN shift to state 6
-- On SQRT shift to state 7
-- On SIN shift to state 8
-- On REAL shift to state 9
-- On PI shift to state 10
-- On NINT shift to state 11
-- On MINUS shift to state 12
-- On LPAREN shift to state 13
-- On LN shift to state 14
-- On ID shift to state 15
-- On EXP shift to state 16
-- On COS shift to state 17
-- On unaryop shift to state 18
-- On separated_nonempty_list(COMMA,exp) shift to state 47
-- On exp shift to state 45
## Reductions:

State 47:
## Known stack suffix:
## exp COMMA separated_nonempty_list(COMMA,exp)
## LR(1) items:
separated_nonempty_list(COMMA,exp) -> exp COMMA separated_nonempty_list(COMMA,exp) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,exp) -> exp COMMA separated_nonempty_list(COMMA,exp)

State 48:
## Known stack suffix:
## RESET
## LR(1) items:
qop -> RESET . argument SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ID shift to state 39
-- On argument shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## RESET argument
## LR(1) items:
qop -> RESET argument . SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On SEMICOLON shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## RESET argument SEMICOLON
## LR(1) items:
qop -> RESET argument SEMICOLON . [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production qop -> RESET argument SEMICOLON

State 51:
## Known stack suffix:
## QREG
## LR(1) items:
decl -> QREG . ID LBRACKET NINT RBRACKET SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ID shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## QREG ID
## LR(1) items:
decl -> QREG ID . LBRACKET NINT RBRACKET SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On LBRACKET shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## QREG ID LBRACKET
## LR(1) items:
decl -> QREG ID LBRACKET . NINT RBRACKET SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On NINT shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## QREG ID LBRACKET NINT
## LR(1) items:
decl -> QREG ID LBRACKET NINT . RBRACKET SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On RBRACKET shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## QREG ID LBRACKET NINT RBRACKET
## LR(1) items:
decl -> QREG ID LBRACKET NINT RBRACKET . SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On SEMICOLON shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## QREG ID LBRACKET NINT RBRACKET SEMICOLON
## LR(1) items:
decl -> QREG ID LBRACKET NINT RBRACKET SEMICOLON . [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production decl -> QREG ID LBRACKET NINT RBRACKET SEMICOLON

State 57:
## Known stack suffix:
## OPAQUE
## LR(1) items:
statement -> OPAQUE . ID idlist SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
statement -> OPAQUE . ID LPAREN idlist RPAREN idlist SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ID shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## OPAQUE ID
## LR(1) items:
statement -> OPAQUE ID . idlist SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
statement -> OPAQUE ID . LPAREN idlist RPAREN idlist SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On LPAREN shift to state 59
-- On ID shift to state 60
-- On separated_nonempty_list(COMMA,ID) shift to state 63
-- On loption(separated_nonempty_list(COMMA,ID)) shift to state 64
-- On idlist shift to state 69
## Reductions:
-- On SEMICOLON
--   reduce production loption(separated_nonempty_list(COMMA,ID)) ->

State 59:
## Known stack suffix:
## OPAQUE ID LPAREN
## LR(1) items:
statement -> OPAQUE ID LPAREN . idlist RPAREN idlist SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ID shift to state 60
-- On separated_nonempty_list(COMMA,ID) shift to state 63
-- On loption(separated_nonempty_list(COMMA,ID)) shift to state 64
-- On idlist shift to state 65
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,ID)) ->

State 60:
## Known stack suffix:
## ID
## LR(1) items:
separated_nonempty_list(COMMA,ID) -> ID . [ SEMICOLON RPAREN LBRACE ]
separated_nonempty_list(COMMA,ID) -> ID . COMMA separated_nonempty_list(COMMA,ID) [ SEMICOLON RPAREN LBRACE ]
## Transitions:
-- On COMMA shift to state 61
## Reductions:
-- On SEMICOLON RPAREN LBRACE
--   reduce production separated_nonempty_list(COMMA,ID) -> ID

State 61:
## Known stack suffix:
## ID COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ID) -> ID COMMA . separated_nonempty_list(COMMA,ID) [ SEMICOLON RPAREN LBRACE ]
## Transitions:
-- On ID shift to state 60
-- On separated_nonempty_list(COMMA,ID) shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## ID COMMA separated_nonempty_list(COMMA,ID)
## LR(1) items:
separated_nonempty_list(COMMA,ID) -> ID COMMA separated_nonempty_list(COMMA,ID) . [ SEMICOLON RPAREN LBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN LBRACE
--   reduce production separated_nonempty_list(COMMA,ID) -> ID COMMA separated_nonempty_list(COMMA,ID)

State 63:
## Known stack suffix:
## separated_nonempty_list(COMMA,ID)
## LR(1) items:
loption(separated_nonempty_list(COMMA,ID)) -> separated_nonempty_list(COMMA,ID) . [ SEMICOLON RPAREN LBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN LBRACE
--   reduce production loption(separated_nonempty_list(COMMA,ID)) -> separated_nonempty_list(COMMA,ID)

State 64:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,ID))
## LR(1) items:
idlist -> loption(separated_nonempty_list(COMMA,ID)) . [ SEMICOLON RPAREN LBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN LBRACE
--   reduce production idlist -> loption(separated_nonempty_list(COMMA,ID))

State 65:
## Known stack suffix:
## OPAQUE ID LPAREN idlist
## LR(1) items:
statement -> OPAQUE ID LPAREN idlist . RPAREN idlist SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On RPAREN shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## OPAQUE ID LPAREN idlist RPAREN
## LR(1) items:
statement -> OPAQUE ID LPAREN idlist RPAREN . idlist SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ID shift to state 60
-- On separated_nonempty_list(COMMA,ID) shift to state 63
-- On loption(separated_nonempty_list(COMMA,ID)) shift to state 64
-- On idlist shift to state 67
## Reductions:
-- On SEMICOLON
--   reduce production loption(separated_nonempty_list(COMMA,ID)) ->

State 67:
## Known stack suffix:
## OPAQUE ID LPAREN idlist RPAREN idlist
## LR(1) items:
statement -> OPAQUE ID LPAREN idlist RPAREN idlist . SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On SEMICOLON shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## OPAQUE ID LPAREN idlist RPAREN idlist SEMICOLON
## LR(1) items:
statement -> OPAQUE ID LPAREN idlist RPAREN idlist SEMICOLON . [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production statement -> OPAQUE ID LPAREN idlist RPAREN idlist SEMICOLON

State 69:
## Known stack suffix:
## OPAQUE ID idlist
## LR(1) items:
statement -> OPAQUE ID idlist . SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On SEMICOLON shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## OPAQUE ID idlist SEMICOLON
## LR(1) items:
statement -> OPAQUE ID idlist SEMICOLON . [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production statement -> OPAQUE ID idlist SEMICOLON

State 71:
## Known stack suffix:
## MEASURE
## LR(1) items:
qop -> MEASURE . argument ARROW argument SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ID shift to state 39
-- On argument shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## MEASURE argument
## LR(1) items:
qop -> MEASURE argument . ARROW argument SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ARROW shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## MEASURE argument ARROW
## LR(1) items:
qop -> MEASURE argument ARROW . argument SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ID shift to state 39
-- On argument shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## MEASURE argument ARROW argument
## LR(1) items:
qop -> MEASURE argument ARROW argument . SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On SEMICOLON shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## MEASURE argument ARROW argument SEMICOLON
## LR(1) items:
qop -> MEASURE argument ARROW argument SEMICOLON . [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production qop -> MEASURE argument ARROW argument SEMICOLON

State 76:
## Known stack suffix:
## INCLUDE
## LR(1) items:
statement -> INCLUDE . STRING SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On STRING shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## INCLUDE STRING
## LR(1) items:
statement -> INCLUDE STRING . SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On SEMICOLON shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## INCLUDE STRING SEMICOLON
## LR(1) items:
statement -> INCLUDE STRING SEMICOLON . [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production statement -> INCLUDE STRING SEMICOLON

State 79:
## Known stack suffix:
## IF
## LR(1) items:
statement -> IF . LPAREN ID EQUALS NINT RPAREN qop [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On LPAREN shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## IF LPAREN
## LR(1) items:
statement -> IF LPAREN . ID EQUALS NINT RPAREN qop [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ID shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## IF LPAREN ID
## LR(1) items:
statement -> IF LPAREN ID . EQUALS NINT RPAREN qop [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On EQUALS shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## IF LPAREN ID EQUALS
## LR(1) items:
statement -> IF LPAREN ID EQUALS . NINT RPAREN qop [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On NINT shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## IF LPAREN ID EQUALS NINT
## LR(1) items:
statement -> IF LPAREN ID EQUALS NINT . RPAREN qop [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On RPAREN shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## IF LPAREN ID EQUALS NINT RPAREN
## LR(1) items:
statement -> IF LPAREN ID EQUALS NINT RPAREN . qop [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On U shift to state 4
-- On RESET shift to state 48
-- On MEASURE shift to state 71
-- On ID shift to state 85
-- On CX shift to state 98
-- On uop shift to state 103
-- On qop shift to state 104
## Reductions:

State 85:
## Known stack suffix:
## ID
## LR(1) items:
uop -> ID . anylist SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
uop -> ID . LPAREN explist RPAREN anylist SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On LPAREN shift to state 86
-- On ID shift to state 39
-- On separated_nonempty_list(COMMA,argument) shift to state 89
-- On loption(separated_nonempty_list(COMMA,argument)) shift to state 90
-- On argument shift to state 91
-- On anylist shift to state 96
## Reductions:
-- On SEMICOLON
--   reduce production loption(separated_nonempty_list(COMMA,argument)) ->

State 86:
## Known stack suffix:
## ID LPAREN
## LR(1) items:
uop -> ID LPAREN . explist RPAREN anylist SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On TAN shift to state 6
-- On SQRT shift to state 7
-- On SIN shift to state 8
-- On REAL shift to state 9
-- On PI shift to state 10
-- On NINT shift to state 11
-- On MINUS shift to state 12
-- On LPAREN shift to state 13
-- On LN shift to state 14
-- On ID shift to state 15
-- On EXP shift to state 16
-- On COS shift to state 17
-- On unaryop shift to state 18
-- On separated_nonempty_list(COMMA,exp) shift to state 35
-- On loption(separated_nonempty_list(COMMA,exp)) shift to state 36
-- On explist shift to state 87
-- On exp shift to state 45
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,exp)) ->

State 87:
## Known stack suffix:
## ID LPAREN explist
## LR(1) items:
uop -> ID LPAREN explist . RPAREN anylist SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On RPAREN shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## ID LPAREN explist RPAREN
## LR(1) items:
uop -> ID LPAREN explist RPAREN . anylist SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ID shift to state 39
-- On separated_nonempty_list(COMMA,argument) shift to state 89
-- On loption(separated_nonempty_list(COMMA,argument)) shift to state 90
-- On argument shift to state 91
-- On anylist shift to state 94
## Reductions:
-- On SEMICOLON
--   reduce production loption(separated_nonempty_list(COMMA,argument)) ->

State 89:
## Known stack suffix:
## separated_nonempty_list(COMMA,argument)
## LR(1) items:
loption(separated_nonempty_list(COMMA,argument)) -> separated_nonempty_list(COMMA,argument) . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production loption(separated_nonempty_list(COMMA,argument)) -> separated_nonempty_list(COMMA,argument)

State 90:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,argument))
## LR(1) items:
anylist -> loption(separated_nonempty_list(COMMA,argument)) . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production anylist -> loption(separated_nonempty_list(COMMA,argument))

State 91:
## Known stack suffix:
## argument
## LR(1) items:
separated_nonempty_list(COMMA,argument) -> argument . [ SEMICOLON ]
separated_nonempty_list(COMMA,argument) -> argument . COMMA separated_nonempty_list(COMMA,argument) [ SEMICOLON ]
## Transitions:
-- On COMMA shift to state 92
## Reductions:
-- On SEMICOLON
--   reduce production separated_nonempty_list(COMMA,argument) -> argument

State 92:
## Known stack suffix:
## argument COMMA
## LR(1) items:
separated_nonempty_list(COMMA,argument) -> argument COMMA . separated_nonempty_list(COMMA,argument) [ SEMICOLON ]
## Transitions:
-- On ID shift to state 39
-- On separated_nonempty_list(COMMA,argument) shift to state 93
-- On argument shift to state 91
## Reductions:

State 93:
## Known stack suffix:
## argument COMMA separated_nonempty_list(COMMA,argument)
## LR(1) items:
separated_nonempty_list(COMMA,argument) -> argument COMMA separated_nonempty_list(COMMA,argument) . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production separated_nonempty_list(COMMA,argument) -> argument COMMA separated_nonempty_list(COMMA,argument)

State 94:
## Known stack suffix:
## ID LPAREN explist RPAREN anylist
## LR(1) items:
uop -> ID LPAREN explist RPAREN anylist . SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On SEMICOLON shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## ID LPAREN explist RPAREN anylist SEMICOLON
## LR(1) items:
uop -> ID LPAREN explist RPAREN anylist SEMICOLON . [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production uop -> ID LPAREN explist RPAREN anylist SEMICOLON

State 96:
## Known stack suffix:
## ID anylist
## LR(1) items:
uop -> ID anylist . SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On SEMICOLON shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## ID anylist SEMICOLON
## LR(1) items:
uop -> ID anylist SEMICOLON . [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production uop -> ID anylist SEMICOLON

State 98:
## Known stack suffix:
## CX
## LR(1) items:
uop -> CX . argument COMMA argument SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ID shift to state 39
-- On argument shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## CX argument
## LR(1) items:
uop -> CX argument . COMMA argument SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On COMMA shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## CX argument COMMA
## LR(1) items:
uop -> CX argument COMMA . argument SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ID shift to state 39
-- On argument shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## CX argument COMMA argument
## LR(1) items:
uop -> CX argument COMMA argument . SEMICOLON [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On SEMICOLON shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## CX argument COMMA argument SEMICOLON
## LR(1) items:
uop -> CX argument COMMA argument SEMICOLON . [ U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET RBRACE QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production uop -> CX argument COMMA argument SEMICOLON

State 103:
## Known stack suffix:
## uop
## LR(1) items:
qop -> uop . [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production qop -> uop

State 104:
## Known stack suffix:
## IF LPAREN ID EQUALS NINT RPAREN qop
## LR(1) items:
statement -> IF LPAREN ID EQUALS NINT RPAREN qop . [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production statement -> IF LPAREN ID EQUALS NINT RPAREN qop

State 105:
## Known stack suffix:
## GATE
## LR(1) items:
gatedecl -> GATE . ID idlist [ LBRACE ]
gatedecl -> GATE . ID LPAREN idlist RPAREN idlist [ LBRACE ]
## Transitions:
-- On ID shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## GATE ID
## LR(1) items:
gatedecl -> GATE ID . idlist [ LBRACE ]
gatedecl -> GATE ID . LPAREN idlist RPAREN idlist [ LBRACE ]
## Transitions:
-- On LPAREN shift to state 107
-- On ID shift to state 60
-- On separated_nonempty_list(COMMA,ID) shift to state 63
-- On loption(separated_nonempty_list(COMMA,ID)) shift to state 64
-- On idlist shift to state 111
## Reductions:
-- On LBRACE
--   reduce production loption(separated_nonempty_list(COMMA,ID)) ->

State 107:
## Known stack suffix:
## GATE ID LPAREN
## LR(1) items:
gatedecl -> GATE ID LPAREN . idlist RPAREN idlist [ LBRACE ]
## Transitions:
-- On ID shift to state 60
-- On separated_nonempty_list(COMMA,ID) shift to state 63
-- On loption(separated_nonempty_list(COMMA,ID)) shift to state 64
-- On idlist shift to state 108
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,ID)) ->

State 108:
## Known stack suffix:
## GATE ID LPAREN idlist
## LR(1) items:
gatedecl -> GATE ID LPAREN idlist . RPAREN idlist [ LBRACE ]
## Transitions:
-- On RPAREN shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## GATE ID LPAREN idlist RPAREN
## LR(1) items:
gatedecl -> GATE ID LPAREN idlist RPAREN . idlist [ LBRACE ]
## Transitions:
-- On ID shift to state 60
-- On separated_nonempty_list(COMMA,ID) shift to state 63
-- On loption(separated_nonempty_list(COMMA,ID)) shift to state 64
-- On idlist shift to state 110
## Reductions:
-- On LBRACE
--   reduce production loption(separated_nonempty_list(COMMA,ID)) ->

State 110:
## Known stack suffix:
## GATE ID LPAREN idlist RPAREN idlist
## LR(1) items:
gatedecl -> GATE ID LPAREN idlist RPAREN idlist . [ LBRACE ]
## Transitions:
## Reductions:
-- On LBRACE
--   reduce production gatedecl -> GATE ID LPAREN idlist RPAREN idlist

State 111:
## Known stack suffix:
## GATE ID idlist
## LR(1) items:
gatedecl -> GATE ID idlist . [ LBRACE ]
## Transitions:
## Reductions:
-- On LBRACE
--   reduce production gatedecl -> GATE ID idlist

State 112:
## Known stack suffix:
## CREG
## LR(1) items:
decl -> CREG . ID LBRACKET NINT RBRACKET SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ID shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## CREG ID
## LR(1) items:
decl -> CREG ID . LBRACKET NINT RBRACKET SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On LBRACKET shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## CREG ID LBRACKET
## LR(1) items:
decl -> CREG ID LBRACKET . NINT RBRACKET SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On NINT shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## CREG ID LBRACKET NINT
## LR(1) items:
decl -> CREG ID LBRACKET NINT . RBRACKET SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On RBRACKET shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## CREG ID LBRACKET NINT RBRACKET
## LR(1) items:
decl -> CREG ID LBRACKET NINT RBRACKET . SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On SEMICOLON shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## CREG ID LBRACKET NINT RBRACKET SEMICOLON
## LR(1) items:
decl -> CREG ID LBRACKET NINT RBRACKET SEMICOLON . [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production decl -> CREG ID LBRACKET NINT RBRACKET SEMICOLON

State 118:
## Known stack suffix:
## BARRIER
## LR(1) items:
statement -> BARRIER . anylist SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On ID shift to state 39
-- On separated_nonempty_list(COMMA,argument) shift to state 89
-- On loption(separated_nonempty_list(COMMA,argument)) shift to state 90
-- On argument shift to state 91
-- On anylist shift to state 119
## Reductions:
-- On SEMICOLON
--   reduce production loption(separated_nonempty_list(COMMA,argument)) ->

State 119:
## Known stack suffix:
## BARRIER anylist
## LR(1) items:
statement -> BARRIER anylist . SEMICOLON [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On SEMICOLON shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## BARRIER anylist SEMICOLON
## LR(1) items:
statement -> BARRIER anylist SEMICOLON . [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production statement -> BARRIER anylist SEMICOLON

State 121:
## Known stack suffix:
## statement
## LR(1) items:
list(statement) -> statement . list(statement) [ EOF ]
## Transitions:
-- On U shift to state 4
-- On RESET shift to state 48
-- On QREG shift to state 51
-- On OPAQUE shift to state 57
-- On MEASURE shift to state 71
-- On INCLUDE shift to state 76
-- On IF shift to state 79
-- On ID shift to state 85
-- On GATE shift to state 105
-- On CX shift to state 98
-- On CREG shift to state 112
-- On BARRIER shift to state 118
-- On uop shift to state 103
-- On statement shift to state 121
-- On qop shift to state 122
-- On list(statement) shift to state 123
-- On gatedecl shift to state 124
-- On decl shift to state 135
## Reductions:
-- On EOF
--   reduce production list(statement) ->

State 122:
## Known stack suffix:
## qop
## LR(1) items:
statement -> qop . [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production statement -> qop

State 123:
## Known stack suffix:
## statement list(statement)
## LR(1) items:
list(statement) -> statement list(statement) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(statement) -> statement list(statement)

State 124:
## Known stack suffix:
## gatedecl
## LR(1) items:
statement -> gatedecl . LBRACE goplist RBRACE [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On LBRACE shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## gatedecl LBRACE
## LR(1) items:
statement -> gatedecl LBRACE . goplist RBRACE [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On U shift to state 4
-- On ID shift to state 85
-- On CX shift to state 98
-- On BARRIER shift to state 126
-- On uop_or_barrier shift to state 129
-- On uop shift to state 130
-- On list(uop_or_barrier) shift to state 132
-- On goplist shift to state 133
## Reductions:
-- On RBRACE
--   reduce production list(uop_or_barrier) ->

State 126:
## Known stack suffix:
## BARRIER
## LR(1) items:
uop_or_barrier -> BARRIER . idlist SEMICOLON [ U RBRACE ID CX BARRIER ]
## Transitions:
-- On ID shift to state 60
-- On separated_nonempty_list(COMMA,ID) shift to state 63
-- On loption(separated_nonempty_list(COMMA,ID)) shift to state 64
-- On idlist shift to state 127
## Reductions:
-- On SEMICOLON
--   reduce production loption(separated_nonempty_list(COMMA,ID)) ->

State 127:
## Known stack suffix:
## BARRIER idlist
## LR(1) items:
uop_or_barrier -> BARRIER idlist . SEMICOLON [ U RBRACE ID CX BARRIER ]
## Transitions:
-- On SEMICOLON shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## BARRIER idlist SEMICOLON
## LR(1) items:
uop_or_barrier -> BARRIER idlist SEMICOLON . [ U RBRACE ID CX BARRIER ]
## Transitions:
## Reductions:
-- On U RBRACE ID CX BARRIER
--   reduce production uop_or_barrier -> BARRIER idlist SEMICOLON

State 129:
## Known stack suffix:
## uop_or_barrier
## LR(1) items:
list(uop_or_barrier) -> uop_or_barrier . list(uop_or_barrier) [ RBRACE ]
## Transitions:
-- On U shift to state 4
-- On ID shift to state 85
-- On CX shift to state 98
-- On BARRIER shift to state 126
-- On uop_or_barrier shift to state 129
-- On uop shift to state 130
-- On list(uop_or_barrier) shift to state 131
## Reductions:
-- On RBRACE
--   reduce production list(uop_or_barrier) ->

State 130:
## Known stack suffix:
## uop
## LR(1) items:
uop_or_barrier -> uop . [ U RBRACE ID CX BARRIER ]
## Transitions:
## Reductions:
-- On U RBRACE ID CX BARRIER
--   reduce production uop_or_barrier -> uop

State 131:
## Known stack suffix:
## uop_or_barrier list(uop_or_barrier)
## LR(1) items:
list(uop_or_barrier) -> uop_or_barrier list(uop_or_barrier) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production list(uop_or_barrier) -> uop_or_barrier list(uop_or_barrier)

State 132:
## Known stack suffix:
## list(uop_or_barrier)
## LR(1) items:
goplist -> list(uop_or_barrier) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production goplist -> list(uop_or_barrier)

State 133:
## Known stack suffix:
## gatedecl LBRACE goplist
## LR(1) items:
statement -> gatedecl LBRACE goplist . RBRACE [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
-- On RBRACE shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## gatedecl LBRACE goplist RBRACE
## LR(1) items:
statement -> gatedecl LBRACE goplist RBRACE . [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production statement -> gatedecl LBRACE goplist RBRACE

State 135:
## Known stack suffix:
## decl
## LR(1) items:
statement -> decl . [ U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER ]
## Transitions:
## Reductions:
-- On U RESET QREG OPAQUE MEASURE INCLUDE IF ID GATE EOF CX CREG BARRIER
--   reduce production statement -> decl

State 136:
## Known stack suffix:
## OPENQASM REAL SEMICOLON program
## LR(1) items:
mainprogram -> OPENQASM REAL SEMICOLON program . EOF [ # ]
## Transitions:
-- On EOF shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## OPENQASM REAL SEMICOLON program EOF
## LR(1) items:
mainprogram -> OPENQASM REAL SEMICOLON program EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production mainprogram -> OPENQASM REAL SEMICOLON program EOF

State 138:
## Known stack suffix:
## list(statement)
## LR(1) items:
program -> list(statement) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production program -> list(statement)

State 139:
## Known stack suffix:
## mainprogram
## LR(1) items:
mainprogram' -> mainprogram . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept mainprogram

