State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On A shift to state 1
-- On option1(A) shift to state 2
-- On main shift to state 5
## Reductions:
-- On B reduce production option1(A) ->
-- On # reduce production option1(A) ->
** End-of-stream conflict on B A
**   There is a tension between
**   (1) reducing production option1(A) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 1:
## Known stack suffix:
## A
## LR(1) items:
option1(A) -> A . [ B # ]
## Transitions:
## Reductions:
-- On B reduce production option1(A) -> A
-- On # reduce production option1(A) -> A
** End-of-stream conflict on B
**   There is a tension between
**   (1) reducing production option1(A) -> A
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 2:
## Known stack suffix:
## option1(A)
## LR(1) items:
main -> option1(A) . option2(B) [ # ]
## Transitions:
-- On B shift to state 3
-- On option2(B) shift to state 4
## Reductions:
-- On # reduce production option2(B) ->
** End-of-stream conflict on B
**   There is a tension between
**   (1) reducing production option2(B) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 3:
## Known stack suffix:
## B
## LR(1) items:
option2(B) -> B . [ # ]
## Transitions:
## Reductions:
-- On # reduce production option2(B) -> B

State 4:
## Known stack suffix:
## option1(A) option2(B)
## LR(1) items:
main -> option1(A) option2(B) . [ # ]
## Transitions:
## Reductions:
-- On # reduce production main -> option1(A) option2(B)

State 5:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On # accept main

