State 0:
## Known stack suffix:
##
## LR(1) items:
lmi' -> . lmi [ # ]
## Transitions:
-- On ZEROS shift to state 1
-- On MINUS shift to state 13
-- On MID shift to state 3
-- On LPAR shift to state 14
-- On LIFT shift to state 15
-- On LBRA shift to state 17
-- On KRSYM shift to state 18
-- On KRON shift to state 26
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 6
-- On FLOAT shift to state 36
-- On EYE shift to state 37
-- On lmi shift to state 71
-- On id shift to state 43
-- On f shift to state 44
-- On exprl shift to state 72
## Reductions:

State 1:
## Known stack suffix:
## ZEROS
## LR(1) items:
exprl -> ZEROS . LPAR ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On LPAR shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## ZEROS LPAR
## LR(1) items:
exprl -> ZEROS LPAR . ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 8
-- On id shift to state 12
## Reductions:

State 3:
## Known stack suffix:
## MID
## LR(1) items:
id -> MID . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production id -> MID

State 4:
## Known stack suffix:
## INT0
## LR(1) items:
ncid -> INT0 . [ TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ncid -> INT0

State 5:
## Known stack suffix:
## INT
## LR(1) items:
ncid -> INT . [ TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ncid -> INT

State 6:
## Known stack suffix:
## ID
## LR(1) items:
id -> ID . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production id -> ID

State 7:
## Known stack suffix:
## AQ
## LR(1) items:
ncid -> AQ . [ TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ncid -> AQ

State 8:
## Known stack suffix:
## ZEROS LPAR ncid
## LR(1) items:
exprl -> ZEROS LPAR ncid . COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On COMMA shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## ZEROS LPAR ncid COMMA
## LR(1) items:
exprl -> ZEROS LPAR ncid COMMA . ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 10
-- On id shift to state 12
## Reductions:

State 10:
## Known stack suffix:
## ZEROS LPAR ncid COMMA ncid
## LR(1) items:
exprl -> ZEROS LPAR ncid COMMA ncid . RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On RPAR shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## ZEROS LPAR ncid COMMA ncid RPAR
## LR(1) items:
exprl -> ZEROS LPAR ncid COMMA ncid RPAR . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprl -> ZEROS LPAR ncid COMMA ncid RPAR

State 12:
## Known stack suffix:
## id
## LR(1) items:
ncid -> id . [ TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ncid -> id

State 13:
## Known stack suffix:
## MINUS
## LR(1) items:
exprl -> MINUS . exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On ZEROS shift to state 1
-- On MINUS shift to state 13
-- On MID shift to state 3
-- On LPAR shift to state 14
-- On LIFT shift to state 15
-- On LBRA shift to state 17
-- On KRSYM shift to state 18
-- On KRON shift to state 26
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 6
-- On FLOAT shift to state 36
-- On EYE shift to state 37
-- On id shift to state 43
-- On f shift to state 44
-- On exprl shift to state 70
## Reductions:

State 14:
## Known stack suffix:
## LPAR
## LR(1) items:
exprl -> LPAR . exprl RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On ZEROS shift to state 1
-- On MINUS shift to state 13
-- On MID shift to state 3
-- On LPAR shift to state 14
-- On LIFT shift to state 15
-- On LBRA shift to state 17
-- On KRSYM shift to state 18
-- On KRON shift to state 26
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 6
-- On FLOAT shift to state 36
-- On EYE shift to state 37
-- On id shift to state 43
-- On f shift to state 44
-- On exprl shift to state 68
## Reductions:

State 15:
## Known stack suffix:
## LIFT
## LR(1) items:
exprl -> LIFT . LPAR exprl COMMA ncid COMMA ncid COMMA ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On LPAR shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## LIFT LPAR
## LR(1) items:
exprl -> LIFT LPAR . exprl COMMA ncid COMMA ncid COMMA ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On ZEROS shift to state 1
-- On MINUS shift to state 13
-- On MID shift to state 3
-- On LPAR shift to state 14
-- On LIFT shift to state 15
-- On LBRA shift to state 17
-- On KRSYM shift to state 18
-- On KRON shift to state 26
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 6
-- On FLOAT shift to state 36
-- On EYE shift to state 37
-- On id shift to state 43
-- On f shift to state 44
-- On exprl shift to state 58
## Reductions:

State 17:
## Known stack suffix:
## LBRA
## LR(1) items:
exprl -> LBRA . b RBRA [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On ZEROS shift to state 1
-- On MINUS shift to state 13
-- On MID shift to state 3
-- On LPAR shift to state 14
-- On LIFT shift to state 15
-- On LBRA shift to state 17
-- On KRSYM shift to state 18
-- On KRON shift to state 26
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 6
-- On FLOAT shift to state 36
-- On EYE shift to state 37
-- On li shift to state 41
-- On id shift to state 43
-- On f shift to state 44
-- On exprl shift to state 45
-- On b shift to state 56
## Reductions:

State 18:
## Known stack suffix:
## KRSYM
## LR(1) items:
exprl -> KRSYM . LPAR ncid COMMA ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On LPAR shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## KRSYM LPAR
## LR(1) items:
exprl -> KRSYM LPAR . ncid COMMA ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 20
-- On id shift to state 12
## Reductions:

State 20:
## Known stack suffix:
## KRSYM LPAR ncid
## LR(1) items:
exprl -> KRSYM LPAR ncid . COMMA ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On COMMA shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## KRSYM LPAR ncid COMMA
## LR(1) items:
exprl -> KRSYM LPAR ncid COMMA . ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 22
-- On id shift to state 12
## Reductions:

State 22:
## Known stack suffix:
## KRSYM LPAR ncid COMMA ncid
## LR(1) items:
exprl -> KRSYM LPAR ncid COMMA ncid . COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On COMMA shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## KRSYM LPAR ncid COMMA ncid COMMA
## LR(1) items:
exprl -> KRSYM LPAR ncid COMMA ncid COMMA . ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 24
-- On id shift to state 12
## Reductions:

State 24:
## Known stack suffix:
## KRSYM LPAR ncid COMMA ncid COMMA ncid
## LR(1) items:
exprl -> KRSYM LPAR ncid COMMA ncid COMMA ncid . RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On RPAR shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## KRSYM LPAR ncid COMMA ncid COMMA ncid RPAR
## LR(1) items:
exprl -> KRSYM LPAR ncid COMMA ncid COMMA ncid RPAR . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprl -> KRSYM LPAR ncid COMMA ncid COMMA ncid RPAR

State 26:
## Known stack suffix:
## KRON
## LR(1) items:
exprl -> KRON . LPAR ncid COMMA ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On LPAR shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## KRON LPAR
## LR(1) items:
exprl -> KRON LPAR . ncid COMMA ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 28
-- On id shift to state 12
## Reductions:

State 28:
## Known stack suffix:
## KRON LPAR ncid
## LR(1) items:
exprl -> KRON LPAR ncid . COMMA ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On COMMA shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## KRON LPAR ncid COMMA
## LR(1) items:
exprl -> KRON LPAR ncid COMMA . ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 30
-- On id shift to state 12
## Reductions:

State 30:
## Known stack suffix:
## KRON LPAR ncid COMMA ncid
## LR(1) items:
exprl -> KRON LPAR ncid COMMA ncid . COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On COMMA shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## KRON LPAR ncid COMMA ncid COMMA
## LR(1) items:
exprl -> KRON LPAR ncid COMMA ncid COMMA . ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 32
-- On id shift to state 12
## Reductions:

State 32:
## Known stack suffix:
## KRON LPAR ncid COMMA ncid COMMA ncid
## LR(1) items:
exprl -> KRON LPAR ncid COMMA ncid COMMA ncid . RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On RPAR shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## KRON LPAR ncid COMMA ncid COMMA ncid RPAR
## LR(1) items:
exprl -> KRON LPAR ncid COMMA ncid COMMA ncid RPAR . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprl -> KRON LPAR ncid COMMA ncid COMMA ncid RPAR

State 34:
## Known stack suffix:
## INT0
## LR(1) items:
f -> INT0 . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f -> INT0

State 35:
## Known stack suffix:
## INT
## LR(1) items:
f -> INT . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f -> INT

State 36:
## Known stack suffix:
## FLOAT
## LR(1) items:
f -> FLOAT . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f -> FLOAT

State 37:
## Known stack suffix:
## EYE
## LR(1) items:
exprl -> EYE . LPAR ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On LPAR shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## EYE LPAR
## LR(1) items:
exprl -> EYE LPAR . ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 39
-- On id shift to state 12
## Reductions:

State 39:
## Known stack suffix:
## EYE LPAR ncid
## LR(1) items:
exprl -> EYE LPAR ncid . RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On RPAR shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## EYE LPAR ncid RPAR
## LR(1) items:
exprl -> EYE LPAR ncid RPAR . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprl -> EYE LPAR ncid RPAR

State 41:
## Known stack suffix:
## li
## LR(1) items:
b -> li . [ RBRA ]
b -> li . SEMICOL b [ RBRA ]
## Transitions:
-- On SEMICOL shift to state 42
## Reductions:
-- On RBRA
--   reduce production b -> li

State 42:
## Known stack suffix:
## li SEMICOL
## LR(1) items:
b -> li SEMICOL . b [ RBRA ]
## Transitions:
-- On ZEROS shift to state 1
-- On MINUS shift to state 13
-- On MID shift to state 3
-- On LPAR shift to state 14
-- On LIFT shift to state 15
-- On LBRA shift to state 17
-- On KRSYM shift to state 18
-- On KRON shift to state 26
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 6
-- On FLOAT shift to state 36
-- On EYE shift to state 37
-- On li shift to state 41
-- On id shift to state 43
-- On f shift to state 44
-- On exprl shift to state 45
-- On b shift to state 55
## Reductions:

State 43:
## Known stack suffix:
## id
## LR(1) items:
exprl -> id . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprl -> id

State 44:
## Known stack suffix:
## f
## LR(1) items:
exprl -> f . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprl -> f

State 45:
## Known stack suffix:
## exprl
## LR(1) items:
exprl -> exprl . SQUOTE [ TIMES SQUOTE SEMICOL RBRA PLUS MINUS COMMA ]
exprl -> exprl . PLUS exprl [ TIMES SQUOTE SEMICOL RBRA PLUS MINUS COMMA ]
exprl -> exprl . MINUS exprl [ TIMES SQUOTE SEMICOL RBRA PLUS MINUS COMMA ]
exprl -> exprl . TIMES exprl [ TIMES SQUOTE SEMICOL RBRA PLUS MINUS COMMA ]
li -> exprl . [ SEMICOL RBRA ]
li -> exprl . COMMA li [ SEMICOL RBRA ]
## Transitions:
-- On TIMES shift to state 46
-- On SQUOTE shift to state 48
-- On PLUS shift to state 49
-- On MINUS shift to state 51
-- On COMMA shift to state 53
## Reductions:
-- On SEMICOL RBRA
--   reduce production li -> exprl

State 46:
## Known stack suffix:
## exprl TIMES
## LR(1) items:
exprl -> exprl TIMES . exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On ZEROS shift to state 1
-- On MINUS shift to state 13
-- On MID shift to state 3
-- On LPAR shift to state 14
-- On LIFT shift to state 15
-- On LBRA shift to state 17
-- On KRSYM shift to state 18
-- On KRON shift to state 26
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 6
-- On FLOAT shift to state 36
-- On EYE shift to state 37
-- On id shift to state 43
-- On f shift to state 44
-- On exprl shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## exprl TIMES exprl
## LR(1) items:
exprl -> exprl . SQUOTE [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl . PLUS exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl . MINUS exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl . TIMES exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl TIMES exprl . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On TIMES shift to state 46
-- On SQUOTE shift to state 48
## Reductions:
-- On SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA
--   reduce production exprl -> exprl TIMES exprl

State 48:
## Known stack suffix:
## exprl SQUOTE
## LR(1) items:
exprl -> exprl SQUOTE . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprl -> exprl SQUOTE

State 49:
## Known stack suffix:
## exprl PLUS
## LR(1) items:
exprl -> exprl PLUS . exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On ZEROS shift to state 1
-- On MINUS shift to state 13
-- On MID shift to state 3
-- On LPAR shift to state 14
-- On LIFT shift to state 15
-- On LBRA shift to state 17
-- On KRSYM shift to state 18
-- On KRON shift to state 26
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 6
-- On FLOAT shift to state 36
-- On EYE shift to state 37
-- On id shift to state 43
-- On f shift to state 44
-- On exprl shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## exprl PLUS exprl
## LR(1) items:
exprl -> exprl . SQUOTE [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl . PLUS exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl PLUS exprl . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl . MINUS exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl . TIMES exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On TIMES shift to state 46
-- On SQUOTE shift to state 48
## Reductions:
-- On SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA
--   reduce production exprl -> exprl PLUS exprl

State 51:
## Known stack suffix:
## exprl MINUS
## LR(1) items:
exprl -> exprl MINUS . exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On ZEROS shift to state 1
-- On MINUS shift to state 13
-- On MID shift to state 3
-- On LPAR shift to state 14
-- On LIFT shift to state 15
-- On LBRA shift to state 17
-- On KRSYM shift to state 18
-- On KRON shift to state 26
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 6
-- On FLOAT shift to state 36
-- On EYE shift to state 37
-- On id shift to state 43
-- On f shift to state 44
-- On exprl shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## exprl MINUS exprl
## LR(1) items:
exprl -> exprl . SQUOTE [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl . PLUS exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl . MINUS exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl MINUS exprl . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl . TIMES exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On TIMES shift to state 46
-- On SQUOTE shift to state 48
## Reductions:
-- On SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA
--   reduce production exprl -> exprl MINUS exprl

State 53:
## Known stack suffix:
## exprl COMMA
## LR(1) items:
li -> exprl COMMA . li [ SEMICOL RBRA ]
## Transitions:
-- On ZEROS shift to state 1
-- On MINUS shift to state 13
-- On MID shift to state 3
-- On LPAR shift to state 14
-- On LIFT shift to state 15
-- On LBRA shift to state 17
-- On KRSYM shift to state 18
-- On KRON shift to state 26
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 6
-- On FLOAT shift to state 36
-- On EYE shift to state 37
-- On li shift to state 54
-- On id shift to state 43
-- On f shift to state 44
-- On exprl shift to state 45
## Reductions:

State 54:
## Known stack suffix:
## exprl COMMA li
## LR(1) items:
li -> exprl COMMA li . [ SEMICOL RBRA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production li -> exprl COMMA li

State 55:
## Known stack suffix:
## li SEMICOL b
## LR(1) items:
b -> li SEMICOL b . [ RBRA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production b -> li SEMICOL b

State 56:
## Known stack suffix:
## LBRA b
## LR(1) items:
exprl -> LBRA b . RBRA [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On RBRA shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## LBRA b RBRA
## LR(1) items:
exprl -> LBRA b RBRA . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprl -> LBRA b RBRA

State 58:
## Known stack suffix:
## LIFT LPAR exprl
## LR(1) items:
exprl -> LIFT LPAR exprl . COMMA ncid COMMA ncid COMMA ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl . SQUOTE [ TIMES SQUOTE PLUS MINUS COMMA ]
exprl -> exprl . PLUS exprl [ TIMES SQUOTE PLUS MINUS COMMA ]
exprl -> exprl . MINUS exprl [ TIMES SQUOTE PLUS MINUS COMMA ]
exprl -> exprl . TIMES exprl [ TIMES SQUOTE PLUS MINUS COMMA ]
## Transitions:
-- On TIMES shift to state 46
-- On SQUOTE shift to state 48
-- On PLUS shift to state 49
-- On MINUS shift to state 51
-- On COMMA shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## LIFT LPAR exprl COMMA
## LR(1) items:
exprl -> LIFT LPAR exprl COMMA . ncid COMMA ncid COMMA ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 60
-- On id shift to state 12
## Reductions:

State 60:
## Known stack suffix:
## LIFT LPAR exprl COMMA ncid
## LR(1) items:
exprl -> LIFT LPAR exprl COMMA ncid . COMMA ncid COMMA ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On COMMA shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## LIFT LPAR exprl COMMA ncid COMMA
## LR(1) items:
exprl -> LIFT LPAR exprl COMMA ncid COMMA . ncid COMMA ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 62
-- On id shift to state 12
## Reductions:

State 62:
## Known stack suffix:
## LIFT LPAR exprl COMMA ncid COMMA ncid
## LR(1) items:
exprl -> LIFT LPAR exprl COMMA ncid COMMA ncid . COMMA ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On COMMA shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## LIFT LPAR exprl COMMA ncid COMMA ncid COMMA
## LR(1) items:
exprl -> LIFT LPAR exprl COMMA ncid COMMA ncid COMMA . ncid COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 64
-- On id shift to state 12
## Reductions:

State 64:
## Known stack suffix:
## LIFT LPAR exprl COMMA ncid COMMA ncid COMMA ncid
## LR(1) items:
exprl -> LIFT LPAR exprl COMMA ncid COMMA ncid COMMA ncid . COMMA ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On COMMA shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## LIFT LPAR exprl COMMA ncid COMMA ncid COMMA ncid COMMA
## LR(1) items:
exprl -> LIFT LPAR exprl COMMA ncid COMMA ncid COMMA ncid COMMA . ncid RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 66
-- On id shift to state 12
## Reductions:

State 66:
## Known stack suffix:
## LIFT LPAR exprl COMMA ncid COMMA ncid COMMA ncid COMMA ncid
## LR(1) items:
exprl -> LIFT LPAR exprl COMMA ncid COMMA ncid COMMA ncid COMMA ncid . RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On RPAR shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## LIFT LPAR exprl COMMA ncid COMMA ncid COMMA ncid COMMA ncid RPAR
## LR(1) items:
exprl -> LIFT LPAR exprl COMMA ncid COMMA ncid COMMA ncid COMMA ncid RPAR . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprl -> LIFT LPAR exprl COMMA ncid COMMA ncid COMMA ncid COMMA ncid RPAR

State 68:
## Known stack suffix:
## LPAR exprl
## LR(1) items:
exprl -> exprl . SQUOTE [ TIMES SQUOTE RPAR PLUS MINUS ]
exprl -> exprl . PLUS exprl [ TIMES SQUOTE RPAR PLUS MINUS ]
exprl -> exprl . MINUS exprl [ TIMES SQUOTE RPAR PLUS MINUS ]
exprl -> exprl . TIMES exprl [ TIMES SQUOTE RPAR PLUS MINUS ]
exprl -> LPAR exprl . RPAR [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On TIMES shift to state 46
-- On SQUOTE shift to state 48
-- On RPAR shift to state 69
-- On PLUS shift to state 49
-- On MINUS shift to state 51
## Reductions:

State 69:
## Known stack suffix:
## LPAR exprl RPAR
## LR(1) items:
exprl -> LPAR exprl RPAR . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprl -> LPAR exprl RPAR

State 70:
## Known stack suffix:
## MINUS exprl
## LR(1) items:
exprl -> exprl . SQUOTE [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> MINUS exprl . [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl . PLUS exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl . MINUS exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
exprl -> exprl . TIMES exprl [ TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA ]
## Transitions:
-- On SQUOTE shift to state 48
## Reductions:
-- On TIMES SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA
--   reduce production exprl -> MINUS exprl

State 71:
## Known stack suffix:
## lmi
## LR(1) items:
lmi' -> lmi . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept lmi

State 72:
## Known stack suffix:
## exprl
## LR(1) items:
exprl -> exprl . SQUOTE [ TIMES SQUOTE PLUS MINUS LEQ GEQ EOF ]
exprl -> exprl . PLUS exprl [ TIMES SQUOTE PLUS MINUS LEQ GEQ EOF ]
exprl -> exprl . MINUS exprl [ TIMES SQUOTE PLUS MINUS LEQ GEQ EOF ]
exprl -> exprl . TIMES exprl [ TIMES SQUOTE PLUS MINUS LEQ GEQ EOF ]
lmi -> exprl . EOF [ # ]
lmi -> exprl . LEQ INT0 EOF [ # ]
lmi -> exprl . GEQ INT0 EOF [ # ]
lmi -> exprl . LEQ exprl EOF [ # ]
lmi -> exprl . GEQ exprl EOF [ # ]
## Transitions:
-- On TIMES shift to state 46
-- On SQUOTE shift to state 48
-- On PLUS shift to state 49
-- On MINUS shift to state 51
-- On LEQ shift to state 73
-- On GEQ shift to state 78
-- On EOF shift to state 83
## Reductions:

State 73:
## Known stack suffix:
## exprl LEQ
## LR(1) items:
lmi -> exprl LEQ . INT0 EOF [ # ]
lmi -> exprl LEQ . exprl EOF [ # ]
## Transitions:
-- On ZEROS shift to state 1
-- On MINUS shift to state 13
-- On MID shift to state 3
-- On LPAR shift to state 14
-- On LIFT shift to state 15
-- On LBRA shift to state 17
-- On KRSYM shift to state 18
-- On KRON shift to state 26
-- On INT0 shift to state 74
-- On INT shift to state 35
-- On ID shift to state 6
-- On FLOAT shift to state 36
-- On EYE shift to state 37
-- On id shift to state 43
-- On f shift to state 44
-- On exprl shift to state 76
## Reductions:

State 74:
## Known stack suffix:
## exprl LEQ INT0
## LR(1) items:
f -> INT0 . [ TIMES SQUOTE PLUS MINUS EOF ]
lmi -> exprl LEQ INT0 . EOF [ # ]
## Transitions:
-- On EOF shift to state 75
## Reductions:
-- On TIMES SQUOTE PLUS MINUS
--   reduce production f -> INT0

State 75:
## Known stack suffix:
## exprl LEQ INT0 EOF
## LR(1) items:
lmi -> exprl LEQ INT0 EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production lmi -> exprl LEQ INT0 EOF

State 76:
## Known stack suffix:
## exprl LEQ exprl
## LR(1) items:
exprl -> exprl . SQUOTE [ TIMES SQUOTE PLUS MINUS EOF ]
exprl -> exprl . PLUS exprl [ TIMES SQUOTE PLUS MINUS EOF ]
exprl -> exprl . MINUS exprl [ TIMES SQUOTE PLUS MINUS EOF ]
exprl -> exprl . TIMES exprl [ TIMES SQUOTE PLUS MINUS EOF ]
lmi -> exprl LEQ exprl . EOF [ # ]
## Transitions:
-- On TIMES shift to state 46
-- On SQUOTE shift to state 48
-- On PLUS shift to state 49
-- On MINUS shift to state 51
-- On EOF shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## exprl LEQ exprl EOF
## LR(1) items:
lmi -> exprl LEQ exprl EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production lmi -> exprl LEQ exprl EOF

State 78:
## Known stack suffix:
## exprl GEQ
## LR(1) items:
lmi -> exprl GEQ . INT0 EOF [ # ]
lmi -> exprl GEQ . exprl EOF [ # ]
## Transitions:
-- On ZEROS shift to state 1
-- On MINUS shift to state 13
-- On MID shift to state 3
-- On LPAR shift to state 14
-- On LIFT shift to state 15
-- On LBRA shift to state 17
-- On KRSYM shift to state 18
-- On KRON shift to state 26
-- On INT0 shift to state 79
-- On INT shift to state 35
-- On ID shift to state 6
-- On FLOAT shift to state 36
-- On EYE shift to state 37
-- On id shift to state 43
-- On f shift to state 44
-- On exprl shift to state 81
## Reductions:

State 79:
## Known stack suffix:
## exprl GEQ INT0
## LR(1) items:
f -> INT0 . [ TIMES SQUOTE PLUS MINUS EOF ]
lmi -> exprl GEQ INT0 . EOF [ # ]
## Transitions:
-- On EOF shift to state 80
## Reductions:
-- On TIMES SQUOTE PLUS MINUS
--   reduce production f -> INT0

State 80:
## Known stack suffix:
## exprl GEQ INT0 EOF
## LR(1) items:
lmi -> exprl GEQ INT0 EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production lmi -> exprl GEQ INT0 EOF

State 81:
## Known stack suffix:
## exprl GEQ exprl
## LR(1) items:
exprl -> exprl . SQUOTE [ TIMES SQUOTE PLUS MINUS EOF ]
exprl -> exprl . PLUS exprl [ TIMES SQUOTE PLUS MINUS EOF ]
exprl -> exprl . MINUS exprl [ TIMES SQUOTE PLUS MINUS EOF ]
exprl -> exprl . TIMES exprl [ TIMES SQUOTE PLUS MINUS EOF ]
lmi -> exprl GEQ exprl . EOF [ # ]
## Transitions:
-- On TIMES shift to state 46
-- On SQUOTE shift to state 48
-- On PLUS shift to state 49
-- On MINUS shift to state 51
-- On EOF shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## exprl GEQ exprl EOF
## LR(1) items:
lmi -> exprl GEQ exprl EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production lmi -> exprl GEQ exprl EOF

State 83:
## Known stack suffix:
## exprl EOF
## LR(1) items:
lmi -> exprl EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production lmi -> exprl EOF

State 84:
## Known stack suffix:
##
## LR(1) items:
pol' -> . pol [ # ]
## Transitions:
-- On MINUS shift to state 85
-- On MID shift to state 86
-- On LPAR shift to state 89
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 90
-- On FLOAT shift to state 36
-- On DERIV shift to state 91
-- On vm shift to state 100
-- On pol shift to state 150
-- On monom shift to state 128
-- On f shift to state 129
-- On exprp shift to state 151
## Reductions:

State 85:
## Known stack suffix:
## MINUS
## LR(1) items:
exprp -> MINUS . exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On MINUS shift to state 85
-- On MID shift to state 86
-- On LPAR shift to state 89
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 90
-- On FLOAT shift to state 36
-- On DERIV shift to state 91
-- On vm shift to state 100
-- On monom shift to state 128
-- On f shift to state 129
-- On exprp shift to state 149
## Reductions:

State 86:
## Known stack suffix:
## MID
## LR(1) items:
vm -> MID . [ TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
vm -> MID . HAT ncid [ TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On HAT shift to state 87
## Reductions:
-- On TIMES RPAR PLUS MINUS MID LPAR LEQ GEQ EOF COMMA
--   reduce production vm -> MID

State 87:
## Known stack suffix:
## MID HAT
## LR(1) items:
vm -> MID HAT . ncid [ TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 88
-- On id shift to state 12
## Reductions:

State 88:
## Known stack suffix:
## MID HAT ncid
## LR(1) items:
vm -> MID HAT ncid . [ TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vm -> MID HAT ncid

State 89:
## Known stack suffix:
## LPAR
## LR(1) items:
exprp -> LPAR . exprp RPAR [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On MINUS shift to state 85
-- On MID shift to state 86
-- On LPAR shift to state 89
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 90
-- On FLOAT shift to state 36
-- On DERIV shift to state 91
-- On vm shift to state 100
-- On monom shift to state 128
-- On f shift to state 129
-- On exprp shift to state 131
## Reductions:

State 90:
## Known stack suffix:
## ID
## LR(1) items:
exprp -> ID . [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprp -> ID

State 91:
## Known stack suffix:
## DERIV
## LR(1) items:
exprp -> DERIV . MID LPAR exprs RPAR [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On MID shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## DERIV MID
## LR(1) items:
exprp -> DERIV MID . LPAR exprs RPAR [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On LPAR shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## DERIV MID LPAR
## LR(1) items:
exprp -> DERIV MID LPAR . exprs RPAR [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On MINUS shift to state 94
-- On MID shift to state 86
-- On LPAR shift to state 95
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 96
-- On FLOAT shift to state 36
-- On DERIV shift to state 97
-- On vm shift to state 100
-- On monom shift to state 101
-- On f shift to state 103
-- On exprs shift to state 126
## Reductions:

State 94:
## Known stack suffix:
## MINUS
## LR(1) items:
exprs -> MINUS . exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On MINUS shift to state 94
-- On MID shift to state 86
-- On LPAR shift to state 95
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 96
-- On FLOAT shift to state 36
-- On DERIV shift to state 97
-- On vm shift to state 100
-- On monom shift to state 101
-- On f shift to state 103
-- On exprs shift to state 125
## Reductions:

State 95:
## Known stack suffix:
## LPAR
## LR(1) items:
exprs -> LPAR . exprs RPAR [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On MINUS shift to state 94
-- On MID shift to state 86
-- On LPAR shift to state 95
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 96
-- On FLOAT shift to state 36
-- On DERIV shift to state 97
-- On vm shift to state 100
-- On monom shift to state 101
-- On f shift to state 103
-- On exprs shift to state 123
## Reductions:

State 96:
## Known stack suffix:
## ID
## LR(1) items:
exprs -> ID . [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprs -> ID

State 97:
## Known stack suffix:
## DERIV
## LR(1) items:
exprs -> DERIV . MID LPAR exprs RPAR [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## DERIV MID
## LR(1) items:
exprs -> DERIV MID . LPAR exprs RPAR [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On LPAR shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## DERIV MID LPAR
## LR(1) items:
exprs -> DERIV MID LPAR . exprs RPAR [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On MINUS shift to state 94
-- On MID shift to state 86
-- On LPAR shift to state 95
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 96
-- On FLOAT shift to state 36
-- On DERIV shift to state 97
-- On vm shift to state 100
-- On monom shift to state 101
-- On f shift to state 103
-- On exprs shift to state 105
## Reductions:

State 100:
## Known stack suffix:
## vm
## LR(1) items:
monom -> vm . [ TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production monom -> vm

State 101:
## Known stack suffix:
## monom
## LR(1) items:
exprs -> monom . [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
monom -> monom . vm [ TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 86
-- On vm shift to state 102
## Reductions:
-- On TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA
--   reduce production exprs -> monom

State 102:
## Known stack suffix:
## monom vm
## LR(1) items:
monom -> monom vm . [ TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production monom -> monom vm

State 103:
## Known stack suffix:
## f
## LR(1) items:
exprs -> f . monom [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> f . [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 86
-- On vm shift to state 100
-- On monom shift to state 104
## Reductions:
-- On TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA
--   reduce production exprs -> f

State 104:
## Known stack suffix:
## f monom
## LR(1) items:
exprs -> f monom . [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
monom -> monom . vm [ TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 86
-- On vm shift to state 102
## Reductions:
-- On TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA
--   reduce production exprs -> f monom

State 105:
## Known stack suffix:
## DERIV MID LPAR exprs
## LR(1) items:
exprs -> exprs . PLUS exprs [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprs -> exprs . MINUS exprs [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprs -> exprs . TIMES exprs [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprs -> exprs . HAT ncid [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprs -> exprs . LPAR l RPAR [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprs -> DERIV MID LPAR exprs . RPAR [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On TIMES shift to state 106
-- On RPAR shift to state 122
-- On PLUS shift to state 114
-- On MINUS shift to state 118
-- On LPAR shift to state 108
-- On HAT shift to state 116
## Reductions:

State 106:
## Known stack suffix:
## exprs TIMES
## LR(1) items:
exprs -> exprs TIMES . exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On MINUS shift to state 94
-- On MID shift to state 86
-- On LPAR shift to state 95
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 96
-- On FLOAT shift to state 36
-- On DERIV shift to state 97
-- On vm shift to state 100
-- On monom shift to state 101
-- On f shift to state 103
-- On exprs shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## exprs TIMES exprs
## LR(1) items:
exprs -> exprs . PLUS exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . MINUS exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . TIMES exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs TIMES exprs . [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . HAT ncid [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . LPAR l RPAR [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On TIMES shift to state 106
-- On LPAR shift to state 108
-- On HAT shift to state 116
## Reductions:
-- On RPAR PLUS MINUS LEQ GEQ EOF COMMA
--   reduce production exprs -> exprs TIMES exprs

State 108:
## Known stack suffix:
## exprs LPAR
## LR(1) items:
exprs -> exprs LPAR . l RPAR [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On MINUS shift to state 94
-- On MID shift to state 86
-- On LPAR shift to state 95
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 96
-- On FLOAT shift to state 36
-- On DERIV shift to state 97
-- On AQ shift to state 109
-- On vm shift to state 100
-- On monom shift to state 101
-- On le shift to state 110
-- On l shift to state 120
-- On f shift to state 103
-- On exprs shift to state 113
## Reductions:

State 109:
## Known stack suffix:
## AQ
## LR(1) items:
le -> AQ . [ RPAR COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production le -> AQ

State 110:
## Known stack suffix:
## le
## LR(1) items:
l -> le . [ RPAR ]
l -> le . COMMA l [ RPAR ]
## Transitions:
-- On COMMA shift to state 111
## Reductions:
-- On RPAR
--   reduce production l -> le

State 111:
## Known stack suffix:
## le COMMA
## LR(1) items:
l -> le COMMA . l [ RPAR ]
## Transitions:
-- On MINUS shift to state 94
-- On MID shift to state 86
-- On LPAR shift to state 95
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 96
-- On FLOAT shift to state 36
-- On DERIV shift to state 97
-- On AQ shift to state 109
-- On vm shift to state 100
-- On monom shift to state 101
-- On le shift to state 110
-- On l shift to state 112
-- On f shift to state 103
-- On exprs shift to state 113
## Reductions:

State 112:
## Known stack suffix:
## le COMMA l
## LR(1) items:
l -> le COMMA l . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production l -> le COMMA l

State 113:
## Known stack suffix:
## exprs
## LR(1) items:
exprs -> exprs . PLUS exprs [ TIMES RPAR PLUS MINUS LPAR HAT COMMA ]
exprs -> exprs . MINUS exprs [ TIMES RPAR PLUS MINUS LPAR HAT COMMA ]
exprs -> exprs . TIMES exprs [ TIMES RPAR PLUS MINUS LPAR HAT COMMA ]
exprs -> exprs . HAT ncid [ TIMES RPAR PLUS MINUS LPAR HAT COMMA ]
exprs -> exprs . LPAR l RPAR [ TIMES RPAR PLUS MINUS LPAR HAT COMMA ]
le -> exprs . [ RPAR COMMA ]
## Transitions:
-- On TIMES shift to state 106
-- On PLUS shift to state 114
-- On MINUS shift to state 118
-- On LPAR shift to state 108
-- On HAT shift to state 116
## Reductions:
-- On RPAR COMMA
--   reduce production le -> exprs

State 114:
## Known stack suffix:
## exprs PLUS
## LR(1) items:
exprs -> exprs PLUS . exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On MINUS shift to state 94
-- On MID shift to state 86
-- On LPAR shift to state 95
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 96
-- On FLOAT shift to state 36
-- On DERIV shift to state 97
-- On vm shift to state 100
-- On monom shift to state 101
-- On f shift to state 103
-- On exprs shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## exprs PLUS exprs
## LR(1) items:
exprs -> exprs . PLUS exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs PLUS exprs . [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . MINUS exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . TIMES exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . HAT ncid [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . LPAR l RPAR [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On TIMES shift to state 106
-- On LPAR shift to state 108
-- On HAT shift to state 116
## Reductions:
-- On RPAR PLUS MINUS LEQ GEQ EOF COMMA
--   reduce production exprs -> exprs PLUS exprs

State 116:
## Known stack suffix:
## exprs HAT
## LR(1) items:
exprs -> exprs HAT . ncid [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 117
-- On id shift to state 12
## Reductions:

State 117:
## Known stack suffix:
## exprs HAT ncid
## LR(1) items:
exprs -> exprs HAT ncid . [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprs -> exprs HAT ncid

State 118:
## Known stack suffix:
## exprs MINUS
## LR(1) items:
exprs -> exprs MINUS . exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On MINUS shift to state 94
-- On MID shift to state 86
-- On LPAR shift to state 95
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 96
-- On FLOAT shift to state 36
-- On DERIV shift to state 97
-- On vm shift to state 100
-- On monom shift to state 101
-- On f shift to state 103
-- On exprs shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## exprs MINUS exprs
## LR(1) items:
exprs -> exprs . PLUS exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . MINUS exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs MINUS exprs . [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . TIMES exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . HAT ncid [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . LPAR l RPAR [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On TIMES shift to state 106
-- On LPAR shift to state 108
-- On HAT shift to state 116
## Reductions:
-- On RPAR PLUS MINUS LEQ GEQ EOF COMMA
--   reduce production exprs -> exprs MINUS exprs

State 120:
## Known stack suffix:
## exprs LPAR l
## LR(1) items:
exprs -> exprs LPAR l . RPAR [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On RPAR shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## exprs LPAR l RPAR
## LR(1) items:
exprs -> exprs LPAR l RPAR . [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprs -> exprs LPAR l RPAR

State 122:
## Known stack suffix:
## DERIV MID LPAR exprs RPAR
## LR(1) items:
exprs -> DERIV MID LPAR exprs RPAR . [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprs -> DERIV MID LPAR exprs RPAR

State 123:
## Known stack suffix:
## LPAR exprs
## LR(1) items:
exprs -> exprs . PLUS exprs [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprs -> exprs . MINUS exprs [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprs -> exprs . TIMES exprs [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprs -> exprs . HAT ncid [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprs -> exprs . LPAR l RPAR [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprs -> LPAR exprs . RPAR [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On TIMES shift to state 106
-- On RPAR shift to state 124
-- On PLUS shift to state 114
-- On MINUS shift to state 118
-- On LPAR shift to state 108
-- On HAT shift to state 116
## Reductions:

State 124:
## Known stack suffix:
## LPAR exprs RPAR
## LR(1) items:
exprs -> LPAR exprs RPAR . [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprs -> LPAR exprs RPAR

State 125:
## Known stack suffix:
## MINUS exprs
## LR(1) items:
exprs -> exprs . PLUS exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . MINUS exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> MINUS exprs . [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . TIMES exprs [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . HAT ncid [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
exprs -> exprs . LPAR l RPAR [ TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA ]
## Transitions:
-- On HAT shift to state 116
## Reductions:
-- On TIMES RPAR PLUS MINUS LEQ GEQ EOF COMMA
--   reduce production exprs -> MINUS exprs

State 126:
## Known stack suffix:
## DERIV MID LPAR exprs
## LR(1) items:
exprp -> DERIV MID LPAR exprs . RPAR [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprs -> exprs . PLUS exprs [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprs -> exprs . MINUS exprs [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprs -> exprs . TIMES exprs [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprs -> exprs . HAT ncid [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprs -> exprs . LPAR l RPAR [ TIMES RPAR PLUS MINUS LPAR HAT ]
## Transitions:
-- On TIMES shift to state 106
-- On RPAR shift to state 127
-- On PLUS shift to state 114
-- On MINUS shift to state 118
-- On LPAR shift to state 108
-- On HAT shift to state 116
## Reductions:

State 127:
## Known stack suffix:
## DERIV MID LPAR exprs RPAR
## LR(1) items:
exprp -> DERIV MID LPAR exprs RPAR . [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprp -> DERIV MID LPAR exprs RPAR

State 128:
## Known stack suffix:
## monom
## LR(1) items:
exprp -> monom . [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
monom -> monom . vm [ TIMES RPAR PLUS MINUS MID LPAR HAT EOF COMMA ]
## Transitions:
-- On MID shift to state 86
-- On vm shift to state 102
## Reductions:
-- On TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA
--   reduce production exprp -> monom

State 129:
## Known stack suffix:
## f
## LR(1) items:
exprp -> f . monom [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> f . [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On MID shift to state 86
-- On vm shift to state 100
-- On monom shift to state 130
## Reductions:
-- On TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA
--   reduce production exprp -> f

State 130:
## Known stack suffix:
## f monom
## LR(1) items:
exprp -> f monom . [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
monom -> monom . vm [ TIMES RPAR PLUS MINUS MID LPAR HAT EOF COMMA ]
## Transitions:
-- On MID shift to state 86
-- On vm shift to state 102
## Reductions:
-- On TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA
--   reduce production exprp -> f monom

State 131:
## Known stack suffix:
## LPAR exprp
## LR(1) items:
exprp -> exprp . PLUS exprp [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprp -> exprp . MINUS exprp [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprp -> exprp . TIMES exprp [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprp -> exprp . HAT ncid [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprp -> exprp . LPAR lp RPAR [ TIMES RPAR PLUS MINUS LPAR HAT ]
exprp -> LPAR exprp . RPAR [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On TIMES shift to state 132
-- On RPAR shift to state 148
-- On PLUS shift to state 142
-- On MINUS shift to state 146
-- On LPAR shift to state 134
-- On HAT shift to state 144
## Reductions:

State 132:
## Known stack suffix:
## exprp TIMES
## LR(1) items:
exprp -> exprp TIMES . exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On MINUS shift to state 85
-- On MID shift to state 86
-- On LPAR shift to state 89
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 90
-- On FLOAT shift to state 36
-- On DERIV shift to state 91
-- On vm shift to state 100
-- On monom shift to state 128
-- On f shift to state 129
-- On exprp shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## exprp TIMES exprp
## LR(1) items:
exprp -> exprp . PLUS exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . MINUS exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . TIMES exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp TIMES exprp . [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . HAT ncid [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . LPAR lp RPAR [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On TIMES shift to state 132
-- On LPAR shift to state 134
-- On HAT shift to state 144
## Reductions:
-- On RPAR PLUS MINUS EOF COMMA
--   reduce production exprp -> exprp TIMES exprp

State 134:
## Known stack suffix:
## exprp LPAR
## LR(1) items:
exprp -> exprp LPAR . lp RPAR [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On MINUS shift to state 85
-- On MID shift to state 86
-- On LPAR shift to state 89
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 90
-- On FLOAT shift to state 36
-- On DERIV shift to state 91
-- On AQ shift to state 135
-- On vm shift to state 100
-- On monom shift to state 128
-- On lp shift to state 136
-- On lep shift to state 138
-- On f shift to state 129
-- On exprp shift to state 141
## Reductions:

State 135:
## Known stack suffix:
## AQ
## LR(1) items:
lep -> AQ . [ RPAR COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lep -> AQ

State 136:
## Known stack suffix:
## exprp LPAR lp
## LR(1) items:
exprp -> exprp LPAR lp . RPAR [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On RPAR shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## exprp LPAR lp RPAR
## LR(1) items:
exprp -> exprp LPAR lp RPAR . [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprp -> exprp LPAR lp RPAR

State 138:
## Known stack suffix:
## lep
## LR(1) items:
lp -> lep . [ RPAR ]
lp -> lep . COMMA lp [ RPAR ]
## Transitions:
-- On COMMA shift to state 139
## Reductions:
-- On RPAR
--   reduce production lp -> lep

State 139:
## Known stack suffix:
## lep COMMA
## LR(1) items:
lp -> lep COMMA . lp [ RPAR ]
## Transitions:
-- On MINUS shift to state 85
-- On MID shift to state 86
-- On LPAR shift to state 89
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 90
-- On FLOAT shift to state 36
-- On DERIV shift to state 91
-- On AQ shift to state 135
-- On vm shift to state 100
-- On monom shift to state 128
-- On lp shift to state 140
-- On lep shift to state 138
-- On f shift to state 129
-- On exprp shift to state 141
## Reductions:

State 140:
## Known stack suffix:
## lep COMMA lp
## LR(1) items:
lp -> lep COMMA lp . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lp -> lep COMMA lp

State 141:
## Known stack suffix:
## exprp
## LR(1) items:
exprp -> exprp . PLUS exprp [ TIMES RPAR PLUS MINUS LPAR HAT COMMA ]
exprp -> exprp . MINUS exprp [ TIMES RPAR PLUS MINUS LPAR HAT COMMA ]
exprp -> exprp . TIMES exprp [ TIMES RPAR PLUS MINUS LPAR HAT COMMA ]
exprp -> exprp . HAT ncid [ TIMES RPAR PLUS MINUS LPAR HAT COMMA ]
exprp -> exprp . LPAR lp RPAR [ TIMES RPAR PLUS MINUS LPAR HAT COMMA ]
lep -> exprp . [ RPAR COMMA ]
## Transitions:
-- On TIMES shift to state 132
-- On PLUS shift to state 142
-- On MINUS shift to state 146
-- On LPAR shift to state 134
-- On HAT shift to state 144
## Reductions:
-- On RPAR COMMA
--   reduce production lep -> exprp

State 142:
## Known stack suffix:
## exprp PLUS
## LR(1) items:
exprp -> exprp PLUS . exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On MINUS shift to state 85
-- On MID shift to state 86
-- On LPAR shift to state 89
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 90
-- On FLOAT shift to state 36
-- On DERIV shift to state 91
-- On vm shift to state 100
-- On monom shift to state 128
-- On f shift to state 129
-- On exprp shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## exprp PLUS exprp
## LR(1) items:
exprp -> exprp . PLUS exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp PLUS exprp . [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . MINUS exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . TIMES exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . HAT ncid [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . LPAR lp RPAR [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On TIMES shift to state 132
-- On LPAR shift to state 134
-- On HAT shift to state 144
## Reductions:
-- On RPAR PLUS MINUS EOF COMMA
--   reduce production exprp -> exprp PLUS exprp

State 144:
## Known stack suffix:
## exprp HAT
## LR(1) items:
exprp -> exprp HAT . ncid [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On MID shift to state 3
-- On INT0 shift to state 4
-- On INT shift to state 5
-- On ID shift to state 6
-- On AQ shift to state 7
-- On ncid shift to state 145
-- On id shift to state 12
## Reductions:

State 145:
## Known stack suffix:
## exprp HAT ncid
## LR(1) items:
exprp -> exprp HAT ncid . [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprp -> exprp HAT ncid

State 146:
## Known stack suffix:
## exprp MINUS
## LR(1) items:
exprp -> exprp MINUS . exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On MINUS shift to state 85
-- On MID shift to state 86
-- On LPAR shift to state 89
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 90
-- On FLOAT shift to state 36
-- On DERIV shift to state 91
-- On vm shift to state 100
-- On monom shift to state 128
-- On f shift to state 129
-- On exprp shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## exprp MINUS exprp
## LR(1) items:
exprp -> exprp . PLUS exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . MINUS exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp MINUS exprp . [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . TIMES exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . HAT ncid [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . LPAR lp RPAR [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On TIMES shift to state 132
-- On LPAR shift to state 134
-- On HAT shift to state 144
## Reductions:
-- On RPAR PLUS MINUS EOF COMMA
--   reduce production exprp -> exprp MINUS exprp

State 148:
## Known stack suffix:
## LPAR exprp RPAR
## LR(1) items:
exprp -> LPAR exprp RPAR . [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprp -> LPAR exprp RPAR

State 149:
## Known stack suffix:
## MINUS exprp
## LR(1) items:
exprp -> exprp . PLUS exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . MINUS exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> MINUS exprp . [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . TIMES exprp [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . HAT ncid [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
exprp -> exprp . LPAR lp RPAR [ TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA ]
## Transitions:
-- On HAT shift to state 144
## Reductions:
-- On TIMES RPAR PLUS MINUS EOF COMMA
--   reduce production exprp -> MINUS exprp

State 150:
## Known stack suffix:
## pol
## LR(1) items:
pol' -> pol . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept pol

State 151:
## Known stack suffix:
## exprp
## LR(1) items:
exprp -> exprp . PLUS exprp [ TIMES PLUS MINUS LPAR HAT EOF ]
exprp -> exprp . MINUS exprp [ TIMES PLUS MINUS LPAR HAT EOF ]
exprp -> exprp . TIMES exprp [ TIMES PLUS MINUS LPAR HAT EOF ]
exprp -> exprp . HAT ncid [ TIMES PLUS MINUS LPAR HAT EOF ]
exprp -> exprp . LPAR lp RPAR [ TIMES PLUS MINUS LPAR HAT EOF ]
pol -> exprp . EOF [ # ]
## Transitions:
-- On TIMES shift to state 132
-- On PLUS shift to state 142
-- On MINUS shift to state 146
-- On LPAR shift to state 134
-- On HAT shift to state 144
-- On EOF shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## exprp EOF
## LR(1) items:
pol -> exprp EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production pol -> exprp EOF

State 153:
## Known stack suffix:
##
## LR(1) items:
sos' -> . sos [ # ]
## Transitions:
-- On MINUS shift to state 94
-- On MID shift to state 86
-- On LPAR shift to state 95
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 96
-- On FLOAT shift to state 36
-- On DERIV shift to state 97
-- On vm shift to state 100
-- On sos shift to state 154
-- On monom shift to state 101
-- On f shift to state 103
-- On exprs shift to state 155
## Reductions:

State 154:
## Known stack suffix:
## sos
## LR(1) items:
sos' -> sos . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept sos

State 155:
## Known stack suffix:
## exprs
## LR(1) items:
exprs -> exprs . PLUS exprs [ TIMES PLUS MINUS LPAR LEQ HAT GEQ EOF ]
exprs -> exprs . MINUS exprs [ TIMES PLUS MINUS LPAR LEQ HAT GEQ EOF ]
exprs -> exprs . TIMES exprs [ TIMES PLUS MINUS LPAR LEQ HAT GEQ EOF ]
exprs -> exprs . HAT ncid [ TIMES PLUS MINUS LPAR LEQ HAT GEQ EOF ]
exprs -> exprs . LPAR l RPAR [ TIMES PLUS MINUS LPAR LEQ HAT GEQ EOF ]
sos -> exprs . EOF [ # ]
sos -> exprs . LEQ exprs EOF [ # ]
sos -> exprs . GEQ exprs EOF [ # ]
## Transitions:
-- On TIMES shift to state 106
-- On PLUS shift to state 114
-- On MINUS shift to state 118
-- On LPAR shift to state 108
-- On LEQ shift to state 156
-- On HAT shift to state 116
-- On GEQ shift to state 159
-- On EOF shift to state 162
## Reductions:

State 156:
## Known stack suffix:
## exprs LEQ
## LR(1) items:
sos -> exprs LEQ . exprs EOF [ # ]
## Transitions:
-- On MINUS shift to state 94
-- On MID shift to state 86
-- On LPAR shift to state 95
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 96
-- On FLOAT shift to state 36
-- On DERIV shift to state 97
-- On vm shift to state 100
-- On monom shift to state 101
-- On f shift to state 103
-- On exprs shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## exprs LEQ exprs
## LR(1) items:
exprs -> exprs . PLUS exprs [ TIMES PLUS MINUS LPAR HAT EOF ]
exprs -> exprs . MINUS exprs [ TIMES PLUS MINUS LPAR HAT EOF ]
exprs -> exprs . TIMES exprs [ TIMES PLUS MINUS LPAR HAT EOF ]
exprs -> exprs . HAT ncid [ TIMES PLUS MINUS LPAR HAT EOF ]
exprs -> exprs . LPAR l RPAR [ TIMES PLUS MINUS LPAR HAT EOF ]
sos -> exprs LEQ exprs . EOF [ # ]
## Transitions:
-- On TIMES shift to state 106
-- On PLUS shift to state 114
-- On MINUS shift to state 118
-- On LPAR shift to state 108
-- On HAT shift to state 116
-- On EOF shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## exprs LEQ exprs EOF
## LR(1) items:
sos -> exprs LEQ exprs EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sos -> exprs LEQ exprs EOF

State 159:
## Known stack suffix:
## exprs GEQ
## LR(1) items:
sos -> exprs GEQ . exprs EOF [ # ]
## Transitions:
-- On MINUS shift to state 94
-- On MID shift to state 86
-- On LPAR shift to state 95
-- On INT0 shift to state 34
-- On INT shift to state 35
-- On ID shift to state 96
-- On FLOAT shift to state 36
-- On DERIV shift to state 97
-- On vm shift to state 100
-- On monom shift to state 101
-- On f shift to state 103
-- On exprs shift to state 160
## Reductions:

State 160:
## Known stack suffix:
## exprs GEQ exprs
## LR(1) items:
exprs -> exprs . PLUS exprs [ TIMES PLUS MINUS LPAR HAT EOF ]
exprs -> exprs . MINUS exprs [ TIMES PLUS MINUS LPAR HAT EOF ]
exprs -> exprs . TIMES exprs [ TIMES PLUS MINUS LPAR HAT EOF ]
exprs -> exprs . HAT ncid [ TIMES PLUS MINUS LPAR HAT EOF ]
exprs -> exprs . LPAR l RPAR [ TIMES PLUS MINUS LPAR HAT EOF ]
sos -> exprs GEQ exprs . EOF [ # ]
## Transitions:
-- On TIMES shift to state 106
-- On PLUS shift to state 114
-- On MINUS shift to state 118
-- On LPAR shift to state 108
-- On HAT shift to state 116
-- On EOF shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## exprs GEQ exprs EOF
## LR(1) items:
sos -> exprs GEQ exprs EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sos -> exprs GEQ exprs EOF

State 162:
## Known stack suffix:
## exprs EOF
## LR(1) items:
sos -> exprs EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sos -> exprs EOF

