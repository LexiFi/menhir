Grammar has 17 nonterminal symbols, among which 3 start symbols.
Grammar has 29 terminal symbols.
Grammar has 72 productions.
nullable(vm) = false
nullable(sos) = false
nullable(pol) = false
nullable(ncid) = false
nullable(monom) = false
nullable(lp) = false
nullable(lmi) = false
nullable(li) = false
nullable(lep) = false
nullable(le) = false
nullable(l) = false
nullable(id) = false
nullable(f) = false
nullable(exprs) = false
nullable(exprp) = false
nullable(exprl) = false
nullable(b) = false
first(vm) = MID
first(sos) = MINUS MID LPAR INT0 INT ID FLOAT DERIV
first(pol) = MINUS MID LPAR INT0 INT ID FLOAT DERIV
first(ncid) = MID INT0 INT ID AQ
first(monom) = MID
first(lp) = MINUS MID LPAR INT0 INT ID FLOAT DERIV AQ
first(lmi) = ZEROS MINUS MID LPAR LIFT LBRA KRSYM KRON INT0 INT ID FLOAT EYE
first(li) = ZEROS MINUS MID LPAR LIFT LBRA KRSYM KRON INT0 INT ID FLOAT EYE
first(lep) = MINUS MID LPAR INT0 INT ID FLOAT DERIV AQ
first(le) = MINUS MID LPAR INT0 INT ID FLOAT DERIV AQ
first(l) = MINUS MID LPAR INT0 INT ID FLOAT DERIV AQ
first(id) = MID ID
first(f) = INT0 INT FLOAT
first(exprs) = MINUS MID LPAR INT0 INT ID FLOAT DERIV
first(exprp) = MINUS MID LPAR INT0 INT ID FLOAT DERIV
first(exprl) = ZEROS MINUS MID LPAR LIFT LBRA KRSYM KRON INT0 INT ID FLOAT EYE
first(b) = ZEROS MINUS MID LPAR LIFT LBRA KRSYM KRON INT0 INT ID FLOAT EYE
minimal(vm) = (* 1 *) MID
minimal(sos) = (* 2 *) ID EOF
minimal(pol) = (* 2 *) ID EOF
minimal(ncid) = (* 1 *) INT0
minimal(monom) = (* 1 *) MID
minimal(lp) = (* 1 *) ID
minimal(lmi) = (* 2 *) MID EOF
minimal(li) = (* 1 *) MID
minimal(lep) = (* 1 *) ID
minimal(le) = (* 1 *) ID
minimal(l) = (* 1 *) ID
minimal(id) = (* 1 *) MID
minimal(f) = (* 1 *) INT0
minimal(exprs) = (* 1 *) ID
minimal(exprp) = (* 1 *) ID
minimal(exprl) = (* 1 *) MID
minimal(b) = (* 1 *) MID
follow(vm) = TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA
follow(sos) = #
follow(pol) = #
follow(ncid) = TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA
follow(monom) = TIMES RPAR PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA
follow(lp) = RPAR
follow(lmi) = #
follow(li) = SEMICOL RBRA
follow(lep) = RPAR COMMA
follow(le) = RPAR COMMA
follow(l) = RPAR
follow(id) = TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA
follow(f) = TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS MID LPAR LEQ HAT GEQ EOF COMMA
follow(exprs) = TIMES RPAR PLUS MINUS LPAR LEQ HAT GEQ EOF COMMA
follow(exprp) = TIMES RPAR PLUS MINUS LPAR HAT EOF COMMA
follow(exprl) = TIMES SQUOTE SEMICOL RPAR RBRA PLUS MINUS LEQ GEQ EOF COMMA
follow(b) = RBRA
Built an LR(0) automaton with 163 states.
The grammar is not SLR(1) -- 15 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 163 states.
59 shift/reduce conflicts were silently solved.
50 out of 163 states have a default reduction.
54 out of 163 states are represented.
0 out of 51 symbols keep track of their start position.
0 out of 51 symbols keep track of their end position.
41 out of 75 productions exploit shiftreduce optimization.
262 functions before inlining, 64 functions after inlining.
