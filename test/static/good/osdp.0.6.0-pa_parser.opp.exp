%{
(*
 * OSDP (OCaml SDP) is an OCaml frontend library to semi-definite
 * programming (SDP) solvers.
 * Copyright (C) 2012, 2014  P. Roux and P.L. Garoche
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *)

open Camlp4.PreCast

let loc () =
  let start_p = Parsing.symbol_start_pos () in
  let end_p = Parsing.symbol_end_pos () in
  Loc.of_tuple
    (start_p.Lexing.pos_fname,
     start_p.Lexing.pos_lnum, start_p.Lexing.pos_bol, start_p.Lexing.pos_cnum,
     end_p.Lexing.pos_lnum, end_p.Lexing.pos_bol, end_p.Lexing.pos_cnum,
     false)

let id_of_list loc l =
  let id_of_str s =
    if 'A' <= s.[0] && s.[0] <= 'Z'
       || s = "::" || s = "[]" then Ast.IdUid (loc, s)
    else Ast.IdLid (loc, s) in
  Ast.ExId (loc, Ast.idAcc_of_list (List.map id_of_str l))

let olf loc idl el =
  List.fold_left
    (fun f e -> Ast.ExApp (loc, f, e))
    (id_of_list loc (["Osdp"; "Lmi"; "Float"] @ idl)) el

let olfl idl el = olf (loc ()) idl el

let osf loc idl el =
  List.fold_left
    (fun f e -> Ast.ExApp (loc, f, e))
    (id_of_list loc (["Osdp"; "Sos"; "Float"] @ idl)) el

let osfl idl el = osf (loc ()) idl el

let opf loc idl el =
  List.fold_left
    (fun f e -> Ast.ExApp (loc, f, e))
    (id_of_list loc (["Osdp"; "Polynomial"; "Float"] @ idl)) el

let opfl idl el = opf (loc ()) idl el

let cons l e1 e2 =
  Ast.ExApp (l, Ast.ExApp (l, Ast.ExId (l, Ast.IdUid (l, "::")), e1), e2)

let empty_list l = Ast.ExId (l, Ast.IdUid (l, "[]"))

let slist l e = cons l e (empty_list l)

let pair l e1 e2 = Ast.ExTup (l, Ast.ExCom (l, e1, e2))

let simplify_mat_float e =
  let is_id l = function
    | Ast.ExId (_, i) ->
       let l' = Ast.list_of_ident i [] in
       begin
         try
           List.for_all
             (function
               | s, Ast.IdUid (_, s') | s, Ast.IdLid (_, s') -> s = s'
               | _ -> false)
             (List.combine l l')
         with Invalid_argument _ -> false
       end
    | _ -> false in

  let is_1x1_float e =
    let is_slist_slist e =
      let is_slist = function
        | Ast.ExApp (_, Ast.ExApp (_, ic, h), ie) ->
           if is_id ["::"] ic && is_id ["[]"] ie then Some h else None
        | _ -> None in
      match is_slist e with None -> None | Some e -> is_slist e in
    let aux = function
      | Ast.ExApp (_, c, Ast.ExApp (_, oll, llf)) ->
         if is_id ["Osdp"; "Lmi"; "Float"; "Const"] c
            && is_id ["Osdp"; "Lmi"; "Float"; "Mat"; "of_list_list"] oll then
           match is_slist_slist llf with
           | Some (Ast.ExFlo (l, f))
           | Some (Ast.ExInt (l, f)) ->
              Some (Ast.ExFlo (l, f))
           | _ -> None
         else None
      | _ -> None in
    match e with
    | Ast.ExApp (_, mi, m) when is_id ["Osdp"; "Lmi"; "Float"; "Minus"] mi ->
       begin
         match aux m with
         | Some (Ast.ExFlo (l, f)) -> Some (Ast.ExFlo (l, "-" ^ f))
         | _ -> None
       end
    | _ -> aux e in

  let rec map_ExSem f = function
    | Ast.ExSem (l, e1, e2) ->
       begin
         match f e1, map_ExSem f e2 with
         | Some e1, Some e2 -> Some (cons l e1 e2)
         | _ -> None
       end
    | e ->
       match f e with
       | None -> None
       | Some e -> Some (slist (Ast.loc_of_expr e) e) in

  let loc = loc () in
  let simplify_mat_line = function
    | Ast.ExArr (l, e) -> map_ExSem is_1x1_float e
    | _ -> None in
  match map_ExSem simplify_mat_line e with
  | Some llf ->
     olf loc ["Const"] [olf loc ["Mat"; "of_list_list"] [llf]]
  | None -> olf loc ["Block"] [Ast.ExArr (loc, e)]

let monom loc v d =
  let rec aux n =
    if n <= 0 then slist loc d
    else cons loc (Ast.ExInt (loc, "0")) (aux (n - 1)) in
  Ast.ExApp (loc, id_of_list loc ["Osdp"; "Monomial"; "of_list"], aux v)
%}
%start lmi
%start pol
%start sos
%token <string> AQ
%token COMMA
%token DERIV
%token EOF
%token EYE
%token FINT0
%token <string> FLOAT
%token GEQ
%token HAT
%token <string> ID
%token <string> INT
%token INT0
%token KRON
%token KRSYM
%token LBRA
%token LEQ
%token LIFT
%token LPAR
%token <int> MID
%token MINUS
%token PLUS
%token PVM
%token RBRA
%token RPAR
%token SEMICOL
%token SQUOTE
%token TIMES
%token UMINUS
%token ZEROS
%left MINUS PLUS
%right TIMES
%nonassoc LPAR UMINUS
%nonassoc SQUOTE
%nonassoc PVM
%left HAT
%nonassoc FINT0
%nonassoc EOF
%type <Camlp4.PreCast.Ast.expr> lmi
%type <Camlp4.PreCast.Ast.expr> pol
%type <Camlp4.PreCast.Ast.expr> sos
%%

f:
  _1 = INT0 %prec FINT0
    {                   ( Ast.ExFlo (loc (), "0.") )}
| _1 = INT
    {      ( Ast.ExFlo (loc (), _1) )}
| _1 = FLOAT
    {        ( Ast.ExFlo (loc (), _1) )}

id:
  _1 = MID
    {      ( "x" ^ string_of_int _1 )}
| _1 = ID
    {     ( _1 )}

ncid:
  _1 = INT0
    {       ( Ast.ExInt (loc (), "0") )}
| _1 = INT
    {      ( Ast.ExInt (loc (), _1) )}
| _1 = id
    {     ( id_of_list (loc ()) [_1] )}
| _1 = AQ
    {     ( Camlp4.PreCast.Syntax.AntiquotSyntax.parse_expr (loc ()) _1 )}

exprl:
  _1 = id
    {     ( id_of_list (loc ()) [_1] )}
| _1 = ZEROS _2 = LPAR _3 = ncid _4 = COMMA _5 = ncid _6 = RPAR
    {                                  ( olfl ["Zeros"] [_3; _5] )}
| _1 = EYE _2 = LPAR _3 = ncid _4 = RPAR
    {                     ( olfl ["Eye"] [_3] )}
| _1 = KRON _2 = LPAR _3 = ncid _4 = COMMA _5 = ncid _6 = COMMA _7 = ncid _8 = RPAR
    {                                            ( olfl ["Kron"]
                                                    [_3; _5; _7] )}
| _1 = KRSYM _2 = LPAR _3 = ncid _4 = COMMA _5 = ncid _6 = COMMA _7 = ncid _8 = RPAR
    {                                             ( olfl ["Kron_sym"]
                                                    [_3; _5; _7] )}
| _1 = LBRA _2 = b _3 = RBRA
    {              ( simplify_mat_float _2 )}
| _1 = LIFT _2 = LPAR _3 = exprl _4 = COMMA _5 = ncid _6 = COMMA _7 = ncid _8 = COMMA _9 = ncid _10 = COMMA _11 = ncid _12 = RPAR
    {                                                                   ( olfl ["Lift_block"] [_3; _5; _7; _9; _11] )}
| _1 = exprl _2 = SQUOTE
    {               ( olfl ["Transpose"] [_1] )}
| _1 = MINUS _2 = exprl %prec UMINUS
    {                           ( olfl ["Minus"] [_2] )}
| _1 = exprl _2 = PLUS _3 = exprl
    {                   ( olfl ["Add"] [_1; _3] )}
| _1 = exprl _2 = MINUS _3 = exprl
    {                    ( olfl ["Sub"] [_1; _3] )}
| _1 = exprl _2 = TIMES _3 = exprl
    {                    ( olfl ["Mult"] [_1; _3] )}
| _1 = LPAR _2 = exprl _3 = RPAR
    {                  ( _2 )}
| _1 = f
    {    ( let l = loc () in
      olf l ["Const"] [olf l ["Mat"; "of_list_list"] [slist l (slist l _1)]] )}

b:
  _1 = li
    {     ( Ast.ExArr (loc (), _1) )}
| _1 = li _2 = SEMICOL _3 = b
    {               ( Ast.ExSem (loc (), Ast.ExArr (Ast.loc_of_expr _1, _1), _3) )}

li:
  _1 = exprl
    {        ( _1 )}
| _1 = exprl _2 = COMMA _3 = li
    {                 ( Ast.ExSem (loc (), _1, _3) )}

lmi:
  _1 = exprl _2 = EOF
    {            ( _1 )}
| _1 = exprl _2 = LEQ _3 = INT0 _4 = EOF
    {                     ( olfl ["Minus"] [_1] )}
| _1 = exprl _2 = GEQ _3 = INT0 _4 = EOF
    {                     ( _1 )}
| _1 = exprl _2 = LEQ _3 = exprl _4 = EOF
    {                      ( olfl ["Sub"] [_3; _1] )}
| _1 = exprl _2 = GEQ _3 = exprl _4 = EOF
    {                      ( olfl ["Sub"] [_1; _3] )}

vm:
  _1 = MID %prec PVM
    {                ( let l = loc () in monom l _1 (Ast.ExInt (l, "1")) )}
| _1 = MID _2 = HAT _3 = ncid
    {               ( monom (loc ()) _1 _3 )}

monom:
  _1 = vm
    {     ( _1 )}
| _1 = monom _2 = vm
    {            ( let l = loc () in
              Ast.ExApp (l,
                         Ast.ExApp (l,
                                    id_of_list l ["Osdp"; "Monomial"; "mult"],
                                    _1),
                         _2) )}

exprs:
  _1 = ID
    {     ( id_of_list (loc ()) [_1] )}
| _1 = monom
    {        ( let l = loc () in
          osf l ["Const"] [osf l ["Poly"; "of_list"]
                                 [slist l (pair l _1 (Ast.ExFlo (l, "1.")))]] )}
| _1 = f _2 = monom
    {          ( let l = loc () in
            osf l ["Const"] [osf l ["Poly"; "of_list"]
                                   [slist l (pair l _2 _1)]] )}
| _1 = exprs _2 = PLUS _3 = exprs
    {                   ( osfl ["Add"] [_1; _3] )}
| _1 = exprs _2 = MINUS _3 = exprs
    {                    ( osfl ["Sub"] [_1; _3] )}
| _1 = MINUS _2 = exprs %prec UMINUS
    {                           ( let l = loc () in
                             osf l ["Sub"]
                                 [osf l ["Const"] [osf l ["Poly"; "zero"] []];
                                  _2] )}
| _1 = exprs _2 = TIMES _3 = exprs
    {                    ( osfl ["Mult"] [_1; _3] )}
| _1 = exprs _2 = HAT _3 = ncid
    {                 ( osfl ["Power"] [_1; _3] )}
| _1 = exprs _2 = LPAR _3 = l _4 = RPAR
    {                    ( osfl ["Compose"] [_1; _3] )}
| _1 = DERIV _2 = MID _3 = LPAR _4 = exprs _5 = RPAR
    {                            ( osfl ["Derive"] [_4; Ast.ExInt (loc (), string_of_int _2)] )}
| _1 = LPAR _2 = exprs _3 = RPAR
    {                  ( _2 )}
| _1 = f
    {    ( let l = loc () in
      osf l ["Const"]
          [osf l ["Poly"; "of_list"]
               [slist l (pair l (Ast.ExApp (l, id_of_list l ["Osdp"; "Monomial"; "of_list"], empty_list l)) _1)]] )}

l:
  _1 = le
    {     ( _1 )}
| _1 = le _2 = COMMA _3 = l
    {             ( let l = loc () in
                Ast.ExApp (l, Ast.ExApp (l, id_of_list l ["@"], _1), _3) )}

le:
  _1 = exprs
    {        ( slist (loc ()) _1 )}
| _1 = AQ
    {     ( Camlp4.PreCast.Syntax.AntiquotSyntax.parse_expr (loc ()) _1 )}

sos:
  _1 = exprs _2 = EOF
    {            ( _1 )}
| _1 = exprs _2 = LEQ _3 = exprs _4 = EOF
    {                      ( osfl ["Sub"] [_3; _1] )}
| _1 = exprs _2 = GEQ _3 = exprs _4 = EOF
    {                      ( osfl ["Sub"] [_1; _3] )}

exprp:
  _1 = ID
    {     ( id_of_list (loc ()) [_1] )}
| _1 = monom
    {        ( let l = loc () in
          opf l ["of_list"] [slist l (pair l _1 (Ast.ExFlo (l, "1.")))] )}
| _1 = f _2 = monom
    {          ( let l = loc () in opf l ["of_list"] [slist l (pair l _2 _1)] )}
| _1 = exprp _2 = PLUS _3 = exprp
    {                   ( opfl ["add"] [_1; _3] )}
| _1 = exprp _2 = MINUS _3 = exprp
    {                    ( opfl ["sub"] [_1; _3] )}
| _1 = MINUS _2 = exprp %prec UMINUS
    {                           ( let l = loc () in
                             opf l ["sub"] [opf l ["zero"] []; _2] )}
| _1 = exprp _2 = TIMES _3 = exprp
    {                    ( opfl ["mult"] [_1; _3] )}
| _1 = exprp _2 = HAT _3 = ncid
    {                 ( opfl ["power"] [_1; _3] )}
| _1 = exprp _2 = LPAR _3 = lp _4 = RPAR
    {                     ( opfl ["compose"] [_1; _3] )}
| _1 = DERIV _2 = MID _3 = LPAR _4 = exprs _5 = RPAR
    {                            ( osfl ["Derive"] [_4; Ast.ExInt (loc (), string_of_int _2)] )}
| _1 = LPAR _2 = exprp _3 = RPAR
    {                  ( _2 )}
| _1 = f
    {    ( let l = loc () in
      opf l ["of_list"]
          [slist l (pair l (Ast.ExApp (l, id_of_list l ["Osdp"; "Monomial"; "of_list"], empty_list l)) _1)] )}

lp:
  _1 = lep
    {      ( _1 )}
| _1 = lep _2 = COMMA _3 = lp
    {               ( let l = loc () in
                 Ast.ExApp (l, Ast.ExApp (l, id_of_list l ["@"], _1), _3) )}

lep:
  _1 = exprp
    {        ( slist (loc ()) _1 )}
| _1 = AQ
    {     ( Camlp4.PreCast.Syntax.AntiquotSyntax.parse_expr (loc ()) _1 )}

pol:
  _1 = exprp _2 = EOF
    {            ( _1 )}

%%
