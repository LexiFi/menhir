State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On A shift to state 1
-- On main shift to state 12
## Reductions:

State 1:
## Known stack suffix:
## A
## LR(1) items:
main -> A . B fst(pair_new_syntax_pair(A,B)) snd(pair_new_syntax_pair(A,B)) C D EOF [ # ]
## Transitions:
-- On B shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## A B
## LR(1) items:
main -> A B . fst(pair_new_syntax_pair(A,B)) snd(pair_new_syntax_pair(A,B)) C D EOF [ # ]
## Transitions:
-- On A shift to state 3
-- On fst(pair_new_syntax_pair(A,B)) shift to state 5
## Reductions:

State 3:
## Known stack suffix:
## A
## LR(1) items:
fst(pair_new_syntax_pair(A,B)) -> A . B [ A ]
## Transitions:
-- On B shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## A B
## LR(1) items:
fst(pair_new_syntax_pair(A,B)) -> A B . [ A ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fst(pair_new_syntax_pair(A,B)) -> A B

State 5:
## Known stack suffix:
## A B fst(pair_new_syntax_pair(A,B))
## LR(1) items:
main -> A B fst(pair_new_syntax_pair(A,B)) . snd(pair_new_syntax_pair(A,B)) C D EOF [ # ]
## Transitions:
-- On A shift to state 6
-- On snd(pair_new_syntax_pair(A,B)) shift to state 8
## Reductions:

State 6:
## Known stack suffix:
## A
## LR(1) items:
snd(pair_new_syntax_pair(A,B)) -> A . B [ C ]
## Transitions:
-- On B shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## A B
## LR(1) items:
snd(pair_new_syntax_pair(A,B)) -> A B . [ C ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production snd(pair_new_syntax_pair(A,B)) -> A B

State 8:
## Known stack suffix:
## A B fst(pair_new_syntax_pair(A,B)) snd(pair_new_syntax_pair(A,B))
## LR(1) items:
main -> A B fst(pair_new_syntax_pair(A,B)) snd(pair_new_syntax_pair(A,B)) . C D EOF [ # ]
## Transitions:
-- On C shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## A B fst(pair_new_syntax_pair(A,B)) snd(pair_new_syntax_pair(A,B)) C
## LR(1) items:
main -> A B fst(pair_new_syntax_pair(A,B)) snd(pair_new_syntax_pair(A,B)) C . D EOF [ # ]
## Transitions:
-- On D shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## A B fst(pair_new_syntax_pair(A,B)) snd(pair_new_syntax_pair(A,B)) C D
## LR(1) items:
main -> A B fst(pair_new_syntax_pair(A,B)) snd(pair_new_syntax_pair(A,B)) C D . EOF [ # ]
## Transitions:
-- On EOF shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## A B fst(pair_new_syntax_pair(A,B)) snd(pair_new_syntax_pair(A,B)) C D EOF
## LR(1) items:
main -> A B fst(pair_new_syntax_pair(A,B)) snd(pair_new_syntax_pair(A,B)) C D EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production main -> A B fst(pair_new_syntax_pair(A,B)) snd(pair_new_syntax_pair(A,B)) C D EOF

State 12:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept main

