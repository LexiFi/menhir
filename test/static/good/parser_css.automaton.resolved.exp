State 0:
## Known stack suffix:
##
## LR(1) items:
stylesheet' -> . stylesheet [ # ]
## Transitions:
-- On stylesheet shift to state 1
-- On s_star shift to state 2
## Default reduction:
-- After reading the next token, reduce production s_star ->

State 1:
## Known stack suffix:
## stylesheet
## LR(1) items:
stylesheet' -> stylesheet . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept stylesheet

State 2:
## Known stack suffix:
## s_star
## LR(1) items:
s_star -> s_star . S [ SEL_FUNC S PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK ]
stylesheet -> s_star . statement_star EOF [ # ]
## Transitions:
-- On S shift to state 3
-- On statement_star shift to state 4
## Reductions:
-- On SEL_FUNC reduce production statement_star ->
-- On PERIOD reduce production statement_star ->
-- On OPEN_SQUARE reduce production statement_star ->
-- On IDENT reduce production statement_star ->
-- On HASH reduce production statement_star ->
-- On EOF reduce production statement_star ->
-- On DOUBLE_COLON reduce production statement_star ->
-- On COLON reduce production statement_star ->
-- On ASTERISK reduce production statement_star ->

State 3:
## Known stack suffix:
## s_star S
## LR(1) items:
s_star -> s_star S . [ SEL_FUNC S PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production s_star -> s_star S

State 4:
## Known stack suffix:
## s_star statement_star
## LR(1) items:
statement_star -> statement_star . statement [ SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK ]
stylesheet -> s_star statement_star . EOF [ # ]
## Transitions:
-- On SEL_FUNC shift to state 5
-- On PERIOD shift to state 6
-- On OPEN_SQUARE shift to state 8
-- On IDENT shift to state 38
-- On HASH shift to state 28
-- On EOF shift to state 39
-- On DOUBLE_COLON shift to state 29
-- On COLON shift to state 31
-- On ASTERISK shift to state 40
-- On statement shift to state 41
-- On simple_selector shift to state 42
-- On selector_separated_nonempty_list_COMMA shift to state 55
-- On selector_list shift to state 58
-- On selector shift to state 92
-- On rule shift to state 93
-- On qualifier_plus shift to state 50
-- On qualifier shift to state 35
-- On element shift to state 51
## Reductions:

State 5:
## Known stack suffix:
## SEL_FUNC
## LR(1) items:
qualifier -> SEL_FUNC . function_args CLOSE_ROUND [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
-- On SEL_FUNC shift to state 5
-- On PERIOD shift to state 6
-- On OPEN_SQUARE shift to state 8
-- On NTH shift to state 26
-- On IDENT shift to state 27
-- On HASH shift to state 28
-- On DOUBLE_COLON shift to state 29
-- On COLON shift to state 31
-- On qualifier_plus shift to state 33
-- On qualifier shift to state 35
-- On function_args shift to state 36
## Reductions:

State 6:
## Known stack suffix:
## PERIOD
## LR(1) items:
qualifier -> PERIOD . IDENT [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
-- On IDENT shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## PERIOD IDENT
## LR(1) items:
qualifier -> PERIOD IDENT . [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> PERIOD IDENT

State 8:
## Known stack suffix:
## OPEN_SQUARE
## LR(1) items:
qualifier -> OPEN_SQUARE . IDENT attr_operation CLOSE_SQUARE [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
-- On IDENT shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## OPEN_SQUARE IDENT
## LR(1) items:
qualifier -> OPEN_SQUARE IDENT . attr_operation CLOSE_SQUARE [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
-- On ATTR_SUFFIX shift to state 10
-- On ATTR_SUBSTRING shift to state 14
-- On ATTR_PREFIX shift to state 16
-- On ATTR_INCLUDES shift to state 18
-- On ATTR_EQUALS shift to state 20
-- On ATTR_DASHMATCH shift to state 22
-- On attr_operation shift to state 24
## Reductions:
-- On CLOSE_SQUARE reduce production attr_operation ->

State 10:
## Known stack suffix:
## ATTR_SUFFIX
## LR(1) items:
attr_operation -> ATTR_SUFFIX . attr_operand [ CLOSE_SQUARE ]
## Transitions:
-- On TString shift to state 11
-- On IDENT shift to state 12
-- On attr_operand shift to state 13
## Reductions:

State 11:
## Known stack suffix:
## TString
## LR(1) items:
attr_operand -> TString . [ CLOSE_SQUARE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_operand -> TString

State 12:
## Known stack suffix:
## IDENT
## LR(1) items:
attr_operand -> IDENT . [ CLOSE_SQUARE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_operand -> IDENT

State 13:
## Known stack suffix:
## ATTR_SUFFIX attr_operand
## LR(1) items:
attr_operation -> ATTR_SUFFIX attr_operand . [ CLOSE_SQUARE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_operation -> ATTR_SUFFIX attr_operand

State 14:
## Known stack suffix:
## ATTR_SUBSTRING
## LR(1) items:
attr_operation -> ATTR_SUBSTRING . attr_operand [ CLOSE_SQUARE ]
## Transitions:
-- On TString shift to state 11
-- On IDENT shift to state 12
-- On attr_operand shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## ATTR_SUBSTRING attr_operand
## LR(1) items:
attr_operation -> ATTR_SUBSTRING attr_operand . [ CLOSE_SQUARE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_operation -> ATTR_SUBSTRING attr_operand

State 16:
## Known stack suffix:
## ATTR_PREFIX
## LR(1) items:
attr_operation -> ATTR_PREFIX . attr_operand [ CLOSE_SQUARE ]
## Transitions:
-- On TString shift to state 11
-- On IDENT shift to state 12
-- On attr_operand shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## ATTR_PREFIX attr_operand
## LR(1) items:
attr_operation -> ATTR_PREFIX attr_operand . [ CLOSE_SQUARE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_operation -> ATTR_PREFIX attr_operand

State 18:
## Known stack suffix:
## ATTR_INCLUDES
## LR(1) items:
attr_operation -> ATTR_INCLUDES . attr_operand [ CLOSE_SQUARE ]
## Transitions:
-- On TString shift to state 11
-- On IDENT shift to state 12
-- On attr_operand shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## ATTR_INCLUDES attr_operand
## LR(1) items:
attr_operation -> ATTR_INCLUDES attr_operand . [ CLOSE_SQUARE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_operation -> ATTR_INCLUDES attr_operand

State 20:
## Known stack suffix:
## ATTR_EQUALS
## LR(1) items:
attr_operation -> ATTR_EQUALS . attr_operand [ CLOSE_SQUARE ]
## Transitions:
-- On TString shift to state 11
-- On IDENT shift to state 12
-- On attr_operand shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## ATTR_EQUALS attr_operand
## LR(1) items:
attr_operation -> ATTR_EQUALS attr_operand . [ CLOSE_SQUARE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_operation -> ATTR_EQUALS attr_operand

State 22:
## Known stack suffix:
## ATTR_DASHMATCH
## LR(1) items:
attr_operation -> ATTR_DASHMATCH . attr_operand [ CLOSE_SQUARE ]
## Transitions:
-- On TString shift to state 11
-- On IDENT shift to state 12
-- On attr_operand shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## ATTR_DASHMATCH attr_operand
## LR(1) items:
attr_operation -> ATTR_DASHMATCH attr_operand . [ CLOSE_SQUARE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_operation -> ATTR_DASHMATCH attr_operand

State 24:
## Known stack suffix:
## OPEN_SQUARE IDENT attr_operation
## LR(1) items:
qualifier -> OPEN_SQUARE IDENT attr_operation . CLOSE_SQUARE [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
-- On CLOSE_SQUARE shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## OPEN_SQUARE IDENT attr_operation CLOSE_SQUARE
## LR(1) items:
qualifier -> OPEN_SQUARE IDENT attr_operation CLOSE_SQUARE . [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> OPEN_SQUARE IDENT attr_operation CLOSE_SQUARE

State 26:
## Known stack suffix:
## NTH
## LR(1) items:
function_args -> NTH . [ CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_args -> NTH

State 27:
## Known stack suffix:
## IDENT
## LR(1) items:
function_args -> IDENT . [ CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_args -> IDENT

State 28:
## Known stack suffix:
## HASH
## LR(1) items:
qualifier -> HASH . [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> HASH

State 29:
## Known stack suffix:
## DOUBLE_COLON
## LR(1) items:
qualifier -> DOUBLE_COLON . IDENT [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
-- On IDENT shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## DOUBLE_COLON IDENT
## LR(1) items:
qualifier -> DOUBLE_COLON IDENT . [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> DOUBLE_COLON IDENT

State 31:
## Known stack suffix:
## COLON
## LR(1) items:
qualifier -> COLON . IDENT [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
-- On IDENT shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## COLON IDENT
## LR(1) items:
qualifier -> COLON IDENT . [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> COLON IDENT

State 33:
## Known stack suffix:
## qualifier_plus
## LR(1) items:
function_args -> qualifier_plus . [ CLOSE_ROUND ]
qualifier_plus -> qualifier_plus . qualifier [ SEL_FUNC PERIOD OPEN_SQUARE HASH DOUBLE_COLON COLON CLOSE_ROUND ]
## Transitions:
-- On SEL_FUNC shift to state 5
-- On PERIOD shift to state 6
-- On OPEN_SQUARE shift to state 8
-- On HASH shift to state 28
-- On DOUBLE_COLON shift to state 29
-- On COLON shift to state 31
-- On qualifier shift to state 34
## Reductions:
-- On CLOSE_ROUND reduce production function_args -> qualifier_plus

State 34:
## Known stack suffix:
## qualifier_plus qualifier
## LR(1) items:
qualifier_plus -> qualifier_plus qualifier . [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier_plus -> qualifier_plus qualifier

State 35:
## Known stack suffix:
## qualifier
## LR(1) items:
qualifier_plus -> qualifier . [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier_plus -> qualifier

State 36:
## Known stack suffix:
## SEL_FUNC function_args
## LR(1) items:
qualifier -> SEL_FUNC function_args . CLOSE_ROUND [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
-- On CLOSE_ROUND shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## SEL_FUNC function_args CLOSE_ROUND
## LR(1) items:
qualifier -> SEL_FUNC function_args CLOSE_ROUND . [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier -> SEL_FUNC function_args CLOSE_ROUND

State 38:
## Known stack suffix:
## IDENT
## LR(1) items:
element -> IDENT . [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production element -> IDENT

State 39:
## Known stack suffix:
## s_star statement_star EOF
## LR(1) items:
stylesheet -> s_star statement_star EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production stylesheet -> s_star statement_star EOF

State 40:
## Known stack suffix:
## ASTERISK
## LR(1) items:
element -> ASTERISK . [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production element -> ASTERISK

State 41:
## Known stack suffix:
## statement_star statement
## LR(1) items:
statement_star -> statement_star statement . [ SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_star -> statement_star statement

State 42:
## Known stack suffix:
## simple_selector
## LR(1) items:
selector -> simple_selector . combination_star [ OPEN_CURLY COMMA ]
## Transitions:
-- On combination_star shift to state 43
## Default reduction:
-- After reading the next token, reduce production combination_star ->

State 43:
## Known stack suffix:
## simple_selector combination_star
## LR(1) items:
combination_star -> combination_star . combination [ TILDE S PLUS OPEN_CURLY GT COMMA ]
selector -> simple_selector combination_star . [ OPEN_CURLY COMMA ]
## Transitions:
-- On TILDE shift to state 44
-- On S shift to state 45
-- On PLUS shift to state 46
-- On GT shift to state 47
-- On combinator shift to state 48
-- On combination shift to state 54
## Reductions:
-- On OPEN_CURLY reduce production selector -> simple_selector combination_star
-- On COMMA reduce production selector -> simple_selector combination_star

State 44:
## Known stack suffix:
## TILDE
## LR(1) items:
combinator -> TILDE . [ SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH DOUBLE_COLON COLON ASTERISK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production combinator -> TILDE

State 45:
## Known stack suffix:
## S
## LR(1) items:
combinator -> S . [ SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH DOUBLE_COLON COLON ASTERISK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production combinator -> S

State 46:
## Known stack suffix:
## PLUS
## LR(1) items:
combinator -> PLUS . [ SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH DOUBLE_COLON COLON ASTERISK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production combinator -> PLUS

State 47:
## Known stack suffix:
## GT
## LR(1) items:
combinator -> GT . [ SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH DOUBLE_COLON COLON ASTERISK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production combinator -> GT

State 48:
## Known stack suffix:
## combinator
## LR(1) items:
combination -> combinator . simple_selector [ TILDE S PLUS OPEN_CURLY GT COMMA ]
## Transitions:
-- On SEL_FUNC shift to state 5
-- On PERIOD shift to state 6
-- On OPEN_SQUARE shift to state 8
-- On IDENT shift to state 38
-- On HASH shift to state 28
-- On DOUBLE_COLON shift to state 29
-- On COLON shift to state 31
-- On ASTERISK shift to state 40
-- On simple_selector shift to state 49
-- On qualifier_plus shift to state 50
-- On qualifier shift to state 35
-- On element shift to state 51
## Reductions:

State 49:
## Known stack suffix:
## combinator simple_selector
## LR(1) items:
combination -> combinator simple_selector . [ TILDE S PLUS OPEN_CURLY GT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production combination -> combinator simple_selector

State 50:
## Known stack suffix:
## qualifier_plus
## LR(1) items:
qualifier_plus -> qualifier_plus . qualifier [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON ]
simple_selector -> qualifier_plus . [ TILDE S PLUS OPEN_CURLY GT COMMA ]
## Transitions:
-- On SEL_FUNC shift to state 5
-- On PERIOD shift to state 6
-- On OPEN_SQUARE shift to state 8
-- On HASH shift to state 28
-- On DOUBLE_COLON shift to state 29
-- On COLON shift to state 31
-- On qualifier shift to state 34
## Reductions:
-- On TILDE reduce production simple_selector -> qualifier_plus
-- On S reduce production simple_selector -> qualifier_plus
-- On PLUS reduce production simple_selector -> qualifier_plus
-- On OPEN_CURLY reduce production simple_selector -> qualifier_plus
-- On GT reduce production simple_selector -> qualifier_plus
-- On COMMA reduce production simple_selector -> qualifier_plus

State 51:
## Known stack suffix:
## element
## LR(1) items:
simple_selector -> element . qualifier_star [ TILDE S PLUS OPEN_CURLY GT COMMA ]
## Transitions:
-- On qualifier_star shift to state 52
## Default reduction:
-- After reading the next token, reduce production qualifier_star ->

State 52:
## Known stack suffix:
## element qualifier_star
## LR(1) items:
qualifier_star -> qualifier_star . qualifier [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON ]
simple_selector -> element qualifier_star . [ TILDE S PLUS OPEN_CURLY GT COMMA ]
## Transitions:
-- On SEL_FUNC shift to state 5
-- On PERIOD shift to state 6
-- On OPEN_SQUARE shift to state 8
-- On HASH shift to state 28
-- On DOUBLE_COLON shift to state 29
-- On COLON shift to state 31
-- On qualifier shift to state 53
## Reductions:
-- On TILDE reduce production simple_selector -> element qualifier_star
-- On S reduce production simple_selector -> element qualifier_star
-- On PLUS reduce production simple_selector -> element qualifier_star
-- On OPEN_CURLY reduce production simple_selector -> element qualifier_star
-- On GT reduce production simple_selector -> element qualifier_star
-- On COMMA reduce production simple_selector -> element qualifier_star

State 53:
## Known stack suffix:
## qualifier_star qualifier
## LR(1) items:
qualifier_star -> qualifier_star qualifier . [ TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualifier_star -> qualifier_star qualifier

State 54:
## Known stack suffix:
## combination_star combination
## LR(1) items:
combination_star -> combination_star combination . [ TILDE S PLUS OPEN_CURLY GT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production combination_star -> combination_star combination

State 55:
## Known stack suffix:
## selector_separated_nonempty_list_COMMA
## LR(1) items:
selector_list -> selector_separated_nonempty_list_COMMA . [ OPEN_CURLY ]
selector_separated_nonempty_list_COMMA -> selector_separated_nonempty_list_COMMA . COMMA selector [ OPEN_CURLY COMMA ]
## Transitions:
-- On COMMA shift to state 56
## Reductions:
-- On OPEN_CURLY reduce production selector_list -> selector_separated_nonempty_list_COMMA

State 56:
## Known stack suffix:
## selector_separated_nonempty_list_COMMA COMMA
## LR(1) items:
selector_separated_nonempty_list_COMMA -> selector_separated_nonempty_list_COMMA COMMA . selector [ OPEN_CURLY COMMA ]
## Transitions:
-- On SEL_FUNC shift to state 5
-- On PERIOD shift to state 6
-- On OPEN_SQUARE shift to state 8
-- On IDENT shift to state 38
-- On HASH shift to state 28
-- On DOUBLE_COLON shift to state 29
-- On COLON shift to state 31
-- On ASTERISK shift to state 40
-- On simple_selector shift to state 42
-- On selector shift to state 57
-- On qualifier_plus shift to state 50
-- On qualifier shift to state 35
-- On element shift to state 51
## Reductions:

State 57:
## Known stack suffix:
## selector_separated_nonempty_list_COMMA COMMA selector
## LR(1) items:
selector_separated_nonempty_list_COMMA -> selector_separated_nonempty_list_COMMA COMMA selector . [ OPEN_CURLY COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production selector_separated_nonempty_list_COMMA -> selector_separated_nonempty_list_COMMA COMMA selector

State 58:
## Known stack suffix:
## selector_list
## LR(1) items:
rule -> selector_list . declaration_block [ SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK ]
## Transitions:
-- On OPEN_CURLY shift to state 59
-- On declaration_block shift to state 91
## Reductions:

State 59:
## Known stack suffix:
## OPEN_CURLY
## LR(1) items:
declaration_block -> OPEN_CURLY . declaration_plus CLOSE_CURLY [ SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK ]
## Transitions:
-- On IDENT shift to state 60
-- On declaration_plus shift to state 87
-- On declaration shift to state 90
## Reductions:

State 60:
## Known stack suffix:
## IDENT
## LR(1) items:
declaration -> IDENT . COLON expr boption_IMPORTANT SEMICOLON [ IDENT CLOSE_CURLY ]
## Transitions:
-- On COLON shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
declaration -> IDENT COLON . expr boption_IMPORTANT SEMICOLON [ IDENT CLOSE_CURLY ]
## Transitions:
-- On VAR shift to state 62
-- On URI shift to state 63
-- On TString shift to state 66
-- On TERM_FUNC shift to state 67
-- On SLASH shift to state 68
-- On QUANTITY shift to state 69
-- On IDENT shift to state 70
-- On HASH shift to state 71
-- On term_separated_nonempty_list_sopt shift to state 72
-- On term shift to state 76
-- On sentence_separated_nonempty_list_COMMA shift to state 77
-- On sentence shift to state 80
-- On expr shift to state 83
-- On calc shift to state 75
## Reductions:

State 62:
## Known stack suffix:
## VAR
## LR(1) items:
calc -> VAR . [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production calc -> VAR

State 63:
## Known stack suffix:
## URI
## LR(1) items:
term -> URI . TString CLOSE_ROUND [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
-- On TString shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## URI TString
## LR(1) items:
term -> URI TString . CLOSE_ROUND [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
-- On CLOSE_ROUND shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## URI TString CLOSE_ROUND
## LR(1) items:
term -> URI TString CLOSE_ROUND . [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> URI TString CLOSE_ROUND

State 66:
## Known stack suffix:
## TString
## LR(1) items:
term -> TString . [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> TString

State 67:
## Known stack suffix:
## TERM_FUNC
## LR(1) items:
term -> TERM_FUNC . expr CLOSE_ROUND [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
-- On VAR shift to state 62
-- On URI shift to state 63
-- On TString shift to state 66
-- On TERM_FUNC shift to state 67
-- On SLASH shift to state 68
-- On QUANTITY shift to state 69
-- On IDENT shift to state 70
-- On HASH shift to state 71
-- On term_separated_nonempty_list_sopt shift to state 72
-- On term shift to state 76
-- On sentence_separated_nonempty_list_COMMA shift to state 77
-- On sentence shift to state 80
-- On expr shift to state 81
-- On calc shift to state 75
## Reductions:

State 68:
## Known stack suffix:
## SLASH
## LR(1) items:
term -> SLASH . [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> SLASH

State 69:
## Known stack suffix:
## QUANTITY
## LR(1) items:
calc -> QUANTITY . [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production calc -> QUANTITY

State 70:
## Known stack suffix:
## IDENT
## LR(1) items:
term -> IDENT . [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> IDENT

State 71:
## Known stack suffix:
## HASH
## LR(1) items:
term -> HASH . [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> HASH

State 72:
## Known stack suffix:
## term_separated_nonempty_list_sopt
## LR(1) items:
sentence -> term_separated_nonempty_list_sopt . [ SEMICOLON IMPORTANT COMMA CLOSE_ROUND ]
term_separated_nonempty_list_sopt -> term_separated_nonempty_list_sopt . S term [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
-- On S shift to state 73
## Reductions:
-- On SEMICOLON reduce production sentence -> term_separated_nonempty_list_sopt
-- On IMPORTANT reduce production sentence -> term_separated_nonempty_list_sopt
-- On COMMA reduce production sentence -> term_separated_nonempty_list_sopt
-- On CLOSE_ROUND reduce production sentence -> term_separated_nonempty_list_sopt

State 73:
## Known stack suffix:
## term_separated_nonempty_list_sopt S
## LR(1) items:
term_separated_nonempty_list_sopt -> term_separated_nonempty_list_sopt S . term [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
-- On VAR shift to state 62
-- On URI shift to state 63
-- On TString shift to state 66
-- On TERM_FUNC shift to state 67
-- On SLASH shift to state 68
-- On QUANTITY shift to state 69
-- On IDENT shift to state 70
-- On HASH shift to state 71
-- On term shift to state 74
-- On calc shift to state 75
## Reductions:

State 74:
## Known stack suffix:
## term_separated_nonempty_list_sopt S term
## LR(1) items:
term_separated_nonempty_list_sopt -> term_separated_nonempty_list_sopt S term . [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_separated_nonempty_list_sopt -> term_separated_nonempty_list_sopt S term

State 75:
## Known stack suffix:
## calc
## LR(1) items:
term -> calc . [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> calc

State 76:
## Known stack suffix:
## term
## LR(1) items:
term_separated_nonempty_list_sopt -> term . [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_separated_nonempty_list_sopt -> term

State 77:
## Known stack suffix:
## sentence_separated_nonempty_list_COMMA
## LR(1) items:
expr -> sentence_separated_nonempty_list_COMMA . [ SEMICOLON IMPORTANT CLOSE_ROUND ]
sentence_separated_nonempty_list_COMMA -> sentence_separated_nonempty_list_COMMA . COMMA sentence [ SEMICOLON IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
-- On COMMA shift to state 78
## Reductions:
-- On SEMICOLON reduce production expr -> sentence_separated_nonempty_list_COMMA
-- On IMPORTANT reduce production expr -> sentence_separated_nonempty_list_COMMA
-- On CLOSE_ROUND reduce production expr -> sentence_separated_nonempty_list_COMMA

State 78:
## Known stack suffix:
## sentence_separated_nonempty_list_COMMA COMMA
## LR(1) items:
sentence_separated_nonempty_list_COMMA -> sentence_separated_nonempty_list_COMMA COMMA . sentence [ SEMICOLON IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
-- On VAR shift to state 62
-- On URI shift to state 63
-- On TString shift to state 66
-- On TERM_FUNC shift to state 67
-- On SLASH shift to state 68
-- On QUANTITY shift to state 69
-- On IDENT shift to state 70
-- On HASH shift to state 71
-- On term_separated_nonempty_list_sopt shift to state 72
-- On term shift to state 76
-- On sentence shift to state 79
-- On calc shift to state 75
## Reductions:

State 79:
## Known stack suffix:
## sentence_separated_nonempty_list_COMMA COMMA sentence
## LR(1) items:
sentence_separated_nonempty_list_COMMA -> sentence_separated_nonempty_list_COMMA COMMA sentence . [ SEMICOLON IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence_separated_nonempty_list_COMMA -> sentence_separated_nonempty_list_COMMA COMMA sentence

State 80:
## Known stack suffix:
## sentence
## LR(1) items:
sentence_separated_nonempty_list_COMMA -> sentence . [ SEMICOLON IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence_separated_nonempty_list_COMMA -> sentence

State 81:
## Known stack suffix:
## TERM_FUNC expr
## LR(1) items:
term -> TERM_FUNC expr . CLOSE_ROUND [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
-- On CLOSE_ROUND shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## TERM_FUNC expr CLOSE_ROUND
## LR(1) items:
term -> TERM_FUNC expr CLOSE_ROUND . [ SEMICOLON S IMPORTANT COMMA CLOSE_ROUND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> TERM_FUNC expr CLOSE_ROUND

State 83:
## Known stack suffix:
## IDENT COLON expr
## LR(1) items:
declaration -> IDENT COLON expr . boption_IMPORTANT SEMICOLON [ IDENT CLOSE_CURLY ]
## Transitions:
-- On IMPORTANT shift to state 84
-- On boption_IMPORTANT shift to state 85
## Reductions:
-- On SEMICOLON reduce production boption_IMPORTANT ->

State 84:
## Known stack suffix:
## IMPORTANT
## LR(1) items:
boption_IMPORTANT -> IMPORTANT . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boption_IMPORTANT -> IMPORTANT

State 85:
## Known stack suffix:
## IDENT COLON expr boption_IMPORTANT
## LR(1) items:
declaration -> IDENT COLON expr boption_IMPORTANT . SEMICOLON [ IDENT CLOSE_CURLY ]
## Transitions:
-- On SEMICOLON shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## IDENT COLON expr boption_IMPORTANT SEMICOLON
## LR(1) items:
declaration -> IDENT COLON expr boption_IMPORTANT SEMICOLON . [ IDENT CLOSE_CURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> IDENT COLON expr boption_IMPORTANT SEMICOLON

State 87:
## Known stack suffix:
## OPEN_CURLY declaration_plus
## LR(1) items:
declaration_block -> OPEN_CURLY declaration_plus . CLOSE_CURLY [ SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK ]
declaration_plus -> declaration_plus . declaration [ IDENT CLOSE_CURLY ]
## Transitions:
-- On IDENT shift to state 60
-- On CLOSE_CURLY shift to state 88
-- On declaration shift to state 89
## Reductions:

State 88:
## Known stack suffix:
## OPEN_CURLY declaration_plus CLOSE_CURLY
## LR(1) items:
declaration_block -> OPEN_CURLY declaration_plus CLOSE_CURLY . [ SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_block -> OPEN_CURLY declaration_plus CLOSE_CURLY

State 89:
## Known stack suffix:
## declaration_plus declaration
## LR(1) items:
declaration_plus -> declaration_plus declaration . [ IDENT CLOSE_CURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_plus -> declaration_plus declaration

State 90:
## Known stack suffix:
## declaration
## LR(1) items:
declaration_plus -> declaration . [ IDENT CLOSE_CURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_plus -> declaration

State 91:
## Known stack suffix:
## selector_list declaration_block
## LR(1) items:
rule -> selector_list declaration_block . [ SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule -> selector_list declaration_block

State 92:
## Known stack suffix:
## selector
## LR(1) items:
selector_separated_nonempty_list_COMMA -> selector . [ OPEN_CURLY COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production selector_separated_nonempty_list_COMMA -> selector

State 93:
## Known stack suffix:
## rule
## LR(1) items:
statement -> rule . [ SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> rule

