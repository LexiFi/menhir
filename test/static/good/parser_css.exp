File "parser_css.mly", line 44, characters 22-29:
Warning: the token CHARSET is unused.
File "parser_css.mly", line 44, characters 48-56:
Warning: the token FONTFACE is unused.
File "parser_css.mly", line 44, characters 30-36:
Warning: the token IMPORT is unused.
File "parser_css.mly", line 44, characters 37-42:
Warning: the token MEDIA is unused.
File "parser_css.mly", line 50, characters 45-50:
Warning: the token MINUS is unused.
File "parser_css.mly", line 47, characters 22-32:
Warning: the token OPEN_ROUND is unused.
File "parser_css.mly", line 44, characters 43-47:
Warning: the token PAGE is unused.
File "parser_css.mly", line 50, characters 31-39:
Warning: the token QUOTIENT is unused.
File "parser_css.mly", line 35, characters 22-30:
Warning: the token TComment is unused.
File "parser_css.mly", line 69, characters 22-30:
Warning: the token TUnknown is unused.
Grammar has 29 nonterminal symbols, among which 1 start symbols.
Grammar has 43 terminal symbols.
Grammar has 65 productions.
nullable(term_separated_nonempty_list_sopt) = false
nullable(term) = false
nullable(stylesheet) = false
nullable(statement_star) = true
nullable(statement) = false
nullable(simple_selector) = false
nullable(sentence_separated_nonempty_list_COMMA) = false
nullable(sentence) = false
nullable(selector_separated_nonempty_list_COMMA) = false
nullable(selector_list) = false
nullable(selector) = false
nullable(s_star) = true
nullable(rule) = false
nullable(qualifier_star) = true
nullable(qualifier_plus) = false
nullable(qualifier) = false
nullable(function_args) = false
nullable(expr) = false
nullable(element) = false
nullable(declaration_plus) = false
nullable(declaration_block) = false
nullable(declaration) = false
nullable(combinator) = false
nullable(combination_star) = true
nullable(combination) = false
nullable(calc) = false
nullable(boption_IMPORTANT) = true
nullable(attr_operation) = true
nullable(attr_operand) = false
first(term_separated_nonempty_list_sopt) = VAR URI TString TERM_FUNC SLASH QUANTITY IDENT HASH
first(term) = VAR URI TString TERM_FUNC SLASH QUANTITY IDENT HASH
first(stylesheet) = SEL_FUNC S PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK
first(statement_star) = SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH DOUBLE_COLON COLON ASTERISK
first(statement) = SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH DOUBLE_COLON COLON ASTERISK
first(simple_selector) = SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH DOUBLE_COLON COLON ASTERISK
first(sentence_separated_nonempty_list_COMMA) = VAR URI TString TERM_FUNC SLASH QUANTITY IDENT HASH
first(sentence) = VAR URI TString TERM_FUNC SLASH QUANTITY IDENT HASH
first(selector_separated_nonempty_list_COMMA) = SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH DOUBLE_COLON COLON ASTERISK
first(selector_list) = SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH DOUBLE_COLON COLON ASTERISK
first(selector) = SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH DOUBLE_COLON COLON ASTERISK
first(s_star) = S
first(rule) = SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH DOUBLE_COLON COLON ASTERISK
first(qualifier_star) = SEL_FUNC PERIOD OPEN_SQUARE HASH DOUBLE_COLON COLON
first(qualifier_plus) = SEL_FUNC PERIOD OPEN_SQUARE HASH DOUBLE_COLON COLON
first(qualifier) = SEL_FUNC PERIOD OPEN_SQUARE HASH DOUBLE_COLON COLON
first(function_args) = SEL_FUNC PERIOD OPEN_SQUARE NTH IDENT HASH DOUBLE_COLON COLON
first(expr) = VAR URI TString TERM_FUNC SLASH QUANTITY IDENT HASH
first(element) = IDENT ASTERISK
first(declaration_plus) = IDENT
first(declaration_block) = OPEN_CURLY
first(declaration) = IDENT
first(combinator) = TILDE S PLUS GT
first(combination_star) = TILDE S PLUS GT
first(combination) = TILDE S PLUS GT
first(calc) = VAR QUANTITY
first(boption_IMPORTANT) = IMPORTANT
first(attr_operation) = ATTR_SUFFIX ATTR_SUBSTRING ATTR_PREFIX ATTR_INCLUDES ATTR_EQUALS ATTR_DASHMATCH
first(attr_operand) = TString IDENT
minimal(term_separated_nonempty_list_sopt) = (* 1 *) VAR
minimal(term) = (* 1 *) VAR
minimal(stylesheet) = (* 1 *) EOF
minimal(statement_star) = (* 0 *)
minimal(statement) = (* 7 *) IDENT OPEN_CURLY IDENT COLON VAR SEMICOLON CLOSE_CURLY
minimal(simple_selector) = (* 1 *) IDENT
minimal(sentence_separated_nonempty_list_COMMA) = (* 1 *) VAR
minimal(sentence) = (* 1 *) VAR
minimal(selector_separated_nonempty_list_COMMA) = (* 1 *) IDENT
minimal(selector_list) = (* 1 *) IDENT
minimal(selector) = (* 1 *) IDENT
minimal(s_star) = (* 0 *)
minimal(rule) = (* 7 *) IDENT OPEN_CURLY IDENT COLON VAR SEMICOLON CLOSE_CURLY
minimal(qualifier_star) = (* 0 *)
minimal(qualifier_plus) = (* 1 *) HASH
minimal(qualifier) = (* 1 *) HASH
minimal(function_args) = (* 1 *) NTH
minimal(expr) = (* 1 *) VAR
minimal(element) = (* 1 *) IDENT
minimal(declaration_plus) = (* 4 *) IDENT COLON VAR SEMICOLON
minimal(declaration_block) = (* 6 *) OPEN_CURLY IDENT COLON VAR SEMICOLON CLOSE_CURLY
minimal(declaration) = (* 4 *) IDENT COLON VAR SEMICOLON
minimal(combinator) = (* 1 *) S
minimal(combination_star) = (* 0 *)
minimal(combination) = (* 2 *) S IDENT
minimal(calc) = (* 1 *) VAR
minimal(boption_IMPORTANT) = (* 0 *)
minimal(attr_operation) = (* 0 *)
minimal(attr_operand) = (* 1 *) IDENT
maximal(term_separated_nonempty_list_sopt) = infinity
maximal(term) = infinity
maximal(stylesheet) = infinity
maximal(statement_star) = infinity
maximal(statement) = infinity
maximal(simple_selector) = infinity
maximal(sentence_separated_nonempty_list_COMMA) = infinity
maximal(sentence) = infinity
maximal(selector_separated_nonempty_list_COMMA) = infinity
maximal(selector_list) = infinity
maximal(selector) = infinity
maximal(s_star) = infinity
maximal(rule) = infinity
maximal(qualifier_star) = infinity
maximal(qualifier_plus) = infinity
maximal(qualifier) = infinity
maximal(function_args) = infinity
maximal(expr) = infinity
maximal(element) = 1
maximal(declaration_plus) = infinity
maximal(declaration_block) = infinity
maximal(declaration) = infinity
maximal(combinator) = 1
maximal(combination_star) = infinity
maximal(combination) = infinity
maximal(calc) = 1
maximal(boption_IMPORTANT) = 1
maximal(attr_operation) = 2
maximal(attr_operand) = 1
follow(term_separated_nonempty_list_sopt) = SEMICOLON S IMPORTANT COMMA CLOSE_ROUND
follow(term) = SEMICOLON S IMPORTANT COMMA CLOSE_ROUND
follow(stylesheet) = #
follow(statement_star) = SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK
follow(statement) = SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK
follow(simple_selector) = TILDE S PLUS OPEN_CURLY GT COMMA
follow(sentence_separated_nonempty_list_COMMA) = SEMICOLON IMPORTANT COMMA CLOSE_ROUND
follow(sentence) = SEMICOLON IMPORTANT COMMA CLOSE_ROUND
follow(selector_separated_nonempty_list_COMMA) = OPEN_CURLY COMMA
follow(selector_list) = OPEN_CURLY
follow(selector) = OPEN_CURLY COMMA
follow(s_star) = SEL_FUNC S PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK
follow(rule) = SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK
follow(qualifier_star) = TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON
follow(qualifier_plus) = TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND
follow(qualifier) = TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON CLOSE_ROUND
follow(function_args) = CLOSE_ROUND
follow(expr) = SEMICOLON IMPORTANT CLOSE_ROUND
follow(element) = TILDE SEL_FUNC S PLUS PERIOD OPEN_SQUARE OPEN_CURLY HASH GT DOUBLE_COLON COMMA COLON
follow(declaration_plus) = IDENT CLOSE_CURLY
follow(declaration_block) = SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH EOF DOUBLE_COLON COLON ASTERISK
follow(declaration) = IDENT CLOSE_CURLY
follow(combinator) = SEL_FUNC PERIOD OPEN_SQUARE IDENT HASH DOUBLE_COLON COLON ASTERISK
follow(combination_star) = TILDE S PLUS OPEN_CURLY GT COMMA
follow(combination) = TILDE S PLUS OPEN_CURLY GT COMMA
follow(calc) = SEMICOLON S IMPORTANT COMMA CLOSE_ROUND
follow(boption_IMPORTANT) = SEMICOLON
follow(attr_operation) = CLOSE_SQUARE
follow(attr_operand) = CLOSE_SQUARE
Built an LR(0) automaton with 94 states.
The grammar is SLR(1).
The construction mode is pager.
Built an LR(1) automaton with 94 states.
File "parser_css.mly", line 77, characters 0-5:
Warning: the precedence level assigned to ASTERISK is never useful.
File "parser_css.mly", line 76, characters 0-5:
Warning: the precedence level assigned to MINUS is never useful.
File "parser_css.mly", line 76, characters 0-5:
Warning: the precedence level assigned to PLUS is never useful.
File "parser_css.mly", line 77, characters 0-5:
Warning: the precedence level assigned to QUOTIENT is never useful.
56 out of 94 states have a default reduction.
19 out of 94 states are represented.
0 out of 75 symbols keep track of their start position.
0 out of 75 symbols keep track of their end position.
52 out of 66 productions exploit shiftreduce optimization.
0 out of 94 states can peek at an error.
288 functions before inlining, 42 functions after inlining.
