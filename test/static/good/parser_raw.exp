File "parser_raw.mly", line 610, characters 29-36:
Warning: the token COMMENT is unused.
File "parser_raw.mly", line 611, characters 30-39:
Warning: the token DOCSTRING is unused.
File "parser_raw.mly", line 622, characters 7-14:
Warning: the token DOTLESS is unused.
File "parser_raw.mly", line 623, characters 7-15:
Warning: the token DOTTILDE is unused.
File "parser_raw.mly", line 613, characters 7-10:
Warning: the token EOL is unused.
File "parser_raw.mly", line 618, characters 7-18:
Warning: the token FINALLY_LWT is unused.
File "parser_raw.mly", line 619, characters 7-14:
Warning: the token FOR_LWT is unused.
File "parser_raw.mly", line 624, characters 7-17:
Warning: the token GREATERDOT is unused.
File "parser_raw.mly", line 530, characters 7-22:
Warning: the token GREATERRBRACKET is unused.
File "parser_raw.mly", line 625, characters 16-21:
Warning: the token LETOP is unused.
File "parser_raw.mly", line 615, characters 7-14:
Warning: the token LET_LWT is unused.
File "parser_raw.mly", line 617, characters 7-16:
Warning: the token MATCH_LWT is unused.
File "parser_raw.mly", line 616, characters 7-14:
Warning: the token TRY_LWT is unused.
File "parser_raw.mly", line 620, characters 7-16:
Warning: the token WHILE_LWT is unused.
File "parser_raw.mly", line 658, characters 6-17:
Warning: the token prec_escape is unused.
File "parser_raw.mly", line 713, characters 0-15:
Warning: symbol parse_core_type is unreachable from any of the start symbol(s).
File "parser_raw.mly", line 719, characters 0-13:
Warning: symbol parse_pattern is unreachable from any of the start symbol(s).
Grammar has 205 nonterminal symbols, among which 3 start symbols.
Grammar has 129 terminal symbols.
Grammar has 702 productions.
nullable(with_type_binder) = false
nullable(with_constraints) = false
nullable(with_constraint) = false
nullable(virtual_flag) = true
nullable(value_type) = false
nullable(value_description) = false
nullable(value) = false
nullable(val_longident) = false
nullable(val_ident) = false
nullable(typevar_list) = false
nullable(type_variance) = true
nullable(type_variable) = false
nullable(type_parameters) = true
nullable(type_parameter_list) = false
nullable(type_parameter) = false
nullable(type_longident) = false
nullable(type_kind) = true
nullable(type_declarations) = false
nullable(type_declaration) = false
nullable(type_constraint) = false
nullable(toplevel_directive) = false
nullable(tag_field) = false
nullable(subtractive) = false
nullable(structure_tail) = true
nullable(structure_item) = false
nullable(structure) = true
nullable(strict_binding) = false
nullable(str_type_extension) = false
nullable(str_include_statement) = false
nullable(str_extension_constructors) = false
nullable(str_exception_declaration) = false
nullable(single_attr_id) = false
nullable(simple_pattern_not_ident) = false
nullable(simple_pattern) = false
nullable(simple_labeled_expr_list) = false
nullable(simple_expr) = false
nullable(simple_delimited_pattern) = false
nullable(simple_core_type_or_tuple) = false
nullable(simple_core_type2) = false
nullable(simple_core_type) = false
nullable(signed_constant) = false
nullable(signature_item) = false
nullable(signature) = true
nullable(sig_type_extension) = false
nullable(sig_include_statement) = false
nullable(sig_extension_constructors) = false
nullable(sig_exception_declaration) = false
nullable(seq_expr) = false
nullable(row_field_list) = false
nullable(row_field) = false
nullable(record_expr) = false
nullable(rec_module_declarations) = false
nullable(rec_module_declaration) = false
nullable(rec_module_bindings) = false
nullable(rec_module_binding) = false
nullable(rec_flag) = true
nullable(private_virtual_flags) = true
nullable(private_flag) = true
nullable(primitive_declaration_body) = false
nullable(primitive_declaration) = false
nullable(post_item_attributes) = true
nullable(post_item_attribute) = false
nullable(poly_type_no_attr) = false
nullable(poly_type) = false
nullable(payload) = true
nullable(pattern_var) = false
nullable(pattern_semi_list) = false
nullable(pattern_no_exn_comma_list) = false
nullable(pattern_no_exn) = false
nullable(pattern_gen) = false
nullable(pattern_comma_list) = false
nullable(pattern) = false
nullable(parse_expression) = false
nullable(parent_binder) = true
nullable(paren_module_expr) = false
nullable(package_type) = false
nullable(override_flag) = true
nullable(optional_type_variable) = false
nullable(optional_type_parameters) = true
nullable(optional_type_parameter_list) = false
nullable(optional_type_parameter) = false
nullable(opt_type_constraint) = true
nullable(opt_semi) = true
nullable(opt_pattern_type_constraint) = true
nullable(opt_default) = true
nullable(opt_bar) = true
nullable(opt_ampersand) = true
nullable(operator) = false
nullable(open_statement) = false
nullable(nonrec_flag) = true
nullable(name_tag_list) = false
nullable(name_tag) = false
nullable(mutable_flag) = true
nullable(mty_longident) = false
nullable(module_type_declaration_body) = true
nullable(module_type_declaration) = false
nullable(module_type) = false
nullable(module_expr) = false
nullable(module_declaration_body) = false
nullable(module_declaration) = false
nullable(module_binding_body) = false
nullable(module_binding) = false
nullable(module_alias) = false
nullable(mod_longident) = false
nullable(mod_ext_longident) = false
nullable(method_) = false
nullable(meth_list) = false
nullable(match_cases) = false
nullable(match_case) = false
nullable(lident_list) = false
nullable(let_pattern) = false
nullable(let_exception_declaration) = false
nullable(let_bindings) = false
nullable(let_binding_body) = false
nullable(let_binding) = false
nullable(lbl_pattern_list) = false
nullable(lbl_pattern) = false
nullable(lbl_expr_list) = false
nullable(lbl_expr) = false
nullable(labeled_simple_pattern) = false
nullable(labeled_simple_expr) = false
nullable(label_var) = false
nullable(label_longident) = false
nullable(label_let_pattern) = false
nullable(label_ident) = false
nullable(label_expr) = false
nullable(label_declarations) = false
nullable(label_declaration_semi) = false
nullable(label_declaration) = false
nullable(label) = false
nullable(item_extension) = false
nullable(interface) = false
nullable(implementation) = false
nullable(ident) = false
nullable(generalized_constructor_arguments) = true
nullable(functor_args) = false
nullable(functor_arg_name) = false
nullable(functor_arg) = false
nullable(fun_def) = false
nullable(fun_binding) = false
nullable(floating_attribute) = false
nullable(field_semi) = false
nullable(field_expr_list) = false
nullable(field_expr) = false
nullable(field) = false
nullable(extension_constructor_rebind) = false
nullable(extension_constructor_declaration) = false
nullable(extension) = false
nullable(ext_attributes) = true
nullable(expr_semi_list) = false
nullable(expr_comma_list) = false
nullable(expr) = false
nullable(direction_flag) = false
nullable(core_type_no_attr) = false
nullable(core_type_list) = false
nullable(core_type_comma_list) = false
nullable(core_type2) = false
nullable(core_type) = false
nullable(constructor_declarations) = false
nullable(constructor_declaration) = false
nullable(constructor_arguments) = false
nullable(constraints) = true
nullable(constrain_field) = false
nullable(constrain) = false
nullable(constr_longident) = false
nullable(constr_ident) = false
nullable(constant) = false
nullable(clty_longident) = false
nullable(class_type_parameters) = true
nullable(class_type_declarations) = false
nullable(class_type_declaration) = false
nullable(class_type) = false
nullable(class_structure) = true
nullable(class_simple_expr) = false
nullable(class_signature) = false
nullable(class_sig_fields) = true
nullable(class_sig_field) = false
nullable(class_sig_body) = true
nullable(class_self_type) = true
nullable(class_self_pattern) = true
nullable(class_longident) = false
nullable(class_fun_def) = false
nullable(class_fun_binding) = false
nullable(class_fields) = true
nullable(class_field) = false
nullable(class_expr) = false
nullable(class_descriptions) = false
nullable(class_description) = false
nullable(class_declarations) = false
nullable(class_declaration) = false
nullable(bar_extension_constructor_rebind) = false
nullable(bar_extension_constructor_declaration) = false
nullable(bar_constructor_declaration) = false
nullable(attributes) = true
nullable(attribute) = false
nullable(attr_id) = false
nullable(and_type_declaration) = false
nullable(and_module_declaration) = false
nullable(and_module_binding) = false
nullable(and_let_binding) = false
nullable(and_class_type_declaration) = false
nullable(and_class_description) = false
nullable(and_class_declaration) = false
nullable(amper_type_list) = false
nullable(additive) = false
first(with_type_binder) = EQUAL
first(with_constraints) = TYPE MODULE
first(with_constraint) = TYPE MODULE
first(virtual_flag) = VIRTUAL
first(value_type) = VIRTUAL MUTABLE LIDENT
first(value_description) = VAL
first(value) = VIRTUAL MUTABLE LIDENT LBRACKETAT BANG
first(val_longident) = UIDENT LPAREN LIDENT
first(val_ident) = LPAREN LIDENT
first(typevar_list) = QUOTE
first(type_variance) = PLUS MINUS
first(type_variable) = QUOTE
first(type_parameters) = QUOTE PLUS MINUS LPAREN
first(type_parameter_list) = QUOTE PLUS MINUS
first(type_parameter) = QUOTE PLUS MINUS
first(type_longident) = UIDENT LIDENT
first(type_kind) = EQUAL
first(type_declarations) = TYPE
first(type_declaration) = TYPE
first(type_constraint) = COLONGREATER COLON
first(toplevel_directive) = SHARP
first(tag_field) = BACKQUOTE
first(subtractive) = MINUSDOT MINUS
first(structure_tail) = VAL TYPE SEMISEMI OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION CLASS
first(structure_item) = VAL TYPE OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION CLASS
first(structure) = WHILE VAL UIDENT TYPE TRY TRUE STRING SHARP SEMISEMI QUESTIONQUESTION PREFIXOP PLUSDOT PLUS OPEN OBJECT NEW MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION CLASS CHAR BEGIN BANG BACKQUOTE ASSERT
first(strict_binding) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT FLOAT FALSE EQUAL CHAR BACKQUOTE
first(str_type_extension) = TYPE
first(str_include_statement) = INCLUDE
first(str_extension_constructors) = UIDENT TRUE LPAREN LBRACKET FALSE BAR
first(str_exception_declaration) = EXCEPTION
first(single_attr_id) = WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO THEN STRUCT SIG REC PRIVATE OR OPEN OF OBJECT NONREC NEW MUTABLE MODULE METHOD MATCH LIDENT LET LAZY INITIALIZER INHERIT INCLUDE IN IF FUNCTOR FUNCTION FUN FOR FALSE EXTERNAL EXCEPTION END ELSE DOWNTO DONE DO CONSTRAINT CLASS BEGIN ASSERT AS AND
first(simple_pattern_not_ident) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(simple_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(simple_labeled_expr_list) = UIDENT TRUE TILDE STRING QUESTIONQUESTION QUESTION PREFIXOP OPTLABEL NEW LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT FLOAT FALSE CHAR BEGIN BANG BACKQUOTE
first(simple_expr) = UIDENT TRUE STRING QUESTIONQUESTION PREFIXOP NEW LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BEGIN BANG BACKQUOTE
first(simple_delimited_pattern) = LBRACKETBAR LBRACKET LBRACE
first(simple_core_type_or_tuple) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(simple_core_type2) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(simple_core_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(signed_constant) = STRING PLUS MINUS INT FLOAT CHAR
first(signature_item) = VAL TYPE OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION CLASS
first(signature) = VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION CLASS
first(sig_type_extension) = TYPE
first(sig_include_statement) = INCLUDE
first(sig_extension_constructors) = UIDENT TRUE LPAREN LBRACKET FALSE BAR
first(sig_exception_declaration) = EXCEPTION
first(seq_expr) = WHILE UIDENT TRY TRUE STRING QUESTIONQUESTION PREFIXOP PLUSDOT PLUS OBJECT NEW MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
first(row_field_list) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET BACKQUOTE
first(row_field) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET BACKQUOTE
first(record_expr) = UIDENT TRUE STRING QUESTIONQUESTION PREFIXOP NEW LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BEGIN BANG BACKQUOTE
first(rec_module_declarations) = MODULE
first(rec_module_declaration) = MODULE
first(rec_module_bindings) = MODULE
first(rec_module_binding) = MODULE
first(rec_flag) = REC
first(private_virtual_flags) = VIRTUAL PRIVATE
first(private_flag) = PRIVATE
first(primitive_declaration_body) = STRING
first(primitive_declaration) = EXTERNAL
first(post_item_attributes) = LBRACKETATAT
first(post_item_attribute) = LBRACKETATAT
first(poly_type_no_attr) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(poly_type) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(payload) = WHILE VAL UIDENT TYPE TRY TRUE STRING SHARP SEMISEMI QUESTIONQUESTION QUESTION PREFIXOP PLUSDOT PLUS OPEN OBJECT NEW MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION COLON CLASS CHAR BEGIN BANG BACKQUOTE ASSERT
first(pattern_var) = UNDERSCORE LIDENT
first(pattern_semi_list) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(pattern_no_exn_comma_list) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE CHAR BACKQUOTE
first(pattern_no_exn) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE CHAR BACKQUOTE
first(pattern_gen) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE CHAR BACKQUOTE
first(pattern_comma_list) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(parse_expression) = WHILE UIDENT TRY TRUE STRING QUESTIONQUESTION PREFIXOP PLUSDOT PLUS OBJECT NEW MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
first(parent_binder) = AS
first(paren_module_expr) = LPAREN
first(package_type) = UIDENT SIG MODULE LPAREN LIDENT LBRACKETPERCENT FUNCTOR
first(override_flag) = BANG
first(optional_type_variable) = UNDERSCORE QUOTE
first(optional_type_parameters) = UNDERSCORE QUOTE PLUS MINUS LPAREN
first(optional_type_parameter_list) = UNDERSCORE QUOTE PLUS MINUS
first(optional_type_parameter) = UNDERSCORE QUOTE PLUS MINUS
first(opt_type_constraint) = COLONGREATER COLON
first(opt_semi) = SEMI
first(opt_pattern_type_constraint) = COLON
first(opt_default) = EQUAL
first(opt_bar) = BAR
first(opt_ampersand) = AMPERSAND
first(operator) = STAR SHARPOP PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COLONEQUAL BARBAR BANG AMPERSAND AMPERAMPER
first(open_statement) = OPEN
first(nonrec_flag) = NONREC
first(name_tag_list) = BACKQUOTE
first(name_tag) = BACKQUOTE
first(mutable_flag) = MUTABLE
first(mty_longident) = UIDENT LIDENT
first(module_type_declaration_body) = EQUAL
first(module_type_declaration) = MODULE
first(module_type) = UIDENT SIG MODULE LPAREN LIDENT LBRACKETPERCENT FUNCTOR
first(module_expr) = UIDENT STRUCT LPAREN LBRACKETPERCENT FUNCTOR
first(module_declaration_body) = LPAREN COLON
first(module_declaration) = MODULE
first(module_binding_body) = LPAREN EQUAL COLON
first(module_binding) = MODULE
first(module_alias) = MODULE
first(mod_longident) = UIDENT
first(mod_ext_longident) = UIDENT
first(method_) = VIRTUAL PRIVATE LIDENT LBRACKETAT BANG
first(meth_list) = LIDENT DOTDOT
first(match_cases) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(match_case) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(lident_list) = LIDENT
first(let_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(let_exception_declaration) = UIDENT TRUE LPAREN LBRACKET FALSE
first(let_bindings) = LET
first(let_binding_body) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE CHAR BACKQUOTE
first(let_binding) = LET
first(lbl_pattern_list) = UIDENT LIDENT
first(lbl_pattern) = UIDENT LIDENT
first(lbl_expr_list) = UIDENT LIDENT
first(lbl_expr) = UIDENT LIDENT
first(labeled_simple_pattern) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT FLOAT FALSE CHAR BACKQUOTE
first(labeled_simple_expr) = UIDENT TRUE TILDE STRING QUESTIONQUESTION QUESTION PREFIXOP OPTLABEL NEW LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT FLOAT FALSE CHAR BEGIN BANG BACKQUOTE
first(label_var) = LIDENT
first(label_longident) = UIDENT LIDENT
first(label_let_pattern) = LIDENT
first(label_ident) = LIDENT
first(label_expr) = TILDE QUESTION OPTLABEL LABEL
first(label_declarations) = MUTABLE LIDENT
first(label_declaration_semi) = MUTABLE LIDENT
first(label_declaration) = MUTABLE LIDENT
first(label) = LIDENT
first(item_extension) = LBRACKETPERCENTPERCENT
first(interface) = VAL TYPE SEMISEMI OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF CLASS
first(implementation) = WHILE VAL UIDENT TYPE TRY TRUE STRING SHARP SEMISEMI QUESTIONQUESTION PREFIXOP PLUSDOT PLUS OPEN OBJECT NEW MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BANG BACKQUOTE ASSERT
first(ident) = UIDENT LIDENT
first(generalized_constructor_arguments) = OF COLON
first(functor_args) = LPAREN
first(functor_arg_name) = UNDERSCORE UIDENT
first(functor_arg) = LPAREN
first(fun_def) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT FLOAT FALSE COLON CHAR BACKQUOTE
first(fun_binding) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE
first(floating_attribute) = LBRACKETATATAT
first(field_semi) = LIDENT
first(field_expr_list) = LIDENT
first(field_expr) = LIDENT
first(field) = LIDENT
first(extension_constructor_rebind) = UIDENT TRUE LPAREN LBRACKET FALSE
first(extension_constructor_declaration) = UIDENT TRUE LPAREN LBRACKET FALSE
first(extension) = LBRACKETPERCENT
first(ext_attributes) = PERCENT LBRACKETAT
first(expr_semi_list) = WHILE UIDENT TRY TRUE STRING QUESTIONQUESTION PREFIXOP PLUSDOT PLUS OBJECT NEW MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
first(expr_comma_list) = WHILE UIDENT TRY TRUE STRING QUESTIONQUESTION PREFIXOP PLUSDOT PLUS OBJECT NEW MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
first(expr) = WHILE UIDENT TRY TRUE STRING QUESTIONQUESTION PREFIXOP PLUSDOT PLUS OBJECT NEW MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
first(direction_flag) = TO DOWNTO
first(core_type_no_attr) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(core_type_list) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(core_type_comma_list) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(core_type2) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(core_type) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(constructor_declarations) = UIDENT TRUE LPAREN LBRACKET FALSE BAR
first(constructor_declaration) = UIDENT TRUE LPAREN LBRACKET FALSE
first(constructor_arguments) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(constraints) = CONSTRAINT
first(constrain_field) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(constrain) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(constr_longident) = UIDENT TRUE LPAREN LBRACKET FALSE
first(constr_ident) = UIDENT TRUE LPAREN LBRACKET FALSE
first(constant) = STRING INT FLOAT CHAR
first(clty_longident) = UIDENT LIDENT
first(class_type_parameters) = LBRACKET
first(class_type_declarations) = CLASS
first(class_type_declaration) = CLASS
first(class_type) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL OBJECT LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(class_structure) = VAL METHOD LPAREN LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT CONSTRAINT
first(class_simple_expr) = UIDENT OBJECT LPAREN LIDENT LBRACKET
first(class_signature) = UIDENT OBJECT LIDENT LBRACKETPERCENT LBRACKET
first(class_sig_fields) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT CONSTRAINT
first(class_sig_field) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT CONSTRAINT
first(class_sig_body) = VAL METHOD LPAREN LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT CONSTRAINT
first(class_self_type) = LPAREN
first(class_self_pattern) = LPAREN
first(class_longident) = UIDENT LIDENT
first(class_fun_def) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT FLOAT FALSE CHAR BACKQUOTE
first(class_fun_binding) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT FLOAT FALSE EQUAL COLON CHAR BACKQUOTE
first(class_fields) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT CONSTRAINT
first(class_field) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT CONSTRAINT
first(class_expr) = UIDENT OBJECT LPAREN LIDENT LET LBRACKETPERCENT LBRACKET FUN
first(class_descriptions) = CLASS
first(class_description) = CLASS
first(class_declarations) = CLASS
first(class_declaration) = CLASS
first(bar_extension_constructor_rebind) = BAR
first(bar_extension_constructor_declaration) = BAR
first(bar_constructor_declaration) = BAR
first(attributes) = LBRACKETAT
first(attribute) = LBRACKETAT
first(attr_id) = WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO THEN STRUCT SIG REC PRIVATE OR OPEN OF OBJECT NONREC NEW MUTABLE MODULE METHOD MATCH LIDENT LET LAZY INITIALIZER INHERIT INCLUDE IN IF FUNCTOR FUNCTION FUN FOR FALSE EXTERNAL EXCEPTION END ELSE DOWNTO DONE DO CONSTRAINT CLASS BEGIN ASSERT AS AND
first(and_type_declaration) = AND
first(and_module_declaration) = AND
first(and_module_binding) = AND
first(and_let_binding) = AND
first(and_class_type_declaration) = AND
first(and_class_description) = AND
first(and_class_declaration) = AND
first(amper_type_list) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
first(additive) = PLUSDOT PLUS
minimal(with_type_binder) = (* 1 *) EQUAL
minimal(with_constraints) = (* 4 *) TYPE LIDENT EQUAL UNDERSCORE
minimal(with_constraint) = (* 4 *) TYPE LIDENT EQUAL UNDERSCORE
minimal(virtual_flag) = (* 0 *)
minimal(value_type) = (* 3 *) LIDENT COLON UNDERSCORE
minimal(value_description) = (* 4 *) VAL LIDENT COLON UNDERSCORE
minimal(value) = (* 3 *) LIDENT EQUAL LIDENT
minimal(val_longident) = (* 1 *) LIDENT
minimal(val_ident) = (* 1 *) LIDENT
minimal(typevar_list) = (* 2 *) QUOTE UIDENT
minimal(type_variance) = (* 0 *)
minimal(type_variable) = (* 2 *) QUOTE UIDENT
minimal(type_parameters) = (* 0 *)
minimal(type_parameter_list) = (* 2 *) QUOTE UIDENT
minimal(type_parameter) = (* 2 *) QUOTE UIDENT
minimal(type_longident) = (* 1 *) LIDENT
minimal(type_kind) = (* 0 *)
minimal(type_declarations) = (* 2 *) TYPE LIDENT
minimal(type_declaration) = (* 2 *) TYPE LIDENT
minimal(type_constraint) = (* 2 *) COLON UNDERSCORE
minimal(toplevel_directive) = (* 2 *) SHARP UIDENT
minimal(tag_field) = (* 2 *) BACKQUOTE UIDENT
minimal(subtractive) = (* 1 *) MINUS
minimal(structure_tail) = (* 0 *)
minimal(structure_item) = (* 2 *) TYPE LIDENT
minimal(structure) = (* 0 *)
minimal(strict_binding) = (* 2 *) EQUAL LIDENT
minimal(str_type_extension) = (* 4 *) TYPE LIDENT PLUSEQ UIDENT
minimal(str_include_statement) = (* 2 *) INCLUDE UIDENT
minimal(str_extension_constructors) = (* 1 *) UIDENT
minimal(str_exception_declaration) = (* 2 *) EXCEPTION UIDENT
minimal(single_attr_id) = (* 1 *) LIDENT
minimal(simple_pattern_not_ident) = (* 1 *) UNDERSCORE
minimal(simple_pattern) = (* 1 *) LIDENT
minimal(simple_labeled_expr_list) = (* 1 *) LIDENT
minimal(simple_expr) = (* 1 *) LIDENT
minimal(simple_delimited_pattern) = (* 2 *) LBRACKETBAR BARRBRACKET
minimal(simple_core_type_or_tuple) = (* 1 *) UNDERSCORE
minimal(simple_core_type2) = (* 1 *) UNDERSCORE
minimal(simple_core_type) = (* 1 *) UNDERSCORE
minimal(signed_constant) = (* 1 *) INT
minimal(signature_item) = (* 2 *) TYPE LIDENT
minimal(signature) = (* 0 *)
minimal(sig_type_extension) = (* 4 *) TYPE LIDENT PLUSEQ UIDENT
minimal(sig_include_statement) = (* 2 *) INCLUDE UIDENT
minimal(sig_extension_constructors) = (* 1 *) UIDENT
minimal(sig_exception_declaration) = (* 2 *) EXCEPTION UIDENT
minimal(seq_expr) = (* 1 *) LIDENT
minimal(row_field_list) = (* 1 *) UNDERSCORE
minimal(row_field) = (* 1 *) UNDERSCORE
minimal(record_expr) = (* 1 *) LIDENT
minimal(rec_module_declarations) = (* 5 *) MODULE REC UIDENT COLON UIDENT
minimal(rec_module_declaration) = (* 5 *) MODULE REC UIDENT COLON UIDENT
minimal(rec_module_bindings) = (* 5 *) MODULE REC UIDENT EQUAL UIDENT
minimal(rec_module_binding) = (* 5 *) MODULE REC UIDENT EQUAL UIDENT
minimal(rec_flag) = (* 0 *)
minimal(private_virtual_flags) = (* 0 *)
minimal(private_flag) = (* 0 *)
minimal(primitive_declaration_body) = (* 1 *) STRING
minimal(primitive_declaration) = (* 6 *) EXTERNAL LIDENT COLON UNDERSCORE EQUAL STRING
minimal(post_item_attributes) = (* 0 *)
minimal(post_item_attribute) = (* 3 *) LBRACKETATAT LIDENT RBRACKET
minimal(poly_type_no_attr) = (* 1 *) UNDERSCORE
minimal(poly_type) = (* 1 *) UNDERSCORE
minimal(payload) = (* 0 *)
minimal(pattern_var) = (* 1 *) LIDENT
minimal(pattern_semi_list) = (* 1 *) LIDENT
minimal(pattern_no_exn_comma_list) = (* 3 *) LIDENT COMMA LIDENT
minimal(pattern_no_exn) = (* 1 *) LIDENT
minimal(pattern_gen) = (* 1 *) LIDENT
minimal(pattern_comma_list) = (* 3 *) LIDENT COMMA LIDENT
minimal(pattern) = (* 1 *) LIDENT
minimal(parse_expression) = (* 2 *) LIDENT EOF
minimal(parent_binder) = (* 0 *)
minimal(paren_module_expr) = (* 3 *) LPAREN UIDENT RPAREN
minimal(package_type) = (* 1 *) UIDENT
minimal(override_flag) = (* 0 *)
minimal(optional_type_variable) = (* 1 *) UNDERSCORE
minimal(optional_type_parameters) = (* 0 *)
minimal(optional_type_parameter_list) = (* 1 *) UNDERSCORE
minimal(optional_type_parameter) = (* 1 *) UNDERSCORE
minimal(opt_type_constraint) = (* 0 *)
minimal(opt_semi) = (* 0 *)
minimal(opt_pattern_type_constraint) = (* 0 *)
minimal(opt_default) = (* 0 *)
minimal(opt_bar) = (* 0 *)
minimal(opt_ampersand) = (* 0 *)
minimal(operator) = (* 1 *) PREFIXOP
minimal(open_statement) = (* 2 *) OPEN UIDENT
minimal(nonrec_flag) = (* 0 *)
minimal(name_tag_list) = (* 2 *) BACKQUOTE UIDENT
minimal(name_tag) = (* 2 *) BACKQUOTE UIDENT
minimal(mutable_flag) = (* 0 *)
minimal(mty_longident) = (* 1 *) UIDENT
minimal(module_type_declaration_body) = (* 0 *)
minimal(module_type_declaration) = (* 3 *) MODULE TYPE UIDENT
minimal(module_type) = (* 1 *) UIDENT
minimal(module_expr) = (* 1 *) UIDENT
minimal(module_declaration_body) = (* 2 *) COLON UIDENT
minimal(module_declaration) = (* 4 *) MODULE UIDENT COLON UIDENT
minimal(module_binding_body) = (* 2 *) EQUAL UIDENT
minimal(module_binding) = (* 4 *) MODULE UIDENT EQUAL UIDENT
minimal(module_alias) = (* 4 *) MODULE UIDENT EQUAL UIDENT
minimal(mod_longident) = (* 1 *) UIDENT
minimal(mod_ext_longident) = (* 1 *) UIDENT
minimal(method_) = (* 3 *) LIDENT EQUAL LIDENT
minimal(meth_list) = (* 1 *) DOTDOT
minimal(match_cases) = (* 3 *) LIDENT MINUSGREATER DOT
minimal(match_case) = (* 3 *) LIDENT MINUSGREATER DOT
minimal(lident_list) = (* 1 *) LIDENT
minimal(let_pattern) = (* 1 *) LIDENT
minimal(let_exception_declaration) = (* 1 *) UIDENT
minimal(let_bindings) = (* 4 *) LET LIDENT EQUAL LIDENT
minimal(let_binding_body) = (* 3 *) LIDENT EQUAL LIDENT
minimal(let_binding) = (* 4 *) LET LIDENT EQUAL LIDENT
minimal(lbl_pattern_list) = (* 1 *) LIDENT
minimal(lbl_pattern) = (* 1 *) LIDENT
minimal(lbl_expr_list) = (* 1 *) LIDENT
minimal(lbl_expr) = (* 1 *) LIDENT
minimal(labeled_simple_pattern) = (* 1 *) LIDENT
minimal(labeled_simple_expr) = (* 1 *) LIDENT
minimal(label_var) = (* 1 *) LIDENT
minimal(label_longident) = (* 1 *) LIDENT
minimal(label_let_pattern) = (* 1 *) LIDENT
minimal(label_ident) = (* 1 *) LIDENT
minimal(label_expr) = (* 2 *) LABEL LIDENT
minimal(label_declarations) = (* 3 *) LIDENT COLON UNDERSCORE
minimal(label_declaration_semi) = (* 4 *) LIDENT COLON UNDERSCORE SEMI
minimal(label_declaration) = (* 3 *) LIDENT COLON UNDERSCORE
minimal(label) = (* 1 *) LIDENT
minimal(item_extension) = (* 3 *) LBRACKETPERCENTPERCENT LIDENT RBRACKET
minimal(interface) = (* 1 *) EOF
minimal(implementation) = (* 1 *) EOF
minimal(ident) = (* 1 *) UIDENT
minimal(generalized_constructor_arguments) = (* 0 *)
minimal(functor_args) = (* 2 *) LPAREN RPAREN
minimal(functor_arg_name) = (* 1 *) UIDENT
minimal(functor_arg) = (* 2 *) LPAREN RPAREN
minimal(fun_def) = (* 2 *) MINUSGREATER LIDENT
minimal(fun_binding) = (* 2 *) EQUAL LIDENT
minimal(floating_attribute) = (* 3 *) LBRACKETATATAT LIDENT RBRACKET
minimal(field_semi) = (* 4 *) LIDENT COLON UNDERSCORE SEMI
minimal(field_expr_list) = (* 1 *) LIDENT
minimal(field_expr) = (* 1 *) LIDENT
minimal(field) = (* 3 *) LIDENT COLON UNDERSCORE
minimal(extension_constructor_rebind) = (* 3 *) UIDENT EQUAL UIDENT
minimal(extension_constructor_declaration) = (* 1 *) UIDENT
minimal(extension) = (* 3 *) LBRACKETPERCENT LIDENT RBRACKET
minimal(ext_attributes) = (* 0 *)
minimal(expr_semi_list) = (* 1 *) LIDENT
minimal(expr_comma_list) = (* 3 *) LIDENT COMMA LIDENT
minimal(expr) = (* 1 *) LIDENT
minimal(direction_flag) = (* 1 *) TO
minimal(core_type_no_attr) = (* 1 *) UNDERSCORE
minimal(core_type_list) = (* 1 *) UNDERSCORE
minimal(core_type_comma_list) = (* 1 *) UNDERSCORE
minimal(core_type2) = (* 1 *) UNDERSCORE
minimal(core_type) = (* 1 *) UNDERSCORE
minimal(constructor_declarations) = (* 1 *) UIDENT
minimal(constructor_declaration) = (* 1 *) UIDENT
minimal(constructor_arguments) = (* 1 *) UNDERSCORE
minimal(constraints) = (* 0 *)
minimal(constrain_field) = (* 3 *) UNDERSCORE EQUAL UNDERSCORE
minimal(constrain) = (* 3 *) UNDERSCORE EQUAL UNDERSCORE
minimal(constr_longident) = (* 1 *) UIDENT
minimal(constr_ident) = (* 1 *) UIDENT
minimal(constant) = (* 1 *) INT
minimal(clty_longident) = (* 1 *) LIDENT
minimal(class_type_parameters) = (* 0 *)
minimal(class_type_declarations) = (* 5 *) CLASS TYPE LIDENT EQUAL LIDENT
minimal(class_type_declaration) = (* 5 *) CLASS TYPE LIDENT EQUAL LIDENT
minimal(class_type) = (* 1 *) LIDENT
minimal(class_structure) = (* 0 *)
minimal(class_simple_expr) = (* 1 *) LIDENT
minimal(class_signature) = (* 1 *) LIDENT
minimal(class_sig_fields) = (* 0 *)
minimal(class_sig_field) = (* 2 *) INHERIT LIDENT
minimal(class_sig_body) = (* 0 *)
minimal(class_self_type) = (* 0 *)
minimal(class_self_pattern) = (* 0 *)
minimal(class_longident) = (* 1 *) LIDENT
minimal(class_fun_def) = (* 3 *) LIDENT MINUSGREATER LIDENT
minimal(class_fun_binding) = (* 2 *) EQUAL LIDENT
minimal(class_fields) = (* 0 *)
minimal(class_field) = (* 2 *) INHERIT LIDENT
minimal(class_expr) = (* 1 *) LIDENT
minimal(class_descriptions) = (* 4 *) CLASS LIDENT COLON LIDENT
minimal(class_description) = (* 4 *) CLASS LIDENT COLON LIDENT
minimal(class_declarations) = (* 4 *) CLASS LIDENT EQUAL LIDENT
minimal(class_declaration) = (* 4 *) CLASS LIDENT EQUAL LIDENT
minimal(bar_extension_constructor_rebind) = (* 4 *) BAR UIDENT EQUAL UIDENT
minimal(bar_extension_constructor_declaration) = (* 2 *) BAR UIDENT
minimal(bar_constructor_declaration) = (* 2 *) BAR UIDENT
minimal(attributes) = (* 0 *)
minimal(attribute) = (* 3 *) LBRACKETAT LIDENT RBRACKET
minimal(attr_id) = (* 1 *) LIDENT
minimal(and_type_declaration) = (* 2 *) AND LIDENT
minimal(and_module_declaration) = (* 4 *) AND UIDENT COLON UIDENT
minimal(and_module_binding) = (* 4 *) AND UIDENT EQUAL UIDENT
minimal(and_let_binding) = (* 4 *) AND LIDENT EQUAL LIDENT
minimal(and_class_type_declaration) = (* 4 *) AND LIDENT EQUAL LIDENT
minimal(and_class_description) = (* 4 *) AND LIDENT COLON LIDENT
minimal(and_class_declaration) = (* 4 *) AND LIDENT EQUAL LIDENT
minimal(amper_type_list) = (* 1 *) UNDERSCORE
minimal(additive) = (* 1 *) PLUS
follow(with_type_binder) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
follow(with_constraints) = WITH VAL TYPE SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END COLONGREATER CLASS AND
follow(with_constraint) = WITH VAL TYPE SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END COLONGREATER CLASS AND
follow(virtual_flag) = LIDENT LBRACKET
follow(value_type) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INHERIT END CONSTRAINT
follow(value_description) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(value) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT END CONSTRAINT
follow(val_longident) = WITH WHILE VAL UIDENT TYPE TRY TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN OBJECT NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD MATCH LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERRBRACE GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE ASSERT AS AND AMPERSAND AMPERAMPER
follow(val_ident) = WITH WHILE WHEN VAL UNDERSCORE UIDENT TYPE TRY TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN OBJECT NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD MATCH LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERRBRACE GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE ASSERT AS AND AMPERSAND AMPERAMPER
follow(typevar_list) = QUOTE DOT
follow(type_variance) = UNDERSCORE QUOTE
follow(type_variable) = UIDENT RPAREN RBRACKET LIDENT COMMA
follow(type_parameters) = UIDENT LIDENT
follow(type_parameter_list) = RPAREN RBRACKET COMMA
follow(type_parameter) = UIDENT RPAREN RBRACKET LIDENT COMMA
follow(type_longident) = WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUS OPTLABEL OPEN MODULE MINUSGREATER MINUS METHOD LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACE LABEL INT INITIALIZER INHERIT INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER COLONCOLON COLON CLASS CHAR BARRBRACKET BAR BACKQUOTE AS AND AMPERSAND
follow(type_kind) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS AND
follow(type_declarations) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(type_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(type_constraint) = SEMI RPAREN RBRACE EQUAL
follow(toplevel_directive) = WHILE VAL UIDENT TYPE TRY TRUE STRING SHARP SEMISEMI RBRACKET QUESTIONQUESTION PREFIXOP PLUSDOT PLUS OPEN OBJECT NEW MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END CLASS CHAR BEGIN BANG BACKQUOTE ASSERT
follow(tag_field) = RBRACKET GREATER BAR
follow(subtractive) = WHILE UIDENT TRY TRUE STRING QUESTIONQUESTION PREFIXOP PLUSDOT PLUS OBJECT NEW MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
follow(structure_tail) = RBRACKET EOF END
follow(structure_item) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(structure) = RBRACKET EOF END
follow(strict_binding) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS AND
follow(str_type_extension) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(str_include_statement) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(str_extension_constructors) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS BAR
follow(str_exception_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(single_attr_id) = WHILE VIRTUAL VAL UNDERSCORE UIDENT TYPE TRY TRUE TILDE STRUCT STRING SIG SHARP SEMISEMI REC RBRACKET QUOTE QUESTIONQUESTION QUESTION PREFIXOP PLUSDOT PLUS OPTLABEL OPEN OBJECT NONREC NEW MODULE MINUSDOT MINUS METHOD MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT INITIALIZER INHERIT INCLUDE IF FUNCTOR FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION END DOT CONSTRAINT COLON CLASS CHAR BEGIN BAR BANG BACKQUOTE ASSERT
follow(simple_pattern_not_ident) = WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PLUS OPTLABEL MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LABEL INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(simple_pattern) = WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PLUS OPTLABEL MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LABEL INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(simple_labeled_expr_list) = WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(simple_expr) = WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(simple_delimited_pattern) = WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PLUS OPTLABEL MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LABEL INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(simple_core_type_or_tuple) = WITH VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(simple_core_type2) = WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(simple_core_type) = WITH VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(signed_constant) = WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PLUS OPTLABEL MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LABEL INT FLOAT FALSE EQUAL DOTDOT COMMA COLONGREATER COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(signature_item) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(signature) = RBRACKET EOF END
follow(sig_type_extension) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(sig_include_statement) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(sig_extension_constructors) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS BAR
follow(sig_exception_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(seq_expr) = WITH VAL TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUSEQ PLUSDOT PLUS PERCENT OR OPEN MODULE MINUSGREATER MINUSDOT MINUS METHOD LET LESS LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(row_field_list) = RBRACKET GREATER BAR
follow(row_field) = RBRACKET GREATER BAR
follow(record_expr) = RBRACE
follow(rec_module_declarations) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(rec_module_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(rec_module_bindings) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(rec_module_binding) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(rec_flag) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE CHAR BACKQUOTE
follow(private_virtual_flags) = LIDENT
follow(private_flag) = UIDENT TRUE LPAREN LIDENT LBRACKET LBRACE FALSE BAR
follow(primitive_declaration_body) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(primitive_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(post_item_attributes) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS AND
follow(post_item_attribute) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS AND
follow(poly_type_no_attr) = SEMI RBRACE LBRACKETAT GREATER
follow(poly_type) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT EQUAL END CONSTRAINT
follow(payload) = RBRACKET
follow(pattern_var) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE
follow(pattern_semi_list) = SEMI RBRACKET BARRBRACKET
follow(pattern_no_exn_comma_list) = LBRACKETAT EQUAL COMMA COLONCOLON BAR AS
follow(pattern_no_exn) = LBRACKETAT EQUAL COMMA COLONCOLON BAR AS
follow(pattern_gen) = WHEN SEMI RPAREN RBRACKET RBRACE MINUSGREATER LBRACKETAT EQUAL COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(pattern_comma_list) = WHEN SEMI RPAREN RBRACKET RBRACE MINUSGREATER LBRACKETAT EQUAL COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(pattern) = WHEN SEMI RPAREN RBRACKET RBRACE MINUSGREATER LBRACKETAT EQUAL COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(parse_expression) = #
follow(parent_binder) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT END CONSTRAINT
follow(paren_module_expr) = WITH VAL TYPE SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LPAREN LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE IN EXTERNAL EXCEPTION EQUAL EOF END COLONGREATER COLON CLASS AND
follow(package_type) = RPAREN COLONGREATER
follow(override_flag) = VIRTUAL UIDENT PRIVATE PERCENT OBJECT MUTABLE LPAREN LIDENT LET LBRACKETPERCENT LBRACKETAT LBRACKET FUN
follow(optional_type_variable) = UIDENT RPAREN LIDENT COMMA
follow(optional_type_parameters) = UIDENT LIDENT
follow(optional_type_parameter_list) = RPAREN COMMA
follow(optional_type_parameter) = UIDENT RPAREN LIDENT COMMA
follow(opt_type_constraint) = SEMI RBRACE EQUAL
follow(opt_semi) = RBRACKET RBRACE GREATERRBRACE BARRBRACKET
follow(opt_pattern_type_constraint) = SEMI RBRACE EQUAL
follow(opt_default) = RPAREN
follow(opt_bar) = UNDERSCORE UIDENT TRUE STRING SHARP QUOTE PLUS MINUS LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
follow(opt_ampersand) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET
follow(operator) = RPAREN
follow(open_statement) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(nonrec_flag) = UNDERSCORE UIDENT QUOTE PLUS MINUS LPAREN LIDENT
follow(name_tag_list) = RBRACKET BACKQUOTE
follow(name_tag) = WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN OF NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(mutable_flag) = LIDENT
follow(mty_longident) = WITH VAL TYPE SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END COLONGREATER CLASS AND
follow(module_type_declaration_body) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(module_type_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(module_type) = WITH VAL TYPE SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END COLONGREATER CLASS AND
follow(module_expr) = WITH VAL TYPE SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LPAREN LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE IN EXTERNAL EXCEPTION EQUAL EOF END COLONGREATER COLON CLASS AND
follow(module_declaration_body) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(module_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(module_binding_body) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE IN EXTERNAL EXCEPTION EOF END CLASS AND
follow(module_binding) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(module_alias) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(mod_longident) = WITH WHILE WHEN VAL UNDERSCORE UIDENT TYPE TRY TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN OBJECT NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD MATCH LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERRBRACE GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE ASSERT AS AND AMPERSAND AMPERAMPER
follow(mod_ext_longident) = WITH VAL TYPE SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LPAREN LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END DOT COLONGREATER CLASS AND
follow(method_) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT END CONSTRAINT
follow(meth_list) = GREATER
follow(match_cases) = WITH VAL TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUSEQ PLUSDOT PLUS PERCENT OR OPEN MODULE MINUSGREATER MINUSDOT MINUS METHOD LET LESS LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(match_case) = WITH VAL TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUSEQ PLUSDOT PLUS PERCENT OR OPEN MODULE MINUSGREATER MINUSDOT MINUS METHOD LET LESS LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(lident_list) = RPAREN DOT
follow(let_pattern) = RPAREN EQUAL
follow(let_exception_declaration) = IN
follow(let_bindings) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE IN EXTERNAL EXCEPTION EOF END CLASS AND
follow(let_binding_body) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE IN EXTERNAL EXCEPTION EOF END CLASS AND
follow(let_binding) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE IN EXTERNAL EXCEPTION EOF END CLASS AND
follow(lbl_pattern_list) = RBRACE
follow(lbl_pattern) = SEMI RBRACE
follow(lbl_expr_list) = RBRACE
follow(lbl_expr) = SEMI RBRACE
follow(labeled_simple_pattern) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION PLUS OPTLABEL MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE
follow(labeled_simple_expr) = WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_var) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION PLUS OPTLABEL MINUSGREATER MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LABEL INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE
follow(label_longident) = WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESSMINUS LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_let_pattern) = RPAREN EQUAL
follow(label_ident) = WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_expr) = WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_declarations) = RBRACE
follow(label_declaration_semi) = RBRACE MUTABLE LIDENT
follow(label_declaration) = RBRACE
follow(label) = WITH VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESSMINUS LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(item_extension) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS
follow(interface) = #
follow(implementation) = #
follow(ident) = WITH WHILE WHEN VAL UNDERSCORE UIDENT TYPE TRY TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUOTE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN OF OBJECT NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD MATCH LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERRBRACE GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE ASSERT AS AND AMPERSAND AMPERAMPER
follow(generalized_constructor_arguments) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE IN EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS BAR AND
follow(functor_args) = MINUSGREATER LPAREN
follow(functor_arg_name) = COLON
follow(functor_arg) = MINUSGREATER LPAREN EQUAL COLON
follow(fun_def) = WITH VAL TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUSEQ PLUSDOT PLUS PERCENT OR OPEN MODULE MINUSGREATER MINUSDOT MINUS METHOD LET LESS LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(fun_binding) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS AND
follow(floating_attribute) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS
follow(field_semi) = LIDENT GREATER DOTDOT
follow(field_expr_list) = GREATERRBRACE
follow(field_expr) = SEMI GREATERRBRACE
follow(field) = GREATER
follow(extension_constructor_rebind) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS BAR
follow(extension_constructor_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS BAR
follow(extension) = WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(ext_attributes) = WHILE VIRTUAL VAL UNDERSCORE UIDENT TRY TRUE TILDE STRUCT STRING SIG SHARP REC QUOTE QUESTIONQUESTION QUESTION PREFIXOP PLUSDOT PLUS OPTLABEL OBJECT NONREC NEW MODULE MINUSDOT MINUS METHOD MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT INITIALIZER INHERIT IF FUNCTOR FUNCTION FUN FOR FLOAT FALSE EXCEPTION END CONSTRAINT CHAR BEGIN BAR BANG BACKQUOTE ASSERT
follow(expr_semi_list) = SEMI RBRACKET BARRBRACKET
follow(expr_comma_list) = WITH VAL TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUSEQ PLUSDOT PLUS PERCENT OR OPEN MODULE MINUSGREATER MINUSDOT MINUS METHOD LET LESS LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(expr) = WITH VAL TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUSEQ PLUSDOT PLUS PERCENT OR OPEN MODULE MINUSGREATER MINUSDOT MINUS METHOD LET LESS LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(direction_flag) = WHILE UIDENT TRY TRUE STRING QUESTIONQUESTION PREFIXOP PLUSDOT PLUS OBJECT NEW MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
follow(core_type_no_attr) = WITH VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AND AMPERSAND
follow(core_type_list) = WITH VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(core_type_comma_list) = RPAREN RBRACKET COMMA
follow(core_type2) = WITH VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(core_type) = WITH VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AND
follow(constructor_declarations) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS BAR AND
follow(constructor_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS BAR AND
follow(constructor_arguments) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE MINUSGREATER LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE IN EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS BAR AND
follow(constraints) = WITH VAL TYPE SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COLONGREATER CLASS AND
follow(constrain_field) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INITIALIZER INHERIT END CONSTRAINT
follow(constrain) = WITH VAL TYPE SEMISEMI RPAREN RBRACKET OPEN MODULE MINUSGREATER LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COLONGREATER CLASS AND
follow(constr_longident) = WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(constr_ident) = VAL TYPE SEMISEMI RBRACKET OPEN OF MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INCLUDE IN EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COLON CLASS BAR AND
follow(constant) = WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOTDOT DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(clty_longident) = VAL TYPE SEMISEMI RPAREN RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND
follow(class_type_parameters) = LIDENT
follow(class_type_declarations) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_type_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_type) = VAL TYPE SEMISEMI RPAREN RBRACKET OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CLASS AND
follow(class_structure) = END
follow(class_simple_expr) = VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN RBRACKET QUESTIONQUESTION QUESTION PREFIXOP OPTLABEL OPEN NEW MODULE METHOD LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF END CONSTRAINT COLON CLASS CHAR BEGIN BANG BACKQUOTE AS AND
follow(class_signature) = VAL TYPE SEMISEMI RPAREN RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND
follow(class_sig_fields) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT END CONSTRAINT
follow(class_sig_field) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT END CONSTRAINT
follow(class_sig_body) = END
follow(class_self_type) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT END CONSTRAINT
follow(class_self_pattern) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT END CONSTRAINT
follow(class_longident) = WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARPOP SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTIONQUESTION QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN NEW MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(class_fun_def) = VAL TYPE SEMISEMI RPAREN RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT COLON CLASS AS AND
follow(class_fun_binding) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_fields) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT END CONSTRAINT
follow(class_field) = VAL METHOD LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT END CONSTRAINT
follow(class_expr) = VAL TYPE SEMISEMI RPAREN RBRACKET OPEN MODULE METHOD LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT LBRACKETAT INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT COLON CLASS AS AND
follow(class_descriptions) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_description) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_declarations) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(bar_extension_constructor_rebind) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS BAR
follow(bar_extension_constructor_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS BAR
follow(bar_constructor_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT LBRACKETATAT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS BAR AND
follow(attributes) = WHILE VIRTUAL VAL UNDERSCORE UIDENT TYPE TRY TRUE TILDE STRUCT STRING SIG SHARP SEMISEMI SEMI REC RBRACKET RBRACE QUOTE QUESTIONQUESTION QUESTION PRIVATE PREFIXOP PLUSDOT PLUS OPTLABEL OPEN OBJECT NONREC NEW MUTABLE MODULE MINUSDOT MINUS METHOD MATCH LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT INITIALIZER INHERIT INCLUDE IN IF GREATER FUNCTOR FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DOTDOT CONSTRAINT CLASS CHAR BEGIN BAR BANG BACKQUOTE ASSERT AND
follow(attribute) = WITH WHILE WHEN VIRTUAL VAL UNDERSCORE UIDENT TYPE TRY TRUE TO TILDE THEN STRUCT STRING STAR SIG SHARP SEMISEMI SEMI RPAREN REC RBRACKET RBRACE QUOTE QUESTIONQUESTION QUESTION PRIVATE PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTLABEL OPEN OBJECT NONREC NEW MUTABLE MODULE MINUSGREATER MINUSDOT MINUS METHOD MATCH LPAREN LIDENT LET LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKETATATAT LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERRBRACE GREATER FUNCTOR FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOTDOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANG BACKQUOTE ASSERT AS AND AMPERSAND AMPERAMPER
follow(attr_id) = WHILE VIRTUAL VAL UNDERSCORE UIDENT TYPE TRY TRUE TILDE STRUCT STRING SIG SHARP SEMISEMI REC RBRACKET QUOTE QUESTIONQUESTION QUESTION PREFIXOP PLUSDOT PLUS OPTLABEL OPEN OBJECT NONREC NEW MODULE MINUSDOT MINUS METHOD MATCH LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETBAR LBRACKETATATAT LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY LABEL INT INITIALIZER INHERIT INCLUDE IF FUNCTOR FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BAR BANG BACKQUOTE ASSERT
follow(and_type_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(and_module_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(and_module_binding) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(and_let_binding) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE IN EXTERNAL EXCEPTION EOF END CLASS AND
follow(and_class_type_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(and_class_description) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(and_class_declaration) = VAL TYPE SEMISEMI RBRACKET OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(amper_type_list) = RBRACKET LBRACKETAT GREATER BAR AMPERSAND
follow(additive) = WHILE UIDENT TRY TRUE STRING QUESTIONQUESTION PREFIXOP PLUSDOT PLUS OBJECT NEW MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BANG BACKQUOTE ASSERT
Built an LR(0) automaton with 1500 states.
The grammar is not SLR(1) -- 101 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 1500 states.
936 shift/reduce conflicts were silently solved.
File "parser_raw.mly", line 665, characters 0-9:
Warning: the precedence level assigned to DOTLESS is never useful.
File "parser_raw.mly", line 665, characters 0-9:
Warning: the precedence level assigned to DOTTILDE is never useful.
File "parser_raw.mly", line 632, characters 0-9:
Warning: the precedence level assigned to FINALLY_LWT is never useful.
File "parser_raw.mly", line 665, characters 0-9:
Warning: the precedence level assigned to GREATERDOT is never useful.
File "parser_raw.mly", line 650, characters 0-9:
Warning: the precedence level assigned to LBRACKETATAT is never useful.
File "parser_raw.mly", line 665, characters 0-9:
Warning: the precedence level assigned to LBRACKETPERCENTPERCENT is never useful.
File "parser_raw.mly", line 629, characters 0-9:
Warning: the precedence level assigned to LETOP is never useful.
File "parser_raw.mly", line 629, characters 0-9:
Warning: the precedence level assigned to LET_LWT is never useful.
File "parser_raw.mly", line 659, characters 0-9:
Warning: the precedence level assigned to below_SHARP is never useful.
File "parser_raw.mly", line 658, characters 0-5:
Warning: the precedence level assigned to prec_escape is never useful.
File "parser_raw.mly", line 1348, characters 22-33:
Warning: this %prec declaration is never useful.
File "parser_raw.mly", line 1375, characters 46-57:
Warning: this %prec declaration is never useful.
File "parser_raw.mly", line 1377, characters 31-42:
Warning: this %prec declaration is never useful.
File "parser_raw.mly", line 1448, characters 44-55:
Warning: this %prec declaration is never useful.
File "parser_raw.mly", line 1450, characters 42-53:
Warning: this %prec declaration is never useful.
File "parser_raw.mly", line 1594, characters 28-39:
Warning: this %prec declaration is never useful.
File "parser_raw.mly", line 1600, characters 31-42:
Warning: this %prec declaration is never useful.
File "parser_raw.mly", line 1588, characters 22-33:
Warning: this %prec declaration is never useful.
File "parser_raw.mly", line 963, characters 66-76:
Warning: this %prec declaration is never useful.
File "parser_raw.mly", line 2230, characters 28-39:
Warning: this %prec declaration is never useful.
File "parser_raw.mly", line 2232, characters 45-56:
Warning: this %prec declaration is never useful.
525 out of 1500 states have a default reduction.
749 out of 1500 states are represented.
198 out of 339 symbols keep track of their start position.
242 out of 339 symbols keep track of their end position.
320 out of 705 productions exploit shiftreduce optimization.
0 out of 1500 states can peek at an error.
3918 functions before inlining, 546 functions after inlining.
