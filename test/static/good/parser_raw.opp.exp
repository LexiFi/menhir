File "parser_raw.mly", line 610, characters 29-36:
Warning: the token COMMENT is unused.
File "parser_raw.mly", line 611, characters 30-39:
Warning: the token DOCSTRING is unused.
File "parser_raw.mly", line 622, characters 7-14:
Warning: the token DOTLESS is unused.
File "parser_raw.mly", line 623, characters 7-15:
Warning: the token DOTTILDE is unused.
File "parser_raw.mly", line 613, characters 7-10:
Warning: the token EOL is unused.
File "parser_raw.mly", line 618, characters 7-18:
Warning: the token FINALLY_LWT is unused.
File "parser_raw.mly", line 619, characters 7-14:
Warning: the token FOR_LWT is unused.
File "parser_raw.mly", line 624, characters 7-17:
Warning: the token GREATERDOT is unused.
File "parser_raw.mly", line 530, characters 7-22:
Warning: the token GREATERRBRACKET is unused.
File "parser_raw.mly", line 625, characters 16-21:
Warning: the token LETOP is unused.
File "parser_raw.mly", line 615, characters 7-14:
Warning: the token LET_LWT is unused.
File "parser_raw.mly", line 617, characters 7-16:
Warning: the token MATCH_LWT is unused.
File "parser_raw.mly", line 616, characters 7-14:
Warning: the token TRY_LWT is unused.
File "parser_raw.mly", line 620, characters 7-16:
Warning: the token WHILE_LWT is unused.
File "parser_raw.mly", line 658, characters 6-17:
Warning: the token prec_escape is unused.
File "parser_raw.mly", line 713, characters 0-15:
Warning: symbol parse_core_type is unreachable from any of the start symbol(s).
File "parser_raw.mly", line 719, characters 0-13:
Warning: symbol parse_pattern is unreachable from any of the start symbol(s).
%{
open Location
open Asttypes
open Longident
open Parsetree
open Ast_helper
open Docstrings
open Docstrings.WithMenhir
open Msupport

let mkloc = Location.mkloc
let mknoloc = Location.mknoloc

let mktyp ~loc d = Typ.mk ~loc d
let mkpat ~loc d = Pat.mk ~loc d
let mkexp ~loc d = Exp.mk ~loc d
let mkmty ?attrs ~loc d = Mty.mk ?attrs ~loc d
let mksig ~loc d = Sig.mk ~loc d
let mkmod ?attrs ~loc d = Mod.mk ?attrs ~loc d
let mkstr ~loc d = Str.mk ~loc d
let mkclass ?attrs ~loc d = Cl.mk ?attrs ~loc d
let mkcty ?attrs ~loc d = Cty.mk ~loc ?attrs d
let mkctf ~loc ?attrs ?docs d =
  Ctf.mk ~loc ?attrs ?docs d
let mkcf ~loc ?attrs ?docs d =
  Cf.mk ~loc ?attrs ?docs d

(* for now silently turn positions into locations *)
let rhs_loc pos = pos

let mkrhs rhs pos = mkloc rhs (rhs_loc pos)

let reloc_pat ~loc x = { x with ppat_loc = loc };;
let reloc_exp ~loc x = { x with pexp_loc = loc };;

let mkoperator name pos =
  let loc = rhs_loc pos in
  Exp.mk ~loc (Pexp_ident(mkloc (Lident name) loc))

let mkpatvar name pos =
  Pat.mk ~loc:(rhs_loc pos) (Ppat_var (mkrhs name pos))

(*
  Ghost expressions and patterns:
  expressions and patterns that do not appear explicitly in the
  source file they have the loc_ghost flag set to true.
  Then the profiler will not try to instrument them and the
  -annot option will not try to display their type.

  Every grammar rule that generates an element with a location must
  make at most one non-ghost element, the topmost one.

  How to tell whether your location must be ghost:
  A location corresponds to a range of characters in the source file.
  If the location contains a piece of code that is syntactically
  valid (according to the documentation), and corresponds to the
  AST node, then the location must be real; in all other cases,
  it must be ghost.
*)
let ghexp ~loc d = Exp.mk ~loc:{ loc with Location.loc_ghost = true } d
let ghpat ~loc d = Pat.mk ~loc:{ loc with Location.loc_ghost = true } d
let ghtyp ~loc d = Typ.mk ~loc:{ loc with Location.loc_ghost = true } d
let ghloc ~loc d = { txt = d; loc = { loc with Location.loc_ghost = true } }
let ghstr ~loc d = Str.mk ~loc:{ loc with Location.loc_ghost = true } d
let ghsig ~loc d = Sig.mk ~loc:{ loc with Location.loc_ghost = true } d

let ghunit ~loc () =
  ghexp ~loc (Pexp_construct (mknoloc (Lident "()"), None))

let mkinfix ~loc ~oploc arg1 name arg2 =
  mkexp ~loc (Pexp_apply(mkoperator name oploc, [Nolabel, arg1; Nolabel, arg2]))

let neg_string f =
  if String.length f > 0 && f.[0] = '-'
  then String.sub f 1 (String.length f - 1)
  else "-" ^ f

let mkuminus ~loc ~oploc name arg =
  let mkexp = mkexp ~loc in
  match name, arg.pexp_desc with
  | "-", Pexp_constant(Pconst_integer (n,m)) ->
      mkexp(Pexp_constant(Pconst_integer(neg_string n,m)))
  | ("-" | "-."), Pexp_constant(Pconst_float (f, m)) ->
      mkexp(Pexp_constant(Pconst_float(neg_string f, m)))
  | _ ->
      mkexp(Pexp_apply(mkoperator ("~" ^ name) oploc, [Nolabel, arg]))

let mkuplus ~loc ~oploc name arg =
  let mkexp = mkexp ~loc in
  let desc = arg.pexp_desc in
  match name, desc with
  | "+", Pexp_constant(Pconst_integer _)
  | ("+" | "+."), Pexp_constant(Pconst_float _) -> mkexp desc
  | _ ->
      mkexp(Pexp_apply(mkoperator ("~" ^ name) oploc, [Nolabel, arg]))

let mkexp_cons consloc args loc =
  Exp.mk ~loc (Pexp_construct(mkloc (Lident "::") consloc, Some args))

let mkpat_cons consloc args loc =
  Pat.mk ~loc (Ppat_construct(mkloc (Lident "::") consloc, Some args))

let rec mktailexp nilloc = function
    [] ->
      let loc = { nilloc with loc_ghost = true } in
      let nil = { txt = Lident "[]"; loc = loc } in
      Exp.mk ~loc (Pexp_construct (nil, None))
  | e1 :: el ->
      let exp_el = mktailexp nilloc el in
      let loc = {loc_start = e1.pexp_loc.loc_start;
               loc_end = exp_el.pexp_loc.loc_end;
               loc_ghost = true}
      in
      let arg = Exp.mk ~loc (Pexp_tuple [e1; exp_el]) in
      mkexp_cons {loc with loc_ghost = true} arg loc

let rec mktailpat nilloc = function
    [] ->
      let loc = { nilloc with loc_ghost = true } in
      let nil = { txt = Lident "[]"; loc = loc } in
      Pat.mk ~loc (Ppat_construct (nil, None))
  | p1 :: pl ->
      let pat_pl = mktailpat nilloc pl in
      let loc = {loc_start = p1.ppat_loc.loc_start;
               loc_end = pat_pl.ppat_loc.loc_end;
               loc_ghost = true}
      in
      let arg = Pat.mk ~loc (Ppat_tuple [p1; pat_pl]) in
      mkpat_cons {loc with loc_ghost = true} arg loc

let mkstrexp e attrs =
  { pstr_desc = Pstr_eval (e, attrs); pstr_loc = e.pexp_loc }

let mkexp_constraint ~loc e (t1, t2) =
  let ghexp = ghexp ~loc in
  match t1, t2 with
  | Some t, None -> ghexp(Pexp_constraint(e, t))
  | _, Some t -> ghexp(Pexp_coerce(e, t1, t))
  | None, None -> assert false

let mkexp_opt_constraint ~loc e = function
  | None -> e
  | Some constraint_ -> mkexp_constraint ~loc e constraint_

let mkpat_opt_constraint ~loc p = function
  | None -> p
  | Some typ -> mkpat ~loc (Ppat_constraint(p, typ))

let array_function ~loc str name =
  ghloc ~loc (Ldot(Lident str, (if !Clflags.fast then "unsafe_" ^ name else name)))

let syntax_error loc =
  raise_error (Syntaxerr.Error(Syntaxerr.Other loc))

let unclosed opening_name opening_num closing_name closing_num =
  raise_error (Syntaxerr.Error(Syntaxerr.Unclosed(rhs_loc opening_num, opening_name,
                                           rhs_loc closing_num, closing_name)))

let expecting pos nonterm =
    raise_error Syntaxerr.(Error(Expecting(rhs_loc pos, nonterm)))

let not_expecting pos nonterm =
    raise_error Syntaxerr.(Error(Not_expecting(rhs_loc pos, nonterm)))

let bigarray_function ~loc str name =
  ghloc ~loc (Ldot(Ldot(Lident "Bigarray", str), name))

let bigarray_untuplify = function
    { pexp_desc = Pexp_tuple explist; pexp_loc = _ } -> explist
  | exp -> [exp]

let bigarray_get ~loc arr arg =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let get = if !Clflags.fast then "unsafe_get" else "get" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" get)),
                       [Nolabel, arr; Nolabel, c1]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2; Nolabel, c3]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "get")),
                       [Nolabel, arr; Nolabel, ghexp(Pexp_array coords)]))

let bigarray_set ~loc arr arg newval =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let set = if !Clflags.fast then "unsafe_set" else "set" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" set)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, newval]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, newval]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, c3; Nolabel, newval]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "set")),
                       [Nolabel, arr;
                        Nolabel, ghexp(Pexp_array coords);
                        Nolabel, newval]))

let lapply p1 p2 =
  if not !Clflags.applicative_functors then
    raise_error (Syntaxerr.Error(Syntaxerr.Applicative_path (symbol_rloc())));
  Lapply(p1, p2)

let exp_of_label ~loc lbl pos =
  mkexp ~loc (Pexp_ident(mkrhs (Lident(Longident.last lbl)) pos))

let pat_of_label ~loc lbl pos =
  mkpat ~loc (Ppat_var (mkrhs (Longident.last lbl) pos))

let mk_newtypes ~loc newtypes exp =
  let mkexp = mkexp ~loc in
  List.fold_right (fun newtype exp -> mkexp (Pexp_newtype (newtype, exp)))
    newtypes exp

let wrap_type_annotation ~loc newtypes core_type body =
  let mkexp, ghtyp = mkexp ~loc, ghtyp ~loc in
  let mk_newtypes = mk_newtypes ~loc in
  let exp = mkexp(Pexp_constraint(body,core_type)) in
  let exp = mk_newtypes newtypes exp in
  (exp, ghtyp(Ptyp_poly(newtypes,Typ.varify_constructors newtypes core_type)))

let wrap_exp_attrs ~loc body (ext, attrs) =
  let ghexp = ghexp ~loc in
  (* todo: keep exact location for the entire attribute *)
  let body = {body with pexp_attributes = attrs @ body.pexp_attributes} in
  match ext with
  | None -> body
  | Some id -> ghexp(Pexp_extension (id, PStr [mkstrexp body []]))

let mkexp_attrs ~loc d attrs =
  wrap_exp_attrs ~loc (mkexp ~loc d) attrs

let wrap_typ_attrs ~loc typ (ext, attrs) =
  let ghtyp = ghtyp ~loc in
  (* todo: keep exact location for the entire attribute *)
  let typ = {typ with ptyp_attributes = attrs @ typ.ptyp_attributes} in
  match ext with
  | None -> typ
  | Some id -> ghtyp(Ptyp_extension (id, PTyp typ))

let mktyp_attrs ~loc d attrs =
  wrap_typ_attrs ~loc (mktyp ~loc d) attrs

let wrap_pat_attrs ~loc pat (ext, attrs) =
  let ghpat = ghpat ~loc in
  (* todo: keep exact location for the entire attribute *)
  let pat = {pat with ppat_attributes = attrs @ pat.ppat_attributes} in
  match ext with
  | None -> pat
  | Some id -> ghpat (Ppat_extension (id, PPat (pat, None)))

let mkpat_attrs ~loc d attrs =
  wrap_pat_attrs ~loc (mkpat ~loc d) attrs

let wrap_class_attrs body attrs =
  {body with pcl_attributes = attrs @ body.pcl_attributes}
let wrap_mod_attrs body attrs =
  {body with pmod_attributes = attrs @ body.pmod_attributes}
let wrap_mty_attrs body attrs =
  {body with pmty_attributes = attrs @ body.pmty_attributes}

let wrap_str_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghstr ~loc (Pstr_extension ((id, PStr [body]), []))

let mkstr_ext ~loc d ext =
  wrap_str_ext ~loc (mkstr ~loc d) ext

let wrap_sig_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghsig ~loc (Psig_extension ((id, PSig [body]), []))

let mksig_ext ~loc d ext =
  wrap_sig_ext ~loc (mksig ~loc d) ext

let text_str pos = Str.text (rhs_text pos)
let text_sig pos = Sig.text (rhs_text pos)
let text_cstr pos = Cf.text (rhs_text pos)
let text_csig pos = Ctf.text (rhs_text pos)
let text_def pos = [Ptop_def (Str.text (rhs_text pos))]

let extra_text startpos endpos text items =
  let pre_extras = rhs_pre_extra_text startpos in
  let post_extras = rhs_post_extra_text endpos in
    text pre_extras @ items @ text post_extras

let extra_str p1 p2 items = extra_text p1 p2 Str.text items
let extra_sig p1 p2 items = extra_text p1 p2 Sig.text items
let extra_cstr p1 p2 items = extra_text p1 p2 Cf.text items
let extra_csig p1 p2 items = extra_text p1 p2 Ctf.text items
let extra_def p1 p2 items =
  extra_text p1 p2 (fun txt -> [Ptop_def (Str.text txt)]) items

let extra_rhs_core_type ct pos =
  let docs = rhs_info pos in
  { ct with ptyp_attributes = add_info_attrs docs ct.ptyp_attributes }

let mklb first ~loc (p, e) attrs =
  { lb_pattern = p;
    lb_expression = e;
    lb_attributes = attrs;
    lb_docs = symbol_docs_lazy loc.loc_start loc.loc_end;
    lb_text = if first then empty_text_lazy
              else symbol_text_lazy loc.loc_start;
    lb_loc = loc; }

let mklbs ~loc ext rf lb =
  { lbs_bindings = [lb];
    lbs_rec = rf;
    lbs_extension = ext ;
    lbs_loc = loc; }

let addlb lbs lb =
  { lbs with lbs_bindings = lb :: lbs.lbs_bindings }

let val_of_let_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))

let expr_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
      (lbs.lbs_extension, [])

let class_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    if lbs.lbs_extension <> None then
      raise_error Syntaxerr.(Error(Not_expecting(lbs.lbs_loc, "extension")));
    mkclass ~loc (Pcl_let (lbs.lbs_rec, List.rev bindings, body))


(* Alternatively, we could keep the generic module type in the Parsetree
   and extract the package type during type-checking. In that case,
   the assertions below should be turned into explicit checks. *)
let package_type_of_module_type pmty =
  let err loc s =
    raise_error (Syntaxerr.Error (Syntaxerr.Invalid_package_type (loc, s)))
  in
  let rec map_cstr = function
    | [] -> []
    | Pwith_type (lid, ptyp) :: xs ->
        let loc = ptyp.ptype_loc in
        if ptyp.ptype_params <> [] then
          err loc "parametrized types are not supported";
        if ptyp.ptype_cstrs <> [] then
          err loc "constrained types are not supported";
        if ptyp.ptype_private <> Public then
          err loc "private types are not supported";

        (* restrictions below are checked by the 'with_constraint' rule *)
        assert (ptyp.ptype_kind = Ptype_abstract);
        assert (ptyp.ptype_attributes = []);
        let ty =
          match ptyp.ptype_manifest with
          | Some ty -> ty
          | None -> assert false
        in
        (lid, ty) :: map_cstr xs
    | _ :: xs ->
        err pmty.pmty_loc "only 'with type t =' constraints are supported";
        map_cstr xs
  in
  match pmty with
  | {pmty_desc = Pmty_ident lid} -> (lid, [])
  | {pmty_desc = Pmty_with({pmty_desc = Pmty_ident lid}, cstrs)} ->
      (lid, map_cstr cstrs)
  | _ ->
      err pmty.pmty_loc
        "only module type identifier and 'with type' constraints are supported";
      (mknoloc (Lident "_"), [])

let make_loc startpos endpos = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = false;
}

let merloc startpos ?endpos x =
  let endpos = match endpos with
    | None -> x.pexp_loc.Location.loc_end
    | Some endpos -> endpos
  in
  let str = mkloc "merlin.loc" (make_loc startpos endpos) in
  { x with pexp_attributes = (str , PStr []) :: x.pexp_attributes }

let val_of_lwt_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))

let expr_of_lwt_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
      lbs.lbs_bindings
  in
  Fake.app Fake.Lwt.in_lwt
    (mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
       (lbs.lbs_extension, []))

%}
%start implementation
%start interface
%start parse_expression
%token AMPERAMPER [@symbol "&&"]
%token AMPERSAND [@symbol "&"]
%token AND [@symbol "and"]
%token AS [@symbol "as"]
%token ASSERT [@symbol "assert"]
%token BACKQUOTE [@symbol "`"]
%token BANG [@symbol "!"]
%token BAR [@symbol "|"]
%token BARBAR [@symbol "||"]
%token BARRBRACKET [@symbol "|]"]
%token BEGIN [@symbol "begin"]
%token <char> CHAR [@cost 2] [@recovery '_']
%token CLASS [@symbol "class"]
%token COLON [@symbol ":"]
%token COLONCOLON [@symbol "::"]
%token COLONEQUAL [@symbol ":="]
%token COLONGREATER [@symbol ":>"]
%token COMMA [@symbol ","]
%token <string * Location.t> COMMENT [@cost 2] [@recovery ("", Location.none)]
%token CONSTRAINT [@symbol "constraint"]
%token DO [@symbol "do"]
%token <Docstrings.docstring> DOCSTRING
%token DONE [@symbol "done"]
%token DOT [@symbol "."]
%token DOTDOT [@symbol ".."]
%token DOTLESS [@cost 1] [@symbol ".<"]
%token DOTTILDE [@cost 1] [@symbol ".~"]
%token DOWNTO [@symbol "downto"]
%token ELSE [@symbol "else"]
%token END [@symbol "end"]
%token EOF
%token EOL
%token EQUAL [@symbol "="]
%token EXCEPTION [@symbol "exception"]
%token EXTERNAL [@symbol "external"]
%token FALSE [@symbol "false"]
%token FINALLY_LWT [@cost 1] [@symbol "finally"]
%token <string * char option> FLOAT [@cost 2] [@recovery ("0.",None)] [@printer string_of_FLOAT]
%token FOR [@symbol "for"]
%token FOR_LWT [@cost 1] [@symbol "for_lwt"]
%token FUN [@symbol "fun"]
%token FUNCTION [@symbol "function"]
%token FUNCTOR [@symbol "functor"]
%token GREATER [@symbol ">"]
%token GREATERDOT [@cost 1] [@symbol ">."]
%token GREATERRBRACE [@symbol ">}"]
%token GREATERRBRACKET [@symbol ">]"]
%token IF [@symbol "if"]
%token IN [@symbol "in"]
%token INCLUDE [@symbol "include"]
%token <string> INFIXOP0 [@cost 2] [@recovery "_"] [@printer Printf.sprintf "INFIXOP0(%S)"]
%token <string> INFIXOP1 [@cost 2] [@recovery "_"] [@printer Printf.sprintf "INFIXOP1(%S)"]
%token <string> INFIXOP2 [@cost 2] [@recovery "_"] [@printer Printf.sprintf "INFIXOP2(%S)"]
%token <string> INFIXOP3 [@cost 2] [@recovery "_"] [@printer Printf.sprintf "INFIXOP3(%S)"]
%token <string> INFIXOP4 [@cost 2] [@recovery "_"] [@printer Printf.sprintf "INFIXOP4(%S)"]
%token INHERIT [@symbol "inherit"]
%token INITIALIZER [@symbol "initializer"]
%token <string * char option> INT [@cost 1] [@recovery ("0",None)] [@printer string_of_INT]
%token <string> LABEL [@cost 2] [@recovery "_"] [@printer Printf.sprintf "LABEL(%S)"] [@symbol "label"]
%token LAZY [@symbol "lazy"]
%token LBRACE [@symbol "{"]
%token LBRACELESS [@symbol "{<"]
%token LBRACKET [@symbol "["]
%token LBRACKETAT [@symbol "[@"]
%token LBRACKETATAT [@symbol "[@@"]
%token LBRACKETATATAT [@symbol "[@@@"]
%token LBRACKETBAR [@symbol "[|"]
%token LBRACKETGREATER [@symbol "[>"]
%token LBRACKETLESS [@symbol "[<"]
%token LBRACKETPERCENT [@symbol "[%"]
%token LBRACKETPERCENTPERCENT [@symbol "[%%"]
%token LESS [@symbol "<"]
%token LESSMINUS [@symbol "<-"]
%token LET [@symbol "let"]
%token <string> LETOP [@cost 1] [@recovery ""] [@printer Printf.sprintf "LETOP(%S)"] [@symbol "let<op>"]
%token LET_LWT [@cost 1] [@symbol "lwt"]
%token <string> LIDENT [@cost 2] [@recovery "_"] [@printer Printf.sprintf "LIDENT(%S)"]
%token LPAREN [@symbol ")"]
%token MATCH [@symbol "match"]
%token MATCH_LWT [@cost 1] [@symbol "match_lwt"]
%token METHOD [@symbol "method"]
%token MINUS [@symbol "-"]
%token MINUSDOT [@symbol "-."]
%token MINUSGREATER [@symbol "->"]
%token MODULE [@symbol "module"]
%token MUTABLE [@symbol "mutable"]
%token NEW [@symbol "new"]
%token NONREC [@cost 1] [@symbol "nonrec"]
%token OBJECT [@symbol "object"]
%token OF [@symbol "of"]
%token OPEN [@symbol "open"]
%token <string> OPTLABEL [@cost 2] [@recovery "_"] [@printer Printf.sprintf "OPTLABEL(%S)"] [@symbol "?<label>"]
%token OR [@symbol "or"]
%token PERCENT [@symbol "%"]
%token PLUS [@symbol "+"]
%token PLUSDOT [@symbol "+."]
%token PLUSEQ [@symbol "+="]
%token <string> PREFIXOP [@cost 2] [@recovery "!"] [@printer Printf.sprintf "PREFIXOP(%S)"] [@symbol "!"]
%token PRIVATE [@symbol "private"]
%token QUESTION [@symbol "?"]
%token QUESTIONQUESTION [@symbol "??"]
%token QUOTE [@symbol "'"]
%token RBRACE [@symbol "}"]
%token RBRACKET [@symbol "]"]
%token REC [@symbol "rec"]
%token RPAREN [@symbol ")"]
%token SEMI [@symbol ";"]
%token SEMISEMI [@symbol ";;"]
%token SHARP [@symbol "#"]
%token <string> SHARPOP [@cost 2] [@recovery ""] [@printer Printf.sprintf "SHARPOP(%S)"] [@symbol "#<op>"]
%token SIG [@symbol "sig"]
%token STAR [@symbol "*"]
%token <string * string option> STRING [@cost 1] [@recovery ("", None)] [@printer string_of_STRING]
%token STRUCT [@symbol "struct"]
%token THEN [@symbol "then"]
%token TILDE [@symbol "~"]
%token TO [@symbol "to"]
%token TRUE [@symbol "true"]
%token TRY [@symbol "try"]
%token TRY_LWT [@cost 1] [@symbol "try_lwt"]
%token TYPE [@symbol "type"]
%token <string> UIDENT [@cost 2] [@recovery "_"] [@printer Printf.sprintf "UIDENT(%S)"]
%token UNDERSCORE [@symbol "_"]
%token VAL [@symbol "val"]
%token VIRTUAL [@symbol "virtual"]
%token WHEN [@symbol "when"]
%token WHILE [@symbol "while"]
%token WHILE_LWT [@cost 1] [@symbol "while_lwt"]
%token WITH [@symbol "with"]
%nonassoc IN
%nonassoc below_SEMI
%nonassoc SEMI
%nonassoc LET LETOP LET_LWT
%nonassoc below_WITH
%nonassoc FUNCTION WITH
%nonassoc FINALLY_LWT
%nonassoc AND
%nonassoc THEN
%nonassoc ELSE
%nonassoc LESSMINUS
%right COLONEQUAL
%nonassoc AS
%left BAR
%nonassoc below_COMMA
%left COMMA
%right MINUSGREATER
%right BARBAR OR
%right AMPERAMPER AMPERSAND
%nonassoc below_EQUAL
%left EQUAL GREATER INFIXOP0 LESS
%right INFIXOP1
%nonassoc below_LBRACKETAT
%nonassoc LBRACKETAT
%nonassoc LBRACKETATAT
%right COLONCOLON
%left INFIXOP2 MINUS MINUSDOT PLUS PLUSDOT PLUSEQ
%left INFIXOP3 PERCENT STAR
%right INFIXOP4
%nonassoc prec_unary_minus prec_unary_plus
%nonassoc prec_constant_constructor
%nonassoc prec_constr_appl
%left prec_escape
%nonassoc below_SHARP
%nonassoc SHARP
%left SHARPOP
%nonassoc below_DOT
%nonassoc DOT
%nonassoc BACKQUOTE BANG BEGIN CHAR DOTLESS DOTTILDE FALSE FLOAT GREATERDOT INT LBRACE LBRACELESS LBRACKET LBRACKETBAR LBRACKETPERCENT LBRACKETPERCENTPERCENT LIDENT LPAREN NEW PREFIXOP QUESTIONQUESTION STRING TRUE UIDENT
%type <Parsetree.structure> implementation
%type <Parsetree.signature> interface
%type <Parsetree.expression> parse_expression
%[@recovery.header 
  open Asttypes
  open Parsetree
  open Ast_helper

  let default_loc = ref Location.none

  let default_expr () =
    let id = Location.mkloc "merlin.hole" !default_loc in
    Exp.mk ~loc:!default_loc (Pexp_extension (id, PStr []))

  let default_pattern () = Pat.any ~loc:!default_loc ()

  let default_module_expr () = Mod.structure ~loc:!default_loc[]
  let default_module_type () = Mty.signature ~loc:!default_loc[]
]
%[@printer.header 
  let string_of_INT = function
    | (s, None) -> Printf.sprintf "INT(%s)" s
    | (s, Some c) -> Printf.sprintf "INT(%s%c)" s c

  let string_of_FLOAT = function
    | (s, None) -> Printf.sprintf "FLOAT(%s)" s
    | (s, Some c) -> Printf.sprintf "FLOAT(%s%c)" s c

  let string_of_STRING = function
    | s, Some s' -> Printf.sprintf "STRING(%S,%S)" s s'
    | s, None -> Printf.sprintf "STRING(%S)" s
]
%%

implementation:
  _1 = structure _2 = EOF
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
                                ( extra_str _startpos _endpos _1 )
in
                             ( _1 )}

interface:
  _1 = signature _2 = EOF
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
                                ( extra_sig _startpos _endpos _1 )
in
                             ( _1 )}

parse_expression:
  _1 = seq_expr _2 = EOF
    {                 ( _1 )}

functor_arg:
  _1 = LPAREN _2 = RPAREN
    {      ( (mkrhs "*" (make_loc _startpos__2_ _endpos__2_)), None )}
| _1 = LPAREN _1_inlined1 = functor_arg_name _3 = COLON _4 = module_type _5 = RPAREN
    {let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
      ( _2, Some _4 )}

functor_arg_name:
  _1 = UIDENT
    {           ( _1 )}
| _1 = UNDERSCORE
    {               ( "_" )}

functor_args [@recovery []]:
  _1 = functor_args _2 = functor_arg
    {      ( _2 :: _1 )}
| _1 = functor_arg
    {      ( [ _1 ] )}

module_expr [@recovery default_module_expr ()]:
  _1 = mod_longident
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmod ~loc:(make_loc _symbolstartpos _endpos))(Pmod_ident _1) )}
| _1 = STRUCT _2 = attributes _1_inlined1 = structure _4 = END
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
                                ( extra_str _startpos _endpos _1 )
in
let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmod ~loc:(make_loc _symbolstartpos _endpos)) ~attrs:_2 (Pmod_structure(_3)) )}
| _1 = FUNCTOR _2 = attributes _3 = functor_args _4 = MINUSGREATER _5 = module_expr
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( let modexp =
          List.fold_left
            (fun acc (n, t) -> (mkmod ~loc:(make_loc _symbolstartpos _endpos))(Pmod_functor(n, t, acc)))
            _5 _3
        in wrap_mod_attrs modexp _2 )}
| _1 = module_expr _2 = paren_module_expr
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmod ~loc:(make_loc _symbolstartpos _endpos))(Pmod_apply(_1, _2)) )}
| _1 = module_expr _2 = LPAREN _3 = RPAREN
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmod ~loc:(make_loc _symbolstartpos _endpos))(Pmod_apply(_1, (mkmod ~loc:(make_loc _symbolstartpos _endpos)) (Pmod_structure []))) )}
| _1 = paren_module_expr
    {      ( _1 )}
| _1 = module_expr _2 = attribute
    {      ( Mod.attr _1 _2 )}
| _1 = extension
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmod ~loc:(make_loc _symbolstartpos _endpos))(Pmod_extension _1) )}

paren_module_expr:
  _1 = LPAREN _2 = module_expr _3 = COLON _4 = module_type _5 = RPAREN
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmod ~loc:(make_loc _symbolstartpos _endpos))(Pmod_constraint(_2, _4)) )}
| _1 = LPAREN _2 = module_expr _3 = RPAREN
    {      ( _2 )}
| _1 = LPAREN _2 = VAL _3 = attributes _4 = expr _5 = RPAREN
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmod ~loc:(make_loc _symbolstartpos _endpos)) ~attrs:_3 (Pmod_unpack _4) )}
| _1 = LPAREN _2 = VAL _3 = attributes _4 = expr _5 = COLON _6 = package_type _7 = RPAREN
    {let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmod ~loc:(make_loc _symbolstartpos _endpos)) ~attrs:_3 (Pmod_unpack(
              (ghexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_constraint(_4, (ghtyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_package _6))))) )}
| _1 = LPAREN _2 = VAL _3 = attributes _4 = expr _5 = COLON _6 = package_type _7 = COLONGREATER _8 = package_type _9 = RPAREN
    {let _endpos = _endpos__9_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmod ~loc:(make_loc _symbolstartpos _endpos)) ~attrs:_3 (Pmod_unpack(
              (ghexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_coerce(_4, Some((ghtyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_package _6)),
                                    (ghtyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_package _8))))) )}
| _1 = LPAREN _2 = VAL _3 = attributes _4 = expr _5 = COLONGREATER _6 = package_type _7 = RPAREN
    {let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmod ~loc:(make_loc _symbolstartpos _endpos)) ~attrs:_3 (Pmod_unpack(
              (ghexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_coerce(_4, None, (ghtyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_package _6))))) )}

structure [@recovery []]:
  _1 = seq_expr _2 = post_item_attributes _3 = structure_tail
    {      ( (mark_rhs_docs _startpos__1_ _endpos__2_);
        ((text_str _startpos__1_)) @ mkstrexp _1 _2 :: _3 )}
| _1 = toplevel_directive _2 = structure
    {                                 ( _1 :: _2 )}
| _1 = structure_tail
    {                   ( _1 )}

structure_tail:
  
    {                         ( [] )}
| _1 = SEMISEMI _2 = structure
    {                       ( ((text_str _startpos__1_)) @ _2 )}
| _1 = structure_item _2 = structure_tail
    {                                  ( ((text_str _startpos__1_)) @ _1 :: _2 )}

structure_item:
  _1 = let_bindings
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (val_of_let_bindings ~loc:(make_loc _symbolstartpos _endpos)) _1 )}
| _1 = primitive_declaration
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (body, ext) = _1 in (mkstr_ext ~loc:(make_loc _symbolstartpos _endpos)) (Pstr_primitive body) ext )}
| _1 = value_description
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (body, ext) = _1 in (mkstr_ext ~loc:(make_loc _symbolstartpos _endpos)) (Pstr_primitive body) ext )}
| _1 = type_declarations
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (nr, l, ext) = _1 in (mkstr_ext ~loc:(make_loc _symbolstartpos _endpos)) (Pstr_type (nr, List.rev l)) ext )}
| _1 = str_type_extension
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l, ext) = _1 in (mkstr_ext ~loc:(make_loc _symbolstartpos _endpos)) (Pstr_typext l) ext )}
| _1 = str_exception_declaration
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l, ext) = _1 in (mkstr_ext ~loc:(make_loc _symbolstartpos _endpos)) (Pstr_exception l) ext )}
| _1 = module_binding
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (body, ext) = _1 in (mkstr_ext ~loc:(make_loc _symbolstartpos _endpos)) (Pstr_module body) ext )}
| _1 = rec_module_bindings
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l, ext) = _1 in (mkstr_ext ~loc:(make_loc _symbolstartpos _endpos)) (Pstr_recmodule(List.rev l)) ext )}
| _1 = module_type_declaration
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (body, ext) = _1 in (mkstr_ext ~loc:(make_loc _symbolstartpos _endpos)) (Pstr_modtype body) ext )}
| _1 = open_statement
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (body, ext) = _1 in (mkstr_ext ~loc:(make_loc _symbolstartpos _endpos)) (Pstr_open body) ext )}
| _1 = class_declarations
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l, ext) = _1 in (mkstr_ext ~loc:(make_loc _symbolstartpos _endpos)) (Pstr_class (List.rev l)) ext )}
| _1 = class_type_declarations
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l, ext) = _1 in (mkstr_ext ~loc:(make_loc _symbolstartpos _endpos)) (Pstr_class_type (List.rev l)) ext )}
| _1 = str_include_statement
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (body, ext) = _1 in (mkstr_ext ~loc:(make_loc _symbolstartpos _endpos)) (Pstr_include body) ext )}
| _1 = item_extension _2 = post_item_attributes
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkstr ~loc:(make_loc _symbolstartpos _endpos))(Pstr_extension (_1, (add_docs_attrs ((symbol_docs _symbolstartpos _endpos)) _2))) )}
| _1 = floating_attribute
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mark_symbol_docs _symbolstartpos _endpos);
        (mkstr ~loc:(make_loc _symbolstartpos _endpos))(Pstr_attribute _1) )}

str_include_statement:
  _1 = INCLUDE _2 = ext_attributes _3 = module_expr _4 = post_item_attributes
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _2 in
        Incl.mk _3 ~attrs:(attrs@_4)
            ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
      , ext )}

module_binding_body:
  _1 = EQUAL _2 = module_expr
    {      ( _2 )}
| _1 = COLON _2 = module_type _3 = EQUAL _4 = module_expr
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmod ~loc:(make_loc _symbolstartpos _endpos))(Pmod_constraint(_4, _2)) )}
| _1 = functor_arg _2 = module_binding_body
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmod ~loc:(make_loc _symbolstartpos _endpos))(Pmod_functor(fst _1, snd _1, _2)) )}

module_binding:
  _1 = MODULE _2 = ext_attributes _1_inlined1 = UIDENT _4 = module_binding_body _5 = post_item_attributes
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _2 in
        Mb.mk _3 _4 ~attrs:(attrs@_5)
            ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
      , ext )}

rec_module_bindings:
  _1 = rec_module_binding
    {                       ( let (b, ext) = _1 in ([b], ext) )}
| _1 = rec_module_bindings _2 = and_module_binding
    {      ( let (l, ext) = _1 in (_2 :: l, ext) )}

rec_module_binding:
  _1 = MODULE _2 = ext_attributes _3 = REC _1_inlined1 = UIDENT _5 = module_binding_body _6 = post_item_attributes
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _2 in
        Mb.mk _4 _5 ~attrs:(attrs@_6)
            ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
      , ext )}

and_module_binding:
  _1 = AND _2 = attributes _1_inlined1 = UIDENT _4 = module_binding_body _5 = post_item_attributes
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( Mb.mk _3 _4 ~attrs:(_2@_5) ~loc:(((make_loc _symbolstartpos _endpos)))
               ~text:((symbol_text _startpos)) ~docs:((symbol_docs _symbolstartpos _endpos)) )}

module_type [@recovery default_module_type ()]:
  _1 = mty_longident
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmty ~loc:(make_loc _symbolstartpos _endpos))(Pmty_ident _1) )}
| _1 = SIG _2 = attributes _1_inlined1 = signature _4 = END
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
                                ( extra_sig _startpos _endpos _1 )
in
let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmty ~loc:(make_loc _symbolstartpos _endpos)) ~attrs:_2 (Pmty_signature _3) )}
| _1 = FUNCTOR _2 = attributes _3 = functor_args _4 = MINUSGREATER _5 = module_type %prec below_WITH
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( let mty =
          List.fold_left
            (fun acc (n, t) -> (mkmty ~loc:(make_loc _symbolstartpos _endpos))(Pmty_functor(n, t, acc)))
            _5 _3
        in wrap_mty_attrs mty _2 )}
| _1 = module_type _2 = MINUSGREATER _3 = module_type %prec below_WITH
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmty ~loc:(make_loc _symbolstartpos _endpos))(Pmty_functor(mknoloc "_", Some _1, _3)) )}
| _1 = module_type _2 = WITH _3 = with_constraints
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmty ~loc:(make_loc _symbolstartpos _endpos))(Pmty_with(_1, List.rev _3)) )}
| _1 = MODULE _2 = TYPE _3 = OF _4 = attributes _5 = module_expr %prec below_LBRACKETAT
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmty ~loc:(make_loc _symbolstartpos _endpos)) ~attrs:_4 (Pmty_typeof _5) )}
| _1 = LPAREN _2 = module_type _3 = RPAREN
    {      ( _2 )}
| _1 = extension
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmty ~loc:(make_loc _symbolstartpos _endpos))(Pmty_extension _1) )}
| _1 = module_type _2 = attribute
    {      ( Mty.attr _1 _2 )}

signature:
  
    {                         ( [] )}
| _1 = SEMISEMI _2 = signature
    {                       ( ((text_sig _startpos__1_)) @ _2 )}
| _1 = signature_item _2 = signature
    {                             ( ((text_sig _startpos__1_)) @ _1 :: _2 )}

signature_item:
  _1 = value_description
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (body, ext) = _1 in (mksig_ext ~loc:(make_loc _symbolstartpos _endpos)) (Psig_value body) ext )}
| _1 = primitive_declaration
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (body, ext) = _1 in (mksig_ext ~loc:(make_loc _symbolstartpos _endpos)) (Psig_value body) ext )}
| _1 = type_declarations
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (nr, l, ext) = _1 in (mksig_ext ~loc:(make_loc _symbolstartpos _endpos)) (Psig_type (nr, List.rev l)) ext )}
| _1 = sig_type_extension
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l, ext) = _1 in (mksig_ext ~loc:(make_loc _symbolstartpos _endpos)) (Psig_typext l) ext )}
| _1 = sig_exception_declaration
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l, ext) = _1 in (mksig_ext ~loc:(make_loc _symbolstartpos _endpos)) (Psig_exception l) ext )}
| _1 = module_declaration
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (body, ext) = _1 in (mksig_ext ~loc:(make_loc _symbolstartpos _endpos)) (Psig_module body) ext )}
| _1 = module_alias
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (body, ext) = _1 in (mksig_ext ~loc:(make_loc _symbolstartpos _endpos)) (Psig_module body) ext )}
| _1 = rec_module_declarations
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l, ext) = _1 in (mksig_ext ~loc:(make_loc _symbolstartpos _endpos)) (Psig_recmodule (List.rev l)) ext )}
| _1 = module_type_declaration
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (body, ext) = _1 in (mksig_ext ~loc:(make_loc _symbolstartpos _endpos)) (Psig_modtype body) ext )}
| _1 = open_statement
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (body, ext) = _1 in (mksig_ext ~loc:(make_loc _symbolstartpos _endpos)) (Psig_open body) ext )}
| _1 = sig_include_statement
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (body, ext) = _1 in (mksig_ext ~loc:(make_loc _symbolstartpos _endpos)) (Psig_include body) ext )}
| _1 = class_descriptions
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l, ext) = _1 in (mksig_ext ~loc:(make_loc _symbolstartpos _endpos)) (Psig_class (List.rev l)) ext )}
| _1 = class_type_declarations
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l, ext) = _1 in (mksig_ext ~loc:(make_loc _symbolstartpos _endpos)) (Psig_class_type (List.rev l)) ext )}
| _1 = item_extension _2 = post_item_attributes
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mksig ~loc:(make_loc _symbolstartpos _endpos))(Psig_extension (_1, (add_docs_attrs ((symbol_docs _symbolstartpos _endpos)) _2))) )}
| _1 = floating_attribute
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mark_symbol_docs _symbolstartpos _endpos);
        (mksig ~loc:(make_loc _symbolstartpos _endpos))(Psig_attribute _1) )}

open_statement:
  _1 = OPEN _2 = override_flag _3 = ext_attributes _1_inlined1 = mod_longident _5 = post_item_attributes
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _3 in
        Opn.mk _4 ~override:_2 ~attrs:(attrs@_5)
          ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
      , ext )}

sig_include_statement:
  _1 = INCLUDE _2 = ext_attributes _3 = module_type _4 = post_item_attributes %prec below_WITH
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _2 in
        Incl.mk _3 ~attrs:(attrs@_4)
            ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
      , ext )}

module_declaration_body:
  _1 = COLON _2 = module_type
    {      ( _2 )}
| _1 = LPAREN _1_inlined1 = UIDENT _3 = COLON _4 = module_type _5 = RPAREN _6 = module_declaration_body
    {let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmty ~loc:(make_loc _symbolstartpos _endpos))(Pmty_functor(_2, Some _4, _6)) )}
| _1 = LPAREN _2 = RPAREN _3 = module_declaration_body
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkmty ~loc:(make_loc _symbolstartpos _endpos))(Pmty_functor((mkrhs "*" (make_loc _startpos__1_ _endpos__1_)), None, _3)) )}

module_declaration:
  _1 = MODULE _2 = ext_attributes _1_inlined1 = UIDENT _4 = module_declaration_body _5 = post_item_attributes
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _2 in
        Md.mk _3 _4 ~attrs:(attrs@_5)
          ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
      , ext )}

module_alias:
  _1 = MODULE _2 = ext_attributes _1_inlined1 = UIDENT _4 = EQUAL _1_inlined2 = mod_longident _6 = post_item_attributes
    {let _5 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _2 in
        Md.mk _3
          (Mty.alias ~loc:_5.Location.loc _5) ~attrs:(attrs@_6)
             ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
      , ext )}

rec_module_declarations:
  _1 = rec_module_declaration
    {      ( let (body, ext) = _1 in ([body], ext) )}
| _1 = rec_module_declarations _2 = and_module_declaration
    {      ( let (l, ext) = _1 in (_2 :: l, ext) )}

rec_module_declaration:
  _1 = MODULE _2 = ext_attributes _3 = REC _1_inlined1 = UIDENT _5 = COLON _6 = module_type _7 = post_item_attributes
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _2 in
        Md.mk _4 _6 ~attrs:(attrs@_7)
            ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
      , ext )}

and_module_declaration:
  _1 = AND _2 = attributes _1_inlined1 = UIDENT _4 = COLON _5 = module_type _6 = post_item_attributes
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( Md.mk _3 _5 ~attrs:(_2@_6) ~loc:(((make_loc _symbolstartpos _endpos)))
              ~text:((symbol_text _startpos)) ~docs:((symbol_docs _symbolstartpos _endpos)) )}

module_type_declaration_body:
  
    {                              ( None )}
| _1 = EQUAL _2 = module_type
    {                      ( Some _2 )}

module_type_declaration:
  _1 = MODULE _2 = TYPE _3 = ext_attributes _1_inlined1 = ident _5 = module_type_declaration_body _6 = post_item_attributes
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _3 in
        Mtd.mk _4 ?typ:_5 ~attrs:(attrs@_6)
          ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
      , ext )}

class_declarations:
  _1 = class_declaration
    {      ( let (body, ext) = _1 in ([body], ext) )}
| _1 = class_declarations _2 = and_class_declaration
    {      ( let (l, ext) = _1 in (_2 :: l, ext) )}

class_declaration:
  _1 = CLASS _2 = ext_attributes _3 = virtual_flag _4 = class_type_parameters _1_inlined1 = LIDENT _6 = class_fun_binding _7 = post_item_attributes
    {let _5 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _2 in
        Ci.mk _5 _6 ~virt:_3 ~params:_4 ~attrs:(attrs@_7)
            ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
      , ext )}

and_class_declaration:
  _1 = AND _2 = attributes _3 = virtual_flag _4 = class_type_parameters _1_inlined1 = LIDENT _6 = class_fun_binding _7 = post_item_attributes
    {let _5 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__7_ in
let _startpos = _startpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( Ci.mk _5 _6 ~virt:_3 ~params:_4
         ~attrs:(_2@_7) ~loc:(((make_loc _symbolstartpos _endpos)))
         ~text:((symbol_text _startpos)) ~docs:((symbol_docs _symbolstartpos _endpos)) )}

class_fun_binding:
  _1 = EQUAL _2 = class_expr
    {      ( _2 )}
| _1 = COLON _2 = class_type _3 = EQUAL _4 = class_expr
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkclass ~loc:(make_loc _symbolstartpos _endpos))(Pcl_constraint(_4, _2)) )}
| _1 = labeled_simple_pattern _2 = class_fun_binding
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l,o,p) = _1 in (mkclass ~loc:(make_loc _symbolstartpos _endpos))(Pcl_fun(l, o, p, _2)) )}

class_type_parameters:
  
    {                                                ( [] )}
| _1 = LBRACKET _2 = type_parameter_list _3 = RBRACKET
    {                                          ( List.rev _2 )}

class_fun_def:
  _1 = labeled_simple_pattern _2 = MINUSGREATER _3 = class_expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l,o,p) = _1 in (mkclass ~loc:(make_loc _symbolstartpos _endpos))(Pcl_fun(l, o, p, _3)) )}
| _1 = labeled_simple_pattern _2 = class_fun_def
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l,o,p) = _1 in (mkclass ~loc:(make_loc _symbolstartpos _endpos))(Pcl_fun(l, o, p, _2)) )}

class_expr:
  _1 = class_simple_expr
    {      ( _1 )}
| _1 = FUN _2 = attributes _3 = class_fun_def
    {      ( wrap_class_attrs _3 _2 )}
| _1 = class_simple_expr _2 = simple_labeled_expr_list
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkclass ~loc:(make_loc _symbolstartpos _endpos))(Pcl_apply(_1, List.rev _2)) )}
| _1 = let_bindings _2 = IN _3 = class_expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (class_of_let_bindings ~loc:(make_loc _symbolstartpos _endpos)) _1 _3 )}
| _1 = class_expr _2 = attribute
    {      ( Cl.attr _1 _2 )}
| _1 = extension
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkclass ~loc:(make_loc _symbolstartpos _endpos))(Pcl_extension _1) )}

class_simple_expr:
  _1 = LBRACKET _2 = core_type_comma_list _3 = RBRACKET _4 = class_longident
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkclass ~loc:(make_loc _symbolstartpos _endpos))(Pcl_constr(mkloc _4 ((make_loc _startpos__4_ _endpos__4_)), List.rev _2)) )}
| _1 = class_longident
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkclass ~loc:(make_loc _symbolstartpos _endpos))(Pcl_constr(_1, [])) )}
| _1 = OBJECT _2 = attributes _3 = class_structure _4 = END
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkclass ~loc:(make_loc _symbolstartpos _endpos)) ~attrs:_2 (Pcl_structure(_3)) )}
| _1 = LPAREN _2 = class_expr _3 = COLON _4 = class_type _5 = RPAREN
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkclass ~loc:(make_loc _symbolstartpos _endpos))(Pcl_constraint(_2, _4)) )}
| _1 = LPAREN _2 = class_expr _3 = RPAREN
    {      ( _2 )}

class_structure:
  _1 = class_self_pattern _1_inlined1 = class_fields
    {let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
                                 ( extra_cstr _startpos _endpos _1 )
in
       ( Cstr.mk _1 (List.rev _2) )}

class_self_pattern:
  _1 = LPAREN _2 = pattern _3 = RPAREN
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (reloc_pat ~loc:(make_loc _symbolstartpos _endpos)) _2 )}
| _1 = LPAREN _2 = pattern _3 = COLON _4 = core_type _5 = RPAREN
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_constraint(_2, _4)) )}
| 
    {let _endpos = _endpos__0_ in
let _symbolstartpos = _endpos in
      ( (ghpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_any) )}

class_fields:
  
    {      ( [] )}
| _1 = class_fields _2 = class_field
    {      ( _2 :: ((text_cstr _startpos__2_)) @ _1 )}

class_field:
  _1 = INHERIT _2 = override_flag _3 = attributes _4 = class_expr _5 = parent_binder _6 = post_item_attributes
    {let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkcf ~loc:(make_loc _symbolstartpos _endpos)) (Pcf_inherit (_2, _4, _5)) ~attrs:(_3@_6) ~docs:((symbol_docs _symbolstartpos _endpos)) )}
| _1 = VAL _2 = value _3 = post_item_attributes
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( let v, attrs = _2 in
        (mkcf ~loc:(make_loc _symbolstartpos _endpos)) (Pcf_val v) ~attrs:(attrs@_3) ~docs:((symbol_docs _symbolstartpos _endpos)) )}
| _1 = METHOD _2 = method_ _3 = post_item_attributes
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( let meth, attrs = _2 in
        (mkcf ~loc:(make_loc _symbolstartpos _endpos)) (Pcf_method meth) ~attrs:(attrs@_3) ~docs:((symbol_docs _symbolstartpos _endpos)) )}
| _1 = CONSTRAINT _2 = attributes _3 = constrain_field _4 = post_item_attributes
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkcf ~loc:(make_loc _symbolstartpos _endpos)) (Pcf_constraint _3) ~attrs:(_2@_4) ~docs:((symbol_docs _symbolstartpos _endpos)) )}
| _1 = INITIALIZER _2 = attributes _3 = seq_expr _4 = post_item_attributes
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkcf ~loc:(make_loc _symbolstartpos _endpos)) (Pcf_initializer _3) ~attrs:(_2@_4) ~docs:((symbol_docs _symbolstartpos _endpos)) )}
| _1 = item_extension _2 = post_item_attributes
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkcf ~loc:(make_loc _symbolstartpos _endpos)) (Pcf_extension _1) ~attrs:_2 ~docs:((symbol_docs _symbolstartpos _endpos)) )}
| _1 = floating_attribute
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mark_symbol_docs _symbolstartpos _endpos);
        (mkcf ~loc:(make_loc _symbolstartpos _endpos)) (Pcf_attribute _1) )}

parent_binder:
  _1 = AS _1_inlined1 = LIDENT
    {let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
          ( Some _2 )}
| 
    {          ( None )}

value:
  _1 = override_flag _2 = attributes _3 = MUTABLE _4 = VIRTUAL _5 = label _6 = COLON _7 = core_type
    {      ( if _1 = Override then (syntax_error (make_loc _startpos__1_ _endpos__1_));
        (mkloc _5 ((make_loc _startpos__5_ _endpos__5_)), Mutable, Cfk_virtual _7), _2 )}
| _1 = override_flag _2 = attributes _3 = VIRTUAL _4 = mutable_flag _1_inlined1 = label _6 = COLON _7 = core_type
    {let _5 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
      ( if _1 = Override then (syntax_error (make_loc _startpos__1_ _endpos__1_));
        (_5, _4, Cfk_virtual _7), _2 )}
| _1 = override_flag _2 = attributes _3 = mutable_flag _1_inlined1 = label _5 = EQUAL _6 = seq_expr
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )}
| _1 = override_flag _2 = attributes _3 = mutable_flag _1_inlined1 = label _5 = type_constraint _6 = EQUAL _7 = seq_expr
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _startpos__4_ = _startpos__1_inlined1_ in
let _endpos = _endpos__7_ in
let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
  _startpos__1_
else
  if _startpos__2_ != _endpos__2_ then
    _startpos__2_
  else
    if _startpos__3_ != _endpos__3_ then
      _startpos__3_
    else
      _startpos__4_ in
      (
       let e = (mkexp_constraint ~loc:(make_loc _symbolstartpos _endpos)) _7 _5 in
       (_4, _3, Cfk_concrete (_1, e)), _2
      )}

method_:
  _1 = override_flag _2 = attributes _3 = PRIVATE _4 = VIRTUAL _5 = label _6 = COLON _7 = poly_type
    {      ( if _1 = Override then (syntax_error (make_loc _startpos__1_ _endpos__1_));
        (mkloc _5 ((make_loc _startpos__5_ _endpos__5_)), Private, Cfk_virtual _7), _2 )}
| _1 = override_flag _2 = attributes _3 = VIRTUAL _4 = private_flag _5 = label _6 = COLON _7 = poly_type
    {      ( if _1 = Override then (syntax_error (make_loc _startpos__1_ _endpos__1_));
        (mkloc _5 ((make_loc _startpos__5_ _endpos__5_)), _4, Cfk_virtual _7), _2 )}
| _1 = override_flag _2 = attributes _3 = private_flag _4 = label _5 = strict_binding
    {let _endpos = _endpos__5_ in
let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
  _startpos__1_
else
  if _startpos__2_ != _endpos__2_ then
    _startpos__2_
  else
    if _startpos__3_ != _endpos__3_ then
      _startpos__3_
    else
      _startpos__4_ in
      ( (mkloc _4 ((make_loc _startpos__4_ _endpos__4_)), _3,
         Cfk_concrete (_1, (ghexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_poly (_5, None)))), _2 )}
| _1 = override_flag _2 = attributes _3 = private_flag _4 = label _5 = COLON _6 = poly_type _7 = EQUAL _8 = seq_expr
    {let _endpos = _endpos__8_ in
let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
  _startpos__1_
else
  if _startpos__2_ != _endpos__2_ then
    _startpos__2_
  else
    if _startpos__3_ != _endpos__3_ then
      _startpos__3_
    else
      _startpos__4_ in
      ( (mkloc _4 ((make_loc _startpos__4_ _endpos__4_)), _3,
        Cfk_concrete (_1, (ghexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_poly(_8, Some _6)))), _2 )}
| _1 = override_flag _2 = attributes _3 = private_flag _4 = label _5 = COLON _6 = TYPE _7 = lident_list _8 = DOT _9 = core_type _10 = EQUAL _11 = seq_expr
    {let _endpos = _endpos__11_ in
let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
  _startpos__1_
else
  if _startpos__2_ != _endpos__2_ then
    _startpos__2_
  else
    if _startpos__3_ != _endpos__3_ then
      _startpos__3_
    else
      _startpos__4_ in
      ( let exp, poly = (wrap_type_annotation ~loc:(make_loc _symbolstartpos _endpos)) _7 _9 _11 in
        (mkloc _4 ((make_loc _startpos__4_ _endpos__4_)), _3,
         Cfk_concrete (_1, (ghexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_poly(exp, Some poly)))), _2 )}

class_type:
  _1 = class_signature
    {      ( _1 )}
| _1 = QUESTION _2 = LIDENT _3 = COLON _4 = simple_core_type_or_tuple _5 = MINUSGREATER _6 = class_type
    {let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkcty ~loc:(make_loc _symbolstartpos _endpos))(Pcty_arrow(Optional _2 , _4, _6)) )}
| _1 = OPTLABEL _2 = simple_core_type_or_tuple _3 = MINUSGREATER _4 = class_type
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkcty ~loc:(make_loc _symbolstartpos _endpos))(Pcty_arrow(Optional _1, _2, _4)) )}
| _1 = LIDENT _2 = COLON _3 = simple_core_type_or_tuple _4 = MINUSGREATER _5 = class_type
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkcty ~loc:(make_loc _symbolstartpos _endpos))(Pcty_arrow(Labelled _1, _3, _5)) )}
| _1 = simple_core_type_or_tuple _2 = MINUSGREATER _3 = class_type
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkcty ~loc:(make_loc _symbolstartpos _endpos))(Pcty_arrow(Nolabel, _1, _3)) )}

class_signature:
  _1 = LBRACKET _2 = core_type_comma_list _3 = RBRACKET _4 = clty_longident
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkcty ~loc:(make_loc _symbolstartpos _endpos))(Pcty_constr (mkloc _4 ((make_loc _startpos__4_ _endpos__4_)), List.rev _2)) )}
| _1 = clty_longident
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkcty ~loc:(make_loc _symbolstartpos _endpos))(Pcty_constr (_1, [])) )}
| _1 = OBJECT _2 = attributes _3 = class_sig_body _4 = END
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkcty ~loc:(make_loc _symbolstartpos _endpos)) ~attrs:_2 (Pcty_signature _3) )}
| _1 = class_signature _2 = attribute
    {      ( Cty.attr _1 _2 )}
| _1 = extension
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkcty ~loc:(make_loc _symbolstartpos _endpos))(Pcty_extension _1) )}

class_sig_body:
  _1 = class_self_type _1_inlined1 = class_sig_fields
    {let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
                                 ( extra_csig _startpos _endpos _1 )
in
      ( Csig.mk _1 (List.rev _2) )}

class_self_type:
  _1 = LPAREN _2 = core_type _3 = RPAREN
    {      ( _2 )}
| 
    {let _endpos = _endpos__0_ in
let _symbolstartpos = _endpos in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_any) )}

class_sig_fields:
  
    {                                                ( [] )}
| _1 = class_sig_fields _2 = class_sig_field
    {                                   ( _2 :: ((text_csig _startpos__2_)) @ _1 )}

class_sig_field:
  _1 = INHERIT _2 = attributes _3 = class_signature _4 = post_item_attributes
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkctf ~loc:(make_loc _symbolstartpos _endpos)) (Pctf_inherit _3) ~attrs:(_2@_4) ~docs:((symbol_docs _symbolstartpos _endpos)) )}
| _1 = VAL _2 = attributes _3 = value_type _4 = post_item_attributes
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkctf ~loc:(make_loc _symbolstartpos _endpos)) (Pctf_val _3) ~attrs:(_2@_4) ~docs:((symbol_docs _symbolstartpos _endpos)) )}
| _1 = METHOD _2 = attributes _3 = private_virtual_flags _1_inlined1 = label _5 = COLON _6 = poly_type _7 = post_item_attributes
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      (
       let (p, v) = _3 in
       (mkctf ~loc:(make_loc _symbolstartpos _endpos)) (Pctf_method (_4, p, v, _6)) ~attrs:(_2@_7) ~docs:((symbol_docs _symbolstartpos _endpos))
      )}
| _1 = CONSTRAINT _2 = attributes _3 = constrain_field _4 = post_item_attributes
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkctf ~loc:(make_loc _symbolstartpos _endpos)) (Pctf_constraint _3) ~attrs:(_2@_4) ~docs:((symbol_docs _symbolstartpos _endpos)) )}
| _1 = item_extension _2 = post_item_attributes
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkctf ~loc:(make_loc _symbolstartpos _endpos)) (Pctf_extension _1) ~attrs:_2 ~docs:((symbol_docs _symbolstartpos _endpos)) )}
| _1 = floating_attribute
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mark_symbol_docs _symbolstartpos _endpos);
        (mkctf ~loc:(make_loc _symbolstartpos _endpos))(Pctf_attribute _1) )}

value_type:
  _1 = VIRTUAL _2 = mutable_flag _1_inlined1 = label _4 = COLON _5 = core_type
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
      ( _3, _2, Virtual, _5 )}
| _1 = MUTABLE _2 = virtual_flag _1_inlined1 = label _4 = COLON _5 = core_type
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
      ( _3, Mutable, _2, _5 )}
| _1 = label _2 = COLON _3 = core_type
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
      ( _1, Immutable, Concrete, _3 )}

constrain:
  _1 = core_type _2 = EQUAL _3 = core_type
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
                                  ( _1, _3, (make_loc _symbolstartpos _endpos) )}

constrain_field:
  _1 = core_type _2 = EQUAL _3 = core_type
    {                                  ( _1, _3 )}

class_descriptions:
  _1 = class_description
    {      ( let (body, ext) = _1 in ([body],ext) )}
| _1 = class_descriptions _2 = and_class_description
    {      ( let (l, ext) = _1 in (_2 :: l, ext) )}

class_description:
  _1 = CLASS _2 = ext_attributes _3 = virtual_flag _4 = class_type_parameters _1_inlined1 = LIDENT _6 = COLON _7 = class_type _8 = post_item_attributes
    {let _5 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__8_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _2 in
        Ci.mk _5 _7 ~virt:_3 ~params:_4 ~attrs:(attrs@_8)
            ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
     , ext )}

and_class_description:
  _1 = AND _2 = attributes _3 = virtual_flag _4 = class_type_parameters _1_inlined1 = LIDENT _6 = COLON _7 = class_type _8 = post_item_attributes
    {let _5 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__8_ in
let _startpos = _startpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( Ci.mk _5 _7 ~virt:_3 ~params:_4
              ~attrs:(_2@_8) ~loc:(((make_loc _symbolstartpos _endpos)))
              ~text:((symbol_text _startpos)) ~docs:((symbol_docs _symbolstartpos _endpos)) )}

class_type_declarations:
  _1 = class_type_declaration
    {      ( let (body, ext) = _1 in ([body],ext) )}
| _1 = class_type_declarations _2 = and_class_type_declaration
    {      ( let (l, ext) = _1 in (_2 :: l, ext) )}

class_type_declaration:
  _1 = CLASS _2 = TYPE _3 = ext_attributes _4 = virtual_flag _5 = class_type_parameters _1_inlined1 = LIDENT _7 = EQUAL _8 = class_signature _9 = post_item_attributes
    {let _6 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__9_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _3 in
        Ci.mk _6 _8 ~virt:_4 ~params:_5 ~attrs:(attrs@_9)
            ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
      , ext)}

and_class_type_declaration:
  _1 = AND _2 = attributes _3 = virtual_flag _4 = class_type_parameters _1_inlined1 = LIDENT _6 = EQUAL _7 = class_signature _8 = post_item_attributes
    {let _5 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__8_ in
let _startpos = _startpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( Ci.mk _5 _7 ~virt:_3 ~params:_4
         ~attrs:(_2@_8) ~loc:(((make_loc _symbolstartpos _endpos)))
         ~text:((symbol_text _startpos)) ~docs:((symbol_docs _symbolstartpos _endpos)) )}

seq_expr:
  _1 = expr %prec below_SEMI
    {                          ( _1 )}
| _1 = expr _2 = SEMI
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
              ( (reloc_exp ~loc:(make_loc _symbolstartpos _endpos)) _1 )}
| _1 = expr _2 = SEMI _3 = seq_expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
                       ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_sequence(_1, _3)) )}
| _1 = expr _2 = SEMI _3 = PERCENT _4 = attr_id _5 = seq_expr
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( let seq = (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_sequence (_1, _5)) in
        let payload = PStr [mkstrexp seq []] in
        (mkexp ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_extension (_4, payload)) )}

labeled_simple_pattern:
  _1 = QUESTION _2 = LPAREN _3 = label_let_pattern _4 = opt_default _5 = RPAREN
    {      ( (Optional (fst _3), _4, snd _3) )}
| _1 = QUESTION _2 = label_var
    {      ( (Optional (fst _2), None, snd _2) )}
| _1 = OPTLABEL _2 = LPAREN _3 = let_pattern _4 = opt_default _5 = RPAREN
    {      ( (Optional _1, _4, _3) )}
| _1 = OPTLABEL _2 = pattern_var
    {      ( (Optional _1, None, _2) )}
| _1 = TILDE _2 = LPAREN _3 = label_let_pattern _4 = RPAREN
    {      ( (Labelled (fst _3), None, snd _3) )}
| _1 = TILDE _2 = label_var
    {      ( (Labelled (fst _2), None, snd _2) )}
| _1 = LABEL _2 = simple_pattern
    {      ( (Labelled _1, None, _2) )}
| _1 = simple_pattern
    {      ( (Nolabel, None, _1) )}

pattern_var:
  _1 = LIDENT
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
                  ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_var _1) )}
| _1 = UNDERSCORE
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
               ( (mkpat ~loc:(make_loc _symbolstartpos _endpos)) Ppat_any )}

opt_default:
  
    {                                        ( None )}
| _1 = EQUAL _2 = seq_expr
    {                   ( Some _2 )}

label_let_pattern:
  _1 = label_var
    {      ( _1 )}
| _1 = label_var _2 = COLON _3 = core_type
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( let (lab, pat) = _1 in (lab, (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_constraint(pat, _3))) )}

label_var:
  _1 = LIDENT
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
                  ( (_1.Location.txt, (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_var _1)) )}

let_pattern [@recovery default_pattern ()]:
  _1 = pattern
    {      ( _1 )}
| _1 = pattern _2 = COLON _3 = core_type
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_constraint(_1, _3)) )}

expr [@recovery default_expr ()]:
  _1 = simple_expr %prec below_SHARP
    {      ( _1 )}
| _1 = simple_expr _2 = simple_labeled_expr_list
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_apply(_1, List.rev _2)) )}
| _1 = let_bindings _2 = IN _3 = seq_expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (expr_of_let_bindings ~loc:(make_loc _symbolstartpos _endpos)) _1 (merloc _endpos__2_ _3) )}
| _1 = LET _2 = MODULE _3 = ext_attributes _1_inlined1 = UIDENT _5 = module_binding_body _6 = IN _7 = seq_expr
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_letmodule(_4, _5, (merloc _endpos__6_ _7))) _3 )}
| _1 = LET _2 = EXCEPTION _3 = ext_attributes _4 = let_exception_declaration _5 = IN _6 = seq_expr
    {let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_letexception(_4, _6)) _3 )}
| _1 = LET _2 = OPEN _3 = override_flag _4 = ext_attributes _1_inlined1 = mod_longident _6 = IN _7 = seq_expr
    {let _5 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_open(_3, _5, (merloc _endpos__6_ _7))) _4 )}
| _1 = FUNCTION _2 = ext_attributes _3 = opt_bar _4 = match_cases
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_function(List.rev _4)) _2 )}
| _1 = FUN _2 = ext_attributes _3 = labeled_simple_pattern _4 = fun_def
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l,o,p) = _3 in
        (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_fun(l, o, p, _4)) _2 )}
| _1 = FUN _2 = ext_attributes _3 = LPAREN _4 = TYPE _5 = lident_list _6 = RPAREN _7 = fun_def
    {let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) ((mk_newtypes ~loc:(make_loc _symbolstartpos _endpos)) _5 _7).pexp_desc _2 )}
| _1 = MATCH _2 = ext_attributes _3 = seq_expr _4 = WITH _5 = opt_bar _6 = match_cases
    {let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_match(_3, List.rev _6)) _2 )}
| _1 = TRY _2 = ext_attributes _3 = seq_expr _4 = WITH _5 = opt_bar _6 = match_cases
    {let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_try(_3, List.rev _6)) _2 )}
| _1 = expr_comma_list %prec below_COMMA
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_tuple(List.rev _1)) )}
| _1 = constr_longident _2 = simple_expr %prec below_SHARP
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_construct(_1, Some _2)) )}
| _1 = name_tag _2 = simple_expr %prec below_SHARP
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_variant(_1, Some _2)) )}
| _1 = IF _2 = ext_attributes _3 = seq_expr _4 = THEN _5 = expr _6 = ELSE _7 = expr
    {let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos))(Pexp_ifthenelse(_3, (merloc _endpos__4_ _5), Some (merloc _endpos__6_ _7))) _2 )}
| _1 = IF _2 = ext_attributes _3 = seq_expr _4 = THEN _5 = expr
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_ifthenelse(_3, (merloc _endpos__4_ _5), None)) _2 )}
| _1 = WHILE _2 = ext_attributes _3 = seq_expr _4 = DO _5 = seq_expr _6 = DONE
    {let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_while(_3, (merloc _endpos__4_ _5))) _2 )}
| _1 = FOR _2 = ext_attributes _3 = pattern _4 = EQUAL _5 = seq_expr _6 = direction_flag _7 = seq_expr _8 = DO _9 = seq_expr _10 = DONE
    {let _endpos = _endpos__10_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos))(Pexp_for(_3, (merloc _endpos__4_ _5), (merloc _endpos__6_ _7), _6, (merloc _endpos__8_ _9))) _2 )}
| _1 = expr _2 = COLONCOLON _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( mkexp_cons ((make_loc _startpos__2_ _endpos__2_)) ((ghexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_tuple[_1;(merloc _endpos__2_ _3)])) ((make_loc _symbolstartpos _endpos)) )}
| _1 = LPAREN _2 = COLONCOLON _3 = RPAREN _4 = LPAREN _5 = expr _6 = COMMA _7 = expr _8 = RPAREN
    {let _endpos = _endpos__8_ in
let _symbolstartpos = _startpos__1_ in
      ( mkexp_cons ((make_loc _startpos__2_ _endpos__2_)) ((ghexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_tuple[_5;_7])) ((make_loc _symbolstartpos _endpos)) )}
| _1 = expr _2 = INFIXOP0 _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 _2 _3 )}
| _1 = expr _2 = INFIXOP1 _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 _2 _3 )}
| _1 = expr _2 = INFIXOP2 _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 _2 _3 )}
| _1 = expr _2 = INFIXOP3 _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 _2 _3 )}
| _1 = expr _2 = INFIXOP4 _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 _2 _3 )}
| _1 = expr _2 = PLUS _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 "+" _3 )}
| _1 = expr _2 = PLUSDOT _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 "+." _3 )}
| _1 = expr _2 = PLUSEQ _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 "+=" _3 )}
| _1 = expr _2 = MINUS _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 "-" _3 )}
| _1 = expr _2 = MINUSDOT _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 "-." _3 )}
| _1 = expr _2 = STAR _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 "*" _3 )}
| _1 = expr _2 = PERCENT _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 "%" _3 )}
| _1 = expr _2 = EQUAL _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 "=" _3 )}
| _1 = expr _2 = LESS _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 "<" _3 )}
| _1 = expr _2 = GREATER _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 ">" _3 )}
| _1 = expr _2 = OR _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 "or" _3 )}
| _1 = expr _2 = BARBAR _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 "||" _3 )}
| _1 = expr _2 = AMPERSAND _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 "&" _3 )}
| _1 = expr _2 = AMPERAMPER _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 "&&" _3 )}
| _1 = expr _2 = COLONEQUAL _3 = expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 ":=" _3 )}
| _1 = subtractive _2 = expr %prec prec_unary_minus
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkuminus ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__1_ _endpos__1_)) _1 _2 )}
| _1 = additive _2 = expr %prec prec_unary_plus
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkuplus ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__1_ _endpos__1_)) _1 _2 )}
| _1 = simple_expr _2 = DOT _1_inlined1 = label_longident _4 = LESSMINUS _5 = expr
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_setfield(_1, _3, _5)) )}
| _1 = simple_expr _2 = DOT _3 = LPAREN _4 = seq_expr _5 = RPAREN _6 = LESSMINUS _7 = expr
    {let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_apply((ghexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_ident((array_function ~loc:(make_loc _symbolstartpos _endpos)) "Array" "set")),
                         [Nolabel,_1; Nolabel,_4; Nolabel,_7])) )}
| _1 = simple_expr _2 = DOT _3 = LBRACKET _4 = seq_expr _5 = RBRACKET _6 = LESSMINUS _7 = expr
    {let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_apply((ghexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_ident((array_function ~loc:(make_loc _symbolstartpos _endpos)) "String" "set")),
                         [Nolabel,_1; Nolabel,_4; Nolabel,_7])) )}
| _1 = simple_expr _2 = DOT _3 = LBRACE _4 = expr _5 = RBRACE _6 = LESSMINUS _7 = expr
    {let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( (bigarray_set ~loc:(make_loc _symbolstartpos _endpos)) _1 _4 _7 )}
| _1 = label _2 = LESSMINUS _3 = expr
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_setinstvar(_1, _3)) )}
| _1 = ASSERT _2 = ext_attributes _3 = simple_expr %prec below_SHARP
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_assert _3) _2 )}
| _1 = LAZY _2 = ext_attributes _3 = simple_expr %prec below_SHARP
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_lazy _3) _2 )}
| _1 = OBJECT _2 = ext_attributes _3 = class_structure _4 = END
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_object _3) _2 )}
| _1 = expr _2 = attribute
    {      ( Exp.attr _1 _2 )}

simple_expr:
  _1 = val_longident
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_ident _1) )}
| _1 = constant
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_constant _1) )}
| _1 = constr_longident %prec prec_constant_constructor
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_construct(_1, None)) )}
| _1 = name_tag %prec prec_constant_constructor
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_variant(_1, None)) )}
| _1 = LPAREN _2 = seq_expr _3 = RPAREN
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (reloc_exp ~loc:(make_loc _symbolstartpos _endpos)) _2 )}
| _1 = BEGIN _2 = ext_attributes _3 = seq_expr _4 = END
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (wrap_exp_attrs ~loc:(make_loc _symbolstartpos _endpos)) ((reloc_exp ~loc:(make_loc _symbolstartpos _endpos)) _3) _2 (* check location *) )}
| _1 = BEGIN _2 = ext_attributes _3 = END
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_construct (mkloc (Lident "()") ((make_loc _symbolstartpos _endpos)),
                               None)) _2 )}
| _1 = LPAREN _2 = seq_expr _3 = type_constraint _4 = RPAREN
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_constraint ~loc:(make_loc _symbolstartpos _endpos)) _2 _3 )}
| _1 = simple_expr _2 = DOT _1_inlined1 = label_longident
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos__3_ = _endpos__1_inlined1_ in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_field(_1, _3)) )}
| _1 = mod_longident _2 = DOT _3 = LPAREN _4 = seq_expr _5 = RPAREN
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_open(Fresh, _1, _4)) )}
| _1 = mod_longident _2 = DOT _3 = LPAREN _4 = RPAREN
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_open(Fresh, _1,
                        (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_construct((mkrhs (Lident "()") (make_loc _startpos__1_ _endpos__1_)), None)))) )}
| _1 = simple_expr _2 = DOT _3 = LPAREN _4 = seq_expr _5 = RPAREN
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_apply((ghexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_ident((array_function ~loc:(make_loc _symbolstartpos _endpos)) "Array" "get")),
                         [Nolabel,_1; Nolabel,_4])) )}
| _1 = simple_expr _2 = DOT _3 = LBRACKET _4 = seq_expr _5 = RBRACKET
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_apply((ghexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_ident((array_function ~loc:(make_loc _symbolstartpos _endpos)) "String" "get")),
                         [Nolabel,_1; Nolabel,_4])) )}
| _1 = simple_expr _2 = DOT _3 = LBRACE _4 = expr _5 = RBRACE
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (bigarray_get ~loc:(make_loc _symbolstartpos _endpos)) _1 _4 )}
| _1 = LBRACE _2 = record_expr _3 = RBRACE
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( let (exten, fields) = _2 in (mkexp ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_record(fields, exten)) )}
| _1 = mod_longident _2 = DOT _3 = LBRACE _4 = record_expr _5 = RBRACE
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( let (exten, fields) = _4 in
        let rec_exp = (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_record(fields, exten)) in
        (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_open(Fresh, _1, rec_exp)) )}
| _1 = LBRACKETBAR _2 = expr_semi_list _3 = opt_semi _4 = BARRBRACKET
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_array(List.rev _2)) )}
| _1 = LBRACKETBAR _2 = BARRBRACKET
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_array []) )}
| _1 = mod_longident _2 = DOT _3 = LBRACKETBAR _4 = expr_semi_list _5 = opt_semi _6 = BARRBRACKET
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_open(Fresh, _1, (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_array(List.rev _4)))) )}
| _1 = mod_longident _2 = DOT _3 = LBRACKETBAR _4 = BARRBRACKET
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_open(Fresh, _1, (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_array []))) )}
| _1 = LBRACKET _2 = expr_semi_list _3 = opt_semi _4 = RBRACKET
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (reloc_exp ~loc:(make_loc _symbolstartpos _endpos)) (mktailexp ((make_loc _startpos__4_ _endpos__4_)) (List.rev _2)) )}
| _1 = mod_longident _2 = DOT _3 = LBRACKET _4 = expr_semi_list _5 = opt_semi _6 = RBRACKET
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( let list_exp = (reloc_exp ~loc:(make_loc _symbolstartpos _endpos)) (mktailexp ((make_loc _startpos__6_ _endpos__6_)) (List.rev _4)) in
        (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_open(Fresh, _1, list_exp)) )}
| _1 = mod_longident _2 = DOT _3 = LBRACKET _4 = RBRACKET
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_open(Fresh, _1,
                        (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_construct((mkrhs (Lident "[]") (make_loc _startpos__1_ _endpos__1_)), None)))) )}
| _1 = PREFIXOP _2 = simple_expr
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_apply((mkoperator _1 (make_loc _startpos__1_ _endpos__1_)), [Nolabel,_2])) )}
| _1 = BANG _2 = simple_expr
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_apply((mkoperator "!" (make_loc _startpos__1_ _endpos__1_)), [Nolabel,_2])) )}
| _1 = NEW _2 = ext_attributes _1_inlined1 = class_longident
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos__3_ = _endpos__1_inlined1_ in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_new _3) _2 )}
| _1 = LBRACELESS _2 = field_expr_list _3 = GREATERRBRACE
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_override _2) )}
| _1 = LBRACELESS _2 = GREATERRBRACE
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_override []))}
| _1 = mod_longident _2 = DOT _3 = LBRACELESS _4 = field_expr_list _5 = GREATERRBRACE
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_open(Fresh, _1, (mkexp ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_override _4))))}
| _1 = simple_expr _2 = SHARP _1_inlined1 = label
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos__3_ = _endpos__1_inlined1_ in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_send(_1, _3)) )}
| _1 = simple_expr _2 = SHARPOP _3 = simple_expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkinfix ~loc:(make_loc _symbolstartpos _endpos) ~oploc:(make_loc _startpos__2_ _endpos__2_)) _1 _2 _3 )}
| _1 = LPAREN _2 = MODULE _3 = ext_attributes _4 = module_expr _5 = RPAREN
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_pack _4) _3 )}
| _1 = LPAREN _2 = MODULE _3 = ext_attributes _4 = module_expr _5 = COLON _6 = package_type _7 = RPAREN
    {let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_constraint ((ghexp ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_pack _4),
                                      (ghtyp ~loc:(make_loc _symbolstartpos _endpos)) (Ptyp_package _6)))
                    _3 )}
| _1 = mod_longident _2 = DOT _3 = LPAREN _4 = MODULE _5 = ext_attributes _6 = module_expr _7 = COLON _8 = package_type _9 = RPAREN
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__9_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_open(Fresh, _1,
        (mkexp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_constraint ((ghexp ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_pack _6),
                                (ghtyp ~loc:(make_loc _symbolstartpos _endpos)) (Ptyp_package _8)))
                    _5 )) )}
| _1 = extension
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_extension _1) )}
| _1 = QUESTIONQUESTION
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let id = mkloc "merlin.hole" ((make_loc _symbolstartpos _endpos)) in
        (mkexp ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_extension (id, PStr [])) )}

simple_labeled_expr_list:
  _1 = labeled_simple_expr
    {      ( [_1] )}
| _1 = simple_labeled_expr_list _2 = labeled_simple_expr
    {      ( _2 :: _1 )}

labeled_simple_expr:
  _1 = simple_expr %prec below_SHARP
    {      ( (Nolabel, _1) )}
| _1 = label_expr
    {      ( _1 )}

label_expr:
  _1 = LABEL _2 = simple_expr %prec below_SHARP
    {      ( (Labelled _1, _2) )}
| _1 = TILDE _2 = label_ident
    {      ( (Labelled (fst _2), snd _2) )}
| _1 = QUESTION _2 = label_ident
    {      ( (Optional (fst _2), snd _2) )}
| _1 = OPTLABEL _2 = simple_expr %prec below_SHARP
    {      ( (Optional _1, _2) )}

label_ident:
  _1 = LIDENT
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
           ( (_1, (mkexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_ident((mkrhs (Lident _1) (make_loc _startpos__1_ _endpos__1_))))) )}

lident_list:
  _1 = LIDENT
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
                  ( [_1] )}
| _1 = LIDENT _2 = lident_list
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
                              ( _1 :: _2 )}

let_binding_body:
  _1 = val_ident _2 = fun_binding
    {      ( ((mkpatvar _1 (make_loc _startpos__1_ _endpos__1_)), _2) )}
| _1 = val_ident _2 = COLON _3 = typevar_list _4 = DOT _5 = core_type _6 = EQUAL _7 = seq_expr
    {let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( ((ghpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_constraint((mkpatvar _1 (make_loc _startpos__1_ _endpos__1_)),
                               (ghtyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_poly(List.rev _3,_5)))),
         _7) )}
| _1 = val_ident _2 = COLON _3 = TYPE _4 = lident_list _5 = DOT _6 = core_type _7 = EQUAL _8 = seq_expr
    {let _endpos = _endpos__8_ in
let _symbolstartpos = _startpos__1_ in
      ( let exp, poly = (wrap_type_annotation ~loc:(make_loc _symbolstartpos _endpos)) _4 _6 _8 in
        ((ghpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_constraint((mkpatvar _1 (make_loc _startpos__1_ _endpos__1_)), poly)), exp) )}
| _1 = pattern_no_exn _2 = EQUAL _3 = seq_expr
    {      ( (_1, _3) )}
| _1 = simple_pattern_not_ident _2 = COLON _3 = core_type _4 = EQUAL _5 = seq_expr
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( ((ghpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_constraint(_1, _3)), _5) )}

let_bindings:
  _1 = let_binding
    {                ( _1 )}
| _1 = let_bindings _2 = and_let_binding
    {                                 ( addlb _1 _2 )}

let_binding:
  _1 = LET _2 = ext_attributes _3 = rec_flag _4 = let_binding_body _5 = post_item_attributes
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attr) = _2 in
        (mklbs ~loc:(make_loc _symbolstartpos _endpos)) ext _3 ((mklb ~loc:(make_loc _symbolstartpos _endpos)) true _4 (attr@_5)) )}

and_let_binding:
  _1 = AND _2 = attributes _3 = let_binding_body _4 = post_item_attributes
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mklb ~loc:(make_loc _symbolstartpos _endpos)) false _3 (_2@_4) )}

fun_binding:
  _1 = strict_binding
    {      ( _1 )}
| _1 = type_constraint _2 = EQUAL _3 = seq_expr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp_constraint ~loc:(make_loc _symbolstartpos _endpos)) _3 _1 )}

strict_binding:
  _1 = EQUAL _2 = seq_expr
    {      ( _2 )}
| _1 = labeled_simple_pattern _2 = fun_binding
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( let (l, o, p) = _1 in (ghexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_fun(l, o, p, _2)) )}
| _1 = LPAREN _2 = TYPE _3 = lident_list _4 = RPAREN _5 = fun_binding
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mk_newtypes ~loc:(make_loc _symbolstartpos _endpos)) _3 _5 )}

match_cases [@recovery []]:
  _1 = match_case
    {               ( [_1] )}
| _1 = match_cases _2 = BAR _3 = match_case
    {                               ( _3 :: _1 )}

match_case:
  _1 = pattern _2 = MINUSGREATER _3 = seq_expr
    {      ( Exp.case _1 (merloc _endpos__2_ _3) )}
| _1 = pattern _2 = WHEN _3 = seq_expr _4 = MINUSGREATER _5 = seq_expr
    {      ( Exp.case _1 ~guard:(merloc _endpos__2_ _3) (merloc _endpos__4_ _5) )}
| _1 = pattern _2 = MINUSGREATER _3 = DOT [@cost infinity]
    {      ( Exp.case _1 (merloc _endpos__2_
                       (Exp.unreachable ~loc:((make_loc _startpos__3_ _endpos__3_)) ())) )}

fun_def:
  _1 = MINUSGREATER _2 = seq_expr
    {      ( (merloc _endpos__1_ _2) )}
| _1 = COLON _2 = simple_core_type _3 = MINUSGREATER _4 = seq_expr
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkexp ~loc:(make_loc _symbolstartpos _endpos)) (Pexp_constraint ((merloc _endpos__3_ _4), _2)) )}
| _1 = labeled_simple_pattern _2 = fun_def
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      (
       let (l,o,p) = _1 in
       (ghexp ~loc:(make_loc _symbolstartpos _endpos))(Pexp_fun(l, o, p, _2))
      )}
| _1 = LPAREN _2 = TYPE _3 = lident_list _4 = RPAREN _5 = fun_def
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mk_newtypes ~loc:(make_loc _symbolstartpos _endpos)) _3 _5 )}

expr_comma_list:
  _1 = expr_comma_list _2 = COMMA _3 = expr
    {                               ( _3 :: _1 )}
| _1 = expr _2 = COMMA _3 = expr
    {                    ( [_3; _1] )}

record_expr:
  _1 = simple_expr _2 = WITH _3 = lbl_expr_list
    {                                   ( (Some _1, _3) )}
| _1 = lbl_expr_list
    {                  ( (None, _1) )}

lbl_expr_list:
  _1 = lbl_expr
    {              ( [_1] )}
| _1 = lbl_expr _2 = SEMI _3 = lbl_expr_list
    {                                ( _1 :: _3 )}
| _1 = lbl_expr _2 = SEMI
    {                  ( [_1] )}

lbl_expr:
  _1 = label_longident _2 = opt_type_constraint _3 = EQUAL _4 = expr
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (_1, (mkexp_opt_constraint ~loc:(make_loc _symbolstartpos _endpos)) _4 _2) )}
| _1 = label_longident _2 = opt_type_constraint
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (_1, (mkexp_opt_constraint ~loc:(make_loc _symbolstartpos _endpos)) ((exp_of_label ~loc:(make_loc _symbolstartpos _endpos) _1.Location.txt (make_loc _startpos__1_ _endpos__1_))) _2) )}

field_expr_list:
  _1 = field_expr _2 = opt_semi
    {                        ( [_1] )}
| _1 = field_expr _2 = SEMI _3 = field_expr_list
    {                                    ( _1 :: _3 )}

field_expr:
  _1 = label _2 = EQUAL _3 = expr
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
      ( (_1, _3) )}
| _1 = label
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (_1, (exp_of_label ~loc:(make_loc _symbolstartpos _endpos) (Lident _1.Location.txt) (make_loc _startpos__1_ _endpos__1_))) )}

expr_semi_list:
  _1 = expr
    {         ( [_1] )}
| _1 = expr_semi_list _2 = SEMI _3 = expr
    {                             ( _3 :: _1 )}

type_constraint:
  _1 = COLON _2 = core_type
    {                    ( (Some _2, None) )}
| _1 = COLON _2 = core_type _3 = COLONGREATER _4 = core_type
    {                                           ( (Some _2, Some _4) )}
| _1 = COLONGREATER _2 = core_type
    {                           ( (None, Some _2) )}

opt_type_constraint:
  _1 = type_constraint
    {                    ( Some _1 )}
| 
    {    ( None )}

pattern [@recovery default_pattern ()]:
  _1 = pattern _2 = AS _1_inlined1 = val_ident
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos__3_ = _endpos__1_inlined1_ in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_alias(_1, _3)) )}
| _1 = pattern_comma_list %prec below_COMMA
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_tuple(List.rev _1)) )}
| _1 = pattern _2 = COLONCOLON _3 = pattern
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( mkpat_cons ((make_loc _startpos__2_ _endpos__2_)) ((ghpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_tuple[_1;_3])) ((make_loc _symbolstartpos _endpos)) )}
| _1 = pattern _2 = BAR _3 = pattern
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_or(_1, _3)) )}
| _1 = EXCEPTION _2 = ext_attributes _3 = pattern %prec prec_constr_appl
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Ppat_exception _3) _2 )}
| _1 = pattern _2 = attribute
    {      ( Pat.attr _1 _2 )}
| _1 = pattern_gen
    {                ( _1 )}

pattern_no_exn:
  _1 = pattern_no_exn _2 = AS _1_inlined1 = val_ident
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos__3_ = _endpos__1_inlined1_ in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_alias(_1, _3)) )}
| _1 = pattern_no_exn_comma_list %prec below_COMMA
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_tuple(List.rev _1)) )}
| _1 = pattern_no_exn _2 = COLONCOLON _3 = pattern
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( mkpat_cons ((make_loc _startpos__2_ _endpos__2_)) ((ghpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_tuple[_1;_3])) ((make_loc _symbolstartpos _endpos)) )}
| _1 = pattern_no_exn _2 = BAR _3 = pattern
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_or(_1, _3)) )}
| _1 = pattern_no_exn _2 = attribute
    {      ( Pat.attr _1 _2 )}
| _1 = pattern_gen
    {                ( _1 )}

pattern_gen:
  _1 = simple_pattern
    {      ( _1 )}
| _1 = constr_longident _2 = pattern %prec prec_constr_appl
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_construct(_1, Some _2)) )}
| _1 = name_tag _2 = pattern %prec prec_constr_appl
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_variant(_1, Some _2)) )}
| _1 = LPAREN _2 = COLONCOLON _3 = RPAREN _4 = LPAREN _5 = pattern _6 = COMMA _7 = pattern _8 = RPAREN
    {let _endpos = _endpos__8_ in
let _symbolstartpos = _startpos__1_ in
      ( mkpat_cons ((make_loc _startpos__2_ _endpos__2_)) ((ghpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_tuple[_5;_7])) ((make_loc _symbolstartpos _endpos)) )}
| _1 = LAZY _2 = ext_attributes _3 = simple_pattern
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Ppat_lazy _3) _2)}

simple_pattern:
  _1 = val_ident %prec below_EQUAL
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_var _1) )}
| _1 = simple_pattern_not_ident
    {                             ( _1 )}

simple_pattern_not_ident:
  _1 = UNDERSCORE
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_any) )}
| _1 = signed_constant
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_constant _1) )}
| _1 = signed_constant _2 = DOTDOT _3 = signed_constant
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_interval (_1, _3)) )}
| _1 = constr_longident
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_construct(_1, None)) )}
| _1 = name_tag
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_variant(_1, None)) )}
| _1 = SHARP _1_inlined1 = type_longident
    {let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos__2_ = _endpos__1_inlined1_ in
let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_type _2) )}
| _1 = simple_delimited_pattern
    {      ( _1 )}
| _1 = mod_longident _2 = DOT _3 = simple_delimited_pattern
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos)) @@ Ppat_open(_1, _3) )}
| _1 = mod_longident _2 = DOT _3 = LBRACKET _4 = RBRACKET
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos)) @@ Ppat_open(_1, (mkpat ~loc:(make_loc _symbolstartpos _endpos)) @@
               Ppat_construct ((mkrhs (Lident "[]") (make_loc _startpos__4_ _endpos__4_)), None)) )}
| _1 = mod_longident _2 = DOT _3 = LPAREN _4 = RPAREN
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos)) @@ Ppat_open(_1, (mkpat ~loc:(make_loc _symbolstartpos _endpos)) @@
                 Ppat_construct ((mkrhs (Lident "()") (make_loc _startpos__4_ _endpos__4_)), None) ) )}
| _1 = mod_longident _2 = DOT _3 = LPAREN _4 = pattern _5 = RPAREN
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos)) @@ Ppat_open (_1, _4) )}
| _1 = LPAREN _2 = pattern _3 = RPAREN
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (reloc_pat ~loc:(make_loc _symbolstartpos _endpos)) _2 )}
| _1 = LPAREN _2 = pattern _3 = COLON _4 = core_type _5 = RPAREN
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_constraint(_2, _4)) )}
| _1 = LPAREN _2 = MODULE _3 = ext_attributes _1_inlined1 = UIDENT _5 = RPAREN
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Ppat_unpack _4) _3 )}
| _1 = LPAREN _2 = MODULE _3 = ext_attributes _1_inlined1 = UIDENT _5 = COLON _6 = package_type _7 = RPAREN
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat_attrs ~loc:(make_loc _symbolstartpos _endpos))
          (Ppat_constraint((mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_unpack _4),
                           (ghtyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_package _6)))
          _3 )}
| _1 = extension
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_extension _1) )}

simple_delimited_pattern:
  _1 = LBRACE _2 = lbl_pattern_list _3 = RBRACE
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
    ( let (fields, closed) = _2 in (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_record(fields, closed)) )}
| _1 = LBRACKET _2 = pattern_semi_list _3 = opt_semi _4 = RBRACKET
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
    ( (reloc_pat ~loc:(make_loc _symbolstartpos _endpos)) (mktailpat ((make_loc _startpos__4_ _endpos__4_)) (List.rev _2)) )}
| _1 = LBRACKETBAR _2 = pattern_semi_list _3 = opt_semi _4 = BARRBRACKET
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
    ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_array(List.rev _2)) )}
| _1 = LBRACKETBAR _2 = BARRBRACKET
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
    ( (mkpat ~loc:(make_loc _symbolstartpos _endpos))(Ppat_array []) )}

pattern_comma_list:
  _1 = pattern_comma_list _2 = COMMA _3 = pattern
    {                                     ( _3 :: _1 )}
| _1 = pattern _2 = COMMA _3 = pattern
    {                          ( [_3; _1] )}

pattern_semi_list:
  _1 = pattern
    {            ( [_1] )}
| _1 = pattern_semi_list _2 = SEMI _3 = pattern
    {                                   ( _3 :: _1 )}

pattern_no_exn_comma_list:
  _1 = pattern_no_exn_comma_list _2 = COMMA _3 = pattern
    {                                            ( _3 :: _1 )}
| _1 = pattern_no_exn _2 = COMMA _3 = pattern
    {                                 ( [_3; _1] )}

lbl_pattern_list:
  _1 = lbl_pattern
    {                ( [_1], Closed )}
| _1 = lbl_pattern _2 = SEMI
    {                     ( [_1], Closed )}
| _1 = lbl_pattern _2 = SEMI _3 = UNDERSCORE _4 = opt_semi
    {                                         ( [_1], Open )}
| _1 = lbl_pattern _2 = SEMI _3 = lbl_pattern_list
    {      ( let (fields, closed) = _3 in _1 :: fields, closed )}

lbl_pattern:
  _1 = label_longident _2 = opt_pattern_type_constraint _3 = EQUAL _4 = pattern
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (_1, (mkpat_opt_constraint ~loc:(make_loc _symbolstartpos _endpos)) _4 _2) )}
| _1 = label_longident _2 = opt_pattern_type_constraint
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (_1, (mkpat_opt_constraint ~loc:(make_loc _symbolstartpos _endpos)) ((pat_of_label ~loc:(make_loc _symbolstartpos _endpos) _1.Location.txt (make_loc _startpos__1_ _endpos__1_))) _2) )}

opt_pattern_type_constraint:
  _1 = COLON _2 = core_type
    {                    ( Some _2 )}
| 
    {    ( None )}

value_description:
  _1 = VAL _2 = ext_attributes _1_inlined1 = val_ident _4 = COLON _5 = core_type _6 = post_item_attributes
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _2 in
        Val.mk _3 _5 ~attrs:(attrs@_6)
               ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
      , ext )}

primitive_declaration_body:
  _1 = STRING
    {           ( [fst _1] )}
| _1 = STRING _2 = primitive_declaration_body
    {                                      ( fst _1 :: _2 )}

primitive_declaration:
  _1 = EXTERNAL _2 = ext_attributes _1_inlined1 = val_ident _4 = COLON _5 = core_type _6 = EQUAL _7 = primitive_declaration_body _8 = post_item_attributes
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__8_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _2 in
        Val.mk _3 _5 ~prim:_7 ~attrs:(attrs@_8)
               ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
      , ext )}

type_declarations:
  _1 = type_declaration
    {      ( let (nonrec_flag, ty, ext) = _1 in (nonrec_flag, [ty], ext) )}
| _1 = type_declarations _2 = and_type_declaration
    {      ( let (nonrec_flag, tys, ext) = _1 in (nonrec_flag, _2 :: tys, ext) )}

type_declaration:
  _1 = TYPE _2 = ext_attributes _3 = nonrec_flag _4 = optional_type_parameters _1_inlined1 = LIDENT _6 = type_kind _7 = constraints _8 = post_item_attributes
    {let _5 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__8_ in
let _symbolstartpos = _startpos__1_ in
      ( let (kind, priv, manifest) = _6 in
        let (ext, attrs) = _2 in
        let ty =
          Type.mk _5 ~params:_4 ~cstrs:(List.rev _7) ~kind
            ~priv ?manifest ~attrs:(attrs@_8)
            ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
        in
          (_3, ty, ext) )}

and_type_declaration:
  _1 = AND _2 = attributes _3 = optional_type_parameters _1_inlined1 = LIDENT _5 = type_kind _6 = constraints _7 = post_item_attributes
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__7_ in
let _startpos = _startpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( let (kind, priv, manifest) = _5 in
          Type.mk _4 ~params:_3 ~cstrs:(List.rev _6)
            ~kind ~priv ?manifest ~attrs:(_2@_7) ~loc:(((make_loc _symbolstartpos _endpos)))
            ~text:((symbol_text _startpos)) ~docs:((symbol_docs _symbolstartpos _endpos)) )}

constraints:
  _1 = constraints _2 = CONSTRAINT _3 = constrain
    {                                         ( _3 :: _1 )}
| 
    {        ( [] )}

type_kind:
  
    {      ( (Ptype_abstract, Public, None) )}
| _1 = EQUAL _2 = core_type
    {      ( (Ptype_abstract, Public, Some _2) )}
| _1 = EQUAL _2 = PRIVATE _3 = core_type
    {      ( (Ptype_abstract, Private, Some _3) )}
| _1 = EQUAL _2 = constructor_declarations
    {      ( (Ptype_variant(List.rev _2), Public, None) )}
| _1 = EQUAL _2 = PRIVATE _3 = constructor_declarations
    {      ( (Ptype_variant(List.rev _3), Private, None) )}
| _1 = EQUAL _2 = DOTDOT
    {      ( (Ptype_open, Public, None) )}
| _1 = EQUAL _2 = private_flag _3 = LBRACE _4 = label_declarations _5 = RBRACE
    {      ( (Ptype_record _4, _2, None) )}
| _1 = EQUAL _2 = core_type _3 = EQUAL _4 = private_flag _5 = constructor_declarations
    {      ( (Ptype_variant(List.rev _5), _4, Some _2) )}
| _1 = EQUAL _2 = core_type _3 = EQUAL _4 = DOTDOT
    {      ( (Ptype_open, Public, Some _2) )}
| _1 = EQUAL _2 = core_type _3 = EQUAL _4 = private_flag _5 = LBRACE _6 = label_declarations _7 = RBRACE
    {      ( (Ptype_record _6, _4, Some _2) )}

optional_type_parameters:
  
    {                                                ( [] )}
| _1 = optional_type_parameter
    {                            ( [_1] )}
| _1 = LPAREN _2 = optional_type_parameter_list _3 = RPAREN
    {                                               ( List.rev _2 )}

optional_type_parameter:
  _1 = type_variance _2 = optional_type_variable
    {                                         ( _2, _1 )}

optional_type_parameter_list:
  _1 = optional_type_parameter
    {                            ( [_1] )}
| _1 = optional_type_parameter_list _2 = COMMA _3 = optional_type_parameter
    {                                                               ( _3 :: _1 )}

optional_type_variable:
  _1 = QUOTE _2 = ident
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
                ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_var _2) )}
| _1 = UNDERSCORE
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
               ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_any) )}

type_parameters:
  
    {                                                ( [] )}
| _1 = type_parameter
    {                   ( [_1] )}
| _1 = LPAREN _2 = type_parameter_list _3 = RPAREN
    {                                      ( List.rev _2 )}

type_parameter:
  _1 = type_variance _2 = type_variable
    {                                ( _2, _1 )}

type_variance:
  
    {                                                ( Invariant )}
| _1 = PLUS
    {         ( Covariant )}
| _1 = MINUS
    {          ( Contravariant )}

type_variable:
  _1 = QUOTE _2 = ident
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
                ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_var _2) )}

type_parameter_list:
  _1 = type_parameter
    {                   ( [_1] )}
| _1 = type_parameter_list _2 = COMMA _3 = type_parameter
    {                                             ( _3 :: _1 )}

constructor_declarations:
  _1 = constructor_declaration
    {                            ( [_1] )}
| _1 = bar_constructor_declaration
    {                                ( [_1] )}
| _1 = constructor_declarations _2 = bar_constructor_declaration
    {                                                         ( _2 :: _1 )}

constructor_declaration:
  _1 = constr_ident _2 = generalized_constructor_arguments _3 = attributes
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      (
       let args,res = _2 in
       Type.constructor _1 ~args ?res ~attrs:_3
         ~loc:(((make_loc _symbolstartpos _endpos))) ~info:((symbol_info _endpos))
      )}

bar_constructor_declaration:
  _1 = BAR _1_inlined1 = constr_ident _3 = generalized_constructor_arguments _4 = attributes
    {let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      (
       let args,res = _3 in
       Type.constructor _2 ~args ?res ~attrs:_4
         ~loc:(((make_loc _symbolstartpos _endpos))) ~info:((symbol_info _endpos))
      )}

str_exception_declaration:
  _1 = sig_exception_declaration
    {                              ( _1 )}
| _1 = EXCEPTION _2 = ext_attributes _1_inlined1 = constr_ident _4 = EQUAL _1_inlined2 = constr_longident _6 = attributes _7 = post_item_attributes
    {let _5 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__7_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _2 in
        Te.rebind _3 _5 ~attrs:(attrs @ _6 @ _7)
          ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
        , ext )}

sig_exception_declaration:
  _1 = EXCEPTION _2 = ext_attributes _1_inlined1 = constr_ident _4 = generalized_constructor_arguments _5 = attributes _6 = post_item_attributes
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( let args, res = _4 in
        let (ext,attrs) = _2 in
          Te.decl _3 ~args ?res ~attrs:(attrs @ _5 @ _6)
            ~loc:(((make_loc _symbolstartpos _endpos))) ~docs:((symbol_docs _symbolstartpos _endpos))
        , ext )}

let_exception_declaration:
  _1 = constr_ident _2 = generalized_constructor_arguments _3 = attributes
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( let args, res = _2 in
        Te.decl _1 ~args ?res ~attrs:_3 ~loc:(((make_loc _symbolstartpos _endpos))) )}

generalized_constructor_arguments:
  
    {                                  ( (Pcstr_tuple [],None) )}
| _1 = OF _2 = constructor_arguments
    {                             ( (_2,None) )}
| _1 = COLON _2 = constructor_arguments _3 = MINUSGREATER _4 = simple_core_type
    {                                  ( (_2,Some _4) )}
| _1 = COLON _2 = simple_core_type
    {                                  ( (Pcstr_tuple [],Some _2) )}

constructor_arguments:
  _1 = core_type_list
    {                   ( Pcstr_tuple (List.rev _1) )}
| _1 = LBRACE _2 = label_declarations _3 = RBRACE
    {                                     ( Pcstr_record _2 )}

label_declarations:
  _1 = label_declaration
    {                      ( [_1] )}
| _1 = label_declaration_semi
    {                           ( [_1] )}
| _1 = label_declaration_semi _2 = label_declarations
    {                                              ( _1 :: _2 )}

label_declaration:
  _1 = mutable_flag _1_inlined1 = label _3 = COLON _4 = poly_type_no_attr _5 = attributes
    {let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _startpos__2_ = _startpos__1_inlined1_ in
let _endpos = _endpos__5_ in
let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
  _startpos__1_
else
  _startpos__2_ in
      (
       Type.field _2 _4 ~mut:_1 ~attrs:_5
         ~loc:(((make_loc _symbolstartpos _endpos))) ~info:((symbol_info _endpos))
      )}

label_declaration_semi:
  _1 = mutable_flag _1_inlined1 = label _3 = COLON _4 = poly_type_no_attr _5 = attributes _6 = SEMI _7 = attributes
    {let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _startpos__2_ = _startpos__1_inlined1_ in
let _endpos = _endpos__7_ in
let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
  _startpos__1_
else
  _startpos__2_ in
      (
       let info =
         match (rhs_info _endpos__5_) with
         | Some _ as info_before_semi -> info_before_semi
         | None -> (symbol_info _endpos)
       in
       Type.field _2 _4 ~mut:_1 ~attrs:(_5 @ _7)
         ~loc:(((make_loc _symbolstartpos _endpos))) ~info
      )}

str_type_extension:
  _1 = TYPE _2 = ext_attributes _3 = nonrec_flag _4 = optional_type_parameters _1_inlined1 = type_longident _6 = PLUSEQ _7 = private_flag _8 = str_extension_constructors _9 = post_item_attributes
    {let _5 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__9_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _2 in
        if _3 <> Recursive then (not_expecting (make_loc _startpos__3_ _endpos__3_) "nonrec flag");
        Te.mk _5 (List.rev _8) ~params:_4 ~priv:_7
          ~attrs:(attrs@_9) ~docs:((symbol_docs _symbolstartpos _endpos))
        , ext )}

sig_type_extension:
  _1 = TYPE _2 = ext_attributes _3 = nonrec_flag _4 = optional_type_parameters _1_inlined1 = type_longident _6 = PLUSEQ _7 = private_flag _8 = sig_extension_constructors _9 = post_item_attributes
    {let _5 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__9_ in
let _symbolstartpos = _startpos__1_ in
      ( let (ext, attrs) = _2 in
        if _3 <> Recursive then (not_expecting (make_loc _startpos__3_ _endpos__3_) "nonrec flag");
        Te.mk _5 (List.rev _8) ~params:_4 ~priv:_7
          ~attrs:(attrs @ _9) ~docs:((symbol_docs _symbolstartpos _endpos))
        , ext )}

str_extension_constructors:
  _1 = extension_constructor_declaration
    {                                      ( [_1] )}
| _1 = bar_extension_constructor_declaration
    {                                          ( [_1] )}
| _1 = extension_constructor_rebind
    {                                 ( [_1] )}
| _1 = bar_extension_constructor_rebind
    {                                     ( [_1] )}
| _1 = str_extension_constructors _2 = bar_extension_constructor_declaration
    {      ( _2 :: _1 )}
| _1 = str_extension_constructors _2 = bar_extension_constructor_rebind
    {      ( _2 :: _1 )}

sig_extension_constructors:
  _1 = extension_constructor_declaration
    {                                      ( [_1] )}
| _1 = bar_extension_constructor_declaration
    {                                          ( [_1] )}
| _1 = sig_extension_constructors _2 = bar_extension_constructor_declaration
    {      ( _2 :: _1 )}

extension_constructor_declaration:
  _1 = constr_ident _2 = generalized_constructor_arguments _3 = attributes
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( let args, res = _2 in
        Te.decl _1 ~args ?res ~attrs:_3
          ~loc:(((make_loc _symbolstartpos _endpos))) ~info:((symbol_info _endpos)) )}

bar_extension_constructor_declaration:
  _1 = BAR _1_inlined1 = constr_ident _3 = generalized_constructor_arguments _4 = attributes
    {let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( let args, res = _3 in
        Te.decl _2 ~args ?res ~attrs:_4
           ~loc:(((make_loc _symbolstartpos _endpos))) ~info:((symbol_info _endpos)) )}

extension_constructor_rebind:
  _1 = constr_ident _2 = EQUAL _1_inlined1 = constr_longident _4 = attributes
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( Te.rebind _1 _3 ~attrs:_4
          ~loc:(((make_loc _symbolstartpos _endpos))) ~info:((symbol_info _endpos)) )}

bar_extension_constructor_rebind:
  _1 = BAR _1_inlined1 = constr_ident _3 = EQUAL _1_inlined2 = constr_longident _5 = attributes
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( Te.rebind _2 _4 ~attrs:_5
          ~loc:(((make_loc _symbolstartpos _endpos))) ~info:((symbol_info _endpos)) )}

with_constraints:
  _1 = with_constraint
    {                    ( [_1] )}
| _1 = with_constraints _2 = AND _3 = with_constraint
    {                                         ( _3 :: _1 )}

with_constraint:
  _1 = TYPE _2 = type_parameters _3 = label_longident _4 = with_type_binder _5 = core_type_no_attr _6 = constraints
    {let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( Pwith_type
          ((mkrhs _3 (make_loc _startpos__3_ _endpos__3_)),
           (Type.mk ((mkrhs (Longident.last _3) (make_loc _startpos__3_ _endpos__3_)))
              ~params:_2
              ~cstrs:(List.rev _6)
              ~manifest:_5
              ~priv:_4
              ~loc:((make_loc _symbolstartpos _endpos)))) )}
| _1 = TYPE _2 = type_parameters _1_inlined1 = label _4 = COLONEQUAL _5 = core_type_no_attr
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( Pwith_typesubst
          (Type.mk _3
             ~params:_2
             ~manifest:_5
             ~loc:((make_loc _symbolstartpos _endpos))) )}
| _1 = MODULE _1_inlined1 = mod_longident _3 = EQUAL _1_inlined2 = mod_ext_longident
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
      ( Pwith_module (_2, _4) )}
| _1 = MODULE _1_inlined1 = UIDENT _3 = COLONEQUAL _1_inlined2 = mod_ext_longident
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
      ( Pwith_modsubst (_2, _4) )}

with_type_binder:
  _1 = EQUAL
    {          ( Public )}
| _1 = EQUAL _2 = PRIVATE
    {                  ( Private )}

typevar_list:
  _1 = QUOTE _1_inlined1 = ident
    {let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
                           ( [_2] )}
| _1 = typevar_list _2 = QUOTE _1_inlined1 = ident
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
                                        ( _3 :: _1 )}

poly_type:
  _1 = core_type
    {          ( _1 )}
| _1 = typevar_list _2 = DOT _3 = core_type
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
          ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_poly(List.rev _1, _3)) )}

poly_type_no_attr:
  _1 = core_type_no_attr
    {          ( _1 )}
| _1 = typevar_list _2 = DOT _3 = core_type_no_attr
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
          ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_poly(List.rev _1, _3)) )}

core_type:
  _1 = core_type_no_attr
    {      ( _1 )}
| _1 = core_type _2 = attribute
    {      ( Typ.attr _1 _2 )}

core_type_no_attr:
  _1 = core_type2 %prec MINUSGREATER
    {      ( _1 )}
| _1 = core_type2 _2 = AS _3 = QUOTE _4 = ident
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_alias(_1, _4)) )}

core_type2:
  _1 = simple_core_type_or_tuple
    {      ( _1 )}
| _1 = QUESTION _2 = LIDENT _3 = COLON _4 = core_type2 _5 = MINUSGREATER _6 = core_type2
    {let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( let param = (extra_rhs_core_type _4 _endpos__4_) in
        (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_arrow(Optional _2, param, _6)) )}
| _1 = OPTLABEL _2 = core_type2 _3 = MINUSGREATER _4 = core_type2
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( let param = (extra_rhs_core_type _2 _endpos__2_) in
        (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_arrow(Optional _1, param, _4)) )}
| _1 = LIDENT _2 = COLON _3 = core_type2 _4 = MINUSGREATER _5 = core_type2
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( let param = (extra_rhs_core_type _3 _endpos__3_) in
        (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_arrow(Labelled _1, param, _5)) )}
| _1 = core_type2 _2 = MINUSGREATER _3 = core_type2
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( let param = (extra_rhs_core_type _1 _endpos__1_) in
        (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_arrow(Nolabel, param, _3)) )}

simple_core_type:
  _1 = simple_core_type2 %prec below_SHARP
    {      ( _1 )}
| _1 = LPAREN _2 = core_type_comma_list _3 = RPAREN %prec below_SHARP
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( match _2 with [sty] -> sty | _ ->
        raise_error (Syntaxerr.Error(Syntaxerr.Other (make_loc _symbolstartpos _endpos)));
        (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_any) )}

simple_core_type2:
  _1 = QUOTE _2 = ident
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_var _2) )}
| _1 = UNDERSCORE
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_any) )}
| _1 = type_longident
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_constr(_1, [])) )}
| _1 = simple_core_type2 _1_inlined1 = type_longident
    {let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos__2_ = _endpos__1_inlined1_ in
let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_constr(_2, [_1])) )}
| _1 = LPAREN _2 = core_type_comma_list _3 = RPAREN _1_inlined1 = type_longident
    {let _4 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos__4_ = _endpos__1_inlined1_ in
let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_constr(_4, List.rev _2)) )}
| _1 = LESS _2 = meth_list _3 = GREATER
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( let (f, c) = _2 in (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_object (f, c)) )}
| _1 = LESS _2 = GREATER
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_object ([], Closed)) )}
| _1 = SHARP _1_inlined1 = class_longident
    {let _2 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos__2_ = _endpos__1_inlined1_ in
let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_class(_2, [])) )}
| _1 = simple_core_type2 _2 = SHARP _1_inlined1 = class_longident
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos__3_ = _endpos__1_inlined1_ in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_class(_3, [_1])) )}
| _1 = LPAREN _2 = core_type_comma_list _3 = RPAREN _4 = SHARP _1_inlined1 = class_longident
    {let _5 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos__5_ = _endpos__1_inlined1_ in
let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_class(_5, List.rev _2)) )}
| _1 = LBRACKET _2 = tag_field _3 = RBRACKET
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_variant([_2], Closed, None)) )}
| _1 = LBRACKET _2 = BAR _3 = row_field_list _4 = RBRACKET
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_variant(List.rev _3, Closed, None)) )}
| _1 = LBRACKET _2 = row_field _3 = BAR _4 = row_field_list _5 = RBRACKET
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_variant(_2 :: List.rev _4, Closed, None)) )}
| _1 = LBRACKETGREATER _2 = opt_bar _3 = row_field_list _4 = RBRACKET
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_variant(List.rev _3, Open, None)) )}
| _1 = LBRACKETGREATER _2 = RBRACKET
    {let _endpos = _endpos__2_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_variant([], Open, None)) )}
| _1 = LBRACKETLESS _2 = opt_bar _3 = row_field_list _4 = RBRACKET
    {let _endpos = _endpos__4_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_variant(List.rev _3, Closed, Some [])) )}
| _1 = LBRACKETLESS _2 = opt_bar _3 = row_field_list _4 = GREATER _5 = name_tag_list _6 = RBRACKET
    {let _endpos = _endpos__6_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_variant(List.rev _3, Closed, Some (List.rev _5))) )}
| _1 = LPAREN _2 = MODULE _3 = ext_attributes _4 = package_type _5 = RPAREN
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp_attrs ~loc:(make_loc _symbolstartpos _endpos)) (Ptyp_package _4) _3 )}
| _1 = extension
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos)) (Ptyp_extension _1) )}

package_type:
  _1 = module_type
    {                ( package_type_of_module_type _1 )}

row_field_list:
  _1 = row_field
    {              ( [_1] )}
| _1 = row_field_list _2 = BAR _3 = row_field
    {                                 ( _3 :: _1 )}

row_field:
  _1 = tag_field
    {              ( _1 )}
| _1 = simple_core_type
    {                     ( Rinherit _1 )}

tag_field:
  _1 = name_tag _2 = OF _3 = opt_ampersand _4 = amper_type_list _5 = attributes
    {let _endpos = _endpos__5_ in
      ( Rtag (_1, add_info_attrs ((symbol_info _endpos)) _5, _3, List.rev _4) )}
| _1 = name_tag _2 = attributes
    {let _endpos = _endpos__2_ in
      ( Rtag (_1, add_info_attrs ((symbol_info _endpos)) _2, true, []) )}

opt_ampersand:
  _1 = AMPERSAND
    {              ( true )}
| 
    {    ( false )}

amper_type_list:
  _1 = core_type_no_attr
    {                      ( [_1] )}
| _1 = amper_type_list _2 = AMPERSAND _3 = core_type_no_attr
    {                                                ( _3 :: _1 )}

name_tag_list:
  _1 = name_tag
    {             ( [_1] )}
| _1 = name_tag_list _2 = name_tag
    {                           ( _2 :: _1 )}

simple_core_type_or_tuple:
  _1 = simple_core_type
    {                     ( _1 )}
| _1 = simple_core_type _2 = STAR _3 = core_type_list
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
      ( (mktyp ~loc:(make_loc _symbolstartpos _endpos))(Ptyp_tuple(_1 :: List.rev _3)) )}

core_type_comma_list:
  _1 = core_type
    {              ( [_1] )}
| _1 = core_type_comma_list _2 = COMMA _3 = core_type
    {                                         ( _3 :: _1 )}

core_type_list:
  _1 = simple_core_type
    {                     ( [_1] )}
| _1 = core_type_list _2 = STAR _3 = simple_core_type
    {                                         ( _3 :: _1 )}

meth_list:
  _1 = field_semi _2 = meth_list
    {                         ( let (f, c) = _2 in (_1 :: f, c) )}
| _1 = field_semi
    {               ( [_1], Closed )}
| _1 = field
    {          ( [_1], Closed )}
| _1 = DOTDOT
    {           ( [], Open )}

field:
  _1 = label _2 = COLON _3 = poly_type_no_attr _4 = attributes
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__4_ in
    ( (_1, add_info_attrs ((symbol_info _endpos)) _4, _3) )}

field_semi:
  _1 = label _2 = COLON _3 = poly_type_no_attr _4 = attributes _5 = SEMI _6 = attributes
    {let _1 =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
      (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide. *)
      mkrhs _1 (make_loc _startpos _endpos) )
in
let _endpos = _endpos__6_ in
    ( let info =
        match (rhs_info _endpos__4_) with
        | Some _ as info_before_semi -> info_before_semi
        | None -> (symbol_info _endpos)
      in
      (_1, add_info_attrs info (_4 @ _6), _3) )}

label:
  _1 = LIDENT
    {           ( _1 )}

constant:
  _1 = INT
    {        ( let (n, m) = _1 in Pconst_integer (n, m) )}
| _1 = CHAR
    {         ( Pconst_char _1 )}
| _1 = STRING
    {           ( let (s, d) = _1 in Pconst_string (s, d) )}
| _1 = FLOAT
    {          ( let (f, m) = _1 in Pconst_float (f, m) )}

signed_constant:
  _1 = constant
    {             ( _1 )}
| _1 = MINUS _2 = INT
    {              ( let (n, m) = _2 in Pconst_integer("-" ^ n, m) )}
| _1 = MINUS _2 = FLOAT
    {                ( let (f, m) = _2 in Pconst_float("-" ^ f, m) )}
| _1 = PLUS _2 = INT
    {             ( let (n, m) = _2 in Pconst_integer (n, m) )}
| _1 = PLUS _2 = FLOAT
    {               ( let (f, m) = _2 in Pconst_float(f, m) )}

ident:
  _1 = UIDENT
    {           ( _1 )}
| _1 = LIDENT
    {           ( _1 )}

val_ident:
  _1 = LIDENT
    {           ( _1 )}
| _1 = LPAREN _2 = operator _3 = RPAREN
    {                           ( _2 )}

operator:
  _1 = PREFIXOP
    {             ( _1 )}
| _1 = INFIXOP0
    {             ( _1 )}
| _1 = INFIXOP1
    {             ( _1 )}
| _1 = INFIXOP2
    {             ( _1 )}
| _1 = INFIXOP3
    {             ( _1 )}
| _1 = INFIXOP4
    {             ( _1 )}
| _1 = SHARPOP
    {            ( _1 )}
| _1 = BANG
    {         ( "!" )}
| _1 = PLUS
    {         ( "+" )}
| _1 = PLUSDOT
    {            ( "+." )}
| _1 = MINUS
    {          ( "-" )}
| _1 = MINUSDOT
    {             ( "-." )}
| _1 = STAR
    {         ( "*" )}
| _1 = EQUAL
    {          ( "=" )}
| _1 = LESS
    {         ( "<" )}
| _1 = GREATER
    {            ( ">" )}
| _1 = OR
    {       ( "or" )}
| _1 = BARBAR
    {           ( "||" )}
| _1 = AMPERSAND
    {              ( "&" )}
| _1 = AMPERAMPER
    {               ( "&&" )}
| _1 = COLONEQUAL
    {               ( ":=" )}
| _1 = PLUSEQ
    {           ( "+=" )}
| _1 = PERCENT
    {            ( "%" )}

constr_ident:
  _1 = UIDENT
    {           ( _1 )}
| _1 = LBRACKET _2 = RBRACKET
    {                      ( "[]" )}
| _1 = LPAREN _2 = RPAREN
    {                  ( "()" )}
| _1 = LPAREN _2 = COLONCOLON _3 = RPAREN
    {                             ( "::" )}
| _1 = FALSE
    {          ( "false" )}
| _1 = TRUE
    {         ( "true" )}

val_longident:
  _1 = val_ident
    {              ( Lident _1 )}
| _1 = mod_longident _2 = DOT _3 = val_ident
    {                                ( Ldot(_1, _3) )}

constr_longident:
  _1 = mod_longident %prec below_DOT
    {                                  ( _1 )}
| _1 = LBRACKET _2 = RBRACKET
    {                      ( Lident "[]" )}
| _1 = LPAREN _2 = RPAREN
    {                  ( Lident "()" )}
| _1 = FALSE
    {          ( Lident "false" )}
| _1 = TRUE
    {         ( Lident "true" )}

label_longident:
  _1 = LIDENT
    {           ( Lident _1 )}
| _1 = mod_longident _2 = DOT _3 = LIDENT
    {                             ( Ldot(_1, _3) )}

type_longident:
  _1 = LIDENT
    {           ( Lident _1 )}
| _1 = mod_ext_longident _2 = DOT _3 = LIDENT
    {                                 ( Ldot(_1, _3) )}

mod_longident:
  _1 = UIDENT
    {           ( Lident _1 )}
| _1 = mod_longident _2 = DOT _3 = UIDENT
    {                             ( Ldot(_1, _3) )}

mod_ext_longident:
  _1 = UIDENT
    {           ( Lident _1 )}
| _1 = mod_ext_longident _2 = DOT _3 = UIDENT
    {                                 ( Ldot(_1, _3) )}
| _1 = mod_ext_longident _2 = LPAREN _3 = mod_ext_longident _4 = RPAREN
    {                                                      ( lapply _1 _3 )}

mty_longident:
  _1 = ident
    {          ( Lident _1 )}
| _1 = mod_ext_longident _2 = DOT _3 = ident
    {                                ( Ldot(_1, _3) )}

clty_longident:
  _1 = LIDENT
    {           ( Lident _1 )}
| _1 = mod_ext_longident _2 = DOT _3 = LIDENT
    {                                 ( Ldot(_1, _3) )}

class_longident:
  _1 = LIDENT
    {           ( Lident _1 )}
| _1 = mod_longident _2 = DOT _3 = LIDENT
    {                             ( Ldot(_1, _3) )}

toplevel_directive:
  _1 = SHARP _2 = ident
    {let _3 =                 ( None ) in
let _endpos__3_ = _endpos__2_ in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
    ( let id = mkloc ("merlin.directive." ^ _2) ((make_loc _startpos__2_ _endpos__2_)) in
      let payload =
        match _3 with
        | None -> PStr []
        | Some exp -> PStr [mkstrexp exp []]
      in
      (mkstr ~loc:(make_loc _symbolstartpos _endpos))(Pstr_attribute (id,payload))
    )}
| _1 = SHARP _2 = ident _1_inlined1 = STRING
    {let _3 =
  let _1 = _1_inlined1 in
             ( let (s, d) = _1 in
                  Some (Exp.constant (Pconst_string (s, d) )) )
in
let _endpos__3_ = _endpos__1_inlined1_ in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
    ( let id = mkloc ("merlin.directive." ^ _2) ((make_loc _startpos__2_ _endpos__2_)) in
      let payload =
        match _3 with
        | None -> PStr []
        | Some exp -> PStr [mkstrexp exp []]
      in
      (mkstr ~loc:(make_loc _symbolstartpos _endpos))(Pstr_attribute (id,payload))
    )}
| _1 = SHARP _2 = ident _1_inlined1 = INT
    {let _3 =
  let _1 = _1_inlined1 in
          ( let (n, m) = _1 in
                  Some (Exp.constant (Pconst_integer (n, m))) )
in
let _endpos__3_ = _endpos__1_inlined1_ in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
    ( let id = mkloc ("merlin.directive." ^ _2) ((make_loc _startpos__2_ _endpos__2_)) in
      let payload =
        match _3 with
        | None -> PStr []
        | Some exp -> PStr [mkstrexp exp []]
      in
      (mkstr ~loc:(make_loc _symbolstartpos _endpos))(Pstr_attribute (id,payload))
    )}
| _1 = SHARP _2 = ident _1_inlined1 = val_longident
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _symbolstartpos = _startpos__1_ in
                                    ( Some (Exp.ident (mkloc _1 ((make_loc _symbolstartpos _endpos)))) )
in
let _endpos__3_ = _endpos__1_inlined1_ in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
    ( let id = mkloc ("merlin.directive." ^ _2) ((make_loc _startpos__2_ _endpos__2_)) in
      let payload =
        match _3 with
        | None -> PStr []
        | Some exp -> PStr [mkstrexp exp []]
      in
      (mkstr ~loc:(make_loc _symbolstartpos _endpos))(Pstr_attribute (id,payload))
    )}
| _1 = SHARP _2 = ident _1_inlined1 = mod_longident
    {let _3 =
  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
  let _endpos = _endpos__1_ in
  let _symbolstartpos = _startpos__1_ in
                                    ( Some (Exp.ident (mkloc _1 ((make_loc _symbolstartpos _endpos)))) )
in
let _endpos__3_ = _endpos__1_inlined1_ in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
    ( let id = mkloc ("merlin.directive." ^ _2) ((make_loc _startpos__2_ _endpos__2_)) in
      let payload =
        match _3 with
        | None -> PStr []
        | Some exp -> PStr [mkstrexp exp []]
      in
      (mkstr ~loc:(make_loc _symbolstartpos _endpos))(Pstr_attribute (id,payload))
    )}
| _1 = SHARP _2 = ident _1_inlined1 = FALSE
    {let _3 =
  let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
  let _endpos = _endpos__1_ in
  let _symbolstartpos = _startpos__1_ in
            ( Some (Exp.construct (mkloc (Longident.Lident "false") ((make_loc _symbolstartpos _endpos))) None) )
in
let _endpos__3_ = _endpos__1_inlined1_ in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
    ( let id = mkloc ("merlin.directive." ^ _2) ((make_loc _startpos__2_ _endpos__2_)) in
      let payload =
        match _3 with
        | None -> PStr []
        | Some exp -> PStr [mkstrexp exp []]
      in
      (mkstr ~loc:(make_loc _symbolstartpos _endpos))(Pstr_attribute (id,payload))
    )}
| _1 = SHARP _2 = ident _1_inlined1 = TRUE
    {let _3 =
  let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
  let _endpos = _endpos__1_ in
  let _symbolstartpos = _startpos__1_ in
           ( Some (Exp.construct (mkloc (Longident.Lident "true") ((make_loc _symbolstartpos _endpos))) None) )
in
let _endpos__3_ = _endpos__1_inlined1_ in
let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
    ( let id = mkloc ("merlin.directive." ^ _2) ((make_loc _startpos__2_ _endpos__2_)) in
      let payload =
        match _3 with
        | None -> PStr []
        | Some exp -> PStr [mkstrexp exp []]
      in
      (mkstr ~loc:(make_loc _symbolstartpos _endpos))(Pstr_attribute (id,payload))
    )}

name_tag:
  _1 = BACKQUOTE _2 = ident
    {                    ( _2 )}

rec_flag:
  
    {                                                ( Nonrecursive )}
| _1 = REC
    {        ( Recursive )}

nonrec_flag:
  
    {                                                ( Recursive )}
| _1 = NONREC
    {           ( Nonrecursive )}

direction_flag:
  _1 = TO
    {       ( Upto )}
| _1 = DOWNTO
    {           ( Downto )}

private_flag:
  
    {                                                ( Public )}
| _1 = PRIVATE
    {            ( Private )}

mutable_flag:
  
    {                                                ( Immutable )}
| _1 = MUTABLE
    {            ( Mutable )}

virtual_flag:
  
    {                                                ( Concrete )}
| _1 = VIRTUAL
    {            ( Virtual )}

private_virtual_flags:
  
    {                 ( Public, Concrete )}
| _1 = PRIVATE
    {            ( Private, Concrete )}
| _1 = VIRTUAL
    {            ( Public, Virtual )}
| _1 = PRIVATE _2 = VIRTUAL
    {                    ( Private, Virtual )}
| _1 = VIRTUAL _2 = PRIVATE
    {                    ( Private, Virtual )}

override_flag:
  
    {                                                ( Fresh )}
| _1 = BANG
    {         ( Override )}

opt_bar:
  
    {                                                ( () )}
| _1 = BAR
    {        ( () )}

opt_semi:
  
    {    ( () )}
| _1 = SEMI
    {         ( () )}

subtractive:
  _1 = MINUS
    {          ( "-" )}
| _1 = MINUSDOT
    {             ( "-." )}

additive:
  _1 = PLUS
    {         ( "+" )}
| _1 = PLUSDOT
    {            ( "+." )}

single_attr_id:
  _1 = LIDENT
    {           ( _1 )}
| _1 = UIDENT
    {           ( _1 )}
| _1 = AND
    {        ( "and" )}
| _1 = AS
    {       ( "as" )}
| _1 = ASSERT
    {           ( "assert" )}
| _1 = BEGIN
    {          ( "begin" )}
| _1 = CLASS
    {          ( "class" )}
| _1 = CONSTRAINT
    {               ( "constraint" )}
| _1 = DO
    {       ( "do" )}
| _1 = DONE
    {         ( "done" )}
| _1 = DOWNTO
    {           ( "downto" )}
| _1 = ELSE
    {         ( "else" )}
| _1 = END
    {        ( "end" )}
| _1 = EXCEPTION
    {              ( "exception" )}
| _1 = EXTERNAL
    {             ( "external" )}
| _1 = FALSE
    {          ( "false" )}
| _1 = FOR
    {        ( "for" )}
| _1 = FUN
    {        ( "fun" )}
| _1 = FUNCTION
    {             ( "function" )}
| _1 = FUNCTOR
    {            ( "functor" )}
| _1 = IF
    {       ( "if" )}
| _1 = IN
    {       ( "in" )}
| _1 = INCLUDE
    {            ( "include" )}
| _1 = INHERIT
    {            ( "inherit" )}
| _1 = INITIALIZER
    {                ( "initializer" )}
| _1 = LAZY
    {         ( "lazy" )}
| _1 = LET
    {        ( "let" )}
| _1 = MATCH
    {          ( "match" )}
| _1 = METHOD
    {           ( "method" )}
| _1 = MODULE
    {           ( "module" )}
| _1 = MUTABLE
    {            ( "mutable" )}
| _1 = NEW
    {        ( "new" )}
| _1 = NONREC
    {           ( "nonrec" )}
| _1 = OBJECT
    {           ( "object" )}
| _1 = OF
    {       ( "of" )}
| _1 = OPEN
    {         ( "open" )}
| _1 = OR
    {       ( "or" )}
| _1 = PRIVATE
    {            ( "private" )}
| _1 = REC
    {        ( "rec" )}
| _1 = SIG
    {        ( "sig" )}
| _1 = STRUCT
    {           ( "struct" )}
| _1 = THEN
    {         ( "then" )}
| _1 = TO
    {       ( "to" )}
| _1 = TRUE
    {         ( "true" )}
| _1 = TRY
    {        ( "try" )}
| _1 = TYPE
    {         ( "type" )}
| _1 = VAL
    {        ( "val" )}
| _1 = VIRTUAL
    {            ( "virtual" )}
| _1 = WHEN
    {         ( "when" )}
| _1 = WHILE
    {          ( "while" )}
| _1 = WITH
    {         ( "with" )}

attr_id:
  _1 = single_attr_id
    {let _endpos = _endpos__1_ in
let _symbolstartpos = _startpos__1_ in
                   ( mkloc _1 ((make_loc _symbolstartpos _endpos)) )}
| _1 = single_attr_id _2 = DOT _3 = attr_id
    {let _endpos = _endpos__3_ in
let _symbolstartpos = _startpos__1_ in
                               ( mkloc (_1 ^ "." ^ _3.txt) ((make_loc _symbolstartpos _endpos)))}

attribute:
  _1 = LBRACKETAT _2 = attr_id _3 = payload _4 = RBRACKET
    {                                      ( (_2, _3) )}

post_item_attribute:
  _1 = LBRACKETATAT _2 = attr_id _3 = payload _4 = RBRACKET
    {                                        ( (_2, _3) )}

floating_attribute:
  _1 = LBRACKETATATAT _2 = attr_id _3 = payload _4 = RBRACKET
    {                                          ( (_2, _3) )}

post_item_attributes:
  
    {                 ( [] )}
| _1 = post_item_attribute _2 = post_item_attributes
    {                                             ( _1 :: _2 )}

attributes:
  
    {               ( [] )}
| _1 = attribute _2 = attributes
    {                         ( _1 :: _2 )}

ext_attributes:
  
    {                 ( None, [] )}
| _1 = attribute _2 = attributes
    {                         ( None, _1 :: _2 )}
| _1 = PERCENT _2 = attr_id _3 = attributes
    {                               ( Some _2, _3 )}

extension:
  _1 = LBRACKETPERCENT _2 = attr_id _3 = payload _4 = RBRACKET
    {                                           ( (_2, _3) )}

item_extension:
  _1 = LBRACKETPERCENTPERCENT _2 = attr_id _3 = payload _4 = RBRACKET
    {                                                  ( (_2, _3) )}

payload:
  _1 = structure
    {              ( PStr _1 )}
| _1 = COLON _2 = signature
    {                    ( PSig _2 )}
| _1 = COLON _2 = core_type
    {                    ( PTyp _2 )}
| _1 = QUESTION _2 = pattern
    {                     ( PPat (_2, None) )}
| _1 = QUESTION _2 = pattern _3 = WHEN _4 = seq_expr
    {                                   ( PPat (_2, Some _4) )}

%%




