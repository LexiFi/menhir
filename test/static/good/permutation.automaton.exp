State 0:
main' -> . main [ # ]
-- On A shift to state 1
-- On main shift to state 5
-- On aseq(A,B) shift to state 6
-- On EOF reduce production aseq(A,B) ->

State 1:
aseq(A,B) -> A . aseq(B,A) [ EOF ]
-- On B shift to state 2
-- On aseq(B,A) shift to state 4
-- On EOF reduce production aseq(B,A) ->

State 2:
aseq(B,A) -> B . aseq(A,B) [ EOF ]
-- On A shift to state 1
-- On aseq(A,B) shift to state 3
-- On EOF reduce production aseq(A,B) ->

State 3:
aseq(B,A) -> B aseq(A,B) . [ EOF ]
-- On EOF reduce production aseq(B,A) -> B aseq(A,B)

State 4:
aseq(A,B) -> A aseq(B,A) . [ EOF ]
-- On EOF reduce production aseq(A,B) -> A aseq(B,A)

State 5:
main' -> main . [ # ]
-- On # accept main

State 6:
main -> aseq(A,B) . EOF [ # ]
-- On EOF shift to state 7

State 7:
main -> aseq(A,B) EOF . [ # ]
-- On # reduce production main -> aseq(A,B) EOF

