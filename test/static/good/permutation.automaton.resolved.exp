State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On A shift to state 1
-- On main shift to state 5
-- On aseq(A,B) shift to state 6
## Reductions:
-- On EOF
--   reduce production aseq(A,B) ->

State 1:
## Known stack suffix:
## A
## LR(1) items:
aseq(A,B) -> A . aseq(B,A) [ EOF ]
## Transitions:
-- On B shift to state 2
-- On aseq(B,A) shift to state 4
## Reductions:
-- On EOF
--   reduce production aseq(B,A) ->

State 2:
## Known stack suffix:
## B
## LR(1) items:
aseq(B,A) -> B . aseq(A,B) [ EOF ]
## Transitions:
-- On A shift to state 1
-- On aseq(A,B) shift to state 3
## Reductions:
-- On EOF
--   reduce production aseq(A,B) ->

State 3:
## Known stack suffix:
## B aseq(A,B)
## LR(1) items:
aseq(B,A) -> B aseq(A,B) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aseq(B,A) -> B aseq(A,B)

State 4:
## Known stack suffix:
## A aseq(B,A)
## LR(1) items:
aseq(A,B) -> A aseq(B,A) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aseq(A,B) -> A aseq(B,A)

State 5:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept main

State 6:
## Known stack suffix:
## aseq(A,B)
## LR(1) items:
main -> aseq(A,B) . EOF [ # ]
## Transitions:
-- On EOF shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## aseq(A,B) EOF
## LR(1) items:
main -> aseq(A,B) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production main -> aseq(A,B) EOF

