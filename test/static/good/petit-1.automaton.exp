State 0:
program' -> . program [ # ]
-- On PROGRAM shift to state 1
-- On program shift to state 148

State 1:
program -> PROGRAM . variables list(procedure) block DOT [ # ]
-- On VAR shift to state 2
-- On variables shift to state 19
-- On loption(preceded(VAR,terminated_bindings)) shift to state 127
-- On PROCEDURE reduce production loption(preceded(VAR,terminated_bindings)) -> 
-- On FUNCTION reduce production loption(preceded(VAR,terminated_bindings)) -> 
-- On BEGIN reduce production loption(preceded(VAR,terminated_bindings)) -> 

State 2:
loption(preceded(VAR,terminated_bindings)) -> VAR . terminated_bindings [ PROCEDURE FUNCTION BEGIN ]
-- On ID shift to state 3
-- On terminated_bindings shift to state 6
-- On separated_nonempty_list(COMMA,ID) shift to state 7
-- On nonempty_list(terminated(binding,SEMICOLON)) shift to state 15
-- On binding shift to state 16

State 3:
separated_nonempty_list(COMMA,ID) -> ID . [ COLON ]
separated_nonempty_list(COMMA,ID) -> ID . COMMA separated_nonempty_list(COMMA,ID) [ COLON ]
-- On COMMA shift to state 4
-- On COLON reduce production separated_nonempty_list(COMMA,ID) -> ID

State 4:
separated_nonempty_list(COMMA,ID) -> ID COMMA . separated_nonempty_list(COMMA,ID) [ COLON ]
-- On ID shift to state 3
-- On separated_nonempty_list(COMMA,ID) shift to state 5

State 5:
separated_nonempty_list(COMMA,ID) -> ID COMMA separated_nonempty_list(COMMA,ID) . [ COLON ]
-- On COLON reduce production separated_nonempty_list(COMMA,ID) -> ID COMMA separated_nonempty_list(COMMA,ID)

State 6:
loption(preceded(VAR,terminated_bindings)) -> VAR terminated_bindings . [ PROCEDURE FUNCTION BEGIN ]
-- On PROCEDURE reduce production loption(preceded(VAR,terminated_bindings)) -> VAR terminated_bindings
-- On FUNCTION reduce production loption(preceded(VAR,terminated_bindings)) -> VAR terminated_bindings
-- On BEGIN reduce production loption(preceded(VAR,terminated_bindings)) -> VAR terminated_bindings

State 7:
binding -> separated_nonempty_list(COMMA,ID) . COLON typ [ SEMICOLON RPAREN ]
-- On COLON shift to state 8

State 8:
binding -> separated_nonempty_list(COMMA,ID) COLON . typ [ SEMICOLON RPAREN ]
-- On INTEGER shift to state 9
-- On BOOLEAN shift to state 10
-- On ARRAY shift to state 11
-- On typ shift to state 14

State 9:
typ -> INTEGER . [ SEMICOLON RPAREN LBRACKET ]
-- On SEMICOLON reduce production typ -> INTEGER
-- On RPAREN reduce production typ -> INTEGER
-- On LBRACKET reduce production typ -> INTEGER

State 10:
typ -> BOOLEAN . [ SEMICOLON RPAREN LBRACKET ]
-- On SEMICOLON reduce production typ -> BOOLEAN
-- On RPAREN reduce production typ -> BOOLEAN
-- On LBRACKET reduce production typ -> BOOLEAN

State 11:
typ -> ARRAY . OF typ [ SEMICOLON RPAREN LBRACKET ]
-- On OF shift to state 12

State 12:
typ -> ARRAY OF . typ [ SEMICOLON RPAREN LBRACKET ]
-- On INTEGER shift to state 9
-- On BOOLEAN shift to state 10
-- On ARRAY shift to state 11
-- On typ shift to state 13

State 13:
typ -> ARRAY OF typ . [ SEMICOLON RPAREN LBRACKET ]
-- On SEMICOLON reduce production typ -> ARRAY OF typ
-- On RPAREN reduce production typ -> ARRAY OF typ
-- On LBRACKET reduce production typ -> ARRAY OF typ

State 14:
binding -> separated_nonempty_list(COMMA,ID) COLON typ . [ SEMICOLON RPAREN ]
-- On SEMICOLON reduce production binding -> separated_nonempty_list(COMMA,ID) COLON typ
-- On RPAREN reduce production binding -> separated_nonempty_list(COMMA,ID) COLON typ

State 15:
terminated_bindings -> nonempty_list(terminated(binding,SEMICOLON)) . [ PROCEDURE FUNCTION BEGIN ]
-- On PROCEDURE reduce production terminated_bindings -> nonempty_list(terminated(binding,SEMICOLON))
-- On FUNCTION reduce production terminated_bindings -> nonempty_list(terminated(binding,SEMICOLON))
-- On BEGIN reduce production terminated_bindings -> nonempty_list(terminated(binding,SEMICOLON))

State 16:
nonempty_list(terminated(binding,SEMICOLON)) -> binding . SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
nonempty_list(terminated(binding,SEMICOLON)) -> binding . SEMICOLON nonempty_list(terminated(binding,SEMICOLON)) [ PROCEDURE FUNCTION BEGIN ]
-- On SEMICOLON shift to state 17

State 17:
nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON . [ PROCEDURE FUNCTION BEGIN ]
nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON . nonempty_list(terminated(binding,SEMICOLON)) [ PROCEDURE FUNCTION BEGIN ]
-- On ID shift to state 3
-- On separated_nonempty_list(COMMA,ID) shift to state 7
-- On nonempty_list(terminated(binding,SEMICOLON)) shift to state 18
-- On binding shift to state 16
-- On PROCEDURE reduce production nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON
-- On FUNCTION reduce production nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON
-- On BEGIN reduce production nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON

State 18:
nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON nonempty_list(terminated(binding,SEMICOLON)) . [ PROCEDURE FUNCTION BEGIN ]
-- On PROCEDURE reduce production nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON nonempty_list(terminated(binding,SEMICOLON))
-- On FUNCTION reduce production nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON nonempty_list(terminated(binding,SEMICOLON))
-- On BEGIN reduce production nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON nonempty_list(terminated(binding,SEMICOLON))

State 19:
program -> PROGRAM variables . list(procedure) block DOT [ # ]
-- On PROCEDURE shift to state 20
-- On FUNCTION shift to state 132
-- On procedure shift to state 143
-- On list(procedure) shift to state 145
-- On BEGIN reduce production list(procedure) -> 

State 20:
procedure -> PROCEDURE . ID LPAREN separated_bindings RPAREN SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On ID shift to state 21

State 21:
procedure -> PROCEDURE ID . LPAREN separated_bindings RPAREN SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On LPAREN shift to state 22

State 22:
procedure -> PROCEDURE ID LPAREN . separated_bindings RPAREN SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On ID shift to state 3
-- On separated_nonempty_list(SEMICOLON,binding) shift to state 23
-- On separated_nonempty_list(COMMA,ID) shift to state 7
-- On separated_bindings shift to state 24
-- On loption(separated_nonempty_list(SEMICOLON,binding)) shift to state 128
-- On binding shift to state 129
-- On RPAREN reduce production loption(separated_nonempty_list(SEMICOLON,binding)) -> 

State 23:
loption(separated_nonempty_list(SEMICOLON,binding)) -> separated_nonempty_list(SEMICOLON,binding) . [ RPAREN ]
-- On RPAREN reduce production loption(separated_nonempty_list(SEMICOLON,binding)) -> separated_nonempty_list(SEMICOLON,binding)

State 24:
procedure -> PROCEDURE ID LPAREN separated_bindings . RPAREN SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On RPAREN shift to state 25

State 25:
procedure -> PROCEDURE ID LPAREN separated_bindings RPAREN . SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On SEMICOLON shift to state 26

State 26:
procedure -> PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON . variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On VAR shift to state 2
-- On variables shift to state 27
-- On loption(preceded(VAR,terminated_bindings)) shift to state 127
-- On BEGIN reduce production loption(preceded(VAR,terminated_bindings)) -> 

State 27:
procedure -> PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON variables . block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On BEGIN shift to state 28
-- On block shift to state 125

State 28:
block -> BEGIN . loption(separated_nonempty_list(SEMICOLON,instruction)) END [ SEMICOLON END ELSE DOT ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On WHILE shift to state 31
-- On READLN shift to state 94
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On IF shift to state 103
-- On ID shift to state 96
-- On BOOLCONST shift to state 42
-- On separated_nonempty_list(SEMICOLON,instruction) shift to state 119
-- On raw_expression shift to state 43
-- On lvalue shift to state 106
-- On loption(separated_nonempty_list(SEMICOLON,instruction)) shift to state 120
-- On instruction shift to state 122
-- On expression shift to state 99
-- On callee shift to state 113
-- On END reduce production loption(separated_nonempty_list(SEMICOLON,instruction)) -> 

State 29:
callee -> WRITELN . [ LPAREN ]
-- On LPAREN reduce production callee -> WRITELN

State 30:
callee -> WRITE . [ LPAREN ]
-- On LPAREN reduce production callee -> WRITE

State 31:
instruction -> WHILE . condition DO instruction_or_block [ SEMICOLON END ELSE ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NOT shift to state 32
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 80
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On nontrivial_condition shift to state 86
-- On expression shift to state 87
-- On condition shift to state 92
-- On callee shift to state 51

State 32:
nontrivial_condition -> NOT . condition [ THEN RPAREN OR DO AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NOT shift to state 32
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 80
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On nontrivial_condition shift to state 86
-- On expression shift to state 87
-- On condition shift to state 91
-- On callee shift to state 51

State 33:
raw_expression -> NEW . ARRAY OF typ LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On ARRAY shift to state 34

State 34:
raw_expression -> NEW ARRAY . OF typ LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On OF shift to state 35

State 35:
raw_expression -> NEW ARRAY OF . typ LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On INTEGER shift to state 9
-- On BOOLEAN shift to state 10
-- On ARRAY shift to state 11
-- On typ shift to state 36

State 36:
raw_expression -> NEW ARRAY OF typ . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On LBRACKET shift to state 37

State 37:
raw_expression -> NEW ARRAY OF typ LBRACKET . expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 78
-- On callee shift to state 51

State 38:
raw_expression -> MINUS . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 77
-- On callee shift to state 51

State 39:
expression -> LPAREN . expression RPAREN [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 44
-- On callee shift to state 51

State 40:
raw_expression -> INTCONST . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES reduce production raw_expression -> INTCONST
-- On THEN reduce production raw_expression -> INTCONST
-- On SLASH reduce production raw_expression -> INTCONST
-- On SEMICOLON reduce production raw_expression -> INTCONST
-- On RPAREN reduce production raw_expression -> INTCONST
-- On RBRACKET reduce production raw_expression -> INTCONST
-- On PLUS reduce production raw_expression -> INTCONST
-- On OR reduce production raw_expression -> INTCONST
-- On NE reduce production raw_expression -> INTCONST
-- On MINUS reduce production raw_expression -> INTCONST
-- On LT reduce production raw_expression -> INTCONST
-- On LE reduce production raw_expression -> INTCONST
-- On LBRACKET reduce production raw_expression -> INTCONST
-- On GT reduce production raw_expression -> INTCONST
-- On GE reduce production raw_expression -> INTCONST
-- On EQ reduce production raw_expression -> INTCONST
-- On END reduce production raw_expression -> INTCONST
-- On ELSE reduce production raw_expression -> INTCONST
-- On DO reduce production raw_expression -> INTCONST
-- On COMMA reduce production raw_expression -> INTCONST
-- On AND reduce production raw_expression -> INTCONST

State 41:
callee -> ID . [ LPAREN ]
raw_expression -> ID . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES reduce production raw_expression -> ID
-- On THEN reduce production raw_expression -> ID
-- On SLASH reduce production raw_expression -> ID
-- On SEMICOLON reduce production raw_expression -> ID
-- On RPAREN reduce production raw_expression -> ID
-- On RBRACKET reduce production raw_expression -> ID
-- On PLUS reduce production raw_expression -> ID
-- On OR reduce production raw_expression -> ID
-- On NE reduce production raw_expression -> ID
-- On MINUS reduce production raw_expression -> ID
-- On LT reduce production raw_expression -> ID
-- On LPAREN reduce production callee -> ID
-- On LE reduce production raw_expression -> ID
-- On LBRACKET reduce production raw_expression -> ID
-- On GT reduce production raw_expression -> ID
-- On GE reduce production raw_expression -> ID
-- On EQ reduce production raw_expression -> ID
-- On END reduce production raw_expression -> ID
-- On ELSE reduce production raw_expression -> ID
-- On DO reduce production raw_expression -> ID
-- On COMMA reduce production raw_expression -> ID
-- On AND reduce production raw_expression -> ID

State 42:
raw_expression -> BOOLCONST . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES reduce production raw_expression -> BOOLCONST
-- On THEN reduce production raw_expression -> BOOLCONST
-- On SLASH reduce production raw_expression -> BOOLCONST
-- On SEMICOLON reduce production raw_expression -> BOOLCONST
-- On RPAREN reduce production raw_expression -> BOOLCONST
-- On RBRACKET reduce production raw_expression -> BOOLCONST
-- On PLUS reduce production raw_expression -> BOOLCONST
-- On OR reduce production raw_expression -> BOOLCONST
-- On NE reduce production raw_expression -> BOOLCONST
-- On MINUS reduce production raw_expression -> BOOLCONST
-- On LT reduce production raw_expression -> BOOLCONST
-- On LE reduce production raw_expression -> BOOLCONST
-- On LBRACKET reduce production raw_expression -> BOOLCONST
-- On GT reduce production raw_expression -> BOOLCONST
-- On GE reduce production raw_expression -> BOOLCONST
-- On EQ reduce production raw_expression -> BOOLCONST
-- On END reduce production raw_expression -> BOOLCONST
-- On ELSE reduce production raw_expression -> BOOLCONST
-- On DO reduce production raw_expression -> BOOLCONST
-- On COMMA reduce production raw_expression -> BOOLCONST
-- On AND reduce production raw_expression -> BOOLCONST

State 43:
expression -> raw_expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES reduce production expression -> raw_expression
-- On THEN reduce production expression -> raw_expression
-- On SLASH reduce production expression -> raw_expression
-- On SEMICOLON reduce production expression -> raw_expression
-- On RPAREN reduce production expression -> raw_expression
-- On RBRACKET reduce production expression -> raw_expression
-- On PLUS reduce production expression -> raw_expression
-- On OR reduce production expression -> raw_expression
-- On NE reduce production expression -> raw_expression
-- On MINUS reduce production expression -> raw_expression
-- On LT reduce production expression -> raw_expression
-- On LE reduce production expression -> raw_expression
-- On LBRACKET reduce production expression -> raw_expression
-- On GT reduce production expression -> raw_expression
-- On GE reduce production expression -> raw_expression
-- On EQ reduce production expression -> raw_expression
-- On END reduce production expression -> raw_expression
-- On ELSE reduce production expression -> raw_expression
-- On DO reduce production expression -> raw_expression
-- On COMMA reduce production expression -> raw_expression
-- On AND reduce production expression -> raw_expression

State 44:
expression -> LPAREN expression . RPAREN [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . PLUS expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . MINUS expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . TIMES expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . SLASH expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LT expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LE expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GT expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GE expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . EQ expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . NE expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On RPAREN shift to state 76
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71

State 45:
raw_expression -> expression TIMES . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 46
-- On callee shift to state 51

State 46:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression TIMES expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On LBRACKET shift to state 47
-- On TIMES reduce production raw_expression -> expression TIMES expression
-- On THEN reduce production raw_expression -> expression TIMES expression
-- On SLASH reduce production raw_expression -> expression TIMES expression
-- On SEMICOLON reduce production raw_expression -> expression TIMES expression
-- On RPAREN reduce production raw_expression -> expression TIMES expression
-- On RBRACKET reduce production raw_expression -> expression TIMES expression
-- On PLUS reduce production raw_expression -> expression TIMES expression
-- On OR reduce production raw_expression -> expression TIMES expression
-- On NE reduce production raw_expression -> expression TIMES expression
-- On MINUS reduce production raw_expression -> expression TIMES expression
-- On LT reduce production raw_expression -> expression TIMES expression
-- On LE reduce production raw_expression -> expression TIMES expression
-- On GT reduce production raw_expression -> expression TIMES expression
-- On GE reduce production raw_expression -> expression TIMES expression
-- On EQ reduce production raw_expression -> expression TIMES expression
-- On END reduce production raw_expression -> expression TIMES expression
-- On ELSE reduce production raw_expression -> expression TIMES expression
-- On DO reduce production raw_expression -> expression TIMES expression
-- On COMMA reduce production raw_expression -> expression TIMES expression
-- On AND reduce production raw_expression -> expression TIMES expression

State 47:
raw_expression -> expression LBRACKET . expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 48
-- On callee shift to state 51

State 48:
raw_expression -> expression . PLUS expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . MINUS expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . TIMES expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . SLASH expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LT expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GT expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . EQ expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . NE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression LBRACKET expression . RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On RBRACKET shift to state 75
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71

State 49:
raw_expression -> expression SLASH . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 50
-- On callee shift to state 51

State 50:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression SLASH expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On LBRACKET shift to state 47
-- On TIMES reduce production raw_expression -> expression SLASH expression
-- On THEN reduce production raw_expression -> expression SLASH expression
-- On SLASH reduce production raw_expression -> expression SLASH expression
-- On SEMICOLON reduce production raw_expression -> expression SLASH expression
-- On RPAREN reduce production raw_expression -> expression SLASH expression
-- On RBRACKET reduce production raw_expression -> expression SLASH expression
-- On PLUS reduce production raw_expression -> expression SLASH expression
-- On OR reduce production raw_expression -> expression SLASH expression
-- On NE reduce production raw_expression -> expression SLASH expression
-- On MINUS reduce production raw_expression -> expression SLASH expression
-- On LT reduce production raw_expression -> expression SLASH expression
-- On LE reduce production raw_expression -> expression SLASH expression
-- On GT reduce production raw_expression -> expression SLASH expression
-- On GE reduce production raw_expression -> expression SLASH expression
-- On EQ reduce production raw_expression -> expression SLASH expression
-- On END reduce production raw_expression -> expression SLASH expression
-- On ELSE reduce production raw_expression -> expression SLASH expression
-- On DO reduce production raw_expression -> expression SLASH expression
-- On COMMA reduce production raw_expression -> expression SLASH expression
-- On AND reduce production raw_expression -> expression SLASH expression

State 51:
raw_expression -> callee . LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On LPAREN shift to state 52

State 52:
raw_expression -> callee LPAREN . loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On separated_nonempty_list(COMMA,expression) shift to state 53
-- On raw_expression shift to state 43
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 54
-- On expression shift to state 56
-- On callee shift to state 51
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,expression)) -> 

State 53:
loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression) . [ RPAREN ]
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression)

State 54:
raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) . RPAREN [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On RPAREN shift to state 55

State 55:
raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On THEN reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On SLASH reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On SEMICOLON reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On RPAREN reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On RBRACKET reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On PLUS reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On OR reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On NE reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On MINUS reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On LT reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On LE reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On LBRACKET reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On GT reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On GE reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On EQ reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On END reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On ELSE reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On DO reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On COMMA reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On AND reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN

State 56:
raw_expression -> expression . PLUS expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . MINUS expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . TIMES expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . SLASH expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . LT expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . LE expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . GT expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . GE expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . EQ expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . NE expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
separated_nonempty_list(COMMA,expression) -> expression . [ RPAREN ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAREN ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71
-- On COMMA shift to state 73
-- On RPAREN reduce production separated_nonempty_list(COMMA,expression) -> expression

State 57:
raw_expression -> expression PLUS . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 58
-- On callee shift to state 51

State 58:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression PLUS expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On LBRACKET shift to state 47
-- On THEN reduce production raw_expression -> expression PLUS expression
-- On SEMICOLON reduce production raw_expression -> expression PLUS expression
-- On RPAREN reduce production raw_expression -> expression PLUS expression
-- On RBRACKET reduce production raw_expression -> expression PLUS expression
-- On PLUS reduce production raw_expression -> expression PLUS expression
-- On OR reduce production raw_expression -> expression PLUS expression
-- On NE reduce production raw_expression -> expression PLUS expression
-- On MINUS reduce production raw_expression -> expression PLUS expression
-- On LT reduce production raw_expression -> expression PLUS expression
-- On LE reduce production raw_expression -> expression PLUS expression
-- On GT reduce production raw_expression -> expression PLUS expression
-- On GE reduce production raw_expression -> expression PLUS expression
-- On EQ reduce production raw_expression -> expression PLUS expression
-- On END reduce production raw_expression -> expression PLUS expression
-- On ELSE reduce production raw_expression -> expression PLUS expression
-- On DO reduce production raw_expression -> expression PLUS expression
-- On COMMA reduce production raw_expression -> expression PLUS expression
-- On AND reduce production raw_expression -> expression PLUS expression

State 59:
raw_expression -> expression NE . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 60
-- On callee shift to state 51

State 60:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression NE expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On MINUS shift to state 61
-- On LBRACKET shift to state 47
-- On THEN reduce production raw_expression -> expression NE expression
-- On SEMICOLON reduce production raw_expression -> expression NE expression
-- On RPAREN reduce production raw_expression -> expression NE expression
-- On RBRACKET reduce production raw_expression -> expression NE expression
-- On OR reduce production raw_expression -> expression NE expression
-- On END reduce production raw_expression -> expression NE expression
-- On ELSE reduce production raw_expression -> expression NE expression
-- On DO reduce production raw_expression -> expression NE expression
-- On COMMA reduce production raw_expression -> expression NE expression
-- On AND reduce production raw_expression -> expression NE expression

State 61:
raw_expression -> expression MINUS . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 62
-- On callee shift to state 51

State 62:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression MINUS expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On LBRACKET shift to state 47
-- On THEN reduce production raw_expression -> expression MINUS expression
-- On SEMICOLON reduce production raw_expression -> expression MINUS expression
-- On RPAREN reduce production raw_expression -> expression MINUS expression
-- On RBRACKET reduce production raw_expression -> expression MINUS expression
-- On PLUS reduce production raw_expression -> expression MINUS expression
-- On OR reduce production raw_expression -> expression MINUS expression
-- On NE reduce production raw_expression -> expression MINUS expression
-- On MINUS reduce production raw_expression -> expression MINUS expression
-- On LT reduce production raw_expression -> expression MINUS expression
-- On LE reduce production raw_expression -> expression MINUS expression
-- On GT reduce production raw_expression -> expression MINUS expression
-- On GE reduce production raw_expression -> expression MINUS expression
-- On EQ reduce production raw_expression -> expression MINUS expression
-- On END reduce production raw_expression -> expression MINUS expression
-- On ELSE reduce production raw_expression -> expression MINUS expression
-- On DO reduce production raw_expression -> expression MINUS expression
-- On COMMA reduce production raw_expression -> expression MINUS expression
-- On AND reduce production raw_expression -> expression MINUS expression

State 63:
raw_expression -> expression LT . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 64
-- On callee shift to state 51

State 64:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression LT expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On MINUS shift to state 61
-- On LBRACKET shift to state 47
-- On THEN reduce production raw_expression -> expression LT expression
-- On SEMICOLON reduce production raw_expression -> expression LT expression
-- On RPAREN reduce production raw_expression -> expression LT expression
-- On RBRACKET reduce production raw_expression -> expression LT expression
-- On OR reduce production raw_expression -> expression LT expression
-- On END reduce production raw_expression -> expression LT expression
-- On ELSE reduce production raw_expression -> expression LT expression
-- On DO reduce production raw_expression -> expression LT expression
-- On COMMA reduce production raw_expression -> expression LT expression
-- On AND reduce production raw_expression -> expression LT expression

State 65:
raw_expression -> expression LE . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 66
-- On callee shift to state 51

State 66:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression LE expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On MINUS shift to state 61
-- On LBRACKET shift to state 47
-- On THEN reduce production raw_expression -> expression LE expression
-- On SEMICOLON reduce production raw_expression -> expression LE expression
-- On RPAREN reduce production raw_expression -> expression LE expression
-- On RBRACKET reduce production raw_expression -> expression LE expression
-- On OR reduce production raw_expression -> expression LE expression
-- On END reduce production raw_expression -> expression LE expression
-- On ELSE reduce production raw_expression -> expression LE expression
-- On DO reduce production raw_expression -> expression LE expression
-- On COMMA reduce production raw_expression -> expression LE expression
-- On AND reduce production raw_expression -> expression LE expression

State 67:
raw_expression -> expression GT . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 68
-- On callee shift to state 51

State 68:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression GT expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On MINUS shift to state 61
-- On LBRACKET shift to state 47
-- On THEN reduce production raw_expression -> expression GT expression
-- On SEMICOLON reduce production raw_expression -> expression GT expression
-- On RPAREN reduce production raw_expression -> expression GT expression
-- On RBRACKET reduce production raw_expression -> expression GT expression
-- On OR reduce production raw_expression -> expression GT expression
-- On END reduce production raw_expression -> expression GT expression
-- On ELSE reduce production raw_expression -> expression GT expression
-- On DO reduce production raw_expression -> expression GT expression
-- On COMMA reduce production raw_expression -> expression GT expression
-- On AND reduce production raw_expression -> expression GT expression

State 69:
raw_expression -> expression GE . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 70
-- On callee shift to state 51

State 70:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression GE expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On MINUS shift to state 61
-- On LBRACKET shift to state 47
-- On THEN reduce production raw_expression -> expression GE expression
-- On SEMICOLON reduce production raw_expression -> expression GE expression
-- On RPAREN reduce production raw_expression -> expression GE expression
-- On RBRACKET reduce production raw_expression -> expression GE expression
-- On OR reduce production raw_expression -> expression GE expression
-- On END reduce production raw_expression -> expression GE expression
-- On ELSE reduce production raw_expression -> expression GE expression
-- On DO reduce production raw_expression -> expression GE expression
-- On COMMA reduce production raw_expression -> expression GE expression
-- On AND reduce production raw_expression -> expression GE expression

State 71:
raw_expression -> expression EQ . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 72
-- On callee shift to state 51

State 72:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression EQ expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On MINUS shift to state 61
-- On LBRACKET shift to state 47
-- On THEN reduce production raw_expression -> expression EQ expression
-- On SEMICOLON reduce production raw_expression -> expression EQ expression
-- On RPAREN reduce production raw_expression -> expression EQ expression
-- On RBRACKET reduce production raw_expression -> expression EQ expression
-- On OR reduce production raw_expression -> expression EQ expression
-- On END reduce production raw_expression -> expression EQ expression
-- On ELSE reduce production raw_expression -> expression EQ expression
-- On DO reduce production raw_expression -> expression EQ expression
-- On COMMA reduce production raw_expression -> expression EQ expression
-- On AND reduce production raw_expression -> expression EQ expression

State 73:
separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAREN ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On separated_nonempty_list(COMMA,expression) shift to state 74
-- On raw_expression shift to state 43
-- On expression shift to state 56
-- On callee shift to state 51

State 74:
separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression) . [ RPAREN ]
-- On RPAREN reduce production separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression)

State 75:
raw_expression -> expression LBRACKET expression RBRACKET . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On THEN reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On SLASH reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On SEMICOLON reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On RPAREN reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On RBRACKET reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On PLUS reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On OR reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On NE reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On MINUS reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On LT reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On LE reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On LBRACKET reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On GT reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On GE reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On EQ reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On END reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On ELSE reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On DO reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On COMMA reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On AND reduce production raw_expression -> expression LBRACKET expression RBRACKET

State 76:
expression -> LPAREN expression RPAREN . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES reduce production expression -> LPAREN expression RPAREN
-- On THEN reduce production expression -> LPAREN expression RPAREN
-- On SLASH reduce production expression -> LPAREN expression RPAREN
-- On SEMICOLON reduce production expression -> LPAREN expression RPAREN
-- On RPAREN reduce production expression -> LPAREN expression RPAREN
-- On RBRACKET reduce production expression -> LPAREN expression RPAREN
-- On PLUS reduce production expression -> LPAREN expression RPAREN
-- On OR reduce production expression -> LPAREN expression RPAREN
-- On NE reduce production expression -> LPAREN expression RPAREN
-- On MINUS reduce production expression -> LPAREN expression RPAREN
-- On LT reduce production expression -> LPAREN expression RPAREN
-- On LE reduce production expression -> LPAREN expression RPAREN
-- On LBRACKET reduce production expression -> LPAREN expression RPAREN
-- On GT reduce production expression -> LPAREN expression RPAREN
-- On GE reduce production expression -> LPAREN expression RPAREN
-- On EQ reduce production expression -> LPAREN expression RPAREN
-- On END reduce production expression -> LPAREN expression RPAREN
-- On ELSE reduce production expression -> LPAREN expression RPAREN
-- On DO reduce production expression -> LPAREN expression RPAREN
-- On COMMA reduce production expression -> LPAREN expression RPAREN
-- On AND reduce production expression -> LPAREN expression RPAREN

State 77:
raw_expression -> MINUS expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On LBRACKET shift to state 47
-- On TIMES reduce production raw_expression -> MINUS expression
-- On THEN reduce production raw_expression -> MINUS expression
-- On SLASH reduce production raw_expression -> MINUS expression
-- On SEMICOLON reduce production raw_expression -> MINUS expression
-- On RPAREN reduce production raw_expression -> MINUS expression
-- On RBRACKET reduce production raw_expression -> MINUS expression
-- On PLUS reduce production raw_expression -> MINUS expression
-- On OR reduce production raw_expression -> MINUS expression
-- On NE reduce production raw_expression -> MINUS expression
-- On MINUS reduce production raw_expression -> MINUS expression
-- On LT reduce production raw_expression -> MINUS expression
-- On LE reduce production raw_expression -> MINUS expression
-- On GT reduce production raw_expression -> MINUS expression
-- On GE reduce production raw_expression -> MINUS expression
-- On EQ reduce production raw_expression -> MINUS expression
-- On END reduce production raw_expression -> MINUS expression
-- On ELSE reduce production raw_expression -> MINUS expression
-- On DO reduce production raw_expression -> MINUS expression
-- On COMMA reduce production raw_expression -> MINUS expression
-- On AND reduce production raw_expression -> MINUS expression

State 78:
raw_expression -> expression . PLUS expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . MINUS expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . TIMES expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . SLASH expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LT expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GT expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . EQ expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . NE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> NEW ARRAY OF typ LBRACKET expression . RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On RBRACKET shift to state 79
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71

State 79:
raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
-- On TIMES reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On THEN reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On SLASH reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On SEMICOLON reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On RPAREN reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On RBRACKET reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On PLUS reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On OR reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On NE reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On MINUS reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On LT reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On LE reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On LBRACKET reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On GT reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On GE reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On EQ reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On END reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On ELSE reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On DO reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On COMMA reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET
-- On AND reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET

State 80:
expression -> LPAREN . expression RPAREN [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
nontrivial_condition -> LPAREN . nontrivial_condition RPAREN [ THEN RPAREN OR DO AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NOT shift to state 32
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 80
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On nontrivial_condition shift to state 81
-- On expression shift to state 83
-- On condition shift to state 84
-- On callee shift to state 51

State 81:
condition -> nontrivial_condition . [ OR AND ]
nontrivial_condition -> LPAREN nontrivial_condition . RPAREN [ THEN RPAREN OR DO AND ]
-- On RPAREN shift to state 82
-- On OR reduce production condition -> nontrivial_condition
-- On AND reduce production condition -> nontrivial_condition

State 82:
nontrivial_condition -> LPAREN nontrivial_condition RPAREN . [ THEN RPAREN OR DO AND ]
-- On THEN reduce production nontrivial_condition -> LPAREN nontrivial_condition RPAREN
-- On RPAREN reduce production nontrivial_condition -> LPAREN nontrivial_condition RPAREN
-- On OR reduce production nontrivial_condition -> LPAREN nontrivial_condition RPAREN
-- On DO reduce production nontrivial_condition -> LPAREN nontrivial_condition RPAREN
-- On AND reduce production nontrivial_condition -> LPAREN nontrivial_condition RPAREN

State 83:
condition -> expression . [ OR AND ]
expression -> LPAREN expression . RPAREN [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . PLUS expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . MINUS expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . TIMES expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . SLASH expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . LT expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . LE expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . GT expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . GE expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . EQ expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . NE expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On RPAREN shift to state 76
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71
-- On OR reduce production condition -> expression
-- On AND reduce production condition -> expression

State 84:
nontrivial_condition -> condition . AND condition [ RPAREN OR AND ]
nontrivial_condition -> condition . OR condition [ RPAREN OR AND ]
-- On OR shift to state 85
-- On AND shift to state 89

State 85:
nontrivial_condition -> condition OR . condition [ THEN RPAREN OR DO AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NOT shift to state 32
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 80
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On nontrivial_condition shift to state 86
-- On expression shift to state 87
-- On condition shift to state 88
-- On callee shift to state 51

State 86:
condition -> nontrivial_condition . [ THEN RPAREN OR DO AND ]
-- On THEN reduce production condition -> nontrivial_condition
-- On RPAREN reduce production condition -> nontrivial_condition
-- On OR reduce production condition -> nontrivial_condition
-- On DO reduce production condition -> nontrivial_condition
-- On AND reduce production condition -> nontrivial_condition

State 87:
condition -> expression . [ THEN RPAREN OR DO AND ]
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71
-- On THEN reduce production condition -> expression
-- On RPAREN reduce production condition -> expression
-- On OR reduce production condition -> expression
-- On DO reduce production condition -> expression
-- On AND reduce production condition -> expression

State 88:
nontrivial_condition -> condition . AND condition [ THEN RPAREN OR DO AND ]
nontrivial_condition -> condition . OR condition [ THEN RPAREN OR DO AND ]
nontrivial_condition -> condition OR condition . [ THEN RPAREN OR DO AND ]
-- On AND shift to state 89
-- On THEN reduce production nontrivial_condition -> condition OR condition
-- On RPAREN reduce production nontrivial_condition -> condition OR condition
-- On OR reduce production nontrivial_condition -> condition OR condition
-- On DO reduce production nontrivial_condition -> condition OR condition

State 89:
nontrivial_condition -> condition AND . condition [ THEN RPAREN OR DO AND ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NOT shift to state 32
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 80
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On nontrivial_condition shift to state 86
-- On expression shift to state 87
-- On condition shift to state 90
-- On callee shift to state 51

State 90:
nontrivial_condition -> condition . AND condition [ THEN RPAREN OR DO AND ]
nontrivial_condition -> condition AND condition . [ THEN RPAREN OR DO AND ]
nontrivial_condition -> condition . OR condition [ THEN RPAREN OR DO AND ]
-- On THEN reduce production nontrivial_condition -> condition AND condition
-- On RPAREN reduce production nontrivial_condition -> condition AND condition
-- On OR reduce production nontrivial_condition -> condition AND condition
-- On DO reduce production nontrivial_condition -> condition AND condition
-- On AND reduce production nontrivial_condition -> condition AND condition

State 91:
nontrivial_condition -> NOT condition . [ THEN RPAREN OR DO AND ]
nontrivial_condition -> condition . AND condition [ THEN RPAREN OR DO AND ]
nontrivial_condition -> condition . OR condition [ THEN RPAREN OR DO AND ]
-- On THEN reduce production nontrivial_condition -> NOT condition
-- On RPAREN reduce production nontrivial_condition -> NOT condition
-- On OR reduce production nontrivial_condition -> NOT condition
-- On DO reduce production nontrivial_condition -> NOT condition
-- On AND reduce production nontrivial_condition -> NOT condition

State 92:
instruction -> WHILE condition . DO instruction_or_block [ SEMICOLON END ELSE ]
nontrivial_condition -> condition . AND condition [ OR DO AND ]
nontrivial_condition -> condition . OR condition [ OR DO AND ]
-- On OR shift to state 85
-- On DO shift to state 93
-- On AND shift to state 89

State 93:
instruction -> WHILE condition DO . instruction_or_block [ SEMICOLON END ELSE ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On WHILE shift to state 31
-- On READLN shift to state 94
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On IF shift to state 103
-- On ID shift to state 96
-- On BOOLCONST shift to state 42
-- On BEGIN shift to state 28
-- On raw_expression shift to state 43
-- On lvalue shift to state 106
-- On instruction_or_block shift to state 118
-- On instruction shift to state 112
-- On expression shift to state 99
-- On callee shift to state 113
-- On block shift to state 117

State 94:
instruction -> READLN . LPAREN lvalue RPAREN [ SEMICOLON END ELSE ]
-- On LPAREN shift to state 95

State 95:
instruction -> READLN LPAREN . lvalue RPAREN [ SEMICOLON END ELSE ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 96
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On lvalue shift to state 97
-- On expression shift to state 99
-- On callee shift to state 51

State 96:
callee -> ID . [ LPAREN ]
lvalue -> ID . [ RPAREN COLONEQ ]
raw_expression -> ID . [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
-- On TIMES reduce production raw_expression -> ID
-- On SLASH reduce production raw_expression -> ID
-- On RPAREN reduce production lvalue -> ID
-- On PLUS reduce production raw_expression -> ID
-- On NE reduce production raw_expression -> ID
-- On MINUS reduce production raw_expression -> ID
-- On LT reduce production raw_expression -> ID
-- On LPAREN reduce production callee -> ID
-- On LE reduce production raw_expression -> ID
-- On LBRACKET reduce production raw_expression -> ID
-- On GT reduce production raw_expression -> ID
-- On GE reduce production raw_expression -> ID
-- On EQ reduce production raw_expression -> ID
-- On COLONEQ reduce production lvalue -> ID

State 97:
instruction -> READLN LPAREN lvalue . RPAREN [ SEMICOLON END ELSE ]
-- On RPAREN shift to state 98

State 98:
instruction -> READLN LPAREN lvalue RPAREN . [ SEMICOLON END ELSE ]
-- On SEMICOLON reduce production instruction -> READLN LPAREN lvalue RPAREN
-- On END reduce production instruction -> READLN LPAREN lvalue RPAREN
-- On ELSE reduce production instruction -> READLN LPAREN lvalue RPAREN

State 99:
lvalue -> expression . LBRACKET expression RBRACKET [ RPAREN COLONEQ ]
raw_expression -> expression . PLUS expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . MINUS expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . TIMES expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . SLASH expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LT expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LE expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GT expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GE expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . EQ expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . NE expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 100
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71

State 100:
lvalue -> expression LBRACKET . expression RBRACKET [ RPAREN COLONEQ ]
raw_expression -> expression LBRACKET . expression RBRACKET [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 101
-- On callee shift to state 51

State 101:
lvalue -> expression LBRACKET expression . RBRACKET [ RPAREN COLONEQ ]
raw_expression -> expression . PLUS expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . MINUS expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . TIMES expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . SLASH expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LT expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GT expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . EQ expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . NE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression LBRACKET expression . RBRACKET [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On RBRACKET shift to state 102
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71

State 102:
lvalue -> expression LBRACKET expression RBRACKET . [ RPAREN COLONEQ ]
raw_expression -> expression LBRACKET expression RBRACKET . [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
-- On TIMES reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On SLASH reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On RPAREN reduce production lvalue -> expression LBRACKET expression RBRACKET
-- On PLUS reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On NE reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On MINUS reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On LT reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On LE reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On LBRACKET reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On GT reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On GE reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On EQ reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On COLONEQ reduce production lvalue -> expression LBRACKET expression RBRACKET

State 103:
instruction -> IF . condition THEN instruction_or_block [ SEMICOLON END ELSE ]
instruction -> IF . condition THEN instruction_or_block ELSE instruction_or_block [ SEMICOLON END ELSE ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NOT shift to state 32
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 80
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On nontrivial_condition shift to state 86
-- On expression shift to state 87
-- On condition shift to state 104
-- On callee shift to state 51

State 104:
instruction -> IF condition . THEN instruction_or_block [ SEMICOLON END ELSE ]
instruction -> IF condition . THEN instruction_or_block ELSE instruction_or_block [ SEMICOLON END ELSE ]
nontrivial_condition -> condition . AND condition [ THEN OR AND ]
nontrivial_condition -> condition . OR condition [ THEN OR AND ]
-- On THEN shift to state 105
-- On OR shift to state 85
-- On AND shift to state 89

State 105:
instruction -> IF condition THEN . instruction_or_block [ SEMICOLON END ELSE ]
instruction -> IF condition THEN . instruction_or_block ELSE instruction_or_block [ SEMICOLON END ELSE ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On WHILE shift to state 31
-- On READLN shift to state 94
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On IF shift to state 103
-- On ID shift to state 96
-- On BOOLCONST shift to state 42
-- On BEGIN shift to state 28
-- On raw_expression shift to state 43
-- On lvalue shift to state 106
-- On instruction_or_block shift to state 109
-- On instruction shift to state 112
-- On expression shift to state 99
-- On callee shift to state 113
-- On block shift to state 117

State 106:
instruction -> lvalue . COLONEQ expression [ SEMICOLON END ELSE ]
-- On COLONEQ shift to state 107

State 107:
instruction -> lvalue COLONEQ . expression [ SEMICOLON END ELSE ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 108
-- On callee shift to state 51

State 108:
instruction -> lvalue COLONEQ expression . [ SEMICOLON END ELSE ]
raw_expression -> expression . PLUS expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . MINUS expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . TIMES expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . SLASH expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . LT expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . LE expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . GT expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . GE expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . EQ expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . NE expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71
-- On SEMICOLON reduce production instruction -> lvalue COLONEQ expression
-- On END reduce production instruction -> lvalue COLONEQ expression
-- On ELSE reduce production instruction -> lvalue COLONEQ expression

State 109:
instruction -> IF condition THEN instruction_or_block . [ SEMICOLON END ELSE ]
instruction -> IF condition THEN instruction_or_block . ELSE instruction_or_block [ SEMICOLON END ELSE ]
-- On ELSE shift to state 110
-- On SEMICOLON reduce production instruction -> IF condition THEN instruction_or_block
-- On END reduce production instruction -> IF condition THEN instruction_or_block

State 110:
instruction -> IF condition THEN instruction_or_block ELSE . instruction_or_block [ SEMICOLON END ELSE ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On WHILE shift to state 31
-- On READLN shift to state 94
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On IF shift to state 103
-- On ID shift to state 96
-- On BOOLCONST shift to state 42
-- On BEGIN shift to state 28
-- On raw_expression shift to state 43
-- On lvalue shift to state 106
-- On instruction_or_block shift to state 111
-- On instruction shift to state 112
-- On expression shift to state 99
-- On callee shift to state 113
-- On block shift to state 117

State 111:
instruction -> IF condition THEN instruction_or_block ELSE instruction_or_block . [ SEMICOLON END ELSE ]
-- On SEMICOLON reduce production instruction -> IF condition THEN instruction_or_block ELSE instruction_or_block
-- On END reduce production instruction -> IF condition THEN instruction_or_block ELSE instruction_or_block
-- On ELSE reduce production instruction -> IF condition THEN instruction_or_block ELSE instruction_or_block

State 112:
instruction_or_block -> instruction . [ SEMICOLON END ELSE ]
-- On SEMICOLON reduce production instruction_or_block -> instruction
-- On END reduce production instruction_or_block -> instruction
-- On ELSE reduce production instruction_or_block -> instruction

State 113:
instruction -> callee . LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ SEMICOLON END ELSE ]
raw_expression -> callee . LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
-- On LPAREN shift to state 114

State 114:
instruction -> callee LPAREN . loption(separated_nonempty_list(COMMA,expression)) RPAREN [ SEMICOLON END ELSE ]
raw_expression -> callee LPAREN . loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On separated_nonempty_list(COMMA,expression) shift to state 53
-- On raw_expression shift to state 43
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 115
-- On expression shift to state 56
-- On callee shift to state 51
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,expression)) -> 

State 115:
instruction -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) . RPAREN [ SEMICOLON END ELSE ]
raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) . RPAREN [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
-- On RPAREN shift to state 116

State 116:
instruction -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN . [ SEMICOLON END ELSE ]
raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN . [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
-- On TIMES reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On SLASH reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On SEMICOLON reduce production instruction -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On PLUS reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On NE reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On MINUS reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On LT reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On LE reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On LBRACKET reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On GT reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On GE reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On EQ reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On END reduce production instruction -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On ELSE reduce production instruction -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN

State 117:
instruction_or_block -> block . [ SEMICOLON END ELSE ]
-- On SEMICOLON reduce production instruction_or_block -> block
-- On END reduce production instruction_or_block -> block
-- On ELSE reduce production instruction_or_block -> block

State 118:
instruction -> WHILE condition DO instruction_or_block . [ SEMICOLON END ELSE ]
-- On SEMICOLON reduce production instruction -> WHILE condition DO instruction_or_block
-- On END reduce production instruction -> WHILE condition DO instruction_or_block
-- On ELSE reduce production instruction -> WHILE condition DO instruction_or_block

State 119:
loption(separated_nonempty_list(SEMICOLON,instruction)) -> separated_nonempty_list(SEMICOLON,instruction) . [ END ]
-- On END reduce production loption(separated_nonempty_list(SEMICOLON,instruction)) -> separated_nonempty_list(SEMICOLON,instruction)

State 120:
block -> BEGIN loption(separated_nonempty_list(SEMICOLON,instruction)) . END [ SEMICOLON END ELSE DOT ]
-- On END shift to state 121

State 121:
block -> BEGIN loption(separated_nonempty_list(SEMICOLON,instruction)) END . [ SEMICOLON END ELSE DOT ]
-- On SEMICOLON reduce production block -> BEGIN loption(separated_nonempty_list(SEMICOLON,instruction)) END
-- On END reduce production block -> BEGIN loption(separated_nonempty_list(SEMICOLON,instruction)) END
-- On ELSE reduce production block -> BEGIN loption(separated_nonempty_list(SEMICOLON,instruction)) END
-- On DOT reduce production block -> BEGIN loption(separated_nonempty_list(SEMICOLON,instruction)) END

State 122:
separated_nonempty_list(SEMICOLON,instruction) -> instruction . [ END ]
separated_nonempty_list(SEMICOLON,instruction) -> instruction . SEMICOLON separated_nonempty_list(SEMICOLON,instruction) [ END ]
-- On SEMICOLON shift to state 123
-- On END reduce production separated_nonempty_list(SEMICOLON,instruction) -> instruction

State 123:
separated_nonempty_list(SEMICOLON,instruction) -> instruction SEMICOLON . separated_nonempty_list(SEMICOLON,instruction) [ END ]
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On WHILE shift to state 31
-- On READLN shift to state 94
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On IF shift to state 103
-- On ID shift to state 96
-- On BOOLCONST shift to state 42
-- On separated_nonempty_list(SEMICOLON,instruction) shift to state 124
-- On raw_expression shift to state 43
-- On lvalue shift to state 106
-- On instruction shift to state 122
-- On expression shift to state 99
-- On callee shift to state 113

State 124:
separated_nonempty_list(SEMICOLON,instruction) -> instruction SEMICOLON separated_nonempty_list(SEMICOLON,instruction) . [ END ]
-- On END reduce production separated_nonempty_list(SEMICOLON,instruction) -> instruction SEMICOLON separated_nonempty_list(SEMICOLON,instruction)

State 125:
procedure -> PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON variables block . SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On SEMICOLON shift to state 126

State 126:
procedure -> PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON variables block SEMICOLON . [ PROCEDURE FUNCTION BEGIN ]
-- On PROCEDURE reduce production procedure -> PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON variables block SEMICOLON
-- On FUNCTION reduce production procedure -> PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON variables block SEMICOLON
-- On BEGIN reduce production procedure -> PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON variables block SEMICOLON

State 127:
variables -> loption(preceded(VAR,terminated_bindings)) . [ PROCEDURE FUNCTION BEGIN ]
-- On PROCEDURE reduce production variables -> loption(preceded(VAR,terminated_bindings))
-- On FUNCTION reduce production variables -> loption(preceded(VAR,terminated_bindings))
-- On BEGIN reduce production variables -> loption(preceded(VAR,terminated_bindings))

State 128:
separated_bindings -> loption(separated_nonempty_list(SEMICOLON,binding)) . [ RPAREN ]
-- On RPAREN reduce production separated_bindings -> loption(separated_nonempty_list(SEMICOLON,binding))

State 129:
separated_nonempty_list(SEMICOLON,binding) -> binding . [ RPAREN ]
separated_nonempty_list(SEMICOLON,binding) -> binding . SEMICOLON separated_nonempty_list(SEMICOLON,binding) [ RPAREN ]
-- On SEMICOLON shift to state 130
-- On RPAREN reduce production separated_nonempty_list(SEMICOLON,binding) -> binding

State 130:
separated_nonempty_list(SEMICOLON,binding) -> binding SEMICOLON . separated_nonempty_list(SEMICOLON,binding) [ RPAREN ]
-- On ID shift to state 3
-- On separated_nonempty_list(SEMICOLON,binding) shift to state 131
-- On separated_nonempty_list(COMMA,ID) shift to state 7
-- On binding shift to state 129

State 131:
separated_nonempty_list(SEMICOLON,binding) -> binding SEMICOLON separated_nonempty_list(SEMICOLON,binding) . [ RPAREN ]
-- On RPAREN reduce production separated_nonempty_list(SEMICOLON,binding) -> binding SEMICOLON separated_nonempty_list(SEMICOLON,binding)

State 132:
procedure -> FUNCTION . ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On ID shift to state 133

State 133:
procedure -> FUNCTION ID . LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On LPAREN shift to state 134

State 134:
procedure -> FUNCTION ID LPAREN . separated_bindings RPAREN COLON typ SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On ID shift to state 3
-- On separated_nonempty_list(SEMICOLON,binding) shift to state 23
-- On separated_nonempty_list(COMMA,ID) shift to state 7
-- On separated_bindings shift to state 135
-- On loption(separated_nonempty_list(SEMICOLON,binding)) shift to state 128
-- On binding shift to state 129
-- On RPAREN reduce production loption(separated_nonempty_list(SEMICOLON,binding)) -> 

State 135:
procedure -> FUNCTION ID LPAREN separated_bindings . RPAREN COLON typ SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On RPAREN shift to state 136

State 136:
procedure -> FUNCTION ID LPAREN separated_bindings RPAREN . COLON typ SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On COLON shift to state 137

State 137:
procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON . typ SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On INTEGER shift to state 9
-- On BOOLEAN shift to state 10
-- On ARRAY shift to state 11
-- On typ shift to state 138

State 138:
procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON typ . SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On SEMICOLON shift to state 139

State 139:
procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON . variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On VAR shift to state 2
-- On variables shift to state 140
-- On loption(preceded(VAR,terminated_bindings)) shift to state 127
-- On BEGIN reduce production loption(preceded(VAR,terminated_bindings)) -> 

State 140:
procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables . block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On BEGIN shift to state 28
-- On block shift to state 141

State 141:
procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables block . SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
-- On SEMICOLON shift to state 142

State 142:
procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables block SEMICOLON . [ PROCEDURE FUNCTION BEGIN ]
-- On PROCEDURE reduce production procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables block SEMICOLON
-- On FUNCTION reduce production procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables block SEMICOLON
-- On BEGIN reduce production procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables block SEMICOLON

State 143:
list(procedure) -> procedure . list(procedure) [ BEGIN ]
-- On PROCEDURE shift to state 20
-- On FUNCTION shift to state 132
-- On procedure shift to state 143
-- On list(procedure) shift to state 144
-- On BEGIN reduce production list(procedure) -> 

State 144:
list(procedure) -> procedure list(procedure) . [ BEGIN ]
-- On BEGIN reduce production list(procedure) -> procedure list(procedure)

State 145:
program -> PROGRAM variables list(procedure) . block DOT [ # ]
-- On BEGIN shift to state 28
-- On block shift to state 146

State 146:
program -> PROGRAM variables list(procedure) block . DOT [ # ]
-- On DOT shift to state 147

State 147:
program -> PROGRAM variables list(procedure) block DOT . [ # ]
-- On # reduce production program -> PROGRAM variables list(procedure) block DOT

State 148:
program' -> program . [ # ]
-- On # accept program

