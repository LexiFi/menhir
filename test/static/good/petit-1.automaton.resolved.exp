State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On PROGRAM shift to state 1
-- On program shift to state 148
## Reductions:

State 1:
## Known stack suffix:
## PROGRAM
## LR(1) items:
program -> PROGRAM . variables list(procedure) block DOT [ # ]
## Transitions:
-- On VAR shift to state 2
-- On variables shift to state 19
-- On loption(preceded(VAR,terminated_bindings)) shift to state 127
## Reductions:
-- On PROCEDURE reduce production loption(preceded(VAR,terminated_bindings)) ->
-- On FUNCTION reduce production loption(preceded(VAR,terminated_bindings)) ->
-- On BEGIN reduce production loption(preceded(VAR,terminated_bindings)) ->

State 2:
## Known stack suffix:
## VAR
## LR(1) items:
loption(preceded(VAR,terminated_bindings)) -> VAR . terminated_bindings [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On ID shift to state 3
-- On terminated_bindings shift to state 6
-- On separated_nonempty_list(COMMA,ID) shift to state 7
-- On nonempty_list(terminated(binding,SEMICOLON)) shift to state 15
-- On binding shift to state 16
## Reductions:

State 3:
## Known stack suffix:
## ID
## LR(1) items:
separated_nonempty_list(COMMA,ID) -> ID . [ COLON ]
separated_nonempty_list(COMMA,ID) -> ID . COMMA separated_nonempty_list(COMMA,ID) [ COLON ]
## Transitions:
-- On COMMA shift to state 4
## Reductions:
-- On COLON reduce production separated_nonempty_list(COMMA,ID) -> ID

State 4:
## Known stack suffix:
## ID COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ID) -> ID COMMA . separated_nonempty_list(COMMA,ID) [ COLON ]
## Transitions:
-- On ID shift to state 3
-- On separated_nonempty_list(COMMA,ID) shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## ID COMMA separated_nonempty_list(COMMA,ID)
## LR(1) items:
separated_nonempty_list(COMMA,ID) -> ID COMMA separated_nonempty_list(COMMA,ID) . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,ID) -> ID COMMA separated_nonempty_list(COMMA,ID)

State 6:
## Known stack suffix:
## VAR terminated_bindings
## LR(1) items:
loption(preceded(VAR,terminated_bindings)) -> VAR terminated_bindings . [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(preceded(VAR,terminated_bindings)) -> VAR terminated_bindings

State 7:
## Known stack suffix:
## separated_nonempty_list(COMMA,ID)
## LR(1) items:
binding -> separated_nonempty_list(COMMA,ID) . COLON typ [ SEMICOLON RPAREN ]
## Transitions:
-- On COLON shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## separated_nonempty_list(COMMA,ID) COLON
## LR(1) items:
binding -> separated_nonempty_list(COMMA,ID) COLON . typ [ SEMICOLON RPAREN ]
## Transitions:
-- On INTEGER shift to state 9
-- On BOOLEAN shift to state 10
-- On ARRAY shift to state 11
-- On typ shift to state 14
## Reductions:

State 9:
## Known stack suffix:
## INTEGER
## LR(1) items:
typ -> INTEGER . [ SEMICOLON RPAREN LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ -> INTEGER

State 10:
## Known stack suffix:
## BOOLEAN
## LR(1) items:
typ -> BOOLEAN . [ SEMICOLON RPAREN LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ -> BOOLEAN

State 11:
## Known stack suffix:
## ARRAY
## LR(1) items:
typ -> ARRAY . OF typ [ SEMICOLON RPAREN LBRACKET ]
## Transitions:
-- On OF shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## ARRAY OF
## LR(1) items:
typ -> ARRAY OF . typ [ SEMICOLON RPAREN LBRACKET ]
## Transitions:
-- On INTEGER shift to state 9
-- On BOOLEAN shift to state 10
-- On ARRAY shift to state 11
-- On typ shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## ARRAY OF typ
## LR(1) items:
typ -> ARRAY OF typ . [ SEMICOLON RPAREN LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ -> ARRAY OF typ

State 14:
## Known stack suffix:
## separated_nonempty_list(COMMA,ID) COLON typ
## LR(1) items:
binding -> separated_nonempty_list(COMMA,ID) COLON typ . [ SEMICOLON RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> separated_nonempty_list(COMMA,ID) COLON typ

State 15:
## Known stack suffix:
## nonempty_list(terminated(binding,SEMICOLON))
## LR(1) items:
terminated_bindings -> nonempty_list(terminated(binding,SEMICOLON)) . [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production terminated_bindings -> nonempty_list(terminated(binding,SEMICOLON))

State 16:
## Known stack suffix:
## binding
## LR(1) items:
nonempty_list(terminated(binding,SEMICOLON)) -> binding . SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
nonempty_list(terminated(binding,SEMICOLON)) -> binding . SEMICOLON nonempty_list(terminated(binding,SEMICOLON)) [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## binding SEMICOLON
## LR(1) items:
nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON . [ PROCEDURE FUNCTION BEGIN ]
nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON . nonempty_list(terminated(binding,SEMICOLON)) [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On ID shift to state 3
-- On separated_nonempty_list(COMMA,ID) shift to state 7
-- On nonempty_list(terminated(binding,SEMICOLON)) shift to state 18
-- On binding shift to state 16
## Reductions:
-- On PROCEDURE reduce production nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON
-- On FUNCTION reduce production nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON
-- On BEGIN reduce production nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON

State 18:
## Known stack suffix:
## binding SEMICOLON nonempty_list(terminated(binding,SEMICOLON))
## LR(1) items:
nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON nonempty_list(terminated(binding,SEMICOLON)) . [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(terminated(binding,SEMICOLON)) -> binding SEMICOLON nonempty_list(terminated(binding,SEMICOLON))

State 19:
## Known stack suffix:
## PROGRAM variables
## LR(1) items:
program -> PROGRAM variables . list(procedure) block DOT [ # ]
## Transitions:
-- On PROCEDURE shift to state 20
-- On FUNCTION shift to state 132
-- On procedure shift to state 143
-- On list(procedure) shift to state 145
## Reductions:
-- On BEGIN reduce production list(procedure) ->

State 20:
## Known stack suffix:
## PROCEDURE
## LR(1) items:
procedure -> PROCEDURE . ID LPAREN separated_bindings RPAREN SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On ID shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## PROCEDURE ID
## LR(1) items:
procedure -> PROCEDURE ID . LPAREN separated_bindings RPAREN SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On LPAREN shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## PROCEDURE ID LPAREN
## LR(1) items:
procedure -> PROCEDURE ID LPAREN . separated_bindings RPAREN SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On ID shift to state 3
-- On separated_nonempty_list(SEMICOLON,binding) shift to state 23
-- On separated_nonempty_list(COMMA,ID) shift to state 7
-- On separated_bindings shift to state 24
-- On loption(separated_nonempty_list(SEMICOLON,binding)) shift to state 128
-- On binding shift to state 129
## Reductions:
-- On RPAREN reduce production loption(separated_nonempty_list(SEMICOLON,binding)) ->

State 23:
## Known stack suffix:
## separated_nonempty_list(SEMICOLON,binding)
## LR(1) items:
loption(separated_nonempty_list(SEMICOLON,binding)) -> separated_nonempty_list(SEMICOLON,binding) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(SEMICOLON,binding)) -> separated_nonempty_list(SEMICOLON,binding)

State 24:
## Known stack suffix:
## PROCEDURE ID LPAREN separated_bindings
## LR(1) items:
procedure -> PROCEDURE ID LPAREN separated_bindings . RPAREN SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On RPAREN shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## PROCEDURE ID LPAREN separated_bindings RPAREN
## LR(1) items:
procedure -> PROCEDURE ID LPAREN separated_bindings RPAREN . SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON
## LR(1) items:
procedure -> PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON . variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On VAR shift to state 2
-- On variables shift to state 27
-- On loption(preceded(VAR,terminated_bindings)) shift to state 127
## Reductions:
-- On BEGIN reduce production loption(preceded(VAR,terminated_bindings)) ->

State 27:
## Known stack suffix:
## PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON variables
## LR(1) items:
procedure -> PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON variables . block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On BEGIN shift to state 28
-- On block shift to state 125
## Reductions:

State 28:
## Known stack suffix:
## BEGIN
## LR(1) items:
block -> BEGIN . loption(separated_nonempty_list(SEMICOLON,instruction)) END [ SEMICOLON END ELSE DOT ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On WHILE shift to state 31
-- On READLN shift to state 94
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On IF shift to state 103
-- On ID shift to state 96
-- On BOOLCONST shift to state 42
-- On separated_nonempty_list(SEMICOLON,instruction) shift to state 119
-- On raw_expression shift to state 43
-- On lvalue shift to state 106
-- On loption(separated_nonempty_list(SEMICOLON,instruction)) shift to state 120
-- On instruction shift to state 122
-- On expression shift to state 99
-- On callee shift to state 113
## Reductions:
-- On END reduce production loption(separated_nonempty_list(SEMICOLON,instruction)) ->

State 29:
## Known stack suffix:
## WRITELN
## LR(1) items:
callee -> WRITELN . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production callee -> WRITELN

State 30:
## Known stack suffix:
## WRITE
## LR(1) items:
callee -> WRITE . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production callee -> WRITE

State 31:
## Known stack suffix:
## WHILE
## LR(1) items:
instruction -> WHILE . condition DO instruction_or_block [ SEMICOLON END ELSE ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NOT shift to state 32
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 80
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On nontrivial_condition shift to state 86
-- On expression shift to state 87
-- On condition shift to state 92
-- On callee shift to state 51
## Reductions:

State 32:
## Known stack suffix:
## NOT
## LR(1) items:
nontrivial_condition -> NOT . condition [ THEN RPAREN OR DO AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NOT shift to state 32
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 80
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On nontrivial_condition shift to state 86
-- On expression shift to state 87
-- On condition shift to state 91
-- On callee shift to state 51
## Reductions:

State 33:
## Known stack suffix:
## NEW
## LR(1) items:
raw_expression -> NEW . ARRAY OF typ LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On ARRAY shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## NEW ARRAY
## LR(1) items:
raw_expression -> NEW ARRAY . OF typ LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On OF shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## NEW ARRAY OF
## LR(1) items:
raw_expression -> NEW ARRAY OF . typ LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On INTEGER shift to state 9
-- On BOOLEAN shift to state 10
-- On ARRAY shift to state 11
-- On typ shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## NEW ARRAY OF typ
## LR(1) items:
raw_expression -> NEW ARRAY OF typ . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On LBRACKET shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## NEW ARRAY OF typ LBRACKET
## LR(1) items:
raw_expression -> NEW ARRAY OF typ LBRACKET . expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 78
-- On callee shift to state 51
## Reductions:

State 38:
## Known stack suffix:
## MINUS
## LR(1) items:
raw_expression -> MINUS . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 77
-- On callee shift to state 51
## Reductions:

State 39:
## Known stack suffix:
## LPAREN
## LR(1) items:
expression -> LPAREN . expression RPAREN [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 44
-- On callee shift to state 51
## Reductions:

State 40:
## Known stack suffix:
## INTCONST
## LR(1) items:
raw_expression -> INTCONST . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production raw_expression -> INTCONST

State 41:
## Known stack suffix:
## ID
## LR(1) items:
callee -> ID . [ LPAREN ]
raw_expression -> ID . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES reduce production raw_expression -> ID
-- On THEN reduce production raw_expression -> ID
-- On SLASH reduce production raw_expression -> ID
-- On SEMICOLON reduce production raw_expression -> ID
-- On RPAREN reduce production raw_expression -> ID
-- On RBRACKET reduce production raw_expression -> ID
-- On PLUS reduce production raw_expression -> ID
-- On OR reduce production raw_expression -> ID
-- On NE reduce production raw_expression -> ID
-- On MINUS reduce production raw_expression -> ID
-- On LT reduce production raw_expression -> ID
-- On LPAREN reduce production callee -> ID
-- On LE reduce production raw_expression -> ID
-- On LBRACKET reduce production raw_expression -> ID
-- On GT reduce production raw_expression -> ID
-- On GE reduce production raw_expression -> ID
-- On EQ reduce production raw_expression -> ID
-- On END reduce production raw_expression -> ID
-- On ELSE reduce production raw_expression -> ID
-- On DO reduce production raw_expression -> ID
-- On COMMA reduce production raw_expression -> ID
-- On AND reduce production raw_expression -> ID

State 42:
## Known stack suffix:
## BOOLCONST
## LR(1) items:
raw_expression -> BOOLCONST . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production raw_expression -> BOOLCONST

State 43:
## Known stack suffix:
## raw_expression
## LR(1) items:
expression -> raw_expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> raw_expression

State 44:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression -> LPAREN expression . RPAREN [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . PLUS expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . MINUS expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . TIMES expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . SLASH expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LT expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LE expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GT expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GE expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . EQ expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . NE expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On RPAREN shift to state 76
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71
## Reductions:

State 45:
## Known stack suffix:
## expression TIMES
## LR(1) items:
raw_expression -> expression TIMES . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 46
-- On callee shift to state 51
## Reductions:

State 46:
## Known stack suffix:
## expression TIMES expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression TIMES expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On LBRACKET shift to state 47
## Reductions:
-- On TIMES reduce production raw_expression -> expression TIMES expression
-- On THEN reduce production raw_expression -> expression TIMES expression
-- On SLASH reduce production raw_expression -> expression TIMES expression
-- On SEMICOLON reduce production raw_expression -> expression TIMES expression
-- On RPAREN reduce production raw_expression -> expression TIMES expression
-- On RBRACKET reduce production raw_expression -> expression TIMES expression
-- On PLUS reduce production raw_expression -> expression TIMES expression
-- On OR reduce production raw_expression -> expression TIMES expression
-- On NE reduce production raw_expression -> expression TIMES expression
-- On MINUS reduce production raw_expression -> expression TIMES expression
-- On LT reduce production raw_expression -> expression TIMES expression
-- On LE reduce production raw_expression -> expression TIMES expression
-- On GT reduce production raw_expression -> expression TIMES expression
-- On GE reduce production raw_expression -> expression TIMES expression
-- On EQ reduce production raw_expression -> expression TIMES expression
-- On END reduce production raw_expression -> expression TIMES expression
-- On ELSE reduce production raw_expression -> expression TIMES expression
-- On DO reduce production raw_expression -> expression TIMES expression
-- On COMMA reduce production raw_expression -> expression TIMES expression
-- On AND reduce production raw_expression -> expression TIMES expression

State 47:
## Known stack suffix:
## expression LBRACKET
## LR(1) items:
raw_expression -> expression LBRACKET . expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 48
-- On callee shift to state 51
## Reductions:

State 48:
## Known stack suffix:
## expression LBRACKET expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . MINUS expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . TIMES expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . SLASH expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LT expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GT expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . EQ expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . NE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression LBRACKET expression . RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On RBRACKET shift to state 75
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71
## Reductions:

State 49:
## Known stack suffix:
## expression SLASH
## LR(1) items:
raw_expression -> expression SLASH . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 50
-- On callee shift to state 51
## Reductions:

State 50:
## Known stack suffix:
## expression SLASH expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression SLASH expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On LBRACKET shift to state 47
## Reductions:
-- On TIMES reduce production raw_expression -> expression SLASH expression
-- On THEN reduce production raw_expression -> expression SLASH expression
-- On SLASH reduce production raw_expression -> expression SLASH expression
-- On SEMICOLON reduce production raw_expression -> expression SLASH expression
-- On RPAREN reduce production raw_expression -> expression SLASH expression
-- On RBRACKET reduce production raw_expression -> expression SLASH expression
-- On PLUS reduce production raw_expression -> expression SLASH expression
-- On OR reduce production raw_expression -> expression SLASH expression
-- On NE reduce production raw_expression -> expression SLASH expression
-- On MINUS reduce production raw_expression -> expression SLASH expression
-- On LT reduce production raw_expression -> expression SLASH expression
-- On LE reduce production raw_expression -> expression SLASH expression
-- On GT reduce production raw_expression -> expression SLASH expression
-- On GE reduce production raw_expression -> expression SLASH expression
-- On EQ reduce production raw_expression -> expression SLASH expression
-- On END reduce production raw_expression -> expression SLASH expression
-- On ELSE reduce production raw_expression -> expression SLASH expression
-- On DO reduce production raw_expression -> expression SLASH expression
-- On COMMA reduce production raw_expression -> expression SLASH expression
-- On AND reduce production raw_expression -> expression SLASH expression

State 51:
## Known stack suffix:
## callee
## LR(1) items:
raw_expression -> callee . LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On LPAREN shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## callee LPAREN
## LR(1) items:
raw_expression -> callee LPAREN . loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On separated_nonempty_list(COMMA,expression) shift to state 53
-- On raw_expression shift to state 43
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 54
-- On expression shift to state 56
-- On callee shift to state 51
## Reductions:
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,expression)) ->

State 53:
## Known stack suffix:
## separated_nonempty_list(COMMA,expression)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression)

State 54:
## Known stack suffix:
## callee LPAREN loption(separated_nonempty_list(COMMA,expression))
## LR(1) items:
raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) . RPAREN [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On RPAREN shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
## LR(1) items:
raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN

State 56:
## Known stack suffix:
## expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . MINUS expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . TIMES expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . SLASH expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . LT expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . LE expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . GT expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . GE expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . EQ expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . NE expression [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH RPAREN PLUS NE MINUS LT LE LBRACKET GT GE EQ COMMA ]
separated_nonempty_list(COMMA,expression) -> expression . [ RPAREN ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAREN ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71
-- On COMMA shift to state 73
## Reductions:
-- On RPAREN reduce production separated_nonempty_list(COMMA,expression) -> expression

State 57:
## Known stack suffix:
## expression PLUS
## LR(1) items:
raw_expression -> expression PLUS . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 58
-- On callee shift to state 51
## Reductions:

State 58:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression PLUS expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On LBRACKET shift to state 47
## Reductions:
-- On THEN reduce production raw_expression -> expression PLUS expression
-- On SEMICOLON reduce production raw_expression -> expression PLUS expression
-- On RPAREN reduce production raw_expression -> expression PLUS expression
-- On RBRACKET reduce production raw_expression -> expression PLUS expression
-- On PLUS reduce production raw_expression -> expression PLUS expression
-- On OR reduce production raw_expression -> expression PLUS expression
-- On NE reduce production raw_expression -> expression PLUS expression
-- On MINUS reduce production raw_expression -> expression PLUS expression
-- On LT reduce production raw_expression -> expression PLUS expression
-- On LE reduce production raw_expression -> expression PLUS expression
-- On GT reduce production raw_expression -> expression PLUS expression
-- On GE reduce production raw_expression -> expression PLUS expression
-- On EQ reduce production raw_expression -> expression PLUS expression
-- On END reduce production raw_expression -> expression PLUS expression
-- On ELSE reduce production raw_expression -> expression PLUS expression
-- On DO reduce production raw_expression -> expression PLUS expression
-- On COMMA reduce production raw_expression -> expression PLUS expression
-- On AND reduce production raw_expression -> expression PLUS expression

State 59:
## Known stack suffix:
## expression NE
## LR(1) items:
raw_expression -> expression NE . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 60
-- On callee shift to state 51
## Reductions:

State 60:
## Known stack suffix:
## expression NE expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression NE expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On MINUS shift to state 61
-- On LBRACKET shift to state 47
## Reductions:
-- On THEN reduce production raw_expression -> expression NE expression
-- On SEMICOLON reduce production raw_expression -> expression NE expression
-- On RPAREN reduce production raw_expression -> expression NE expression
-- On RBRACKET reduce production raw_expression -> expression NE expression
-- On OR reduce production raw_expression -> expression NE expression
-- On END reduce production raw_expression -> expression NE expression
-- On ELSE reduce production raw_expression -> expression NE expression
-- On DO reduce production raw_expression -> expression NE expression
-- On COMMA reduce production raw_expression -> expression NE expression
-- On AND reduce production raw_expression -> expression NE expression

State 61:
## Known stack suffix:
## expression MINUS
## LR(1) items:
raw_expression -> expression MINUS . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 62
-- On callee shift to state 51
## Reductions:

State 62:
## Known stack suffix:
## expression MINUS expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression MINUS expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On LBRACKET shift to state 47
## Reductions:
-- On THEN reduce production raw_expression -> expression MINUS expression
-- On SEMICOLON reduce production raw_expression -> expression MINUS expression
-- On RPAREN reduce production raw_expression -> expression MINUS expression
-- On RBRACKET reduce production raw_expression -> expression MINUS expression
-- On PLUS reduce production raw_expression -> expression MINUS expression
-- On OR reduce production raw_expression -> expression MINUS expression
-- On NE reduce production raw_expression -> expression MINUS expression
-- On MINUS reduce production raw_expression -> expression MINUS expression
-- On LT reduce production raw_expression -> expression MINUS expression
-- On LE reduce production raw_expression -> expression MINUS expression
-- On GT reduce production raw_expression -> expression MINUS expression
-- On GE reduce production raw_expression -> expression MINUS expression
-- On EQ reduce production raw_expression -> expression MINUS expression
-- On END reduce production raw_expression -> expression MINUS expression
-- On ELSE reduce production raw_expression -> expression MINUS expression
-- On DO reduce production raw_expression -> expression MINUS expression
-- On COMMA reduce production raw_expression -> expression MINUS expression
-- On AND reduce production raw_expression -> expression MINUS expression

State 63:
## Known stack suffix:
## expression LT
## LR(1) items:
raw_expression -> expression LT . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 64
-- On callee shift to state 51
## Reductions:

State 64:
## Known stack suffix:
## expression LT expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression LT expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On MINUS shift to state 61
-- On LBRACKET shift to state 47
## Reductions:
-- On THEN reduce production raw_expression -> expression LT expression
-- On SEMICOLON reduce production raw_expression -> expression LT expression
-- On RPAREN reduce production raw_expression -> expression LT expression
-- On RBRACKET reduce production raw_expression -> expression LT expression
-- On OR reduce production raw_expression -> expression LT expression
-- On END reduce production raw_expression -> expression LT expression
-- On ELSE reduce production raw_expression -> expression LT expression
-- On DO reduce production raw_expression -> expression LT expression
-- On COMMA reduce production raw_expression -> expression LT expression
-- On AND reduce production raw_expression -> expression LT expression

State 65:
## Known stack suffix:
## expression LE
## LR(1) items:
raw_expression -> expression LE . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 66
-- On callee shift to state 51
## Reductions:

State 66:
## Known stack suffix:
## expression LE expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression LE expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On MINUS shift to state 61
-- On LBRACKET shift to state 47
## Reductions:
-- On THEN reduce production raw_expression -> expression LE expression
-- On SEMICOLON reduce production raw_expression -> expression LE expression
-- On RPAREN reduce production raw_expression -> expression LE expression
-- On RBRACKET reduce production raw_expression -> expression LE expression
-- On OR reduce production raw_expression -> expression LE expression
-- On END reduce production raw_expression -> expression LE expression
-- On ELSE reduce production raw_expression -> expression LE expression
-- On DO reduce production raw_expression -> expression LE expression
-- On COMMA reduce production raw_expression -> expression LE expression
-- On AND reduce production raw_expression -> expression LE expression

State 67:
## Known stack suffix:
## expression GT
## LR(1) items:
raw_expression -> expression GT . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 68
-- On callee shift to state 51
## Reductions:

State 68:
## Known stack suffix:
## expression GT expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression GT expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On MINUS shift to state 61
-- On LBRACKET shift to state 47
## Reductions:
-- On THEN reduce production raw_expression -> expression GT expression
-- On SEMICOLON reduce production raw_expression -> expression GT expression
-- On RPAREN reduce production raw_expression -> expression GT expression
-- On RBRACKET reduce production raw_expression -> expression GT expression
-- On OR reduce production raw_expression -> expression GT expression
-- On END reduce production raw_expression -> expression GT expression
-- On ELSE reduce production raw_expression -> expression GT expression
-- On DO reduce production raw_expression -> expression GT expression
-- On COMMA reduce production raw_expression -> expression GT expression
-- On AND reduce production raw_expression -> expression GT expression

State 69:
## Known stack suffix:
## expression GE
## LR(1) items:
raw_expression -> expression GE . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 70
-- On callee shift to state 51
## Reductions:

State 70:
## Known stack suffix:
## expression GE expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression GE expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On MINUS shift to state 61
-- On LBRACKET shift to state 47
## Reductions:
-- On THEN reduce production raw_expression -> expression GE expression
-- On SEMICOLON reduce production raw_expression -> expression GE expression
-- On RPAREN reduce production raw_expression -> expression GE expression
-- On RBRACKET reduce production raw_expression -> expression GE expression
-- On OR reduce production raw_expression -> expression GE expression
-- On END reduce production raw_expression -> expression GE expression
-- On ELSE reduce production raw_expression -> expression GE expression
-- On DO reduce production raw_expression -> expression GE expression
-- On COMMA reduce production raw_expression -> expression GE expression
-- On AND reduce production raw_expression -> expression GE expression

State 71:
## Known stack suffix:
## expression EQ
## LR(1) items:
raw_expression -> expression EQ . expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 72
-- On callee shift to state 51
## Reductions:

State 72:
## Known stack suffix:
## expression EQ expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression EQ expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On MINUS shift to state 61
-- On LBRACKET shift to state 47
## Reductions:
-- On THEN reduce production raw_expression -> expression EQ expression
-- On SEMICOLON reduce production raw_expression -> expression EQ expression
-- On RPAREN reduce production raw_expression -> expression EQ expression
-- On RBRACKET reduce production raw_expression -> expression EQ expression
-- On OR reduce production raw_expression -> expression EQ expression
-- On END reduce production raw_expression -> expression EQ expression
-- On ELSE reduce production raw_expression -> expression EQ expression
-- On DO reduce production raw_expression -> expression EQ expression
-- On COMMA reduce production raw_expression -> expression EQ expression
-- On AND reduce production raw_expression -> expression EQ expression

State 73:
## Known stack suffix:
## expression COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAREN ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On separated_nonempty_list(COMMA,expression) shift to state 74
-- On raw_expression shift to state 43
-- On expression shift to state 56
-- On callee shift to state 51
## Reductions:

State 74:
## Known stack suffix:
## expression COMMA separated_nonempty_list(COMMA,expression)
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression)

State 75:
## Known stack suffix:
## expression LBRACKET expression RBRACKET
## LR(1) items:
raw_expression -> expression LBRACKET expression RBRACKET . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production raw_expression -> expression LBRACKET expression RBRACKET

State 76:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
expression -> LPAREN expression RPAREN . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> LPAREN expression RPAREN

State 77:
## Known stack suffix:
## MINUS expression
## LR(1) items:
raw_expression -> MINUS expression . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On LBRACKET shift to state 47
## Reductions:
-- On TIMES reduce production raw_expression -> MINUS expression
-- On THEN reduce production raw_expression -> MINUS expression
-- On SLASH reduce production raw_expression -> MINUS expression
-- On SEMICOLON reduce production raw_expression -> MINUS expression
-- On RPAREN reduce production raw_expression -> MINUS expression
-- On RBRACKET reduce production raw_expression -> MINUS expression
-- On PLUS reduce production raw_expression -> MINUS expression
-- On OR reduce production raw_expression -> MINUS expression
-- On NE reduce production raw_expression -> MINUS expression
-- On MINUS reduce production raw_expression -> MINUS expression
-- On LT reduce production raw_expression -> MINUS expression
-- On LE reduce production raw_expression -> MINUS expression
-- On GT reduce production raw_expression -> MINUS expression
-- On GE reduce production raw_expression -> MINUS expression
-- On EQ reduce production raw_expression -> MINUS expression
-- On END reduce production raw_expression -> MINUS expression
-- On ELSE reduce production raw_expression -> MINUS expression
-- On DO reduce production raw_expression -> MINUS expression
-- On COMMA reduce production raw_expression -> MINUS expression
-- On AND reduce production raw_expression -> MINUS expression

State 78:
## Known stack suffix:
## NEW ARRAY OF typ LBRACKET expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . MINUS expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . TIMES expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . SLASH expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LT expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GT expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . EQ expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . NE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> NEW ARRAY OF typ LBRACKET expression . RBRACKET [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On RBRACKET shift to state 79
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71
## Reductions:

State 79:
## Known stack suffix:
## NEW ARRAY OF typ LBRACKET expression RBRACKET
## LR(1) items:
raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET . [ TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production raw_expression -> NEW ARRAY OF typ LBRACKET expression RBRACKET

State 80:
## Known stack suffix:
## LPAREN
## LR(1) items:
expression -> LPAREN . expression RPAREN [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
nontrivial_condition -> LPAREN . nontrivial_condition RPAREN [ THEN RPAREN OR DO AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NOT shift to state 32
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 80
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On nontrivial_condition shift to state 81
-- On expression shift to state 83
-- On condition shift to state 84
-- On callee shift to state 51
## Reductions:

State 81:
## Known stack suffix:
## LPAREN nontrivial_condition
## LR(1) items:
condition -> nontrivial_condition . [ OR AND ]
nontrivial_condition -> LPAREN nontrivial_condition . RPAREN [ THEN RPAREN OR DO AND ]
## Transitions:
-- On RPAREN shift to state 82
## Reductions:
-- On OR reduce production condition -> nontrivial_condition
-- On AND reduce production condition -> nontrivial_condition

State 82:
## Known stack suffix:
## LPAREN nontrivial_condition RPAREN
## LR(1) items:
nontrivial_condition -> LPAREN nontrivial_condition RPAREN . [ THEN RPAREN OR DO AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nontrivial_condition -> LPAREN nontrivial_condition RPAREN

State 83:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
condition -> expression . [ OR AND ]
expression -> LPAREN expression . RPAREN [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . PLUS expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . MINUS expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . TIMES expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . SLASH expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . LT expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . LE expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . GT expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . GE expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . EQ expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . NE expression [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ AND ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On RPAREN shift to state 76
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71
## Reductions:
-- On OR reduce production condition -> expression
-- On AND reduce production condition -> expression

State 84:
## Known stack suffix:
## condition
## LR(1) items:
nontrivial_condition -> condition . AND condition [ RPAREN OR AND ]
nontrivial_condition -> condition . OR condition [ RPAREN OR AND ]
## Transitions:
-- On OR shift to state 85
-- On AND shift to state 89
## Reductions:

State 85:
## Known stack suffix:
## condition OR
## LR(1) items:
nontrivial_condition -> condition OR . condition [ THEN RPAREN OR DO AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NOT shift to state 32
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 80
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On nontrivial_condition shift to state 86
-- On expression shift to state 87
-- On condition shift to state 88
-- On callee shift to state 51
## Reductions:

State 86:
## Known stack suffix:
## nontrivial_condition
## LR(1) items:
condition -> nontrivial_condition . [ THEN RPAREN OR DO AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production condition -> nontrivial_condition

State 87:
## Known stack suffix:
## expression
## LR(1) items:
condition -> expression . [ THEN RPAREN OR DO AND ]
raw_expression -> expression . PLUS expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . MINUS expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . TIMES expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . SLASH expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . LT expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . LE expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . GT expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . GE expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . EQ expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . NE expression [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES THEN SLASH RPAREN PLUS OR NE MINUS LT LE LBRACKET GT GE EQ DO AND ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71
## Reductions:
-- On THEN reduce production condition -> expression
-- On RPAREN reduce production condition -> expression
-- On OR reduce production condition -> expression
-- On DO reduce production condition -> expression
-- On AND reduce production condition -> expression

State 88:
## Known stack suffix:
## condition OR condition
## LR(1) items:
nontrivial_condition -> condition . AND condition [ THEN RPAREN OR DO AND ]
nontrivial_condition -> condition . OR condition [ THEN RPAREN OR DO AND ]
nontrivial_condition -> condition OR condition . [ THEN RPAREN OR DO AND ]
## Transitions:
-- On AND shift to state 89
## Reductions:
-- On THEN reduce production nontrivial_condition -> condition OR condition
-- On RPAREN reduce production nontrivial_condition -> condition OR condition
-- On OR reduce production nontrivial_condition -> condition OR condition
-- On DO reduce production nontrivial_condition -> condition OR condition

State 89:
## Known stack suffix:
## condition AND
## LR(1) items:
nontrivial_condition -> condition AND . condition [ THEN RPAREN OR DO AND ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NOT shift to state 32
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 80
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On nontrivial_condition shift to state 86
-- On expression shift to state 87
-- On condition shift to state 90
-- On callee shift to state 51
## Reductions:

State 90:
## Known stack suffix:
## condition AND condition
## LR(1) items:
nontrivial_condition -> condition . AND condition [ THEN RPAREN OR DO AND ]
nontrivial_condition -> condition AND condition . [ THEN RPAREN OR DO AND ]
nontrivial_condition -> condition . OR condition [ THEN RPAREN OR DO AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nontrivial_condition -> condition AND condition

State 91:
## Known stack suffix:
## NOT condition
## LR(1) items:
nontrivial_condition -> NOT condition . [ THEN RPAREN OR DO AND ]
nontrivial_condition -> condition . AND condition [ THEN RPAREN OR DO AND ]
nontrivial_condition -> condition . OR condition [ THEN RPAREN OR DO AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nontrivial_condition -> NOT condition

State 92:
## Known stack suffix:
## WHILE condition
## LR(1) items:
instruction -> WHILE condition . DO instruction_or_block [ SEMICOLON END ELSE ]
nontrivial_condition -> condition . AND condition [ OR DO AND ]
nontrivial_condition -> condition . OR condition [ OR DO AND ]
## Transitions:
-- On OR shift to state 85
-- On DO shift to state 93
-- On AND shift to state 89
## Reductions:

State 93:
## Known stack suffix:
## WHILE condition DO
## LR(1) items:
instruction -> WHILE condition DO . instruction_or_block [ SEMICOLON END ELSE ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On WHILE shift to state 31
-- On READLN shift to state 94
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On IF shift to state 103
-- On ID shift to state 96
-- On BOOLCONST shift to state 42
-- On BEGIN shift to state 28
-- On raw_expression shift to state 43
-- On lvalue shift to state 106
-- On instruction_or_block shift to state 118
-- On instruction shift to state 112
-- On expression shift to state 99
-- On callee shift to state 113
-- On block shift to state 117
## Reductions:

State 94:
## Known stack suffix:
## READLN
## LR(1) items:
instruction -> READLN . LPAREN lvalue RPAREN [ SEMICOLON END ELSE ]
## Transitions:
-- On LPAREN shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## READLN LPAREN
## LR(1) items:
instruction -> READLN LPAREN . lvalue RPAREN [ SEMICOLON END ELSE ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 96
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On lvalue shift to state 97
-- On expression shift to state 99
-- On callee shift to state 51
## Reductions:

State 96:
## Known stack suffix:
## ID
## LR(1) items:
callee -> ID . [ LPAREN ]
lvalue -> ID . [ RPAREN COLONEQ ]
raw_expression -> ID . [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
## Transitions:
## Reductions:
-- On TIMES reduce production raw_expression -> ID
-- On SLASH reduce production raw_expression -> ID
-- On RPAREN reduce production lvalue -> ID
-- On PLUS reduce production raw_expression -> ID
-- On NE reduce production raw_expression -> ID
-- On MINUS reduce production raw_expression -> ID
-- On LT reduce production raw_expression -> ID
-- On LPAREN reduce production callee -> ID
-- On LE reduce production raw_expression -> ID
-- On LBRACKET reduce production raw_expression -> ID
-- On GT reduce production raw_expression -> ID
-- On GE reduce production raw_expression -> ID
-- On EQ reduce production raw_expression -> ID
-- On COLONEQ reduce production lvalue -> ID

State 97:
## Known stack suffix:
## READLN LPAREN lvalue
## LR(1) items:
instruction -> READLN LPAREN lvalue . RPAREN [ SEMICOLON END ELSE ]
## Transitions:
-- On RPAREN shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## READLN LPAREN lvalue RPAREN
## LR(1) items:
instruction -> READLN LPAREN lvalue RPAREN . [ SEMICOLON END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instruction -> READLN LPAREN lvalue RPAREN

State 99:
## Known stack suffix:
## expression
## LR(1) items:
lvalue -> expression . LBRACKET expression RBRACKET [ RPAREN COLONEQ ]
raw_expression -> expression . PLUS expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . MINUS expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . TIMES expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . SLASH expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LT expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LE expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GT expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GE expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . EQ expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . NE expression [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 100
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71
## Reductions:

State 100:
## Known stack suffix:
## expression LBRACKET
## LR(1) items:
lvalue -> expression LBRACKET . expression RBRACKET [ RPAREN COLONEQ ]
raw_expression -> expression LBRACKET . expression RBRACKET [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 101
-- On callee shift to state 51
## Reductions:

State 101:
## Known stack suffix:
## expression LBRACKET expression
## LR(1) items:
lvalue -> expression LBRACKET expression . RBRACKET [ RPAREN COLONEQ ]
raw_expression -> expression . PLUS expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . MINUS expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . TIMES expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . SLASH expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LT expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GT expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . GE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . EQ expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . NE expression [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH RBRACKET PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
raw_expression -> expression LBRACKET expression . RBRACKET [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On RBRACKET shift to state 102
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71
## Reductions:

State 102:
## Known stack suffix:
## expression LBRACKET expression RBRACKET
## LR(1) items:
lvalue -> expression LBRACKET expression RBRACKET . [ RPAREN COLONEQ ]
raw_expression -> expression LBRACKET expression RBRACKET . [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
## Transitions:
## Reductions:
-- On TIMES reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On SLASH reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On RPAREN reduce production lvalue -> expression LBRACKET expression RBRACKET
-- On PLUS reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On NE reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On MINUS reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On LT reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On LE reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On LBRACKET reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On GT reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On GE reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On EQ reduce production raw_expression -> expression LBRACKET expression RBRACKET
-- On COLONEQ reduce production lvalue -> expression LBRACKET expression RBRACKET

State 103:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . condition THEN instruction_or_block [ SEMICOLON END ELSE ]
instruction -> IF . condition THEN instruction_or_block ELSE instruction_or_block [ SEMICOLON END ELSE ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NOT shift to state 32
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 80
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On nontrivial_condition shift to state 86
-- On expression shift to state 87
-- On condition shift to state 104
-- On callee shift to state 51
## Reductions:

State 104:
## Known stack suffix:
## IF condition
## LR(1) items:
instruction -> IF condition . THEN instruction_or_block [ SEMICOLON END ELSE ]
instruction -> IF condition . THEN instruction_or_block ELSE instruction_or_block [ SEMICOLON END ELSE ]
nontrivial_condition -> condition . AND condition [ THEN OR AND ]
nontrivial_condition -> condition . OR condition [ THEN OR AND ]
## Transitions:
-- On THEN shift to state 105
-- On OR shift to state 85
-- On AND shift to state 89
## Reductions:

State 105:
## Known stack suffix:
## IF condition THEN
## LR(1) items:
instruction -> IF condition THEN . instruction_or_block [ SEMICOLON END ELSE ]
instruction -> IF condition THEN . instruction_or_block ELSE instruction_or_block [ SEMICOLON END ELSE ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On WHILE shift to state 31
-- On READLN shift to state 94
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On IF shift to state 103
-- On ID shift to state 96
-- On BOOLCONST shift to state 42
-- On BEGIN shift to state 28
-- On raw_expression shift to state 43
-- On lvalue shift to state 106
-- On instruction_or_block shift to state 109
-- On instruction shift to state 112
-- On expression shift to state 99
-- On callee shift to state 113
-- On block shift to state 117
## Reductions:

State 106:
## Known stack suffix:
## lvalue
## LR(1) items:
instruction -> lvalue . COLONEQ expression [ SEMICOLON END ELSE ]
## Transitions:
-- On COLONEQ shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## lvalue COLONEQ
## LR(1) items:
instruction -> lvalue COLONEQ . expression [ SEMICOLON END ELSE ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On raw_expression shift to state 43
-- On expression shift to state 108
-- On callee shift to state 51
## Reductions:

State 108:
## Known stack suffix:
## lvalue COLONEQ expression
## LR(1) items:
instruction -> lvalue COLONEQ expression . [ SEMICOLON END ELSE ]
raw_expression -> expression . PLUS expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . MINUS expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . TIMES expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . SLASH expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . LT expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . LE expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . GT expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . GE expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . EQ expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . NE expression [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SLASH SEMICOLON PLUS NE MINUS LT LE LBRACKET GT GE EQ END ELSE ]
## Transitions:
-- On TIMES shift to state 45
-- On SLASH shift to state 49
-- On PLUS shift to state 57
-- On NE shift to state 59
-- On MINUS shift to state 61
-- On LT shift to state 63
-- On LE shift to state 65
-- On LBRACKET shift to state 47
-- On GT shift to state 67
-- On GE shift to state 69
-- On EQ shift to state 71
## Reductions:
-- On SEMICOLON reduce production instruction -> lvalue COLONEQ expression
-- On END reduce production instruction -> lvalue COLONEQ expression
-- On ELSE reduce production instruction -> lvalue COLONEQ expression

State 109:
## Known stack suffix:
## IF condition THEN instruction_or_block
## LR(1) items:
instruction -> IF condition THEN instruction_or_block . [ SEMICOLON END ELSE ]
instruction -> IF condition THEN instruction_or_block . ELSE instruction_or_block [ SEMICOLON END ELSE ]
## Transitions:
-- On ELSE shift to state 110
## Reductions:
-- On SEMICOLON reduce production instruction -> IF condition THEN instruction_or_block
-- On END reduce production instruction -> IF condition THEN instruction_or_block

State 110:
## Known stack suffix:
## IF condition THEN instruction_or_block ELSE
## LR(1) items:
instruction -> IF condition THEN instruction_or_block ELSE . instruction_or_block [ SEMICOLON END ELSE ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On WHILE shift to state 31
-- On READLN shift to state 94
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On IF shift to state 103
-- On ID shift to state 96
-- On BOOLCONST shift to state 42
-- On BEGIN shift to state 28
-- On raw_expression shift to state 43
-- On lvalue shift to state 106
-- On instruction_or_block shift to state 111
-- On instruction shift to state 112
-- On expression shift to state 99
-- On callee shift to state 113
-- On block shift to state 117
## Reductions:

State 111:
## Known stack suffix:
## IF condition THEN instruction_or_block ELSE instruction_or_block
## LR(1) items:
instruction -> IF condition THEN instruction_or_block ELSE instruction_or_block . [ SEMICOLON END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instruction -> IF condition THEN instruction_or_block ELSE instruction_or_block

State 112:
## Known stack suffix:
## instruction
## LR(1) items:
instruction_or_block -> instruction . [ SEMICOLON END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instruction_or_block -> instruction

State 113:
## Known stack suffix:
## callee
## LR(1) items:
instruction -> callee . LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ SEMICOLON END ELSE ]
raw_expression -> callee . LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
## Transitions:
-- On LPAREN shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## callee LPAREN
## LR(1) items:
instruction -> callee LPAREN . loption(separated_nonempty_list(COMMA,expression)) RPAREN [ SEMICOLON END ELSE ]
raw_expression -> callee LPAREN . loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On ID shift to state 41
-- On BOOLCONST shift to state 42
-- On separated_nonempty_list(COMMA,expression) shift to state 53
-- On raw_expression shift to state 43
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 115
-- On expression shift to state 56
-- On callee shift to state 51
## Reductions:
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,expression)) ->

State 115:
## Known stack suffix:
## callee LPAREN loption(separated_nonempty_list(COMMA,expression))
## LR(1) items:
instruction -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) . RPAREN [ SEMICOLON END ELSE ]
raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) . RPAREN [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
## Transitions:
-- On RPAREN shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
## LR(1) items:
instruction -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN . [ SEMICOLON END ELSE ]
raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN . [ TIMES SLASH PLUS NE MINUS LT LE LBRACKET GT GE EQ ]
## Transitions:
## Reductions:
-- On TIMES reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On SLASH reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On SEMICOLON reduce production instruction -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On PLUS reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On NE reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On MINUS reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On LT reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On LE reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On LBRACKET reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On GT reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On GE reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On EQ reduce production raw_expression -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On END reduce production instruction -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
-- On ELSE reduce production instruction -> callee LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN

State 117:
## Known stack suffix:
## block
## LR(1) items:
instruction_or_block -> block . [ SEMICOLON END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instruction_or_block -> block

State 118:
## Known stack suffix:
## WHILE condition DO instruction_or_block
## LR(1) items:
instruction -> WHILE condition DO instruction_or_block . [ SEMICOLON END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instruction -> WHILE condition DO instruction_or_block

State 119:
## Known stack suffix:
## separated_nonempty_list(SEMICOLON,instruction)
## LR(1) items:
loption(separated_nonempty_list(SEMICOLON,instruction)) -> separated_nonempty_list(SEMICOLON,instruction) . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(SEMICOLON,instruction)) -> separated_nonempty_list(SEMICOLON,instruction)

State 120:
## Known stack suffix:
## BEGIN loption(separated_nonempty_list(SEMICOLON,instruction))
## LR(1) items:
block -> BEGIN loption(separated_nonempty_list(SEMICOLON,instruction)) . END [ SEMICOLON END ELSE DOT ]
## Transitions:
-- On END shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## BEGIN loption(separated_nonempty_list(SEMICOLON,instruction)) END
## LR(1) items:
block -> BEGIN loption(separated_nonempty_list(SEMICOLON,instruction)) END . [ SEMICOLON END ELSE DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block -> BEGIN loption(separated_nonempty_list(SEMICOLON,instruction)) END

State 122:
## Known stack suffix:
## instruction
## LR(1) items:
separated_nonempty_list(SEMICOLON,instruction) -> instruction . [ END ]
separated_nonempty_list(SEMICOLON,instruction) -> instruction . SEMICOLON separated_nonempty_list(SEMICOLON,instruction) [ END ]
## Transitions:
-- On SEMICOLON shift to state 123
## Reductions:
-- On END reduce production separated_nonempty_list(SEMICOLON,instruction) -> instruction

State 123:
## Known stack suffix:
## instruction SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,instruction) -> instruction SEMICOLON . separated_nonempty_list(SEMICOLON,instruction) [ END ]
## Transitions:
-- On WRITELN shift to state 29
-- On WRITE shift to state 30
-- On WHILE shift to state 31
-- On READLN shift to state 94
-- On NEW shift to state 33
-- On MINUS shift to state 38
-- On LPAREN shift to state 39
-- On INTCONST shift to state 40
-- On IF shift to state 103
-- On ID shift to state 96
-- On BOOLCONST shift to state 42
-- On separated_nonempty_list(SEMICOLON,instruction) shift to state 124
-- On raw_expression shift to state 43
-- On lvalue shift to state 106
-- On instruction shift to state 122
-- On expression shift to state 99
-- On callee shift to state 113
## Reductions:

State 124:
## Known stack suffix:
## instruction SEMICOLON separated_nonempty_list(SEMICOLON,instruction)
## LR(1) items:
separated_nonempty_list(SEMICOLON,instruction) -> instruction SEMICOLON separated_nonempty_list(SEMICOLON,instruction) . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(SEMICOLON,instruction) -> instruction SEMICOLON separated_nonempty_list(SEMICOLON,instruction)

State 125:
## Known stack suffix:
## PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON variables block
## LR(1) items:
procedure -> PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON variables block . SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON variables block SEMICOLON
## LR(1) items:
procedure -> PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON variables block SEMICOLON . [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production procedure -> PROCEDURE ID LPAREN separated_bindings RPAREN SEMICOLON variables block SEMICOLON

State 127:
## Known stack suffix:
## loption(preceded(VAR,terminated_bindings))
## LR(1) items:
variables -> loption(preceded(VAR,terminated_bindings)) . [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variables -> loption(preceded(VAR,terminated_bindings))

State 128:
## Known stack suffix:
## loption(separated_nonempty_list(SEMICOLON,binding))
## LR(1) items:
separated_bindings -> loption(separated_nonempty_list(SEMICOLON,binding)) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_bindings -> loption(separated_nonempty_list(SEMICOLON,binding))

State 129:
## Known stack suffix:
## binding
## LR(1) items:
separated_nonempty_list(SEMICOLON,binding) -> binding . [ RPAREN ]
separated_nonempty_list(SEMICOLON,binding) -> binding . SEMICOLON separated_nonempty_list(SEMICOLON,binding) [ RPAREN ]
## Transitions:
-- On SEMICOLON shift to state 130
## Reductions:
-- On RPAREN reduce production separated_nonempty_list(SEMICOLON,binding) -> binding

State 130:
## Known stack suffix:
## binding SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,binding) -> binding SEMICOLON . separated_nonempty_list(SEMICOLON,binding) [ RPAREN ]
## Transitions:
-- On ID shift to state 3
-- On separated_nonempty_list(SEMICOLON,binding) shift to state 131
-- On separated_nonempty_list(COMMA,ID) shift to state 7
-- On binding shift to state 129
## Reductions:

State 131:
## Known stack suffix:
## binding SEMICOLON separated_nonempty_list(SEMICOLON,binding)
## LR(1) items:
separated_nonempty_list(SEMICOLON,binding) -> binding SEMICOLON separated_nonempty_list(SEMICOLON,binding) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(SEMICOLON,binding) -> binding SEMICOLON separated_nonempty_list(SEMICOLON,binding)

State 132:
## Known stack suffix:
## FUNCTION
## LR(1) items:
procedure -> FUNCTION . ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On ID shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## FUNCTION ID
## LR(1) items:
procedure -> FUNCTION ID . LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On LPAREN shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## FUNCTION ID LPAREN
## LR(1) items:
procedure -> FUNCTION ID LPAREN . separated_bindings RPAREN COLON typ SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On ID shift to state 3
-- On separated_nonempty_list(SEMICOLON,binding) shift to state 23
-- On separated_nonempty_list(COMMA,ID) shift to state 7
-- On separated_bindings shift to state 135
-- On loption(separated_nonempty_list(SEMICOLON,binding)) shift to state 128
-- On binding shift to state 129
## Reductions:
-- On RPAREN reduce production loption(separated_nonempty_list(SEMICOLON,binding)) ->

State 135:
## Known stack suffix:
## FUNCTION ID LPAREN separated_bindings
## LR(1) items:
procedure -> FUNCTION ID LPAREN separated_bindings . RPAREN COLON typ SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On RPAREN shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## FUNCTION ID LPAREN separated_bindings RPAREN
## LR(1) items:
procedure -> FUNCTION ID LPAREN separated_bindings RPAREN . COLON typ SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On COLON shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## FUNCTION ID LPAREN separated_bindings RPAREN COLON
## LR(1) items:
procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON . typ SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On INTEGER shift to state 9
-- On BOOLEAN shift to state 10
-- On ARRAY shift to state 11
-- On typ shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## FUNCTION ID LPAREN separated_bindings RPAREN COLON typ
## LR(1) items:
procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON typ . SEMICOLON variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON
## LR(1) items:
procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON . variables block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On VAR shift to state 2
-- On variables shift to state 140
-- On loption(preceded(VAR,terminated_bindings)) shift to state 127
## Reductions:
-- On BEGIN reduce production loption(preceded(VAR,terminated_bindings)) ->

State 140:
## Known stack suffix:
## FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables
## LR(1) items:
procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables . block SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On BEGIN shift to state 28
-- On block shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables block
## LR(1) items:
procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables block . SEMICOLON [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables block SEMICOLON
## LR(1) items:
procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables block SEMICOLON . [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production procedure -> FUNCTION ID LPAREN separated_bindings RPAREN COLON typ SEMICOLON variables block SEMICOLON

State 143:
## Known stack suffix:
## procedure
## LR(1) items:
list(procedure) -> procedure . list(procedure) [ BEGIN ]
## Transitions:
-- On PROCEDURE shift to state 20
-- On FUNCTION shift to state 132
-- On procedure shift to state 143
-- On list(procedure) shift to state 144
## Reductions:
-- On BEGIN reduce production list(procedure) ->

State 144:
## Known stack suffix:
## procedure list(procedure)
## LR(1) items:
list(procedure) -> procedure list(procedure) . [ BEGIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(procedure) -> procedure list(procedure)

State 145:
## Known stack suffix:
## PROGRAM variables list(procedure)
## LR(1) items:
program -> PROGRAM variables list(procedure) . block DOT [ # ]
## Transitions:
-- On BEGIN shift to state 28
-- On block shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## PROGRAM variables list(procedure) block
## LR(1) items:
program -> PROGRAM variables list(procedure) block . DOT [ # ]
## Transitions:
-- On DOT shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## PROGRAM variables list(procedure) block DOT
## LR(1) items:
program -> PROGRAM variables list(procedure) block DOT . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production program -> PROGRAM variables list(procedure) block DOT

State 148:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept program

