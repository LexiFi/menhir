Grammar has 26 nonterminal symbols, among which 1 start symbols.
Grammar has 44 terminal symbols.
Grammar has 69 productions.
nullable(variables) = true
nullable(typ) = false
nullable(terminated_bindings) = false
nullable(separated_nonempty_list(SEMICOLON,instruction)) = false
nullable(separated_nonempty_list(SEMICOLON,binding)) = false
nullable(separated_nonempty_list(COMMA,expression)) = false
nullable(separated_nonempty_list(COMMA,ID)) = false
nullable(separated_bindings) = true
nullable(raw_expression) = false
nullable(program) = false
nullable(procedure) = false
nullable(nontrivial_condition) = false
nullable(nonempty_list(terminated(binding,SEMICOLON))) = false
nullable(lvalue) = false
nullable(loption(separated_nonempty_list(SEMICOLON,instruction))) = true
nullable(loption(separated_nonempty_list(SEMICOLON,binding))) = true
nullable(loption(separated_nonempty_list(COMMA,expression))) = true
nullable(loption(preceded(VAR,terminated_bindings))) = true
nullable(list(procedure)) = true
nullable(instruction_or_block) = false
nullable(instruction) = false
nullable(expression) = false
nullable(condition) = false
nullable(callee) = false
nullable(block) = false
nullable(binding) = false
first(variables) = VAR
first(typ) = INTEGER BOOLEAN ARRAY
first(terminated_bindings) = ID
first(separated_nonempty_list(SEMICOLON,instruction)) = WRITELN WRITE WHILE READLN NEW MINUS LPAREN INTCONST IF ID BOOLCONST
first(separated_nonempty_list(SEMICOLON,binding)) = ID
first(separated_nonempty_list(COMMA,expression)) = WRITELN WRITE NEW MINUS LPAREN INTCONST ID BOOLCONST
first(separated_nonempty_list(COMMA,ID)) = ID
first(separated_bindings) = ID
first(raw_expression) = WRITELN WRITE NEW MINUS LPAREN INTCONST ID BOOLCONST
first(program) = PROGRAM
first(procedure) = PROCEDURE FUNCTION
first(nontrivial_condition) = WRITELN WRITE NOT NEW MINUS LPAREN INTCONST ID BOOLCONST
first(nonempty_list(terminated(binding,SEMICOLON))) = ID
first(lvalue) = WRITELN WRITE NEW MINUS LPAREN INTCONST ID BOOLCONST
first(loption(separated_nonempty_list(SEMICOLON,instruction))) = WRITELN WRITE WHILE READLN NEW MINUS LPAREN INTCONST IF ID BOOLCONST
first(loption(separated_nonempty_list(SEMICOLON,binding))) = ID
first(loption(separated_nonempty_list(COMMA,expression))) = WRITELN WRITE NEW MINUS LPAREN INTCONST ID BOOLCONST
first(loption(preceded(VAR,terminated_bindings))) = VAR
first(list(procedure)) = PROCEDURE FUNCTION
first(instruction_or_block) = WRITELN WRITE WHILE READLN NEW MINUS LPAREN INTCONST IF ID BOOLCONST BEGIN
first(instruction) = WRITELN WRITE WHILE READLN NEW MINUS LPAREN INTCONST IF ID BOOLCONST
first(expression) = WRITELN WRITE NEW MINUS LPAREN INTCONST ID BOOLCONST
first(condition) = WRITELN WRITE NOT NEW MINUS LPAREN INTCONST ID BOOLCONST
first(callee) = WRITELN WRITE ID
first(block) = BEGIN
first(binding) = ID
minimal(variables) = (* 0 *)
minimal(typ) = (* 1 *) INTEGER
minimal(terminated_bindings) = (* 4 *) ID COLON INTEGER SEMICOLON
minimal(separated_nonempty_list(SEMICOLON,instruction)) = (* 3 *) WRITE LPAREN RPAREN
minimal(separated_nonempty_list(SEMICOLON,binding)) = (* 3 *) ID COLON INTEGER
minimal(separated_nonempty_list(COMMA,expression)) = (* 1 *) INTCONST
minimal(separated_nonempty_list(COMMA,ID)) = (* 1 *) ID
minimal(separated_bindings) = (* 0 *)
minimal(raw_expression) = (* 1 *) INTCONST
minimal(program) = (* 4 *) PROGRAM BEGIN END DOT
minimal(procedure) = (* 8 *) PROCEDURE ID LPAREN RPAREN SEMICOLON BEGIN END SEMICOLON
minimal(nontrivial_condition) = (* 2 *) NOT INTCONST
minimal(nonempty_list(terminated(binding,SEMICOLON))) = (* 4 *) ID COLON INTEGER SEMICOLON
minimal(lvalue) = (* 1 *) ID
minimal(loption(separated_nonempty_list(SEMICOLON,instruction))) = (* 0 *)
minimal(loption(separated_nonempty_list(SEMICOLON,binding))) = (* 0 *)
minimal(loption(separated_nonempty_list(COMMA,expression))) = (* 0 *)
minimal(loption(preceded(VAR,terminated_bindings))) = (* 0 *)
minimal(list(procedure)) = (* 0 *)
minimal(instruction_or_block) = (* 2 *) BEGIN END
minimal(instruction) = (* 3 *) WRITE LPAREN RPAREN
minimal(expression) = (* 1 *) INTCONST
minimal(condition) = (* 1 *) INTCONST
minimal(callee) = (* 1 *) WRITE
minimal(block) = (* 2 *) BEGIN END
minimal(binding) = (* 3 *) ID COLON INTEGER
follow(variables) = PROCEDURE FUNCTION BEGIN
follow(typ) = SEMICOLON RPAREN LBRACKET
follow(terminated_bindings) = PROCEDURE FUNCTION BEGIN
follow(separated_nonempty_list(SEMICOLON,instruction)) = END
follow(separated_nonempty_list(SEMICOLON,binding)) = RPAREN
follow(separated_nonempty_list(COMMA,expression)) = RPAREN
follow(separated_nonempty_list(COMMA,ID)) = COLON
follow(separated_bindings) = RPAREN
follow(raw_expression) = TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND
follow(program) = #
follow(procedure) = PROCEDURE FUNCTION BEGIN
follow(nontrivial_condition) = THEN RPAREN OR DO AND
follow(nonempty_list(terminated(binding,SEMICOLON))) = PROCEDURE FUNCTION BEGIN
follow(lvalue) = RPAREN COLONEQ
follow(loption(separated_nonempty_list(SEMICOLON,instruction))) = END
follow(loption(separated_nonempty_list(SEMICOLON,binding))) = RPAREN
follow(loption(separated_nonempty_list(COMMA,expression))) = RPAREN
follow(loption(preceded(VAR,terminated_bindings))) = PROCEDURE FUNCTION BEGIN
follow(list(procedure)) = BEGIN
follow(instruction_or_block) = SEMICOLON END ELSE
follow(instruction) = SEMICOLON END ELSE
follow(expression) = TIMES THEN SLASH SEMICOLON RPAREN RBRACKET PLUS OR NE MINUS LT LE LBRACKET GT GE EQ END ELSE DO COMMA AND
follow(condition) = THEN RPAREN OR DO AND
follow(callee) = LPAREN
follow(block) = SEMICOLON END ELSE DOT
follow(binding) = SEMICOLON RPAREN
Built an LR(0) automaton with 149 states.
The grammar is not SLR(1) -- 20 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 149 states.
128 shift/reduce conflicts were silently solved.
40 out of 149 states have a default reduction.
49 out of 149 states are represented.
12 out of 73 symbols keep track of their start position.
11 out of 73 symbols keep track of their end position.
27 out of 70 productions exploit shiftreduce optimization.
249 functions before inlining, 69 functions after inlining.
