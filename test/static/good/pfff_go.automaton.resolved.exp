State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On LPACKAGE shift to state 1
-- On package shift to state 4
-- On file shift to state 544
## Reductions:

State 1:
## Known stack suffix:
## LPACKAGE
## LR(1) items:
package -> LPACKAGE . sym [ LSEMICOLON EOF ]
## Transitions:
-- On LNAME shift to state 2
-- On sym shift to state 3
## Reductions:

State 2:
## Known stack suffix:
## LNAME
## LR(1) items:
sym -> LNAME . [ RPAREN RDots RBRACKET RBRACE LSTRUCT LSTR LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LNAME LMULT LMINUS LMAP LLT LLSH LLE LINTERFACE LINC LHAT LGT LGE LFUNC LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCHAN LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sym -> LNAME

State 3:
## Known stack suffix:
## LPACKAGE sym
## LR(1) items:
package -> LPACKAGE sym . [ LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production package -> LPACKAGE sym

State 4:
## Known stack suffix:
## package
## LR(1) items:
file -> package . LSEMICOLON imports xdcl_list EOF [ # ]
## Transitions:
-- On LSEMICOLON shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## package LSEMICOLON
## LR(1) items:
file -> package LSEMICOLON . imports xdcl_list EOF [ # ]
## Transitions:
-- On imports shift to state 6
## Default reduction:
-- After reading the next token, reduce production imports ->

State 6:
## Known stack suffix:
## package LSEMICOLON imports
## LR(1) items:
file -> package LSEMICOLON imports . xdcl_list EOF [ # ]
imports -> imports . import LSEMICOLON [ LVAR LTYPE LIMPORT LFUNC LCONST EOF ]
## Transitions:
-- On LIMPORT shift to state 7
-- On xdcl_list shift to state 22
-- On import shift to state 542
## Reductions:
-- On LVAR LTYPE LFUNC LCONST EOF
--   reduce production xdcl_list ->

State 7:
## Known stack suffix:
## LIMPORT
## LR(1) items:
import -> LIMPORT . import_stmt [ LSEMICOLON EOF ]
import -> LIMPORT . LPAREN listsc_t(import_stmt) RPAREN [ LSEMICOLON EOF ]
import -> LIMPORT . LPAREN RPAREN [ LSEMICOLON EOF ]
## Transitions:
-- On LSTR shift to state 8
-- On LPAREN shift to state 9
-- On LNAME shift to state 2
-- On LDOT shift to state 11
-- On sym shift to state 13
-- On import_stmt shift to state 21
## Reductions:

State 8:
## Known stack suffix:
## LSTR
## LR(1) items:
import_stmt -> LSTR . [ RPAREN LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_stmt -> LSTR

State 9:
## Known stack suffix:
## LIMPORT LPAREN
## LR(1) items:
import -> LIMPORT LPAREN . listsc_t(import_stmt) RPAREN [ LSEMICOLON EOF ]
import -> LIMPORT LPAREN . RPAREN [ LSEMICOLON EOF ]
## Transitions:
-- On RPAREN shift to state 10
-- On LSTR shift to state 8
-- On LNAME shift to state 2
-- On LDOT shift to state 11
-- On sym shift to state 13
-- On listsc_t(import_stmt) shift to state 15
-- On list_sep_term(import_stmt,LSEMICOLON) shift to state 17
-- On import_stmt shift to state 18
## Reductions:

State 10:
## Known stack suffix:
## LIMPORT LPAREN RPAREN
## LR(1) items:
import -> LIMPORT LPAREN RPAREN . [ LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import -> LIMPORT LPAREN RPAREN

State 11:
## Known stack suffix:
## LDOT
## LR(1) items:
import_stmt -> LDOT . LSTR [ RPAREN LSEMICOLON EOF ]
## Transitions:
-- On LSTR shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## LDOT LSTR
## LR(1) items:
import_stmt -> LDOT LSTR . [ RPAREN LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_stmt -> LDOT LSTR

State 13:
## Known stack suffix:
## sym
## LR(1) items:
import_stmt -> sym . LSTR [ RPAREN LSEMICOLON EOF ]
## Transitions:
-- On LSTR shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## sym LSTR
## LR(1) items:
import_stmt -> sym LSTR . [ RPAREN LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_stmt -> sym LSTR

State 15:
## Known stack suffix:
## LIMPORT LPAREN listsc_t(import_stmt)
## LR(1) items:
import -> LIMPORT LPAREN listsc_t(import_stmt) . RPAREN [ LSEMICOLON EOF ]
## Transitions:
-- On RPAREN shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## LIMPORT LPAREN listsc_t(import_stmt) RPAREN
## LR(1) items:
import -> LIMPORT LPAREN listsc_t(import_stmt) RPAREN . [ LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import -> LIMPORT LPAREN listsc_t(import_stmt) RPAREN

State 17:
## Known stack suffix:
## list_sep_term(import_stmt,LSEMICOLON)
## LR(1) items:
listsc_t(import_stmt) -> list_sep_term(import_stmt,LSEMICOLON) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listsc_t(import_stmt) -> list_sep_term(import_stmt,LSEMICOLON)

State 18:
## Known stack suffix:
## import_stmt
## LR(1) items:
list_sep_term(import_stmt,LSEMICOLON) -> import_stmt . [ RPAREN ]
list_sep_term(import_stmt,LSEMICOLON) -> import_stmt . LSEMICOLON [ RPAREN ]
list_sep_term(import_stmt,LSEMICOLON) -> import_stmt . LSEMICOLON list_sep_term(import_stmt,LSEMICOLON) [ RPAREN ]
## Transitions:
-- On LSEMICOLON shift to state 19
## Reductions:
-- On RPAREN
--   reduce production list_sep_term(import_stmt,LSEMICOLON) -> import_stmt

State 19:
## Known stack suffix:
## import_stmt LSEMICOLON
## LR(1) items:
list_sep_term(import_stmt,LSEMICOLON) -> import_stmt LSEMICOLON . [ RPAREN ]
list_sep_term(import_stmt,LSEMICOLON) -> import_stmt LSEMICOLON . list_sep_term(import_stmt,LSEMICOLON) [ RPAREN ]
## Transitions:
-- On LSTR shift to state 8
-- On LNAME shift to state 2
-- On LDOT shift to state 11
-- On sym shift to state 13
-- On list_sep_term(import_stmt,LSEMICOLON) shift to state 20
-- On import_stmt shift to state 18
## Reductions:
-- On RPAREN
--   reduce production list_sep_term(import_stmt,LSEMICOLON) -> import_stmt LSEMICOLON

State 20:
## Known stack suffix:
## import_stmt LSEMICOLON list_sep_term(import_stmt,LSEMICOLON)
## LR(1) items:
list_sep_term(import_stmt,LSEMICOLON) -> import_stmt LSEMICOLON list_sep_term(import_stmt,LSEMICOLON) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_sep_term(import_stmt,LSEMICOLON) -> import_stmt LSEMICOLON list_sep_term(import_stmt,LSEMICOLON)

State 21:
## Known stack suffix:
## LIMPORT import_stmt
## LR(1) items:
import -> LIMPORT import_stmt . [ LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import -> LIMPORT import_stmt

State 22:
## Known stack suffix:
## package LSEMICOLON imports xdcl_list
## LR(1) items:
file -> package LSEMICOLON imports xdcl_list . EOF [ # ]
xdcl_list -> xdcl_list . xdcl LSEMICOLON [ LVAR LTYPE LFUNC LCONST EOF ]
## Transitions:
-- On LVAR shift to state 23
-- On LTYPE shift to state 123
-- On LFUNC shift to state 518
-- On LCONST shift to state 315
-- On EOF shift to state 537
-- On xfndcl shift to state 538
-- On xdcl shift to state 539
-- On common_dcl shift to state 541
## Reductions:

State 23:
## Known stack suffix:
## LVAR
## LR(1) items:
common_dcl -> LVAR . vardcl [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
common_dcl -> LVAR . LPAREN listsc_t(vardcl) RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
common_dcl -> LVAR . LPAREN RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LPAREN shift to state 24
-- On LNAME shift to state 2
-- On vardcl shift to state 517
-- On sym shift to state 28
-- On listc(dcl_name) shift to state 29
-- On list_sep(dcl_name,LCOMMA) shift to state 324
## Reductions:

State 24:
## Known stack suffix:
## LVAR LPAREN
## LR(1) items:
common_dcl -> LVAR LPAREN . listsc_t(vardcl) RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
common_dcl -> LVAR LPAREN . RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On RPAREN shift to state 25
-- On LNAME shift to state 2
-- On vardcl shift to state 26
-- On sym shift to state 28
-- On listsc_t(vardcl) shift to state 514
-- On listc(dcl_name) shift to state 29
-- On list_sep_term(vardcl,LSEMICOLON) shift to state 516
-- On list_sep(dcl_name,LCOMMA) shift to state 324
## Reductions:

State 25:
## Known stack suffix:
## LVAR LPAREN RPAREN
## LR(1) items:
common_dcl -> LVAR LPAREN RPAREN . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production common_dcl -> LVAR LPAREN RPAREN

State 26:
## Known stack suffix:
## vardcl
## LR(1) items:
list_sep_term(vardcl,LSEMICOLON) -> vardcl . [ RPAREN ]
list_sep_term(vardcl,LSEMICOLON) -> vardcl . LSEMICOLON [ RPAREN ]
list_sep_term(vardcl,LSEMICOLON) -> vardcl . LSEMICOLON list_sep_term(vardcl,LSEMICOLON) [ RPAREN ]
## Transitions:
-- On LSEMICOLON shift to state 27
## Reductions:
-- On RPAREN
--   reduce production list_sep_term(vardcl,LSEMICOLON) -> vardcl

State 27:
## Known stack suffix:
## vardcl LSEMICOLON
## LR(1) items:
list_sep_term(vardcl,LSEMICOLON) -> vardcl LSEMICOLON . [ RPAREN ]
list_sep_term(vardcl,LSEMICOLON) -> vardcl LSEMICOLON . list_sep_term(vardcl,LSEMICOLON) [ RPAREN ]
## Transitions:
-- On LNAME shift to state 2
-- On vardcl shift to state 26
-- On sym shift to state 28
-- On listc(dcl_name) shift to state 29
-- On list_sep_term(vardcl,LSEMICOLON) shift to state 513
-- On list_sep(dcl_name,LCOMMA) shift to state 324
## Reductions:
-- On RPAREN
--   reduce production list_sep_term(vardcl,LSEMICOLON) -> vardcl LSEMICOLON

State 28:
## Known stack suffix:
## sym
## LR(1) items:
list_sep(dcl_name,LCOMMA) -> sym . [ RPAREN LSTRUCT LSEMICOLON LPAREN LNAME LMULT LMAP LINTERFACE LFUNC LEQ LCOMMA LCOMM LCHAN LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_sep(dcl_name,LCOMMA) -> sym

State 29:
## Known stack suffix:
## listc(dcl_name)
## LR(1) items:
vardcl -> listc(dcl_name) . ntype [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
vardcl -> listc(dcl_name) . ntype LEQ listc(expr) [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
vardcl -> listc(dcl_name) . LEQ listc(expr) [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LEQ shift to state 508
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 510
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 30:
## Known stack suffix:
## LSTRUCT
## LR(1) items:
structtype -> LSTRUCT . lbrace listsc_t(structdcl) RBRACE [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
structtype -> LSTRUCT . lbrace RBRACE [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LBRACE shift to state 31
-- On LBODY shift to state 32
-- On lbrace shift to state 33
## Reductions:

State 31:
## Known stack suffix:
## LBRACE
## LR(1) items:
lbrace -> LBRACE . [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDDD LCONTINUE LCONST LCOMM LCHAN LBREAK LBRACKET LBRACE LBANG LAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lbrace -> LBRACE

State 32:
## Known stack suffix:
## LBODY
## LR(1) items:
lbrace -> LBODY . [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDDD LCONTINUE LCONST LCOMM LCHAN LBREAK LBRACKET LBRACE LBANG LAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lbrace -> LBODY

State 33:
## Known stack suffix:
## LSTRUCT lbrace
## LR(1) items:
structtype -> LSTRUCT lbrace . listsc_t(structdcl) RBRACE [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
structtype -> LSTRUCT lbrace . RBRACE [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On RBRACE shift to state 34
-- On LNAME shift to state 35
-- On LMULT shift to state 38
-- On LDDD shift to state 43
-- On sym shift to state 44
-- On structdcl shift to state 45
-- On packname shift to state 47
-- On listsc_t(structdcl) shift to state 505
-- On listc(new_name) shift to state 49
-- On list_sep_term(structdcl,LSEMICOLON) shift to state 507
-- On list_sep(new_name,LCOMMA) shift to state 502
## Reductions:

State 34:
## Known stack suffix:
## LSTRUCT lbrace RBRACE
## LR(1) items:
structtype -> LSTRUCT lbrace RBRACE . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structtype -> LSTRUCT lbrace RBRACE

State 35:
## Known stack suffix:
## LNAME
## LR(1) items:
packname -> LNAME . [ RBRACE LSTR LSEMICOLON ]
packname -> LNAME . LDOT sym [ RBRACE LSTR LSEMICOLON ]
sym -> LNAME . [ LSTRUCT LPAREN LNAME LMULT LMAP LINTERFACE LFUNC LCOMMA LCOMM LCHAN LBRACKET ]
## Transitions:
-- On LDOT shift to state 36
## Reductions:
-- On RBRACE LSTR LSEMICOLON
--   reduce production packname -> LNAME
-- On LSTRUCT LPAREN LNAME LMULT LMAP LINTERFACE LFUNC LCOMMA LCOMM LCHAN LBRACKET
--   reduce production sym -> LNAME

State 36:
## Known stack suffix:
## LNAME LDOT
## LR(1) items:
packname -> LNAME LDOT . sym [ RBRACE LSTR LSEMICOLON ]
## Transitions:
-- On LNAME shift to state 2
-- On sym shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## LNAME LDOT sym
## LR(1) items:
packname -> LNAME LDOT sym . [ RBRACE LSTR LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production packname -> LNAME LDOT sym

State 38:
## Known stack suffix:
## LMULT
## LR(1) items:
structdcl -> LMULT . packname option(LSTR) [ RBRACE LSEMICOLON ]
## Transitions:
-- On LNAME shift to state 39
-- On packname shift to state 40
## Reductions:

State 39:
## Known stack suffix:
## LNAME
## LR(1) items:
packname -> LNAME . [ RBRACE LSTR LSEMICOLON ]
packname -> LNAME . LDOT sym [ RBRACE LSTR LSEMICOLON ]
## Transitions:
-- On LDOT shift to state 36
## Reductions:
-- On RBRACE LSTR LSEMICOLON
--   reduce production packname -> LNAME

State 40:
## Known stack suffix:
## LMULT packname
## LR(1) items:
structdcl -> LMULT packname . option(LSTR) [ RBRACE LSEMICOLON ]
## Transitions:
-- On LSTR shift to state 41
-- On option(LSTR) shift to state 42
## Reductions:
-- On RBRACE LSEMICOLON
--   reduce production option(LSTR) ->

State 41:
## Known stack suffix:
## LSTR
## LR(1) items:
option(LSTR) -> LSTR . [ RBRACE LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(LSTR) -> LSTR

State 42:
## Known stack suffix:
## LMULT packname option(LSTR)
## LR(1) items:
structdcl -> LMULT packname option(LSTR) . [ RBRACE LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structdcl -> LMULT packname option(LSTR)

State 43:
## Known stack suffix:
## LDDD
## LR(1) items:
structdcl -> LDDD . [ RBRACE LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structdcl -> LDDD

State 44:
## Known stack suffix:
## sym
## LR(1) items:
list_sep(new_name,LCOMMA) -> sym . [ LSTRUCT LPAREN LNAME LMULT LMAP LINTERFACE LFUNC LCOMMA LCOMM LCHAN LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_sep(new_name,LCOMMA) -> sym

State 45:
## Known stack suffix:
## structdcl
## LR(1) items:
list_sep_term(structdcl,LSEMICOLON) -> structdcl . [ RBRACE ]
list_sep_term(structdcl,LSEMICOLON) -> structdcl . LSEMICOLON [ RBRACE ]
list_sep_term(structdcl,LSEMICOLON) -> structdcl . LSEMICOLON list_sep_term(structdcl,LSEMICOLON) [ RBRACE ]
## Transitions:
-- On LSEMICOLON shift to state 46
## Reductions:
-- On RBRACE
--   reduce production list_sep_term(structdcl,LSEMICOLON) -> structdcl

State 46:
## Known stack suffix:
## structdcl LSEMICOLON
## LR(1) items:
list_sep_term(structdcl,LSEMICOLON) -> structdcl LSEMICOLON . [ RBRACE ]
list_sep_term(structdcl,LSEMICOLON) -> structdcl LSEMICOLON . list_sep_term(structdcl,LSEMICOLON) [ RBRACE ]
## Transitions:
-- On LNAME shift to state 35
-- On LMULT shift to state 38
-- On LDDD shift to state 43
-- On sym shift to state 44
-- On structdcl shift to state 45
-- On packname shift to state 47
-- On listc(new_name) shift to state 49
-- On list_sep_term(structdcl,LSEMICOLON) shift to state 501
-- On list_sep(new_name,LCOMMA) shift to state 502
## Reductions:
-- On RBRACE
--   reduce production list_sep_term(structdcl,LSEMICOLON) -> structdcl LSEMICOLON

State 47:
## Known stack suffix:
## packname
## LR(1) items:
structdcl -> packname . option(LSTR) [ RBRACE LSEMICOLON ]
## Transitions:
-- On LSTR shift to state 41
-- On option(LSTR) shift to state 48
## Reductions:
-- On RBRACE LSEMICOLON
--   reduce production option(LSTR) ->

State 48:
## Known stack suffix:
## packname option(LSTR)
## LR(1) items:
structdcl -> packname option(LSTR) . [ RBRACE LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structdcl -> packname option(LSTR)

State 49:
## Known stack suffix:
## listc(new_name)
## LR(1) items:
structdcl -> listc(new_name) . ntype option(LSTR) [ RBRACE LSEMICOLON ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 499
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 50:
## Known stack suffix:
## LPAREN
## LR(1) items:
ntype -> LPAREN . ntype RPAREN [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 497
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 51:
## Known stack suffix:
## LMULT
## LR(1) items:
ptrtype -> LMULT . ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 496
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 52:
## Known stack suffix:
## LMAP
## LR(1) items:
othertype -> LMAP . LBRACKET ntype RBRACKET ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LBRACKET shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## LMAP LBRACKET
## LR(1) items:
othertype -> LMAP LBRACKET . ntype RBRACKET ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 493
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 54:
## Known stack suffix:
## LINTERFACE
## LR(1) items:
interfacetype -> LINTERFACE . lbrace listsc_t(interfacedcl) RBRACE [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
interfacetype -> LINTERFACE . lbrace RBRACE [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LBRACE shift to state 31
-- On LBODY shift to state 32
-- On lbrace shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## LINTERFACE lbrace
## LR(1) items:
interfacetype -> LINTERFACE lbrace . listsc_t(interfacedcl) RBRACE [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
interfacetype -> LINTERFACE lbrace . RBRACE [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On RBRACE shift to state 56
-- On LNAME shift to state 35
-- On LDDD shift to state 57
-- On sym shift to state 58
-- On packname shift to state 486
-- On listsc_t(interfacedcl) shift to state 487
-- On list_sep_term(interfacedcl,LSEMICOLON) shift to state 489
-- On interfacedcl shift to state 490
## Reductions:

State 56:
## Known stack suffix:
## LINTERFACE lbrace RBRACE
## LR(1) items:
interfacetype -> LINTERFACE lbrace RBRACE . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interfacetype -> LINTERFACE lbrace RBRACE

State 57:
## Known stack suffix:
## LDDD
## LR(1) items:
interfacedcl -> LDDD . [ RBRACE LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interfacedcl -> LDDD

State 58:
## Known stack suffix:
## sym
## LR(1) items:
interfacedcl -> sym . indcl [ RBRACE LSEMICOLON ]
## Transitions:
-- On LPAREN shift to state 59
-- On indcl shift to state 485
## Reductions:

State 59:
## Known stack suffix:
## LPAREN
## LR(1) items:
indcl -> LPAREN . oarg_type_list_ocomma RPAREN fnres [ RBRACE LSEMICOLON ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LDDD shift to state 62
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 458
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On oarg_type_list_ocomma shift to state 482
-- On ntype shift to state 460
-- On name_or_type shift to state 468
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
-- On dotdotdot shift to state 469
-- On arg_type_list shift to state 470
-- On arg_type shift to state 474
## Reductions:
-- On RPAREN
--   reduce production oarg_type_list_ocomma ->

State 60:
## Known stack suffix:
## LFUNC
## LR(1) items:
fntype -> LFUNC . LPAREN oarg_type_list_ocomma RPAREN fnres [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LPAREN shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## LFUNC LPAREN
## LR(1) items:
fntype -> LFUNC LPAREN . oarg_type_list_ocomma RPAREN fnres [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LDDD shift to state 62
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 458
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On oarg_type_list_ocomma shift to state 463
-- On ntype shift to state 460
-- On name_or_type shift to state 468
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
-- On dotdotdot shift to state 469
-- On arg_type_list shift to state 470
-- On arg_type shift to state 474
## Reductions:
-- On RPAREN
--   reduce production oarg_type_list_ocomma ->

State 62:
## Known stack suffix:
## LDDD
## LR(1) items:
arg_type -> LDDD . [ RPAREN LCOMMA ]
dotdotdot -> LDDD . ntype [ RPAREN LCOMMA ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 457
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:
-- On RPAREN LCOMMA
--   reduce production arg_type -> LDDD

State 63:
## Known stack suffix:
## LCOMM
## LR(1) items:
recvchantype -> LCOMM . LCHAN ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LCHAN shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## LCOMM LCHAN
## LR(1) items:
recvchantype -> LCOMM LCHAN . ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 112
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 65:
## Known stack suffix:
## LCHAN
## LR(1) items:
othertype -> LCHAN . non_recvchantype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
othertype -> LCHAN . LCOMM ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 66
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 452
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On ptrtype shift to state 453
-- On othertype shift to state 454
-- On non_recvchantype shift to state 113
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 455
-- On dotname shift to state 456
## Reductions:

State 66:
## Known stack suffix:
## LPAREN
## LR(1) items:
non_recvchantype -> LPAREN . ntype RPAREN [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 450
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 67:
## Known stack suffix:
## LBRACKET
## LR(1) items:
othertype -> LBRACKET . oexpr_no_dots RBRACKET ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
othertype -> LBRACKET . LDDD RBRACKET ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 401
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 404
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On oexpr_no_dots shift to state 405
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr_no_dots shift to state 408
-- On expr shift to state 409
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:
-- On RBRACKET
--   reduce production oexpr_no_dots ->

State 68:
## Known stack suffix:
## LSTR
## LR(1) items:
basic_literal -> LSTR . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_literal -> LSTR

State 69:
## Known stack suffix:
## LRUNE
## LR(1) items:
basic_literal -> LRUNE . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_literal -> LRUNE

State 70:
## Known stack suffix:
## LPLUS
## LR(1) items:
uexpr -> LPLUS . uexpr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 400
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 71:
## Known stack suffix:
## LPAREN
## LR(1) items:
pexpr -> LPAREN . expr_or_type RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> LPAREN . name LCOLON ntype RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 72
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 94
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 235
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 236
-- On non_expr_type shift to state 237
-- On name shift to state 394
-- On interfacetype shift to state 105
-- On fntype shift to state 248
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr_or_type shift to state 398
-- On expr shift to state 250
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 72:
## Known stack suffix:
## LMULT
## LR(1) items:
non_expr_type -> LMULT . non_expr_type [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
uexpr -> LMULT . uexpr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 72
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LCOMM shift to state 94
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 391
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 235
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 236
-- On non_expr_type shift to state 393
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 248
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 73:
## Known stack suffix:
## LMINUS
## LR(1) items:
uexpr -> LMINUS . uexpr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 392
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 74:
## Known stack suffix:
## LMULT
## LR(1) items:
uexpr -> LMULT . uexpr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 391
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 75:
## Known stack suffix:
## LINT
## LR(1) items:
basic_literal -> LINT . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_literal -> LINT

State 76:
## Known stack suffix:
## LIMAG
## LR(1) items:
basic_literal -> LIMAG . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_literal -> LIMAG

State 77:
## Known stack suffix:
## LHAT
## LR(1) items:
uexpr -> LHAT . uexpr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 390
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 78:
## Known stack suffix:
## LFLOAT
## LR(1) items:
basic_literal -> LFLOAT . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_literal -> LFLOAT

State 79:
## Known stack suffix:
## LCOMM
## LR(1) items:
uexpr -> LCOMM . uexpr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 116
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 80:
## Known stack suffix:
## LBANG
## LR(1) items:
uexpr -> LBANG . uexpr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 389
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 81:
## Known stack suffix:
## LAND
## LR(1) items:
uexpr -> LAND . uexpr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 82
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 82:
## Known stack suffix:
## LAND uexpr
## LR(1) items:
uexpr -> LAND uexpr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production uexpr -> LAND uexpr

State 83:
## Known stack suffix:
## sym
## LR(1) items:
name -> sym . [ RPAREN RDots RBRACKET RBRACE LSTR LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> sym

State 84:
## Known stack suffix:
## structtype
## LR(1) items:
othertype -> structtype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production othertype -> structtype

State 85:
## Known stack suffix:
## pseudocall
## LR(1) items:
pexpr_no_paren -> pseudocall . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr_no_paren -> pseudocall

State 86:
## Known stack suffix:
## pexpr_no_paren
## LR(1) items:
pexpr -> pexpr_no_paren . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> pexpr_no_paren . LBRACE braced_keyval_list RBRACE [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LBRACE shift to state 87
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBODY LASOP LANDNOT LANDAND LAND EOF
--   reduce production pexpr -> pexpr_no_paren

State 87:
## Known stack suffix:
## pexpr_no_paren LBRACE
## LR(1) items:
pexpr_no_paren -> pexpr_no_paren LBRACE . braced_keyval_list RBRACE [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 159
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On keyval_list shift to state 160
-- On keyval shift to state 202
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 163
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On complitexpr shift to state 199
-- On braced_keyval_list shift to state 387
-- On basic_literal shift to state 168
-- On bare_complitexpr shift to state 205
## Reductions:
-- On RBRACE
--   reduce production braced_keyval_list ->

State 88:
## Known stack suffix:
## LDots
## LR(1) items:
expr -> LDots . expr RDots [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 385
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 89:
## Known stack suffix:
## LDDD
## LR(1) items:
expr -> LDDD . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LDDD

State 90:
## Known stack suffix:
## uexpr
## LR(1) items:
expr -> uexpr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> uexpr

State 91:
## Known stack suffix:
## pexpr
## LR(1) items:
pexpr_no_paren -> pexpr . LDOT sym [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> pexpr . LDOT LPAREN expr_or_type RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> pexpr . LDOT LPAREN LTYPE RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> pexpr . LBRACKET expr RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> pexpr . LBRACKET option(expr) LCOLON option(expr) RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> pexpr . LBRACKET option(expr) LCOLON option(expr) LCOLON option(expr) RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pseudocall -> pexpr . LPAREN RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pseudocall -> pexpr . LPAREN arguments option(LCOMMA) RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pseudocall -> pexpr . LPAREN arguments LDDD option(LCOMMA) RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
uexpr -> pexpr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LPAREN shift to state 92
-- On LDOT shift to state 269
-- On LBRACKET shift to state 276
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF
--   reduce production uexpr -> pexpr

State 92:
## Known stack suffix:
## pexpr LPAREN
## LR(1) items:
pseudocall -> pexpr LPAREN . RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pseudocall -> pexpr LPAREN . arguments option(LCOMMA) RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pseudocall -> pexpr LPAREN . arguments LDDD option(LCOMMA) RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RPAREN shift to state 93
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 72
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 94
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 235
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 236
-- On non_expr_type shift to state 237
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 248
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr_or_type shift to state 375
-- On expr shift to state 250
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
-- On arguments shift to state 376
-- On argument shift to state 384
## Reductions:

State 93:
## Known stack suffix:
## pexpr LPAREN RPAREN
## LR(1) items:
pseudocall -> pexpr LPAREN RPAREN . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pseudocall -> pexpr LPAREN RPAREN

State 94:
## Known stack suffix:
## LCOMM
## LR(1) items:
recvchantype -> LCOMM . LCHAN ntype [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
uexpr -> LCOMM . uexpr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LCOMM shift to state 79
-- On LCHAN shift to state 95
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 116
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 95:
## Known stack suffix:
## LCOMM LCHAN
## LR(1) items:
othertype -> LCHAN . non_recvchantype [ LPAREN LBRACE LBODY ]
othertype -> LCHAN . LCOMM ntype [ LPAREN LBRACE LBODY ]
recvchantype -> LCOMM LCHAN . ntype [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 96
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 108
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 110
-- On othertype shift to state 111
-- On ntype shift to state 112
-- On non_recvchantype shift to state 113
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 114
-- On dotname shift to state 115
## Reductions:

State 96:
## Known stack suffix:
## LPAREN
## LR(1) items:
non_recvchantype -> LPAREN . ntype RPAREN [ LPAREN LBRACE LBODY ]
ntype -> LPAREN . ntype RPAREN [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 100
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 97:
## Known stack suffix:
## recvchantype
## LR(1) items:
ntype -> recvchantype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ntype -> recvchantype

State 98:
## Known stack suffix:
## ptrtype
## LR(1) items:
ntype -> ptrtype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ntype -> ptrtype

State 99:
## Known stack suffix:
## othertype
## LR(1) items:
ntype -> othertype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ntype -> othertype

State 100:
## Known stack suffix:
## LPAREN ntype
## LR(1) items:
non_recvchantype -> LPAREN ntype . RPAREN [ LPAREN LBRACE LBODY ]
ntype -> LPAREN ntype . RPAREN [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
-- On RPAREN shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## LPAREN ntype RPAREN
## LR(1) items:
non_recvchantype -> LPAREN ntype RPAREN . [ LPAREN LBRACE LBODY ]
ntype -> LPAREN ntype RPAREN . [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
## Reductions:
-- On LPAREN LBRACE LBODY
--   reduce production non_recvchantype -> LPAREN ntype RPAREN
-- On RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS
--   reduce production ntype -> LPAREN ntype RPAREN

State 102:
## Known stack suffix:
## name
## LR(1) items:
dotname -> name . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
dotname -> name . LDOT sym [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LDOT shift to state 103
## Reductions:
-- On RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF
--   reduce production dotname -> name

State 103:
## Known stack suffix:
## name LDOT
## LR(1) items:
dotname -> name LDOT . sym [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LNAME shift to state 2
-- On sym shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## name LDOT sym
## LR(1) items:
dotname -> name LDOT sym . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dotname -> name LDOT sym

State 105:
## Known stack suffix:
## interfacetype
## LR(1) items:
othertype -> interfacetype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production othertype -> interfacetype

State 106:
## Known stack suffix:
## fntype
## LR(1) items:
ntype -> fntype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ntype -> fntype

State 107:
## Known stack suffix:
## dotname
## LR(1) items:
ntype -> dotname . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ntype -> dotname

State 108:
## Known stack suffix:
## LCHAN LCOMM
## LR(1) items:
othertype -> LCHAN LCOMM . ntype [ LPAREN LBRACE LBODY ]
recvchantype -> LCOMM . LCHAN ntype [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 95
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 109
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 109:
## Known stack suffix:
## LCHAN LCOMM ntype
## LR(1) items:
othertype -> LCHAN LCOMM ntype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production othertype -> LCHAN LCOMM ntype

State 110:
## Known stack suffix:
## ptrtype
## LR(1) items:
non_recvchantype -> ptrtype . [ LPAREN LBRACE LBODY ]
ntype -> ptrtype . [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
## Reductions:
-- On LPAREN LBRACE LBODY
--   reduce production non_recvchantype -> ptrtype
-- On RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS
--   reduce production ntype -> ptrtype

State 111:
## Known stack suffix:
## othertype
## LR(1) items:
non_recvchantype -> othertype . [ LPAREN LBRACE LBODY ]
ntype -> othertype . [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
## Reductions:
-- On LPAREN LBRACE LBODY
--   reduce production non_recvchantype -> othertype
-- On RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS
--   reduce production ntype -> othertype

State 112:
## Known stack suffix:
## LCOMM LCHAN ntype
## LR(1) items:
recvchantype -> LCOMM LCHAN ntype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production recvchantype -> LCOMM LCHAN ntype

State 113:
## Known stack suffix:
## LCHAN non_recvchantype
## LR(1) items:
othertype -> LCHAN non_recvchantype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production othertype -> LCHAN non_recvchantype

State 114:
## Known stack suffix:
## fntype
## LR(1) items:
non_recvchantype -> fntype . [ LPAREN LBRACE LBODY ]
ntype -> fntype . [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
## Reductions:
-- On LPAREN LBRACE LBODY
--   reduce production non_recvchantype -> fntype
-- On RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS
--   reduce production ntype -> fntype

State 115:
## Known stack suffix:
## dotname
## LR(1) items:
non_recvchantype -> dotname . [ LPAREN LBRACE LBODY ]
ntype -> dotname . [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
## Reductions:
-- On LPAREN LBRACE LBODY
--   reduce production non_recvchantype -> dotname
-- On RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS
--   reduce production ntype -> dotname

State 116:
## Known stack suffix:
## LCOMM uexpr
## LR(1) items:
uexpr -> LCOMM uexpr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production uexpr -> LCOMM uexpr

State 117:
## Known stack suffix:
## othertype
## LR(1) items:
comptype -> othertype . [ LBRACE LBODY ]
convtype -> othertype . [ LPAREN ]
## Transitions:
## Reductions:
-- On LBRACE LBODY
--   reduce production comptype -> othertype
-- On LPAREN
--   reduce production convtype -> othertype

State 118:
## Known stack suffix:
## name
## LR(1) items:
pexpr_no_paren -> name . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr_no_paren -> name

State 119:
## Known stack suffix:
## fntype
## LR(1) items:
convtype -> fntype . [ LPAREN ]
fnlitdcl -> fntype . [ LBRACE LBODY ]
## Transitions:
## Reductions:
-- On LPAREN
--   reduce production convtype -> fntype
-- On LBRACE LBODY
--   reduce production fnlitdcl -> fntype

State 120:
## Known stack suffix:
## fnliteral
## LR(1) items:
pexpr_no_paren -> fnliteral . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr_no_paren -> fnliteral

State 121:
## Known stack suffix:
## fnlitdcl
## LR(1) items:
fnliteral -> fnlitdcl . lbrace listsc(stmt) RBRACE [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LBRACE shift to state 31
-- On LBODY shift to state 32
-- On lbrace shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## fnlitdcl lbrace
## LR(1) items:
fnliteral -> fnlitdcl lbrace . listsc(stmt) RBRACE [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LVAR shift to state 23
-- On LTYPE shift to state 123
-- On LSWITCH shift to state 137
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LSELECT shift to state 254
-- On LRUNE shift to state 69
-- On LRETURN shift to state 258
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LIF shift to state 261
-- On LHAT shift to state 77
-- On LGOTO shift to state 264
-- On LGO shift to state 266
-- On LFUNC shift to state 60
-- On LFOR shift to state 287
-- On LFLOAT shift to state 78
-- On LFALL shift to state 309
-- On LDots shift to state 88
-- On LDEFER shift to state 310
-- On LDDD shift to state 89
-- On LCONTINUE shift to state 312
-- On LCONST shift to state 315
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBREAK shift to state 341
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 343
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 344
-- On switch_stmt shift to state 346
-- On structtype shift to state 84
-- On stmt shift to state 355
-- On simple_stmt shift to state 348
-- On select_stmt shift to state 349
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On non_dcl_stmt shift to state 350
-- On name shift to state 118
-- On listsc(stmt) shift to state 373
-- On listc(expr) shift to state 142
-- On list_sep(stmt,LSEMICOLON) shift to state 358
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On if_stmt shift to state 351
-- On for_stmt shift to state 352
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On compound_stmt shift to state 353
-- On common_dcl shift to state 354
-- On basic_literal shift to state 168
## Reductions:
-- On RBRACE LSEMICOLON
--   reduce production stmt ->

State 123:
## Known stack suffix:
## LTYPE
## LR(1) items:
common_dcl -> LTYPE . typedcl [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
common_dcl -> LTYPE . LPAREN listsc_t(typedcl) RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
common_dcl -> LTYPE . LPAREN RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LPAREN shift to state 124
-- On LNAME shift to state 2
-- On typedcl shift to state 136
-- On sym shift to state 128
## Reductions:

State 124:
## Known stack suffix:
## LTYPE LPAREN
## LR(1) items:
common_dcl -> LTYPE LPAREN . listsc_t(typedcl) RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
common_dcl -> LTYPE LPAREN . RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On RPAREN shift to state 125
-- On LNAME shift to state 2
-- On typedcl shift to state 126
-- On sym shift to state 128
-- On listsc_t(typedcl) shift to state 133
-- On list_sep_term(typedcl,LSEMICOLON) shift to state 135
## Reductions:

State 125:
## Known stack suffix:
## LTYPE LPAREN RPAREN
## LR(1) items:
common_dcl -> LTYPE LPAREN RPAREN . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production common_dcl -> LTYPE LPAREN RPAREN

State 126:
## Known stack suffix:
## typedcl
## LR(1) items:
list_sep_term(typedcl,LSEMICOLON) -> typedcl . [ RPAREN ]
list_sep_term(typedcl,LSEMICOLON) -> typedcl . LSEMICOLON [ RPAREN ]
list_sep_term(typedcl,LSEMICOLON) -> typedcl . LSEMICOLON list_sep_term(typedcl,LSEMICOLON) [ RPAREN ]
## Transitions:
-- On LSEMICOLON shift to state 127
## Reductions:
-- On RPAREN
--   reduce production list_sep_term(typedcl,LSEMICOLON) -> typedcl

State 127:
## Known stack suffix:
## typedcl LSEMICOLON
## LR(1) items:
list_sep_term(typedcl,LSEMICOLON) -> typedcl LSEMICOLON . [ RPAREN ]
list_sep_term(typedcl,LSEMICOLON) -> typedcl LSEMICOLON . list_sep_term(typedcl,LSEMICOLON) [ RPAREN ]
## Transitions:
-- On LNAME shift to state 2
-- On typedcl shift to state 126
-- On sym shift to state 128
-- On list_sep_term(typedcl,LSEMICOLON) shift to state 132
## Reductions:
-- On RPAREN
--   reduce production list_sep_term(typedcl,LSEMICOLON) -> typedcl LSEMICOLON

State 128:
## Known stack suffix:
## sym
## LR(1) items:
typedcl -> sym . ntype [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
typedcl -> sym . LEQ ntype [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LEQ shift to state 129
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 131
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 129:
## Known stack suffix:
## sym LEQ
## LR(1) items:
typedcl -> sym LEQ . ntype [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 130
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 130:
## Known stack suffix:
## sym LEQ ntype
## LR(1) items:
typedcl -> sym LEQ ntype . [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedcl -> sym LEQ ntype

State 131:
## Known stack suffix:
## sym ntype
## LR(1) items:
typedcl -> sym ntype . [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedcl -> sym ntype

State 132:
## Known stack suffix:
## typedcl LSEMICOLON list_sep_term(typedcl,LSEMICOLON)
## LR(1) items:
list_sep_term(typedcl,LSEMICOLON) -> typedcl LSEMICOLON list_sep_term(typedcl,LSEMICOLON) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_sep_term(typedcl,LSEMICOLON) -> typedcl LSEMICOLON list_sep_term(typedcl,LSEMICOLON)

State 133:
## Known stack suffix:
## LTYPE LPAREN listsc_t(typedcl)
## LR(1) items:
common_dcl -> LTYPE LPAREN listsc_t(typedcl) . RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On RPAREN shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## LTYPE LPAREN listsc_t(typedcl) RPAREN
## LR(1) items:
common_dcl -> LTYPE LPAREN listsc_t(typedcl) RPAREN . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production common_dcl -> LTYPE LPAREN listsc_t(typedcl) RPAREN

State 135:
## Known stack suffix:
## list_sep_term(typedcl,LSEMICOLON)
## LR(1) items:
listsc_t(typedcl) -> list_sep_term(typedcl,LSEMICOLON) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listsc_t(typedcl) -> list_sep_term(typedcl,LSEMICOLON)

State 136:
## Known stack suffix:
## LTYPE typedcl
## LR(1) items:
common_dcl -> LTYPE typedcl . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production common_dcl -> LTYPE typedcl

State 137:
## Known stack suffix:
## LSWITCH
## LR(1) items:
switch_stmt -> LSWITCH . if_header LBODY caseblock_list RBRACE [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On simple_stmt shift to state 138
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On option(simple_stmt) shift to state 139
-- On name shift to state 118
-- On listc(expr) shift to state 142
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On if_header shift to state 225
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:
-- On LSEMICOLON LBODY
--   reduce production option(simple_stmt) ->

State 138:
## Known stack suffix:
## simple_stmt
## LR(1) items:
option(simple_stmt) -> simple_stmt . [ LSEMICOLON LBODY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(simple_stmt) -> simple_stmt

State 139:
## Known stack suffix:
## option(simple_stmt)
## LR(1) items:
if_header -> option(simple_stmt) . [ LBODY ]
if_header -> option(simple_stmt) . LSEMICOLON option(simple_stmt) [ LBODY ]
## Transitions:
-- On LSEMICOLON shift to state 140
## Reductions:
-- On LBODY
--   reduce production if_header -> option(simple_stmt)

State 140:
## Known stack suffix:
## option(simple_stmt) LSEMICOLON
## LR(1) items:
if_header -> option(simple_stmt) LSEMICOLON . option(simple_stmt) [ LBODY ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On simple_stmt shift to state 138
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On option(simple_stmt) shift to state 141
-- On name shift to state 118
-- On listc(expr) shift to state 142
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:
-- On LBODY
--   reduce production option(simple_stmt) ->

State 141:
## Known stack suffix:
## option(simple_stmt) LSEMICOLON option(simple_stmt)
## LR(1) items:
if_header -> option(simple_stmt) LSEMICOLON option(simple_stmt) . [ LBODY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_header -> option(simple_stmt) LSEMICOLON option(simple_stmt)

State 142:
## Known stack suffix:
## listc(expr)
## LR(1) items:
simple_stmt -> listc(expr) . LEQ listc(expr) [ RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF ]
simple_stmt -> listc(expr) . LCOLAS listc(expr) [ RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF ]
## Transitions:
-- On LEQ shift to state 143
-- On LCOLAS shift to state 218
## Reductions:

State 143:
## Known stack suffix:
## listc(expr) LEQ
## LR(1) items:
simple_stmt -> listc(expr) LEQ . listc(expr) [ RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On listc(expr) shift to state 144
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 217
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 144:
## Known stack suffix:
## listc(expr) LEQ listc(expr)
## LR(1) items:
simple_stmt -> listc(expr) LEQ listc(expr) . [ RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> listc(expr) LEQ listc(expr)

State 145:
## Known stack suffix:
## list_sep(expr,LCOMMA)
## LR(1) items:
list_sep(expr,LCOMMA) -> list_sep(expr,LCOMMA) . LCOMMA expr [ RPAREN RBRACE LSEMICOLON LEQ LDEFAULT LCOMMA LCOLAS LCASE LBODY EOF ]
listc(expr) -> list_sep(expr,LCOMMA) . [ RPAREN RBRACE LSEMICOLON LEQ LDEFAULT LCOLAS LCASE LBODY EOF ]
## Transitions:
-- On LCOMMA shift to state 146
## Reductions:
-- On RPAREN RBRACE LSEMICOLON LEQ LDEFAULT LCOLAS LCASE LBODY EOF
--   reduce production listc(expr) -> list_sep(expr,LCOMMA)

State 146:
## Known stack suffix:
## list_sep(expr,LCOMMA) LCOMMA
## LR(1) items:
list_sep(expr,LCOMMA) -> list_sep(expr,LCOMMA) LCOMMA . expr [ RPAREN RBRACE LSEMICOLON LEQ LDEFAULT LCOMMA LCOLAS LCASE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 147
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 147:
## Known stack suffix:
## list_sep(expr,LCOMMA) LCOMMA expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LCOMMA LCOMM LCOLAS LCASE LBODY LANDNOT LANDAND LAND EOF ]
list_sep(expr,LCOMMA) -> list_sep(expr,LCOMMA) LCOMMA expr . [ RPAREN RBRACE LSEMICOLON LEQ LDEFAULT LCOMMA LCOLAS LCASE LBODY EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMM shift to state 197
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RBRACE LSEMICOLON LEQ LDEFAULT LCOMMA LCOLAS LCASE LBODY EOF
--   reduce production list_sep(expr,LCOMMA) -> list_sep(expr,LCOMMA) LCOMMA expr

State 148:
## Known stack suffix:
## expr LRSH
## LR(1) items:
expr -> expr LRSH . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 149
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 149:
## Known stack suffix:
## expr LRSH expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LRSH expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LRSH expr

State 150:
## Known stack suffix:
## convtype
## LR(1) items:
pexpr_no_paren -> convtype . LPAREN expr option(LCOMMA) RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LPAREN shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## convtype LPAREN
## LR(1) items:
pexpr_no_paren -> convtype LPAREN . expr option(LCOMMA) RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 152
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 152:
## Known stack suffix:
## convtype LPAREN expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND ]
pexpr_no_paren -> convtype LPAREN expr . option(LCOMMA) RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMMA shift to state 214
-- On LCOMM shift to state 197
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
-- On option(LCOMMA) shift to state 215
## Reductions:
-- On RPAREN
--   reduce production option(LCOMMA) ->

State 153:
## Known stack suffix:
## expr LPLUS
## LR(1) items:
expr -> expr LPLUS . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 154
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 154:
## Known stack suffix:
## expr LPLUS expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LPLUS expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LLSH shift to state 169
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LPLUS LPIPE LOROR LNE LMINUS LLT LLE LINC LHAT LGT LGE LEQEQ LEQ LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDAND EOF
--   reduce production expr -> expr LPLUS expr

State 155:
## Known stack suffix:
## expr LPERCENT
## LR(1) items:
expr -> expr LPERCENT . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 156
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 156:
## Known stack suffix:
## expr LPERCENT expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LPERCENT expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LPERCENT expr

State 157:
## Known stack suffix:
## comptype
## LR(1) items:
pexpr_no_paren -> comptype . lbrace braced_keyval_list RBRACE [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LBRACE shift to state 31
-- On LBODY shift to state 32
-- On lbrace shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## comptype lbrace
## LR(1) items:
pexpr_no_paren -> comptype lbrace . braced_keyval_list RBRACE [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 159
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On keyval_list shift to state 160
-- On keyval shift to state 202
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 163
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On complitexpr shift to state 199
-- On braced_keyval_list shift to state 212
-- On basic_literal shift to state 168
-- On bare_complitexpr shift to state 205
## Reductions:
-- On RBRACE
--   reduce production braced_keyval_list ->

State 159:
## Known stack suffix:
## LBRACE
## LR(1) items:
bare_complitexpr -> LBRACE . braced_keyval_list RBRACE [ RBRACE LCOMMA ]
complitexpr -> LBRACE . braced_keyval_list RBRACE [ LCOLON ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 159
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On keyval_list shift to state 160
-- On keyval shift to state 202
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 163
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On complitexpr shift to state 199
-- On braced_keyval_list shift to state 210
-- On basic_literal shift to state 168
-- On bare_complitexpr shift to state 205
## Reductions:
-- On RBRACE
--   reduce production braced_keyval_list ->

State 160:
## Known stack suffix:
## keyval_list
## LR(1) items:
braced_keyval_list -> keyval_list . option(LCOMMA) [ RBRACE ]
keyval_list -> keyval_list . LCOMMA keyval [ RBRACE LCOMMA ]
keyval_list -> keyval_list . LCOMMA bare_complitexpr [ RBRACE LCOMMA ]
## Transitions:
-- On LCOMMA shift to state 161
-- On option(LCOMMA) shift to state 209
## Reductions:
-- On RBRACE
--   reduce production option(LCOMMA) ->

State 161:
## Known stack suffix:
## keyval_list LCOMMA
## LR(1) items:
keyval_list -> keyval_list LCOMMA . keyval [ RBRACE LCOMMA ]
keyval_list -> keyval_list LCOMMA . bare_complitexpr [ RBRACE LCOMMA ]
option(LCOMMA) -> LCOMMA . [ RBRACE ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 159
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On keyval shift to state 162
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 163
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On complitexpr shift to state 199
-- On basic_literal shift to state 168
-- On bare_complitexpr shift to state 208
## Reductions:
-- On RBRACE
--   reduce production option(LCOMMA) -> LCOMMA

State 162:
## Known stack suffix:
## keyval_list LCOMMA keyval
## LR(1) items:
keyval_list -> keyval_list LCOMMA keyval . [ RBRACE LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production keyval_list -> keyval_list LCOMMA keyval

State 163:
## Known stack suffix:
## expr
## LR(1) items:
bare_complitexpr -> expr . [ RBRACE LCOMMA ]
complitexpr -> expr . [ LCOLON ]
expr -> expr . LOROR expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACE LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LCOLON LANDNOT LANDAND LAND ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMM shift to state 197
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:
-- On RBRACE LCOMMA
--   reduce production bare_complitexpr -> expr
-- On LCOLON
--   reduce production complitexpr -> expr

State 164:
## Known stack suffix:
## expr LPIPE
## LR(1) items:
expr -> expr LPIPE . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 165
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 165:
## Known stack suffix:
## expr LPIPE expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LPIPE expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LLSH shift to state 169
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LPLUS LPIPE LOROR LNE LMINUS LLT LLE LINC LHAT LGT LGE LEQEQ LEQ LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDAND EOF
--   reduce production expr -> expr LPIPE expr

State 166:
## Known stack suffix:
## expr LMULT
## LR(1) items:
expr -> expr LMULT . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 167
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 167:
## Known stack suffix:
## expr LMULT expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LMULT expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LMULT expr

State 168:
## Known stack suffix:
## basic_literal
## LR(1) items:
pexpr_no_paren -> basic_literal . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr_no_paren -> basic_literal

State 169:
## Known stack suffix:
## expr LLSH
## LR(1) items:
expr -> expr LLSH . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 170
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 170:
## Known stack suffix:
## expr LLSH expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LLSH expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LLSH expr

State 171:
## Known stack suffix:
## expr LDIV
## LR(1) items:
expr -> expr LDIV . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 172
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 172:
## Known stack suffix:
## expr LDIV expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LDIV expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LDIV expr

State 173:
## Known stack suffix:
## expr LANDNOT
## LR(1) items:
expr -> expr LANDNOT . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 174
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 174:
## Known stack suffix:
## expr LANDNOT expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LANDNOT expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LANDNOT expr

State 175:
## Known stack suffix:
## expr LAND
## LR(1) items:
expr -> expr LAND . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 176
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 176:
## Known stack suffix:
## expr LAND expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LAND expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LAND expr

State 177:
## Known stack suffix:
## expr LOROR
## LR(1) items:
expr -> expr LOROR . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 178
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 178:
## Known stack suffix:
## expr LOROR expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LOROR expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LOROR LINC LEQ LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP EOF
--   reduce production expr -> expr LOROR expr

State 179:
## Known stack suffix:
## expr LNE
## LR(1) items:
expr -> expr LNE . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 180
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 180:
## Known stack suffix:
## expr LNE expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LNE expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLSH shift to state 169
-- On LHAT shift to state 183
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LOROR LNE LLT LLE LINC LGT LGE LEQEQ LEQ LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDAND EOF
--   reduce production expr -> expr LNE expr

State 181:
## Known stack suffix:
## expr LMINUS
## LR(1) items:
expr -> expr LMINUS . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 182
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 182:
## Known stack suffix:
## expr LMINUS expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LMINUS expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LLSH shift to state 169
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LPLUS LPIPE LOROR LNE LMINUS LLT LLE LINC LHAT LGT LGE LEQEQ LEQ LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDAND EOF
--   reduce production expr -> expr LMINUS expr

State 183:
## Known stack suffix:
## expr LHAT
## LR(1) items:
expr -> expr LHAT . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 184
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 184:
## Known stack suffix:
## expr LHAT expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LHAT expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LLSH shift to state 169
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LPLUS LPIPE LOROR LNE LMINUS LLT LLE LINC LHAT LGT LGE LEQEQ LEQ LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDAND EOF
--   reduce production expr -> expr LHAT expr

State 185:
## Known stack suffix:
## expr LLT
## LR(1) items:
expr -> expr LLT . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 186
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 186:
## Known stack suffix:
## expr LLT expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LLT expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLSH shift to state 169
-- On LHAT shift to state 183
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LOROR LNE LLT LLE LINC LGT LGE LEQEQ LEQ LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDAND EOF
--   reduce production expr -> expr LLT expr

State 187:
## Known stack suffix:
## expr LLE
## LR(1) items:
expr -> expr LLE . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 188
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 188:
## Known stack suffix:
## expr LLE expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LLE expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLSH shift to state 169
-- On LHAT shift to state 183
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LOROR LNE LLT LLE LINC LGT LGE LEQEQ LEQ LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDAND EOF
--   reduce production expr -> expr LLE expr

State 189:
## Known stack suffix:
## expr LGT
## LR(1) items:
expr -> expr LGT . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 190
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 190:
## Known stack suffix:
## expr LGT expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LGT expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLSH shift to state 169
-- On LHAT shift to state 183
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LOROR LNE LLT LLE LINC LGT LGE LEQEQ LEQ LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDAND EOF
--   reduce production expr -> expr LGT expr

State 191:
## Known stack suffix:
## expr LGE
## LR(1) items:
expr -> expr LGE . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 192
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 192:
## Known stack suffix:
## expr LGE expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LGE expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLSH shift to state 169
-- On LHAT shift to state 183
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LOROR LNE LLT LLE LINC LGT LGE LEQEQ LEQ LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDAND EOF
--   reduce production expr -> expr LGE expr

State 193:
## Known stack suffix:
## expr LEQEQ
## LR(1) items:
expr -> expr LEQEQ . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 194
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 194:
## Known stack suffix:
## expr LEQEQ expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LEQEQ expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLSH shift to state 169
-- On LHAT shift to state 183
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LOROR LNE LLT LLE LINC LGT LGE LEQEQ LEQ LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDAND EOF
--   reduce production expr -> expr LEQEQ expr

State 195:
## Known stack suffix:
## expr LANDAND
## LR(1) items:
expr -> expr LANDAND . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 196
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 196:
## Known stack suffix:
## expr LANDAND expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LANDAND expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LOROR LINC LEQ LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDAND EOF
--   reduce production expr -> expr LANDAND expr

State 197:
## Known stack suffix:
## expr LCOMM
## LR(1) items:
expr -> expr LCOMM . expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 198
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 198:
## Known stack suffix:
## expr LCOMM expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr LCOMM expr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RDots RBRACKET RBRACE LSEMICOLON LINC LEQ LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP EOF
--   reduce production expr -> expr LCOMM expr

State 199:
## Known stack suffix:
## complitexpr
## LR(1) items:
keyval -> complitexpr . LCOLON complitexpr [ RBRACE LCOMMA ]
## Transitions:
-- On LCOLON shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## complitexpr LCOLON
## LR(1) items:
keyval -> complitexpr LCOLON . complitexpr [ RBRACE LCOMMA ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 201
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 206
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On complitexpr shift to state 207
-- On basic_literal shift to state 168
## Reductions:

State 201:
## Known stack suffix:
## LBRACE
## LR(1) items:
complitexpr -> LBRACE . braced_keyval_list RBRACE [ RBRACE LSEMICOLON LCOMMA EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 159
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On keyval_list shift to state 160
-- On keyval shift to state 202
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 163
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On complitexpr shift to state 199
-- On braced_keyval_list shift to state 203
-- On basic_literal shift to state 168
-- On bare_complitexpr shift to state 205
## Reductions:
-- On RBRACE
--   reduce production braced_keyval_list ->

State 202:
## Known stack suffix:
## keyval
## LR(1) items:
keyval_list -> keyval . [ RBRACE LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production keyval_list -> keyval

State 203:
## Known stack suffix:
## LBRACE braced_keyval_list
## LR(1) items:
complitexpr -> LBRACE braced_keyval_list . RBRACE [ RBRACE LSEMICOLON LCOMMA EOF ]
## Transitions:
-- On RBRACE shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## LBRACE braced_keyval_list RBRACE
## LR(1) items:
complitexpr -> LBRACE braced_keyval_list RBRACE . [ RBRACE LSEMICOLON LCOMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production complitexpr -> LBRACE braced_keyval_list RBRACE

State 205:
## Known stack suffix:
## bare_complitexpr
## LR(1) items:
keyval_list -> bare_complitexpr . [ RBRACE LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production keyval_list -> bare_complitexpr

State 206:
## Known stack suffix:
## expr
## LR(1) items:
complitexpr -> expr . [ RBRACE LSEMICOLON LCOMMA EOF ]
expr -> expr . LOROR expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMMA LCOMM LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMM shift to state 197
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:
-- On RBRACE LSEMICOLON LCOMMA EOF
--   reduce production complitexpr -> expr

State 207:
## Known stack suffix:
## complitexpr LCOLON complitexpr
## LR(1) items:
keyval -> complitexpr LCOLON complitexpr . [ RBRACE LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production keyval -> complitexpr LCOLON complitexpr

State 208:
## Known stack suffix:
## keyval_list LCOMMA bare_complitexpr
## LR(1) items:
keyval_list -> keyval_list LCOMMA bare_complitexpr . [ RBRACE LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production keyval_list -> keyval_list LCOMMA bare_complitexpr

State 209:
## Known stack suffix:
## keyval_list option(LCOMMA)
## LR(1) items:
braced_keyval_list -> keyval_list option(LCOMMA) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production braced_keyval_list -> keyval_list option(LCOMMA)

State 210:
## Known stack suffix:
## LBRACE braced_keyval_list
## LR(1) items:
bare_complitexpr -> LBRACE braced_keyval_list . RBRACE [ RBRACE LCOMMA ]
complitexpr -> LBRACE braced_keyval_list . RBRACE [ LCOLON ]
## Transitions:
-- On RBRACE shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## LBRACE braced_keyval_list RBRACE
## LR(1) items:
bare_complitexpr -> LBRACE braced_keyval_list RBRACE . [ RBRACE LCOMMA ]
complitexpr -> LBRACE braced_keyval_list RBRACE . [ LCOLON ]
## Transitions:
## Reductions:
-- On RBRACE LCOMMA
--   reduce production bare_complitexpr -> LBRACE braced_keyval_list RBRACE
-- On LCOLON
--   reduce production complitexpr -> LBRACE braced_keyval_list RBRACE

State 212:
## Known stack suffix:
## comptype lbrace braced_keyval_list
## LR(1) items:
pexpr_no_paren -> comptype lbrace braced_keyval_list . RBRACE [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RBRACE shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## comptype lbrace braced_keyval_list RBRACE
## LR(1) items:
pexpr_no_paren -> comptype lbrace braced_keyval_list RBRACE . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr_no_paren -> comptype lbrace braced_keyval_list RBRACE

State 214:
## Known stack suffix:
## LCOMMA
## LR(1) items:
option(LCOMMA) -> LCOMMA . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(LCOMMA) -> LCOMMA

State 215:
## Known stack suffix:
## convtype LPAREN expr option(LCOMMA)
## LR(1) items:
pexpr_no_paren -> convtype LPAREN expr option(LCOMMA) . RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RPAREN shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## convtype LPAREN expr option(LCOMMA) RPAREN
## LR(1) items:
pexpr_no_paren -> convtype LPAREN expr option(LCOMMA) RPAREN . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr_no_paren -> convtype LPAREN expr option(LCOMMA) RPAREN

State 217:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RPAREN RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMMA LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
list_sep(expr,LCOMMA) -> expr . [ RPAREN RBRACE LSEMICOLON LDEFAULT LCOMMA LCASE LBODY EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMM shift to state 197
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:
-- On RPAREN RBRACE LSEMICOLON LDEFAULT LCOMMA LCASE LBODY EOF
--   reduce production list_sep(expr,LCOMMA) -> expr

State 218:
## Known stack suffix:
## listc(expr) LCOLAS
## LR(1) items:
simple_stmt -> listc(expr) LCOLAS . listc(expr) [ RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On listc(expr) shift to state 219
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 217
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 219:
## Known stack suffix:
## listc(expr) LCOLAS listc(expr)
## LR(1) items:
simple_stmt -> listc(expr) LCOLAS listc(expr) . [ RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> listc(expr) LCOLAS listc(expr)

State 220:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
list_sep(expr,LCOMMA) -> expr . [ LEQ LCOMMA LCOLAS ]
simple_stmt -> expr . [ RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF ]
simple_stmt -> expr . LASOP expr [ RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF ]
simple_stmt -> expr . LINC [ RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF ]
simple_stmt -> expr . LDEC [ RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LINC shift to state 221
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LDEC shift to state 222
-- On LCOMM shift to state 197
-- On LASOP shift to state 223
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:
-- On LEQ LCOMMA LCOLAS
--   reduce production list_sep(expr,LCOMMA) -> expr
-- On RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF
--   reduce production simple_stmt -> expr

State 221:
## Known stack suffix:
## expr LINC
## LR(1) items:
simple_stmt -> expr LINC . [ RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> expr LINC

State 222:
## Known stack suffix:
## expr LDEC
## LR(1) items:
simple_stmt -> expr LDEC . [ RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> expr LDEC

State 223:
## Known stack suffix:
## expr LASOP
## LR(1) items:
simple_stmt -> expr LASOP . expr [ RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 224
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 224:
## Known stack suffix:
## expr LASOP expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDAND expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LEQEQ expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LNE expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LLT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LLE expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LGE expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LGT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LPLUS expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LMINUS expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LPIPE expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LHAT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LMULT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LDIV expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LPERCENT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LAND expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LANDNOT expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LLSH expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LRSH expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
expr -> expr . LCOMM expr [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LDEFAULT LCOMM LCASE LBODY LANDNOT LANDAND LAND EOF ]
simple_stmt -> expr LASOP expr . [ RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMM shift to state 197
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:
-- On RBRACE LSEMICOLON LDEFAULT LCASE LBODY EOF
--   reduce production simple_stmt -> expr LASOP expr

State 225:
## Known stack suffix:
## LSWITCH if_header
## LR(1) items:
switch_stmt -> LSWITCH if_header . LBODY caseblock_list RBRACE [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LBODY shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## LSWITCH if_header LBODY
## LR(1) items:
switch_stmt -> LSWITCH if_header LBODY . caseblock_list RBRACE [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On caseblock_list shift to state 227
## Default reduction:
-- After reading the next token, reduce production caseblock_list ->

State 227:
## Known stack suffix:
## LSWITCH if_header LBODY caseblock_list
## LR(1) items:
caseblock_list -> caseblock_list . caseblock [ RBRACE LDEFAULT LCASE ]
switch_stmt -> LSWITCH if_header LBODY caseblock_list . RBRACE [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On RBRACE shift to state 228
-- On LDEFAULT shift to state 229
-- On LCASE shift to state 231
-- On caseblock shift to state 252
-- On case shift to state 253
## Reductions:

State 228:
## Known stack suffix:
## LSWITCH if_header LBODY caseblock_list RBRACE
## LR(1) items:
switch_stmt -> LSWITCH if_header LBODY caseblock_list RBRACE . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_stmt -> LSWITCH if_header LBODY caseblock_list RBRACE

State 229:
## Known stack suffix:
## LDEFAULT
## LR(1) items:
case -> LDEFAULT . LCOLON [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
## Transitions:
-- On LCOLON shift to state 230
## Reductions:

State 230:
## Known stack suffix:
## LDEFAULT LCOLON
## LR(1) items:
case -> LDEFAULT LCOLON . [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case -> LDEFAULT LCOLON

State 231:
## Known stack suffix:
## LCASE
## LR(1) items:
case -> LCASE . listc(expr_or_type) LCOLON [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
case -> LCASE . listc(expr_or_type) LEQ expr LCOLON [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
case -> LCASE . listc(expr_or_type) LCOLAS expr LCOLON [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
caseblock -> LCASE . LDDD option(LSEMICOLON) [ RBRACE LDEFAULT LCASE ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 72
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 232
-- On LCOMM shift to state 94
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 235
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 236
-- On non_expr_type shift to state 237
-- On name shift to state 118
-- On listc(expr_or_type) shift to state 238
-- On list_sep(expr_or_type,LCOMMA) shift to state 246
-- On interfacetype shift to state 105
-- On fntype shift to state 248
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr_or_type shift to state 251
-- On expr shift to state 250
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 232:
## Known stack suffix:
## LCASE LDDD
## LR(1) items:
caseblock -> LCASE LDDD . option(LSEMICOLON) [ RBRACE LDEFAULT LCASE ]
expr -> LDDD . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
## Transitions:
-- On LSEMICOLON shift to state 233
-- On option(LSEMICOLON) shift to state 234
## Reductions:
-- On LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND
--   reduce production expr -> LDDD
-- On RBRACE LDEFAULT LCASE
--   reduce production option(LSEMICOLON) ->

State 233:
## Known stack suffix:
## LSEMICOLON
## LR(1) items:
option(LSEMICOLON) -> LSEMICOLON . [ RBRACE LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(LSEMICOLON) -> LSEMICOLON

State 234:
## Known stack suffix:
## LCASE LDDD option(LSEMICOLON)
## LR(1) items:
caseblock -> LCASE LDDD option(LSEMICOLON) . [ RBRACE LDEFAULT LCASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production caseblock -> LCASE LDDD option(LSEMICOLON)

State 235:
## Known stack suffix:
## recvchantype
## LR(1) items:
non_expr_type -> recvchantype . [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_expr_type -> recvchantype

State 236:
## Known stack suffix:
## othertype
## LR(1) items:
comptype -> othertype . [ LBRACE LBODY ]
convtype -> othertype . [ LPAREN ]
non_expr_type -> othertype . [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
## Reductions:
-- On LBRACE LBODY
--   reduce production comptype -> othertype
-- On LPAREN
--   reduce production convtype -> othertype
-- On RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS
--   reduce production non_expr_type -> othertype

State 237:
## Known stack suffix:
## non_expr_type
## LR(1) items:
expr_or_type -> non_expr_type . [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_or_type -> non_expr_type

State 238:
## Known stack suffix:
## LCASE listc(expr_or_type)
## LR(1) items:
case -> LCASE listc(expr_or_type) . LCOLON [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
case -> LCASE listc(expr_or_type) . LEQ expr LCOLON [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
case -> LCASE listc(expr_or_type) . LCOLAS expr LCOLON [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
## Transitions:
-- On LEQ shift to state 239
-- On LCOLON shift to state 242
-- On LCOLAS shift to state 243
## Reductions:

State 239:
## Known stack suffix:
## LCASE listc(expr_or_type) LEQ
## LR(1) items:
case -> LCASE listc(expr_or_type) LEQ . expr LCOLON [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 240
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 240:
## Known stack suffix:
## LCASE listc(expr_or_type) LEQ expr
## LR(1) items:
case -> LCASE listc(expr_or_type) LEQ expr . LCOLON [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
expr -> expr . LOROR expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMM shift to state 197
-- On LCOLON shift to state 241
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:

State 241:
## Known stack suffix:
## LCASE listc(expr_or_type) LEQ expr LCOLON
## LR(1) items:
case -> LCASE listc(expr_or_type) LEQ expr LCOLON . [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case -> LCASE listc(expr_or_type) LEQ expr LCOLON

State 242:
## Known stack suffix:
## LCASE listc(expr_or_type) LCOLON
## LR(1) items:
case -> LCASE listc(expr_or_type) LCOLON . [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case -> LCASE listc(expr_or_type) LCOLON

State 243:
## Known stack suffix:
## LCASE listc(expr_or_type) LCOLAS
## LR(1) items:
case -> LCASE listc(expr_or_type) LCOLAS . expr LCOLON [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 244
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 244:
## Known stack suffix:
## LCASE listc(expr_or_type) LCOLAS expr
## LR(1) items:
case -> LCASE listc(expr_or_type) LCOLAS expr . LCOLON [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
expr -> expr . LOROR expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMM shift to state 197
-- On LCOLON shift to state 245
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:

State 245:
## Known stack suffix:
## LCASE listc(expr_or_type) LCOLAS expr LCOLON
## LR(1) items:
case -> LCASE listc(expr_or_type) LCOLAS expr LCOLON . [ RBRACE LVAR LTYPE LSWITCH LSTRUCT LSTR LSEMICOLON LSELECT LRUNE LRETURN LPLUS LPAREN LNAME LMULT LMINUS LMAP LINTERFACE LINT LIMAG LIF LHAT LGOTO LGO LFUNC LFOR LFLOAT LFALL LDots LDEFER LDEFAULT LDDD LCONTINUE LCONST LCOMM LCHAN LCASE LBREAK LBRACKET LBRACE LBANG LAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case -> LCASE listc(expr_or_type) LCOLAS expr LCOLON

State 246:
## Known stack suffix:
## list_sep(expr_or_type,LCOMMA)
## LR(1) items:
list_sep(expr_or_type,LCOMMA) -> list_sep(expr_or_type,LCOMMA) . LCOMMA expr_or_type [ LEQ LCOMMA LCOLON LCOLAS ]
listc(expr_or_type) -> list_sep(expr_or_type,LCOMMA) . [ LEQ LCOLON LCOLAS ]
## Transitions:
-- On LCOMMA shift to state 247
## Reductions:
-- On LEQ LCOLON LCOLAS
--   reduce production listc(expr_or_type) -> list_sep(expr_or_type,LCOMMA)

State 247:
## Known stack suffix:
## list_sep(expr_or_type,LCOMMA) LCOMMA
## LR(1) items:
list_sep(expr_or_type,LCOMMA) -> list_sep(expr_or_type,LCOMMA) LCOMMA . expr_or_type [ LEQ LCOMMA LCOLON LCOLAS ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 72
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 94
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 235
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 236
-- On non_expr_type shift to state 237
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 248
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr_or_type shift to state 249
-- On expr shift to state 250
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 248:
## Known stack suffix:
## fntype
## LR(1) items:
convtype -> fntype . [ LPAREN ]
fnlitdcl -> fntype . [ LBRACE LBODY ]
non_expr_type -> fntype . [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
## Reductions:
-- On LPAREN
--   reduce production convtype -> fntype
-- On LBRACE LBODY
--   reduce production fnlitdcl -> fntype
-- On RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS
--   reduce production non_expr_type -> fntype

State 249:
## Known stack suffix:
## list_sep(expr_or_type,LCOMMA) LCOMMA expr_or_type
## LR(1) items:
list_sep(expr_or_type,LCOMMA) -> list_sep(expr_or_type,LCOMMA) LCOMMA expr_or_type . [ LEQ LCOMMA LCOLON LCOLAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_sep(expr_or_type,LCOMMA) -> list_sep(expr_or_type,LCOMMA) LCOMMA expr_or_type

State 250:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . LOROR expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RPAREN LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LEQ LDIV LDDD LCOMMA LCOMM LCOLON LCOLAS LANDNOT LANDAND LAND ]
expr_or_type -> expr . [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMM shift to state 197
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:
-- On RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS
--   reduce production expr_or_type -> expr

State 251:
## Known stack suffix:
## expr_or_type
## LR(1) items:
list_sep(expr_or_type,LCOMMA) -> expr_or_type . [ LEQ LCOMMA LCOLON LCOLAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_sep(expr_or_type,LCOMMA) -> expr_or_type

State 252:
## Known stack suffix:
## caseblock_list caseblock
## LR(1) items:
caseblock_list -> caseblock_list caseblock . [ RBRACE LDEFAULT LCASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production caseblock_list -> caseblock_list caseblock

State 253:
## Known stack suffix:
## case
## LR(1) items:
caseblock -> case . listsc(stmt) [ RBRACE LDEFAULT LCASE ]
## Transitions:
-- On LVAR shift to state 23
-- On LTYPE shift to state 123
-- On LSWITCH shift to state 137
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LSELECT shift to state 254
-- On LRUNE shift to state 69
-- On LRETURN shift to state 258
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LIF shift to state 261
-- On LHAT shift to state 77
-- On LGOTO shift to state 264
-- On LGO shift to state 266
-- On LFUNC shift to state 60
-- On LFOR shift to state 287
-- On LFLOAT shift to state 78
-- On LFALL shift to state 309
-- On LDots shift to state 88
-- On LDEFER shift to state 310
-- On LDDD shift to state 89
-- On LCONTINUE shift to state 312
-- On LCONST shift to state 315
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBREAK shift to state 341
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 343
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 344
-- On switch_stmt shift to state 346
-- On structtype shift to state 84
-- On stmt shift to state 355
-- On simple_stmt shift to state 348
-- On select_stmt shift to state 349
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On non_dcl_stmt shift to state 350
-- On name shift to state 118
-- On listsc(stmt) shift to state 372
-- On listc(expr) shift to state 142
-- On list_sep(stmt,LSEMICOLON) shift to state 358
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On if_stmt shift to state 351
-- On for_stmt shift to state 352
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On compound_stmt shift to state 353
-- On common_dcl shift to state 354
-- On basic_literal shift to state 168
## Reductions:
-- On RBRACE LSEMICOLON LDEFAULT LCASE
--   reduce production stmt ->

State 254:
## Known stack suffix:
## LSELECT
## LR(1) items:
select_stmt -> LSELECT . LBODY caseblock_list RBRACE [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LBODY shift to state 255
## Reductions:

State 255:
## Known stack suffix:
## LSELECT LBODY
## LR(1) items:
select_stmt -> LSELECT LBODY . caseblock_list RBRACE [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On caseblock_list shift to state 256
## Default reduction:
-- After reading the next token, reduce production caseblock_list ->

State 256:
## Known stack suffix:
## LSELECT LBODY caseblock_list
## LR(1) items:
caseblock_list -> caseblock_list . caseblock [ RBRACE LDEFAULT LCASE ]
select_stmt -> LSELECT LBODY caseblock_list . RBRACE [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On RBRACE shift to state 257
-- On LDEFAULT shift to state 229
-- On LCASE shift to state 231
-- On caseblock shift to state 252
-- On case shift to state 253
## Reductions:

State 257:
## Known stack suffix:
## LSELECT LBODY caseblock_list RBRACE
## LR(1) items:
select_stmt -> LSELECT LBODY caseblock_list RBRACE . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production select_stmt -> LSELECT LBODY caseblock_list RBRACE

State 258:
## Known stack suffix:
## LRETURN
## LR(1) items:
non_dcl_stmt -> LRETURN . oexpr_list [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On oexpr_list shift to state 259
-- On name shift to state 118
-- On listc(expr) shift to state 260
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 217
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:
-- On RBRACE LSEMICOLON LDEFAULT LCASE EOF
--   reduce production oexpr_list ->

State 259:
## Known stack suffix:
## LRETURN oexpr_list
## LR(1) items:
non_dcl_stmt -> LRETURN oexpr_list . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_dcl_stmt -> LRETURN oexpr_list

State 260:
## Known stack suffix:
## listc(expr)
## LR(1) items:
oexpr_list -> listc(expr) . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production oexpr_list -> listc(expr)

State 261:
## Known stack suffix:
## LIF
## LR(1) items:
if_stmt -> LIF . if_header loop_body elseif_list else_ [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On simple_stmt shift to state 138
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On option(simple_stmt) shift to state 139
-- On name shift to state 118
-- On listc(expr) shift to state 142
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On if_header shift to state 262
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:
-- On LSEMICOLON LBODY
--   reduce production option(simple_stmt) ->

State 262:
## Known stack suffix:
## LIF if_header
## LR(1) items:
if_stmt -> LIF if_header . loop_body elseif_list else_ [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LBODY shift to state 263
-- On loop_body shift to state 363
## Reductions:

State 263:
## Known stack suffix:
## LBODY
## LR(1) items:
loop_body -> LBODY . listsc(stmt) RBRACE [ RBRACE LSEMICOLON LELSE LDEFAULT LCASE EOF ]
## Transitions:
-- On LVAR shift to state 23
-- On LTYPE shift to state 123
-- On LSWITCH shift to state 137
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LSELECT shift to state 254
-- On LRUNE shift to state 69
-- On LRETURN shift to state 258
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LIF shift to state 261
-- On LHAT shift to state 77
-- On LGOTO shift to state 264
-- On LGO shift to state 266
-- On LFUNC shift to state 60
-- On LFOR shift to state 287
-- On LFLOAT shift to state 78
-- On LFALL shift to state 309
-- On LDots shift to state 88
-- On LDEFER shift to state 310
-- On LDDD shift to state 89
-- On LCONTINUE shift to state 312
-- On LCONST shift to state 315
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBREAK shift to state 341
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 343
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 344
-- On switch_stmt shift to state 346
-- On structtype shift to state 84
-- On stmt shift to state 355
-- On simple_stmt shift to state 348
-- On select_stmt shift to state 349
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On non_dcl_stmt shift to state 350
-- On name shift to state 118
-- On listsc(stmt) shift to state 361
-- On listc(expr) shift to state 142
-- On list_sep(stmt,LSEMICOLON) shift to state 358
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On if_stmt shift to state 351
-- On for_stmt shift to state 352
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On compound_stmt shift to state 353
-- On common_dcl shift to state 354
-- On basic_literal shift to state 168
## Reductions:
-- On RBRACE LSEMICOLON
--   reduce production stmt ->

State 264:
## Known stack suffix:
## LGOTO
## LR(1) items:
non_dcl_stmt -> LGOTO . sym [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LNAME shift to state 2
-- On sym shift to state 265
## Reductions:

State 265:
## Known stack suffix:
## LGOTO sym
## LR(1) items:
non_dcl_stmt -> LGOTO sym . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_dcl_stmt -> LGOTO sym

State 266:
## Known stack suffix:
## LGO
## LR(1) items:
non_dcl_stmt -> LGO . pseudocall [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 267
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 268
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 267:
## Known stack suffix:
## LGO pseudocall
## LR(1) items:
non_dcl_stmt -> LGO pseudocall . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
pexpr_no_paren -> pseudocall . [ LPAREN LDOT LBRACKET LBRACE ]
## Transitions:
## Reductions:
-- On RBRACE LSEMICOLON LDEFAULT LCASE EOF
--   reduce production non_dcl_stmt -> LGO pseudocall
-- On LPAREN LDOT LBRACKET LBRACE
--   reduce production pexpr_no_paren -> pseudocall

State 268:
## Known stack suffix:
## pexpr
## LR(1) items:
pexpr_no_paren -> pexpr . LDOT sym [ LPAREN LDOT LBRACKET LBRACE ]
pexpr_no_paren -> pexpr . LDOT LPAREN expr_or_type RPAREN [ LPAREN LDOT LBRACKET LBRACE ]
pexpr_no_paren -> pexpr . LDOT LPAREN LTYPE RPAREN [ LPAREN LDOT LBRACKET LBRACE ]
pexpr_no_paren -> pexpr . LBRACKET expr RBRACKET [ LPAREN LDOT LBRACKET LBRACE ]
pexpr_no_paren -> pexpr . LBRACKET option(expr) LCOLON option(expr) RBRACKET [ LPAREN LDOT LBRACKET LBRACE ]
pexpr_no_paren -> pexpr . LBRACKET option(expr) LCOLON option(expr) LCOLON option(expr) RBRACKET [ LPAREN LDOT LBRACKET LBRACE ]
pseudocall -> pexpr . LPAREN RPAREN [ RBRACE LSEMICOLON LPAREN LDOT LDEFAULT LCASE LBRACKET LBRACE EOF ]
pseudocall -> pexpr . LPAREN arguments option(LCOMMA) RPAREN [ RBRACE LSEMICOLON LPAREN LDOT LDEFAULT LCASE LBRACKET LBRACE EOF ]
pseudocall -> pexpr . LPAREN arguments LDDD option(LCOMMA) RPAREN [ RBRACE LSEMICOLON LPAREN LDOT LDEFAULT LCASE LBRACKET LBRACE EOF ]
## Transitions:
-- On LPAREN shift to state 92
-- On LDOT shift to state 269
-- On LBRACKET shift to state 276
## Reductions:

State 269:
## Known stack suffix:
## pexpr LDOT
## LR(1) items:
pexpr_no_paren -> pexpr LDOT . sym [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> pexpr LDOT . LPAREN expr_or_type RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> pexpr LDOT . LPAREN LTYPE RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LPAREN shift to state 270
-- On LNAME shift to state 2
-- On sym shift to state 275
## Reductions:

State 270:
## Known stack suffix:
## pexpr LDOT LPAREN
## LR(1) items:
pexpr_no_paren -> pexpr LDOT LPAREN . expr_or_type RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> pexpr LDOT LPAREN . LTYPE RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LTYPE shift to state 271
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 72
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 94
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 235
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 236
-- On non_expr_type shift to state 237
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 248
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr_or_type shift to state 273
-- On expr shift to state 250
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 271:
## Known stack suffix:
## pexpr LDOT LPAREN LTYPE
## LR(1) items:
pexpr_no_paren -> pexpr LDOT LPAREN LTYPE . RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RPAREN shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## pexpr LDOT LPAREN LTYPE RPAREN
## LR(1) items:
pexpr_no_paren -> pexpr LDOT LPAREN LTYPE RPAREN . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr_no_paren -> pexpr LDOT LPAREN LTYPE RPAREN

State 273:
## Known stack suffix:
## pexpr LDOT LPAREN expr_or_type
## LR(1) items:
pexpr_no_paren -> pexpr LDOT LPAREN expr_or_type . RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RPAREN shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## pexpr LDOT LPAREN expr_or_type RPAREN
## LR(1) items:
pexpr_no_paren -> pexpr LDOT LPAREN expr_or_type RPAREN . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr_no_paren -> pexpr LDOT LPAREN expr_or_type RPAREN

State 275:
## Known stack suffix:
## pexpr LDOT sym
## LR(1) items:
pexpr_no_paren -> pexpr LDOT sym . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr_no_paren -> pexpr LDOT sym

State 276:
## Known stack suffix:
## pexpr LBRACKET
## LR(1) items:
pexpr_no_paren -> pexpr LBRACKET . expr RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> pexpr LBRACKET . option(expr) LCOLON option(expr) RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> pexpr LBRACKET . option(expr) LCOLON option(expr) LCOLON option(expr) RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On option(expr) shift to state 277
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 285
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:
-- On LCOLON
--   reduce production option(expr) ->

State 277:
## Known stack suffix:
## pexpr LBRACKET option(expr)
## LR(1) items:
pexpr_no_paren -> pexpr LBRACKET option(expr) . LCOLON option(expr) RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> pexpr LBRACKET option(expr) . LCOLON option(expr) LCOLON option(expr) RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LCOLON shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## pexpr LBRACKET option(expr) LCOLON
## LR(1) items:
pexpr_no_paren -> pexpr LBRACKET option(expr) LCOLON . option(expr) RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> pexpr LBRACKET option(expr) LCOLON . option(expr) LCOLON option(expr) RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On option(expr) shift to state 279
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 284
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:
-- On RBRACKET LCOLON
--   reduce production option(expr) ->

State 279:
## Known stack suffix:
## pexpr LBRACKET option(expr) LCOLON option(expr)
## LR(1) items:
pexpr_no_paren -> pexpr LBRACKET option(expr) LCOLON option(expr) . RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pexpr_no_paren -> pexpr LBRACKET option(expr) LCOLON option(expr) . LCOLON option(expr) RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RBRACKET shift to state 280
-- On LCOLON shift to state 281
## Reductions:

State 280:
## Known stack suffix:
## pexpr LBRACKET option(expr) LCOLON option(expr) RBRACKET
## LR(1) items:
pexpr_no_paren -> pexpr LBRACKET option(expr) LCOLON option(expr) RBRACKET . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr_no_paren -> pexpr LBRACKET option(expr) LCOLON option(expr) RBRACKET

State 281:
## Known stack suffix:
## pexpr LBRACKET option(expr) LCOLON option(expr) LCOLON
## LR(1) items:
pexpr_no_paren -> pexpr LBRACKET option(expr) LCOLON option(expr) LCOLON . option(expr) RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On option(expr) shift to state 282
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 284
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:
-- On RBRACKET
--   reduce production option(expr) ->

State 282:
## Known stack suffix:
## pexpr LBRACKET option(expr) LCOLON option(expr) LCOLON option(expr)
## LR(1) items:
pexpr_no_paren -> pexpr LBRACKET option(expr) LCOLON option(expr) LCOLON option(expr) . RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RBRACKET shift to state 283
## Reductions:

State 283:
## Known stack suffix:
## pexpr LBRACKET option(expr) LCOLON option(expr) LCOLON option(expr) RBRACKET
## LR(1) items:
pexpr_no_paren -> pexpr LBRACKET option(expr) LCOLON option(expr) LCOLON option(expr) RBRACKET . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr_no_paren -> pexpr LBRACKET option(expr) LCOLON option(expr) LCOLON option(expr) RBRACKET

State 284:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
option(expr) -> expr . [ RBRACKET LCOLON ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMM shift to state 197
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:
-- On RBRACKET LCOLON
--   reduce production option(expr) -> expr

State 285:
## Known stack suffix:
## pexpr LBRACKET expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LCOLON LANDNOT LANDAND LAND ]
option(expr) -> expr . [ LCOLON ]
pexpr_no_paren -> pexpr LBRACKET expr . RBRACKET [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RBRACKET shift to state 286
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMM shift to state 197
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:
-- On LCOLON
--   reduce production option(expr) -> expr

State 286:
## Known stack suffix:
## pexpr LBRACKET expr RBRACKET
## LR(1) items:
pexpr_no_paren -> pexpr LBRACKET expr RBRACKET . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr_no_paren -> pexpr LBRACKET expr RBRACKET

State 287:
## Known stack suffix:
## LFOR
## LR(1) items:
for_stmt -> LFOR . option(simple_stmt) LSEMICOLON option(simple_stmt) LSEMICOLON option(simple_stmt) loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
for_stmt -> LFOR . simple_stmt loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
for_stmt -> LFOR . loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
for_stmt -> LFOR . listc(expr) LEQ LRANGE expr loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
for_stmt -> LFOR . listc(expr) LCOLAS LRANGE expr loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
for_stmt -> LFOR . LRANGE expr loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LRANGE shift to state 288
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBODY shift to state 263
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On simple_stmt shift to state 291
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On option(simple_stmt) shift to state 293
-- On name shift to state 118
-- On loop_body shift to state 299
-- On listc(expr) shift to state 300
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:
-- On LSEMICOLON
--   reduce production option(simple_stmt) ->

State 288:
## Known stack suffix:
## LFOR LRANGE
## LR(1) items:
for_stmt -> LFOR LRANGE . expr loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 289
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 289:
## Known stack suffix:
## LFOR LRANGE expr
## LR(1) items:
expr -> expr . LOROR expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
for_stmt -> LFOR LRANGE expr . loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMM shift to state 197
-- On LBODY shift to state 263
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
-- On loop_body shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## LFOR LRANGE expr loop_body
## LR(1) items:
for_stmt -> LFOR LRANGE expr loop_body . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_stmt -> LFOR LRANGE expr loop_body

State 291:
## Known stack suffix:
## LFOR simple_stmt
## LR(1) items:
for_stmt -> LFOR simple_stmt . loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
option(simple_stmt) -> simple_stmt . [ LSEMICOLON ]
## Transitions:
-- On LBODY shift to state 263
-- On loop_body shift to state 292
## Reductions:
-- On LSEMICOLON
--   reduce production option(simple_stmt) -> simple_stmt

State 292:
## Known stack suffix:
## LFOR simple_stmt loop_body
## LR(1) items:
for_stmt -> LFOR simple_stmt loop_body . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_stmt -> LFOR simple_stmt loop_body

State 293:
## Known stack suffix:
## LFOR option(simple_stmt)
## LR(1) items:
for_stmt -> LFOR option(simple_stmt) . LSEMICOLON option(simple_stmt) LSEMICOLON option(simple_stmt) loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSEMICOLON shift to state 294
## Reductions:

State 294:
## Known stack suffix:
## LFOR option(simple_stmt) LSEMICOLON
## LR(1) items:
for_stmt -> LFOR option(simple_stmt) LSEMICOLON . option(simple_stmt) LSEMICOLON option(simple_stmt) loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On simple_stmt shift to state 138
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On option(simple_stmt) shift to state 295
-- On name shift to state 118
-- On listc(expr) shift to state 142
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:
-- On LSEMICOLON
--   reduce production option(simple_stmt) ->

State 295:
## Known stack suffix:
## LFOR option(simple_stmt) LSEMICOLON option(simple_stmt)
## LR(1) items:
for_stmt -> LFOR option(simple_stmt) LSEMICOLON option(simple_stmt) . LSEMICOLON option(simple_stmt) loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSEMICOLON shift to state 296
## Reductions:

State 296:
## Known stack suffix:
## LFOR option(simple_stmt) LSEMICOLON option(simple_stmt) LSEMICOLON
## LR(1) items:
for_stmt -> LFOR option(simple_stmt) LSEMICOLON option(simple_stmt) LSEMICOLON . option(simple_stmt) loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On simple_stmt shift to state 138
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On option(simple_stmt) shift to state 297
-- On name shift to state 118
-- On listc(expr) shift to state 142
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:
-- On LBODY
--   reduce production option(simple_stmt) ->

State 297:
## Known stack suffix:
## LFOR option(simple_stmt) LSEMICOLON option(simple_stmt) LSEMICOLON option(simple_stmt)
## LR(1) items:
for_stmt -> LFOR option(simple_stmt) LSEMICOLON option(simple_stmt) LSEMICOLON option(simple_stmt) . loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LBODY shift to state 263
-- On loop_body shift to state 298
## Reductions:

State 298:
## Known stack suffix:
## LFOR option(simple_stmt) LSEMICOLON option(simple_stmt) LSEMICOLON option(simple_stmt) loop_body
## LR(1) items:
for_stmt -> LFOR option(simple_stmt) LSEMICOLON option(simple_stmt) LSEMICOLON option(simple_stmt) loop_body . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_stmt -> LFOR option(simple_stmt) LSEMICOLON option(simple_stmt) LSEMICOLON option(simple_stmt) loop_body

State 299:
## Known stack suffix:
## LFOR loop_body
## LR(1) items:
for_stmt -> LFOR loop_body . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_stmt -> LFOR loop_body

State 300:
## Known stack suffix:
## LFOR listc(expr)
## LR(1) items:
for_stmt -> LFOR listc(expr) . LEQ LRANGE expr loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
for_stmt -> LFOR listc(expr) . LCOLAS LRANGE expr loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
simple_stmt -> listc(expr) . LEQ listc(expr) [ LSEMICOLON LBODY ]
simple_stmt -> listc(expr) . LCOLAS listc(expr) [ LSEMICOLON LBODY ]
## Transitions:
-- On LEQ shift to state 301
-- On LCOLAS shift to state 305
## Reductions:

State 301:
## Known stack suffix:
## LFOR listc(expr) LEQ
## LR(1) items:
for_stmt -> LFOR listc(expr) LEQ . LRANGE expr loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
simple_stmt -> listc(expr) LEQ . listc(expr) [ LSEMICOLON LBODY ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LRANGE shift to state 302
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On listc(expr) shift to state 144
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 217
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 302:
## Known stack suffix:
## LFOR listc(expr) LEQ LRANGE
## LR(1) items:
for_stmt -> LFOR listc(expr) LEQ LRANGE . expr loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 303
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 303:
## Known stack suffix:
## LFOR listc(expr) LEQ LRANGE expr
## LR(1) items:
expr -> expr . LOROR expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
for_stmt -> LFOR listc(expr) LEQ LRANGE expr . loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMM shift to state 197
-- On LBODY shift to state 263
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
-- On loop_body shift to state 304
## Reductions:

State 304:
## Known stack suffix:
## LFOR listc(expr) LEQ LRANGE expr loop_body
## LR(1) items:
for_stmt -> LFOR listc(expr) LEQ LRANGE expr loop_body . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_stmt -> LFOR listc(expr) LEQ LRANGE expr loop_body

State 305:
## Known stack suffix:
## LFOR listc(expr) LCOLAS
## LR(1) items:
for_stmt -> LFOR listc(expr) LCOLAS . LRANGE expr loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
simple_stmt -> listc(expr) LCOLAS . listc(expr) [ LSEMICOLON LBODY ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LRANGE shift to state 306
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On listc(expr) shift to state 219
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 217
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 306:
## Known stack suffix:
## LFOR listc(expr) LCOLAS LRANGE
## LR(1) items:
for_stmt -> LFOR listc(expr) LCOLAS LRANGE . expr loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 307
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 307:
## Known stack suffix:
## LFOR listc(expr) LCOLAS LRANGE expr
## LR(1) items:
expr -> expr . LOROR expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LBODY LANDNOT LANDAND LAND ]
for_stmt -> LFOR listc(expr) LCOLAS LRANGE expr . loop_body [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMM shift to state 197
-- On LBODY shift to state 263
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
-- On loop_body shift to state 308
## Reductions:

State 308:
## Known stack suffix:
## LFOR listc(expr) LCOLAS LRANGE expr loop_body
## LR(1) items:
for_stmt -> LFOR listc(expr) LCOLAS LRANGE expr loop_body . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_stmt -> LFOR listc(expr) LCOLAS LRANGE expr loop_body

State 309:
## Known stack suffix:
## LFALL
## LR(1) items:
non_dcl_stmt -> LFALL . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_dcl_stmt -> LFALL

State 310:
## Known stack suffix:
## LDEFER
## LR(1) items:
non_dcl_stmt -> LDEFER . pseudocall [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 311
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 268
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 311:
## Known stack suffix:
## LDEFER pseudocall
## LR(1) items:
non_dcl_stmt -> LDEFER pseudocall . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
pexpr_no_paren -> pseudocall . [ LPAREN LDOT LBRACKET LBRACE ]
## Transitions:
## Reductions:
-- On RBRACE LSEMICOLON LDEFAULT LCASE EOF
--   reduce production non_dcl_stmt -> LDEFER pseudocall
-- On LPAREN LDOT LBRACKET LBRACE
--   reduce production pexpr_no_paren -> pseudocall

State 312:
## Known stack suffix:
## LCONTINUE
## LR(1) items:
non_dcl_stmt -> LCONTINUE . option(new_name) [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LNAME shift to state 2
-- On sym shift to state 313
-- On option(new_name) shift to state 314
## Reductions:
-- On RBRACE LSEMICOLON LDEFAULT LCASE EOF
--   reduce production option(new_name) ->

State 313:
## Known stack suffix:
## sym
## LR(1) items:
option(new_name) -> sym . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(new_name) -> sym

State 314:
## Known stack suffix:
## LCONTINUE option(new_name)
## LR(1) items:
non_dcl_stmt -> LCONTINUE option(new_name) . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_dcl_stmt -> LCONTINUE option(new_name)

State 315:
## Known stack suffix:
## LCONST
## LR(1) items:
common_dcl -> LCONST . constdcl [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
common_dcl -> LCONST . LPAREN constdcl option(LSEMICOLON) RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
common_dcl -> LCONST . LPAREN constdcl LSEMICOLON constdcl1_list option(LSEMICOLON) RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
common_dcl -> LCONST . LPAREN RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LPAREN shift to state 316
-- On LNAME shift to state 2
-- On sym shift to state 28
-- On listc(dcl_name) shift to state 318
-- On list_sep(dcl_name,LCOMMA) shift to state 324
-- On constdcl shift to state 340
## Reductions:

State 316:
## Known stack suffix:
## LCONST LPAREN
## LR(1) items:
common_dcl -> LCONST LPAREN . constdcl option(LSEMICOLON) RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
common_dcl -> LCONST LPAREN . constdcl LSEMICOLON constdcl1_list option(LSEMICOLON) RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
common_dcl -> LCONST LPAREN . RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On RPAREN shift to state 317
-- On LNAME shift to state 2
-- On sym shift to state 28
-- On listc(dcl_name) shift to state 318
-- On list_sep(dcl_name,LCOMMA) shift to state 324
-- On constdcl shift to state 327
## Reductions:

State 317:
## Known stack suffix:
## LCONST LPAREN RPAREN
## LR(1) items:
common_dcl -> LCONST LPAREN RPAREN . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production common_dcl -> LCONST LPAREN RPAREN

State 318:
## Known stack suffix:
## listc(dcl_name)
## LR(1) items:
constdcl -> listc(dcl_name) . ntype LEQ listc(expr) [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
constdcl -> listc(dcl_name) . LEQ listc(expr) [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LEQ shift to state 319
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 321
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 319:
## Known stack suffix:
## listc(dcl_name) LEQ
## LR(1) items:
constdcl -> listc(dcl_name) LEQ . listc(expr) [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On listc(expr) shift to state 320
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 217
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 320:
## Known stack suffix:
## listc(dcl_name) LEQ listc(expr)
## LR(1) items:
constdcl -> listc(dcl_name) LEQ listc(expr) . [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constdcl -> listc(dcl_name) LEQ listc(expr)

State 321:
## Known stack suffix:
## listc(dcl_name) ntype
## LR(1) items:
constdcl -> listc(dcl_name) ntype . LEQ listc(expr) [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LEQ shift to state 322
## Reductions:

State 322:
## Known stack suffix:
## listc(dcl_name) ntype LEQ
## LR(1) items:
constdcl -> listc(dcl_name) ntype LEQ . listc(expr) [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On listc(expr) shift to state 323
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 217
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 323:
## Known stack suffix:
## listc(dcl_name) ntype LEQ listc(expr)
## LR(1) items:
constdcl -> listc(dcl_name) ntype LEQ listc(expr) . [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constdcl -> listc(dcl_name) ntype LEQ listc(expr)

State 324:
## Known stack suffix:
## list_sep(dcl_name,LCOMMA)
## LR(1) items:
list_sep(dcl_name,LCOMMA) -> list_sep(dcl_name,LCOMMA) . LCOMMA sym [ RPAREN LSTRUCT LSEMICOLON LPAREN LNAME LMULT LMAP LINTERFACE LFUNC LEQ LCOMMA LCOMM LCHAN LBRACKET ]
listc(dcl_name) -> list_sep(dcl_name,LCOMMA) . [ RPAREN LSTRUCT LSEMICOLON LPAREN LNAME LMULT LMAP LINTERFACE LFUNC LEQ LCOMM LCHAN LBRACKET ]
## Transitions:
-- On LCOMMA shift to state 325
## Reductions:
-- On RPAREN LSTRUCT LSEMICOLON LPAREN LNAME LMULT LMAP LINTERFACE LFUNC LEQ LCOMM LCHAN LBRACKET
--   reduce production listc(dcl_name) -> list_sep(dcl_name,LCOMMA)

State 325:
## Known stack suffix:
## list_sep(dcl_name,LCOMMA) LCOMMA
## LR(1) items:
list_sep(dcl_name,LCOMMA) -> list_sep(dcl_name,LCOMMA) LCOMMA . sym [ RPAREN LSTRUCT LSEMICOLON LPAREN LNAME LMULT LMAP LINTERFACE LFUNC LEQ LCOMMA LCOMM LCHAN LBRACKET ]
## Transitions:
-- On LNAME shift to state 2
-- On sym shift to state 326
## Reductions:

State 326:
## Known stack suffix:
## list_sep(dcl_name,LCOMMA) LCOMMA sym
## LR(1) items:
list_sep(dcl_name,LCOMMA) -> list_sep(dcl_name,LCOMMA) LCOMMA sym . [ RPAREN LSTRUCT LSEMICOLON LPAREN LNAME LMULT LMAP LINTERFACE LFUNC LEQ LCOMMA LCOMM LCHAN LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_sep(dcl_name,LCOMMA) -> list_sep(dcl_name,LCOMMA) LCOMMA sym

State 327:
## Known stack suffix:
## LCONST LPAREN constdcl
## LR(1) items:
common_dcl -> LCONST LPAREN constdcl . option(LSEMICOLON) RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
common_dcl -> LCONST LPAREN constdcl . LSEMICOLON constdcl1_list option(LSEMICOLON) RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSEMICOLON shift to state 328
-- On option(LSEMICOLON) shift to state 338
## Reductions:
-- On RPAREN
--   reduce production option(LSEMICOLON) ->

State 328:
## Known stack suffix:
## LCONST LPAREN constdcl LSEMICOLON
## LR(1) items:
common_dcl -> LCONST LPAREN constdcl LSEMICOLON . constdcl1_list option(LSEMICOLON) RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
option(LSEMICOLON) -> LSEMICOLON . [ RPAREN ]
## Transitions:
-- On LNAME shift to state 2
-- On sym shift to state 28
-- On listc(dcl_name) shift to state 329
-- On list_sep(dcl_name,LCOMMA) shift to state 324
-- On constdcl1_list shift to state 331
-- On constdcl1 shift to state 337
-- On constdcl shift to state 334
## Reductions:
-- On RPAREN
--   reduce production option(LSEMICOLON) -> LSEMICOLON

State 329:
## Known stack suffix:
## listc(dcl_name)
## LR(1) items:
constdcl -> listc(dcl_name) . ntype LEQ listc(expr) [ RPAREN LSEMICOLON ]
constdcl -> listc(dcl_name) . LEQ listc(expr) [ RPAREN LSEMICOLON ]
constdcl1 -> listc(dcl_name) . ntype [ RPAREN LSEMICOLON ]
constdcl1 -> listc(dcl_name) . [ RPAREN LSEMICOLON ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LEQ shift to state 319
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 330
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:
-- On RPAREN LSEMICOLON
--   reduce production constdcl1 -> listc(dcl_name)

State 330:
## Known stack suffix:
## listc(dcl_name) ntype
## LR(1) items:
constdcl -> listc(dcl_name) ntype . LEQ listc(expr) [ RPAREN LSEMICOLON ]
constdcl1 -> listc(dcl_name) ntype . [ RPAREN LSEMICOLON ]
## Transitions:
-- On LEQ shift to state 322
## Reductions:
-- On RPAREN LSEMICOLON
--   reduce production constdcl1 -> listc(dcl_name) ntype

State 331:
## Known stack suffix:
## LCONST LPAREN constdcl LSEMICOLON constdcl1_list
## LR(1) items:
common_dcl -> LCONST LPAREN constdcl LSEMICOLON constdcl1_list . option(LSEMICOLON) RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
constdcl1_list -> constdcl1_list . LSEMICOLON constdcl1 [ RPAREN LSEMICOLON ]
## Transitions:
-- On LSEMICOLON shift to state 332
-- On option(LSEMICOLON) shift to state 335
## Reductions:
-- On RPAREN
--   reduce production option(LSEMICOLON) ->

State 332:
## Known stack suffix:
## constdcl1_list LSEMICOLON
## LR(1) items:
constdcl1_list -> constdcl1_list LSEMICOLON . constdcl1 [ RPAREN LSEMICOLON ]
option(LSEMICOLON) -> LSEMICOLON . [ RPAREN ]
## Transitions:
-- On LNAME shift to state 2
-- On sym shift to state 28
-- On listc(dcl_name) shift to state 329
-- On list_sep(dcl_name,LCOMMA) shift to state 324
-- On constdcl1 shift to state 333
-- On constdcl shift to state 334
## Reductions:
-- On RPAREN
--   reduce production option(LSEMICOLON) -> LSEMICOLON

State 333:
## Known stack suffix:
## constdcl1_list LSEMICOLON constdcl1
## LR(1) items:
constdcl1_list -> constdcl1_list LSEMICOLON constdcl1 . [ RPAREN LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constdcl1_list -> constdcl1_list LSEMICOLON constdcl1

State 334:
## Known stack suffix:
## constdcl
## LR(1) items:
constdcl1 -> constdcl . [ RPAREN LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constdcl1 -> constdcl

State 335:
## Known stack suffix:
## LCONST LPAREN constdcl LSEMICOLON constdcl1_list option(LSEMICOLON)
## LR(1) items:
common_dcl -> LCONST LPAREN constdcl LSEMICOLON constdcl1_list option(LSEMICOLON) . RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On RPAREN shift to state 336
## Reductions:

State 336:
## Known stack suffix:
## LCONST LPAREN constdcl LSEMICOLON constdcl1_list option(LSEMICOLON) RPAREN
## LR(1) items:
common_dcl -> LCONST LPAREN constdcl LSEMICOLON constdcl1_list option(LSEMICOLON) RPAREN . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production common_dcl -> LCONST LPAREN constdcl LSEMICOLON constdcl1_list option(LSEMICOLON) RPAREN

State 337:
## Known stack suffix:
## constdcl1
## LR(1) items:
constdcl1_list -> constdcl1 . [ RPAREN LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constdcl1_list -> constdcl1

State 338:
## Known stack suffix:
## LCONST LPAREN constdcl option(LSEMICOLON)
## LR(1) items:
common_dcl -> LCONST LPAREN constdcl option(LSEMICOLON) . RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On RPAREN shift to state 339
## Reductions:

State 339:
## Known stack suffix:
## LCONST LPAREN constdcl option(LSEMICOLON) RPAREN
## LR(1) items:
common_dcl -> LCONST LPAREN constdcl option(LSEMICOLON) RPAREN . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production common_dcl -> LCONST LPAREN constdcl option(LSEMICOLON) RPAREN

State 340:
## Known stack suffix:
## LCONST constdcl
## LR(1) items:
common_dcl -> LCONST constdcl . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production common_dcl -> LCONST constdcl

State 341:
## Known stack suffix:
## LBREAK
## LR(1) items:
non_dcl_stmt -> LBREAK . option(new_name) [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LNAME shift to state 2
-- On sym shift to state 313
-- On option(new_name) shift to state 342
## Reductions:
-- On RBRACE LSEMICOLON LDEFAULT LCASE EOF
--   reduce production option(new_name) ->

State 342:
## Known stack suffix:
## LBREAK option(new_name)
## LR(1) items:
non_dcl_stmt -> LBREAK option(new_name) . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_dcl_stmt -> LBREAK option(new_name)

State 343:
## Known stack suffix:
## LBRACE
## LR(1) items:
compound_stmt -> LBRACE . listsc(stmt) RBRACE [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LVAR shift to state 23
-- On LTYPE shift to state 123
-- On LSWITCH shift to state 137
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LSELECT shift to state 254
-- On LRUNE shift to state 69
-- On LRETURN shift to state 258
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LIF shift to state 261
-- On LHAT shift to state 77
-- On LGOTO shift to state 264
-- On LGO shift to state 266
-- On LFUNC shift to state 60
-- On LFOR shift to state 287
-- On LFLOAT shift to state 78
-- On LFALL shift to state 309
-- On LDots shift to state 88
-- On LDEFER shift to state 310
-- On LDDD shift to state 89
-- On LCONTINUE shift to state 312
-- On LCONST shift to state 315
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBREAK shift to state 341
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 343
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 344
-- On switch_stmt shift to state 346
-- On structtype shift to state 84
-- On stmt shift to state 355
-- On simple_stmt shift to state 348
-- On select_stmt shift to state 349
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On non_dcl_stmt shift to state 350
-- On name shift to state 118
-- On listsc(stmt) shift to state 356
-- On listc(expr) shift to state 142
-- On list_sep(stmt,LSEMICOLON) shift to state 358
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On if_stmt shift to state 351
-- On for_stmt shift to state 352
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On compound_stmt shift to state 353
-- On common_dcl shift to state 354
-- On basic_literal shift to state 168
## Reductions:
-- On RBRACE LSEMICOLON
--   reduce production stmt ->

State 344:
## Known stack suffix:
## sym
## LR(1) items:
name -> sym . [ RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBRACKET LBRACE LASOP LANDNOT LANDAND LAND EOF ]
non_dcl_stmt -> sym . LCOLON stmt [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LCOLON shift to state 345
## Reductions:
-- On RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LCOMMA LCOMM LCOLAS LCASE LBRACKET LBRACE LASOP LANDNOT LANDAND LAND EOF
--   reduce production name -> sym

State 345:
## Known stack suffix:
## sym LCOLON
## LR(1) items:
non_dcl_stmt -> sym LCOLON . stmt [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LVAR shift to state 23
-- On LTYPE shift to state 123
-- On LSWITCH shift to state 137
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LSELECT shift to state 254
-- On LRUNE shift to state 69
-- On LRETURN shift to state 258
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LIF shift to state 261
-- On LHAT shift to state 77
-- On LGOTO shift to state 264
-- On LGO shift to state 266
-- On LFUNC shift to state 60
-- On LFOR shift to state 287
-- On LFLOAT shift to state 78
-- On LFALL shift to state 309
-- On LDots shift to state 88
-- On LDEFER shift to state 310
-- On LDDD shift to state 89
-- On LCONTINUE shift to state 312
-- On LCONST shift to state 315
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBREAK shift to state 341
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 343
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 344
-- On switch_stmt shift to state 346
-- On structtype shift to state 84
-- On stmt shift to state 347
-- On simple_stmt shift to state 348
-- On select_stmt shift to state 349
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On non_dcl_stmt shift to state 350
-- On name shift to state 118
-- On listc(expr) shift to state 142
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On if_stmt shift to state 351
-- On for_stmt shift to state 352
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On compound_stmt shift to state 353
-- On common_dcl shift to state 354
-- On basic_literal shift to state 168
## Reductions:
-- On RBRACE LSEMICOLON LDEFAULT LCASE EOF
--   reduce production stmt ->

State 346:
## Known stack suffix:
## switch_stmt
## LR(1) items:
non_dcl_stmt -> switch_stmt . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_dcl_stmt -> switch_stmt

State 347:
## Known stack suffix:
## sym LCOLON stmt
## LR(1) items:
non_dcl_stmt -> sym LCOLON stmt . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_dcl_stmt -> sym LCOLON stmt

State 348:
## Known stack suffix:
## simple_stmt
## LR(1) items:
non_dcl_stmt -> simple_stmt . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_dcl_stmt -> simple_stmt

State 349:
## Known stack suffix:
## select_stmt
## LR(1) items:
non_dcl_stmt -> select_stmt . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_dcl_stmt -> select_stmt

State 350:
## Known stack suffix:
## non_dcl_stmt
## LR(1) items:
stmt -> non_dcl_stmt . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> non_dcl_stmt

State 351:
## Known stack suffix:
## if_stmt
## LR(1) items:
non_dcl_stmt -> if_stmt . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_dcl_stmt -> if_stmt

State 352:
## Known stack suffix:
## for_stmt
## LR(1) items:
non_dcl_stmt -> for_stmt . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_dcl_stmt -> for_stmt

State 353:
## Known stack suffix:
## compound_stmt
## LR(1) items:
stmt -> compound_stmt . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> compound_stmt

State 354:
## Known stack suffix:
## common_dcl
## LR(1) items:
stmt -> common_dcl . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> common_dcl

State 355:
## Known stack suffix:
## stmt
## LR(1) items:
list_sep(stmt,LSEMICOLON) -> stmt . [ RBRACE LSEMICOLON LDEFAULT LCASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_sep(stmt,LSEMICOLON) -> stmt

State 356:
## Known stack suffix:
## LBRACE listsc(stmt)
## LR(1) items:
compound_stmt -> LBRACE listsc(stmt) . RBRACE [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On RBRACE shift to state 357
## Reductions:

State 357:
## Known stack suffix:
## LBRACE listsc(stmt) RBRACE
## LR(1) items:
compound_stmt -> LBRACE listsc(stmt) RBRACE . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compound_stmt -> LBRACE listsc(stmt) RBRACE

State 358:
## Known stack suffix:
## list_sep(stmt,LSEMICOLON)
## LR(1) items:
list_sep(stmt,LSEMICOLON) -> list_sep(stmt,LSEMICOLON) . LSEMICOLON stmt [ RBRACE LSEMICOLON LDEFAULT LCASE ]
listsc(stmt) -> list_sep(stmt,LSEMICOLON) . [ RBRACE LDEFAULT LCASE ]
## Transitions:
-- On LSEMICOLON shift to state 359
## Reductions:
-- On RBRACE LDEFAULT LCASE
--   reduce production listsc(stmt) -> list_sep(stmt,LSEMICOLON)

State 359:
## Known stack suffix:
## list_sep(stmt,LSEMICOLON) LSEMICOLON
## LR(1) items:
list_sep(stmt,LSEMICOLON) -> list_sep(stmt,LSEMICOLON) LSEMICOLON . stmt [ RBRACE LSEMICOLON LDEFAULT LCASE ]
## Transitions:
-- On LVAR shift to state 23
-- On LTYPE shift to state 123
-- On LSWITCH shift to state 137
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LSELECT shift to state 254
-- On LRUNE shift to state 69
-- On LRETURN shift to state 258
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LIF shift to state 261
-- On LHAT shift to state 77
-- On LGOTO shift to state 264
-- On LGO shift to state 266
-- On LFUNC shift to state 60
-- On LFOR shift to state 287
-- On LFLOAT shift to state 78
-- On LFALL shift to state 309
-- On LDots shift to state 88
-- On LDEFER shift to state 310
-- On LDDD shift to state 89
-- On LCONTINUE shift to state 312
-- On LCONST shift to state 315
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBREAK shift to state 341
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 343
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 344
-- On switch_stmt shift to state 346
-- On structtype shift to state 84
-- On stmt shift to state 360
-- On simple_stmt shift to state 348
-- On select_stmt shift to state 349
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On non_dcl_stmt shift to state 350
-- On name shift to state 118
-- On listc(expr) shift to state 142
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On if_stmt shift to state 351
-- On for_stmt shift to state 352
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On compound_stmt shift to state 353
-- On common_dcl shift to state 354
-- On basic_literal shift to state 168
## Reductions:
-- On RBRACE LSEMICOLON LDEFAULT LCASE
--   reduce production stmt ->

State 360:
## Known stack suffix:
## list_sep(stmt,LSEMICOLON) LSEMICOLON stmt
## LR(1) items:
list_sep(stmt,LSEMICOLON) -> list_sep(stmt,LSEMICOLON) LSEMICOLON stmt . [ RBRACE LSEMICOLON LDEFAULT LCASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_sep(stmt,LSEMICOLON) -> list_sep(stmt,LSEMICOLON) LSEMICOLON stmt

State 361:
## Known stack suffix:
## LBODY listsc(stmt)
## LR(1) items:
loop_body -> LBODY listsc(stmt) . RBRACE [ RBRACE LSEMICOLON LELSE LDEFAULT LCASE EOF ]
## Transitions:
-- On RBRACE shift to state 362
## Reductions:

State 362:
## Known stack suffix:
## LBODY listsc(stmt) RBRACE
## LR(1) items:
loop_body -> LBODY listsc(stmt) RBRACE . [ RBRACE LSEMICOLON LELSE LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loop_body -> LBODY listsc(stmt) RBRACE

State 363:
## Known stack suffix:
## LIF if_header loop_body
## LR(1) items:
if_stmt -> LIF if_header loop_body . elseif_list else_ [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On elseif_list shift to state 364
## Default reduction:
-- After reading the next token, reduce production elseif_list ->

State 364:
## Known stack suffix:
## LIF if_header loop_body elseif_list
## LR(1) items:
elseif_list -> elseif_list . elseif [ RBRACE LSEMICOLON LELSE LDEFAULT LCASE EOF ]
if_stmt -> LIF if_header loop_body elseif_list . else_ [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LELSE shift to state 365
-- On elseif shift to state 370
-- On else_ shift to state 371
## Reductions:
-- On RBRACE LSEMICOLON LDEFAULT LCASE EOF
--   reduce production else_ ->

State 365:
## Known stack suffix:
## LELSE
## LR(1) items:
else_ -> LELSE . compound_stmt [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
elseif -> LELSE . LIF if_header loop_body [ RBRACE LSEMICOLON LELSE LDEFAULT LCASE EOF ]
## Transitions:
-- On LIF shift to state 366
-- On LBRACE shift to state 343
-- On compound_stmt shift to state 369
## Reductions:

State 366:
## Known stack suffix:
## LELSE LIF
## LR(1) items:
elseif -> LELSE LIF . if_header loop_body [ RBRACE LSEMICOLON LELSE LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On simple_stmt shift to state 138
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On option(simple_stmt) shift to state 139
-- On name shift to state 118
-- On listc(expr) shift to state 142
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On if_header shift to state 367
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:
-- On LSEMICOLON LBODY
--   reduce production option(simple_stmt) ->

State 367:
## Known stack suffix:
## LELSE LIF if_header
## LR(1) items:
elseif -> LELSE LIF if_header . loop_body [ RBRACE LSEMICOLON LELSE LDEFAULT LCASE EOF ]
## Transitions:
-- On LBODY shift to state 263
-- On loop_body shift to state 368
## Reductions:

State 368:
## Known stack suffix:
## LELSE LIF if_header loop_body
## LR(1) items:
elseif -> LELSE LIF if_header loop_body . [ RBRACE LSEMICOLON LELSE LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elseif -> LELSE LIF if_header loop_body

State 369:
## Known stack suffix:
## LELSE compound_stmt
## LR(1) items:
else_ -> LELSE compound_stmt . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production else_ -> LELSE compound_stmt

State 370:
## Known stack suffix:
## elseif_list elseif
## LR(1) items:
elseif_list -> elseif_list elseif . [ RBRACE LSEMICOLON LELSE LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elseif_list -> elseif_list elseif

State 371:
## Known stack suffix:
## LIF if_header loop_body elseif_list else_
## LR(1) items:
if_stmt -> LIF if_header loop_body elseif_list else_ . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_stmt -> LIF if_header loop_body elseif_list else_

State 372:
## Known stack suffix:
## case listsc(stmt)
## LR(1) items:
caseblock -> case listsc(stmt) . [ RBRACE LDEFAULT LCASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production caseblock -> case listsc(stmt)

State 373:
## Known stack suffix:
## fnlitdcl lbrace listsc(stmt)
## LR(1) items:
fnliteral -> fnlitdcl lbrace listsc(stmt) . RBRACE [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RBRACE shift to state 374
## Reductions:

State 374:
## Known stack suffix:
## fnlitdcl lbrace listsc(stmt) RBRACE
## LR(1) items:
fnliteral -> fnlitdcl lbrace listsc(stmt) RBRACE . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fnliteral -> fnlitdcl lbrace listsc(stmt) RBRACE

State 375:
## Known stack suffix:
## expr_or_type
## LR(1) items:
argument -> expr_or_type . [ RPAREN LDDD LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argument -> expr_or_type

State 376:
## Known stack suffix:
## pexpr LPAREN arguments
## LR(1) items:
arguments -> arguments . LCOMMA argument [ RPAREN LDDD LCOMMA ]
pseudocall -> pexpr LPAREN arguments . option(LCOMMA) RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
pseudocall -> pexpr LPAREN arguments . LDDD option(LCOMMA) RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LDDD shift to state 377
-- On LCOMMA shift to state 380
-- On option(LCOMMA) shift to state 382
## Reductions:
-- On RPAREN
--   reduce production option(LCOMMA) ->

State 377:
## Known stack suffix:
## pexpr LPAREN arguments LDDD
## LR(1) items:
pseudocall -> pexpr LPAREN arguments LDDD . option(LCOMMA) RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LCOMMA shift to state 214
-- On option(LCOMMA) shift to state 378
## Reductions:
-- On RPAREN
--   reduce production option(LCOMMA) ->

State 378:
## Known stack suffix:
## pexpr LPAREN arguments LDDD option(LCOMMA)
## LR(1) items:
pseudocall -> pexpr LPAREN arguments LDDD option(LCOMMA) . RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RPAREN shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## pexpr LPAREN arguments LDDD option(LCOMMA) RPAREN
## LR(1) items:
pseudocall -> pexpr LPAREN arguments LDDD option(LCOMMA) RPAREN . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pseudocall -> pexpr LPAREN arguments LDDD option(LCOMMA) RPAREN

State 380:
## Known stack suffix:
## arguments LCOMMA
## LR(1) items:
arguments -> arguments LCOMMA . argument [ RPAREN LDDD LCOMMA ]
option(LCOMMA) -> LCOMMA . [ RPAREN ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 72
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 94
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 235
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 236
-- On non_expr_type shift to state 237
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 248
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr_or_type shift to state 375
-- On expr shift to state 250
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
-- On argument shift to state 381
## Reductions:
-- On RPAREN
--   reduce production option(LCOMMA) -> LCOMMA

State 381:
## Known stack suffix:
## arguments LCOMMA argument
## LR(1) items:
arguments -> arguments LCOMMA argument . [ RPAREN LDDD LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arguments -> arguments LCOMMA argument

State 382:
## Known stack suffix:
## pexpr LPAREN arguments option(LCOMMA)
## LR(1) items:
pseudocall -> pexpr LPAREN arguments option(LCOMMA) . RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RPAREN shift to state 383
## Reductions:

State 383:
## Known stack suffix:
## pexpr LPAREN arguments option(LCOMMA) RPAREN
## LR(1) items:
pseudocall -> pexpr LPAREN arguments option(LCOMMA) RPAREN . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pseudocall -> pexpr LPAREN arguments option(LCOMMA) RPAREN

State 384:
## Known stack suffix:
## argument
## LR(1) items:
arguments -> argument . [ RPAREN LDDD LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arguments -> argument

State 385:
## Known stack suffix:
## LDots expr
## LR(1) items:
expr -> expr . LOROR expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RDots LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> LDots expr . RDots [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RDots shift to state 386
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LCOMM shift to state 197
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:

State 386:
## Known stack suffix:
## LDots expr RDots
## LR(1) items:
expr -> LDots expr RDots . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LDots expr RDots

State 387:
## Known stack suffix:
## pexpr_no_paren LBRACE braced_keyval_list
## LR(1) items:
pexpr_no_paren -> pexpr_no_paren LBRACE braced_keyval_list . RBRACE [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RBRACE shift to state 388
## Reductions:

State 388:
## Known stack suffix:
## pexpr_no_paren LBRACE braced_keyval_list RBRACE
## LR(1) items:
pexpr_no_paren -> pexpr_no_paren LBRACE braced_keyval_list RBRACE . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr_no_paren -> pexpr_no_paren LBRACE braced_keyval_list RBRACE

State 389:
## Known stack suffix:
## LBANG uexpr
## LR(1) items:
uexpr -> LBANG uexpr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production uexpr -> LBANG uexpr

State 390:
## Known stack suffix:
## LHAT uexpr
## LR(1) items:
uexpr -> LHAT uexpr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production uexpr -> LHAT uexpr

State 391:
## Known stack suffix:
## LMULT uexpr
## LR(1) items:
uexpr -> LMULT uexpr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production uexpr -> LMULT uexpr

State 392:
## Known stack suffix:
## LMINUS uexpr
## LR(1) items:
uexpr -> LMINUS uexpr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production uexpr -> LMINUS uexpr

State 393:
## Known stack suffix:
## LMULT non_expr_type
## LR(1) items:
non_expr_type -> LMULT non_expr_type . [ RPAREN LEQ LDDD LCOMMA LCOLON LCOLAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_expr_type -> LMULT non_expr_type

State 394:
## Known stack suffix:
## LPAREN name
## LR(1) items:
pexpr_no_paren -> name . [ RPAREN LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDOT LDIV LCOMM LBRACKET LBRACE LANDNOT LANDAND LAND ]
pexpr_no_paren -> LPAREN name . LCOLON ntype RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LCOLON shift to state 395
## Reductions:
-- On RPAREN LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDOT LDIV LCOMM LBRACKET LBRACE LANDNOT LANDAND LAND
--   reduce production pexpr_no_paren -> name

State 395:
## Known stack suffix:
## LPAREN name LCOLON
## LR(1) items:
pexpr_no_paren -> LPAREN name LCOLON . ntype RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 396
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 396:
## Known stack suffix:
## LPAREN name LCOLON ntype
## LR(1) items:
pexpr_no_paren -> LPAREN name LCOLON ntype . RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RPAREN shift to state 397
## Reductions:

State 397:
## Known stack suffix:
## LPAREN name LCOLON ntype RPAREN
## LR(1) items:
pexpr_no_paren -> LPAREN name LCOLON ntype RPAREN . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBRACE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr_no_paren -> LPAREN name LCOLON ntype RPAREN

State 398:
## Known stack suffix:
## LPAREN expr_or_type
## LR(1) items:
pexpr -> LPAREN expr_or_type . RPAREN [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On RPAREN shift to state 399
## Reductions:

State 399:
## Known stack suffix:
## LPAREN expr_or_type RPAREN
## LR(1) items:
pexpr -> LPAREN expr_or_type RPAREN . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBRACKET LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pexpr -> LPAREN expr_or_type RPAREN

State 400:
## Known stack suffix:
## LPLUS uexpr
## LR(1) items:
uexpr -> LPLUS uexpr . [ RPAREN RDots RBRACKET RBRACE LSEMICOLON LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDIV LDEFAULT LDEC LDDD LCOMMA LCOMM LCOLON LCOLAS LCASE LBODY LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production uexpr -> LPLUS uexpr

State 401:
## Known stack suffix:
## LBRACKET LDDD
## LR(1) items:
expr -> LDDD . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
othertype -> LBRACKET LDDD . RBRACKET ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On RBRACKET shift to state 402
## Reductions:
-- On LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND
--   reduce production expr -> LDDD

State 402:
## Known stack suffix:
## LBRACKET LDDD RBRACKET
## LR(1) items:
othertype -> LBRACKET LDDD RBRACKET . ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 403
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 403:
## Known stack suffix:
## LBRACKET LDDD RBRACKET ntype
## LR(1) items:
othertype -> LBRACKET LDDD RBRACKET ntype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production othertype -> LBRACKET LDDD RBRACKET ntype

State 404:
## Known stack suffix:
## uexpr
## LR(1) items:
expr -> uexpr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> uexpr . [ RBRACKET ]
## Transitions:
## Reductions:
-- On LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND
--   reduce production expr -> uexpr
-- On RBRACKET
--   reduce production expr_no_dots -> uexpr

State 405:
## Known stack suffix:
## LBRACKET oexpr_no_dots
## LR(1) items:
othertype -> LBRACKET oexpr_no_dots . RBRACKET ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On RBRACKET shift to state 406
## Reductions:

State 406:
## Known stack suffix:
## LBRACKET oexpr_no_dots RBRACKET
## LR(1) items:
othertype -> LBRACKET oexpr_no_dots RBRACKET . ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 407
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 407:
## Known stack suffix:
## LBRACKET oexpr_no_dots RBRACKET ntype
## LR(1) items:
othertype -> LBRACKET oexpr_no_dots RBRACKET ntype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production othertype -> LBRACKET oexpr_no_dots RBRACKET ntype

State 408:
## Known stack suffix:
## expr_no_dots
## LR(1) items:
oexpr_no_dots -> expr_no_dots . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production oexpr_no_dots -> expr_no_dots

State 409:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . LOROR expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr . LOROR expr [ RBRACKET ]
expr_no_dots -> expr . LANDAND expr [ RBRACKET ]
expr_no_dots -> expr . LEQEQ expr [ RBRACKET ]
expr_no_dots -> expr . LNE expr [ RBRACKET ]
expr_no_dots -> expr . LLT expr [ RBRACKET ]
expr_no_dots -> expr . LLE expr [ RBRACKET ]
expr_no_dots -> expr . LGE expr [ RBRACKET ]
expr_no_dots -> expr . LGT expr [ RBRACKET ]
expr_no_dots -> expr . LPLUS expr [ RBRACKET ]
expr_no_dots -> expr . LMINUS expr [ RBRACKET ]
expr_no_dots -> expr . LPIPE expr [ RBRACKET ]
expr_no_dots -> expr . LHAT expr [ RBRACKET ]
expr_no_dots -> expr . LMULT expr [ RBRACKET ]
expr_no_dots -> expr . LDIV expr [ RBRACKET ]
expr_no_dots -> expr . LPERCENT expr [ RBRACKET ]
expr_no_dots -> expr . LAND expr [ RBRACKET ]
expr_no_dots -> expr . LANDNOT expr [ RBRACKET ]
expr_no_dots -> expr . LLSH expr [ RBRACKET ]
expr_no_dots -> expr . LRSH expr [ RBRACKET ]
expr_no_dots -> expr . LCOMM expr [ RBRACKET ]
## Transitions:
-- On LRSH shift to state 410
-- On LPLUS shift to state 412
-- On LPIPE shift to state 414
-- On LPERCENT shift to state 416
-- On LOROR shift to state 418
-- On LNE shift to state 420
-- On LMULT shift to state 422
-- On LMINUS shift to state 424
-- On LLT shift to state 426
-- On LLSH shift to state 428
-- On LLE shift to state 430
-- On LHAT shift to state 432
-- On LGT shift to state 434
-- On LGE shift to state 436
-- On LEQEQ shift to state 438
-- On LDIV shift to state 440
-- On LCOMM shift to state 442
-- On LANDNOT shift to state 444
-- On LANDAND shift to state 446
-- On LAND shift to state 448
## Reductions:

State 410:
## Known stack suffix:
## expr LRSH
## LR(1) items:
expr -> expr LRSH . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LRSH . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 411
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 411:
## Known stack suffix:
## expr LRSH expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LRSH expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LRSH expr . [ RBRACKET ]
## Transitions:
## Reductions:
-- On LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND
--   reduce production expr -> expr LRSH expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LRSH expr

State 412:
## Known stack suffix:
## expr LPLUS
## LR(1) items:
expr -> expr LPLUS . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LPLUS . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 413
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 413:
## Known stack suffix:
## expr LPLUS expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LPLUS expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LPLUS expr . [ RBRACKET ]
## Transitions:
-- On LRSH shift to state 148
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LLSH shift to state 169
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On LPLUS LPIPE LOROR LNE LMINUS LLT LLE LHAT LGT LGE LEQEQ LCOMM LANDAND
--   reduce production expr -> expr LPLUS expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LPLUS expr

State 414:
## Known stack suffix:
## expr LPIPE
## LR(1) items:
expr -> expr LPIPE . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LPIPE . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 415
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 415:
## Known stack suffix:
## expr LPIPE expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LPIPE expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LPIPE expr . [ RBRACKET ]
## Transitions:
-- On LRSH shift to state 148
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LLSH shift to state 169
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On LPLUS LPIPE LOROR LNE LMINUS LLT LLE LHAT LGT LGE LEQEQ LCOMM LANDAND
--   reduce production expr -> expr LPIPE expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LPIPE expr

State 416:
## Known stack suffix:
## expr LPERCENT
## LR(1) items:
expr -> expr LPERCENT . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LPERCENT . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 417
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 417:
## Known stack suffix:
## expr LPERCENT expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LPERCENT expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LPERCENT expr . [ RBRACKET ]
## Transitions:
## Reductions:
-- On LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND
--   reduce production expr -> expr LPERCENT expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LPERCENT expr

State 418:
## Known stack suffix:
## expr LOROR
## LR(1) items:
expr -> expr LOROR . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LOROR . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 419
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 419:
## Known stack suffix:
## expr LOROR expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LOROR expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LOROR expr . [ RBRACKET ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:
-- On LOROR LCOMM
--   reduce production expr -> expr LOROR expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LOROR expr

State 420:
## Known stack suffix:
## expr LNE
## LR(1) items:
expr -> expr LNE . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LNE . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 421
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 421:
## Known stack suffix:
## expr LNE expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LNE expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LNE expr . [ RBRACKET ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLSH shift to state 169
-- On LHAT shift to state 183
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On LOROR LNE LLT LLE LGT LGE LEQEQ LCOMM LANDAND
--   reduce production expr -> expr LNE expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LNE expr

State 422:
## Known stack suffix:
## expr LMULT
## LR(1) items:
expr -> expr LMULT . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LMULT . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 423
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 423:
## Known stack suffix:
## expr LMULT expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LMULT expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LMULT expr . [ RBRACKET ]
## Transitions:
## Reductions:
-- On LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND
--   reduce production expr -> expr LMULT expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LMULT expr

State 424:
## Known stack suffix:
## expr LMINUS
## LR(1) items:
expr -> expr LMINUS . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LMINUS . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 425
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 425:
## Known stack suffix:
## expr LMINUS expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LMINUS expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LMINUS expr . [ RBRACKET ]
## Transitions:
-- On LRSH shift to state 148
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LLSH shift to state 169
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On LPLUS LPIPE LOROR LNE LMINUS LLT LLE LHAT LGT LGE LEQEQ LCOMM LANDAND
--   reduce production expr -> expr LMINUS expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LMINUS expr

State 426:
## Known stack suffix:
## expr LLT
## LR(1) items:
expr -> expr LLT . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LLT . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 427
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 427:
## Known stack suffix:
## expr LLT expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LLT expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LLT expr . [ RBRACKET ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLSH shift to state 169
-- On LHAT shift to state 183
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On LOROR LNE LLT LLE LGT LGE LEQEQ LCOMM LANDAND
--   reduce production expr -> expr LLT expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LLT expr

State 428:
## Known stack suffix:
## expr LLSH
## LR(1) items:
expr -> expr LLSH . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LLSH . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 429
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 429:
## Known stack suffix:
## expr LLSH expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LLSH expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LLSH expr . [ RBRACKET ]
## Transitions:
## Reductions:
-- On LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND
--   reduce production expr -> expr LLSH expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LLSH expr

State 430:
## Known stack suffix:
## expr LLE
## LR(1) items:
expr -> expr LLE . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LLE . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 431
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 431:
## Known stack suffix:
## expr LLE expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LLE expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LLE expr . [ RBRACKET ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLSH shift to state 169
-- On LHAT shift to state 183
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On LOROR LNE LLT LLE LGT LGE LEQEQ LCOMM LANDAND
--   reduce production expr -> expr LLE expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LLE expr

State 432:
## Known stack suffix:
## expr LHAT
## LR(1) items:
expr -> expr LHAT . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LHAT . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 433
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 433:
## Known stack suffix:
## expr LHAT expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LHAT expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LHAT expr . [ RBRACKET ]
## Transitions:
-- On LRSH shift to state 148
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LLSH shift to state 169
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On LPLUS LPIPE LOROR LNE LMINUS LLT LLE LHAT LGT LGE LEQEQ LCOMM LANDAND
--   reduce production expr -> expr LHAT expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LHAT expr

State 434:
## Known stack suffix:
## expr LGT
## LR(1) items:
expr -> expr LGT . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LGT . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 435
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 435:
## Known stack suffix:
## expr LGT expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LGT expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LGT expr . [ RBRACKET ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLSH shift to state 169
-- On LHAT shift to state 183
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On LOROR LNE LLT LLE LGT LGE LEQEQ LCOMM LANDAND
--   reduce production expr -> expr LGT expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LGT expr

State 436:
## Known stack suffix:
## expr LGE
## LR(1) items:
expr -> expr LGE . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LGE . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 437
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 437:
## Known stack suffix:
## expr LGE expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LGE expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LGE expr . [ RBRACKET ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLSH shift to state 169
-- On LHAT shift to state 183
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On LOROR LNE LLT LLE LGT LGE LEQEQ LCOMM LANDAND
--   reduce production expr -> expr LGE expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LGE expr

State 438:
## Known stack suffix:
## expr LEQEQ
## LR(1) items:
expr -> expr LEQEQ . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LEQEQ . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 439
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 439:
## Known stack suffix:
## expr LEQEQ expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LEQEQ expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LEQEQ expr . [ RBRACKET ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLSH shift to state 169
-- On LHAT shift to state 183
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On LOROR LNE LLT LLE LGT LGE LEQEQ LCOMM LANDAND
--   reduce production expr -> expr LEQEQ expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LEQEQ expr

State 440:
## Known stack suffix:
## expr LDIV
## LR(1) items:
expr -> expr LDIV . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LDIV . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 441
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 441:
## Known stack suffix:
## expr LDIV expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LDIV expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LDIV expr . [ RBRACKET ]
## Transitions:
## Reductions:
-- On LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND
--   reduce production expr -> expr LDIV expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LDIV expr

State 442:
## Known stack suffix:
## expr LCOMM
## LR(1) items:
expr -> expr LCOMM . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LCOMM . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 443
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 443:
## Known stack suffix:
## expr LCOMM expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LCOMM expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LCOMM expr . [ RBRACKET ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LOROR shift to state 177
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LANDAND shift to state 195
-- On LAND shift to state 175
## Reductions:
-- On LCOMM
--   reduce production expr -> expr LCOMM expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LCOMM expr

State 444:
## Known stack suffix:
## expr LANDNOT
## LR(1) items:
expr -> expr LANDNOT . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LANDNOT . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 445
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 445:
## Known stack suffix:
## expr LANDNOT expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LANDNOT expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LANDNOT expr . [ RBRACKET ]
## Transitions:
## Reductions:
-- On LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND
--   reduce production expr -> expr LANDNOT expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LANDNOT expr

State 446:
## Known stack suffix:
## expr LANDAND
## LR(1) items:
expr -> expr LANDAND . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LANDAND . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 447
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 447:
## Known stack suffix:
## expr LANDAND expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LANDAND expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LANDAND expr . [ RBRACKET ]
## Transitions:
-- On LRSH shift to state 148
-- On LPLUS shift to state 153
-- On LPIPE shift to state 164
-- On LPERCENT shift to state 155
-- On LNE shift to state 179
-- On LMULT shift to state 166
-- On LMINUS shift to state 181
-- On LLT shift to state 185
-- On LLSH shift to state 169
-- On LLE shift to state 187
-- On LHAT shift to state 183
-- On LGT shift to state 189
-- On LGE shift to state 191
-- On LEQEQ shift to state 193
-- On LDIV shift to state 171
-- On LANDNOT shift to state 173
-- On LAND shift to state 175
## Reductions:
-- On LOROR LCOMM LANDAND
--   reduce production expr -> expr LANDAND expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LANDAND expr

State 448:
## Known stack suffix:
## expr LAND
## LR(1) items:
expr -> expr LAND . expr [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LAND . expr [ RBRACKET ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 449
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 449:
## Known stack suffix:
## expr LAND expr
## LR(1) items:
expr -> expr . LOROR expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LEQEQ expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LNE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LGT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPLUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMINUS expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPIPE expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LHAT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LMULT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LDIV expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LPERCENT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LAND expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr LAND expr . [ LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LANDNOT expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LLSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LRSH expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr -> expr . LCOMM expr [ RBRACKET LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND ]
expr_no_dots -> expr LAND expr . [ RBRACKET ]
## Transitions:
## Reductions:
-- On LRSH LPLUS LPIPE LPERCENT LOROR LNE LMULT LMINUS LLT LLSH LLE LHAT LGT LGE LEQEQ LDIV LCOMM LANDNOT LANDAND LAND
--   reduce production expr -> expr LAND expr
-- On RBRACKET
--   reduce production expr_no_dots -> expr LAND expr

State 450:
## Known stack suffix:
## LPAREN ntype
## LR(1) items:
non_recvchantype -> LPAREN ntype . RPAREN [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On RPAREN shift to state 451
## Reductions:

State 451:
## Known stack suffix:
## LPAREN ntype RPAREN
## LR(1) items:
non_recvchantype -> LPAREN ntype RPAREN . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_recvchantype -> LPAREN ntype RPAREN

State 452:
## Known stack suffix:
## LCHAN LCOMM
## LR(1) items:
othertype -> LCHAN LCOMM . ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 109
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 453:
## Known stack suffix:
## ptrtype
## LR(1) items:
non_recvchantype -> ptrtype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_recvchantype -> ptrtype

State 454:
## Known stack suffix:
## othertype
## LR(1) items:
non_recvchantype -> othertype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_recvchantype -> othertype

State 455:
## Known stack suffix:
## fntype
## LR(1) items:
non_recvchantype -> fntype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_recvchantype -> fntype

State 456:
## Known stack suffix:
## dotname
## LR(1) items:
non_recvchantype -> dotname . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_recvchantype -> dotname

State 457:
## Known stack suffix:
## LDDD ntype
## LR(1) items:
dotdotdot -> LDDD ntype . [ RPAREN LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dotdotdot -> LDDD ntype

State 458:
## Known stack suffix:
## sym
## LR(1) items:
arg_type -> sym . name_or_type [ RPAREN LCOMMA ]
arg_type -> sym . dotdotdot [ RPAREN LCOMMA ]
name -> sym . [ RPAREN LDOT LCOMMA ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LDDD shift to state 459
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 460
-- On name_or_type shift to state 461
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
-- On dotdotdot shift to state 462
## Reductions:
-- On RPAREN LDOT LCOMMA
--   reduce production name -> sym

State 459:
## Known stack suffix:
## LDDD
## LR(1) items:
dotdotdot -> LDDD . ntype [ RPAREN LCOMMA ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 457
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 460:
## Known stack suffix:
## ntype
## LR(1) items:
name_or_type -> ntype . [ RPAREN LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name_or_type -> ntype

State 461:
## Known stack suffix:
## sym name_or_type
## LR(1) items:
arg_type -> sym name_or_type . [ RPAREN LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg_type -> sym name_or_type

State 462:
## Known stack suffix:
## sym dotdotdot
## LR(1) items:
arg_type -> sym dotdotdot . [ RPAREN LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg_type -> sym dotdotdot

State 463:
## Known stack suffix:
## LFUNC LPAREN oarg_type_list_ocomma
## LR(1) items:
fntype -> LFUNC LPAREN oarg_type_list_ocomma . RPAREN fnres [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On RPAREN shift to state 464
## Reductions:

State 464:
## Known stack suffix:
## LFUNC LPAREN oarg_type_list_ocomma RPAREN
## LR(1) items:
fntype -> LFUNC LPAREN oarg_type_list_ocomma RPAREN . fnres [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 465
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 475
-- On ptrtype shift to state 476
-- On othertype shift to state 477
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 478
-- On fnret_type shift to state 479
-- On fnres shift to state 480
-- On dotname shift to state 481
## Reductions:
-- On RPAREN RBRACKET RBRACE LSTR LSEMICOLON LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF
--   reduce production fnres ->

State 465:
## Known stack suffix:
## LPAREN
## LR(1) items:
fnres -> LPAREN . oarg_type_list_ocomma RPAREN [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LDDD shift to state 62
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 458
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On oarg_type_list_ocomma shift to state 466
-- On ntype shift to state 460
-- On name_or_type shift to state 468
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
-- On dotdotdot shift to state 469
-- On arg_type_list shift to state 470
-- On arg_type shift to state 474
## Reductions:
-- On RPAREN
--   reduce production oarg_type_list_ocomma ->

State 466:
## Known stack suffix:
## LPAREN oarg_type_list_ocomma
## LR(1) items:
fnres -> LPAREN oarg_type_list_ocomma . RPAREN [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On RPAREN shift to state 467
## Reductions:

State 467:
## Known stack suffix:
## LPAREN oarg_type_list_ocomma RPAREN
## LR(1) items:
fnres -> LPAREN oarg_type_list_ocomma RPAREN . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fnres -> LPAREN oarg_type_list_ocomma RPAREN

State 468:
## Known stack suffix:
## name_or_type
## LR(1) items:
arg_type -> name_or_type . [ RPAREN LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg_type -> name_or_type

State 469:
## Known stack suffix:
## dotdotdot
## LR(1) items:
arg_type -> dotdotdot . [ RPAREN LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg_type -> dotdotdot

State 470:
## Known stack suffix:
## arg_type_list
## LR(1) items:
arg_type_list -> arg_type_list . LCOMMA arg_type [ RPAREN LCOMMA ]
oarg_type_list_ocomma -> arg_type_list . option(LCOMMA) [ RPAREN ]
## Transitions:
-- On LCOMMA shift to state 471
-- On option(LCOMMA) shift to state 473
## Reductions:
-- On RPAREN
--   reduce production option(LCOMMA) ->

State 471:
## Known stack suffix:
## arg_type_list LCOMMA
## LR(1) items:
arg_type_list -> arg_type_list LCOMMA . arg_type [ RPAREN LCOMMA ]
option(LCOMMA) -> LCOMMA . [ RPAREN ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LDDD shift to state 62
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 458
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 460
-- On name_or_type shift to state 468
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
-- On dotdotdot shift to state 469
-- On arg_type shift to state 472
## Reductions:
-- On RPAREN
--   reduce production option(LCOMMA) -> LCOMMA

State 472:
## Known stack suffix:
## arg_type_list LCOMMA arg_type
## LR(1) items:
arg_type_list -> arg_type_list LCOMMA arg_type . [ RPAREN LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg_type_list -> arg_type_list LCOMMA arg_type

State 473:
## Known stack suffix:
## arg_type_list option(LCOMMA)
## LR(1) items:
oarg_type_list_ocomma -> arg_type_list option(LCOMMA) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production oarg_type_list_ocomma -> arg_type_list option(LCOMMA)

State 474:
## Known stack suffix:
## arg_type
## LR(1) items:
arg_type_list -> arg_type . [ RPAREN LCOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg_type_list -> arg_type

State 475:
## Known stack suffix:
## recvchantype
## LR(1) items:
fnret_type -> recvchantype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fnret_type -> recvchantype

State 476:
## Known stack suffix:
## ptrtype
## LR(1) items:
fnret_type -> ptrtype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fnret_type -> ptrtype

State 477:
## Known stack suffix:
## othertype
## LR(1) items:
fnret_type -> othertype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fnret_type -> othertype

State 478:
## Known stack suffix:
## fntype
## LR(1) items:
fnret_type -> fntype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fnret_type -> fntype

State 479:
## Known stack suffix:
## fnret_type
## LR(1) items:
fnres -> fnret_type . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fnres -> fnret_type

State 480:
## Known stack suffix:
## LFUNC LPAREN oarg_type_list_ocomma RPAREN fnres
## LR(1) items:
fntype -> LFUNC LPAREN oarg_type_list_ocomma RPAREN fnres . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fntype -> LFUNC LPAREN oarg_type_list_ocomma RPAREN fnres

State 481:
## Known stack suffix:
## dotname
## LR(1) items:
fnret_type -> dotname . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fnret_type -> dotname

State 482:
## Known stack suffix:
## LPAREN oarg_type_list_ocomma
## LR(1) items:
indcl -> LPAREN oarg_type_list_ocomma . RPAREN fnres [ RBRACE LSEMICOLON ]
## Transitions:
-- On RPAREN shift to state 483
## Reductions:

State 483:
## Known stack suffix:
## LPAREN oarg_type_list_ocomma RPAREN
## LR(1) items:
indcl -> LPAREN oarg_type_list_ocomma RPAREN . fnres [ RBRACE LSEMICOLON ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 465
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 475
-- On ptrtype shift to state 476
-- On othertype shift to state 477
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 478
-- On fnret_type shift to state 479
-- On fnres shift to state 484
-- On dotname shift to state 481
## Reductions:
-- On RBRACE LSEMICOLON
--   reduce production fnres ->

State 484:
## Known stack suffix:
## LPAREN oarg_type_list_ocomma RPAREN fnres
## LR(1) items:
indcl -> LPAREN oarg_type_list_ocomma RPAREN fnres . [ RBRACE LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production indcl -> LPAREN oarg_type_list_ocomma RPAREN fnres

State 485:
## Known stack suffix:
## sym indcl
## LR(1) items:
interfacedcl -> sym indcl . [ RBRACE LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interfacedcl -> sym indcl

State 486:
## Known stack suffix:
## packname
## LR(1) items:
interfacedcl -> packname . [ RBRACE LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interfacedcl -> packname

State 487:
## Known stack suffix:
## LINTERFACE lbrace listsc_t(interfacedcl)
## LR(1) items:
interfacetype -> LINTERFACE lbrace listsc_t(interfacedcl) . RBRACE [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On RBRACE shift to state 488
## Reductions:

State 488:
## Known stack suffix:
## LINTERFACE lbrace listsc_t(interfacedcl) RBRACE
## LR(1) items:
interfacetype -> LINTERFACE lbrace listsc_t(interfacedcl) RBRACE . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interfacetype -> LINTERFACE lbrace listsc_t(interfacedcl) RBRACE

State 489:
## Known stack suffix:
## list_sep_term(interfacedcl,LSEMICOLON)
## LR(1) items:
listsc_t(interfacedcl) -> list_sep_term(interfacedcl,LSEMICOLON) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listsc_t(interfacedcl) -> list_sep_term(interfacedcl,LSEMICOLON)

State 490:
## Known stack suffix:
## interfacedcl
## LR(1) items:
list_sep_term(interfacedcl,LSEMICOLON) -> interfacedcl . [ RBRACE ]
list_sep_term(interfacedcl,LSEMICOLON) -> interfacedcl . LSEMICOLON [ RBRACE ]
list_sep_term(interfacedcl,LSEMICOLON) -> interfacedcl . LSEMICOLON list_sep_term(interfacedcl,LSEMICOLON) [ RBRACE ]
## Transitions:
-- On LSEMICOLON shift to state 491
## Reductions:
-- On RBRACE
--   reduce production list_sep_term(interfacedcl,LSEMICOLON) -> interfacedcl

State 491:
## Known stack suffix:
## interfacedcl LSEMICOLON
## LR(1) items:
list_sep_term(interfacedcl,LSEMICOLON) -> interfacedcl LSEMICOLON . [ RBRACE ]
list_sep_term(interfacedcl,LSEMICOLON) -> interfacedcl LSEMICOLON . list_sep_term(interfacedcl,LSEMICOLON) [ RBRACE ]
## Transitions:
-- On LNAME shift to state 35
-- On LDDD shift to state 57
-- On sym shift to state 58
-- On packname shift to state 486
-- On list_sep_term(interfacedcl,LSEMICOLON) shift to state 492
-- On interfacedcl shift to state 490
## Reductions:
-- On RBRACE
--   reduce production list_sep_term(interfacedcl,LSEMICOLON) -> interfacedcl LSEMICOLON

State 492:
## Known stack suffix:
## interfacedcl LSEMICOLON list_sep_term(interfacedcl,LSEMICOLON)
## LR(1) items:
list_sep_term(interfacedcl,LSEMICOLON) -> interfacedcl LSEMICOLON list_sep_term(interfacedcl,LSEMICOLON) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_sep_term(interfacedcl,LSEMICOLON) -> interfacedcl LSEMICOLON list_sep_term(interfacedcl,LSEMICOLON)

State 493:
## Known stack suffix:
## LMAP LBRACKET ntype
## LR(1) items:
othertype -> LMAP LBRACKET ntype . RBRACKET ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On RBRACKET shift to state 494
## Reductions:

State 494:
## Known stack suffix:
## LMAP LBRACKET ntype RBRACKET
## LR(1) items:
othertype -> LMAP LBRACKET ntype RBRACKET . ntype [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On ntype shift to state 495
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
## Reductions:

State 495:
## Known stack suffix:
## LMAP LBRACKET ntype RBRACKET ntype
## LR(1) items:
othertype -> LMAP LBRACKET ntype RBRACKET ntype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production othertype -> LMAP LBRACKET ntype RBRACKET ntype

State 496:
## Known stack suffix:
## LMULT ntype
## LR(1) items:
ptrtype -> LMULT ntype . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ptrtype -> LMULT ntype

State 497:
## Known stack suffix:
## LPAREN ntype
## LR(1) items:
ntype -> LPAREN ntype . RPAREN [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On RPAREN shift to state 498
## Reductions:

State 498:
## Known stack suffix:
## LPAREN ntype RPAREN
## LR(1) items:
ntype -> LPAREN ntype RPAREN . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ntype -> LPAREN ntype RPAREN

State 499:
## Known stack suffix:
## listc(new_name) ntype
## LR(1) items:
structdcl -> listc(new_name) ntype . option(LSTR) [ RBRACE LSEMICOLON ]
## Transitions:
-- On LSTR shift to state 41
-- On option(LSTR) shift to state 500
## Reductions:
-- On RBRACE LSEMICOLON
--   reduce production option(LSTR) ->

State 500:
## Known stack suffix:
## listc(new_name) ntype option(LSTR)
## LR(1) items:
structdcl -> listc(new_name) ntype option(LSTR) . [ RBRACE LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structdcl -> listc(new_name) ntype option(LSTR)

State 501:
## Known stack suffix:
## structdcl LSEMICOLON list_sep_term(structdcl,LSEMICOLON)
## LR(1) items:
list_sep_term(structdcl,LSEMICOLON) -> structdcl LSEMICOLON list_sep_term(structdcl,LSEMICOLON) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_sep_term(structdcl,LSEMICOLON) -> structdcl LSEMICOLON list_sep_term(structdcl,LSEMICOLON)

State 502:
## Known stack suffix:
## list_sep(new_name,LCOMMA)
## LR(1) items:
list_sep(new_name,LCOMMA) -> list_sep(new_name,LCOMMA) . LCOMMA sym [ LSTRUCT LPAREN LNAME LMULT LMAP LINTERFACE LFUNC LCOMMA LCOMM LCHAN LBRACKET ]
listc(new_name) -> list_sep(new_name,LCOMMA) . [ LSTRUCT LPAREN LNAME LMULT LMAP LINTERFACE LFUNC LCOMM LCHAN LBRACKET ]
## Transitions:
-- On LCOMMA shift to state 503
## Reductions:
-- On LSTRUCT LPAREN LNAME LMULT LMAP LINTERFACE LFUNC LCOMM LCHAN LBRACKET
--   reduce production listc(new_name) -> list_sep(new_name,LCOMMA)

State 503:
## Known stack suffix:
## list_sep(new_name,LCOMMA) LCOMMA
## LR(1) items:
list_sep(new_name,LCOMMA) -> list_sep(new_name,LCOMMA) LCOMMA . sym [ LSTRUCT LPAREN LNAME LMULT LMAP LINTERFACE LFUNC LCOMMA LCOMM LCHAN LBRACKET ]
## Transitions:
-- On LNAME shift to state 2
-- On sym shift to state 504
## Reductions:

State 504:
## Known stack suffix:
## list_sep(new_name,LCOMMA) LCOMMA sym
## LR(1) items:
list_sep(new_name,LCOMMA) -> list_sep(new_name,LCOMMA) LCOMMA sym . [ LSTRUCT LPAREN LNAME LMULT LMAP LINTERFACE LFUNC LCOMMA LCOMM LCHAN LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_sep(new_name,LCOMMA) -> list_sep(new_name,LCOMMA) LCOMMA sym

State 505:
## Known stack suffix:
## LSTRUCT lbrace listsc_t(structdcl)
## LR(1) items:
structtype -> LSTRUCT lbrace listsc_t(structdcl) . RBRACE [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
-- On RBRACE shift to state 506
## Reductions:

State 506:
## Known stack suffix:
## LSTRUCT lbrace listsc_t(structdcl) RBRACE
## LR(1) items:
structtype -> LSTRUCT lbrace listsc_t(structdcl) RBRACE . [ RPAREN RBRACKET RBRACE LSTR LSEMICOLON LPAREN LEQ LDEFAULT LDDD LCOMMA LCOLON LCOLAS LCASE LBRACE LBODY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structtype -> LSTRUCT lbrace listsc_t(structdcl) RBRACE

State 507:
## Known stack suffix:
## list_sep_term(structdcl,LSEMICOLON)
## LR(1) items:
listsc_t(structdcl) -> list_sep_term(structdcl,LSEMICOLON) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listsc_t(structdcl) -> list_sep_term(structdcl,LSEMICOLON)

State 508:
## Known stack suffix:
## listc(dcl_name) LEQ
## LR(1) items:
vardcl -> listc(dcl_name) LEQ . listc(expr) [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On listc(expr) shift to state 509
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 217
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 509:
## Known stack suffix:
## listc(dcl_name) LEQ listc(expr)
## LR(1) items:
vardcl -> listc(dcl_name) LEQ listc(expr) . [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vardcl -> listc(dcl_name) LEQ listc(expr)

State 510:
## Known stack suffix:
## listc(dcl_name) ntype
## LR(1) items:
vardcl -> listc(dcl_name) ntype . [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
vardcl -> listc(dcl_name) ntype . LEQ listc(expr) [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LEQ shift to state 511
## Reductions:
-- On RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF
--   reduce production vardcl -> listc(dcl_name) ntype

State 511:
## Known stack suffix:
## listc(dcl_name) ntype LEQ
## LR(1) items:
vardcl -> listc(dcl_name) ntype LEQ . listc(expr) [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On listc(expr) shift to state 512
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 217
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On basic_literal shift to state 168
## Reductions:

State 512:
## Known stack suffix:
## listc(dcl_name) ntype LEQ listc(expr)
## LR(1) items:
vardcl -> listc(dcl_name) ntype LEQ listc(expr) . [ RPAREN RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vardcl -> listc(dcl_name) ntype LEQ listc(expr)

State 513:
## Known stack suffix:
## vardcl LSEMICOLON list_sep_term(vardcl,LSEMICOLON)
## LR(1) items:
list_sep_term(vardcl,LSEMICOLON) -> vardcl LSEMICOLON list_sep_term(vardcl,LSEMICOLON) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_sep_term(vardcl,LSEMICOLON) -> vardcl LSEMICOLON list_sep_term(vardcl,LSEMICOLON)

State 514:
## Known stack suffix:
## LVAR LPAREN listsc_t(vardcl)
## LR(1) items:
common_dcl -> LVAR LPAREN listsc_t(vardcl) . RPAREN [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
-- On RPAREN shift to state 515
## Reductions:

State 515:
## Known stack suffix:
## LVAR LPAREN listsc_t(vardcl) RPAREN
## LR(1) items:
common_dcl -> LVAR LPAREN listsc_t(vardcl) RPAREN . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production common_dcl -> LVAR LPAREN listsc_t(vardcl) RPAREN

State 516:
## Known stack suffix:
## list_sep_term(vardcl,LSEMICOLON)
## LR(1) items:
listsc_t(vardcl) -> list_sep_term(vardcl,LSEMICOLON) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listsc_t(vardcl) -> list_sep_term(vardcl,LSEMICOLON)

State 517:
## Known stack suffix:
## LVAR vardcl
## LR(1) items:
common_dcl -> LVAR vardcl . [ RBRACE LSEMICOLON LDEFAULT LCASE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production common_dcl -> LVAR vardcl

State 518:
## Known stack suffix:
## LFUNC
## LR(1) items:
xfndcl -> LFUNC . fndcl fnbody [ LSEMICOLON ]
## Transitions:
-- On LPAREN shift to state 519
-- On LNAME shift to state 2
-- On sym shift to state 527
-- On fndcl shift to state 532
## Reductions:

State 519:
## Known stack suffix:
## LPAREN
## LR(1) items:
fndcl -> LPAREN . oarg_type_list_ocomma RPAREN sym LPAREN oarg_type_list_ocomma RPAREN fnres [ LSEMICOLON LBRACE ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LDDD shift to state 62
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 458
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On oarg_type_list_ocomma shift to state 520
-- On ntype shift to state 460
-- On name_or_type shift to state 468
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
-- On dotdotdot shift to state 469
-- On arg_type_list shift to state 470
-- On arg_type shift to state 474
## Reductions:
-- On RPAREN
--   reduce production oarg_type_list_ocomma ->

State 520:
## Known stack suffix:
## LPAREN oarg_type_list_ocomma
## LR(1) items:
fndcl -> LPAREN oarg_type_list_ocomma . RPAREN sym LPAREN oarg_type_list_ocomma RPAREN fnres [ LSEMICOLON LBRACE ]
## Transitions:
-- On RPAREN shift to state 521
## Reductions:

State 521:
## Known stack suffix:
## LPAREN oarg_type_list_ocomma RPAREN
## LR(1) items:
fndcl -> LPAREN oarg_type_list_ocomma RPAREN . sym LPAREN oarg_type_list_ocomma RPAREN fnres [ LSEMICOLON LBRACE ]
## Transitions:
-- On LNAME shift to state 2
-- On sym shift to state 522
## Reductions:

State 522:
## Known stack suffix:
## LPAREN oarg_type_list_ocomma RPAREN sym
## LR(1) items:
fndcl -> LPAREN oarg_type_list_ocomma RPAREN sym . LPAREN oarg_type_list_ocomma RPAREN fnres [ LSEMICOLON LBRACE ]
## Transitions:
-- On LPAREN shift to state 523
## Reductions:

State 523:
## Known stack suffix:
## LPAREN oarg_type_list_ocomma RPAREN sym LPAREN
## LR(1) items:
fndcl -> LPAREN oarg_type_list_ocomma RPAREN sym LPAREN . oarg_type_list_ocomma RPAREN fnres [ LSEMICOLON LBRACE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LDDD shift to state 62
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 458
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On oarg_type_list_ocomma shift to state 524
-- On ntype shift to state 460
-- On name_or_type shift to state 468
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
-- On dotdotdot shift to state 469
-- On arg_type_list shift to state 470
-- On arg_type shift to state 474
## Reductions:
-- On RPAREN
--   reduce production oarg_type_list_ocomma ->

State 524:
## Known stack suffix:
## LPAREN oarg_type_list_ocomma RPAREN sym LPAREN oarg_type_list_ocomma
## LR(1) items:
fndcl -> LPAREN oarg_type_list_ocomma RPAREN sym LPAREN oarg_type_list_ocomma . RPAREN fnres [ LSEMICOLON LBRACE EOF ]
## Transitions:
-- On RPAREN shift to state 525
## Reductions:

State 525:
## Known stack suffix:
## LPAREN oarg_type_list_ocomma RPAREN sym LPAREN oarg_type_list_ocomma RPAREN
## LR(1) items:
fndcl -> LPAREN oarg_type_list_ocomma RPAREN sym LPAREN oarg_type_list_ocomma RPAREN . fnres [ LSEMICOLON LBRACE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 465
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 475
-- On ptrtype shift to state 476
-- On othertype shift to state 477
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 478
-- On fnret_type shift to state 479
-- On fnres shift to state 526
-- On dotname shift to state 481
## Reductions:
-- On LSEMICOLON LBRACE EOF
--   reduce production fnres ->

State 526:
## Known stack suffix:
## LPAREN oarg_type_list_ocomma RPAREN sym LPAREN oarg_type_list_ocomma RPAREN fnres
## LR(1) items:
fndcl -> LPAREN oarg_type_list_ocomma RPAREN sym LPAREN oarg_type_list_ocomma RPAREN fnres . [ LSEMICOLON LBRACE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fndcl -> LPAREN oarg_type_list_ocomma RPAREN sym LPAREN oarg_type_list_ocomma RPAREN fnres

State 527:
## Known stack suffix:
## sym
## LR(1) items:
fndcl -> sym . LPAREN oarg_type_list_ocomma RPAREN fnres [ LSEMICOLON LBRACE EOF ]
## Transitions:
-- On LPAREN shift to state 528
## Reductions:

State 528:
## Known stack suffix:
## sym LPAREN
## LR(1) items:
fndcl -> sym LPAREN . oarg_type_list_ocomma RPAREN fnres [ LSEMICOLON LBRACE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LDDD shift to state 62
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 458
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On oarg_type_list_ocomma shift to state 529
-- On ntype shift to state 460
-- On name_or_type shift to state 468
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
-- On dotdotdot shift to state 469
-- On arg_type_list shift to state 470
-- On arg_type shift to state 474
## Reductions:
-- On RPAREN
--   reduce production oarg_type_list_ocomma ->

State 529:
## Known stack suffix:
## sym LPAREN oarg_type_list_ocomma
## LR(1) items:
fndcl -> sym LPAREN oarg_type_list_ocomma . RPAREN fnres [ LSEMICOLON LBRACE EOF ]
## Transitions:
-- On RPAREN shift to state 530
## Reductions:

State 530:
## Known stack suffix:
## sym LPAREN oarg_type_list_ocomma RPAREN
## LR(1) items:
fndcl -> sym LPAREN oarg_type_list_ocomma RPAREN . fnres [ LSEMICOLON LBRACE EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 465
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 83
-- On structtype shift to state 84
-- On recvchantype shift to state 475
-- On ptrtype shift to state 476
-- On othertype shift to state 477
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 478
-- On fnret_type shift to state 479
-- On fnres shift to state 531
-- On dotname shift to state 481
## Reductions:
-- On LSEMICOLON LBRACE EOF
--   reduce production fnres ->

State 531:
## Known stack suffix:
## sym LPAREN oarg_type_list_ocomma RPAREN fnres
## LR(1) items:
fndcl -> sym LPAREN oarg_type_list_ocomma RPAREN fnres . [ LSEMICOLON LBRACE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fndcl -> sym LPAREN oarg_type_list_ocomma RPAREN fnres

State 532:
## Known stack suffix:
## LFUNC fndcl
## LR(1) items:
xfndcl -> LFUNC fndcl . fnbody [ LSEMICOLON EOF ]
## Transitions:
-- On LBRACE shift to state 533
-- On fnbody shift to state 536
## Reductions:
-- On LSEMICOLON EOF
--   reduce production fnbody ->

State 533:
## Known stack suffix:
## LBRACE
## LR(1) items:
fnbody -> LBRACE . listsc(stmt) RBRACE [ LSEMICOLON EOF ]
## Transitions:
-- On LVAR shift to state 23
-- On LTYPE shift to state 123
-- On LSWITCH shift to state 137
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LSELECT shift to state 254
-- On LRUNE shift to state 69
-- On LRETURN shift to state 258
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LIF shift to state 261
-- On LHAT shift to state 77
-- On LGOTO shift to state 264
-- On LGO shift to state 266
-- On LFUNC shift to state 60
-- On LFOR shift to state 287
-- On LFLOAT shift to state 78
-- On LFALL shift to state 309
-- On LDots shift to state 88
-- On LDEFER shift to state 310
-- On LDDD shift to state 89
-- On LCONTINUE shift to state 312
-- On LCONST shift to state 315
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBREAK shift to state 341
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 343
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 344
-- On switch_stmt shift to state 346
-- On structtype shift to state 84
-- On stmt shift to state 355
-- On simple_stmt shift to state 348
-- On select_stmt shift to state 349
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On non_dcl_stmt shift to state 350
-- On name shift to state 118
-- On listsc(stmt) shift to state 534
-- On listc(expr) shift to state 142
-- On list_sep(stmt,LSEMICOLON) shift to state 358
-- On list_sep(expr,LCOMMA) shift to state 145
-- On interfacetype shift to state 105
-- On if_stmt shift to state 351
-- On for_stmt shift to state 352
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On compound_stmt shift to state 353
-- On common_dcl shift to state 354
-- On basic_literal shift to state 168
## Reductions:
-- On RBRACE LSEMICOLON
--   reduce production stmt ->

State 534:
## Known stack suffix:
## LBRACE listsc(stmt)
## LR(1) items:
fnbody -> LBRACE listsc(stmt) . RBRACE [ LSEMICOLON EOF ]
## Transitions:
-- On RBRACE shift to state 535
## Reductions:

State 535:
## Known stack suffix:
## LBRACE listsc(stmt) RBRACE
## LR(1) items:
fnbody -> LBRACE listsc(stmt) RBRACE . [ LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fnbody -> LBRACE listsc(stmt) RBRACE

State 536:
## Known stack suffix:
## LFUNC fndcl fnbody
## LR(1) items:
xfndcl -> LFUNC fndcl fnbody . [ LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xfndcl -> LFUNC fndcl fnbody

State 537:
## Known stack suffix:
## package LSEMICOLON imports xdcl_list EOF
## LR(1) items:
file -> package LSEMICOLON imports xdcl_list EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production file -> package LSEMICOLON imports xdcl_list EOF

State 538:
## Known stack suffix:
## xfndcl
## LR(1) items:
xdcl -> xfndcl . [ LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xdcl -> xfndcl

State 539:
## Known stack suffix:
## xdcl_list xdcl
## LR(1) items:
xdcl_list -> xdcl_list xdcl . LSEMICOLON [ LVAR LTYPE LFUNC LCONST EOF ]
## Transitions:
-- On LSEMICOLON shift to state 540
## Reductions:

State 540:
## Known stack suffix:
## xdcl_list xdcl LSEMICOLON
## LR(1) items:
xdcl_list -> xdcl_list xdcl LSEMICOLON . [ LVAR LTYPE LFUNC LCONST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xdcl_list -> xdcl_list xdcl LSEMICOLON

State 541:
## Known stack suffix:
## common_dcl
## LR(1) items:
xdcl -> common_dcl . [ LSEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xdcl -> common_dcl

State 542:
## Known stack suffix:
## imports import
## LR(1) items:
imports -> imports import . LSEMICOLON [ LVAR LTYPE LIMPORT LFUNC LCONST EOF ]
## Transitions:
-- On LSEMICOLON shift to state 543
## Reductions:

State 543:
## Known stack suffix:
## imports import LSEMICOLON
## LR(1) items:
imports -> imports import LSEMICOLON . [ LVAR LTYPE LIMPORT LFUNC LCONST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production imports -> imports import LSEMICOLON

State 544:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept file

State 545:
## Known stack suffix:
##
## LR(1) items:
sgrep_spatch_pattern' -> . sgrep_spatch_pattern [ # ]
## Transitions:
-- On LVAR shift to state 23
-- On LTYPE shift to state 123
-- On LSWITCH shift to state 137
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LSELECT shift to state 254
-- On LRUNE shift to state 69
-- On LRETURN shift to state 258
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LPACKAGE shift to state 1
-- On LNAME shift to state 546
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMPORT shift to state 7
-- On LIMAG shift to state 76
-- On LIF shift to state 261
-- On LHAT shift to state 77
-- On LGOTO shift to state 264
-- On LGO shift to state 266
-- On LFUNC shift to state 550
-- On LFOR shift to state 287
-- On LFLOAT shift to state 78
-- On LFALL shift to state 309
-- On LDots shift to state 88
-- On LDEFER shift to state 310
-- On LDDD shift to state 89
-- On LCONTINUE shift to state 312
-- On LCONST shift to state 315
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBREAK shift to state 341
-- On LBRACKET shift to state 67
-- On LBRACE_SEMGREP shift to state 555
-- On LBRACE shift to state 343
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On xfndcl shift to state 559
-- On uexpr shift to state 90
-- On sym shift to state 344
-- On switch_stmt shift to state 346
-- On structtype shift to state 84
-- On stmt shift to state 560
-- On simple_stmt shift to state 348
-- On sgrep_spatch_pattern shift to state 561
-- On select_stmt shift to state 349
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On partial shift to state 562
-- On package shift to state 564
-- On othertype shift to state 117
-- On non_dcl_stmt shift to state 350
-- On name shift to state 118
-- On listc(expr) shift to state 142
-- On list_sep(expr,LCOMMA) shift to state 145
-- On item shift to state 565
-- On interfacetype shift to state 105
-- On import shift to state 572
-- On if_stmt shift to state 351
-- On for_stmt shift to state 352
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On compound_stmt shift to state 353
-- On common_dcl shift to state 354
-- On basic_literal shift to state 168
## Reductions:
-- On LSEMICOLON EOF
--   reduce production stmt ->

State 546:
## Known stack suffix:
## LNAME
## LR(1) items:
partial -> LNAME . LCOLON_SEMGREP complitexpr option(LSEMICOLON) [ EOF ]
sym -> LNAME . [ LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEC LCOMMA LCOMM LCOLON LCOLAS LBRACKET LBRACE LASOP LANDNOT LANDAND LAND EOF ]
## Transitions:
-- On LCOLON_SEMGREP shift to state 547
## Reductions:
-- On LSEMICOLON LRSH LPLUS LPIPE LPERCENT LPAREN LOROR LNE LMULT LMINUS LLT LLSH LLE LINC LHAT LGT LGE LEQEQ LEQ LDOT LDIV LDEC LCOMMA LCOMM LCOLON LCOLAS LBRACKET LBRACE LASOP LANDNOT LANDAND LAND EOF
--   reduce production sym -> LNAME

State 547:
## Known stack suffix:
## LNAME LCOLON_SEMGREP
## LR(1) items:
partial -> LNAME LCOLON_SEMGREP . complitexpr option(LSEMICOLON) [ EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 201
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 206
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On complitexpr shift to state 548
-- On basic_literal shift to state 168
## Reductions:

State 548:
## Known stack suffix:
## LNAME LCOLON_SEMGREP complitexpr
## LR(1) items:
partial -> LNAME LCOLON_SEMGREP complitexpr . option(LSEMICOLON) [ EOF ]
## Transitions:
-- On LSEMICOLON shift to state 233
-- On option(LSEMICOLON) shift to state 549
## Reductions:
-- On EOF
--   reduce production option(LSEMICOLON) ->

State 549:
## Known stack suffix:
## LNAME LCOLON_SEMGREP complitexpr option(LSEMICOLON)
## LR(1) items:
partial -> LNAME LCOLON_SEMGREP complitexpr option(LSEMICOLON) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production partial -> LNAME LCOLON_SEMGREP complitexpr option(LSEMICOLON)

State 550:
## Known stack suffix:
## LFUNC
## LR(1) items:
fntype -> LFUNC . LPAREN oarg_type_list_ocomma RPAREN fnres [ LPAREN LBRACE LBODY ]
xfndcl -> LFUNC . fndcl fnbody [ LSEMICOLON EOF ]
## Transitions:
-- On LPAREN shift to state 551
-- On LNAME shift to state 2
-- On sym shift to state 527
-- On fndcl shift to state 532
## Reductions:

State 551:
## Known stack suffix:
## LFUNC LPAREN
## LR(1) items:
fndcl -> LPAREN . oarg_type_list_ocomma RPAREN sym LPAREN oarg_type_list_ocomma RPAREN fnres [ LSEMICOLON LBRACE EOF ]
fntype -> LFUNC LPAREN . oarg_type_list_ocomma RPAREN fnres [ LPAREN LBRACE LBODY ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 50
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LDDD shift to state 62
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 458
-- On structtype shift to state 84
-- On recvchantype shift to state 97
-- On ptrtype shift to state 98
-- On othertype shift to state 99
-- On oarg_type_list_ocomma shift to state 552
-- On ntype shift to state 460
-- On name_or_type shift to state 468
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 106
-- On dotname shift to state 107
-- On dotdotdot shift to state 469
-- On arg_type_list shift to state 470
-- On arg_type shift to state 474
## Reductions:
-- On RPAREN
--   reduce production oarg_type_list_ocomma ->

State 552:
## Known stack suffix:
## LFUNC LPAREN oarg_type_list_ocomma
## LR(1) items:
fndcl -> LPAREN oarg_type_list_ocomma . RPAREN sym LPAREN oarg_type_list_ocomma RPAREN fnres [ LSEMICOLON LBRACE EOF ]
fntype -> LFUNC LPAREN oarg_type_list_ocomma . RPAREN fnres [ LPAREN LBRACE LBODY ]
## Transitions:
-- On RPAREN shift to state 553
## Reductions:

State 553:
## Known stack suffix:
## LFUNC LPAREN oarg_type_list_ocomma RPAREN
## LR(1) items:
fndcl -> LPAREN oarg_type_list_ocomma RPAREN . sym LPAREN oarg_type_list_ocomma RPAREN fnres [ LSEMICOLON LBRACE EOF ]
fntype -> LFUNC LPAREN oarg_type_list_ocomma RPAREN . fnres [ LPAREN LBRACE LBODY ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LPAREN shift to state 465
-- On LNAME shift to state 2
-- On LMULT shift to state 51
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LFUNC shift to state 60
-- On LCOMM shift to state 63
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On sym shift to state 554
-- On structtype shift to state 84
-- On recvchantype shift to state 475
-- On ptrtype shift to state 476
-- On othertype shift to state 477
-- On name shift to state 102
-- On interfacetype shift to state 105
-- On fntype shift to state 478
-- On fnret_type shift to state 479
-- On fnres shift to state 480
-- On dotname shift to state 481
## Reductions:
-- On LBRACE LBODY
--   reduce production fnres ->

State 554:
## Known stack suffix:
## LPAREN oarg_type_list_ocomma RPAREN sym
## LR(1) items:
fndcl -> LPAREN oarg_type_list_ocomma RPAREN sym . LPAREN oarg_type_list_ocomma RPAREN fnres [ LSEMICOLON LBRACE EOF ]
name -> sym . [ LPAREN LDOT LBRACE LBODY ]
## Transitions:
-- On LPAREN shift to state 523
## Reductions:
-- On LDOT LBRACE LBODY
--   reduce production name -> sym

State 555:
## Known stack suffix:
## LBRACE_SEMGREP
## LR(1) items:
partial -> LBRACE_SEMGREP . braced_keyval_list RBRACE option(LSEMICOLON) [ EOF ]
## Transitions:
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LRUNE shift to state 69
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMAG shift to state 76
-- On LHAT shift to state 77
-- On LFUNC shift to state 60
-- On LFLOAT shift to state 78
-- On LDots shift to state 88
-- On LDDD shift to state 89
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 159
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On uexpr shift to state 90
-- On sym shift to state 83
-- On structtype shift to state 84
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On othertype shift to state 117
-- On name shift to state 118
-- On keyval_list shift to state 160
-- On keyval shift to state 202
-- On interfacetype shift to state 105
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 163
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On complitexpr shift to state 199
-- On braced_keyval_list shift to state 556
-- On basic_literal shift to state 168
-- On bare_complitexpr shift to state 205
## Reductions:
-- On RBRACE
--   reduce production braced_keyval_list ->

State 556:
## Known stack suffix:
## LBRACE_SEMGREP braced_keyval_list
## LR(1) items:
partial -> LBRACE_SEMGREP braced_keyval_list . RBRACE option(LSEMICOLON) [ EOF ]
## Transitions:
-- On RBRACE shift to state 557
## Reductions:

State 557:
## Known stack suffix:
## LBRACE_SEMGREP braced_keyval_list RBRACE
## LR(1) items:
partial -> LBRACE_SEMGREP braced_keyval_list RBRACE . option(LSEMICOLON) [ EOF ]
## Transitions:
-- On LSEMICOLON shift to state 233
-- On option(LSEMICOLON) shift to state 558
## Reductions:
-- On EOF
--   reduce production option(LSEMICOLON) ->

State 558:
## Known stack suffix:
## LBRACE_SEMGREP braced_keyval_list RBRACE option(LSEMICOLON)
## LR(1) items:
partial -> LBRACE_SEMGREP braced_keyval_list RBRACE option(LSEMICOLON) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production partial -> LBRACE_SEMGREP braced_keyval_list RBRACE option(LSEMICOLON)

State 559:
## Known stack suffix:
## xfndcl
## LR(1) items:
item -> xfndcl . [ LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production item -> xfndcl

State 560:
## Known stack suffix:
## stmt
## LR(1) items:
item -> stmt . [ LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production item -> stmt

State 561:
## Known stack suffix:
## sgrep_spatch_pattern
## LR(1) items:
sgrep_spatch_pattern' -> sgrep_spatch_pattern . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept sgrep_spatch_pattern

State 562:
## Known stack suffix:
## partial
## LR(1) items:
sgrep_spatch_pattern -> partial . EOF [ # ]
## Transitions:
-- On EOF shift to state 563
## Reductions:

State 563:
## Known stack suffix:
## partial EOF
## LR(1) items:
sgrep_spatch_pattern -> partial EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> partial EOF

State 564:
## Known stack suffix:
## package
## LR(1) items:
item -> package . [ LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production item -> package

State 565:
## Known stack suffix:
## item
## LR(1) items:
sgrep_spatch_pattern -> item . option(LSEMICOLON) EOF [ # ]
sgrep_spatch_pattern -> item . LSEMICOLON item LSEMICOLON item_list EOF [ # ]
## Transitions:
-- On LSEMICOLON shift to state 566
-- On option(LSEMICOLON) shift to state 575
## Reductions:
-- On EOF
--   reduce production option(LSEMICOLON) ->

State 566:
## Known stack suffix:
## item LSEMICOLON
## LR(1) items:
option(LSEMICOLON) -> LSEMICOLON . [ EOF ]
sgrep_spatch_pattern -> item LSEMICOLON . item LSEMICOLON item_list EOF [ # ]
## Transitions:
-- On LVAR shift to state 23
-- On LTYPE shift to state 123
-- On LSWITCH shift to state 137
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LSELECT shift to state 254
-- On LRUNE shift to state 69
-- On LRETURN shift to state 258
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LPACKAGE shift to state 1
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMPORT shift to state 7
-- On LIMAG shift to state 76
-- On LIF shift to state 261
-- On LHAT shift to state 77
-- On LGOTO shift to state 264
-- On LGO shift to state 266
-- On LFUNC shift to state 550
-- On LFOR shift to state 287
-- On LFLOAT shift to state 78
-- On LFALL shift to state 309
-- On LDots shift to state 88
-- On LDEFER shift to state 310
-- On LDDD shift to state 89
-- On LCONTINUE shift to state 312
-- On LCONST shift to state 315
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBREAK shift to state 341
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 343
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On xfndcl shift to state 559
-- On uexpr shift to state 90
-- On sym shift to state 344
-- On switch_stmt shift to state 346
-- On structtype shift to state 84
-- On stmt shift to state 560
-- On simple_stmt shift to state 348
-- On select_stmt shift to state 349
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On package shift to state 564
-- On othertype shift to state 117
-- On non_dcl_stmt shift to state 350
-- On name shift to state 118
-- On listc(expr) shift to state 142
-- On list_sep(expr,LCOMMA) shift to state 145
-- On item shift to state 567
-- On interfacetype shift to state 105
-- On import shift to state 572
-- On if_stmt shift to state 351
-- On for_stmt shift to state 352
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On compound_stmt shift to state 353
-- On common_dcl shift to state 354
-- On basic_literal shift to state 168
## Reductions:
-- On EOF
--   reduce production option(LSEMICOLON) -> LSEMICOLON
-- On LSEMICOLON
--   reduce production stmt ->

State 567:
## Known stack suffix:
## item LSEMICOLON item
## LR(1) items:
sgrep_spatch_pattern -> item LSEMICOLON item . LSEMICOLON item_list EOF [ # ]
## Transitions:
-- On LSEMICOLON shift to state 568
## Reductions:

State 568:
## Known stack suffix:
## item LSEMICOLON item LSEMICOLON
## LR(1) items:
sgrep_spatch_pattern -> item LSEMICOLON item LSEMICOLON . item_list EOF [ # ]
## Transitions:
-- On LVAR shift to state 23
-- On LTYPE shift to state 123
-- On LSWITCH shift to state 137
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LSELECT shift to state 254
-- On LRUNE shift to state 69
-- On LRETURN shift to state 258
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LPACKAGE shift to state 1
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMPORT shift to state 7
-- On LIMAG shift to state 76
-- On LIF shift to state 261
-- On LHAT shift to state 77
-- On LGOTO shift to state 264
-- On LGO shift to state 266
-- On LFUNC shift to state 550
-- On LFOR shift to state 287
-- On LFLOAT shift to state 78
-- On LFALL shift to state 309
-- On LDots shift to state 88
-- On LDEFER shift to state 310
-- On LDDD shift to state 89
-- On LCONTINUE shift to state 312
-- On LCONST shift to state 315
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBREAK shift to state 341
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 343
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On xfndcl shift to state 559
-- On uexpr shift to state 90
-- On sym shift to state 344
-- On switch_stmt shift to state 346
-- On structtype shift to state 84
-- On stmt shift to state 560
-- On simple_stmt shift to state 348
-- On select_stmt shift to state 349
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On package shift to state 564
-- On othertype shift to state 117
-- On non_dcl_stmt shift to state 350
-- On name shift to state 118
-- On listc(expr) shift to state 142
-- On list_sep(expr,LCOMMA) shift to state 145
-- On item_list shift to state 569
-- On item shift to state 574
-- On interfacetype shift to state 105
-- On import shift to state 572
-- On if_stmt shift to state 351
-- On for_stmt shift to state 352
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On compound_stmt shift to state 353
-- On common_dcl shift to state 354
-- On basic_literal shift to state 168
## Reductions:
-- On LSEMICOLON EOF
--   reduce production stmt ->

State 569:
## Known stack suffix:
## item LSEMICOLON item LSEMICOLON item_list
## LR(1) items:
item_list -> item_list . LSEMICOLON item [ LSEMICOLON EOF ]
sgrep_spatch_pattern -> item LSEMICOLON item LSEMICOLON item_list . EOF [ # ]
## Transitions:
-- On LSEMICOLON shift to state 570
-- On EOF shift to state 573
## Reductions:

State 570:
## Known stack suffix:
## item_list LSEMICOLON
## LR(1) items:
item_list -> item_list LSEMICOLON . item [ LSEMICOLON EOF ]
## Transitions:
-- On LVAR shift to state 23
-- On LTYPE shift to state 123
-- On LSWITCH shift to state 137
-- On LSTRUCT shift to state 30
-- On LSTR shift to state 68
-- On LSELECT shift to state 254
-- On LRUNE shift to state 69
-- On LRETURN shift to state 258
-- On LPLUS shift to state 70
-- On LPAREN shift to state 71
-- On LPACKAGE shift to state 1
-- On LNAME shift to state 2
-- On LMULT shift to state 74
-- On LMINUS shift to state 73
-- On LMAP shift to state 52
-- On LINTERFACE shift to state 54
-- On LINT shift to state 75
-- On LIMPORT shift to state 7
-- On LIMAG shift to state 76
-- On LIF shift to state 261
-- On LHAT shift to state 77
-- On LGOTO shift to state 264
-- On LGO shift to state 266
-- On LFUNC shift to state 550
-- On LFOR shift to state 287
-- On LFLOAT shift to state 78
-- On LFALL shift to state 309
-- On LDots shift to state 88
-- On LDEFER shift to state 310
-- On LDDD shift to state 89
-- On LCONTINUE shift to state 312
-- On LCONST shift to state 315
-- On LCOMM shift to state 79
-- On LCHAN shift to state 65
-- On LBREAK shift to state 341
-- On LBRACKET shift to state 67
-- On LBRACE shift to state 343
-- On LBANG shift to state 80
-- On LAND shift to state 81
-- On xfndcl shift to state 559
-- On uexpr shift to state 90
-- On sym shift to state 344
-- On switch_stmt shift to state 346
-- On structtype shift to state 84
-- On stmt shift to state 560
-- On simple_stmt shift to state 348
-- On select_stmt shift to state 349
-- On pseudocall shift to state 85
-- On pexpr_no_paren shift to state 86
-- On pexpr shift to state 91
-- On package shift to state 564
-- On othertype shift to state 117
-- On non_dcl_stmt shift to state 350
-- On name shift to state 118
-- On listc(expr) shift to state 142
-- On list_sep(expr,LCOMMA) shift to state 145
-- On item shift to state 571
-- On interfacetype shift to state 105
-- On import shift to state 572
-- On if_stmt shift to state 351
-- On for_stmt shift to state 352
-- On fntype shift to state 119
-- On fnliteral shift to state 120
-- On fnlitdcl shift to state 121
-- On expr shift to state 220
-- On convtype shift to state 150
-- On comptype shift to state 157
-- On compound_stmt shift to state 353
-- On common_dcl shift to state 354
-- On basic_literal shift to state 168
## Reductions:
-- On LSEMICOLON EOF
--   reduce production stmt ->

State 571:
## Known stack suffix:
## item_list LSEMICOLON item
## LR(1) items:
item_list -> item_list LSEMICOLON item . [ LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production item_list -> item_list LSEMICOLON item

State 572:
## Known stack suffix:
## import
## LR(1) items:
item -> import . [ LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production item -> import

State 573:
## Known stack suffix:
## item LSEMICOLON item LSEMICOLON item_list EOF
## LR(1) items:
sgrep_spatch_pattern -> item LSEMICOLON item LSEMICOLON item_list EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> item LSEMICOLON item LSEMICOLON item_list EOF

State 574:
## Known stack suffix:
## item
## LR(1) items:
item_list -> item . [ LSEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production item_list -> item

State 575:
## Known stack suffix:
## item option(LSEMICOLON)
## LR(1) items:
sgrep_spatch_pattern -> item option(LSEMICOLON) . EOF [ # ]
## Transitions:
-- On EOF shift to state 576
## Reductions:

State 576:
## Known stack suffix:
## item option(LSEMICOLON) EOF
## LR(1) items:
sgrep_spatch_pattern -> item option(LSEMICOLON) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> item option(LSEMICOLON) EOF

