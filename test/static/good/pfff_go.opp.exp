File "pfff_go.mly", line 156, characters 34-42:
Warning: the token TComment is unused.
File "pfff_go.mly", line 156, characters 43-58:
Warning: the token TCommentNewline is unused.
File "pfff_go.mly", line 156, characters 20-33:
Warning: the token TCommentSpace is unused.
File "pfff_go.mly", line 149, characters 20-28:
Warning: the token TUnknown is unused.
%{
(* // Copyright 2009 The Go Authors. All rights reserved.
 * // Use of this source code is governed by a BSD-style
 * // license that can be found in the LICENSE file.
 *
 * // Go language grammar.
 * //
 * // The Go semicolon rules are:
 * //
 * //  1. all statements and declarations are terminated by semicolons.
 * //  2. semicolons can be omitted before a closing ) or }.
 * //  3. semicolons are inserted by the lexer before a newline
 * //      following a specific list of tokens.
 * //
 * // Rules #1 and #2 are accomplished by writing the lists as
 * // semicolon-separated lists with an optional trailing semicolon.
 * // Rule #3 is implemented in yylex.
 *
 * src: this is mostly an ocamlyacc port of the Go yacc grammar in
 *  src/cmd/compile/internal/gc/go.y in commit
 *  b5fe07710f4a31bfc100fbc2e344be11e4b4d3fc^ in the golang source code
 *  at https://github.com/golang/go
 *)
open Common
open AST_generic_ (* for the arithmetic operator *)
open Ast_go
module PI = Parse_info

(*****************************************************************************)
(* Helpers *)
(*****************************************************************************)

let error tok s =
  raise (Parse_info.Other_error (s, tok))

let rev = true

let mk_bin e1 op tok e2 =
  Binary (e1, (op, tok), e2)
let mk_unary op tok e =
  Unary ((op, tok), e)
let mk_arg x =
  match x with
  | Left e -> Arg e
  | Right t -> ArgType t

let condition_of_stmt tok stmt =
  match stmt with
  | ExprStmt e -> e
  | _ -> error tok "condition is not an expression"

let mk_else elseifs else_ =
  let elseifs = List.rev elseifs in
  List.fold_right (fun elseif accu ->
      let ((tok, stopt, cond), body) = elseif in
      Some (If (tok, stopt, cond, body, accu))
  ) elseifs else_

let rec expr_to_type tok e =
  match e with
  | Id (id) -> TName [id]
  | Deref (t, e) -> TPtr (t, expr_to_type tok e)
  | Selector (Id (id1), _, id2) -> TName [id1;id2]
  | ParenType t -> t
  | _ -> error tok ("TODO: expr_to_type: " ^ Common.dump e)

let expr_or_type_to_type tok x =
  match x with
  | Right t -> t
  | Left e -> expr_to_type tok e

(* some casts such as ( *byte)(foo) are actually parsed as
 * Calls with a ParenType. We need to convert back those in
 * Cast.
 *)
let mk_call_or_cast (e, args) =
  match e, args with
  | ParenType t, (_, [Arg e], _) -> Cast (t, e)
  | _ -> Call (e, args)

let type_to_id x =
  match x with
  | TName [id] -> id
  | _ -> failwith ("type_to_id: was expecting an id" ^ Common.dump x)

(* see golang spec on signatures. If you have
 * func foo(a, b, c) then it means a, b, and c are types. If you have once
 * an identifier and a type, as in
 * func foo(a, b, c, d e) this means a, b, c, and d are of type e.
 *)
let adjust_signatures params =
  let params = List.rev params in
  let all_types =
   params |> List.for_all (function ParamClassic {pname = None; _} -> true | _ ->false) in
  if all_types
  then params
  else
    let rec aux acc xs =
      match xs with
      | [] -> if acc = []
              then []
              else begin
                failwith ("last parameter should have a type and id" ^
                    Common.dump acc)
              end
      | x::xs ->
        (match x with
          | ParamClassic { pname = Some _; ptype = t; _ } ->
             ((acc |> List.rev |> List.map (fun id ->
               ParamClassic { pname = Some id; ptype = t; pdots = None })) @
               [x]) @
               aux [] xs
          | ParamClassic { pname = None; ptype = id_typ; _ } ->
            let id = type_to_id id_typ in
            aux (id::acc) xs
          | ParamEllipsis t -> (ParamEllipsis t):: aux [] xs
        )
    in
    aux [] params

(* bugfix: the parser used to add some extra Empty at the end of some Block
 * because of the way Go handles semicolons (see tests/go/misc_empty.go).
 * Indeed stmt_list accept ';' as a separator (and with ASI it can even
 * be ommitted), but to allow also ';' as a terminator, the grammar
 * allow empty stmt. This does not interact well with sgrep because
 * a pattern like 'foo(); bar();' will implicitely have an Empty
 * at the end which will prevent it to match many things. This is why
 * we remove those implicitely added Empty.
 *)
let rev_and_fix_stmts xs =
  List.rev (
    match xs with
    | Empty::xs -> xs
    | _ -> xs
  )

let rev_and_fix_items xs =
  List.rev (
    match xs with
    | IStmt Empty::xs -> xs
    | _ -> xs
  )

%}
%start file
%start sgrep_spatch_pattern
%token <Ast_go.tok> EOF
%token <Ast_go.tok> LAND
%token <Ast_go.tok> LANDAND
%token <Ast_go.tok> LANDNOT
%token <AST_generic_.operator * Ast_go.tok> LASOP
%token <Ast_go.tok> LBANG
%token <Ast_go.tok> LBODY
%token <Ast_go.tok> LBRACE
%token <Ast_go.tok> LBRACE_SEMGREP
%token <Ast_go.tok> LBRACKET
%token <Ast_go.tok> LBREAK
%token <Ast_go.tok> LCASE
%token <Ast_go.tok> LCHAN
%token <Ast_go.tok> LCOLAS
%token <Ast_go.tok> LCOLON
%token <Ast_go.tok> LCOLON_SEMGREP
%token <Ast_go.tok> LCOMM
%token <Ast_go.tok> LCOMMA
%token <Ast_go.tok> LCONST
%token <Ast_go.tok> LCONTINUE
%token <Ast_go.tok> LDDD
%token <Ast_go.tok> LDEC
%token <Ast_go.tok> LDEFAULT
%token <Ast_go.tok> LDEFER
%token <Ast_go.tok> LDIV
%token <Ast_go.tok> LDOT
%token <Ast_go.tok> LDots
%token <Ast_go.tok> LELSE
%token <Ast_go.tok> LEQ
%token <Ast_go.tok> LEQEQ
%token <Ast_go.tok> LFALL
%token <float option * Ast_go.tok> LFLOAT
%token <Ast_go.tok> LFOR
%token <Ast_go.tok> LFUNC
%token <Ast_go.tok> LGE
%token <Ast_go.tok> LGO
%token <Ast_go.tok> LGOTO
%token <Ast_go.tok> LGT
%token <Ast_go.tok> LHAT
%token <Ast_go.tok> LIF
%token <string * Ast_go.tok> LIMAG
%token <Ast_go.tok> LIMPORT
%token <Ast_go.tok> LINC
%token <int option * Ast_go.tok> LINT
%token <Ast_go.tok> LINTERFACE
%token <Ast_go.tok> LLE
%token <Ast_go.tok> LLSH
%token <Ast_go.tok> LLT
%token <Ast_go.tok> LMAP
%token <Ast_go.tok> LMINUS
%token <Ast_go.tok> LMULT
%token <string * Ast_go.tok> LNAME
%token <Ast_go.tok> LNE
%token <Ast_go.tok> LOROR
%token <Ast_go.tok> LPACKAGE
%token <Ast_go.tok> LPAREN
%token <Ast_go.tok> LPERCENT
%token <Ast_go.tok> LPIPE
%token <Ast_go.tok> LPLUS
%token <Ast_go.tok> LRANGE
%token <Ast_go.tok> LRETURN
%token <Ast_go.tok> LRSH
%token <string * Ast_go.tok> LRUNE
%token <Ast_go.tok> LSELECT
%token <Ast_go.tok> LSEMICOLON
%token <string * Ast_go.tok> LSTR
%token <Ast_go.tok> LSTRUCT
%token <Ast_go.tok> LSWITCH
%token <Ast_go.tok> LTYPE
%token <Ast_go.tok> LVAR
%token <Ast_go.tok> RBRACE
%token <Ast_go.tok> RBRACKET
%token <Ast_go.tok> RDots
%token <Ast_go.tok> RPAREN
%token <Ast_go.tok> TComment
%token <Ast_go.tok> TCommentNewline
%token <Ast_go.tok> TCommentSpace
%token <Ast_go.tok> TUnknown
%left LCOMM
%left LOROR
%left LANDAND
%left LEQEQ LGE LGT LLE LLT LNE
%left LHAT LMINUS LPIPE LPLUS
%left LAND LANDNOT LDIV LLSH LMULT LPERCENT LRSH
%left NotParen
%left LPAREN
%type <Ast_go.program> file
%type <Ast_go.any> sgrep_spatch_pattern
%%

option_LCOMMA_:
  
    {    ( None )} [@name none_LCOMMA]
| x = LCOMMA
    {    ( Some x )} [@name some_LCOMMA]

option_LSEMICOLON_:
  
    {    ( None )} [@name none_LSEMICOLON]
| x = LSEMICOLON
    {    ( Some x )} [@name some_LSEMICOLON]

option_LSTR_:
  
    {    ( None )} [@name none_LSTR]
| x = LSTR
    {    ( Some x )} [@name some_LSTR]

option_expr_:
  
    {    ( None )} [@name none_expr]
| x = expr
    {    ( Some x )} [@name some_expr]

option_new_name_:
  
    {    ( None )} [@name none_new_name]
| _1 = sym
    {let x =               ( _1 ) in
    ( Some x )} [@name some_new_name]

option_simple_stmt_:
  
    {    ( None )} [@name none_simple_stmt]
| x = simple_stmt
    {    ( Some x )} [@name some_simple_stmt]

list_sep_dcl_name_LCOMMA_:
  _1 = sym
    {let _1 =               ( _1 ) in
                          ( [_1] )}
| _1 = list_sep_dcl_name_LCOMMA_ _2 = LCOMMA _1_inlined1 = sym
    {let _3 =
  let _1 = _1_inlined1 in
                ( _1 )
in
                          ( _3 :: _1  )}

list_sep_expr_LCOMMA_:
  _1 = expr
    {                          ( [_1] )}
| _1 = list_sep_expr_LCOMMA_ _2 = LCOMMA _3 = expr
    {                          ( _3 :: _1  )}

list_sep_expr_or_type_LCOMMA_:
  _1 = expr_or_type
    {                          ( [_1] )}
| _1 = list_sep_expr_or_type_LCOMMA_ _2 = LCOMMA _3 = expr_or_type
    {                          ( _3 :: _1  )}

list_sep_new_name_LCOMMA_:
  _1 = sym
    {let _1 =               ( _1 ) in
                          ( [_1] )}
| _1 = list_sep_new_name_LCOMMA_ _2 = LCOMMA _1_inlined1 = sym
    {let _3 =
  let _1 = _1_inlined1 in
                ( _1 )
in
                          ( _3 :: _1  )}

list_sep_stmt_LSEMICOLON_:
  _1 = stmt
    {                          ( [_1] )}
| _1 = list_sep_stmt_LSEMICOLON_ _2 = LSEMICOLON _3 = stmt
    {                          ( _3 :: _1  )}

listsc_stmt_:
  _1 = list_sep_stmt_LSEMICOLON_
    {                            ( _1 )}

listc_dcl_name_:
  _1 = list_sep_dcl_name_LCOMMA_
    {                           ( _1 )}

listc_expr_:
  _1 = list_sep_expr_LCOMMA_
    {                           ( _1 )}

listc_expr_or_type_:
  _1 = list_sep_expr_or_type_LCOMMA_
    {                           ( _1 )}

listc_new_name_:
  _1 = list_sep_new_name_LCOMMA_
    {                           ( _1 )}

list_sep_term_import_stmt_LSEMICOLON_:
  _1 = import_stmt
    {                           ( [_1] )}
| _1 = import_stmt _2 = LSEMICOLON
    {                           ( [_1] )}
| _1 = import_stmt _2 = LSEMICOLON _3 = list_sep_term_import_stmt_LSEMICOLON_
    {                               ( _1 :: _3 )}

list_sep_term_interfacedcl_LSEMICOLON_:
  _1 = interfacedcl
    {                           ( [_1] )}
| _1 = interfacedcl _2 = LSEMICOLON
    {                           ( [_1] )}
| _1 = interfacedcl _2 = LSEMICOLON _3 = list_sep_term_interfacedcl_LSEMICOLON_
    {                               ( _1 :: _3 )}

list_sep_term_structdcl_LSEMICOLON_:
  _1 = structdcl
    {                           ( [_1] )}
| _1 = structdcl _2 = LSEMICOLON
    {                           ( [_1] )}
| _1 = structdcl _2 = LSEMICOLON _3 = list_sep_term_structdcl_LSEMICOLON_
    {                               ( _1 :: _3 )}

list_sep_term_typedcl_LSEMICOLON_:
  _1 = typedcl
    {                           ( [_1] )}
| _1 = typedcl _2 = LSEMICOLON
    {                           ( [_1] )}
| _1 = typedcl _2 = LSEMICOLON _3 = list_sep_term_typedcl_LSEMICOLON_
    {                               ( _1 :: _3 )}

list_sep_term_vardcl_LSEMICOLON_:
  _1 = vardcl
    {                           ( [_1] )}
| _1 = vardcl _2 = LSEMICOLON
    {                           ( [_1] )}
| _1 = vardcl _2 = LSEMICOLON _3 = list_sep_term_vardcl_LSEMICOLON_
    {                               ( _1 :: _3 )}

listsc_t_import_stmt_:
  _1 = list_sep_term_import_stmt_LSEMICOLON_
    {                                   ( _1 )}

listsc_t_interfacedcl_:
  _1 = list_sep_term_interfacedcl_LSEMICOLON_
    {                                   ( _1 )}

listsc_t_structdcl_:
  _1 = list_sep_term_structdcl_LSEMICOLON_
    {                                   ( _1 )}

listsc_t_typedcl_:
  _1 = list_sep_term_typedcl_LSEMICOLON_
    {                                   ( _1 )}

listsc_t_vardcl_:
  _1 = list_sep_term_vardcl_LSEMICOLON_
    {                                   ( _1 )}

file:
  _1 = package _2 = LSEMICOLON _3 = imports _4 = xdcl_list _5 = EOF
    {  ( (_1)::(_3 |> List.map (fun x -> Import x)) @ (List.rev _4) )}

package:
  _1 = LPACKAGE _2 = sym
    {                      ( Package (_1, _2) )}

sgrep_spatch_pattern:
  _1 = item _2 = option_LSEMICOLON_ _3 = EOF
    {                  (
    match _1 with
    | [IStmt (SimpleStmt (ExprStmt x))] -> E x
    | [ITop top_decl] ->
        (match top_decl with
        (* the user probably wanted a Partial here. xfndcl allows
         * empty functions/methods, but I doubt people want explicitely
         * to match that => better to return a Partial
         *)
        | DFunc (_, _, (_, Empty)) | DMethod (_, _, _, (_, Empty))
           -> Partial (PartialDecl top_decl)
        | _ -> item1 _1
        )
    | _ -> item1 _1
    )}
| _1 = item _2 = LSEMICOLON _3 = item _4 = LSEMICOLON _5 = item_list _6 = EOF
    {    ( Items (_1 @ _3 @ rev_and_fix_items _5) )}
| _1 = partial _2 = EOF
    {               ( Partial _1 )}

partial:
  _1 = LBRACE_SEMGREP _2 = braced_keyval_list _3 = RBRACE _4 = option_LSEMICOLON_
    {     ( PartialInitBraces (_1, _2, _3) )}
| _1 = LNAME _2 = LCOLON_SEMGREP _3 = complitexpr _4 = option_LSEMICOLON_
    {     ( PartialSingleField (_1, _2, _3) )}

item:
  _1 = stmt
    {          ( [IStmt _1] )}
| _1 = import
    {          ( _1 |> List.map (fun x -> IImport x) )}
| _1 = package
    {           ( [ITop _1] )}
| _1 = xfndcl
    {          ( [ITop _1] )}

item_list:
  _1 = item
    {         ( _1 )}
| _1 = item_list _2 = LSEMICOLON _3 = item
    {                       ( _3 @ _1 )}

import:
  _1 = LIMPORT _2 = import_stmt
    {      ( [_2 _1] )}
| _1 = LIMPORT _2 = LPAREN _3 = listsc_t_import_stmt_ _4 = RPAREN
    {      (List.map (fun f -> f _1) _3 )}
| _1 = LIMPORT _2 = LPAREN _3 = RPAREN
    {                    ( [] )}

import_stmt:
  _1 = LSTR
    {    ( fun i_tok -> { i_tok; i_path = _1; i_kind = ImportOrig }
      (*// import with original name*) )}
| _1 = sym _2 = LSTR
    {    ( fun i_tok -> { i_tok; i_path = _2; i_kind = ImportNamed _1 }
      (*// import with given name*)  )}
| _1 = LDOT _2 = LSTR
    {    ( fun i_tok -> { i_tok; i_path = _2; i_kind = ImportDot _1 }
      (*// import into my name space *) )}

xdcl:
  _1 = common_dcl
    {               ( _1 |> List.map (fun decl -> DTop decl) )}
| _1 = xfndcl
    {               ( [_1] )}

common_dcl:
  _1 = LVAR _2 = vardcl
    {                                  ( _2 )}
| _1 = LVAR _2 = LPAREN _3 = listsc_t_vardcl_ _4 = RPAREN
    {                                  ( List.flatten _3 )}
| _1 = LVAR _2 = LPAREN _3 = RPAREN
    {                                  ( [] )}
| _1 = LCONST _2 = constdcl
    {                    ( _2 )}
| _1 = LCONST _2 = LPAREN _3 = constdcl _4 = option_LSEMICOLON_ _5 = RPAREN
    {                                 ( _3 )}
| _1 = LCONST _2 = LPAREN _3 = constdcl _4 = LSEMICOLON _5 = constdcl1_list _6 = option_LSEMICOLON_ _7 = RPAREN
    {                                                      ( _3 @ (List.rev _5) )}
| _1 = LCONST _2 = LPAREN _3 = RPAREN
    {                   ( [] )}
| _1 = LTYPE _2 = typedcl
    {                                    ( [_2] )}
| _1 = LTYPE _2 = LPAREN _3 = listsc_t_typedcl_ _4 = RPAREN
    {                                    ( _3 )}
| _1 = LTYPE _2 = LPAREN _3 = RPAREN
    {                                    ( [] )}

vardcl:
  _1 = listc_dcl_name_ _2 = ntype
    {                                        ( mk_vars _1 (Some _2) None )}
| _1 = listc_dcl_name_ _2 = ntype _3 = LEQ _4 = listc_expr_
    {                                          ( mk_vars _1 (Some _2) (Some _4) )}
| _1 = listc_dcl_name_ _2 = LEQ _3 = listc_expr_
    {                                          ( mk_vars _1 None      (Some _3) )}

constdcl:
  _1 = listc_dcl_name_ _2 = ntype _3 = LEQ _4 = listc_expr_
    {                                          ( mk_consts ~rev _1 (Some _2) (Some _4)  )}
| _1 = listc_dcl_name_ _2 = LEQ _3 = listc_expr_
    {                                          ( mk_consts ~rev _1 None (Some _3) )}

constdcl1:
  _1 = constdcl
    {                        ( _1 )}
| _1 = listc_dcl_name_ _2 = ntype
    {                          ( mk_consts ~rev _1 (Some _2) None )}
| _1 = listc_dcl_name_
    {                          ( mk_consts ~rev _1 None None )}

typedcl:
  _1 = sym _2 = ntype
    {let _1 =     ( _1
        (*
        // different from dclname because the name
        // becomes visible right here, not at the end
        // of the declaration.
        *)
    ) in
                        ( DTypeDef (_1, _2) )}
| _1 = sym _2 = LEQ _3 = ntype
    {let _1 =     ( _1
        (*
        // different from dclname because the name
        // becomes visible right here, not at the end
        // of the declaration.
        *)
    ) in
                        ( DTypeAlias (_1, _2, _3) )}

stmt:
  
    {              ( Empty )}
| _1 = compound_stmt
    {                  ( _1 )}
| _1 = common_dcl
    {                  ( DeclStmts _1 )}
| _1 = non_dcl_stmt
    {                  ( _1 )}

compound_stmt:
  _1 = LBRACE _2 = listsc_stmt_ _3 = RBRACE
    {  ( Block (_1, rev_and_fix_stmts _2, _3) )}

non_dcl_stmt:
  _1 = simple_stmt
    {                ( SimpleStmt _1 )}
| _1 = if_stmt
    {            ( _1 )}
| _1 = for_stmt
    {             ( _1 )}
| _1 = switch_stmt
    {                ( _1 )}
| _1 = select_stmt
    {                ( _1 )}
| _1 = sym _2 = LCOLON _3 = stmt
    {let _1 =
  let _1 =               ( _1 ) in
                      ( _1 )
in
                          ( Label (_1, _3) )}
| _1 = LGOTO _1_inlined1 = sym
    {let _2 =
  let _1 = _1_inlined1 in
                ( _1 )
in
                          ( Goto (_1, _2) )}
| _1 = LBREAK _2 = option_new_name_
    {                        ( Break (_1, _2) )}
| _1 = LCONTINUE _2 = option_new_name_
    {                        ( Continue (_1, _2) )}
| _1 = LRETURN _2 = oexpr_list
    {                        ( Return (_1, _2) )}
| _1 = LFALL
    {          ( Fallthrough _1 )}
| _1 = LGO _2 = pseudocall
    {                      ( Go (_1, _2) )}
| _1 = LDEFER _2 = pseudocall
    {                      ( Defer (_1, _2) )}

simple_stmt:
  _1 = expr
    {                               ( ExprStmt _1 )}
| _1 = expr _2 = LASOP _3 = expr
    {                               ( AssignOp (_1, _2, _3) )}
| _1 = listc_expr_ _2 = LEQ _3 = listc_expr_
    {                                   ( Assign (List.rev _1, _2, List.rev _3)  )}
| _1 = listc_expr_ _2 = LCOLAS _3 = listc_expr_
    {                                 ( DShortVars (List.rev _1, _2, List.rev _3) )}
| _1 = expr _2 = LINC
    {                               ( IncDec (_1, (Incr, _2), Postfix) )}
| _1 = expr _2 = LDEC
    {                               ( IncDec (_1, (Decr, _2), Postfix) )}

if_stmt:
  _1 = LIF _2 = if_header _3 = loop_body _4 = elseif_list _5 = else_
    {    ( match _2 with
      | stopt, Some st ->
        If (_1, stopt, condition_of_stmt _1 st, _3, mk_else _4 _5)
      | _, None ->
        error _1 "missing condition in if statement"
    )}

if_header:
  _1 = option_simple_stmt_
    {                 ( (None, _1) )}
| _1 = option_simple_stmt_ _2 = LSEMICOLON _3 = option_simple_stmt_
    {                                  ( (_1, _3) )}

elseif:
  _1 = LELSE _2 = LIF _3 = if_header _4 = loop_body
    {    ( match _3 with
      | stopt, Some st ->
        (_2, stopt, condition_of_stmt _2 st), _4
      | _, None ->
        error _2 "missing condition in if statement"
    )}

else_:
  
    {                    ( None )}
| _1 = LELSE _2 = compound_stmt
    {                        ( Some _2 )}

for_stmt:
  _1 = LFOR _2 = option_simple_stmt_ _3 = LSEMICOLON _4 = option_simple_stmt_ _5 = LSEMICOLON _6 = option_simple_stmt_ _7 = loop_body
    {    ( For (_1, ForClassic (_2, Common.map_opt (condition_of_stmt _1) _4, _6), _7) )}
| _1 = LFOR _2 = simple_stmt _3 = loop_body
    {    ( let cond = condition_of_stmt _1 _2 in
      let for_header =
        match cond with
        (* sgrep-ext: *)
        | Ellipsis t -> ForEllipsis t
        (* general case *)
        | _ -> ForClassic (None, Some cond, None)
      in
      For (_1, for_header, _3)
    )}
| _1 = LFOR _2 = loop_body
    {    ( For (_1, ForClassic (None, None, None), _2) )}
| _1 = LFOR _2 = listc_expr_ _3 = LEQ _4 = LRANGE _5 = expr _6 = loop_body
    {    ( For (_1, ForRange (Some (List.rev _2, _3), _4, _5), _6)  )}
| _1 = LFOR _2 = listc_expr_ _3 = LCOLAS _4 = LRANGE _5 = expr _6 = loop_body
    {    ( For (_1, ForRange (Some (List.rev _2, _3), _4, _5), _6) )}
| _1 = LFOR _2 = LRANGE _3 = expr _4 = loop_body
    {    ( For (_1, ForRange (None, _2, _3), _4) )}

loop_body:
  _1 = LBODY _2 = listsc_stmt_ _3 = RBRACE
    {                                  ( Block (_1, rev_and_fix_stmts _2, _3) )}

switch_stmt:
  _1 = LSWITCH _2 = if_header _3 = LBODY _4 = caseblock_list _5 = RBRACE
    {    ( let stopt1, stopt2 = _2 in
      Switch (_1, stopt1, stopt2 ,List.rev _4)
    )}

select_stmt:
  _1 = LSELECT _2 = LBODY _3 = caseblock_list _4 = RBRACE
    {    ( Select (_1, List.rev _3) )}

case:
  _1 = LCASE _2 = listc_expr_or_type_ _3 = LCOLON
    {                                            ( CaseExprs (_1, _2) )}
| _1 = LCASE _2 = listc_expr_or_type_ _3 = LEQ _4 = expr _5 = LCOLON
    {                                            ( CaseAssign (_1, _2, _3, _4) )}
| _1 = LCASE _2 = listc_expr_or_type_ _3 = LCOLAS _4 = expr _5 = LCOLON
    {                                            ( CaseAssign (_1, _2, _3, _4) )}
| _1 = LDEFAULT _2 = LCOLON
    {                                            ( CaseDefault _1 )}

caseblock_list:
  
    {             ( [] )}
| _1 = caseblock_list _2 = caseblock
    {                           ( _2::_1 )}

caseblock:
  _1 = case _2 = listsc_stmt_
    {    (
      CaseClause (_1, stmt1 (rev_and_fix_stmts _2))
      (*
        // If the last token read by the lexer was consumed
        // as part of the case, clear it (parser has cleared yychar).
        // If the last token read by the lexer was the lookahead
        // leave it alone (parser has it cached in yychar).
        // This is so that the stmt_list action doesn't look at
        // the case tokens if the stmt_list is empty.
        yylast = yychar;
        $1.Xoffset = int64(block);

        // This is the only place in the language where a statement
        // list is not allowed to drop the final semicolon, because
        // it's the only place where a statement list is not followed
        // by a closing brace.  Handle the error for pedantry.

        // Find the final token of the statement list.
        // yylast is lookahead; yyprev is last of stmt_list
        last := yyprev;

        if last > 0 && last != ';' && yychar != '}' {
            Yyerror("missing statement after label");
        }
        $$ = $1;
        $$.Nbody = $3;
        popdcl();
      *)
    )}
| _1 = LCASE _2 = LDDD _3 = option_LSEMICOLON_
    {                   ( CaseEllipsis (_1, _2) )}

expr:
  _1 = uexpr
    {                       ( _1 )}
| _1 = expr _2 = LOROR _3 = expr
    {                       ( mk_bin _1 Or _2 _3 )}
| _1 = expr _2 = LANDAND _3 = expr
    {                       ( mk_bin _1 And _2 _3 )}
| _1 = expr _2 = LEQEQ _3 = expr
    {                       ( mk_bin _1 Eq _2 _3 )}
| _1 = expr _2 = LNE _3 = expr
    {                       ( mk_bin _1 NotEq _2 _3 )}
| _1 = expr _2 = LLT _3 = expr
    {                       ( mk_bin _1 Lt _2 _3 )}
| _1 = expr _2 = LLE _3 = expr
    {                       ( mk_bin _1 LtE _2 _3 )}
| _1 = expr _2 = LGE _3 = expr
    {                       ( mk_bin _1 GtE _2 _3 )}
| _1 = expr _2 = LGT _3 = expr
    {                       ( mk_bin _1 Gt _2 _3 )}
| _1 = expr _2 = LPLUS _3 = expr
    {                       ( mk_bin _1 Plus _2 _3 )}
| _1 = expr _2 = LMINUS _3 = expr
    {                       ( mk_bin _1 Minus _2 _3 )}
| _1 = expr _2 = LPIPE _3 = expr
    {                       ( mk_bin _1 BitOr _2 _3 )}
| _1 = expr _2 = LHAT _3 = expr
    {                       ( mk_bin _1 BitXor _2 _3 )}
| _1 = expr _2 = LMULT _3 = expr
    {                     ( mk_bin _1 Mult _2 _3 )}
| _1 = expr _2 = LDIV _3 = expr
    {                       ( mk_bin _1 Div _2 _3 )}
| _1 = expr _2 = LPERCENT _3 = expr
    {                       ( mk_bin _1 Mod _2 _3 )}
| _1 = expr _2 = LAND _3 = expr
    {                       ( mk_bin _1 BitAnd _2 _3 )}
| _1 = expr _2 = LANDNOT _3 = expr
    {                       ( mk_bin _1 BitNot (* BitAndNot aka BitClear *) _2 _3 )}
| _1 = expr _2 = LLSH _3 = expr
    {                       ( mk_bin _1 LSL _2 _3 )}
| _1 = expr _2 = LRSH _3 = expr
    {                       ( mk_bin _1 LSR _2 _3 )}
| _1 = expr _2 = LCOMM _3 = expr
    {                      ( Send (_1, _2, _3) )}
| _1 = LDDD
    {         ( Flag_parsing.sgrep_guard (Ellipsis _1) )}
| _1 = LDots _2 = expr _3 = RDots
    {                      ( Flag_parsing.sgrep_guard (DeepEllipsis (_1, _2, _3)) )}

uexpr:
  _1 = pexpr
    {          ( _1 )}
| _1 = LMULT _2 = uexpr
    {              ( Deref (_1, _2))}
| _1 = LAND _2 = uexpr
    {    (
           (* // Special case for &T{...}: turn into ( *T){...}. *)
      Ref (_1, _2)
    )}
| _1 = LPLUS _2 = uexpr
    {                 ( mk_unary Plus _1 _2 )}
| _1 = LMINUS _2 = uexpr
    {                 ( mk_unary Minus _1 _2 )}
| _1 = LBANG _2 = uexpr
    {                 ( mk_unary Not _1 _2 )}
| _1 = LHAT _2 = uexpr
    {               ( mk_unary BitXor _1 _2  )}
| _1 = LCOMM _2 = uexpr
    {               ( Receive (_1, _2) )}

pexpr:
  _1 = pexpr_no_paren
    {                   ( _1 )}
| _1 = LPAREN _2 = expr_or_type _3 = RPAREN
    {    ( match _2 with
      | Left e -> e
      | Right t -> ParenType t
    )}

pexpr_no_paren:
  _1 = basic_literal
    {                  ( BasicLit _1 )}
| _1 = name
    {         ( Id (_1) )}
| _1 = LPAREN _2 = name _3 = LCOLON _4 = ntype _5 = RPAREN
    {                           ( TypedMetavar(_2, _3, _4) )}
| _1 = pexpr _2 = LDOT _3 = sym
    {                  ( Selector (_1, _2, _3) )}
| _1 = pexpr _2 = LDOT _3 = LPAREN _4 = expr_or_type _5 = RPAREN
    {    ( TypeAssert (_1, (_3, expr_or_type_to_type _2 _4, _5)) )}
| _1 = pexpr _2 = LDOT _3 = LPAREN _4 = LTYPE _5 = RPAREN
    {    ( TypeSwitchExpr (_1, _3) )}
| _1 = pexpr _2 = LBRACKET _3 = expr _4 = RBRACKET
    {                       ( Index (_1, (_2, _3, _4)) )}
| _1 = pexpr _2 = LBRACKET _3 = option_expr_ _4 = LCOLON _5 = option_expr_ _6 = RBRACKET
    {                                  ( Slice (_1, (_2, (_3, _5, None), _6)) )}
| _1 = pexpr _2 = LBRACKET _3 = option_expr_ _4 = LCOLON _5 = option_expr_ _6 = LCOLON _7 = option_expr_ _8 = RBRACKET
    {    ( Slice (_1, (_2, (_3, _5, _7), _6))
        (*if $5 == nil {
            Yyerror("middle index required in 3-index slice");
        }
        if $7 == nil {
            Yyerror("final index required in 3-index slice");
        }
        *)
    )}
| _1 = pseudocall
    {               ( mk_call_or_cast _1 )}
| _1 = convtype _2 = LPAREN _3 = expr _4 = option_LCOMMA_ _5 = RPAREN
    {                               ( Cast (_1, _3) )}
| _1 = comptype _2 = lbrace _3 = braced_keyval_list _4 = RBRACE
    {    ( CompositeLit (_1, (_2, _3, _4)) )}
| _1 = pexpr_no_paren _2 = LBRACE _3 = braced_keyval_list _4 = RBRACE
    {    ( CompositeLit (expr_to_type _2 _1, (_2, _3, _4)) )}
| _1 = fnliteral
    {              ( _1 )}

basic_literal:
  _1 = LINT
    {         ( Int _1 )}
| _1 = LFLOAT
    {         ( Float _1 )}
| _1 = LIMAG
    {         ( Imag _1 )}
| _1 = LRUNE
    {         ( Rune _1 )}
| _1 = LSTR
    {         ( String _1 )}

pseudocall:
  _1 = pexpr _2 = LPAREN _3 = RPAREN
    {      ( (_1, (_2,[],_3)) )}
| _1 = pexpr _2 = LPAREN _3 = arguments _4 = option_LCOMMA_ _5 = RPAREN
    {      ( (_1, (_2, _3 |> List.rev |> List.map mk_arg, _5)) )}
| _1 = pexpr _2 = LPAREN _3 = arguments _4 = LDDD _5 = option_LCOMMA_ _6 = RPAREN
    {      ( let args =
          match _3 |> List.map mk_arg with
          | [] -> raise Impossible
          | (Arg e)::xs -> List.rev ((ArgDots (e, _4))::xs)
          | (ArgDots _)::_ -> raise Impossible
          | (ArgType _t)::_ -> raise Impossible
         in
         _1, (_2, args, _6)
      )}

arguments:
  _1 = argument
    {            ( [_1] )}
| _1 = arguments _2 = LCOMMA _3 = argument
    {                          ( _3 :: _1 )}

argument:
  _1 = expr_or_type
    {                       ( _1 )}

braced_keyval_list:
  
    {                   ( [] )}
| _1 = keyval_list _2 = option_LCOMMA_
    {                     ( List.rev _1 )}

keyval_list:
  _1 = keyval
    {                                        ( [_1] )}
| _1 = bare_complitexpr
    {                                        ( [_1] )}
| _1 = keyval_list _2 = LCOMMA _3 = keyval
    {                                     ( _3 :: _1 )}
| _1 = keyval_list _2 = LCOMMA _3 = bare_complitexpr
    {                                     ( _3 :: _1 )}

keyval:
  _1 = complitexpr _2 = LCOLON _3 = complitexpr
    {                                    ( InitKeyValue (_1, _2, _3) )}

complitexpr:
  _1 = expr
    {         ( InitExpr _1 )}
| _1 = LBRACE _2 = braced_keyval_list _3 = RBRACE
    {                               ( InitBraces (_1, _2, _3) )}

bare_complitexpr:
  _1 = expr
    {         ( InitExpr _1 )}
| _1 = LBRACE _2 = braced_keyval_list _3 = RBRACE
    {                               ( InitBraces (_1, _2, _3) )}

lbrace:
  _1 = LBODY
    {          ( _1 )}
| _1 = LBRACE
    {        ( _1 )}

sym:
  _1 = LNAME
    {    (
        (*// during imports, unqualified non-exported identifiers are from builtinpkg
        if importpkg != nil && !exportname($1.Name) {
            $$ = Pkglookup($1.Name, builtinpkg);
        }
        *)
      _1
    )}

name:
  _1 = sym %prec NotParen
    {                         ( _1 )}

dotname:
  _1 = name
    {         ( [_1] )}
| _1 = name _2 = LDOT _3 = sym
    {                 ( [_1; _3] )}

packname:
  _1 = LNAME
    {          ( [_1] )}
| _1 = LNAME _2 = LDOT _3 = sym
    {                  ( [_1; _3] )}

ntype:
  _1 = dotname
    {                 ( TName _1 )}
| _1 = ptrtype
    {                 ( _1 )}
| _1 = recvchantype
    {                 ( _1 )}
| _1 = fntype
    {                 ( TFunc _1 )}
| _1 = othertype
    {                        ( _1 )}
| _1 = LPAREN _2 = ntype _3 = RPAREN
    {                  ( _2 )}

non_recvchantype:
  _1 = dotname
    {            ( TName _1 )}
| _1 = ptrtype
    {            ( _1 )}
| _1 = fntype
    {            ( TFunc _1 )}
| _1 = othertype
    {              ( _1 )}
| _1 = LPAREN _2 = ntype _3 = RPAREN
    {                  ( _2 )}

ptrtype:
  _1 = LMULT _2 = ntype
    {                   ( TPtr (_1, _2) )}

recvchantype:
  _1 = LCOMM _2 = LCHAN _3 = ntype
    {                               ( TChan (_2, TRecv, _3) )}

fntype:
  _1 = LFUNC _2 = LPAREN _3 = oarg_type_list_ocomma _4 = RPAREN _5 = fnres
    {  ( { fparams = _3; fresults = _5 } )}

fnres:
   %prec NotParen
    {                                    ( [] )}
| _1 = fnret_type
    {                 ( [ParamClassic { pname = None; ptype = _1; pdots = None }] )}
| _1 = LPAREN _2 = oarg_type_list_ocomma _3 = RPAREN
    {                                    ( _2 )}

fnret_type:
  _1 = dotname
    {                 ( TName _1 )}
| _1 = ptrtype
    {                 ( _1 )}
| _1 = recvchantype
    {                 ( _1 )}
| _1 = fntype
    {                 ( TFunc _1 )}
| _1 = othertype
    {                 ( _1 )}

othertype:
  _1 = LBRACKET _2 = oexpr_no_dots _3 = RBRACKET _4 = ntype
    {                                ( TArray ((_1, _2, _3), _4) )}
| _1 = LBRACKET _2 = LDDD _3 = RBRACKET _4 = ntype
    {                                ( TArrayEllipsis ((_1, _2, _3), _4) )}
| _1 = LCHAN _2 = non_recvchantype
    {                           ( TChan (_1, TBidirectional, _2) )}
| _1 = LCHAN _2 = LCOMM _3 = ntype
    {                           ( TChan (_1, TSend, _3) )}
| _1 = LMAP _2 = LBRACKET _3 = ntype _4 = RBRACKET _5 = ntype
    {                             ( TMap (_1, (_2, _3, _4), _5) )}
| _1 = structtype
    {                  ( _1 )}
| _1 = interfacetype
    {                  ( _1 )}

oexpr_no_dots:
  
    {           ( None )}
| _1 = expr_no_dots
    {                       ( Some _1 )}

expr_no_dots:
  _1 = uexpr
    {                       ( _1 )}
| _1 = expr _2 = LOROR _3 = expr
    {                       ( mk_bin _1 Or _2 _3 )}
| _1 = expr _2 = LANDAND _3 = expr
    {                       ( mk_bin _1 And _2 _3 )}
| _1 = expr _2 = LEQEQ _3 = expr
    {                       ( mk_bin _1 Eq _2 _3 )}
| _1 = expr _2 = LNE _3 = expr
    {                       ( mk_bin _1 NotEq _2 _3 )}
| _1 = expr _2 = LLT _3 = expr
    {                       ( mk_bin _1 Lt _2 _3 )}
| _1 = expr _2 = LLE _3 = expr
    {                       ( mk_bin _1 LtE _2 _3 )}
| _1 = expr _2 = LGE _3 = expr
    {                       ( mk_bin _1 GtE _2 _3 )}
| _1 = expr _2 = LGT _3 = expr
    {                       ( mk_bin _1 Gt _2 _3 )}
| _1 = expr _2 = LPLUS _3 = expr
    {                       ( mk_bin _1 Plus _2 _3 )}
| _1 = expr _2 = LMINUS _3 = expr
    {                       ( mk_bin _1 Minus _2 _3 )}
| _1 = expr _2 = LPIPE _3 = expr
    {                       ( mk_bin _1 BitOr _2 _3 )}
| _1 = expr _2 = LHAT _3 = expr
    {                       ( mk_bin _1 BitXor _2 _3 )}
| _1 = expr _2 = LMULT _3 = expr
    {                     ( mk_bin _1 Mult _2 _3 )}
| _1 = expr _2 = LDIV _3 = expr
    {                       ( mk_bin _1 Div _2 _3 )}
| _1 = expr _2 = LPERCENT _3 = expr
    {                       ( mk_bin _1 Mod _2 _3 )}
| _1 = expr _2 = LAND _3 = expr
    {                       ( mk_bin _1 BitAnd _2 _3 )}
| _1 = expr _2 = LANDNOT _3 = expr
    {                       ( mk_bin _1 BitNot (* BitAndNot aka BitClear *) _2 _3 )}
| _1 = expr _2 = LLSH _3 = expr
    {                       ( mk_bin _1 LSL _2 _3 )}
| _1 = expr _2 = LRSH _3 = expr
    {                       ( mk_bin _1 LSR _2 _3 )}
| _1 = expr _2 = LCOMM _3 = expr
    {                      ( Send (_1, _2, _3) )}

dotdotdot:
  _1 = LDDD _2 = ntype
    {                ( _1, _2 )}

convtype:
  _1 = fntype
    {              ( TFunc _1 )}
| _1 = othertype
    {              ( _1 )}

comptype:
  _1 = othertype
    {            ( _1 )}

expr_or_type:
  _1 = expr
    {                                             ( Left _1 )}
| _1 = non_expr_type
    {                                                   ( Right _1 )}

non_expr_type:
  _1 = fntype
    {                        ( TFunc _1 )}
| _1 = recvchantype
    {                        ( _1 )}
| _1 = othertype
    {                        ( _1 )}
| _1 = LMULT _2 = non_expr_type
    {                      ( TPtr (_1, _2) )}

structtype:
  _1 = LSTRUCT _2 = lbrace _3 = listsc_t_structdcl_ _4 = RBRACE
    {    ( TStruct (_1, (_2, List.flatten _3, _4)) )}
| _1 = LSTRUCT _2 = lbrace _3 = RBRACE
    {    ( TStruct (_1, (_2, [], _3)) )}

structdcl:
  _1 = listc_new_name_ _2 = ntype _3 = option_LSTR_
    {    ( _1 |> List.map (fun id -> Field (id, _2), _3) )}
| _1 = packname _2 = option_LSTR_
    {                            ( [EmbeddedField (None, _1), _2] )}
| _1 = LMULT _2 = packname _3 = option_LSTR_
    {                            ( [EmbeddedField (Some _1, _2), _3] )}
| _1 = LDDD
    {        ( [FieldEllipsis _1, None] )}

interfacetype:
  _1 = LINTERFACE _2 = lbrace _3 = listsc_t_interfacedcl_ _4 = RBRACE
    {    ( TInterface (_1, (_2, _3, _4)) )}
| _1 = LINTERFACE _2 = lbrace _3 = RBRACE
    {    ( TInterface (_1, (_2, [], _3)) )}

interfacedcl:
  _1 = sym _2 = indcl
    {let _1 =               ( _1 ) in
                   ( Method (_1, _2) )}
| _1 = packname
    {                   ( EmbeddedInterface _1 )}
| _1 = LDDD
    {                   ( FieldEllipsis2 _1 )}

indcl:
  _1 = LPAREN _2 = oarg_type_list_ocomma _3 = RPAREN _4 = fnres
    {   ( { fparams = _2; fresults = _4 } )}

xfndcl:
  _1 = LFUNC _2 = fndcl _3 = fnbody
    {    ( _2 _1 _3 )}

fndcl:
  _1 = sym _2 = LPAREN _3 = oarg_type_list_ocomma _4 = RPAREN _5 = fnres
    {     ( fun tok body -> DFunc (tok, _1, ({ fparams=_3; fresults = _5 }, body)) )}
| _1 = LPAREN _2 = oarg_type_list_ocomma _3 = RPAREN _4 = sym _5 = LPAREN _6 = oarg_type_list_ocomma _7 = RPAREN _8 = fnres
    {     (
      fun tok body ->
        match _2 with
        | [ParamClassic x] ->
            DMethod (tok, _4, x, ({ fparams = _6; fresults = _8 }, body))
        | [] -> error _1 "method has no receiver"
        | [ParamEllipsis _] -> error _1 "method has ... for receiver"
        | _::_::_ -> error _1 "method has multiple receivers"
    )}

fnbody:
  
    {                       ( Empty )}
| _1 = LBRACE _2 = listsc_stmt_ _3 = RBRACE
    {                        ( Block (_1, rev_and_fix_stmts _2, _3) )}

fnliteral:
  _1 = fnlitdcl _2 = lbrace _3 = listsc_stmt_ _4 = RBRACE
    {    ( FuncLit (_1, Block (_2, rev_and_fix_stmts _3, _4)) )}

fnlitdcl:
  _1 = fntype
    {                 ( _1 )}

arg_type:
  _1 = name_or_type
    {                     ( ParamClassic { pname= None; ptype = _1; pdots = None } )}
| _1 = sym _2 = name_or_type
    {                     ( ParamClassic { pname= Some _1; ptype = _2; pdots = None } )}
| _1 = sym _2 = dotdotdot
    {                     ( ParamClassic { pname= Some _1; ptype = snd _2; pdots = Some (fst _2)})}
| _1 = dotdotdot
    {                     ( ParamClassic { pname= None; ptype = snd _1; pdots = Some (fst _1)} )}
| _1 = LDDD
    {         ( Flag_parsing.sgrep_guard (ParamEllipsis _1) )}

name_or_type:
  _1 = ntype
    {                     ( _1 )}

arg_type_list:
  _1 = arg_type
    {                                  ( [_1] )}
| _1 = arg_type_list _2 = LCOMMA _3 = arg_type
    {                               ( _3::_1 )}

oarg_type_list_ocomma:
  
    {            ( [] )}
| _1 = arg_type_list _2 = option_LCOMMA_
    {                       ( adjust_signatures _1  )}

elseif_list:
  
    {                 ( [] )}
| _1 = elseif_list _2 = elseif
    {                     ( _2::_1 )}

xdcl_list:
  
    {               ( [] )}
| _1 = xdcl_list _2 = xdcl _3 = LSEMICOLON
    {                       ( _2 @ _1 )}

imports:
  
    {                     ( [] )}
| _1 = imports _2 = import _3 = LSEMICOLON
    {                     ( _1 @ _2 )}

constdcl1_list:
  _1 = constdcl1
    {              ( _1 )}
| _1 = constdcl1_list _2 = LSEMICOLON _3 = constdcl1
    {                                 ( _3 @ _1 )}

oexpr_list:
  
    {               ( None )}
| _1 = listc_expr_
    {               ( Some (List.rev _1) )}

%%
