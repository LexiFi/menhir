State 0:
## Known stack suffix:
##
## LR(1) items:
json' -> . json [ # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On json shift to state 1085
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 1086
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 1:
## Known stack suffix:
## T_YIELD
## LR(1) items:
assignment_expr -> T_YIELD . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
assignment_expr -> T_YIELD . assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
assignment_expr -> T_YIELD . T_MULT assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MULT shift to state 1082
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 1084
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF
--   reduce production assignment_expr -> T_YIELD

State 2:
## Known stack suffix:
## T_XHP_SHORT_FRAGMENT
## LR(1) items:
xhp_html -> T_XHP_SHORT_FRAGMENT . list(xhp_child) T_XHP_CLOSE_TAG [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_XHP_TEXT shift to state 3
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_LCURLY shift to state 1070
-- On xhp_html shift to state 1075
-- On xhp_child shift to state 1076
-- On list(xhp_child) shift to state 1080
## Reductions:
-- On T_XHP_CLOSE_TAG
--   reduce production list(xhp_child) ->

State 3:
## Known stack suffix:
## T_XHP_TEXT
## LR(1) items:
xhp_child -> T_XHP_TEXT . [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_LCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xhp_child -> T_XHP_TEXT

State 4:
## Known stack suffix:
## T_XHP_OPEN_TAG
## LR(1) items:
xhp_html -> T_XHP_OPEN_TAG . list(xhp_attribute) T_XHP_GT list(xhp_child) T_XHP_CLOSE_TAG [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
xhp_html -> T_XHP_OPEN_TAG . list(xhp_attribute) T_XHP_SLASH_GT [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_XHP_ATTR shift to state 5
-- On T_LCURLY shift to state 1060
-- On T_DOTS shift to state 1064
-- On xhp_attribute shift to state 1065
-- On list(xhp_attribute) shift to state 1067
## Reductions:
-- On T_XHP_SLASH_GT T_XHP_GT
--   reduce production list(xhp_attribute) ->

State 5:
## Known stack suffix:
## T_XHP_ATTR
## LR(1) items:
xhp_attribute -> T_XHP_ATTR . T_ASSIGN xhp_attribute_value [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
xhp_attribute -> T_XHP_ATTR . [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
-- On T_ASSIGN shift to state 6
## Reductions:
-- On T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS
--   reduce production xhp_attribute -> T_XHP_ATTR

State 6:
## Known stack suffix:
## T_XHP_ATTR T_ASSIGN
## LR(1) items:
xhp_attribute -> T_XHP_ATTR T_ASSIGN . xhp_attribute_value [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
-- On T_XHP_ATTR shift to state 7
-- On T_STRING shift to state 8
-- On T_LCURLY shift to state 9
-- On T_DOTS shift to state 1058
-- On xhp_attribute_value shift to state 1059
## Reductions:

State 7:
## Known stack suffix:
## T_XHP_ATTR
## LR(1) items:
xhp_attribute_value -> T_XHP_ATTR . [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xhp_attribute_value -> T_XHP_ATTR

State 8:
## Known stack suffix:
## T_STRING
## LR(1) items:
xhp_attribute_value -> T_STRING . [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xhp_attribute_value -> T_STRING

State 9:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
xhp_attribute_value -> T_LCURLY . expr option(sc) T_RCURLY [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 1054
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 10:
## Known stack suffix:
## T_VOID
## LR(1) items:
pre_in_expr(d1) -> T_VOID . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 1053
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 11:
## Known stack suffix:
## T_TYPEOF
## LR(1) items:
pre_in_expr(d1) -> T_TYPEOF . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 1052
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 12:
## Known stack suffix:
## T_TYPE
## LR(1) items:
ident_semi_keyword -> T_TYPE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_TYPE

State 13:
## Known stack suffix:
## T_TRUE
## LR(1) items:
boolean_literal -> T_TRUE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boolean_literal -> T_TRUE

State 14:
## Known stack suffix:
## T_THIS
## LR(1) items:
primary_expr_no_braces -> T_THIS . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr_no_braces -> T_THIS

State 15:
## Known stack suffix:
## T_SUPER
## LR(1) items:
call_expr(d1) -> T_SUPER . arguments [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
member_expr(d1) -> T_SUPER . T_LBRACKET expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
member_expr(d1) -> T_SUPER . T_PERIOD field_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_PERIOD shift to state 16
-- On T_LPAREN shift to state 80
-- On T_LBRACKET shift to state 88
-- On arguments shift to state 1051
## Reductions:

State 16:
## Known stack suffix:
## T_SUPER T_PERIOD
## LR(1) items:
member_expr(d1) -> T_SUPER T_PERIOD . field_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_INTERFACE shift to state 43
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 77
-- On id shift to state 78
-- On field_name shift to state 79
## Reductions:

State 17:
## Known stack suffix:
## T_YIELD
## LR(1) items:
ident_keyword_bis -> T_YIELD . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_YIELD

State 18:
## Known stack suffix:
## T_WITH
## LR(1) items:
ident_keyword_bis -> T_WITH . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_WITH

State 19:
## Known stack suffix:
## T_WHILE
## LR(1) items:
ident_keyword_bis -> T_WHILE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_WHILE

State 20:
## Known stack suffix:
## T_VOID
## LR(1) items:
ident_keyword_bis -> T_VOID . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_VOID

State 21:
## Known stack suffix:
## T_VAR
## LR(1) items:
ident_keyword_bis -> T_VAR . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_VAR

State 22:
## Known stack suffix:
## T_TYPEOF
## LR(1) items:
ident_keyword_bis -> T_TYPEOF . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_TYPEOF

State 23:
## Known stack suffix:
## T_TRY
## LR(1) items:
ident_keyword_bis -> T_TRY . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_TRY

State 24:
## Known stack suffix:
## T_TRUE
## LR(1) items:
ident_keyword_bis -> T_TRUE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_TRUE

State 25:
## Known stack suffix:
## T_THROW
## LR(1) items:
ident_keyword_bis -> T_THROW . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_THROW

State 26:
## Known stack suffix:
## T_THIS
## LR(1) items:
ident_keyword_bis -> T_THIS . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_THIS

State 27:
## Known stack suffix:
## T_SWITCH
## LR(1) items:
ident_keyword_bis -> T_SWITCH . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_SWITCH

State 28:
## Known stack suffix:
## T_SUPER
## LR(1) items:
ident_keyword_bis -> T_SUPER . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_SUPER

State 29:
## Known stack suffix:
## T_STRING_TYPE
## LR(1) items:
ident_semi_keyword -> T_STRING_TYPE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_STRING_TYPE

State 30:
## Known stack suffix:
## T_STATIC
## LR(1) items:
ident_keyword_bis -> T_STATIC . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_STATIC

State 31:
## Known stack suffix:
## T_SET
## LR(1) items:
ident_semi_keyword -> T_SET . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_SET

State 32:
## Known stack suffix:
## T_RETURN
## LR(1) items:
ident_keyword_bis -> T_RETURN . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_RETURN

State 33:
## Known stack suffix:
## T_READONLY
## LR(1) items:
ident_semi_keyword -> T_READONLY . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_READONLY

State 34:
## Known stack suffix:
## T_PUBLIC
## LR(1) items:
ident_semi_keyword -> T_PUBLIC . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_PUBLIC

State 35:
## Known stack suffix:
## T_PROTECTED
## LR(1) items:
ident_semi_keyword -> T_PROTECTED . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_PROTECTED

State 36:
## Known stack suffix:
## T_PRIVATE
## LR(1) items:
ident_semi_keyword -> T_PRIVATE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_PRIVATE

State 37:
## Known stack suffix:
## T_OF
## LR(1) items:
ident_semi_keyword -> T_OF . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_OF

State 38:
## Known stack suffix:
## T_NUMBER_TYPE
## LR(1) items:
ident_semi_keyword -> T_NUMBER_TYPE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_NUMBER_TYPE

State 39:
## Known stack suffix:
## T_NULL
## LR(1) items:
ident_keyword_bis -> T_NULL . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_NULL

State 40:
## Known stack suffix:
## T_NEW
## LR(1) items:
ident_keyword_bis -> T_NEW . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_NEW

State 41:
## Known stack suffix:
## T_MODULE
## LR(1) items:
ident_semi_keyword -> T_MODULE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_MODULE

State 42:
## Known stack suffix:
## T_LET
## LR(1) items:
ident_keyword_bis -> T_LET . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_LET

State 43:
## Known stack suffix:
## T_INTERFACE
## LR(1) items:
ident_keyword_bis -> T_INTERFACE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_INTERFACE

State 44:
## Known stack suffix:
## T_INSTANCEOF
## LR(1) items:
ident_keyword_bis -> T_INSTANCEOF . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_INSTANCEOF

State 45:
## Known stack suffix:
## T_IN
## LR(1) items:
ident_keyword_bis -> T_IN . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_IN

State 46:
## Known stack suffix:
## T_IMPORT
## LR(1) items:
ident_keyword_bis -> T_IMPORT . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_IMPORT

State 47:
## Known stack suffix:
## T_IF
## LR(1) items:
ident_keyword_bis -> T_IF . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_IF

State 48:
## Known stack suffix:
## T_ID
## LR(1) items:
id -> T_ID . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production id -> T_ID

State 49:
## Known stack suffix:
## T_GET
## LR(1) items:
ident_semi_keyword -> T_GET . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_GET

State 50:
## Known stack suffix:
## T_FUNCTION
## LR(1) items:
ident_keyword_bis -> T_FUNCTION . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_FUNCTION

State 51:
## Known stack suffix:
## T_FROM
## LR(1) items:
ident_semi_keyword -> T_FROM . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_FROM

State 52:
## Known stack suffix:
## T_FOR
## LR(1) items:
ident_keyword_bis -> T_FOR . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_FOR

State 53:
## Known stack suffix:
## T_FINALLY
## LR(1) items:
ident_keyword_bis -> T_FINALLY . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_FINALLY

State 54:
## Known stack suffix:
## T_FALSE
## LR(1) items:
ident_keyword_bis -> T_FALSE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_FALSE

State 55:
## Known stack suffix:
## T_EXTENDS
## LR(1) items:
ident_keyword_bis -> T_EXTENDS . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_EXTENDS

State 56:
## Known stack suffix:
## T_EXPORT
## LR(1) items:
ident_keyword_bis -> T_EXPORT . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_EXPORT

State 57:
## Known stack suffix:
## T_ENUM
## LR(1) items:
ident_keyword_bis -> T_ENUM . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_ENUM

State 58:
## Known stack suffix:
## T_ELSE
## LR(1) items:
ident_keyword_bis -> T_ELSE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_ELSE

State 59:
## Known stack suffix:
## T_DO
## LR(1) items:
ident_keyword_bis -> T_DO . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_DO

State 60:
## Known stack suffix:
## T_DELETE
## LR(1) items:
ident_keyword_bis -> T_DELETE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_DELETE

State 61:
## Known stack suffix:
## T_DEFAULT
## LR(1) items:
ident_keyword_bis -> T_DEFAULT . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_DEFAULT

State 62:
## Known stack suffix:
## T_DECLARE
## LR(1) items:
ident_semi_keyword -> T_DECLARE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_DECLARE

State 63:
## Known stack suffix:
## T_CONTINUE
## LR(1) items:
ident_keyword_bis -> T_CONTINUE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_CONTINUE

State 64:
## Known stack suffix:
## T_CONSTRUCTOR
## LR(1) items:
ident_semi_keyword -> T_CONSTRUCTOR . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_CONSTRUCTOR

State 65:
## Known stack suffix:
## T_CONST
## LR(1) items:
ident_keyword_bis -> T_CONST . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_CONST

State 66:
## Known stack suffix:
## T_CLASS
## LR(1) items:
ident_keyword_bis -> T_CLASS . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_CLASS

State 67:
## Known stack suffix:
## T_CATCH
## LR(1) items:
ident_keyword_bis -> T_CATCH . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_CATCH

State 68:
## Known stack suffix:
## T_CASE
## LR(1) items:
ident_keyword_bis -> T_CASE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_CASE

State 69:
## Known stack suffix:
## T_BREAK
## LR(1) items:
ident_keyword_bis -> T_BREAK . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_BREAK

State 70:
## Known stack suffix:
## T_BOOLEAN_TYPE
## LR(1) items:
ident_semi_keyword -> T_BOOLEAN_TYPE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_BOOLEAN_TYPE

State 71:
## Known stack suffix:
## T_AWAIT
## LR(1) items:
ident_keyword_bis -> T_AWAIT . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword_bis -> T_AWAIT

State 72:
## Known stack suffix:
## T_ASYNC
## LR(1) items:
ident_semi_keyword -> T_ASYNC . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_ASYNC

State 73:
## Known stack suffix:
## T_AS
## LR(1) items:
ident_semi_keyword -> T_AS . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_AS

State 74:
## Known stack suffix:
## T_ANY_TYPE
## LR(1) items:
ident_semi_keyword -> T_ANY_TYPE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_semi_keyword -> T_ANY_TYPE

State 75:
## Known stack suffix:
## ident_semi_keyword
## LR(1) items:
id -> ident_semi_keyword . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IMPLEMENTS T_GREATER_THAN_EQUAL T_GREATER_THAN T_FROM T_EXTENDS T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production id -> ident_semi_keyword

State 76:
## Known stack suffix:
## ident_keyword_bis
## LR(1) items:
ident_keyword -> ident_keyword_bis . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_keyword -> ident_keyword_bis

State 77:
## Known stack suffix:
## ident_keyword
## LR(1) items:
field_name -> ident_keyword . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_name -> ident_keyword

State 78:
## Known stack suffix:
## id
## LR(1) items:
field_name -> id . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_name -> id

State 79:
## Known stack suffix:
## T_SUPER T_PERIOD field_name
## LR(1) items:
member_expr(d1) -> T_SUPER T_PERIOD field_name . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(d1) -> T_SUPER T_PERIOD field_name

State 80:
## Known stack suffix:
## T_LPAREN
## LR(1) items:
arguments -> T_LPAREN . argument_list_opt T_RPAREN [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_STATIC T_SET T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_READONLY T_RCURLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NUMBER_TYPE T_NULL T_NOT_EQUAL T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MODULE T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LET T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_INCR T_IN T_IMPORT T_IF T_ID T_GREATER_THAN_EQUAL T_GREATER_THAN T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_EXPONENT T_EQUAL T_ENUM T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_COLON T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_ASSIGN T_AS T_ANY_TYPE T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 1041
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On listc(argument) shift to state 1043
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 1045
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
-- On argument_list_opt shift to state 1048
-- On argument shift to state 1050
## Reductions:
-- On T_RPAREN
--   reduce production argument_list_opt ->

State 81:
## Known stack suffix:
## T_STRING
## LR(1) items:
string_literal -> T_STRING . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_literal -> T_STRING

State 82:
## Known stack suffix:
## T_REGEX
## LR(1) items:
regex_literal -> T_REGEX . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_literal -> T_REGEX

State 83:
## Known stack suffix:
## T_PLUS
## LR(1) items:
pre_in_expr(d1) -> T_PLUS . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 1040
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 84:
## Known stack suffix:
## T_NULL
## LR(1) items:
null_literal -> T_NULL . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production null_literal -> T_NULL

State 85:
## Known stack suffix:
## T_NOT
## LR(1) items:
pre_in_expr(d1) -> T_NOT . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 1039
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 86:
## Known stack suffix:
## T_NEW
## LR(1) items:
member_expr(d1) -> T_NEW . member_expr(d1) arguments [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
member_expr(d1) -> T_NEW . T_PERIOD id [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
new_expr(d1) -> T_NEW . new_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 87
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PERIOD shift to state 1034
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BACKQUOTE shift to state 293
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 1036
-- On member_expr(d1) shift to state 1037
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 87:
## Known stack suffix:
## T_SUPER
## LR(1) items:
member_expr(d1) -> T_SUPER . T_LBRACKET expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
member_expr(d1) -> T_SUPER . T_PERIOD field_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_PERIOD shift to state 16
-- On T_LBRACKET shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## T_SUPER T_LBRACKET
## LR(1) items:
member_expr(d1) -> T_SUPER T_LBRACKET . expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 1032
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 89:
## Known stack suffix:
## T_MINUS
## LR(1) items:
pre_in_expr(d1) -> T_MINUS . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 1031
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 90:
## Known stack suffix:
## T_LPAREN
## LR(1) items:
primary_expr_no_braces -> T_LPAREN . expr T_RPAREN [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
primary_expr_no_braces -> T_LPAREN . id T_COLON type_ T_RPAREN [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 1025
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 1029
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 91:
## Known stack suffix:
## T_LPAREN_ARROW
## LR(1) items:
arrow_function -> T_LPAREN_ARROW . formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DOTS shift to state 306
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On object_binding_pattern shift to state 123
-- On ident_semi_keyword shift to state 75
-- On id shift to state 309
-- On formal_parameter_list_opt shift to state 1020
-- On formal_parameter_list shift to state 873
-- On formal_parameter shift to state 880
-- On binding_pattern shift to state 876
-- On array_binding_pattern shift to state 127
## Reductions:
-- On T_RPAREN
--   reduce production formal_parameter_list_opt ->

State 92:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
object_binding_pattern -> T_LCURLY . T_RCURLY [ T_RPAREN T_RCURLY T_RBRACKET T_OF T_IN T_COMMA T_COLON T_ASSIGN ]
object_binding_pattern -> T_LCURLY . listc(binding_property) option(T_COMMA) T_RCURLY [ T_RPAREN T_RCURLY T_RBRACKET T_OF T_IN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_RCURLY shift to state 93
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DOTS shift to state 1005
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name shift to state 1008
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On listc(binding_property) shift to state 1011
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 1013
-- On binding_property shift to state 1019
-- On binding_id shift to state 1015
## Reductions:

State 93:
## Known stack suffix:
## T_LCURLY T_RCURLY
## LR(1) items:
object_binding_pattern -> T_LCURLY T_RCURLY . [ T_RPAREN T_RCURLY T_RBRACKET T_OF T_IN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production object_binding_pattern -> T_LCURLY T_RCURLY

State 94:
## Known stack suffix:
## T_LBRACKET
## LR(1) items:
property_name -> T_LBRACKET . assignment_expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_LPAREN T_LESS_THAN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 1003
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 95:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
object_literal -> T_LCURLY . T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
object_literal -> T_LCURLY . listc(property_name_and_value) option(T_COMMA) T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 96
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_RCURLY shift to state 97
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MULT shift to state 98
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 100
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DOTS shift to state 102
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 285
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name_and_value shift to state 992
-- On property_name shift to state 993
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On nonempty_list(decorator) shift to state 913
-- On method_get_set_star shift to state 937
-- On method_definition shift to state 996
-- On listc(property_name_and_value) shift to state 997
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 1000
-- On decorator shift to state 768
## Reductions:

State 96:
## Known stack suffix:
## T_SET
## LR(1) items:
ident_semi_keyword -> T_SET . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_LPAREN T_LESS_THAN T_COMMA T_COLON T_ASSIGN ]
method_get_set_star -> T_SET . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_LPAREN T_LESS_THAN T_COMMA T_COLON T_ASSIGN
--   reduce production ident_semi_keyword -> T_SET
-- On T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE
--   reduce production method_get_set_star -> T_SET

State 97:
## Known stack suffix:
## T_LCURLY T_RCURLY
## LR(1) items:
object_literal -> T_LCURLY T_RCURLY . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production object_literal -> T_LCURLY T_RCURLY

State 98:
## Known stack suffix:
## T_MULT
## LR(1) items:
method_get_set_star -> T_MULT . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_get_set_star -> T_MULT

State 99:
## Known stack suffix:
## T_INT
## LR(1) items:
numeric_literal -> T_INT . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric_literal -> T_INT

State 100:
## Known stack suffix:
## T_GET
## LR(1) items:
ident_semi_keyword -> T_GET . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_LPAREN T_LESS_THAN T_COMMA T_COLON T_ASSIGN ]
method_get_set_star -> T_GET . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_LPAREN T_LESS_THAN T_COMMA T_COLON T_ASSIGN
--   reduce production ident_semi_keyword -> T_GET
-- On T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE
--   reduce production method_get_set_star -> T_GET

State 101:
## Known stack suffix:
## T_FLOAT
## LR(1) items:
numeric_literal -> T_FLOAT . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric_literal -> T_FLOAT

State 102:
## Known stack suffix:
## T_DOTS
## LR(1) items:
property_name_and_value -> T_DOTS . assignment_expr [ T_RCURLY T_COMMA ]
property_name_and_value -> T_DOTS . [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 991
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:
-- On T_RCURLY T_COMMA
--   reduce production property_name_and_value -> T_DOTS

State 103:
## Known stack suffix:
## T_LBRACKET
## LR(1) items:
array_literal -> T_LBRACKET . optl(elision) T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
array_literal -> T_LBRACKET . element_list_rev optl(elision) T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_COMMA shift to state 104
-- On optl(elision) shift to state 105
-- On elision shift to state 982
-- On element_list_rev shift to state 984
## Reductions:
-- On T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots
--   reduce production optl(elision) ->

State 104:
## Known stack suffix:
## T_COMMA
## LR(1) items:
elision -> T_COMMA . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_COMMA T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elision -> T_COMMA

State 105:
## Known stack suffix:
## T_LBRACKET optl(elision)
## LR(1) items:
array_literal -> T_LBRACKET optl(elision) . T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
element_list_rev -> optl(elision) . element [ T_RBRACKET T_COMMA ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_RBRACKET shift to state 106
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 978
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On element shift to state 980
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 981
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 106:
## Known stack suffix:
## T_LBRACKET optl(elision) T_RBRACKET
## LR(1) items:
array_literal -> T_LBRACKET optl(elision) T_RBRACKET . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_literal -> T_LBRACKET optl(elision) T_RBRACKET

State 107:
## Known stack suffix:
## T_INCR
## LR(1) items:
pre_in_expr(d1) -> T_INCR . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 977
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 108:
## Known stack suffix:
## T_FUNCTION
## LR(1) items:
function_expr -> T_FUNCTION . option(id) call_signature T_LCURLY function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
generator_expr -> T_FUNCTION . T_MULT option(id) call_signature T_LCURLY function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MULT shift to state 109
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(id) shift to state 604
-- On ident_semi_keyword shift to state 75
-- On id shift to state 592
## Reductions:
-- On T_LPAREN T_LESS_THAN
--   reduce production option(id) ->

State 109:
## Known stack suffix:
## T_FUNCTION T_MULT
## LR(1) items:
generator_expr -> T_FUNCTION T_MULT . option(id) call_signature T_LCURLY function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(id) shift to state 110
-- On ident_semi_keyword shift to state 75
-- On id shift to state 592
## Reductions:
-- On T_LPAREN T_LESS_THAN
--   reduce production option(id) ->

State 110:
## Known stack suffix:
## T_FUNCTION T_MULT option(id)
## LR(1) items:
generator_expr -> T_FUNCTION T_MULT option(id) . call_signature T_LCURLY function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 973
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 111:
## Known stack suffix:
## T_LESS_THAN
## LR(1) items:
generics -> T_LESS_THAN . listc(type_parameter) T_GREATER_THAN [ T_LPAREN T_LCURLY T_IMPLEMENTS T_EXTENDS EOF ]
## Transitions:
-- On T_ID shift to state 112
-- On type_parameter shift to state 113
-- On listc(type_parameter) shift to state 114
## Reductions:

State 112:
## Known stack suffix:
## T_ID
## LR(1) items:
type_parameter -> T_ID . [ T_GREATER_THAN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_parameter -> T_ID

State 113:
## Known stack suffix:
## type_parameter
## LR(1) items:
listc(type_parameter) -> type_parameter . [ T_GREATER_THAN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(type_parameter) -> type_parameter

State 114:
## Known stack suffix:
## T_LESS_THAN listc(type_parameter)
## LR(1) items:
generics -> T_LESS_THAN listc(type_parameter) . T_GREATER_THAN [ T_LPAREN T_LCURLY T_IMPLEMENTS T_EXTENDS EOF ]
listc(type_parameter) -> listc(type_parameter) . T_COMMA type_parameter [ T_GREATER_THAN T_COMMA ]
## Transitions:
-- On T_GREATER_THAN shift to state 115
-- On T_COMMA shift to state 116
## Reductions:

State 115:
## Known stack suffix:
## T_LESS_THAN listc(type_parameter) T_GREATER_THAN
## LR(1) items:
generics -> T_LESS_THAN listc(type_parameter) T_GREATER_THAN . [ T_LPAREN T_LCURLY T_IMPLEMENTS T_EXTENDS EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production generics -> T_LESS_THAN listc(type_parameter) T_GREATER_THAN

State 116:
## Known stack suffix:
## listc(type_parameter) T_COMMA
## LR(1) items:
listc(type_parameter) -> listc(type_parameter) T_COMMA . type_parameter [ T_GREATER_THAN T_COMMA ]
## Transitions:
-- On T_ID shift to state 112
-- On type_parameter shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## listc(type_parameter) T_COMMA type_parameter
## LR(1) items:
listc(type_parameter) -> listc(type_parameter) T_COMMA type_parameter . [ T_GREATER_THAN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(type_parameter) -> listc(type_parameter) T_COMMA type_parameter

State 118:
## Known stack suffix:
## option(generics)
## LR(1) items:
call_signature -> option(generics) . T_LPAREN formal_parameter_list_opt T_RPAREN option(annotation) [ T_LCURLY EOF ]
## Transitions:
-- On T_LPAREN shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## option(generics) T_LPAREN
## LR(1) items:
call_signature -> option(generics) T_LPAREN . formal_parameter_list_opt T_RPAREN option(annotation) [ T_LCURLY EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DOTS shift to state 306
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On object_binding_pattern shift to state 123
-- On ident_semi_keyword shift to state 75
-- On id shift to state 309
-- On formal_parameter_list_opt shift to state 970
-- On formal_parameter_list shift to state 873
-- On formal_parameter shift to state 880
-- On binding_pattern shift to state 876
-- On array_binding_pattern shift to state 127
## Reductions:
-- On T_RPAREN
--   reduce production formal_parameter_list_opt ->

State 120:
## Known stack suffix:
## T_LBRACKET
## LR(1) items:
array_binding_pattern -> T_LBRACKET . T_RBRACKET [ T_RPAREN T_RCURLY T_RBRACKET T_OF T_IN T_COMMA T_COLON T_ASSIGN ]
array_binding_pattern -> T_LBRACKET . binding_element_list T_RBRACKET [ T_RPAREN T_RCURLY T_RBRACKET T_OF T_IN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_RBRACKET shift to state 121
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DOTS shift to state 122
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_COMMA shift to state 128
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On object_binding_pattern shift to state 123
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_start_list shift to state 129
-- On binding_start_element shift to state 966
-- On binding_pattern shift to state 131
-- On binding_id shift to state 961
-- On binding_elision_element shift to state 967
-- On binding_element_list shift to state 968
-- On binding_element shift to state 964
-- On array_binding_pattern shift to state 127
## Reductions:

State 121:
## Known stack suffix:
## T_LBRACKET T_RBRACKET
## LR(1) items:
array_binding_pattern -> T_LBRACKET T_RBRACKET . [ T_RPAREN T_RCURLY T_RBRACKET T_OF T_IN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_binding_pattern -> T_LBRACKET T_RBRACKET

State 122:
## Known stack suffix:
## T_DOTS
## LR(1) items:
binding_elision_element -> T_DOTS . binding_id [ T_RBRACKET ]
binding_elision_element -> T_DOTS . binding_pattern [ T_RBRACKET ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On object_binding_pattern shift to state 123
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_pattern shift to state 125
-- On binding_id shift to state 126
-- On array_binding_pattern shift to state 127
## Reductions:

State 123:
## Known stack suffix:
## object_binding_pattern
## LR(1) items:
binding_pattern -> object_binding_pattern . [ T_RPAREN T_RCURLY T_RBRACKET T_OF T_IN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_pattern -> object_binding_pattern

State 124:
## Known stack suffix:
## id
## LR(1) items:
binding_id -> id . [ T_RCURLY T_RBRACKET T_LESS_THAN T_LCURLY T_IMPLEMENTS T_FROM T_EXTENDS T_COMMA T_ASSIGN EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_id -> id

State 125:
## Known stack suffix:
## T_DOTS binding_pattern
## LR(1) items:
binding_elision_element -> T_DOTS binding_pattern . [ T_RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_elision_element -> T_DOTS binding_pattern

State 126:
## Known stack suffix:
## T_DOTS binding_id
## LR(1) items:
binding_elision_element -> T_DOTS binding_id . [ T_RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_elision_element -> T_DOTS binding_id

State 127:
## Known stack suffix:
## array_binding_pattern
## LR(1) items:
binding_pattern -> array_binding_pattern . [ T_RPAREN T_RCURLY T_RBRACKET T_OF T_IN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_pattern -> array_binding_pattern

State 128:
## Known stack suffix:
## T_COMMA
## LR(1) items:
binding_start_element -> T_COMMA . [ T_TYPE T_STRING_TYPE T_SET T_READONLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_MODULE T_LCURLY T_LBRACKET T_ID T_GET T_FROM T_DOTS T_DECLARE T_CONSTRUCTOR T_COMMA T_BOOLEAN_TYPE T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_start_element -> T_COMMA

State 129:
## Known stack suffix:
## binding_start_list
## LR(1) items:
binding_element_list -> binding_start_list . [ T_RBRACKET ]
binding_element_list -> binding_start_list . binding_elision_element [ T_RBRACKET ]
binding_start_list -> binding_start_list . binding_start_element [ T_TYPE T_STRING_TYPE T_SET T_READONLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_MODULE T_LCURLY T_LBRACKET T_ID T_GET T_FROM T_DOTS T_DECLARE T_CONSTRUCTOR T_COMMA T_BOOLEAN_TYPE T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DOTS shift to state 122
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_COMMA shift to state 128
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On object_binding_pattern shift to state 123
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_start_element shift to state 130
-- On binding_pattern shift to state 131
-- On binding_id shift to state 961
-- On binding_elision_element shift to state 963
-- On binding_element shift to state 964
-- On array_binding_pattern shift to state 127
## Reductions:
-- On T_RBRACKET
--   reduce production binding_element_list -> binding_start_list

State 130:
## Known stack suffix:
## binding_start_list binding_start_element
## LR(1) items:
binding_start_list -> binding_start_list binding_start_element . [ T_TYPE T_STRING_TYPE T_SET T_READONLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_MODULE T_LCURLY T_LBRACKET T_ID T_GET T_FROM T_DOTS T_DECLARE T_CONSTRUCTOR T_COMMA T_BOOLEAN_TYPE T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_start_list -> binding_start_list binding_start_element

State 131:
## Known stack suffix:
## binding_pattern
## LR(1) items:
binding_element -> binding_pattern . option(initializeur) [ T_RCURLY T_RBRACKET T_COMMA ]
## Transitions:
-- On T_ASSIGN shift to state 132
-- On option(initializeur) shift to state 960
-- On initializeur shift to state 431
## Reductions:
-- On T_RCURLY T_RBRACKET T_COMMA
--   reduce production option(initializeur) ->

State 132:
## Known stack suffix:
## T_ASSIGN
## LR(1) items:
initializeur -> T_ASSIGN . assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 959
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 133:
## Known stack suffix:
## T_FALSE
## LR(1) items:
boolean_literal -> T_FALSE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boolean_literal -> T_FALSE

State 134:
## Known stack suffix:
## T_DOTS
## LR(1) items:
assignment_expr -> T_DOTS . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expr -> T_DOTS

State 135:
## Known stack suffix:
## T_DELETE
## LR(1) items:
pre_in_expr(d1) -> T_DELETE . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 958
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 136:
## Known stack suffix:
## T_DECR
## LR(1) items:
pre_in_expr(d1) -> T_DECR . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 957
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 137:
## Known stack suffix:
## T_CLASS
## LR(1) items:
class_expr -> T_CLASS . option(binding_id) option(generics) class_heritage class_body [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(binding_id) shift to state 138
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_id shift to state 620
## Reductions:
-- On T_LESS_THAN T_LCURLY T_IMPLEMENTS T_EXTENDS
--   reduce production option(binding_id) ->

State 138:
## Known stack suffix:
## T_CLASS option(binding_id)
## LR(1) items:
class_expr -> T_CLASS option(binding_id) . option(generics) class_heritage class_body [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 139
-- On generics shift to state 175
## Reductions:
-- On T_LCURLY T_IMPLEMENTS T_EXTENDS
--   reduce production option(generics) ->

State 139:
## Known stack suffix:
## T_CLASS option(binding_id) option(generics)
## LR(1) items:
class_expr -> T_CLASS option(binding_id) option(generics) . class_heritage class_body [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_EXTENDS shift to state 140
-- On option(extends_clause) shift to state 264
-- On extends_clause shift to state 269
-- On class_heritage shift to state 270
## Reductions:
-- On T_LCURLY T_IMPLEMENTS
--   reduce production option(extends_clause) ->

State 140:
## Known stack suffix:
## T_EXTENDS
## LR(1) items:
extends_clause -> T_EXTENDS . type_or_expr [ T_LCURLY T_IMPLEMENTS EOF ]
## Transitions:
-- On T_ID shift to state 141
-- On type_reference_aux shift to state 142
-- On type_or_expr shift to state 143
-- On type_name shift to state 144
-- On module_name shift to state 198
## Reductions:

State 141:
## Known stack suffix:
## T_ID
## LR(1) items:
module_name -> T_ID . [ T_PERIOD ]
type_name -> T_ID . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LESS_THAN T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Reductions:
-- On T_PERIOD
--   reduce production module_name -> T_ID
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LESS_THAN T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF
--   reduce production type_name -> T_ID

State 142:
## Known stack suffix:
## type_reference_aux
## LR(1) items:
type_or_expr -> type_reference_aux . [ T_LCURLY T_IMPLEMENTS EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_or_expr -> type_reference_aux

State 143:
## Known stack suffix:
## T_EXTENDS type_or_expr
## LR(1) items:
extends_clause -> T_EXTENDS type_or_expr . [ T_LCURLY T_IMPLEMENTS EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production extends_clause -> T_EXTENDS type_or_expr

State 144:
## Known stack suffix:
## type_name
## LR(1) items:
type_reference_aux -> type_name . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
type_reference_aux -> type_name . type_arguments [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_LESS_THAN shift to state 145
-- On type_arguments shift to state 260
-- On mismatched_type_arguments shift to state 261
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF
--   reduce production type_reference_aux -> type_name

State 145:
## Known stack suffix:
## T_LESS_THAN
## LR(1) items:
mismatched_type_arguments -> T_LESS_THAN . type_argument_list1 T_RSHIFT [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
mismatched_type_arguments -> T_LESS_THAN . type_argument_list2 T_RSHIFT3 [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
type_arguments -> T_LESS_THAN . listc(type_argument) T_GREATER_THAN [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_PLING shift to state 149
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LPAREN_ARROW shift to state 152
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On union_type shift to state 186
-- On type_reference_aux shift to state 187
-- On type_name shift to state 242
-- On type_argument_list2 shift to state 244
-- On type_argument_list1 shift to state 262
-- On type_argument shift to state 248
-- On type_ shift to state 249
-- On primary_type2 shift to state 189
-- On primary_type shift to state 190
-- On primary_or_union_type shift to state 193
-- On primary_or_intersect_type shift to state 201
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On nominal_type2 shift to state 250
-- On nominal_type1 shift to state 251
-- On module_name shift to state 198
-- On listc(type_argument) shift to state 263
-- On intersect_type shift to state 208
## Reductions:

State 146:
## Known stack suffix:
## T_VOID
## LR(1) items:
predefined_type -> T_VOID . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production predefined_type -> T_VOID

State 147:
## Known stack suffix:
## T_STRING_TYPE
## LR(1) items:
predefined_type -> T_STRING_TYPE . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production predefined_type -> T_STRING_TYPE

State 148:
## Known stack suffix:
## T_STRING
## LR(1) items:
primary_type2 -> T_STRING . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_type2 -> T_STRING

State 149:
## Known stack suffix:
## T_PLING
## LR(1) items:
type_ -> T_PLING . type_ [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_PLING shift to state 149
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LPAREN_ARROW shift to state 152
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On union_type shift to state 186
-- On type_reference_aux shift to state 187
-- On type_name shift to state 144
-- On type_ shift to state 241
-- On primary_type2 shift to state 189
-- On primary_type shift to state 190
-- On primary_or_union_type shift to state 193
-- On primary_or_intersect_type shift to state 201
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On module_name shift to state 198
-- On intersect_type shift to state 208
## Reductions:

State 150:
## Known stack suffix:
## T_NUMBER_TYPE
## LR(1) items:
predefined_type -> T_NUMBER_TYPE . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production predefined_type -> T_NUMBER_TYPE

State 151:
## Known stack suffix:
## T_NULL
## LR(1) items:
predefined_type -> T_NULL . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production predefined_type -> T_NULL

State 152:
## Known stack suffix:
## T_LPAREN_ARROW
## LR(1) items:
type_ -> T_LPAREN_ARROW . optl(param_type_list) T_RPAREN T_ARROW type_ [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DOTS shift to state 153
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On rest_param_type shift to state 164
-- On param_type_list shift to state 165
-- On param_type shift to state 166
-- On optl(param_type_list) shift to state 237
-- On optional_param_type_list shift to state 169
-- On optional_param_type shift to state 170
-- On ident_semi_keyword shift to state 75
-- On id shift to state 178
## Reductions:
-- On T_RPAREN
--   reduce production optl(param_type_list) ->

State 153:
## Known stack suffix:
## T_DOTS
## LR(1) items:
rest_param_type -> T_DOTS . id complex_annotation [ T_RPAREN ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## T_DOTS id
## LR(1) items:
rest_param_type -> T_DOTS id . complex_annotation [ T_RPAREN ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On T_COLON shift to state 155
-- On option(generics) shift to state 162
-- On generics shift to state 175
-- On complex_annotation shift to state 236
-- On annotation shift to state 177
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 155:
## Known stack suffix:
## T_COLON
## LR(1) items:
annotation -> T_COLON . type_ [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_OF T_LCURLY T_IN T_COMMA T_ASSIGN T_ARROW EOF ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_PLING shift to state 149
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LPAREN_ARROW shift to state 152
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On union_type shift to state 186
-- On type_reference_aux shift to state 187
-- On type_name shift to state 144
-- On type_ shift to state 235
-- On primary_type2 shift to state 189
-- On primary_type shift to state 190
-- On primary_or_union_type shift to state 193
-- On primary_or_intersect_type shift to state 201
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On module_name shift to state 198
-- On intersect_type shift to state 208
## Reductions:

State 156:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
object_type -> T_LCURLY . list(type_member) T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_READONLY T_RCURLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IN T_IMPORT T_IF T_ID T_GREATER_THAN T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_COLON T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_OR T_BIT_NOT T_BIT_AND T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_ASSIGN T_AS T_ARROW T_ANY_TYPE TUnknown RDots LDots EOF ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 157
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On type_member shift to state 220
-- On string_literal shift to state 221
-- On property_name_typescript shift to state 222
-- On numeric_literal_as_string shift to state 228
-- On numeric_literal shift to state 229
-- On list(type_member) shift to state 233
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 231
-- On id shift to state 232
## Reductions:
-- On T_RCURLY
--   reduce production list(type_member) ->

State 157:
## Known stack suffix:
## T_LBRACKET
## LR(1) items:
type_member -> T_LBRACKET . T_ID T_COLON T_STRING_TYPE T_RBRACKET complex_annotation sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
type_member -> T_LBRACKET . T_ID T_COLON T_NUMBER_TYPE T_RBRACKET complex_annotation sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_ID shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## T_LBRACKET T_ID
## LR(1) items:
type_member -> T_LBRACKET T_ID . T_COLON T_STRING_TYPE T_RBRACKET complex_annotation sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
type_member -> T_LBRACKET T_ID . T_COLON T_NUMBER_TYPE T_RBRACKET complex_annotation sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_COLON shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## T_LBRACKET T_ID T_COLON
## LR(1) items:
type_member -> T_LBRACKET T_ID T_COLON . T_STRING_TYPE T_RBRACKET complex_annotation sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
type_member -> T_LBRACKET T_ID T_COLON . T_NUMBER_TYPE T_RBRACKET complex_annotation sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_STRING_TYPE shift to state 160
-- On T_NUMBER_TYPE shift to state 216
## Reductions:

State 160:
## Known stack suffix:
## T_LBRACKET T_ID T_COLON T_STRING_TYPE
## LR(1) items:
type_member -> T_LBRACKET T_ID T_COLON T_STRING_TYPE . T_RBRACKET complex_annotation sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_RBRACKET shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## T_LBRACKET T_ID T_COLON T_STRING_TYPE T_RBRACKET
## LR(1) items:
type_member -> T_LBRACKET T_ID T_COLON T_STRING_TYPE T_RBRACKET . complex_annotation sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On T_COLON shift to state 155
-- On option(generics) shift to state 162
-- On generics shift to state 175
-- On complex_annotation shift to state 210
-- On annotation shift to state 177
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 162:
## Known stack suffix:
## option(generics)
## LR(1) items:
complex_annotation -> option(generics) . T_LPAREN optl(param_type_list) T_RPAREN T_COLON type_ [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_COMMA ]
## Transitions:
-- On T_LPAREN shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## option(generics) T_LPAREN
## LR(1) items:
complex_annotation -> option(generics) T_LPAREN . optl(param_type_list) T_RPAREN T_COLON type_ [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_COMMA ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DOTS shift to state 153
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On rest_param_type shift to state 164
-- On param_type_list shift to state 165
-- On param_type shift to state 166
-- On optl(param_type_list) shift to state 180
-- On optional_param_type_list shift to state 169
-- On optional_param_type shift to state 170
-- On ident_semi_keyword shift to state 75
-- On id shift to state 178
## Reductions:
-- On T_RPAREN
--   reduce production optl(param_type_list) ->

State 164:
## Known stack suffix:
## rest_param_type
## LR(1) items:
optional_param_type_list -> rest_param_type . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional_param_type_list -> rest_param_type

State 165:
## Known stack suffix:
## param_type_list
## LR(1) items:
optl(param_type_list) -> param_type_list . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optl(param_type_list) -> param_type_list

State 166:
## Known stack suffix:
## param_type
## LR(1) items:
param_type_list -> param_type . T_COMMA param_type_list [ T_RPAREN ]
param_type_list -> param_type . [ T_RPAREN ]
## Transitions:
-- On T_COMMA shift to state 167
## Reductions:
-- On T_RPAREN
--   reduce production param_type_list -> param_type

State 167:
## Known stack suffix:
## param_type T_COMMA
## LR(1) items:
param_type_list -> param_type T_COMMA . param_type_list [ T_RPAREN ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DOTS shift to state 153
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On rest_param_type shift to state 164
-- On param_type_list shift to state 168
-- On param_type shift to state 166
-- On optional_param_type_list shift to state 169
-- On optional_param_type shift to state 170
-- On ident_semi_keyword shift to state 75
-- On id shift to state 178
## Reductions:

State 168:
## Known stack suffix:
## param_type T_COMMA param_type_list
## LR(1) items:
param_type_list -> param_type T_COMMA param_type_list . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param_type_list -> param_type T_COMMA param_type_list

State 169:
## Known stack suffix:
## optional_param_type_list
## LR(1) items:
param_type_list -> optional_param_type_list . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param_type_list -> optional_param_type_list

State 170:
## Known stack suffix:
## optional_param_type
## LR(1) items:
optional_param_type_list -> optional_param_type . T_COMMA optional_param_type_list [ T_RPAREN ]
optional_param_type_list -> optional_param_type . [ T_RPAREN ]
## Transitions:
-- On T_COMMA shift to state 171
## Reductions:
-- On T_RPAREN
--   reduce production optional_param_type_list -> optional_param_type

State 171:
## Known stack suffix:
## optional_param_type T_COMMA
## LR(1) items:
optional_param_type_list -> optional_param_type T_COMMA . optional_param_type_list [ T_RPAREN ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DOTS shift to state 153
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On rest_param_type shift to state 164
-- On optional_param_type_list shift to state 172
-- On optional_param_type shift to state 170
-- On ident_semi_keyword shift to state 75
-- On id shift to state 173
## Reductions:

State 172:
## Known stack suffix:
## optional_param_type T_COMMA optional_param_type_list
## LR(1) items:
optional_param_type_list -> optional_param_type T_COMMA optional_param_type_list . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional_param_type_list -> optional_param_type T_COMMA optional_param_type_list

State 173:
## Known stack suffix:
## id
## LR(1) items:
optional_param_type -> id . T_PLING complex_annotation [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_PLING shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## id T_PLING
## LR(1) items:
optional_param_type -> id T_PLING . complex_annotation [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On T_COLON shift to state 155
-- On option(generics) shift to state 162
-- On generics shift to state 175
-- On complex_annotation shift to state 176
-- On annotation shift to state 177
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 175:
## Known stack suffix:
## generics
## LR(1) items:
option(generics) -> generics . [ T_LPAREN T_LCURLY T_IMPLEMENTS T_EXTENDS EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(generics) -> generics

State 176:
## Known stack suffix:
## id T_PLING complex_annotation
## LR(1) items:
optional_param_type -> id T_PLING complex_annotation . [ T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional_param_type -> id T_PLING complex_annotation

State 177:
## Known stack suffix:
## annotation
## LR(1) items:
complex_annotation -> annotation . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production complex_annotation -> annotation

State 178:
## Known stack suffix:
## id
## LR(1) items:
optional_param_type -> id . T_PLING complex_annotation [ T_RPAREN T_COMMA ]
param_type -> id . complex_annotation [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_PLING shift to state 174
-- On T_LESS_THAN shift to state 111
-- On T_COLON shift to state 155
-- On option(generics) shift to state 162
-- On generics shift to state 175
-- On complex_annotation shift to state 179
-- On annotation shift to state 177
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 179:
## Known stack suffix:
## id complex_annotation
## LR(1) items:
param_type -> id complex_annotation . [ T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param_type -> id complex_annotation

State 180:
## Known stack suffix:
## option(generics) T_LPAREN optl(param_type_list)
## LR(1) items:
complex_annotation -> option(generics) T_LPAREN optl(param_type_list) . T_RPAREN T_COLON type_ [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_COMMA ]
## Transitions:
-- On T_RPAREN shift to state 181
## Reductions:

State 181:
## Known stack suffix:
## option(generics) T_LPAREN optl(param_type_list) T_RPAREN
## LR(1) items:
complex_annotation -> option(generics) T_LPAREN optl(param_type_list) T_RPAREN . T_COLON type_ [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_COMMA ]
## Transitions:
-- On T_COLON shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## option(generics) T_LPAREN optl(param_type_list) T_RPAREN T_COLON
## LR(1) items:
complex_annotation -> option(generics) T_LPAREN optl(param_type_list) T_RPAREN T_COLON . type_ [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_COMMA ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_PLING shift to state 149
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LPAREN_ARROW shift to state 152
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On union_type shift to state 186
-- On type_reference_aux shift to state 187
-- On type_name shift to state 144
-- On type_ shift to state 209
-- On primary_type2 shift to state 189
-- On primary_type shift to state 190
-- On primary_or_union_type shift to state 193
-- On primary_or_intersect_type shift to state 201
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On module_name shift to state 198
-- On intersect_type shift to state 208
## Reductions:

State 183:
## Known stack suffix:
## T_LBRACKET
## LR(1) items:
primary_type2 -> T_LBRACKET . listc(type_) T_RBRACKET [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_PLING shift to state 149
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LPAREN_ARROW shift to state 152
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On union_type shift to state 186
-- On type_reference_aux shift to state 187
-- On type_name shift to state 144
-- On type_ shift to state 188
-- On primary_type2 shift to state 189
-- On primary_type shift to state 190
-- On primary_or_union_type shift to state 193
-- On primary_or_intersect_type shift to state 201
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On module_name shift to state 198
-- On listc(type_) shift to state 204
-- On intersect_type shift to state 208
## Reductions:

State 184:
## Known stack suffix:
## T_BOOLEAN_TYPE
## LR(1) items:
predefined_type -> T_BOOLEAN_TYPE . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production predefined_type -> T_BOOLEAN_TYPE

State 185:
## Known stack suffix:
## T_ANY_TYPE
## LR(1) items:
predefined_type -> T_ANY_TYPE . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production predefined_type -> T_ANY_TYPE

State 186:
## Known stack suffix:
## union_type
## LR(1) items:
primary_or_union_type -> union_type . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_or_union_type -> union_type

State 187:
## Known stack suffix:
## type_reference_aux
## LR(1) items:
primary_type2 -> type_reference_aux . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_type2 -> type_reference_aux

State 188:
## Known stack suffix:
## type_
## LR(1) items:
listc(type_) -> type_ . [ T_RBRACKET T_LCURLY T_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(type_) -> type_

State 189:
## Known stack suffix:
## primary_type2
## LR(1) items:
primary_type -> primary_type2 . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_type -> primary_type2

State 190:
## Known stack suffix:
## primary_type
## LR(1) items:
primary_or_intersect_type -> primary_type . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
primary_type -> primary_type . T_LBRACKET T_RBRACKET [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_LBRACKET shift to state 191
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF
--   reduce production primary_or_intersect_type -> primary_type

State 191:
## Known stack suffix:
## primary_type T_LBRACKET
## LR(1) items:
primary_type -> primary_type T_LBRACKET . T_RBRACKET [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_RBRACKET shift to state 192
## Reductions:

State 192:
## Known stack suffix:
## primary_type T_LBRACKET T_RBRACKET
## LR(1) items:
primary_type -> primary_type T_LBRACKET T_RBRACKET . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_type -> primary_type T_LBRACKET T_RBRACKET

State 193:
## Known stack suffix:
## primary_or_union_type
## LR(1) items:
type_ -> primary_or_union_type . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_ASSIGN T_ARROW RDots EOF ]
union_type -> primary_or_union_type . T_BIT_OR primary_type [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_BIT_OR shift to state 194
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_ASSIGN T_ARROW RDots EOF
--   reduce production type_ -> primary_or_union_type

State 194:
## Known stack suffix:
## primary_or_union_type T_BIT_OR
## LR(1) items:
union_type -> primary_or_union_type T_BIT_OR . primary_type [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On type_reference_aux shift to state 187
-- On type_name shift to state 144
-- On primary_type2 shift to state 189
-- On primary_type shift to state 195
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On module_name shift to state 198
## Reductions:

State 195:
## Known stack suffix:
## primary_or_union_type T_BIT_OR primary_type
## LR(1) items:
primary_type -> primary_type . T_LBRACKET T_RBRACKET [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_ASSIGN T_ARROW RDots EOF ]
union_type -> primary_or_union_type T_BIT_OR primary_type . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_LBRACKET shift to state 191
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_ASSIGN T_ARROW RDots EOF
--   reduce production union_type -> primary_or_union_type T_BIT_OR primary_type

State 196:
## Known stack suffix:
## predefined_type
## LR(1) items:
primary_type2 -> predefined_type . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_type2 -> predefined_type

State 197:
## Known stack suffix:
## object_type
## LR(1) items:
primary_type2 -> object_type . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_type2 -> object_type

State 198:
## Known stack suffix:
## module_name
## LR(1) items:
module_name -> module_name . T_PERIOD T_ID [ T_PERIOD ]
type_name -> module_name . T_PERIOD T_ID [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LESS_THAN T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_PERIOD shift to state 199
## Reductions:

State 199:
## Known stack suffix:
## module_name T_PERIOD
## LR(1) items:
module_name -> module_name T_PERIOD . T_ID [ T_PERIOD ]
type_name -> module_name T_PERIOD . T_ID [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LESS_THAN T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_ID shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## module_name T_PERIOD T_ID
## LR(1) items:
module_name -> module_name T_PERIOD T_ID . [ T_PERIOD ]
type_name -> module_name T_PERIOD T_ID . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LESS_THAN T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Reductions:
-- On T_PERIOD
--   reduce production module_name -> module_name T_PERIOD T_ID
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LESS_THAN T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF
--   reduce production type_name -> module_name T_PERIOD T_ID

State 201:
## Known stack suffix:
## primary_or_intersect_type
## LR(1) items:
intersect_type -> primary_or_intersect_type . T_BIT_AND primary_type [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
primary_or_union_type -> primary_or_intersect_type . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_BIT_AND shift to state 202
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_ASSIGN T_ARROW RDots EOF
--   reduce production primary_or_union_type -> primary_or_intersect_type

State 202:
## Known stack suffix:
## primary_or_intersect_type T_BIT_AND
## LR(1) items:
intersect_type -> primary_or_intersect_type T_BIT_AND . primary_type [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On type_reference_aux shift to state 187
-- On type_name shift to state 144
-- On primary_type2 shift to state 189
-- On primary_type shift to state 203
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On module_name shift to state 198
## Reductions:

State 203:
## Known stack suffix:
## primary_or_intersect_type T_BIT_AND primary_type
## LR(1) items:
intersect_type -> primary_or_intersect_type T_BIT_AND primary_type . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
primary_type -> primary_type . T_LBRACKET T_RBRACKET [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_LBRACKET shift to state 191
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF
--   reduce production intersect_type -> primary_or_intersect_type T_BIT_AND primary_type

State 204:
## Known stack suffix:
## T_LBRACKET listc(type_)
## LR(1) items:
listc(type_) -> listc(type_) . T_COMMA type_ [ T_RBRACKET T_COMMA ]
primary_type2 -> T_LBRACKET listc(type_) . T_RBRACKET [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_RBRACKET shift to state 205
-- On T_COMMA shift to state 206
## Reductions:

State 205:
## Known stack suffix:
## T_LBRACKET listc(type_) T_RBRACKET
## LR(1) items:
primary_type2 -> T_LBRACKET listc(type_) T_RBRACKET . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_type2 -> T_LBRACKET listc(type_) T_RBRACKET

State 206:
## Known stack suffix:
## listc(type_) T_COMMA
## LR(1) items:
listc(type_) -> listc(type_) T_COMMA . type_ [ T_RBRACKET T_LCURLY T_COMMA EOF ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_PLING shift to state 149
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LPAREN_ARROW shift to state 152
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On union_type shift to state 186
-- On type_reference_aux shift to state 187
-- On type_name shift to state 144
-- On type_ shift to state 207
-- On primary_type2 shift to state 189
-- On primary_type shift to state 190
-- On primary_or_union_type shift to state 193
-- On primary_or_intersect_type shift to state 201
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On module_name shift to state 198
-- On intersect_type shift to state 208
## Reductions:

State 207:
## Known stack suffix:
## listc(type_) T_COMMA type_
## LR(1) items:
listc(type_) -> listc(type_) T_COMMA type_ . [ T_RBRACKET T_LCURLY T_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(type_) -> listc(type_) T_COMMA type_

State 208:
## Known stack suffix:
## intersect_type
## LR(1) items:
primary_or_intersect_type -> intersect_type . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_or_intersect_type -> intersect_type

State 209:
## Known stack suffix:
## option(generics) T_LPAREN optl(param_type_list) T_RPAREN T_COLON type_
## LR(1) items:
complex_annotation -> option(generics) T_LPAREN optl(param_type_list) T_RPAREN T_COLON type_ . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production complex_annotation -> option(generics) T_LPAREN optl(param_type_list) T_RPAREN T_COLON type_

State 210:
## Known stack suffix:
## T_LBRACKET T_ID T_COLON T_STRING_TYPE T_RBRACKET complex_annotation
## LR(1) items:
type_member -> T_LBRACKET T_ID T_COLON T_STRING_TYPE T_RBRACKET complex_annotation . sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_COMMA shift to state 213
-- On sc_or_comma shift to state 214
-- On sc shift to state 215
## Reductions:

State 211:
## Known stack suffix:
## T_VIRTUAL_SEMICOLON
## LR(1) items:
sc -> T_VIRTUAL_SEMICOLON . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MULT T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_INCR T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sc -> T_VIRTUAL_SEMICOLON

State 212:
## Known stack suffix:
## T_SEMICOLON
## LR(1) items:
sc -> T_SEMICOLON . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MULT T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_INCR T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sc -> T_SEMICOLON

State 213:
## Known stack suffix:
## T_COMMA
## LR(1) items:
sc_or_comma -> T_COMMA . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sc_or_comma -> T_COMMA

State 214:
## Known stack suffix:
## T_LBRACKET T_ID T_COLON T_STRING_TYPE T_RBRACKET complex_annotation sc_or_comma
## LR(1) items:
type_member -> T_LBRACKET T_ID T_COLON T_STRING_TYPE T_RBRACKET complex_annotation sc_or_comma . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_member -> T_LBRACKET T_ID T_COLON T_STRING_TYPE T_RBRACKET complex_annotation sc_or_comma

State 215:
## Known stack suffix:
## sc
## LR(1) items:
sc_or_comma -> sc . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sc_or_comma -> sc

State 216:
## Known stack suffix:
## T_LBRACKET T_ID T_COLON T_NUMBER_TYPE
## LR(1) items:
type_member -> T_LBRACKET T_ID T_COLON T_NUMBER_TYPE . T_RBRACKET complex_annotation sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_RBRACKET shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## T_LBRACKET T_ID T_COLON T_NUMBER_TYPE T_RBRACKET
## LR(1) items:
type_member -> T_LBRACKET T_ID T_COLON T_NUMBER_TYPE T_RBRACKET . complex_annotation sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On T_COLON shift to state 155
-- On option(generics) shift to state 162
-- On generics shift to state 175
-- On complex_annotation shift to state 218
-- On annotation shift to state 177
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 218:
## Known stack suffix:
## T_LBRACKET T_ID T_COLON T_NUMBER_TYPE T_RBRACKET complex_annotation
## LR(1) items:
type_member -> T_LBRACKET T_ID T_COLON T_NUMBER_TYPE T_RBRACKET complex_annotation . sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_COMMA shift to state 213
-- On sc_or_comma shift to state 219
-- On sc shift to state 215
## Reductions:

State 219:
## Known stack suffix:
## T_LBRACKET T_ID T_COLON T_NUMBER_TYPE T_RBRACKET complex_annotation sc_or_comma
## LR(1) items:
type_member -> T_LBRACKET T_ID T_COLON T_NUMBER_TYPE T_RBRACKET complex_annotation sc_or_comma . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_member -> T_LBRACKET T_ID T_COLON T_NUMBER_TYPE T_RBRACKET complex_annotation sc_or_comma

State 220:
## Known stack suffix:
## type_member
## LR(1) items:
list(type_member) -> type_member . list(type_member) [ T_RCURLY ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 157
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On type_member shift to state 220
-- On string_literal shift to state 221
-- On property_name_typescript shift to state 222
-- On numeric_literal_as_string shift to state 228
-- On numeric_literal shift to state 229
-- On list(type_member) shift to state 230
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 231
-- On id shift to state 232
## Reductions:
-- On T_RCURLY
--   reduce production list(type_member) ->

State 221:
## Known stack suffix:
## string_literal
## LR(1) items:
property_name_typescript -> string_literal . [ T_PLING T_LPAREN T_LESS_THAN T_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name_typescript -> string_literal

State 222:
## Known stack suffix:
## property_name_typescript
## LR(1) items:
type_member -> property_name_typescript . complex_annotation sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
type_member -> property_name_typescript . T_PLING complex_annotation sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_PLING shift to state 223
-- On T_LESS_THAN shift to state 111
-- On T_COLON shift to state 155
-- On option(generics) shift to state 162
-- On generics shift to state 175
-- On complex_annotation shift to state 226
-- On annotation shift to state 177
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 223:
## Known stack suffix:
## property_name_typescript T_PLING
## LR(1) items:
type_member -> property_name_typescript T_PLING . complex_annotation sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On T_COLON shift to state 155
-- On option(generics) shift to state 162
-- On generics shift to state 175
-- On complex_annotation shift to state 224
-- On annotation shift to state 177
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 224:
## Known stack suffix:
## property_name_typescript T_PLING complex_annotation
## LR(1) items:
type_member -> property_name_typescript T_PLING complex_annotation . sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_COMMA shift to state 213
-- On sc_or_comma shift to state 225
-- On sc shift to state 215
## Reductions:

State 225:
## Known stack suffix:
## property_name_typescript T_PLING complex_annotation sc_or_comma
## LR(1) items:
type_member -> property_name_typescript T_PLING complex_annotation sc_or_comma . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_member -> property_name_typescript T_PLING complex_annotation sc_or_comma

State 226:
## Known stack suffix:
## property_name_typescript complex_annotation
## LR(1) items:
type_member -> property_name_typescript complex_annotation . sc_or_comma [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_COMMA shift to state 213
-- On sc_or_comma shift to state 227
-- On sc shift to state 215
## Reductions:

State 227:
## Known stack suffix:
## property_name_typescript complex_annotation sc_or_comma
## LR(1) items:
type_member -> property_name_typescript complex_annotation sc_or_comma . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_member -> property_name_typescript complex_annotation sc_or_comma

State 228:
## Known stack suffix:
## numeric_literal_as_string
## LR(1) items:
property_name_typescript -> numeric_literal_as_string . [ T_PLING T_LPAREN T_LESS_THAN T_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name_typescript -> numeric_literal_as_string

State 229:
## Known stack suffix:
## numeric_literal
## LR(1) items:
numeric_literal_as_string -> numeric_literal . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_PLING T_LPAREN T_LESS_THAN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric_literal_as_string -> numeric_literal

State 230:
## Known stack suffix:
## type_member list(type_member)
## LR(1) items:
list(type_member) -> type_member list(type_member) . [ T_RCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(type_member) -> type_member list(type_member)

State 231:
## Known stack suffix:
## ident_keyword
## LR(1) items:
property_name_typescript -> ident_keyword . [ T_PLING T_LPAREN T_LESS_THAN T_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name_typescript -> ident_keyword

State 232:
## Known stack suffix:
## id
## LR(1) items:
property_name_typescript -> id . [ T_PLING T_LPAREN T_LESS_THAN T_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name_typescript -> id

State 233:
## Known stack suffix:
## T_LCURLY list(type_member)
## LR(1) items:
object_type -> T_LCURLY list(type_member) . T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_READONLY T_RCURLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IN T_IMPORT T_IF T_ID T_GREATER_THAN T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_COLON T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_OR T_BIT_NOT T_BIT_AND T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_ASSIGN T_AS T_ARROW T_ANY_TYPE TUnknown RDots LDots EOF ]
## Transitions:
-- On T_RCURLY shift to state 234
## Reductions:

State 234:
## Known stack suffix:
## T_LCURLY list(type_member) T_RCURLY
## LR(1) items:
object_type -> T_LCURLY list(type_member) T_RCURLY . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_READONLY T_RCURLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IN T_IMPORT T_IF T_ID T_GREATER_THAN T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_COLON T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_OR T_BIT_NOT T_BIT_AND T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_ASSIGN T_AS T_ARROW T_ANY_TYPE TUnknown RDots LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production object_type -> T_LCURLY list(type_member) T_RCURLY

State 235:
## Known stack suffix:
## T_COLON type_
## LR(1) items:
annotation -> T_COLON type_ . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_OF T_LCURLY T_IN T_COMMA T_ASSIGN T_ARROW EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annotation -> T_COLON type_

State 236:
## Known stack suffix:
## T_DOTS id complex_annotation
## LR(1) items:
rest_param_type -> T_DOTS id complex_annotation . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rest_param_type -> T_DOTS id complex_annotation

State 237:
## Known stack suffix:
## T_LPAREN_ARROW optl(param_type_list)
## LR(1) items:
type_ -> T_LPAREN_ARROW optl(param_type_list) . T_RPAREN T_ARROW type_ [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_RPAREN shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## T_LPAREN_ARROW optl(param_type_list) T_RPAREN
## LR(1) items:
type_ -> T_LPAREN_ARROW optl(param_type_list) T_RPAREN . T_ARROW type_ [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_ARROW shift to state 239
## Reductions:

State 239:
## Known stack suffix:
## T_LPAREN_ARROW optl(param_type_list) T_RPAREN T_ARROW
## LR(1) items:
type_ -> T_LPAREN_ARROW optl(param_type_list) T_RPAREN T_ARROW . type_ [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_PLING shift to state 149
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LPAREN_ARROW shift to state 152
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On union_type shift to state 186
-- On type_reference_aux shift to state 187
-- On type_name shift to state 144
-- On type_ shift to state 240
-- On primary_type2 shift to state 189
-- On primary_type shift to state 190
-- On primary_or_union_type shift to state 193
-- On primary_or_intersect_type shift to state 201
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On module_name shift to state 198
-- On intersect_type shift to state 208
## Reductions:

State 240:
## Known stack suffix:
## T_LPAREN_ARROW optl(param_type_list) T_RPAREN T_ARROW type_
## LR(1) items:
type_ -> T_LPAREN_ARROW optl(param_type_list) T_RPAREN T_ARROW type_ . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_ -> T_LPAREN_ARROW optl(param_type_list) T_RPAREN T_ARROW type_

State 241:
## Known stack suffix:
## T_PLING type_
## LR(1) items:
type_ -> T_PLING type_ . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_IN T_GREATER_THAN T_COMMA T_COLON T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_ -> T_PLING type_

State 242:
## Known stack suffix:
## type_name
## LR(1) items:
nominal_type1 -> type_name . type_arguments1 [ T_RSHIFT3 T_RSHIFT ]
nominal_type2 -> type_name . type_arguments2 [ T_RSHIFT3 ]
type_reference_aux -> type_name . [ T_RSHIFT3 T_RSHIFT T_LBRACKET T_GREATER_THAN T_COMMA T_BIT_OR T_BIT_AND ]
type_reference_aux -> type_name . type_arguments [ T_RSHIFT3 T_RSHIFT T_LBRACKET T_GREATER_THAN T_COMMA T_BIT_OR T_BIT_AND ]
## Transitions:
-- On T_LESS_THAN shift to state 243
-- On type_arguments2 shift to state 258
-- On type_arguments1 shift to state 259
-- On type_arguments shift to state 260
-- On mismatched_type_arguments shift to state 261
## Reductions:
-- On T_RSHIFT3 T_RSHIFT T_LBRACKET T_GREATER_THAN T_COMMA T_BIT_OR T_BIT_AND
--   reduce production type_reference_aux -> type_name

State 243:
## Known stack suffix:
## T_LESS_THAN
## LR(1) items:
mismatched_type_arguments -> T_LESS_THAN . type_argument_list1 T_RSHIFT [ T_RSHIFT3 T_RSHIFT T_LBRACKET T_GREATER_THAN T_COMMA T_BIT_OR T_BIT_AND ]
mismatched_type_arguments -> T_LESS_THAN . type_argument_list2 T_RSHIFT3 [ T_RSHIFT3 T_RSHIFT T_LBRACKET T_GREATER_THAN T_COMMA T_BIT_OR T_BIT_AND ]
type_arguments -> T_LESS_THAN . listc(type_argument) T_GREATER_THAN [ T_RSHIFT3 T_RSHIFT T_LBRACKET T_GREATER_THAN T_COMMA T_BIT_OR T_BIT_AND ]
type_arguments1 -> T_LESS_THAN . listc(type_argument) [ T_RSHIFT3 T_RSHIFT ]
type_arguments2 -> T_LESS_THAN . type_argument_list1 [ T_RSHIFT3 ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_PLING shift to state 149
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LPAREN_ARROW shift to state 152
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On union_type shift to state 186
-- On type_reference_aux shift to state 187
-- On type_name shift to state 242
-- On type_argument_list2 shift to state 244
-- On type_argument_list1 shift to state 246
-- On type_argument shift to state 248
-- On type_ shift to state 249
-- On primary_type2 shift to state 189
-- On primary_type shift to state 190
-- On primary_or_union_type shift to state 193
-- On primary_or_intersect_type shift to state 201
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On nominal_type2 shift to state 250
-- On nominal_type1 shift to state 251
-- On module_name shift to state 198
-- On listc(type_argument) shift to state 252
-- On intersect_type shift to state 208
## Reductions:

State 244:
## Known stack suffix:
## T_LESS_THAN type_argument_list2
## LR(1) items:
mismatched_type_arguments -> T_LESS_THAN type_argument_list2 . T_RSHIFT3 [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_RSHIFT3 shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## T_LESS_THAN type_argument_list2 T_RSHIFT3
## LR(1) items:
mismatched_type_arguments -> T_LESS_THAN type_argument_list2 T_RSHIFT3 . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mismatched_type_arguments -> T_LESS_THAN type_argument_list2 T_RSHIFT3

State 246:
## Known stack suffix:
## T_LESS_THAN type_argument_list1
## LR(1) items:
mismatched_type_arguments -> T_LESS_THAN type_argument_list1 . T_RSHIFT [ T_RSHIFT3 T_RSHIFT T_LBRACKET T_GREATER_THAN T_COMMA T_BIT_OR T_BIT_AND ]
type_arguments2 -> T_LESS_THAN type_argument_list1 . [ T_RSHIFT3 ]
## Transitions:
-- On T_RSHIFT shift to state 247
## Reductions:
-- On T_RSHIFT3
--   reduce production type_arguments2 -> T_LESS_THAN type_argument_list1

State 247:
## Known stack suffix:
## T_LESS_THAN type_argument_list1 T_RSHIFT
## LR(1) items:
mismatched_type_arguments -> T_LESS_THAN type_argument_list1 T_RSHIFT . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mismatched_type_arguments -> T_LESS_THAN type_argument_list1 T_RSHIFT

State 248:
## Known stack suffix:
## type_argument
## LR(1) items:
listc(type_argument) -> type_argument . [ T_RSHIFT3 T_RSHIFT T_GREATER_THAN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(type_argument) -> type_argument

State 249:
## Known stack suffix:
## type_
## LR(1) items:
type_argument -> type_ . [ T_RSHIFT3 T_RSHIFT T_GREATER_THAN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_argument -> type_

State 250:
## Known stack suffix:
## nominal_type2
## LR(1) items:
type_argument_list2 -> nominal_type2 . [ T_RSHIFT3 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_argument_list2 -> nominal_type2

State 251:
## Known stack suffix:
## nominal_type1
## LR(1) items:
type_argument_list1 -> nominal_type1 . [ T_RSHIFT3 T_RSHIFT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_argument_list1 -> nominal_type1

State 252:
## Known stack suffix:
## T_LESS_THAN listc(type_argument)
## LR(1) items:
listc(type_argument) -> listc(type_argument) . T_COMMA type_argument [ T_RSHIFT3 T_RSHIFT T_GREATER_THAN T_COMMA ]
type_argument_list1 -> listc(type_argument) . T_COMMA nominal_type1 [ T_RSHIFT3 T_RSHIFT ]
type_argument_list2 -> listc(type_argument) . T_COMMA nominal_type2 [ T_RSHIFT3 ]
type_arguments -> T_LESS_THAN listc(type_argument) . T_GREATER_THAN [ T_RSHIFT3 T_RSHIFT T_LBRACKET T_GREATER_THAN T_COMMA T_BIT_OR T_BIT_AND ]
type_arguments1 -> T_LESS_THAN listc(type_argument) . [ T_RSHIFT3 T_RSHIFT ]
## Transitions:
-- On T_GREATER_THAN shift to state 253
-- On T_COMMA shift to state 254
## Reductions:
-- On T_RSHIFT3 T_RSHIFT
--   reduce production type_arguments1 -> T_LESS_THAN listc(type_argument)

State 253:
## Known stack suffix:
## T_LESS_THAN listc(type_argument) T_GREATER_THAN
## LR(1) items:
type_arguments -> T_LESS_THAN listc(type_argument) T_GREATER_THAN . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_arguments -> T_LESS_THAN listc(type_argument) T_GREATER_THAN

State 254:
## Known stack suffix:
## listc(type_argument) T_COMMA
## LR(1) items:
listc(type_argument) -> listc(type_argument) T_COMMA . type_argument [ T_RSHIFT3 T_RSHIFT T_GREATER_THAN T_COMMA ]
type_argument_list1 -> listc(type_argument) T_COMMA . nominal_type1 [ T_RSHIFT3 T_RSHIFT ]
type_argument_list2 -> listc(type_argument) T_COMMA . nominal_type2 [ T_RSHIFT3 ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_PLING shift to state 149
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LPAREN_ARROW shift to state 152
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On union_type shift to state 186
-- On type_reference_aux shift to state 187
-- On type_name shift to state 242
-- On type_argument shift to state 255
-- On type_ shift to state 249
-- On primary_type2 shift to state 189
-- On primary_type shift to state 190
-- On primary_or_union_type shift to state 193
-- On primary_or_intersect_type shift to state 201
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On nominal_type2 shift to state 256
-- On nominal_type1 shift to state 257
-- On module_name shift to state 198
-- On intersect_type shift to state 208
## Reductions:

State 255:
## Known stack suffix:
## listc(type_argument) T_COMMA type_argument
## LR(1) items:
listc(type_argument) -> listc(type_argument) T_COMMA type_argument . [ T_RSHIFT3 T_RSHIFT T_GREATER_THAN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(type_argument) -> listc(type_argument) T_COMMA type_argument

State 256:
## Known stack suffix:
## listc(type_argument) T_COMMA nominal_type2
## LR(1) items:
type_argument_list2 -> listc(type_argument) T_COMMA nominal_type2 . [ T_RSHIFT3 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_argument_list2 -> listc(type_argument) T_COMMA nominal_type2

State 257:
## Known stack suffix:
## listc(type_argument) T_COMMA nominal_type1
## LR(1) items:
type_argument_list1 -> listc(type_argument) T_COMMA nominal_type1 . [ T_RSHIFT3 T_RSHIFT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_argument_list1 -> listc(type_argument) T_COMMA nominal_type1

State 258:
## Known stack suffix:
## type_name type_arguments2
## LR(1) items:
nominal_type2 -> type_name type_arguments2 . [ T_RSHIFT3 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nominal_type2 -> type_name type_arguments2

State 259:
## Known stack suffix:
## type_name type_arguments1
## LR(1) items:
nominal_type1 -> type_name type_arguments1 . [ T_RSHIFT3 T_RSHIFT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nominal_type1 -> type_name type_arguments1

State 260:
## Known stack suffix:
## type_name type_arguments
## LR(1) items:
type_reference_aux -> type_name type_arguments . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_reference_aux -> type_name type_arguments

State 261:
## Known stack suffix:
## mismatched_type_arguments
## LR(1) items:
type_arguments -> mismatched_type_arguments . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_arguments -> mismatched_type_arguments

State 262:
## Known stack suffix:
## T_LESS_THAN type_argument_list1
## LR(1) items:
mismatched_type_arguments -> T_LESS_THAN type_argument_list1 . T_RSHIFT [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_RSHIFT shift to state 247
## Reductions:

State 263:
## Known stack suffix:
## T_LESS_THAN listc(type_argument)
## LR(1) items:
listc(type_argument) -> listc(type_argument) . T_COMMA type_argument [ T_GREATER_THAN T_COMMA ]
type_argument_list1 -> listc(type_argument) . T_COMMA nominal_type1 [ T_RSHIFT ]
type_argument_list2 -> listc(type_argument) . T_COMMA nominal_type2 [ T_RSHIFT3 ]
type_arguments -> T_LESS_THAN listc(type_argument) . T_GREATER_THAN [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_OF T_LCURLY T_LBRACKET T_IN T_IMPLEMENTS T_GREATER_THAN T_COMMA T_COLON T_BIT_OR T_BIT_AND T_ASSIGN T_ARROW RDots EOF ]
## Transitions:
-- On T_GREATER_THAN shift to state 253
-- On T_COMMA shift to state 254
## Reductions:

State 264:
## Known stack suffix:
## option(extends_clause)
## LR(1) items:
class_heritage -> option(extends_clause) . optl(implements_clause) [ T_LCURLY EOF ]
## Transitions:
-- On T_IMPLEMENTS shift to state 265
-- On optl(implements_clause) shift to state 267
-- On implements_clause shift to state 268
## Reductions:
-- On T_LCURLY EOF
--   reduce production optl(implements_clause) ->

State 265:
## Known stack suffix:
## T_IMPLEMENTS
## LR(1) items:
implements_clause -> T_IMPLEMENTS . listc(type_) [ T_LCURLY EOF ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_PLING shift to state 149
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LPAREN_ARROW shift to state 152
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On union_type shift to state 186
-- On type_reference_aux shift to state 187
-- On type_name shift to state 144
-- On type_ shift to state 188
-- On primary_type2 shift to state 189
-- On primary_type shift to state 190
-- On primary_or_union_type shift to state 193
-- On primary_or_intersect_type shift to state 201
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On module_name shift to state 198
-- On listc(type_) shift to state 266
-- On intersect_type shift to state 208
## Reductions:

State 266:
## Known stack suffix:
## T_IMPLEMENTS listc(type_)
## LR(1) items:
implements_clause -> T_IMPLEMENTS listc(type_) . [ T_LCURLY EOF ]
listc(type_) -> listc(type_) . T_COMMA type_ [ T_LCURLY T_COMMA EOF ]
## Transitions:
-- On T_COMMA shift to state 206
## Reductions:
-- On T_LCURLY EOF
--   reduce production implements_clause -> T_IMPLEMENTS listc(type_)

State 267:
## Known stack suffix:
## option(extends_clause) optl(implements_clause)
## LR(1) items:
class_heritage -> option(extends_clause) optl(implements_clause) . [ T_LCURLY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_heritage -> option(extends_clause) optl(implements_clause)

State 268:
## Known stack suffix:
## implements_clause
## LR(1) items:
optl(implements_clause) -> implements_clause . [ T_LCURLY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optl(implements_clause) -> implements_clause

State 269:
## Known stack suffix:
## extends_clause
## LR(1) items:
option(extends_clause) -> extends_clause . [ T_LCURLY T_IMPLEMENTS EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(extends_clause) -> extends_clause

State 270:
## Known stack suffix:
## T_CLASS option(binding_id) option(generics) class_heritage
## LR(1) items:
class_expr -> T_CLASS option(binding_id) option(generics) class_heritage . class_body [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_LCURLY shift to state 271
-- On class_body shift to state 956
## Reductions:

State 271:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
class_body -> T_LCURLY . list(class_element) T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SET T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_READONLY T_RCURLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NUMBER_TYPE T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MODULE T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN_ARROW T_LPAREN T_LET T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_INCR T_IN T_IMPORT T_IF T_ID T_GREATER_THAN_EQUAL T_GREATER_THAN T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_EXPONENT T_EQUAL T_ENUM T_DOTS T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_COLON T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_ASSIGN T_AS T_ANY_TYPE T_AND TUnknown RDots LDots EOF ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 272
-- On T_SET shift to state 96
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 273
-- On T_PUBLIC shift to state 274
-- On T_PROTECTED shift to state 275
-- On T_PRIVATE shift to state 276
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MULT shift to state 98
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 100
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DOTS shift to state 277
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 285
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On sc shift to state 904
-- On property_name shift to state 905
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On nonempty_list(decorator) shift to state 913
-- On method_get_set_star shift to state 937
-- On method_definition shift to state 943
-- On list(class_element) shift to state 944
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 733
-- On decorator shift to state 768
-- On class_element shift to state 946
-- On access_modifiers shift to state 948
-- On access_modifier shift to state 955
## Reductions:
-- On T_RCURLY
--   reduce production list(class_element) ->

State 272:
## Known stack suffix:
## T_STATIC
## LR(1) items:
access_modifier -> T_STATIC . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
ident_keyword_bis -> T_STATIC . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_LPAREN T_LESS_THAN T_COLON T_ASSIGN ]
## Transitions:
## Reductions:
-- On T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE
--   reduce production access_modifier -> T_STATIC
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_LPAREN T_LESS_THAN T_COLON T_ASSIGN
--   reduce production ident_keyword_bis -> T_STATIC

State 273:
## Known stack suffix:
## T_READONLY
## LR(1) items:
access_modifier -> T_READONLY . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
ident_semi_keyword -> T_READONLY . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_LPAREN T_LESS_THAN T_COLON T_ASSIGN ]
## Transitions:
## Reductions:
-- On T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE
--   reduce production access_modifier -> T_READONLY
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_LPAREN T_LESS_THAN T_COLON T_ASSIGN
--   reduce production ident_semi_keyword -> T_READONLY

State 274:
## Known stack suffix:
## T_PUBLIC
## LR(1) items:
access_modifier -> T_PUBLIC . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
ident_semi_keyword -> T_PUBLIC . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_LPAREN T_LESS_THAN T_COLON T_ASSIGN ]
## Transitions:
## Reductions:
-- On T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE
--   reduce production access_modifier -> T_PUBLIC
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_LPAREN T_LESS_THAN T_COLON T_ASSIGN
--   reduce production ident_semi_keyword -> T_PUBLIC

State 275:
## Known stack suffix:
## T_PROTECTED
## LR(1) items:
access_modifier -> T_PROTECTED . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
ident_semi_keyword -> T_PROTECTED . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_LPAREN T_LESS_THAN T_COLON T_ASSIGN ]
## Transitions:
## Reductions:
-- On T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE
--   reduce production access_modifier -> T_PROTECTED
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_LPAREN T_LESS_THAN T_COLON T_ASSIGN
--   reduce production ident_semi_keyword -> T_PROTECTED

State 276:
## Known stack suffix:
## T_PRIVATE
## LR(1) items:
access_modifier -> T_PRIVATE . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
ident_semi_keyword -> T_PRIVATE . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_LPAREN T_LESS_THAN T_COLON T_ASSIGN ]
## Transitions:
## Reductions:
-- On T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE
--   reduce production access_modifier -> T_PRIVATE
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_LPAREN T_LESS_THAN T_COLON T_ASSIGN
--   reduce production ident_semi_keyword -> T_PRIVATE

State 277:
## Known stack suffix:
## T_DOTS
## LR(1) items:
class_element -> T_DOTS . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_element -> T_DOTS

State 278:
## Known stack suffix:
## T_AT
## LR(1) items:
decorator -> T_AT . decorator_name option(arguments) [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_ID shift to state 279
-- On decorator_name shift to state 280
## Reductions:

State 279:
## Known stack suffix:
## T_ID
## LR(1) items:
decorator_name -> T_ID . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PERIOD T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LPAREN T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decorator_name -> T_ID

State 280:
## Known stack suffix:
## T_AT decorator_name
## LR(1) items:
decorator -> T_AT decorator_name . option(arguments) [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
decorator_name -> decorator_name . T_PERIOD T_ID [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PERIOD T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LPAREN T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_PERIOD shift to state 281
-- On T_LPAREN shift to state 80
-- On option(arguments) shift to state 283
-- On arguments shift to state 284
## Reductions:
-- On T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE
--   reduce production option(arguments) ->

State 281:
## Known stack suffix:
## decorator_name T_PERIOD
## LR(1) items:
decorator_name -> decorator_name T_PERIOD . T_ID [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PERIOD T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LPAREN T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_ID shift to state 282
## Reductions:

State 282:
## Known stack suffix:
## decorator_name T_PERIOD T_ID
## LR(1) items:
decorator_name -> decorator_name T_PERIOD T_ID . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PERIOD T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LPAREN T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decorator_name -> decorator_name T_PERIOD T_ID

State 283:
## Known stack suffix:
## T_AT decorator_name option(arguments)
## LR(1) items:
decorator -> T_AT decorator_name option(arguments) . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decorator -> T_AT decorator_name option(arguments)

State 284:
## Known stack suffix:
## arguments
## LR(1) items:
option(arguments) -> arguments . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(arguments) -> arguments

State 285:
## Known stack suffix:
## T_ASYNC
## LR(1) items:
ident_semi_keyword -> T_ASYNC . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_LPAREN T_LESS_THAN T_COMMA T_COLON T_ASSIGN ]
method_definition -> T_ASYNC . property_name call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
method_definition -> T_ASYNC . method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 96
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MULT shift to state 98
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 100
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name shift to state 287
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On method_get_set_star shift to state 898
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 733
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_LPAREN T_LESS_THAN T_COMMA T_COLON T_ASSIGN
--   reduce production ident_semi_keyword -> T_ASYNC

State 286:
## Known stack suffix:
## string_literal
## LR(1) items:
property_name -> string_literal . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_LPAREN T_LESS_THAN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name -> string_literal

State 287:
## Known stack suffix:
## T_ASYNC property_name
## LR(1) items:
method_definition -> T_ASYNC property_name . call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 288
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 288:
## Known stack suffix:
## T_ASYNC property_name call_signature
## LR(1) items:
method_definition -> T_ASYNC property_name call_signature . T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LCURLY shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## T_ASYNC property_name call_signature T_LCURLY
## LR(1) items:
method_definition -> T_ASYNC property_name call_signature T_LCURLY . function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 896
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 290:
## Known stack suffix:
## T_YIELD
## LR(1) items:
assignment_expr_no_stmt -> T_YIELD . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
assignment_expr_no_stmt -> T_YIELD . assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
assignment_expr_no_stmt -> T_YIELD . T_MULT assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MULT shift to state 291
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 895
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF
--   reduce production assignment_expr_no_stmt -> T_YIELD

State 291:
## Known stack suffix:
## T_YIELD T_MULT
## LR(1) items:
assignment_expr_no_stmt -> T_YIELD T_MULT . assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 894
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 292:
## Known stack suffix:
## T_BIT_NOT
## LR(1) items:
pre_in_expr(d1) -> T_BIT_NOT . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 893
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 293:
## Known stack suffix:
## T_BACKQUOTE
## LR(1) items:
template_literal -> T_BACKQUOTE . list(encaps) T_BACKQUOTE [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_ENCAPSED_STRING shift to state 294
-- On T_DOLLARCURLY shift to state 295
-- On list(encaps) shift to state 889
-- On encaps shift to state 891
## Reductions:
-- On T_BACKQUOTE
--   reduce production list(encaps) ->

State 294:
## Known stack suffix:
## T_ENCAPSED_STRING
## LR(1) items:
encaps -> T_ENCAPSED_STRING . [ T_ENCAPSED_STRING T_DOLLARCURLY T_BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production encaps -> T_ENCAPSED_STRING

State 295:
## Known stack suffix:
## T_DOLLARCURLY
## LR(1) items:
encaps -> T_DOLLARCURLY . expr T_RCURLY [ T_ENCAPSED_STRING T_DOLLARCURLY T_BACKQUOTE ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 887
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 296:
## Known stack suffix:
## T_AWAIT
## LR(1) items:
pre_in_expr(d1) -> T_AWAIT . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 886
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 297:
## Known stack suffix:
## T_ASYNC
## LR(1) items:
async_function_expr -> T_ASYNC . T_FUNCTION option(id) call_signature T_LCURLY function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
ident_semi_keyword -> T_ASYNC . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_FUNCTION shift to state 298
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF
--   reduce production ident_semi_keyword -> T_ASYNC

State 298:
## Known stack suffix:
## T_ASYNC T_FUNCTION
## LR(1) items:
async_function_expr -> T_ASYNC T_FUNCTION . option(id) call_signature T_LCURLY function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(id) shift to state 299
-- On ident_semi_keyword shift to state 75
-- On id shift to state 592
## Reductions:
-- On T_LPAREN T_LESS_THAN
--   reduce production option(id) ->

State 299:
## Known stack suffix:
## T_ASYNC T_FUNCTION option(id)
## LR(1) items:
async_function_expr -> T_ASYNC T_FUNCTION option(id) . call_signature T_LCURLY function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 300
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 300:
## Known stack suffix:
## T_ASYNC T_FUNCTION option(id) call_signature
## LR(1) items:
async_function_expr -> T_ASYNC T_FUNCTION option(id) call_signature . T_LCURLY function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_LCURLY shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## T_ASYNC T_FUNCTION option(id) call_signature T_LCURLY
## LR(1) items:
async_function_expr -> T_ASYNC T_FUNCTION option(id) call_signature T_LCURLY . function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 884
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 302:
## Known stack suffix:
## T_WITH
## LR(1) items:
with_stmt -> T_WITH . T_LPAREN expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_LPAREN shift to state 303
## Reductions:

State 303:
## Known stack suffix:
## T_WITH T_LPAREN
## LR(1) items:
with_stmt -> T_WITH T_LPAREN . expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 881
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 304:
## Known stack suffix:
## T_ASYNC
## LR(1) items:
arrow_function -> T_ASYNC . id T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
arrow_function -> T_ASYNC . T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
async_function_expr -> T_ASYNC . T_FUNCTION option(id) call_signature T_LCURLY function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
ident_semi_keyword -> T_ASYNC . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND RDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LPAREN_ARROW shift to state 305
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 298
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 601
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_ARROW T_AND RDots EOF
--   reduce production ident_semi_keyword -> T_ASYNC

State 305:
## Known stack suffix:
## T_ASYNC T_LPAREN_ARROW
## LR(1) items:
arrow_function -> T_ASYNC T_LPAREN_ARROW . formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DOTS shift to state 306
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On object_binding_pattern shift to state 123
-- On ident_semi_keyword shift to state 75
-- On id shift to state 309
-- On formal_parameter_list_opt shift to state 315
-- On formal_parameter_list shift to state 873
-- On formal_parameter shift to state 880
-- On binding_pattern shift to state 876
-- On array_binding_pattern shift to state 127
## Reductions:
-- On T_RPAREN
--   reduce production formal_parameter_list_opt ->

State 306:
## Known stack suffix:
## T_DOTS
## LR(1) items:
formal_parameter -> T_DOTS . id [ T_RPAREN T_COMMA ]
formal_parameter -> T_DOTS . id annotation [ T_RPAREN T_COMMA ]
formal_parameter -> T_DOTS . [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 307
## Reductions:
-- On T_RPAREN T_COMMA
--   reduce production formal_parameter -> T_DOTS

State 307:
## Known stack suffix:
## T_DOTS id
## LR(1) items:
formal_parameter -> T_DOTS id . [ T_RPAREN T_COMMA ]
formal_parameter -> T_DOTS id . annotation [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_COLON shift to state 155
-- On annotation shift to state 308
## Reductions:
-- On T_RPAREN T_COMMA
--   reduce production formal_parameter -> T_DOTS id

State 308:
## Known stack suffix:
## T_DOTS id annotation
## LR(1) items:
formal_parameter -> T_DOTS id annotation . [ T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_parameter -> T_DOTS id annotation

State 309:
## Known stack suffix:
## id
## LR(1) items:
formal_parameter -> id . [ T_RPAREN T_COMMA ]
formal_parameter -> id . initializeur [ T_RPAREN T_COMMA ]
formal_parameter -> id . annotation [ T_RPAREN T_COMMA ]
formal_parameter -> id . T_PLING [ T_RPAREN T_COMMA ]
formal_parameter -> id . T_PLING annotation [ T_RPAREN T_COMMA ]
formal_parameter -> id . annotation initializeur [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_PLING shift to state 310
-- On T_COLON shift to state 155
-- On T_ASSIGN shift to state 132
-- On initializeur shift to state 312
-- On annotation shift to state 313
## Reductions:
-- On T_RPAREN T_COMMA
--   reduce production formal_parameter -> id

State 310:
## Known stack suffix:
## id T_PLING
## LR(1) items:
formal_parameter -> id T_PLING . [ T_RPAREN T_COMMA ]
formal_parameter -> id T_PLING . annotation [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_COLON shift to state 155
-- On annotation shift to state 311
## Reductions:
-- On T_RPAREN T_COMMA
--   reduce production formal_parameter -> id T_PLING

State 311:
## Known stack suffix:
## id T_PLING annotation
## LR(1) items:
formal_parameter -> id T_PLING annotation . [ T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_parameter -> id T_PLING annotation

State 312:
## Known stack suffix:
## id initializeur
## LR(1) items:
formal_parameter -> id initializeur . [ T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_parameter -> id initializeur

State 313:
## Known stack suffix:
## id annotation
## LR(1) items:
formal_parameter -> id annotation . [ T_RPAREN T_COMMA ]
formal_parameter -> id annotation . initializeur [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_ASSIGN shift to state 132
-- On initializeur shift to state 314
## Reductions:
-- On T_RPAREN T_COMMA
--   reduce production formal_parameter -> id annotation

State 314:
## Known stack suffix:
## id annotation initializeur
## LR(1) items:
formal_parameter -> id annotation initializeur . [ T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_parameter -> id annotation initializeur

State 315:
## Known stack suffix:
## T_ASYNC T_LPAREN_ARROW formal_parameter_list_opt
## LR(1) items:
arrow_function -> T_ASYNC T_LPAREN_ARROW formal_parameter_list_opt . T_RPAREN option(annotation) T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_RPAREN shift to state 316
## Reductions:

State 316:
## Known stack suffix:
## T_ASYNC T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN
## LR(1) items:
arrow_function -> T_ASYNC T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN . option(annotation) T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_COLON shift to state 155
-- On option(annotation) shift to state 317
-- On annotation shift to state 432
## Reductions:
-- On T_ARROW
--   reduce production option(annotation) ->

State 317:
## Known stack suffix:
## T_ASYNC T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation)
## LR(1) items:
arrow_function -> T_ASYNC T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) . T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_ARROW shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## T_ASYNC T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW
## LR(1) items:
arrow_function -> T_ASYNC T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW . arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 319
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 603
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 784
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On function_expr shift to state 785
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On boolean_literal shift to state 386
-- On block shift to state 786
-- On assignment_expr_no_stmt shift to state 787
-- On arrow_function shift to state 728
-- On arrow_body shift to state 872
-- On array_literal shift to state 388
## Reductions:

State 319:
## Known stack suffix:
## T_VOID
## LR(1) items:
pre_in_expr(primary_no_stmt) -> T_VOID . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 871
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 320:
## Known stack suffix:
## LDots
## LR(1) items:
primary_expr_no_braces -> LDots . expr RDots [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 869
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 321:
## Known stack suffix:
## xhp_html
## LR(1) items:
primary_expr_no_braces -> xhp_html . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr_no_braces -> xhp_html

State 322:
## Known stack suffix:
## template_literal
## LR(1) items:
primary_expr_no_braces -> template_literal . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr_no_braces -> template_literal

State 323:
## Known stack suffix:
## string_literal
## LR(1) items:
primary_expr_no_braces -> string_literal . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr_no_braces -> string_literal

State 324:
## Known stack suffix:
## regex_literal
## LR(1) items:
primary_expr_no_braces -> regex_literal . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr_no_braces -> regex_literal

State 325:
## Known stack suffix:
## primary_with_stmt
## LR(1) items:
d1 -> primary_with_stmt . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production d1 -> primary_with_stmt

State 326:
## Known stack suffix:
## primary_expr_no_braces
## LR(1) items:
primary_expr(d1) -> primary_expr_no_braces . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr(d1) -> primary_expr_no_braces

State 327:
## Known stack suffix:
## primary_expr(d1)
## LR(1) items:
member_expr(d1) -> primary_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(d1) -> primary_expr(d1)

State 328:
## Known stack suffix:
## pre_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_RSHIFT3 shift to state 329
-- On T_RSHIFT shift to state 503
-- On T_PLUS shift to state 331
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_MINUS shift to state 505
-- On T_LSHIFT shift to state 507
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production post_in_expr(d1) -> pre_in_expr(d1)

State 329:
## Known stack suffix:
## pre_in_expr(d1) T_RSHIFT3
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) T_RSHIFT3 . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 330
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 330:
## Known stack suffix:
## pre_in_expr(d1) T_RSHIFT3 pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) T_RSHIFT3 pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_PLUS shift to state 331
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_MINUS shift to state 505
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> pre_in_expr(d1) T_RSHIFT3 pre_in_expr(d1)

State 331:
## Known stack suffix:
## pre_in_expr(d1) T_PLUS
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) T_PLUS . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 332
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 332:
## Known stack suffix:
## pre_in_expr(d1) T_PLUS pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) T_PLUS pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> pre_in_expr(d1) T_PLUS pre_in_expr(d1)

State 333:
## Known stack suffix:
## pre_in_expr(d1) T_MULT
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) T_MULT . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 334
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 334:
## Known stack suffix:
## pre_in_expr(d1) T_MULT pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) T_MULT pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> pre_in_expr(d1) T_MULT pre_in_expr(d1)

State 335:
## Known stack suffix:
## pre_in_expr(d1) T_INCR
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) T_INCR . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pre_in_expr(d1) -> pre_in_expr(d1) T_INCR

State 336:
## Known stack suffix:
## pre_in_expr(d1) T_EXPONENT
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) T_EXPONENT . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 337
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 337:
## Known stack suffix:
## pre_in_expr(d1) T_EXPONENT pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) T_EXPONENT pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> pre_in_expr(d1) T_EXPONENT pre_in_expr(d1)

State 338:
## Known stack suffix:
## pre_in_expr(d1) T_DECR
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) T_DECR . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pre_in_expr(d1) -> pre_in_expr(d1) T_DECR

State 339:
## Known stack suffix:
## object_literal
## LR(1) items:
primary_with_stmt -> object_literal . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_with_stmt -> object_literal

State 340:
## Known stack suffix:
## numeric_literal
## LR(1) items:
primary_expr_no_braces -> numeric_literal . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr_no_braces -> numeric_literal

State 341:
## Known stack suffix:
## null_literal
## LR(1) items:
primary_expr_no_braces -> null_literal . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr_no_braces -> null_literal

State 342:
## Known stack suffix:
## new_expr(d1)
## LR(1) items:
left_hand_side_expr_(d1) -> new_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production left_hand_side_expr_(d1) -> new_expr(d1)

State 343:
## Known stack suffix:
## member_expr(d1)
## LR(1) items:
call_expr(d1) -> member_expr(d1) . arguments [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
member_expr(d1) -> member_expr(d1) . T_LBRACKET expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
member_expr(d1) -> member_expr(d1) . T_PERIOD field_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
member_expr(d1) -> member_expr(d1) . template_literal [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
member_expr(d1) -> member_expr(d1) . T_PERIOD T_DOTS [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
new_expr(d1) -> member_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_PERIOD shift to state 344
-- On T_LPAREN shift to state 80
-- On T_LBRACKET shift to state 347
-- On T_BACKQUOTE shift to state 293
-- On template_literal shift to state 414
-- On arguments shift to state 868
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AS T_AND RDots EOF
--   reduce production new_expr(d1) -> member_expr(d1)

State 344:
## Known stack suffix:
## member_expr(d1) T_PERIOD
## LR(1) items:
member_expr(d1) -> member_expr(d1) T_PERIOD . field_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
member_expr(d1) -> member_expr(d1) T_PERIOD . T_DOTS [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_INTERFACE shift to state 43
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DOTS shift to state 345
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 77
-- On id shift to state 78
-- On field_name shift to state 346
## Reductions:

State 345:
## Known stack suffix:
## member_expr(d1) T_PERIOD T_DOTS
## LR(1) items:
member_expr(d1) -> member_expr(d1) T_PERIOD T_DOTS . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(d1) -> member_expr(d1) T_PERIOD T_DOTS

State 346:
## Known stack suffix:
## member_expr(d1) T_PERIOD field_name
## LR(1) items:
member_expr(d1) -> member_expr(d1) T_PERIOD field_name . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(d1) -> member_expr(d1) T_PERIOD field_name

State 347:
## Known stack suffix:
## member_expr(d1) T_LBRACKET
## LR(1) items:
member_expr(d1) -> member_expr(d1) T_LBRACKET . expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 866
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 348:
## Known stack suffix:
## post_in_expr(d1)
## LR(1) items:
conditional_expr(d1) -> post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
conditional_expr(d1) -> post_in_expr(d1) . T_PLING assignment_expr T_COLON assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_PLING shift to state 860
-- On T_OR shift to state 864
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
-- On T_BIT_XOR shift to state 540
-- On T_BIT_OR shift to state 544
-- On T_BIT_AND shift to state 542
-- On T_AND shift to state 546
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF
--   reduce production conditional_expr(d1) -> post_in_expr(d1)

State 349:
## Known stack suffix:
## post_in_expr(d1) T_STRICT_NOT_EQUAL
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_STRICT_NOT_EQUAL . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 350
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 350:
## Known stack suffix:
## post_in_expr(d1) T_STRICT_NOT_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_STRICT_NOT_EQUAL post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production post_in_expr(d1) -> post_in_expr(d1) T_STRICT_NOT_EQUAL post_in_expr(d1)

State 351:
## Known stack suffix:
## post_in_expr(d1) T_LESS_THAN_EQUAL
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_LESS_THAN_EQUAL . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 352
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 352:
## Known stack suffix:
## post_in_expr(d1) T_LESS_THAN_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_LESS_THAN_EQUAL post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expr(d1) -> post_in_expr(d1) T_LESS_THAN_EQUAL post_in_expr(d1)

State 353:
## Known stack suffix:
## left_hand_side_expr_(d1)
## LR(1) items:
pre_in_expr(d1) -> left_hand_side_expr_(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pre_in_expr(d1) -> left_hand_side_expr_(d1)

State 354:
## Known stack suffix:
## id
## LR(1) items:
primary_expr_no_braces -> id . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr_no_braces -> id

State 355:
## Known stack suffix:
## generator_expr
## LR(1) items:
primary_with_stmt -> generator_expr . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_with_stmt -> generator_expr

State 356:
## Known stack suffix:
## function_expr
## LR(1) items:
primary_with_stmt -> function_expr . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_with_stmt -> function_expr

State 357:
## Known stack suffix:
## d1
## LR(1) items:
primary_expr(d1) -> d1 . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr(d1) -> d1

State 358:
## Known stack suffix:
## class_expr
## LR(1) items:
primary_with_stmt -> class_expr . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_with_stmt -> class_expr

State 359:
## Known stack suffix:
## call_expr(d1)
## LR(1) items:
call_expr(d1) -> call_expr(d1) . arguments [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
call_expr(d1) -> call_expr(d1) . T_LBRACKET expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
call_expr(d1) -> call_expr(d1) . T_PERIOD method_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
call_expr(d1) -> call_expr(d1) . template_literal [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
call_expr(d1) -> call_expr(d1) . T_PERIOD T_DOTS [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
left_hand_side_expr_(d1) -> call_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_PERIOD shift to state 360
-- On T_LPAREN shift to state 80
-- On T_LBRACKET shift to state 365
-- On T_BACKQUOTE shift to state 293
-- On template_literal shift to state 858
-- On arguments shift to state 859
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AS T_AND RDots EOF
--   reduce production left_hand_side_expr_(d1) -> call_expr(d1)

State 360:
## Known stack suffix:
## call_expr(d1) T_PERIOD
## LR(1) items:
call_expr(d1) -> call_expr(d1) T_PERIOD . method_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
call_expr(d1) -> call_expr(d1) T_PERIOD . T_DOTS [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_INTERFACE shift to state 43
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DOTS shift to state 361
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On method_name shift to state 362
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 363
-- On id shift to state 364
## Reductions:

State 361:
## Known stack suffix:
## call_expr(d1) T_PERIOD T_DOTS
## LR(1) items:
call_expr(d1) -> call_expr(d1) T_PERIOD T_DOTS . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expr(d1) -> call_expr(d1) T_PERIOD T_DOTS

State 362:
## Known stack suffix:
## call_expr(d1) T_PERIOD method_name
## LR(1) items:
call_expr(d1) -> call_expr(d1) T_PERIOD method_name . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expr(d1) -> call_expr(d1) T_PERIOD method_name

State 363:
## Known stack suffix:
## ident_keyword
## LR(1) items:
method_name -> ident_keyword . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_name -> ident_keyword

State 364:
## Known stack suffix:
## id
## LR(1) items:
method_name -> id . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_name -> id

State 365:
## Known stack suffix:
## call_expr(d1) T_LBRACKET
## LR(1) items:
call_expr(d1) -> call_expr(d1) T_LBRACKET . expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 856
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 366:
## Known stack suffix:
## left_hand_side_expr_(d1)
## LR(1) items:
assignment_expr -> left_hand_side_expr_(d1) . assignment_operator assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
assignment_expr -> left_hand_side_expr_(d1) . T_AS type_ [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
pre_in_expr(d1) -> left_hand_side_expr_(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_RSHIFT_ASSIGN shift to state 367
-- On T_RSHIFT3_ASSIGN shift to state 368
-- On T_PLUS_ASSIGN shift to state 369
-- On T_MULT_ASSIGN shift to state 370
-- On T_MOD_ASSIGN shift to state 371
-- On T_MINUS_ASSIGN shift to state 372
-- On T_LSHIFT_ASSIGN shift to state 373
-- On T_DIV_ASSIGN shift to state 374
-- On T_BIT_XOR_ASSIGN shift to state 375
-- On T_BIT_OR_ASSIGN shift to state 376
-- On T_BIT_AND_ASSIGN shift to state 377
-- On T_ASSIGN shift to state 378
-- On T_AS shift to state 379
-- On assignment_operator shift to state 381
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> left_hand_side_expr_(d1)

State 367:
## Known stack suffix:
## T_RSHIFT_ASSIGN
## LR(1) items:
assignment_operator -> T_RSHIFT_ASSIGN . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_RSHIFT_ASSIGN

State 368:
## Known stack suffix:
## T_RSHIFT3_ASSIGN
## LR(1) items:
assignment_operator -> T_RSHIFT3_ASSIGN . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_RSHIFT3_ASSIGN

State 369:
## Known stack suffix:
## T_PLUS_ASSIGN
## LR(1) items:
assignment_operator -> T_PLUS_ASSIGN . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_PLUS_ASSIGN

State 370:
## Known stack suffix:
## T_MULT_ASSIGN
## LR(1) items:
assignment_operator -> T_MULT_ASSIGN . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_MULT_ASSIGN

State 371:
## Known stack suffix:
## T_MOD_ASSIGN
## LR(1) items:
assignment_operator -> T_MOD_ASSIGN . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_MOD_ASSIGN

State 372:
## Known stack suffix:
## T_MINUS_ASSIGN
## LR(1) items:
assignment_operator -> T_MINUS_ASSIGN . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_MINUS_ASSIGN

State 373:
## Known stack suffix:
## T_LSHIFT_ASSIGN
## LR(1) items:
assignment_operator -> T_LSHIFT_ASSIGN . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_LSHIFT_ASSIGN

State 374:
## Known stack suffix:
## T_DIV_ASSIGN
## LR(1) items:
assignment_operator -> T_DIV_ASSIGN . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_DIV_ASSIGN

State 375:
## Known stack suffix:
## T_BIT_XOR_ASSIGN
## LR(1) items:
assignment_operator -> T_BIT_XOR_ASSIGN . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_BIT_XOR_ASSIGN

State 376:
## Known stack suffix:
## T_BIT_OR_ASSIGN
## LR(1) items:
assignment_operator -> T_BIT_OR_ASSIGN . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_BIT_OR_ASSIGN

State 377:
## Known stack suffix:
## T_BIT_AND_ASSIGN
## LR(1) items:
assignment_operator -> T_BIT_AND_ASSIGN . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_BIT_AND_ASSIGN

State 378:
## Known stack suffix:
## T_ASSIGN
## LR(1) items:
assignment_operator -> T_ASSIGN . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_ASSIGN

State 379:
## Known stack suffix:
## left_hand_side_expr_(d1) T_AS
## LR(1) items:
assignment_expr -> left_hand_side_expr_(d1) T_AS . type_ [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_PLING shift to state 149
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LPAREN_ARROW shift to state 152
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On union_type shift to state 186
-- On type_reference_aux shift to state 187
-- On type_name shift to state 144
-- On type_ shift to state 380
-- On primary_type2 shift to state 189
-- On primary_type shift to state 190
-- On primary_or_union_type shift to state 193
-- On primary_or_intersect_type shift to state 201
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On module_name shift to state 198
-- On intersect_type shift to state 208
## Reductions:

State 380:
## Known stack suffix:
## left_hand_side_expr_(d1) T_AS type_
## LR(1) items:
assignment_expr -> left_hand_side_expr_(d1) T_AS type_ . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expr -> left_hand_side_expr_(d1) T_AS type_

State 381:
## Known stack suffix:
## left_hand_side_expr_(d1) assignment_operator
## LR(1) items:
assignment_expr -> left_hand_side_expr_(d1) assignment_operator . assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 855
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 382:
## Known stack suffix:
## id
## LR(1) items:
arrow_function -> id . T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
primary_expr_no_braces -> id . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_ARROW shift to state 383
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF
--   reduce production primary_expr_no_braces -> id

State 383:
## Known stack suffix:
## id T_ARROW
## LR(1) items:
arrow_function -> id T_ARROW . arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 319
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 603
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 784
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On function_expr shift to state 785
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On boolean_literal shift to state 386
-- On block shift to state 786
-- On assignment_expr_no_stmt shift to state 787
-- On arrow_function shift to state 728
-- On arrow_body shift to state 854
-- On array_literal shift to state 388
## Reductions:

State 384:
## Known stack suffix:
## T_TYPEOF
## LR(1) items:
pre_in_expr(primary_no_stmt) -> T_TYPEOF . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 385
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 385:
## Known stack suffix:
## T_TYPEOF pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> T_TYPEOF pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> T_TYPEOF pre_in_expr(d1)

State 386:
## Known stack suffix:
## boolean_literal
## LR(1) items:
primary_expr_no_braces -> boolean_literal . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr_no_braces -> boolean_literal

State 387:
## Known stack suffix:
## async_function_expr
## LR(1) items:
primary_with_stmt -> async_function_expr . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_with_stmt -> async_function_expr

State 388:
## Known stack suffix:
## array_literal
## LR(1) items:
primary_expr_no_braces -> array_literal . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr_no_braces -> array_literal

State 389:
## Known stack suffix:
## T_SUPER
## LR(1) items:
call_expr(primary_no_stmt) -> T_SUPER . arguments [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
member_expr(primary_no_stmt) -> T_SUPER . T_LBRACKET expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
member_expr(primary_no_stmt) -> T_SUPER . T_PERIOD field_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On T_PERIOD shift to state 390
-- On T_LPAREN shift to state 80
-- On T_LBRACKET shift to state 392
-- On arguments shift to state 400
## Reductions:

State 390:
## Known stack suffix:
## T_SUPER T_PERIOD
## LR(1) items:
member_expr(primary_no_stmt) -> T_SUPER T_PERIOD . field_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_INTERFACE shift to state 43
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 77
-- On id shift to state 78
-- On field_name shift to state 391
## Reductions:

State 391:
## Known stack suffix:
## T_SUPER T_PERIOD field_name
## LR(1) items:
member_expr(primary_no_stmt) -> T_SUPER T_PERIOD field_name . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(primary_no_stmt) -> T_SUPER T_PERIOD field_name

State 392:
## Known stack suffix:
## T_SUPER T_LBRACKET
## LR(1) items:
member_expr(primary_no_stmt) -> T_SUPER T_LBRACKET . expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 393
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 393:
## Known stack suffix:
## T_SUPER T_LBRACKET expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_RBRACKET T_COMMA ]
member_expr(primary_no_stmt) -> T_SUPER T_LBRACKET expr . T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On T_RBRACKET shift to state 394
-- On T_COMMA shift to state 395
## Reductions:

State 394:
## Known stack suffix:
## T_SUPER T_LBRACKET expr T_RBRACKET
## LR(1) items:
member_expr(primary_no_stmt) -> T_SUPER T_LBRACKET expr T_RBRACKET . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(primary_no_stmt) -> T_SUPER T_LBRACKET expr T_RBRACKET

State 395:
## Known stack suffix:
## expr T_COMMA
## LR(1) items:
expr -> expr T_COMMA . assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 397
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 396:
## Known stack suffix:
## conditional_expr(d1)
## LR(1) items:
assignment_expr -> conditional_expr(d1) . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expr -> conditional_expr(d1)

State 397:
## Known stack suffix:
## expr T_COMMA assignment_expr
## LR(1) items:
expr -> expr T_COMMA assignment_expr . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr T_COMMA assignment_expr

State 398:
## Known stack suffix:
## arrow_function
## LR(1) items:
assignment_expr -> arrow_function . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expr -> arrow_function

State 399:
## Known stack suffix:
## assignment_expr
## LR(1) items:
expr -> assignment_expr . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> assignment_expr

State 400:
## Known stack suffix:
## T_SUPER arguments
## LR(1) items:
call_expr(primary_no_stmt) -> T_SUPER arguments . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expr(primary_no_stmt) -> T_SUPER arguments

State 401:
## Known stack suffix:
## T_PLUS
## LR(1) items:
pre_in_expr(primary_no_stmt) -> T_PLUS . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 402
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 402:
## Known stack suffix:
## T_PLUS pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> T_PLUS pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> T_PLUS pre_in_expr(d1)

State 403:
## Known stack suffix:
## pre_in_expr(d1) T_MOD
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) T_MOD . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 404
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 404:
## Known stack suffix:
## pre_in_expr(d1) T_MOD pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) T_MOD pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> pre_in_expr(d1) T_MOD pre_in_expr(d1)

State 405:
## Known stack suffix:
## pre_in_expr(d1) T_DIV
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) T_DIV . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 406
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 406:
## Known stack suffix:
## pre_in_expr(d1) T_DIV pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) T_DIV pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> pre_in_expr(d1) T_DIV pre_in_expr(d1)

State 407:
## Known stack suffix:
## T_NOT
## LR(1) items:
pre_in_expr(primary_no_stmt) -> T_NOT . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 408
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 408:
## Known stack suffix:
## T_NOT pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> T_NOT pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> T_NOT pre_in_expr(d1)

State 409:
## Known stack suffix:
## T_NEW
## LR(1) items:
member_expr(primary_no_stmt) -> T_NEW . member_expr(d1) arguments [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
member_expr(primary_no_stmt) -> T_NEW . T_PERIOD id [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
new_expr(primary_no_stmt) -> T_NEW . new_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 87
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PERIOD shift to state 410
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BACKQUOTE shift to state 293
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 412
-- On member_expr(d1) shift to state 413
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 410:
## Known stack suffix:
## T_NEW T_PERIOD
## LR(1) items:
member_expr(primary_no_stmt) -> T_NEW T_PERIOD . id [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 411
## Reductions:

State 411:
## Known stack suffix:
## T_NEW T_PERIOD id
## LR(1) items:
member_expr(primary_no_stmt) -> T_NEW T_PERIOD id . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(primary_no_stmt) -> T_NEW T_PERIOD id

State 412:
## Known stack suffix:
## T_NEW new_expr(d1)
## LR(1) items:
new_expr(primary_no_stmt) -> T_NEW new_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production new_expr(primary_no_stmt) -> T_NEW new_expr(d1)

State 413:
## Known stack suffix:
## T_NEW member_expr(d1)
## LR(1) items:
member_expr(d1) -> member_expr(d1) . T_LBRACKET expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
member_expr(d1) -> member_expr(d1) . T_PERIOD field_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
member_expr(d1) -> member_expr(d1) . template_literal [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
member_expr(d1) -> member_expr(d1) . T_PERIOD T_DOTS [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
member_expr(primary_no_stmt) -> T_NEW member_expr(d1) . arguments [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
new_expr(d1) -> member_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On T_PERIOD shift to state 344
-- On T_LPAREN shift to state 80
-- On T_LBRACKET shift to state 347
-- On T_BACKQUOTE shift to state 293
-- On template_literal shift to state 414
-- On arguments shift to state 415
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND RDots EOF
--   reduce production new_expr(d1) -> member_expr(d1)

State 414:
## Known stack suffix:
## member_expr(d1) template_literal
## LR(1) items:
member_expr(d1) -> member_expr(d1) template_literal . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(d1) -> member_expr(d1) template_literal

State 415:
## Known stack suffix:
## T_NEW member_expr(d1) arguments
## LR(1) items:
member_expr(primary_no_stmt) -> T_NEW member_expr(d1) arguments . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(primary_no_stmt) -> T_NEW member_expr(d1) arguments

State 416:
## Known stack suffix:
## T_MINUS
## LR(1) items:
pre_in_expr(primary_no_stmt) -> T_MINUS . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 417
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 417:
## Known stack suffix:
## T_MINUS pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> T_MINUS pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> T_MINUS pre_in_expr(d1)

State 418:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
block -> T_LCURLY . optl(stmt_list) T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_READONLY T_RCURLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_COLON T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown RDots LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 852
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 419:
## Known stack suffix:
## T_WHILE
## LR(1) items:
iteration_stmt -> T_WHILE . T_LPAREN expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_LPAREN shift to state 420
## Reductions:

State 420:
## Known stack suffix:
## T_WHILE T_LPAREN
## LR(1) items:
iteration_stmt -> T_WHILE T_LPAREN . expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 421
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 421:
## Known stack suffix:
## T_WHILE T_LPAREN expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_RPAREN T_COMMA ]
iteration_stmt -> T_WHILE T_LPAREN expr . T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RPAREN shift to state 422
-- On T_COMMA shift to state 395
## Reductions:

State 422:
## Known stack suffix:
## T_WHILE T_LPAREN expr T_RPAREN
## LR(1) items:
iteration_stmt -> T_WHILE T_LPAREN expr T_RPAREN . stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 851
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On empty_stmt shift to state 760
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 423:
## Known stack suffix:
## T_VAR
## LR(1) items:
variable_stmt -> T_VAR . listc(variable_decl) sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On variable_decl shift to state 424
-- On object_binding_pattern shift to state 123
-- On listc(variable_decl) shift to state 425
-- On ident_semi_keyword shift to state 75
-- On id shift to state 428
-- On binding_pattern shift to state 433
-- On array_binding_pattern shift to state 127
## Reductions:

State 424:
## Known stack suffix:
## variable_decl
## LR(1) items:
listc(variable_decl) -> variable_decl . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(variable_decl) -> variable_decl

State 425:
## Known stack suffix:
## T_VAR listc(variable_decl)
## LR(1) items:
listc(variable_decl) -> listc(variable_decl) . T_COMMA variable_decl [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
variable_stmt -> T_VAR listc(variable_decl) . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_COMMA shift to state 426
-- On sc shift to state 436
## Reductions:

State 426:
## Known stack suffix:
## listc(variable_decl) T_COMMA
## LR(1) items:
listc(variable_decl) -> listc(variable_decl) T_COMMA . variable_decl [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On variable_decl shift to state 427
-- On object_binding_pattern shift to state 123
-- On ident_semi_keyword shift to state 75
-- On id shift to state 428
-- On binding_pattern shift to state 433
-- On array_binding_pattern shift to state 127
## Reductions:

State 427:
## Known stack suffix:
## listc(variable_decl) T_COMMA variable_decl
## LR(1) items:
listc(variable_decl) -> listc(variable_decl) T_COMMA variable_decl . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(variable_decl) -> listc(variable_decl) T_COMMA variable_decl

State 428:
## Known stack suffix:
## id
## LR(1) items:
variable_decl -> id . option(annotation) option(initializeur) [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_COLON shift to state 155
-- On option(annotation) shift to state 429
-- On annotation shift to state 432
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA T_ASSIGN
--   reduce production option(annotation) ->

State 429:
## Known stack suffix:
## id option(annotation)
## LR(1) items:
variable_decl -> id option(annotation) . option(initializeur) [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_ASSIGN shift to state 132
-- On option(initializeur) shift to state 430
-- On initializeur shift to state 431
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA
--   reduce production option(initializeur) ->

State 430:
## Known stack suffix:
## id option(annotation) option(initializeur)
## LR(1) items:
variable_decl -> id option(annotation) option(initializeur) . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_decl -> id option(annotation) option(initializeur)

State 431:
## Known stack suffix:
## initializeur
## LR(1) items:
option(initializeur) -> initializeur . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(initializeur) -> initializeur

State 432:
## Known stack suffix:
## annotation
## LR(1) items:
option(annotation) -> annotation . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_OF T_LCURLY T_IN T_COMMA T_ASSIGN T_ARROW EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(annotation) -> annotation

State 433:
## Known stack suffix:
## binding_pattern
## LR(1) items:
variable_decl -> binding_pattern . option(annotation) initializeur [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_COLON shift to state 155
-- On option(annotation) shift to state 434
-- On annotation shift to state 432
## Reductions:
-- On T_ASSIGN
--   reduce production option(annotation) ->

State 434:
## Known stack suffix:
## binding_pattern option(annotation)
## LR(1) items:
variable_decl -> binding_pattern option(annotation) . initializeur [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_ASSIGN shift to state 132
-- On initializeur shift to state 435
## Reductions:

State 435:
## Known stack suffix:
## binding_pattern option(annotation) initializeur
## LR(1) items:
variable_decl -> binding_pattern option(annotation) initializeur . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_decl -> binding_pattern option(annotation) initializeur

State 436:
## Known stack suffix:
## T_VAR listc(variable_decl) sc
## LR(1) items:
variable_stmt -> T_VAR listc(variable_decl) sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_stmt -> T_VAR listc(variable_decl) sc

State 437:
## Known stack suffix:
## T_TRY
## LR(1) items:
try_stmt -> T_TRY . block catch [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
try_stmt -> T_TRY . block finally [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
try_stmt -> T_TRY . block catch finally [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_LCURLY shift to state 418
-- On block shift to state 438
## Reductions:

State 438:
## Known stack suffix:
## T_TRY block
## LR(1) items:
try_stmt -> T_TRY block . catch [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
try_stmt -> T_TRY block . finally [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
try_stmt -> T_TRY block . catch finally [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_FINALLY shift to state 439
-- On T_CATCH shift to state 441
-- On finally shift to state 450
-- On catch shift to state 451
## Reductions:

State 439:
## Known stack suffix:
## T_FINALLY
## LR(1) items:
finally -> T_FINALLY . block [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_LCURLY shift to state 418
-- On block shift to state 440
## Reductions:

State 440:
## Known stack suffix:
## T_FINALLY block
## LR(1) items:
finally -> T_FINALLY block . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production finally -> T_FINALLY block

State 441:
## Known stack suffix:
## T_CATCH
## LR(1) items:
catch -> T_CATCH . T_LPAREN id T_RPAREN block [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
catch -> T_CATCH . block [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
catch -> T_CATCH . T_LPAREN binding_pattern T_RPAREN block [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_LPAREN shift to state 442
-- On T_LCURLY shift to state 418
-- On block shift to state 449
## Reductions:

State 442:
## Known stack suffix:
## T_CATCH T_LPAREN
## LR(1) items:
catch -> T_CATCH T_LPAREN . id T_RPAREN block [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
catch -> T_CATCH T_LPAREN . binding_pattern T_RPAREN block [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On object_binding_pattern shift to state 123
-- On ident_semi_keyword shift to state 75
-- On id shift to state 443
-- On binding_pattern shift to state 446
-- On array_binding_pattern shift to state 127
## Reductions:

State 443:
## Known stack suffix:
## T_CATCH T_LPAREN id
## LR(1) items:
catch -> T_CATCH T_LPAREN id . T_RPAREN block [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RPAREN shift to state 444
## Reductions:

State 444:
## Known stack suffix:
## T_CATCH T_LPAREN id T_RPAREN
## LR(1) items:
catch -> T_CATCH T_LPAREN id T_RPAREN . block [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_LCURLY shift to state 418
-- On block shift to state 445
## Reductions:

State 445:
## Known stack suffix:
## T_CATCH T_LPAREN id T_RPAREN block
## LR(1) items:
catch -> T_CATCH T_LPAREN id T_RPAREN block . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production catch -> T_CATCH T_LPAREN id T_RPAREN block

State 446:
## Known stack suffix:
## T_CATCH T_LPAREN binding_pattern
## LR(1) items:
catch -> T_CATCH T_LPAREN binding_pattern . T_RPAREN block [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RPAREN shift to state 447
## Reductions:

State 447:
## Known stack suffix:
## T_CATCH T_LPAREN binding_pattern T_RPAREN
## LR(1) items:
catch -> T_CATCH T_LPAREN binding_pattern T_RPAREN . block [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_LCURLY shift to state 418
-- On block shift to state 448
## Reductions:

State 448:
## Known stack suffix:
## T_CATCH T_LPAREN binding_pattern T_RPAREN block
## LR(1) items:
catch -> T_CATCH T_LPAREN binding_pattern T_RPAREN block . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production catch -> T_CATCH T_LPAREN binding_pattern T_RPAREN block

State 449:
## Known stack suffix:
## T_CATCH block
## LR(1) items:
catch -> T_CATCH block . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production catch -> T_CATCH block

State 450:
## Known stack suffix:
## T_TRY block finally
## LR(1) items:
try_stmt -> T_TRY block finally . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production try_stmt -> T_TRY block finally

State 451:
## Known stack suffix:
## T_TRY block catch
## LR(1) items:
try_stmt -> T_TRY block catch . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
try_stmt -> T_TRY block catch . finally [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_FINALLY shift to state 439
-- On finally shift to state 452
## Reductions:
-- On T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF
--   reduce production try_stmt -> T_TRY block catch

State 452:
## Known stack suffix:
## T_TRY block catch finally
## LR(1) items:
try_stmt -> T_TRY block catch finally . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production try_stmt -> T_TRY block catch finally

State 453:
## Known stack suffix:
## T_THROW
## LR(1) items:
throw_stmt -> T_THROW . expr sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 454
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 454:
## Known stack suffix:
## T_THROW expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
throw_stmt -> T_THROW expr . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_COMMA shift to state 395
-- On sc shift to state 455
## Reductions:

State 455:
## Known stack suffix:
## T_THROW expr sc
## LR(1) items:
throw_stmt -> T_THROW expr sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production throw_stmt -> T_THROW expr sc

State 456:
## Known stack suffix:
## T_SWITCH
## LR(1) items:
switch_stmt -> T_SWITCH . T_LPAREN expr T_RPAREN case_block [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_LPAREN shift to state 457
## Reductions:

State 457:
## Known stack suffix:
## T_SWITCH T_LPAREN
## LR(1) items:
switch_stmt -> T_SWITCH T_LPAREN . expr T_RPAREN case_block [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 458
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 458:
## Known stack suffix:
## T_SWITCH T_LPAREN expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_RPAREN T_COMMA ]
switch_stmt -> T_SWITCH T_LPAREN expr . T_RPAREN case_block [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RPAREN shift to state 459
-- On T_COMMA shift to state 395
## Reductions:

State 459:
## Known stack suffix:
## T_SWITCH T_LPAREN expr T_RPAREN
## LR(1) items:
switch_stmt -> T_SWITCH T_LPAREN expr T_RPAREN . case_block [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_LCURLY shift to state 460
-- On case_block shift to state 850
## Reductions:

State 460:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
case_block -> T_LCURLY . list(case_clause) T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
case_block -> T_LCURLY . list(case_clause) default_clause list(case_clause) T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_CASE shift to state 461
-- On list(case_clause) shift to state 840
-- On case_clause shift to state 848
## Reductions:
-- On T_RCURLY T_DEFAULT
--   reduce production list(case_clause) ->

State 461:
## Known stack suffix:
## T_CASE
## LR(1) items:
case_clause -> T_CASE . expr T_COLON optl(stmt_list) [ T_RCURLY T_DEFAULT T_CASE ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 462
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 462:
## Known stack suffix:
## T_CASE expr
## LR(1) items:
case_clause -> T_CASE expr . T_COLON optl(stmt_list) [ T_RCURLY T_DEFAULT T_CASE ]
expr -> expr . T_COMMA assignment_expr [ T_COMMA T_COLON ]
## Transitions:
-- On T_COMMA shift to state 395
-- On T_COLON shift to state 463
## Reductions:

State 463:
## Known stack suffix:
## T_CASE expr T_COLON
## LR(1) items:
case_clause -> T_CASE expr T_COLON . optl(stmt_list) [ T_RCURLY T_DEFAULT T_CASE ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 839
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY T_DEFAULT T_CASE
--   reduce production optl(stmt_list) ->

State 464:
## Known stack suffix:
## T_TYPE
## LR(1) items:
ident_semi_keyword -> T_TYPE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_ARROW T_AND EOF ]
type_alias_decl -> T_TYPE . id T_ASSIGN type_ sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 465
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_ARROW T_AND EOF
--   reduce production ident_semi_keyword -> T_TYPE

State 465:
## Known stack suffix:
## T_TYPE id
## LR(1) items:
type_alias_decl -> T_TYPE id . T_ASSIGN type_ sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_ASSIGN shift to state 466
## Reductions:

State 466:
## Known stack suffix:
## T_TYPE id T_ASSIGN
## LR(1) items:
type_alias_decl -> T_TYPE id T_ASSIGN . type_ sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_PLING shift to state 149
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LPAREN_ARROW shift to state 152
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On union_type shift to state 186
-- On type_reference_aux shift to state 187
-- On type_name shift to state 144
-- On type_ shift to state 467
-- On primary_type2 shift to state 189
-- On primary_type shift to state 190
-- On primary_or_union_type shift to state 193
-- On primary_or_intersect_type shift to state 201
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On module_name shift to state 198
-- On intersect_type shift to state 208
## Reductions:

State 467:
## Known stack suffix:
## T_TYPE id T_ASSIGN type_
## LR(1) items:
type_alias_decl -> T_TYPE id T_ASSIGN type_ . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 468
## Reductions:

State 468:
## Known stack suffix:
## T_TYPE id T_ASSIGN type_ sc
## LR(1) items:
type_alias_decl -> T_TYPE id T_ASSIGN type_ sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_alias_decl -> T_TYPE id T_ASSIGN type_ sc

State 469:
## Known stack suffix:
## T_RETURN
## LR(1) items:
return_stmt -> T_RETURN . option(expr) sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On option(expr) shift to state 470
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 472
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON
--   reduce production option(expr) ->

State 470:
## Known stack suffix:
## T_RETURN option(expr)
## LR(1) items:
return_stmt -> T_RETURN option(expr) . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 471
## Reductions:

State 471:
## Known stack suffix:
## T_RETURN option(expr) sc
## LR(1) items:
return_stmt -> T_RETURN option(expr) sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production return_stmt -> T_RETURN option(expr) sc

State 472:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_COMMA ]
option(expr) -> expr . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN ]
## Transitions:
-- On T_COMMA shift to state 395
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN
--   reduce production option(expr) -> expr

State 473:
## Known stack suffix:
## T_LET
## LR(1) items:
lexical_decl -> T_LET . listc(variable_decl) sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On variable_decl shift to state 424
-- On object_binding_pattern shift to state 123
-- On listc(variable_decl) shift to state 474
-- On ident_semi_keyword shift to state 75
-- On id shift to state 428
-- On binding_pattern shift to state 433
-- On array_binding_pattern shift to state 127
## Reductions:

State 474:
## Known stack suffix:
## T_LET listc(variable_decl)
## LR(1) items:
lexical_decl -> T_LET listc(variable_decl) . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
listc(variable_decl) -> listc(variable_decl) . T_COMMA variable_decl [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_COMMA shift to state 426
-- On sc shift to state 475
## Reductions:

State 475:
## Known stack suffix:
## T_LET listc(variable_decl) sc
## LR(1) items:
lexical_decl -> T_LET listc(variable_decl) sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexical_decl -> T_LET listc(variable_decl) sc

State 476:
## Known stack suffix:
## T_INTERFACE
## LR(1) items:
interface_decl -> T_INTERFACE . binding_id option(generics) optl(interface_extends) object_type [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_id shift to state 477
## Reductions:

State 477:
## Known stack suffix:
## T_INTERFACE binding_id
## LR(1) items:
interface_decl -> T_INTERFACE binding_id . option(generics) optl(interface_extends) object_type [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 478
-- On generics shift to state 175
## Reductions:
-- On T_LCURLY T_EXTENDS
--   reduce production option(generics) ->

State 478:
## Known stack suffix:
## T_INTERFACE binding_id option(generics)
## LR(1) items:
interface_decl -> T_INTERFACE binding_id option(generics) . optl(interface_extends) object_type [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_EXTENDS shift to state 479
-- On optl(interface_extends) shift to state 484
-- On interface_extends shift to state 486
## Reductions:
-- On T_LCURLY
--   reduce production optl(interface_extends) ->

State 479:
## Known stack suffix:
## T_EXTENDS
## LR(1) items:
interface_extends -> T_EXTENDS . listc(type_reference) [ T_LCURLY ]
## Transitions:
-- On T_ID shift to state 141
-- On type_reference_aux shift to state 480
-- On type_name shift to state 144
-- On module_name shift to state 198
-- On listc(type_reference) shift to state 481
## Reductions:

State 480:
## Known stack suffix:
## type_reference_aux
## LR(1) items:
listc(type_reference) -> type_reference_aux . [ T_LCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(type_reference) -> type_reference_aux

State 481:
## Known stack suffix:
## T_EXTENDS listc(type_reference)
## LR(1) items:
interface_extends -> T_EXTENDS listc(type_reference) . [ T_LCURLY ]
listc(type_reference) -> listc(type_reference) . T_COMMA type_reference_aux [ T_LCURLY T_COMMA ]
## Transitions:
-- On T_COMMA shift to state 482
## Reductions:
-- On T_LCURLY
--   reduce production interface_extends -> T_EXTENDS listc(type_reference)

State 482:
## Known stack suffix:
## listc(type_reference) T_COMMA
## LR(1) items:
listc(type_reference) -> listc(type_reference) T_COMMA . type_reference_aux [ T_LCURLY T_COMMA ]
## Transitions:
-- On T_ID shift to state 141
-- On type_reference_aux shift to state 483
-- On type_name shift to state 144
-- On module_name shift to state 198
## Reductions:

State 483:
## Known stack suffix:
## listc(type_reference) T_COMMA type_reference_aux
## LR(1) items:
listc(type_reference) -> listc(type_reference) T_COMMA type_reference_aux . [ T_LCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(type_reference) -> listc(type_reference) T_COMMA type_reference_aux

State 484:
## Known stack suffix:
## T_INTERFACE binding_id option(generics) optl(interface_extends)
## LR(1) items:
interface_decl -> T_INTERFACE binding_id option(generics) optl(interface_extends) . object_type [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_LCURLY shift to state 156
-- On object_type shift to state 485
## Reductions:

State 485:
## Known stack suffix:
## T_INTERFACE binding_id option(generics) optl(interface_extends) object_type
## LR(1) items:
interface_decl -> T_INTERFACE binding_id option(generics) optl(interface_extends) object_type . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interface_decl -> T_INTERFACE binding_id option(generics) optl(interface_extends) object_type

State 486:
## Known stack suffix:
## interface_extends
## LR(1) items:
optl(interface_extends) -> interface_extends . [ T_LCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optl(interface_extends) -> interface_extends

State 487:
## Known stack suffix:
## T_INCR
## LR(1) items:
pre_in_expr(primary_no_stmt) -> T_INCR . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 488
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 488:
## Known stack suffix:
## T_INCR pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> T_INCR pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> T_INCR pre_in_expr(d1)

State 489:
## Known stack suffix:
## T_IF
## LR(1) items:
if_stmt -> T_IF . T_LPAREN expr T_RPAREN stmt T_ELSE stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
if_stmt -> T_IF . T_LPAREN expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_LPAREN shift to state 490
## Reductions:

State 490:
## Known stack suffix:
## T_IF T_LPAREN
## LR(1) items:
if_stmt -> T_IF T_LPAREN . expr T_RPAREN stmt T_ELSE stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
if_stmt -> T_IF T_LPAREN . expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 491
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 491:
## Known stack suffix:
## T_IF T_LPAREN expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_RPAREN T_COMMA ]
if_stmt -> T_IF T_LPAREN expr . T_RPAREN stmt T_ELSE stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
if_stmt -> T_IF T_LPAREN expr . T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RPAREN shift to state 492
-- On T_COMMA shift to state 395
## Reductions:

State 492:
## Known stack suffix:
## T_IF T_LPAREN expr T_RPAREN
## LR(1) items:
if_stmt -> T_IF T_LPAREN expr T_RPAREN . stmt T_ELSE stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
if_stmt -> T_IF T_LPAREN expr T_RPAREN . stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 836
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On empty_stmt shift to state 760
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 493:
## Known stack suffix:
## T_FOR
## LR(1) items:
iteration_stmt -> T_FOR . T_LPAREN option(expr_no_in) T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
iteration_stmt -> T_FOR . T_LPAREN for_variable_decl T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
iteration_stmt -> T_FOR . T_LPAREN left_hand_side_expr T_IN expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
iteration_stmt -> T_FOR . T_LPAREN for_single_variable_decl T_IN expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
iteration_stmt -> T_FOR . T_LPAREN left_hand_side_expr T_OF assignment_expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
iteration_stmt -> T_FOR . T_LPAREN for_single_variable_decl T_OF assignment_expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
iteration_stmt -> T_FOR . T_LPAREN T_DOTS T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_LPAREN shift to state 494
## Reductions:

State 494:
## Known stack suffix:
## T_FOR T_LPAREN
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN . option(expr_no_in) T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
iteration_stmt -> T_FOR T_LPAREN . for_variable_decl T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
iteration_stmt -> T_FOR T_LPAREN . left_hand_side_expr T_IN expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
iteration_stmt -> T_FOR T_LPAREN . for_single_variable_decl T_IN expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
iteration_stmt -> T_FOR T_LPAREN . left_hand_side_expr T_OF assignment_expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
iteration_stmt -> T_FOR T_LPAREN . for_single_variable_decl T_OF assignment_expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
iteration_stmt -> T_FOR T_LPAREN . T_DOTS T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_VAR shift to state 495
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 578
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 581
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 796
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 502
-- On post_in_expr_no_in shift to state 509
-- On option(expr_no_in) shift to state 799
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 806
-- On left_hand_side_expr shift to state 807
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On for_variable_decl shift to state 816
-- On for_single_variable_decl shift to state 823
-- On expr_no_in shift to state 832
-- On d1 shift to state 357
-- On conditional_expr_no_in shift to state 527
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr_no_in shift to state 835
-- On array_literal shift to state 388
## Reductions:
-- On T_SEMICOLON
--   reduce production option(expr_no_in) ->

State 495:
## Known stack suffix:
## T_VAR
## LR(1) items:
for_single_variable_decl -> T_VAR . for_binding [ T_OF T_IN ]
for_variable_decl -> T_VAR . listc(variable_decl_no_in) [ T_SEMICOLON ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On variable_decl_no_in shift to state 496
-- On object_binding_pattern shift to state 123
-- On listc(variable_decl_no_in) shift to state 497
-- On ident_semi_keyword shift to state 75
-- On id shift to state 574
-- On for_binding shift to state 576
-- On binding_pattern shift to state 577
-- On array_binding_pattern shift to state 127
## Reductions:

State 496:
## Known stack suffix:
## variable_decl_no_in
## LR(1) items:
listc(variable_decl_no_in) -> variable_decl_no_in . [ T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(variable_decl_no_in) -> variable_decl_no_in

State 497:
## Known stack suffix:
## T_VAR listc(variable_decl_no_in)
## LR(1) items:
for_variable_decl -> T_VAR listc(variable_decl_no_in) . [ T_SEMICOLON ]
listc(variable_decl_no_in) -> listc(variable_decl_no_in) . T_COMMA variable_decl_no_in [ T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_COMMA shift to state 498
## Reductions:
-- On T_SEMICOLON
--   reduce production for_variable_decl -> T_VAR listc(variable_decl_no_in)

State 498:
## Known stack suffix:
## listc(variable_decl_no_in) T_COMMA
## LR(1) items:
listc(variable_decl_no_in) -> listc(variable_decl_no_in) T_COMMA . variable_decl_no_in [ T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On variable_decl_no_in shift to state 499
-- On object_binding_pattern shift to state 123
-- On ident_semi_keyword shift to state 75
-- On id shift to state 500
-- On binding_pattern shift to state 572
-- On array_binding_pattern shift to state 127
## Reductions:

State 499:
## Known stack suffix:
## listc(variable_decl_no_in) T_COMMA variable_decl_no_in
## LR(1) items:
listc(variable_decl_no_in) -> listc(variable_decl_no_in) T_COMMA variable_decl_no_in . [ T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(variable_decl_no_in) -> listc(variable_decl_no_in) T_COMMA variable_decl_no_in

State 500:
## Known stack suffix:
## id
## LR(1) items:
variable_decl_no_in -> id . initializer_no_in [ T_SEMICOLON T_COMMA ]
variable_decl_no_in -> id . [ T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_ASSIGN shift to state 501
-- On initializer_no_in shift to state 571
## Reductions:
-- On T_SEMICOLON T_COMMA
--   reduce production variable_decl_no_in -> id

State 501:
## Known stack suffix:
## T_ASSIGN
## LR(1) items:
initializer_no_in -> T_ASSIGN . assignment_expr_no_in [ T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 502
-- On post_in_expr_no_in shift to state 509
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 525
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr_no_in shift to state 527
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr_no_in shift to state 570
-- On array_literal shift to state 388
## Reductions:

State 502:
## Known stack suffix:
## pre_in_expr(d1)
## LR(1) items:
post_in_expr_no_in -> pre_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_RSHIFT3 shift to state 329
-- On T_RSHIFT shift to state 503
-- On T_PLUS shift to state 331
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_MINUS shift to state 505
-- On T_LSHIFT shift to state 507
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expr_no_in -> pre_in_expr(d1)

State 503:
## Known stack suffix:
## pre_in_expr(d1) T_RSHIFT
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) T_RSHIFT . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 504
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 504:
## Known stack suffix:
## pre_in_expr(d1) T_RSHIFT pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) T_RSHIFT pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_PLUS shift to state 331
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_MINUS shift to state 505
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> pre_in_expr(d1) T_RSHIFT pre_in_expr(d1)

State 505:
## Known stack suffix:
## pre_in_expr(d1) T_MINUS
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) T_MINUS . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 506
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 506:
## Known stack suffix:
## pre_in_expr(d1) T_MINUS pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) T_MINUS pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> pre_in_expr(d1) T_MINUS pre_in_expr(d1)

State 507:
## Known stack suffix:
## pre_in_expr(d1) T_LSHIFT
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) T_LSHIFT . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 508
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 508:
## Known stack suffix:
## pre_in_expr(d1) T_LSHIFT pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) T_LSHIFT pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_PLUS shift to state 331
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_MINUS shift to state 505
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> pre_in_expr(d1) T_LSHIFT pre_in_expr(d1)

State 509:
## Known stack suffix:
## post_in_expr_no_in
## LR(1) items:
conditional_expr_no_in -> post_in_expr_no_in . [ T_SEMICOLON T_COMMA T_COLON ]
conditional_expr_no_in -> post_in_expr_no_in . T_PLING assignment_expr_no_in T_COLON assignment_expr_no_in [ T_SEMICOLON T_COMMA T_COLON ]
post_in_expr_no_in -> post_in_expr_no_in . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 510
-- On T_STRICT_EQUAL shift to state 522
-- On T_PLING shift to state 524
-- On T_OR shift to state 532
-- On T_NOT_EQUAL shift to state 548
-- On T_LESS_THAN_EQUAL shift to state 550
-- On T_LESS_THAN shift to state 552
-- On T_INSTANCEOF shift to state 554
-- On T_GREATER_THAN_EQUAL shift to state 556
-- On T_GREATER_THAN shift to state 558
-- On T_EQUAL shift to state 560
-- On T_BIT_XOR shift to state 562
-- On T_BIT_OR shift to state 564
-- On T_BIT_AND shift to state 566
-- On T_AND shift to state 568
## Reductions:
-- On T_SEMICOLON T_COMMA T_COLON
--   reduce production conditional_expr_no_in -> post_in_expr_no_in

State 510:
## Known stack suffix:
## post_in_expr_no_in T_STRICT_NOT_EQUAL
## LR(1) items:
post_in_expr_no_in -> post_in_expr_no_in T_STRICT_NOT_EQUAL . post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 511
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 511:
## Known stack suffix:
## post_in_expr_no_in T_STRICT_NOT_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in T_STRICT_NOT_EQUAL post_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expr_no_in -> post_in_expr_no_in T_STRICT_NOT_EQUAL post_in_expr(d1)

State 512:
## Known stack suffix:
## post_in_expr(d1) T_LESS_THAN
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_LESS_THAN . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 513
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 513:
## Known stack suffix:
## post_in_expr(d1) T_LESS_THAN post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_LESS_THAN post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expr(d1) -> post_in_expr(d1) T_LESS_THAN post_in_expr(d1)

State 514:
## Known stack suffix:
## post_in_expr(d1) T_INSTANCEOF
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_INSTANCEOF . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 515
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 515:
## Known stack suffix:
## post_in_expr(d1) T_INSTANCEOF post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_INSTANCEOF post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expr(d1) -> post_in_expr(d1) T_INSTANCEOF post_in_expr(d1)

State 516:
## Known stack suffix:
## post_in_expr(d1) T_IN
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_IN . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 517
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 517:
## Known stack suffix:
## post_in_expr(d1) T_IN post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_IN post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expr(d1) -> post_in_expr(d1) T_IN post_in_expr(d1)

State 518:
## Known stack suffix:
## post_in_expr(d1) T_GREATER_THAN_EQUAL
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_GREATER_THAN_EQUAL . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 519
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 519:
## Known stack suffix:
## post_in_expr(d1) T_GREATER_THAN_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_GREATER_THAN_EQUAL post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expr(d1) -> post_in_expr(d1) T_GREATER_THAN_EQUAL post_in_expr(d1)

State 520:
## Known stack suffix:
## post_in_expr(d1) T_GREATER_THAN
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_GREATER_THAN . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 521
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 521:
## Known stack suffix:
## post_in_expr(d1) T_GREATER_THAN post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_GREATER_THAN post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expr(d1) -> post_in_expr(d1) T_GREATER_THAN post_in_expr(d1)

State 522:
## Known stack suffix:
## post_in_expr_no_in T_STRICT_EQUAL
## LR(1) items:
post_in_expr_no_in -> post_in_expr_no_in T_STRICT_EQUAL . post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 523
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 523:
## Known stack suffix:
## post_in_expr_no_in T_STRICT_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in T_STRICT_EQUAL post_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expr_no_in -> post_in_expr_no_in T_STRICT_EQUAL post_in_expr(d1)

State 524:
## Known stack suffix:
## post_in_expr_no_in T_PLING
## LR(1) items:
conditional_expr_no_in -> post_in_expr_no_in T_PLING . assignment_expr_no_in T_COLON assignment_expr_no_in [ T_SEMICOLON T_COMMA T_COLON ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 502
-- On post_in_expr_no_in shift to state 509
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 525
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr_no_in shift to state 527
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr_no_in shift to state 529
-- On array_literal shift to state 388
## Reductions:

State 525:
## Known stack suffix:
## left_hand_side_expr_(d1)
## LR(1) items:
assignment_expr_no_in -> left_hand_side_expr_(d1) . assignment_operator assignment_expr_no_in [ T_SEMICOLON T_COMMA T_COLON ]
pre_in_expr(d1) -> left_hand_side_expr_(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_RSHIFT_ASSIGN shift to state 367
-- On T_RSHIFT3_ASSIGN shift to state 368
-- On T_PLUS_ASSIGN shift to state 369
-- On T_MULT_ASSIGN shift to state 370
-- On T_MOD_ASSIGN shift to state 371
-- On T_MINUS_ASSIGN shift to state 372
-- On T_LSHIFT_ASSIGN shift to state 373
-- On T_DIV_ASSIGN shift to state 374
-- On T_BIT_XOR_ASSIGN shift to state 375
-- On T_BIT_OR_ASSIGN shift to state 376
-- On T_BIT_AND_ASSIGN shift to state 377
-- On T_ASSIGN shift to state 378
-- On assignment_operator shift to state 526
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production pre_in_expr(d1) -> left_hand_side_expr_(d1)

State 526:
## Known stack suffix:
## left_hand_side_expr_(d1) assignment_operator
## LR(1) items:
assignment_expr_no_in -> left_hand_side_expr_(d1) assignment_operator . assignment_expr_no_in [ T_SEMICOLON T_COMMA T_COLON ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 502
-- On post_in_expr_no_in shift to state 509
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 525
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr_no_in shift to state 527
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr_no_in shift to state 528
-- On array_literal shift to state 388
## Reductions:

State 527:
## Known stack suffix:
## conditional_expr_no_in
## LR(1) items:
assignment_expr_no_in -> conditional_expr_no_in . [ T_SEMICOLON T_COMMA T_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expr_no_in -> conditional_expr_no_in

State 528:
## Known stack suffix:
## left_hand_side_expr_(d1) assignment_operator assignment_expr_no_in
## LR(1) items:
assignment_expr_no_in -> left_hand_side_expr_(d1) assignment_operator assignment_expr_no_in . [ T_SEMICOLON T_COMMA T_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expr_no_in -> left_hand_side_expr_(d1) assignment_operator assignment_expr_no_in

State 529:
## Known stack suffix:
## post_in_expr_no_in T_PLING assignment_expr_no_in
## LR(1) items:
conditional_expr_no_in -> post_in_expr_no_in T_PLING assignment_expr_no_in . T_COLON assignment_expr_no_in [ T_SEMICOLON T_COMMA T_COLON ]
## Transitions:
-- On T_COLON shift to state 530
## Reductions:

State 530:
## Known stack suffix:
## post_in_expr_no_in T_PLING assignment_expr_no_in T_COLON
## LR(1) items:
conditional_expr_no_in -> post_in_expr_no_in T_PLING assignment_expr_no_in T_COLON . assignment_expr_no_in [ T_SEMICOLON T_COMMA T_COLON ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 502
-- On post_in_expr_no_in shift to state 509
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 525
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr_no_in shift to state 527
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr_no_in shift to state 531
-- On array_literal shift to state 388
## Reductions:

State 531:
## Known stack suffix:
## post_in_expr_no_in T_PLING assignment_expr_no_in T_COLON assignment_expr_no_in
## LR(1) items:
conditional_expr_no_in -> post_in_expr_no_in T_PLING assignment_expr_no_in T_COLON assignment_expr_no_in . [ T_SEMICOLON T_COMMA T_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expr_no_in -> post_in_expr_no_in T_PLING assignment_expr_no_in T_COLON assignment_expr_no_in

State 532:
## Known stack suffix:
## post_in_expr_no_in T_OR
## LR(1) items:
post_in_expr_no_in -> post_in_expr_no_in T_OR . post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 533
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 533:
## Known stack suffix:
## post_in_expr_no_in T_OR post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in T_OR post_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
-- On T_BIT_XOR shift to state 540
-- On T_BIT_OR shift to state 544
-- On T_BIT_AND shift to state 542
-- On T_AND shift to state 546
## Reductions:
-- On T_SEMICOLON T_PLING T_OR T_COMMA T_COLON
--   reduce production post_in_expr_no_in -> post_in_expr_no_in T_OR post_in_expr(d1)

State 534:
## Known stack suffix:
## post_in_expr(d1) T_STRICT_EQUAL
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_STRICT_EQUAL . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 535
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 535:
## Known stack suffix:
## post_in_expr(d1) T_STRICT_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_STRICT_EQUAL post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production post_in_expr(d1) -> post_in_expr(d1) T_STRICT_EQUAL post_in_expr(d1)

State 536:
## Known stack suffix:
## post_in_expr(d1) T_NOT_EQUAL
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_NOT_EQUAL . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 537
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 537:
## Known stack suffix:
## post_in_expr(d1) T_NOT_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_NOT_EQUAL post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production post_in_expr(d1) -> post_in_expr(d1) T_NOT_EQUAL post_in_expr(d1)

State 538:
## Known stack suffix:
## post_in_expr(d1) T_EQUAL
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_EQUAL . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 539
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 539:
## Known stack suffix:
## post_in_expr(d1) T_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_EQUAL post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production post_in_expr(d1) -> post_in_expr(d1) T_EQUAL post_in_expr(d1)

State 540:
## Known stack suffix:
## post_in_expr(d1) T_BIT_XOR
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_BIT_XOR . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 541
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 541:
## Known stack suffix:
## post_in_expr(d1) T_BIT_XOR post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_BIT_XOR post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
-- On T_BIT_AND shift to state 542
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_AND RDots EOF
--   reduce production post_in_expr(d1) -> post_in_expr(d1) T_BIT_XOR post_in_expr(d1)

State 542:
## Known stack suffix:
## post_in_expr(d1) T_BIT_AND
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_BIT_AND . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 543
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 543:
## Known stack suffix:
## post_in_expr(d1) T_BIT_AND post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_BIT_AND post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production post_in_expr(d1) -> post_in_expr(d1) T_BIT_AND post_in_expr(d1)

State 544:
## Known stack suffix:
## post_in_expr(d1) T_BIT_OR
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_BIT_OR . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 545
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 545:
## Known stack suffix:
## post_in_expr(d1) T_BIT_OR post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_BIT_OR post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
-- On T_BIT_XOR shift to state 540
-- On T_BIT_AND shift to state 542
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_COMMA T_COLON T_BIT_OR T_AND RDots EOF
--   reduce production post_in_expr(d1) -> post_in_expr(d1) T_BIT_OR post_in_expr(d1)

State 546:
## Known stack suffix:
## post_in_expr(d1) T_AND
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_AND . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 547
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 547:
## Known stack suffix:
## post_in_expr(d1) T_AND post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_AND post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
-- On T_BIT_XOR shift to state 540
-- On T_BIT_OR shift to state 544
-- On T_BIT_AND shift to state 542
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_COMMA T_COLON T_AND RDots EOF
--   reduce production post_in_expr(d1) -> post_in_expr(d1) T_AND post_in_expr(d1)

State 548:
## Known stack suffix:
## post_in_expr_no_in T_NOT_EQUAL
## LR(1) items:
post_in_expr_no_in -> post_in_expr_no_in T_NOT_EQUAL . post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 549
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 549:
## Known stack suffix:
## post_in_expr_no_in T_NOT_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in T_NOT_EQUAL post_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expr_no_in -> post_in_expr_no_in T_NOT_EQUAL post_in_expr(d1)

State 550:
## Known stack suffix:
## post_in_expr_no_in T_LESS_THAN_EQUAL
## LR(1) items:
post_in_expr_no_in -> post_in_expr_no_in T_LESS_THAN_EQUAL . post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 551
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 551:
## Known stack suffix:
## post_in_expr_no_in T_LESS_THAN_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in T_LESS_THAN_EQUAL post_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_IN shift to state 516
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expr_no_in -> post_in_expr_no_in T_LESS_THAN_EQUAL post_in_expr(d1)

State 552:
## Known stack suffix:
## post_in_expr_no_in T_LESS_THAN
## LR(1) items:
post_in_expr_no_in -> post_in_expr_no_in T_LESS_THAN . post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 553
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 553:
## Known stack suffix:
## post_in_expr_no_in T_LESS_THAN post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in T_LESS_THAN post_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_IN shift to state 516
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expr_no_in -> post_in_expr_no_in T_LESS_THAN post_in_expr(d1)

State 554:
## Known stack suffix:
## post_in_expr_no_in T_INSTANCEOF
## LR(1) items:
post_in_expr_no_in -> post_in_expr_no_in T_INSTANCEOF . post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 555
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 555:
## Known stack suffix:
## post_in_expr_no_in T_INSTANCEOF post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in T_INSTANCEOF post_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_IN shift to state 516
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expr_no_in -> post_in_expr_no_in T_INSTANCEOF post_in_expr(d1)

State 556:
## Known stack suffix:
## post_in_expr_no_in T_GREATER_THAN_EQUAL
## LR(1) items:
post_in_expr_no_in -> post_in_expr_no_in T_GREATER_THAN_EQUAL . post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 557
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 557:
## Known stack suffix:
## post_in_expr_no_in T_GREATER_THAN_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in T_GREATER_THAN_EQUAL post_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_IN shift to state 516
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expr_no_in -> post_in_expr_no_in T_GREATER_THAN_EQUAL post_in_expr(d1)

State 558:
## Known stack suffix:
## post_in_expr_no_in T_GREATER_THAN
## LR(1) items:
post_in_expr_no_in -> post_in_expr_no_in T_GREATER_THAN . post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 559
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 559:
## Known stack suffix:
## post_in_expr_no_in T_GREATER_THAN post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in T_GREATER_THAN post_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_IN shift to state 516
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expr_no_in -> post_in_expr_no_in T_GREATER_THAN post_in_expr(d1)

State 560:
## Known stack suffix:
## post_in_expr_no_in T_EQUAL
## LR(1) items:
post_in_expr_no_in -> post_in_expr_no_in T_EQUAL . post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 561
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 561:
## Known stack suffix:
## post_in_expr_no_in T_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in T_EQUAL post_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expr_no_in -> post_in_expr_no_in T_EQUAL post_in_expr(d1)

State 562:
## Known stack suffix:
## post_in_expr_no_in T_BIT_XOR
## LR(1) items:
post_in_expr_no_in -> post_in_expr_no_in T_BIT_XOR . post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 563
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 563:
## Known stack suffix:
## post_in_expr_no_in T_BIT_XOR post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in T_BIT_XOR post_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
-- On T_BIT_AND shift to state 542
## Reductions:
-- On T_SEMICOLON T_PLING T_OR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_AND
--   reduce production post_in_expr_no_in -> post_in_expr_no_in T_BIT_XOR post_in_expr(d1)

State 564:
## Known stack suffix:
## post_in_expr_no_in T_BIT_OR
## LR(1) items:
post_in_expr_no_in -> post_in_expr_no_in T_BIT_OR . post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 565
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 565:
## Known stack suffix:
## post_in_expr_no_in T_BIT_OR post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in T_BIT_OR post_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
-- On T_BIT_XOR shift to state 540
-- On T_BIT_AND shift to state 542
## Reductions:
-- On T_SEMICOLON T_PLING T_OR T_COMMA T_COLON T_BIT_OR T_AND
--   reduce production post_in_expr_no_in -> post_in_expr_no_in T_BIT_OR post_in_expr(d1)

State 566:
## Known stack suffix:
## post_in_expr_no_in T_BIT_AND
## LR(1) items:
post_in_expr_no_in -> post_in_expr_no_in T_BIT_AND . post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 567
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 567:
## Known stack suffix:
## post_in_expr_no_in T_BIT_AND post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in T_BIT_AND post_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
## Reductions:
-- On T_SEMICOLON T_PLING T_OR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expr_no_in -> post_in_expr_no_in T_BIT_AND post_in_expr(d1)

State 568:
## Known stack suffix:
## post_in_expr_no_in T_AND
## LR(1) items:
post_in_expr_no_in -> post_in_expr_no_in T_AND . post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 569
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 569:
## Known stack suffix:
## post_in_expr_no_in T_AND post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expr_no_in -> post_in_expr_no_in T_AND post_in_expr(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
-- On T_BIT_XOR shift to state 540
-- On T_BIT_OR shift to state 544
-- On T_BIT_AND shift to state 542
## Reductions:
-- On T_SEMICOLON T_PLING T_OR T_COMMA T_COLON T_AND
--   reduce production post_in_expr_no_in -> post_in_expr_no_in T_AND post_in_expr(d1)

State 570:
## Known stack suffix:
## T_ASSIGN assignment_expr_no_in
## LR(1) items:
initializer_no_in -> T_ASSIGN assignment_expr_no_in . [ T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production initializer_no_in -> T_ASSIGN assignment_expr_no_in

State 571:
## Known stack suffix:
## id initializer_no_in
## LR(1) items:
variable_decl_no_in -> id initializer_no_in . [ T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_decl_no_in -> id initializer_no_in

State 572:
## Known stack suffix:
## binding_pattern
## LR(1) items:
variable_decl_no_in -> binding_pattern . initializer_no_in [ T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_ASSIGN shift to state 501
-- On initializer_no_in shift to state 573
## Reductions:

State 573:
## Known stack suffix:
## binding_pattern initializer_no_in
## LR(1) items:
variable_decl_no_in -> binding_pattern initializer_no_in . [ T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_decl_no_in -> binding_pattern initializer_no_in

State 574:
## Known stack suffix:
## id
## LR(1) items:
for_binding -> id . option(annotation) [ T_OF T_IN ]
variable_decl_no_in -> id . initializer_no_in [ T_SEMICOLON T_COMMA ]
variable_decl_no_in -> id . [ T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_COLON shift to state 155
-- On T_ASSIGN shift to state 501
-- On option(annotation) shift to state 575
-- On initializer_no_in shift to state 571
-- On annotation shift to state 432
## Reductions:
-- On T_OF T_IN
--   reduce production option(annotation) ->
-- On T_SEMICOLON T_COMMA
--   reduce production variable_decl_no_in -> id

State 575:
## Known stack suffix:
## id option(annotation)
## LR(1) items:
for_binding -> id option(annotation) . [ T_OF T_IN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_binding -> id option(annotation)

State 576:
## Known stack suffix:
## T_VAR for_binding
## LR(1) items:
for_single_variable_decl -> T_VAR for_binding . [ T_OF T_IN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_single_variable_decl -> T_VAR for_binding

State 577:
## Known stack suffix:
## binding_pattern
## LR(1) items:
for_binding -> binding_pattern . [ T_OF T_IN ]
variable_decl_no_in -> binding_pattern . initializer_no_in [ T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_ASSIGN shift to state 501
-- On initializer_no_in shift to state 573
## Reductions:
-- On T_OF T_IN
--   reduce production for_binding -> binding_pattern

State 578:
## Known stack suffix:
## T_LET
## LR(1) items:
for_single_variable_decl -> T_LET . for_binding [ T_OF T_IN ]
for_variable_decl -> T_LET . listc(variable_decl_no_in) [ T_SEMICOLON ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On variable_decl_no_in shift to state 496
-- On object_binding_pattern shift to state 123
-- On listc(variable_decl_no_in) shift to state 579
-- On ident_semi_keyword shift to state 75
-- On id shift to state 574
-- On for_binding shift to state 580
-- On binding_pattern shift to state 577
-- On array_binding_pattern shift to state 127
## Reductions:

State 579:
## Known stack suffix:
## T_LET listc(variable_decl_no_in)
## LR(1) items:
for_variable_decl -> T_LET listc(variable_decl_no_in) . [ T_SEMICOLON ]
listc(variable_decl_no_in) -> listc(variable_decl_no_in) . T_COMMA variable_decl_no_in [ T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_COMMA shift to state 498
## Reductions:
-- On T_SEMICOLON
--   reduce production for_variable_decl -> T_LET listc(variable_decl_no_in)

State 580:
## Known stack suffix:
## T_LET for_binding
## LR(1) items:
for_single_variable_decl -> T_LET for_binding . [ T_OF T_IN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_single_variable_decl -> T_LET for_binding

State 581:
## Known stack suffix:
## T_FOR T_LPAREN T_DOTS
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN T_DOTS . T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RPAREN shift to state 582
## Reductions:

State 582:
## Known stack suffix:
## T_FOR T_LPAREN T_DOTS T_RPAREN
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN T_DOTS T_RPAREN . stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 795
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On empty_stmt shift to state 760
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 583:
## Known stack suffix:
## T_DOTS
## LR(1) items:
stmt -> T_DOTS . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> T_DOTS

State 584:
## Known stack suffix:
## T_DO
## LR(1) items:
iteration_stmt -> T_DO . stmt T_WHILE T_LPAREN expr T_RPAREN sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 789
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On empty_stmt shift to state 760
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 585:
## Known stack suffix:
## T_DELETE
## LR(1) items:
pre_in_expr(primary_no_stmt) -> T_DELETE . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 586
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 586:
## Known stack suffix:
## T_DELETE pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> T_DELETE pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> T_DELETE pre_in_expr(d1)

State 587:
## Known stack suffix:
## T_DECR
## LR(1) items:
pre_in_expr(primary_no_stmt) -> T_DECR . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 588
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 588:
## Known stack suffix:
## T_DECR pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> T_DECR pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> T_DECR pre_in_expr(d1)

State 589:
## Known stack suffix:
## T_CONTINUE
## LR(1) items:
continue_stmt -> T_CONTINUE . option(id) sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(id) shift to state 590
-- On ident_semi_keyword shift to state 75
-- On id shift to state 592
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON
--   reduce production option(id) ->

State 590:
## Known stack suffix:
## T_CONTINUE option(id)
## LR(1) items:
continue_stmt -> T_CONTINUE option(id) . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 591
## Reductions:

State 591:
## Known stack suffix:
## T_CONTINUE option(id) sc
## LR(1) items:
continue_stmt -> T_CONTINUE option(id) sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production continue_stmt -> T_CONTINUE option(id) sc

State 592:
## Known stack suffix:
## id
## LR(1) items:
option(id) -> id . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_LPAREN T_LESS_THAN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(id) -> id

State 593:
## Known stack suffix:
## T_BREAK
## LR(1) items:
break_stmt -> T_BREAK . option(id) sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(id) shift to state 594
-- On ident_semi_keyword shift to state 75
-- On id shift to state 592
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON
--   reduce production option(id) ->

State 594:
## Known stack suffix:
## T_BREAK option(id)
## LR(1) items:
break_stmt -> T_BREAK option(id) . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 595
## Reductions:

State 595:
## Known stack suffix:
## T_BREAK option(id) sc
## LR(1) items:
break_stmt -> T_BREAK option(id) sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production break_stmt -> T_BREAK option(id) sc

State 596:
## Known stack suffix:
## T_BIT_NOT
## LR(1) items:
pre_in_expr(primary_no_stmt) -> T_BIT_NOT . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 597
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 597:
## Known stack suffix:
## T_BIT_NOT pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> T_BIT_NOT pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> T_BIT_NOT pre_in_expr(d1)

State 598:
## Known stack suffix:
## T_AWAIT
## LR(1) items:
pre_in_expr(primary_no_stmt) -> T_AWAIT . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 599
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 599:
## Known stack suffix:
## T_AWAIT pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> T_AWAIT pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> T_AWAIT pre_in_expr(d1)

State 600:
## Known stack suffix:
## T_ASYNC
## LR(1) items:
arrow_function -> T_ASYNC . id T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
arrow_function -> T_ASYNC . T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
ident_semi_keyword -> T_ASYNC . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_ARROW T_AND RDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LPAREN_ARROW shift to state 305
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 601
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_ARROW T_AND RDots EOF
--   reduce production ident_semi_keyword -> T_ASYNC

State 601:
## Known stack suffix:
## T_ASYNC id
## LR(1) items:
arrow_function -> T_ASYNC id . T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_ARROW shift to state 602
## Reductions:

State 602:
## Known stack suffix:
## T_ASYNC id T_ARROW
## LR(1) items:
arrow_function -> T_ASYNC id T_ARROW . arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 319
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 603
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 784
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On function_expr shift to state 785
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On boolean_literal shift to state 386
-- On block shift to state 786
-- On assignment_expr_no_stmt shift to state 787
-- On arrow_function shift to state 728
-- On arrow_body shift to state 788
-- On array_literal shift to state 388
## Reductions:

State 603:
## Known stack suffix:
## T_FUNCTION
## LR(1) items:
function_expr -> T_FUNCTION . option(id) call_signature T_LCURLY function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(id) shift to state 604
-- On ident_semi_keyword shift to state 75
-- On id shift to state 592
## Reductions:
-- On T_LPAREN T_LESS_THAN
--   reduce production option(id) ->

State 604:
## Known stack suffix:
## T_FUNCTION option(id)
## LR(1) items:
function_expr -> T_FUNCTION option(id) . call_signature T_LCURLY function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 605
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 605:
## Known stack suffix:
## T_FUNCTION option(id) call_signature
## LR(1) items:
function_expr -> T_FUNCTION option(id) call_signature . T_LCURLY function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_LCURLY shift to state 606
## Reductions:

State 606:
## Known stack suffix:
## T_FUNCTION option(id) call_signature T_LCURLY
## LR(1) items:
function_expr -> T_FUNCTION option(id) call_signature T_LCURLY . function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 782
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 607:
## Known stack suffix:
## T_FUNCTION
## LR(1) items:
function_decl -> T_FUNCTION . option(id) call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
generator_decl -> T_FUNCTION . T_MULT id call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MULT shift to state 608
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(id) shift to state 777
-- On ident_semi_keyword shift to state 75
-- On id shift to state 592
## Reductions:
-- On T_LPAREN T_LESS_THAN
--   reduce production option(id) ->

State 608:
## Known stack suffix:
## T_FUNCTION T_MULT
## LR(1) items:
generator_decl -> T_FUNCTION T_MULT . id call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 609
## Reductions:

State 609:
## Known stack suffix:
## T_FUNCTION T_MULT id
## LR(1) items:
generator_decl -> T_FUNCTION T_MULT id . call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 610
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 610:
## Known stack suffix:
## T_FUNCTION T_MULT id call_signature
## LR(1) items:
generator_decl -> T_FUNCTION T_MULT id call_signature . T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_LCURLY shift to state 611
## Reductions:

State 611:
## Known stack suffix:
## T_FUNCTION T_MULT id call_signature T_LCURLY
## LR(1) items:
generator_decl -> T_FUNCTION T_MULT id call_signature T_LCURLY . function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 775
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 612:
## Known stack suffix:
## T_CONST
## LR(1) items:
lexical_decl -> T_CONST . listc(variable_decl) sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
option(T_CONST) -> T_CONST . [ T_ENUM ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On variable_decl shift to state 424
-- On object_binding_pattern shift to state 123
-- On listc(variable_decl) shift to state 613
-- On ident_semi_keyword shift to state 75
-- On id shift to state 428
-- On binding_pattern shift to state 433
-- On array_binding_pattern shift to state 127
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) -> T_CONST

State 613:
## Known stack suffix:
## T_CONST listc(variable_decl)
## LR(1) items:
lexical_decl -> T_CONST listc(variable_decl) . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
listc(variable_decl) -> listc(variable_decl) . T_COMMA variable_decl [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_COMMA shift to state 426
-- On sc shift to state 614
## Reductions:

State 614:
## Known stack suffix:
## T_CONST listc(variable_decl) sc
## LR(1) items:
lexical_decl -> T_CONST listc(variable_decl) sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexical_decl -> T_CONST listc(variable_decl) sc

State 615:
## Known stack suffix:
## T_CLASS
## LR(1) items:
class_decl -> T_CLASS . option(binding_id) option(generics) class_heritage class_body [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(binding_id) shift to state 616
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_id shift to state 620
## Reductions:
-- On T_LESS_THAN T_LCURLY T_IMPLEMENTS T_EXTENDS
--   reduce production option(binding_id) ->

State 616:
## Known stack suffix:
## T_CLASS option(binding_id)
## LR(1) items:
class_decl -> T_CLASS option(binding_id) . option(generics) class_heritage class_body [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 617
-- On generics shift to state 175
## Reductions:
-- On T_LCURLY T_IMPLEMENTS T_EXTENDS
--   reduce production option(generics) ->

State 617:
## Known stack suffix:
## T_CLASS option(binding_id) option(generics)
## LR(1) items:
class_decl -> T_CLASS option(binding_id) option(generics) . class_heritage class_body [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_EXTENDS shift to state 140
-- On option(extends_clause) shift to state 264
-- On extends_clause shift to state 269
-- On class_heritage shift to state 618
## Reductions:
-- On T_LCURLY T_IMPLEMENTS
--   reduce production option(extends_clause) ->

State 618:
## Known stack suffix:
## T_CLASS option(binding_id) option(generics) class_heritage
## LR(1) items:
class_decl -> T_CLASS option(binding_id) option(generics) class_heritage . class_body [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_LCURLY shift to state 271
-- On class_body shift to state 619
## Reductions:

State 619:
## Known stack suffix:
## T_CLASS option(binding_id) option(generics) class_heritage class_body
## LR(1) items:
class_decl -> T_CLASS option(binding_id) option(generics) class_heritage class_body . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_decl -> T_CLASS option(binding_id) option(generics) class_heritage class_body

State 620:
## Known stack suffix:
## binding_id
## LR(1) items:
option(binding_id) -> binding_id . [ T_LESS_THAN T_LCURLY T_IMPLEMENTS T_EXTENDS EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(binding_id) -> binding_id

State 621:
## Known stack suffix:
## T_ASYNC
## LR(1) items:
arrow_function -> T_ASYNC . id T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA EOF ]
arrow_function -> T_ASYNC . T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA EOF ]
async_decl -> T_ASYNC . T_FUNCTION id call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
ident_semi_keyword -> T_ASYNC . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_ARROW T_AND EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LPAREN_ARROW shift to state 305
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 622
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 601
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_ARROW T_AND EOF
--   reduce production ident_semi_keyword -> T_ASYNC

State 622:
## Known stack suffix:
## T_ASYNC T_FUNCTION
## LR(1) items:
async_decl -> T_ASYNC T_FUNCTION . id call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 623
## Reductions:

State 623:
## Known stack suffix:
## T_ASYNC T_FUNCTION id
## LR(1) items:
async_decl -> T_ASYNC T_FUNCTION id . call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 624
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 624:
## Known stack suffix:
## T_ASYNC T_FUNCTION id call_signature
## LR(1) items:
async_decl -> T_ASYNC T_FUNCTION id call_signature . T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_LCURLY shift to state 625
## Reductions:

State 625:
## Known stack suffix:
## T_ASYNC T_FUNCTION id call_signature T_LCURLY
## LR(1) items:
async_decl -> T_ASYNC T_FUNCTION id call_signature T_LCURLY . function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 773
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 626:
## Known stack suffix:
## TUnknown
## LR(1) items:
primary_no_stmt -> TUnknown . TComment [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On TComment shift to state 627
## Reductions:

State 627:
## Known stack suffix:
## TUnknown TComment
## LR(1) items:
primary_no_stmt -> TUnknown TComment . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_stmt -> TUnknown TComment

State 628:
## Known stack suffix:
## with_stmt
## LR(1) items:
stmt -> with_stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> with_stmt

State 629:
## Known stack suffix:
## variable_stmt
## LR(1) items:
stmt -> variable_stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> variable_stmt

State 630:
## Known stack suffix:
## type_alias_decl
## LR(1) items:
decl -> type_alias_decl . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> type_alias_decl

State 631:
## Known stack suffix:
## try_stmt
## LR(1) items:
stmt -> try_stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> try_stmt

State 632:
## Known stack suffix:
## throw_stmt
## LR(1) items:
stmt -> throw_stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> throw_stmt

State 633:
## Known stack suffix:
## switch_stmt
## LR(1) items:
stmt -> switch_stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> switch_stmt

State 634:
## Known stack suffix:
## stmt_list
## LR(1) items:
optl(stmt_list) -> stmt_list . [ T_RCURLY T_DEFAULT T_CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optl(stmt_list) -> stmt_list

State 635:
## Known stack suffix:
## stmt
## LR(1) items:
item -> stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production item -> stmt

State 636:
## Known stack suffix:
## sc
## LR(1) items:
empty_stmt -> sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production empty_stmt -> sc

State 637:
## Known stack suffix:
## return_stmt
## LR(1) items:
stmt -> return_stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> return_stmt

State 638:
## Known stack suffix:
## primary_no_stmt
## LR(1) items:
primary_expr(primary_no_stmt) -> primary_no_stmt . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr(primary_no_stmt) -> primary_no_stmt

State 639:
## Known stack suffix:
## primary_expr_no_braces
## LR(1) items:
primary_expr(primary_no_stmt) -> primary_expr_no_braces . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr(primary_no_stmt) -> primary_expr_no_braces

State 640:
## Known stack suffix:
## primary_expr(primary_no_stmt)
## LR(1) items:
member_expr(primary_no_stmt) -> primary_expr(primary_no_stmt) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(primary_no_stmt) -> primary_expr(primary_no_stmt)

State 641:
## Known stack suffix:
## pre_in_expr(primary_no_stmt)
## LR(1) items:
post_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_RSHIFT3 shift to state 642
-- On T_RSHIFT shift to state 644
-- On T_PLUS shift to state 646
-- On T_MULT shift to state 648
-- On T_MOD shift to state 650
-- On T_MINUS shift to state 652
-- On T_LSHIFT shift to state 654
-- On T_INCR shift to state 656
-- On T_EXPONENT shift to state 657
-- On T_DIV shift to state 659
-- On T_DECR shift to state 661
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production post_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt)

State 642:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_RSHIFT3
## LR(1) items:
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_RSHIFT3 . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 643
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 643:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_RSHIFT3 pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_RSHIFT3 pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_PLUS shift to state 331
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_MINUS shift to state 505
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_RSHIFT3 pre_in_expr(d1)

State 644:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_RSHIFT
## LR(1) items:
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_RSHIFT . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 645
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 645:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_RSHIFT pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_RSHIFT pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_PLUS shift to state 331
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_MINUS shift to state 505
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_RSHIFT pre_in_expr(d1)

State 646:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_PLUS
## LR(1) items:
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_PLUS . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 647
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 647:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_PLUS pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_PLUS pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_PLUS pre_in_expr(d1)

State 648:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_MULT
## LR(1) items:
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_MULT . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 649
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 649:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_MULT pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_MULT pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_MULT pre_in_expr(d1)

State 650:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_MOD
## LR(1) items:
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_MOD . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 651
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 651:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_MOD pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_MOD pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_MOD pre_in_expr(d1)

State 652:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_MINUS
## LR(1) items:
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_MINUS . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 653
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 653:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_MINUS pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_MINUS pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_MINUS pre_in_expr(d1)

State 654:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_LSHIFT
## LR(1) items:
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_LSHIFT . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 655
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 655:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_LSHIFT pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_LSHIFT pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_PLUS shift to state 331
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_MINUS shift to state 505
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_LSHIFT pre_in_expr(d1)

State 656:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_INCR
## LR(1) items:
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_INCR . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_INCR

State 657:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_EXPONENT
## LR(1) items:
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_EXPONENT . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 658
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 658:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_EXPONENT pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_EXPONENT pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_EXPONENT pre_in_expr(d1)

State 659:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_DIV
## LR(1) items:
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_DIV . pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 660
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 660:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_DIV pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_DIV pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_DIV pre_in_expr(d1)

State 661:
## Known stack suffix:
## pre_in_expr(primary_no_stmt) T_DECR
## LR(1) items:
pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_DECR . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pre_in_expr(primary_no_stmt) -> pre_in_expr(primary_no_stmt) T_DECR

State 662:
## Known stack suffix:
## post_in_expr(primary_no_stmt)
## LR(1) items:
conditional_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
conditional_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_PLING assignment_expr T_COLON assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 663
-- On T_STRICT_EQUAL shift to state 665
-- On T_PLING shift to state 667
-- On T_OR shift to state 671
-- On T_NOT_EQUAL shift to state 673
-- On T_LESS_THAN_EQUAL shift to state 675
-- On T_LESS_THAN shift to state 677
-- On T_INSTANCEOF shift to state 679
-- On T_IN shift to state 681
-- On T_GREATER_THAN_EQUAL shift to state 683
-- On T_GREATER_THAN shift to state 685
-- On T_EQUAL shift to state 687
-- On T_BIT_XOR shift to state 689
-- On T_BIT_OR shift to state 691
-- On T_BIT_AND shift to state 693
-- On T_AND shift to state 695
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF
--   reduce production conditional_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt)

State 663:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_STRICT_NOT_EQUAL
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_STRICT_NOT_EQUAL . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 664
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 664:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_STRICT_NOT_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_STRICT_NOT_EQUAL post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_STRICT_NOT_EQUAL post_in_expr(d1)

State 665:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_STRICT_EQUAL
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_STRICT_EQUAL . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 666
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 666:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_STRICT_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_STRICT_EQUAL post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_STRICT_EQUAL post_in_expr(d1)

State 667:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_PLING
## LR(1) items:
conditional_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_PLING . assignment_expr T_COLON assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 668
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 668:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_PLING assignment_expr
## LR(1) items:
conditional_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_PLING assignment_expr . T_COLON assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_COLON shift to state 669
## Reductions:

State 669:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_PLING assignment_expr T_COLON
## LR(1) items:
conditional_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_PLING assignment_expr T_COLON . assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 670
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 670:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_PLING assignment_expr T_COLON assignment_expr
## LR(1) items:
conditional_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_PLING assignment_expr T_COLON assignment_expr . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_PLING assignment_expr T_COLON assignment_expr

State 671:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_OR
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_OR . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 672
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 672:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_OR post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_OR post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
-- On T_BIT_XOR shift to state 540
-- On T_BIT_OR shift to state 544
-- On T_BIT_AND shift to state 542
-- On T_AND shift to state 546
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_COMMA T_COLON RDots EOF
--   reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_OR post_in_expr(d1)

State 673:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_NOT_EQUAL
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_NOT_EQUAL . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 674
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 674:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_NOT_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_NOT_EQUAL post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_NOT_EQUAL post_in_expr(d1)

State 675:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_LESS_THAN_EQUAL
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_LESS_THAN_EQUAL . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 676
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 676:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_LESS_THAN_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_LESS_THAN_EQUAL post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_LESS_THAN_EQUAL post_in_expr(d1)

State 677:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_LESS_THAN
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_LESS_THAN . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 678
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 678:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_LESS_THAN post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_LESS_THAN post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_LESS_THAN post_in_expr(d1)

State 679:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_INSTANCEOF
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_INSTANCEOF . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 680
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 680:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_INSTANCEOF post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_INSTANCEOF post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_INSTANCEOF post_in_expr(d1)

State 681:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_IN
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_IN . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 682
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 682:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_IN post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_IN post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_IN post_in_expr(d1)

State 683:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_GREATER_THAN_EQUAL
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_GREATER_THAN_EQUAL . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 684
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 684:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_GREATER_THAN_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_GREATER_THAN_EQUAL post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_GREATER_THAN_EQUAL post_in_expr(d1)

State 685:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_GREATER_THAN
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_GREATER_THAN . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 686
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 686:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_GREATER_THAN post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_GREATER_THAN post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_GREATER_THAN post_in_expr(d1)

State 687:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_EQUAL
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_EQUAL . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 688
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 688:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_EQUAL post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_EQUAL post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_EQUAL post_in_expr(d1)

State 689:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_BIT_XOR
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_BIT_XOR . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 690
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 690:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_BIT_XOR post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_BIT_XOR post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
-- On T_BIT_AND shift to state 542
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_AND RDots EOF
--   reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_BIT_XOR post_in_expr(d1)

State 691:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_BIT_OR
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_BIT_OR . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 692
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 692:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_BIT_OR post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_BIT_OR post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
-- On T_BIT_XOR shift to state 540
-- On T_BIT_AND shift to state 542
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_COMMA T_COLON T_BIT_OR T_AND RDots EOF
--   reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_BIT_OR post_in_expr(d1)

State 693:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_BIT_AND
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_BIT_AND . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 694
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 694:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_BIT_AND post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_BIT_AND post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_BIT_AND post_in_expr(d1)

State 695:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_AND
## LR(1) items:
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_AND . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 696
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 696:
## Known stack suffix:
## post_in_expr(primary_no_stmt) T_AND post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_AND post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
-- On T_BIT_XOR shift to state 540
-- On T_BIT_OR shift to state 544
-- On T_BIT_AND shift to state 542
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_COMMA T_COLON T_AND RDots EOF
--   reduce production post_in_expr(primary_no_stmt) -> post_in_expr(primary_no_stmt) T_AND post_in_expr(d1)

State 697:
## Known stack suffix:
## optl(stmt_list)
## LR(1) items:
function_body -> optl(stmt_list) . [ T_RCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_body -> optl(stmt_list)

State 698:
## Known stack suffix:
## option(T_CONST)
## LR(1) items:
enum_decl -> option(T_CONST) . T_ENUM id T_LCURLY listc(enum_member) option(T_COMMA) T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_ENUM shift to state 699
## Reductions:

State 699:
## Known stack suffix:
## option(T_CONST) T_ENUM
## LR(1) items:
enum_decl -> option(T_CONST) T_ENUM . id T_LCURLY listc(enum_member) option(T_COMMA) T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 700
## Reductions:

State 700:
## Known stack suffix:
## option(T_CONST) T_ENUM id
## LR(1) items:
enum_decl -> option(T_CONST) T_ENUM id . T_LCURLY listc(enum_member) option(T_COMMA) T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_LCURLY shift to state 701
## Reductions:

State 701:
## Known stack suffix:
## option(T_CONST) T_ENUM id T_LCURLY
## LR(1) items:
enum_decl -> option(T_CONST) T_ENUM id T_LCURLY . listc(enum_member) option(T_COMMA) T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name shift to state 702
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On listc(enum_member) shift to state 730
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 733
-- On enum_member shift to state 737
## Reductions:

State 702:
## Known stack suffix:
## property_name
## LR(1) items:
enum_member -> property_name . [ T_RCURLY T_COMMA ]
enum_member -> property_name . T_ASSIGN assignment_expr_no_stmt [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_ASSIGN shift to state 703
## Reductions:
-- On T_RCURLY T_COMMA
--   reduce production enum_member -> property_name

State 703:
## Known stack suffix:
## property_name T_ASSIGN
## LR(1) items:
enum_member -> property_name T_ASSIGN . assignment_expr_no_stmt [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 319
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On boolean_literal shift to state 386
-- On assignment_expr_no_stmt shift to state 727
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 704:
## Known stack suffix:
## new_expr(primary_no_stmt)
## LR(1) items:
left_hand_side_expr_(primary_no_stmt) -> new_expr(primary_no_stmt) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production left_hand_side_expr_(primary_no_stmt) -> new_expr(primary_no_stmt)

State 705:
## Known stack suffix:
## member_expr(primary_no_stmt)
## LR(1) items:
call_expr(primary_no_stmt) -> member_expr(primary_no_stmt) . arguments [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) . T_LBRACKET expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) . T_PERIOD field_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) . template_literal [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) . T_PERIOD T_DOTS [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
new_expr(primary_no_stmt) -> member_expr(primary_no_stmt) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On T_PERIOD shift to state 706
-- On T_LPAREN shift to state 80
-- On T_LBRACKET shift to state 709
-- On T_BACKQUOTE shift to state 293
-- On template_literal shift to state 712
-- On arguments shift to state 713
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND RDots EOF
--   reduce production new_expr(primary_no_stmt) -> member_expr(primary_no_stmt)

State 706:
## Known stack suffix:
## member_expr(primary_no_stmt) T_PERIOD
## LR(1) items:
member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) T_PERIOD . field_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) T_PERIOD . T_DOTS [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_INTERFACE shift to state 43
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DOTS shift to state 707
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 77
-- On id shift to state 78
-- On field_name shift to state 708
## Reductions:

State 707:
## Known stack suffix:
## member_expr(primary_no_stmt) T_PERIOD T_DOTS
## LR(1) items:
member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) T_PERIOD T_DOTS . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) T_PERIOD T_DOTS

State 708:
## Known stack suffix:
## member_expr(primary_no_stmt) T_PERIOD field_name
## LR(1) items:
member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) T_PERIOD field_name . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) T_PERIOD field_name

State 709:
## Known stack suffix:
## member_expr(primary_no_stmt) T_LBRACKET
## LR(1) items:
member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) T_LBRACKET . expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 710
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 710:
## Known stack suffix:
## member_expr(primary_no_stmt) T_LBRACKET expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_RBRACKET T_COMMA ]
member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) T_LBRACKET expr . T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On T_RBRACKET shift to state 711
-- On T_COMMA shift to state 395
## Reductions:

State 711:
## Known stack suffix:
## member_expr(primary_no_stmt) T_LBRACKET expr T_RBRACKET
## LR(1) items:
member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) T_LBRACKET expr T_RBRACKET . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) T_LBRACKET expr T_RBRACKET

State 712:
## Known stack suffix:
## member_expr(primary_no_stmt) template_literal
## LR(1) items:
member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) template_literal . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(primary_no_stmt) -> member_expr(primary_no_stmt) template_literal

State 713:
## Known stack suffix:
## member_expr(primary_no_stmt) arguments
## LR(1) items:
call_expr(primary_no_stmt) -> member_expr(primary_no_stmt) arguments . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expr(primary_no_stmt) -> member_expr(primary_no_stmt) arguments

State 714:
## Known stack suffix:
## left_hand_side_expr_(primary_no_stmt)
## LR(1) items:
assignment_expr_no_stmt -> left_hand_side_expr_(primary_no_stmt) . assignment_operator assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
pre_in_expr(primary_no_stmt) -> left_hand_side_expr_(primary_no_stmt) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_RSHIFT_ASSIGN shift to state 367
-- On T_RSHIFT3_ASSIGN shift to state 368
-- On T_PLUS_ASSIGN shift to state 369
-- On T_MULT_ASSIGN shift to state 370
-- On T_MOD_ASSIGN shift to state 371
-- On T_MINUS_ASSIGN shift to state 372
-- On T_LSHIFT_ASSIGN shift to state 373
-- On T_DIV_ASSIGN shift to state 374
-- On T_BIT_XOR_ASSIGN shift to state 375
-- On T_BIT_OR_ASSIGN shift to state 376
-- On T_BIT_AND_ASSIGN shift to state 377
-- On T_ASSIGN shift to state 378
-- On assignment_operator shift to state 715
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> left_hand_side_expr_(primary_no_stmt)

State 715:
## Known stack suffix:
## left_hand_side_expr_(primary_no_stmt) assignment_operator
## LR(1) items:
assignment_expr_no_stmt -> left_hand_side_expr_(primary_no_stmt) assignment_operator . assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 716
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 716:
## Known stack suffix:
## left_hand_side_expr_(primary_no_stmt) assignment_operator assignment_expr
## LR(1) items:
assignment_expr_no_stmt -> left_hand_side_expr_(primary_no_stmt) assignment_operator assignment_expr . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expr_no_stmt -> left_hand_side_expr_(primary_no_stmt) assignment_operator assignment_expr

State 717:
## Known stack suffix:
## conditional_expr(primary_no_stmt)
## LR(1) items:
assignment_expr_no_stmt -> conditional_expr(primary_no_stmt) . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expr_no_stmt -> conditional_expr(primary_no_stmt)

State 718:
## Known stack suffix:
## call_expr(primary_no_stmt)
## LR(1) items:
call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) . arguments [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) . T_LBRACKET expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) . T_PERIOD method_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) . template_literal [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) . T_PERIOD T_DOTS [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
left_hand_side_expr_(primary_no_stmt) -> call_expr(primary_no_stmt) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On T_PERIOD shift to state 719
-- On T_LPAREN shift to state 80
-- On T_LBRACKET shift to state 722
-- On T_BACKQUOTE shift to state 293
-- On template_literal shift to state 725
-- On arguments shift to state 726
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND RDots EOF
--   reduce production left_hand_side_expr_(primary_no_stmt) -> call_expr(primary_no_stmt)

State 719:
## Known stack suffix:
## call_expr(primary_no_stmt) T_PERIOD
## LR(1) items:
call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) T_PERIOD . method_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) T_PERIOD . T_DOTS [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_INTERFACE shift to state 43
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DOTS shift to state 720
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On method_name shift to state 721
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 363
-- On id shift to state 364
## Reductions:

State 720:
## Known stack suffix:
## call_expr(primary_no_stmt) T_PERIOD T_DOTS
## LR(1) items:
call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) T_PERIOD T_DOTS . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) T_PERIOD T_DOTS

State 721:
## Known stack suffix:
## call_expr(primary_no_stmt) T_PERIOD method_name
## LR(1) items:
call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) T_PERIOD method_name . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) T_PERIOD method_name

State 722:
## Known stack suffix:
## call_expr(primary_no_stmt) T_LBRACKET
## LR(1) items:
call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) T_LBRACKET . expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 723
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 723:
## Known stack suffix:
## call_expr(primary_no_stmt) T_LBRACKET expr
## LR(1) items:
call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) T_LBRACKET expr . T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
expr -> expr . T_COMMA assignment_expr [ T_RBRACKET T_COMMA ]
## Transitions:
-- On T_RBRACKET shift to state 724
-- On T_COMMA shift to state 395
## Reductions:

State 724:
## Known stack suffix:
## call_expr(primary_no_stmt) T_LBRACKET expr T_RBRACKET
## LR(1) items:
call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) T_LBRACKET expr T_RBRACKET . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) T_LBRACKET expr T_RBRACKET

State 725:
## Known stack suffix:
## call_expr(primary_no_stmt) template_literal
## LR(1) items:
call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) template_literal . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) template_literal

State 726:
## Known stack suffix:
## call_expr(primary_no_stmt) arguments
## LR(1) items:
call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) arguments . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expr(primary_no_stmt) -> call_expr(primary_no_stmt) arguments

State 727:
## Known stack suffix:
## property_name T_ASSIGN assignment_expr_no_stmt
## LR(1) items:
enum_member -> property_name T_ASSIGN assignment_expr_no_stmt . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enum_member -> property_name T_ASSIGN assignment_expr_no_stmt

State 728:
## Known stack suffix:
## arrow_function
## LR(1) items:
assignment_expr_no_stmt -> arrow_function . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expr_no_stmt -> arrow_function

State 729:
## Known stack suffix:
## numeric_literal_as_string
## LR(1) items:
property_name -> numeric_literal_as_string . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_LPAREN T_LESS_THAN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name -> numeric_literal_as_string

State 730:
## Known stack suffix:
## option(T_CONST) T_ENUM id T_LCURLY listc(enum_member)
## LR(1) items:
enum_decl -> option(T_CONST) T_ENUM id T_LCURLY listc(enum_member) . option(T_COMMA) T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
listc(enum_member) -> listc(enum_member) . T_COMMA enum_member [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_COMMA shift to state 731
-- On option(T_COMMA) shift to state 735
## Reductions:
-- On T_RCURLY
--   reduce production option(T_COMMA) ->

State 731:
## Known stack suffix:
## listc(enum_member) T_COMMA
## LR(1) items:
listc(enum_member) -> listc(enum_member) T_COMMA . enum_member [ T_RCURLY T_COMMA ]
option(T_COMMA) -> T_COMMA . [ T_RCURLY ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name shift to state 702
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 733
-- On enum_member shift to state 734
## Reductions:
-- On T_RCURLY
--   reduce production option(T_COMMA) -> T_COMMA

State 732:
## Known stack suffix:
## ident_keyword
## LR(1) items:
property_name -> ident_keyword . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_LPAREN T_LESS_THAN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name -> ident_keyword

State 733:
## Known stack suffix:
## id
## LR(1) items:
property_name -> id . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_LPAREN T_LESS_THAN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name -> id

State 734:
## Known stack suffix:
## listc(enum_member) T_COMMA enum_member
## LR(1) items:
listc(enum_member) -> listc(enum_member) T_COMMA enum_member . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(enum_member) -> listc(enum_member) T_COMMA enum_member

State 735:
## Known stack suffix:
## option(T_CONST) T_ENUM id T_LCURLY listc(enum_member) option(T_COMMA)
## LR(1) items:
enum_decl -> option(T_CONST) T_ENUM id T_LCURLY listc(enum_member) option(T_COMMA) . T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_RCURLY shift to state 736
## Reductions:

State 736:
## Known stack suffix:
## option(T_CONST) T_ENUM id T_LCURLY listc(enum_member) option(T_COMMA) T_RCURLY
## LR(1) items:
enum_decl -> option(T_CONST) T_ENUM id T_LCURLY listc(enum_member) option(T_COMMA) T_RCURLY . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enum_decl -> option(T_CONST) T_ENUM id T_LCURLY listc(enum_member) option(T_COMMA) T_RCURLY

State 737:
## Known stack suffix:
## enum_member
## LR(1) items:
listc(enum_member) -> enum_member . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(enum_member) -> enum_member

State 738:
## Known stack suffix:
## nonempty_list(item)
## LR(1) items:
stmt_list -> nonempty_list(item) . [ T_RCURLY T_DEFAULT T_CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt_list -> nonempty_list(item)

State 739:
## Known stack suffix:
## nonempty_list(decorator)
## LR(1) items:
class_decl -> nonempty_list(decorator) . T_CLASS option(binding_id) option(generics) class_heritage class_body [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_CLASS shift to state 740
## Reductions:

State 740:
## Known stack suffix:
## nonempty_list(decorator) T_CLASS
## LR(1) items:
class_decl -> nonempty_list(decorator) T_CLASS . option(binding_id) option(generics) class_heritage class_body [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(binding_id) shift to state 741
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_id shift to state 620
## Reductions:
-- On T_LESS_THAN T_LCURLY T_IMPLEMENTS T_EXTENDS
--   reduce production option(binding_id) ->

State 741:
## Known stack suffix:
## nonempty_list(decorator) T_CLASS option(binding_id)
## LR(1) items:
class_decl -> nonempty_list(decorator) T_CLASS option(binding_id) . option(generics) class_heritage class_body [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 742
-- On generics shift to state 175
## Reductions:
-- On T_LCURLY T_IMPLEMENTS T_EXTENDS
--   reduce production option(generics) ->

State 742:
## Known stack suffix:
## nonempty_list(decorator) T_CLASS option(binding_id) option(generics)
## LR(1) items:
class_decl -> nonempty_list(decorator) T_CLASS option(binding_id) option(generics) . class_heritage class_body [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_EXTENDS shift to state 140
-- On option(extends_clause) shift to state 264
-- On extends_clause shift to state 269
-- On class_heritage shift to state 743
## Reductions:
-- On T_LCURLY T_IMPLEMENTS
--   reduce production option(extends_clause) ->

State 743:
## Known stack suffix:
## nonempty_list(decorator) T_CLASS option(binding_id) option(generics) class_heritage
## LR(1) items:
class_decl -> nonempty_list(decorator) T_CLASS option(binding_id) option(generics) class_heritage . class_body [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_LCURLY shift to state 271
-- On class_body shift to state 744
## Reductions:

State 744:
## Known stack suffix:
## nonempty_list(decorator) T_CLASS option(binding_id) option(generics) class_heritage class_body
## LR(1) items:
class_decl -> nonempty_list(decorator) T_CLASS option(binding_id) option(generics) class_heritage class_body . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_decl -> nonempty_list(decorator) T_CLASS option(binding_id) option(generics) class_heritage class_body

State 745:
## Known stack suffix:
## lexical_decl
## LR(1) items:
decl -> lexical_decl . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> lexical_decl

State 746:
## Known stack suffix:
## labelled_stmt
## LR(1) items:
stmt -> labelled_stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> labelled_stmt

State 747:
## Known stack suffix:
## iteration_stmt
## LR(1) items:
stmt -> iteration_stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> iteration_stmt

State 748:
## Known stack suffix:
## item
## LR(1) items:
nonempty_list(item) -> item . [ T_RCURLY T_DEFAULT T_CASE ]
nonempty_list(item) -> item . nonempty_list(item) [ T_RCURLY T_DEFAULT T_CASE ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 749
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_RCURLY T_DEFAULT T_CASE
--   reduce production nonempty_list(item) -> item
-- On T_ENUM
--   reduce production option(T_CONST) ->

State 749:
## Known stack suffix:
## item nonempty_list(item)
## LR(1) items:
nonempty_list(item) -> item nonempty_list(item) . [ T_RCURLY T_DEFAULT T_CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(item) -> item nonempty_list(item)

State 750:
## Known stack suffix:
## interface_decl
## LR(1) items:
decl -> interface_decl . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> interface_decl

State 751:
## Known stack suffix:
## if_stmt
## LR(1) items:
stmt -> if_stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> if_stmt

State 752:
## Known stack suffix:
## id
## LR(1) items:
arrow_function -> id . T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA EOF ]
labelled_stmt -> id . T_COLON stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
primary_expr_no_braces -> id . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_COLON shift to state 753
-- On T_ARROW shift to state 383
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND EOF
--   reduce production primary_expr_no_braces -> id

State 753:
## Known stack suffix:
## id T_COLON
## LR(1) items:
labelled_stmt -> id T_COLON . stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 754
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On empty_stmt shift to state 760
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 754:
## Known stack suffix:
## id T_COLON stmt
## LR(1) items:
labelled_stmt -> id T_COLON stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labelled_stmt -> id T_COLON stmt

State 755:
## Known stack suffix:
## expr_stmt
## LR(1) items:
stmt -> expr_stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> expr_stmt

State 756:
## Known stack suffix:
## expr_no_stmt
## LR(1) items:
expr_no_stmt -> expr_no_stmt . T_COMMA assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
expr_stmt -> expr_no_stmt . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_COMMA shift to state 757
-- On sc shift to state 759
## Reductions:

State 757:
## Known stack suffix:
## expr_no_stmt T_COMMA
## LR(1) items:
expr_no_stmt -> expr_no_stmt T_COMMA . assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 758
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 758:
## Known stack suffix:
## expr_no_stmt T_COMMA assignment_expr
## LR(1) items:
expr_no_stmt -> expr_no_stmt T_COMMA assignment_expr . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_no_stmt -> expr_no_stmt T_COMMA assignment_expr

State 759:
## Known stack suffix:
## expr_no_stmt sc
## LR(1) items:
expr_stmt -> expr_no_stmt sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_stmt -> expr_no_stmt sc

State 760:
## Known stack suffix:
## empty_stmt
## LR(1) items:
stmt -> empty_stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> empty_stmt

State 761:
## Known stack suffix:
## continue_stmt
## LR(1) items:
stmt -> continue_stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> continue_stmt

State 762:
## Known stack suffix:
## break_stmt
## LR(1) items:
stmt -> break_stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> break_stmt

State 763:
## Known stack suffix:
## block
## LR(1) items:
stmt -> block . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> block

State 764:
## Known stack suffix:
## assignment_expr_no_stmt
## LR(1) items:
expr_no_stmt -> assignment_expr_no_stmt . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_no_stmt -> assignment_expr_no_stmt

State 765:
## Known stack suffix:
## generator_decl
## LR(1) items:
decl -> generator_decl . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> generator_decl

State 766:
## Known stack suffix:
## function_decl
## LR(1) items:
decl -> function_decl . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> function_decl

State 767:
## Known stack suffix:
## enum_decl
## LR(1) items:
decl -> enum_decl . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> enum_decl

State 768:
## Known stack suffix:
## decorator
## LR(1) items:
nonempty_list(decorator) -> decorator . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
nonempty_list(decorator) -> decorator . nonempty_list(decorator) [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_AT shift to state 278
-- On nonempty_list(decorator) shift to state 769
-- On decorator shift to state 768
## Reductions:
-- On T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE
--   reduce production nonempty_list(decorator) -> decorator

State 769:
## Known stack suffix:
## decorator nonempty_list(decorator)
## LR(1) items:
nonempty_list(decorator) -> decorator nonempty_list(decorator) . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(decorator) -> decorator nonempty_list(decorator)

State 770:
## Known stack suffix:
## decl
## LR(1) items:
item -> decl . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production item -> decl

State 771:
## Known stack suffix:
## class_decl
## LR(1) items:
decl -> class_decl . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> class_decl

State 772:
## Known stack suffix:
## async_decl
## LR(1) items:
decl -> async_decl . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> async_decl

State 773:
## Known stack suffix:
## T_ASYNC T_FUNCTION id call_signature T_LCURLY function_body
## LR(1) items:
async_decl -> T_ASYNC T_FUNCTION id call_signature T_LCURLY function_body . T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_RCURLY shift to state 774
## Reductions:

State 774:
## Known stack suffix:
## T_ASYNC T_FUNCTION id call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
async_decl -> T_ASYNC T_FUNCTION id call_signature T_LCURLY function_body T_RCURLY . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production async_decl -> T_ASYNC T_FUNCTION id call_signature T_LCURLY function_body T_RCURLY

State 775:
## Known stack suffix:
## T_FUNCTION T_MULT id call_signature T_LCURLY function_body
## LR(1) items:
generator_decl -> T_FUNCTION T_MULT id call_signature T_LCURLY function_body . T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_RCURLY shift to state 776
## Reductions:

State 776:
## Known stack suffix:
## T_FUNCTION T_MULT id call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
generator_decl -> T_FUNCTION T_MULT id call_signature T_LCURLY function_body T_RCURLY . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production generator_decl -> T_FUNCTION T_MULT id call_signature T_LCURLY function_body T_RCURLY

State 777:
## Known stack suffix:
## T_FUNCTION option(id)
## LR(1) items:
function_decl -> T_FUNCTION option(id) . call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 778
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 778:
## Known stack suffix:
## T_FUNCTION option(id) call_signature
## LR(1) items:
function_decl -> T_FUNCTION option(id) call_signature . T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_LCURLY shift to state 779
## Reductions:

State 779:
## Known stack suffix:
## T_FUNCTION option(id) call_signature T_LCURLY
## LR(1) items:
function_decl -> T_FUNCTION option(id) call_signature T_LCURLY . function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 780
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 780:
## Known stack suffix:
## T_FUNCTION option(id) call_signature T_LCURLY function_body
## LR(1) items:
function_decl -> T_FUNCTION option(id) call_signature T_LCURLY function_body . T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_RCURLY shift to state 781
## Reductions:

State 781:
## Known stack suffix:
## T_FUNCTION option(id) call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
function_decl -> T_FUNCTION option(id) call_signature T_LCURLY function_body T_RCURLY . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_decl -> T_FUNCTION option(id) call_signature T_LCURLY function_body T_RCURLY

State 782:
## Known stack suffix:
## T_FUNCTION option(id) call_signature T_LCURLY function_body
## LR(1) items:
function_expr -> T_FUNCTION option(id) call_signature T_LCURLY function_body . T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_RCURLY shift to state 783
## Reductions:

State 783:
## Known stack suffix:
## T_FUNCTION option(id) call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
function_expr -> T_FUNCTION option(id) call_signature T_LCURLY function_body T_RCURLY . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_expr -> T_FUNCTION option(id) call_signature T_LCURLY function_body T_RCURLY

State 784:
## Known stack suffix:
## T_DOTS
## LR(1) items:
arrow_body -> T_DOTS . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_body -> T_DOTS

State 785:
## Known stack suffix:
## function_expr
## LR(1) items:
arrow_body -> function_expr . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_body -> function_expr

State 786:
## Known stack suffix:
## block
## LR(1) items:
arrow_body -> block . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_body -> block

State 787:
## Known stack suffix:
## assignment_expr_no_stmt
## LR(1) items:
arrow_body -> assignment_expr_no_stmt . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_body -> assignment_expr_no_stmt

State 788:
## Known stack suffix:
## T_ASYNC id T_ARROW arrow_body
## LR(1) items:
arrow_function -> T_ASYNC id T_ARROW arrow_body . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_function -> T_ASYNC id T_ARROW arrow_body

State 789:
## Known stack suffix:
## T_DO stmt
## LR(1) items:
iteration_stmt -> T_DO stmt . T_WHILE T_LPAREN expr T_RPAREN sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_WHILE shift to state 790
## Reductions:

State 790:
## Known stack suffix:
## T_DO stmt T_WHILE
## LR(1) items:
iteration_stmt -> T_DO stmt T_WHILE . T_LPAREN expr T_RPAREN sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_LPAREN shift to state 791
## Reductions:

State 791:
## Known stack suffix:
## T_DO stmt T_WHILE T_LPAREN
## LR(1) items:
iteration_stmt -> T_DO stmt T_WHILE T_LPAREN . expr T_RPAREN sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 792
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 792:
## Known stack suffix:
## T_DO stmt T_WHILE T_LPAREN expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_RPAREN T_COMMA ]
iteration_stmt -> T_DO stmt T_WHILE T_LPAREN expr . T_RPAREN sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RPAREN shift to state 793
-- On T_COMMA shift to state 395
## Reductions:

State 793:
## Known stack suffix:
## T_DO stmt T_WHILE T_LPAREN expr T_RPAREN
## LR(1) items:
iteration_stmt -> T_DO stmt T_WHILE T_LPAREN expr T_RPAREN . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 794
## Reductions:

State 794:
## Known stack suffix:
## T_DO stmt T_WHILE T_LPAREN expr T_RPAREN sc
## LR(1) items:
iteration_stmt -> T_DO stmt T_WHILE T_LPAREN expr T_RPAREN sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_stmt -> T_DO stmt T_WHILE T_LPAREN expr T_RPAREN sc

State 795:
## Known stack suffix:
## T_FOR T_LPAREN T_DOTS T_RPAREN stmt
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN T_DOTS T_RPAREN stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_stmt -> T_FOR T_LPAREN T_DOTS T_RPAREN stmt

State 796:
## Known stack suffix:
## T_CONST
## LR(1) items:
for_single_variable_decl -> T_CONST . for_binding [ T_OF T_IN ]
for_variable_decl -> T_CONST . listc(variable_decl_no_in) [ T_SEMICOLON ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On variable_decl_no_in shift to state 496
-- On object_binding_pattern shift to state 123
-- On listc(variable_decl_no_in) shift to state 797
-- On ident_semi_keyword shift to state 75
-- On id shift to state 574
-- On for_binding shift to state 798
-- On binding_pattern shift to state 577
-- On array_binding_pattern shift to state 127
## Reductions:

State 797:
## Known stack suffix:
## T_CONST listc(variable_decl_no_in)
## LR(1) items:
for_variable_decl -> T_CONST listc(variable_decl_no_in) . [ T_SEMICOLON ]
listc(variable_decl_no_in) -> listc(variable_decl_no_in) . T_COMMA variable_decl_no_in [ T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_COMMA shift to state 498
## Reductions:
-- On T_SEMICOLON
--   reduce production for_variable_decl -> T_CONST listc(variable_decl_no_in)

State 798:
## Known stack suffix:
## T_CONST for_binding
## LR(1) items:
for_single_variable_decl -> T_CONST for_binding . [ T_OF T_IN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_single_variable_decl -> T_CONST for_binding

State 799:
## Known stack suffix:
## T_FOR T_LPAREN option(expr_no_in)
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN option(expr_no_in) . T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_SEMICOLON shift to state 800
## Reductions:

State 800:
## Known stack suffix:
## T_FOR T_LPAREN option(expr_no_in) T_SEMICOLON
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN option(expr_no_in) T_SEMICOLON . option(expr) T_SEMICOLON option(expr) T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On option(expr) shift to state 801
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 472
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:
-- On T_SEMICOLON
--   reduce production option(expr) ->

State 801:
## Known stack suffix:
## T_FOR T_LPAREN option(expr_no_in) T_SEMICOLON option(expr)
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN option(expr_no_in) T_SEMICOLON option(expr) . T_SEMICOLON option(expr) T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_SEMICOLON shift to state 802
## Reductions:

State 802:
## Known stack suffix:
## T_FOR T_LPAREN option(expr_no_in) T_SEMICOLON option(expr) T_SEMICOLON
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN option(expr_no_in) T_SEMICOLON option(expr) T_SEMICOLON . option(expr) T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On option(expr) shift to state 803
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 472
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:
-- On T_RPAREN
--   reduce production option(expr) ->

State 803:
## Known stack suffix:
## T_FOR T_LPAREN option(expr_no_in) T_SEMICOLON option(expr) T_SEMICOLON option(expr)
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN option(expr_no_in) T_SEMICOLON option(expr) T_SEMICOLON option(expr) . T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RPAREN shift to state 804
## Reductions:

State 804:
## Known stack suffix:
## T_FOR T_LPAREN option(expr_no_in) T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN option(expr_no_in) T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN . stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 805
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On empty_stmt shift to state 760
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 805:
## Known stack suffix:
## T_FOR T_LPAREN option(expr_no_in) T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN stmt
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN option(expr_no_in) T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_stmt -> T_FOR T_LPAREN option(expr_no_in) T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN stmt

State 806:
## Known stack suffix:
## left_hand_side_expr_(d1)
## LR(1) items:
assignment_expr_no_in -> left_hand_side_expr_(d1) . assignment_operator assignment_expr_no_in [ T_SEMICOLON T_COMMA ]
left_hand_side_expr -> left_hand_side_expr_(d1) . [ T_OF T_IN ]
pre_in_expr(d1) -> left_hand_side_expr_(d1) . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_RSHIFT_ASSIGN shift to state 367
-- On T_RSHIFT3_ASSIGN shift to state 368
-- On T_PLUS_ASSIGN shift to state 369
-- On T_MULT_ASSIGN shift to state 370
-- On T_MOD_ASSIGN shift to state 371
-- On T_MINUS_ASSIGN shift to state 372
-- On T_LSHIFT_ASSIGN shift to state 373
-- On T_DIV_ASSIGN shift to state 374
-- On T_BIT_XOR_ASSIGN shift to state 375
-- On T_BIT_OR_ASSIGN shift to state 376
-- On T_BIT_AND_ASSIGN shift to state 377
-- On T_ASSIGN shift to state 378
-- On assignment_operator shift to state 526
## Reductions:
-- On T_OF T_IN
--   reduce production left_hand_side_expr -> left_hand_side_expr_(d1)
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production pre_in_expr(d1) -> left_hand_side_expr_(d1)

State 807:
## Known stack suffix:
## T_FOR T_LPAREN left_hand_side_expr
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN left_hand_side_expr . T_IN expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
iteration_stmt -> T_FOR T_LPAREN left_hand_side_expr . T_OF assignment_expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_OF shift to state 808
-- On T_IN shift to state 812
## Reductions:

State 808:
## Known stack suffix:
## T_FOR T_LPAREN left_hand_side_expr T_OF
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN left_hand_side_expr T_OF . assignment_expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 809
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 809:
## Known stack suffix:
## T_FOR T_LPAREN left_hand_side_expr T_OF assignment_expr
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN left_hand_side_expr T_OF assignment_expr . T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RPAREN shift to state 810
## Reductions:

State 810:
## Known stack suffix:
## T_FOR T_LPAREN left_hand_side_expr T_OF assignment_expr T_RPAREN
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN left_hand_side_expr T_OF assignment_expr T_RPAREN . stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 811
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On empty_stmt shift to state 760
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 811:
## Known stack suffix:
## T_FOR T_LPAREN left_hand_side_expr T_OF assignment_expr T_RPAREN stmt
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN left_hand_side_expr T_OF assignment_expr T_RPAREN stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_stmt -> T_FOR T_LPAREN left_hand_side_expr T_OF assignment_expr T_RPAREN stmt

State 812:
## Known stack suffix:
## T_FOR T_LPAREN left_hand_side_expr T_IN
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN left_hand_side_expr T_IN . expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 813
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 813:
## Known stack suffix:
## T_FOR T_LPAREN left_hand_side_expr T_IN expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_RPAREN T_COMMA ]
iteration_stmt -> T_FOR T_LPAREN left_hand_side_expr T_IN expr . T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RPAREN shift to state 814
-- On T_COMMA shift to state 395
## Reductions:

State 814:
## Known stack suffix:
## T_FOR T_LPAREN left_hand_side_expr T_IN expr T_RPAREN
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN left_hand_side_expr T_IN expr T_RPAREN . stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 815
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On empty_stmt shift to state 760
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 815:
## Known stack suffix:
## T_FOR T_LPAREN left_hand_side_expr T_IN expr T_RPAREN stmt
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN left_hand_side_expr T_IN expr T_RPAREN stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_stmt -> T_FOR T_LPAREN left_hand_side_expr T_IN expr T_RPAREN stmt

State 816:
## Known stack suffix:
## T_FOR T_LPAREN for_variable_decl
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_variable_decl . T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_SEMICOLON shift to state 817
## Reductions:

State 817:
## Known stack suffix:
## T_FOR T_LPAREN for_variable_decl T_SEMICOLON
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_variable_decl T_SEMICOLON . option(expr) T_SEMICOLON option(expr) T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On option(expr) shift to state 818
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 472
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:
-- On T_SEMICOLON
--   reduce production option(expr) ->

State 818:
## Known stack suffix:
## T_FOR T_LPAREN for_variable_decl T_SEMICOLON option(expr)
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_variable_decl T_SEMICOLON option(expr) . T_SEMICOLON option(expr) T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_SEMICOLON shift to state 819
## Reductions:

State 819:
## Known stack suffix:
## T_FOR T_LPAREN for_variable_decl T_SEMICOLON option(expr) T_SEMICOLON
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_variable_decl T_SEMICOLON option(expr) T_SEMICOLON . option(expr) T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On option(expr) shift to state 820
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 472
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:
-- On T_RPAREN
--   reduce production option(expr) ->

State 820:
## Known stack suffix:
## T_FOR T_LPAREN for_variable_decl T_SEMICOLON option(expr) T_SEMICOLON option(expr)
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_variable_decl T_SEMICOLON option(expr) T_SEMICOLON option(expr) . T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RPAREN shift to state 821
## Reductions:

State 821:
## Known stack suffix:
## T_FOR T_LPAREN for_variable_decl T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_variable_decl T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN . stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 822
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On empty_stmt shift to state 760
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 822:
## Known stack suffix:
## T_FOR T_LPAREN for_variable_decl T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN stmt
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_variable_decl T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_stmt -> T_FOR T_LPAREN for_variable_decl T_SEMICOLON option(expr) T_SEMICOLON option(expr) T_RPAREN stmt

State 823:
## Known stack suffix:
## T_FOR T_LPAREN for_single_variable_decl
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_single_variable_decl . T_IN expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
iteration_stmt -> T_FOR T_LPAREN for_single_variable_decl . T_OF assignment_expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_OF shift to state 824
-- On T_IN shift to state 828
## Reductions:

State 824:
## Known stack suffix:
## T_FOR T_LPAREN for_single_variable_decl T_OF
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_single_variable_decl T_OF . assignment_expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 825
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 825:
## Known stack suffix:
## T_FOR T_LPAREN for_single_variable_decl T_OF assignment_expr
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_single_variable_decl T_OF assignment_expr . T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RPAREN shift to state 826
## Reductions:

State 826:
## Known stack suffix:
## T_FOR T_LPAREN for_single_variable_decl T_OF assignment_expr T_RPAREN
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_single_variable_decl T_OF assignment_expr T_RPAREN . stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 827
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On empty_stmt shift to state 760
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 827:
## Known stack suffix:
## T_FOR T_LPAREN for_single_variable_decl T_OF assignment_expr T_RPAREN stmt
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_single_variable_decl T_OF assignment_expr T_RPAREN stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_stmt -> T_FOR T_LPAREN for_single_variable_decl T_OF assignment_expr T_RPAREN stmt

State 828:
## Known stack suffix:
## T_FOR T_LPAREN for_single_variable_decl T_IN
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_single_variable_decl T_IN . expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 829
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 829:
## Known stack suffix:
## T_FOR T_LPAREN for_single_variable_decl T_IN expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_RPAREN T_COMMA ]
iteration_stmt -> T_FOR T_LPAREN for_single_variable_decl T_IN expr . T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RPAREN shift to state 830
-- On T_COMMA shift to state 395
## Reductions:

State 830:
## Known stack suffix:
## T_FOR T_LPAREN for_single_variable_decl T_IN expr T_RPAREN
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_single_variable_decl T_IN expr T_RPAREN . stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 831
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On empty_stmt shift to state 760
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 831:
## Known stack suffix:
## T_FOR T_LPAREN for_single_variable_decl T_IN expr T_RPAREN stmt
## LR(1) items:
iteration_stmt -> T_FOR T_LPAREN for_single_variable_decl T_IN expr T_RPAREN stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_stmt -> T_FOR T_LPAREN for_single_variable_decl T_IN expr T_RPAREN stmt

State 832:
## Known stack suffix:
## expr_no_in
## LR(1) items:
expr_no_in -> expr_no_in . T_COMMA assignment_expr_no_in [ T_SEMICOLON T_COMMA ]
option(expr_no_in) -> expr_no_in . [ T_SEMICOLON ]
## Transitions:
-- On T_COMMA shift to state 833
## Reductions:
-- On T_SEMICOLON
--   reduce production option(expr_no_in) -> expr_no_in

State 833:
## Known stack suffix:
## expr_no_in T_COMMA
## LR(1) items:
expr_no_in -> expr_no_in T_COMMA . assignment_expr_no_in [ T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 502
-- On post_in_expr_no_in shift to state 509
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 525
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr_no_in shift to state 527
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr_no_in shift to state 834
-- On array_literal shift to state 388
## Reductions:

State 834:
## Known stack suffix:
## expr_no_in T_COMMA assignment_expr_no_in
## LR(1) items:
expr_no_in -> expr_no_in T_COMMA assignment_expr_no_in . [ T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_no_in -> expr_no_in T_COMMA assignment_expr_no_in

State 835:
## Known stack suffix:
## assignment_expr_no_in
## LR(1) items:
expr_no_in -> assignment_expr_no_in . [ T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_no_in -> assignment_expr_no_in

State 836:
## Known stack suffix:
## T_IF T_LPAREN expr T_RPAREN stmt
## LR(1) items:
if_stmt -> T_IF T_LPAREN expr T_RPAREN stmt . T_ELSE stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
if_stmt -> T_IF T_LPAREN expr T_RPAREN stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_ELSE shift to state 837
## Reductions:
-- On T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF
--   reduce production if_stmt -> T_IF T_LPAREN expr T_RPAREN stmt

State 837:
## Known stack suffix:
## T_IF T_LPAREN expr T_RPAREN stmt T_ELSE
## LR(1) items:
if_stmt -> T_IF T_LPAREN expr T_RPAREN stmt T_ELSE . stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 838
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On empty_stmt shift to state 760
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 838:
## Known stack suffix:
## T_IF T_LPAREN expr T_RPAREN stmt T_ELSE stmt
## LR(1) items:
if_stmt -> T_IF T_LPAREN expr T_RPAREN stmt T_ELSE stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_stmt -> T_IF T_LPAREN expr T_RPAREN stmt T_ELSE stmt

State 839:
## Known stack suffix:
## T_CASE expr T_COLON optl(stmt_list)
## LR(1) items:
case_clause -> T_CASE expr T_COLON optl(stmt_list) . [ T_RCURLY T_DEFAULT T_CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_clause -> T_CASE expr T_COLON optl(stmt_list)

State 840:
## Known stack suffix:
## T_LCURLY list(case_clause)
## LR(1) items:
case_block -> T_LCURLY list(case_clause) . T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
case_block -> T_LCURLY list(case_clause) . default_clause list(case_clause) T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RCURLY shift to state 841
-- On T_DEFAULT shift to state 842
-- On default_clause shift to state 845
## Reductions:

State 841:
## Known stack suffix:
## T_LCURLY list(case_clause) T_RCURLY
## LR(1) items:
case_block -> T_LCURLY list(case_clause) T_RCURLY . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_block -> T_LCURLY list(case_clause) T_RCURLY

State 842:
## Known stack suffix:
## T_DEFAULT
## LR(1) items:
default_clause -> T_DEFAULT . T_COLON optl(stmt_list) [ T_RCURLY T_CASE ]
## Transitions:
-- On T_COLON shift to state 843
## Reductions:

State 843:
## Known stack suffix:
## T_DEFAULT T_COLON
## LR(1) items:
default_clause -> T_DEFAULT T_COLON . optl(stmt_list) [ T_RCURLY T_CASE ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 844
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY T_CASE
--   reduce production optl(stmt_list) ->

State 844:
## Known stack suffix:
## T_DEFAULT T_COLON optl(stmt_list)
## LR(1) items:
default_clause -> T_DEFAULT T_COLON optl(stmt_list) . [ T_RCURLY T_CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production default_clause -> T_DEFAULT T_COLON optl(stmt_list)

State 845:
## Known stack suffix:
## T_LCURLY list(case_clause) default_clause
## LR(1) items:
case_block -> T_LCURLY list(case_clause) default_clause . list(case_clause) T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_CASE shift to state 461
-- On list(case_clause) shift to state 846
-- On case_clause shift to state 848
## Reductions:
-- On T_RCURLY
--   reduce production list(case_clause) ->

State 846:
## Known stack suffix:
## T_LCURLY list(case_clause) default_clause list(case_clause)
## LR(1) items:
case_block -> T_LCURLY list(case_clause) default_clause list(case_clause) . T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RCURLY shift to state 847
## Reductions:

State 847:
## Known stack suffix:
## T_LCURLY list(case_clause) default_clause list(case_clause) T_RCURLY
## LR(1) items:
case_block -> T_LCURLY list(case_clause) default_clause list(case_clause) T_RCURLY . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_block -> T_LCURLY list(case_clause) default_clause list(case_clause) T_RCURLY

State 848:
## Known stack suffix:
## case_clause
## LR(1) items:
list(case_clause) -> case_clause . list(case_clause) [ T_RCURLY T_DEFAULT ]
## Transitions:
-- On T_CASE shift to state 461
-- On list(case_clause) shift to state 849
-- On case_clause shift to state 848
## Reductions:
-- On T_RCURLY T_DEFAULT
--   reduce production list(case_clause) ->

State 849:
## Known stack suffix:
## case_clause list(case_clause)
## LR(1) items:
list(case_clause) -> case_clause list(case_clause) . [ T_RCURLY T_DEFAULT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(case_clause) -> case_clause list(case_clause)

State 850:
## Known stack suffix:
## T_SWITCH T_LPAREN expr T_RPAREN case_block
## LR(1) items:
switch_stmt -> T_SWITCH T_LPAREN expr T_RPAREN case_block . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_stmt -> T_SWITCH T_LPAREN expr T_RPAREN case_block

State 851:
## Known stack suffix:
## T_WHILE T_LPAREN expr T_RPAREN stmt
## LR(1) items:
iteration_stmt -> T_WHILE T_LPAREN expr T_RPAREN stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_stmt -> T_WHILE T_LPAREN expr T_RPAREN stmt

State 852:
## Known stack suffix:
## T_LCURLY optl(stmt_list)
## LR(1) items:
block -> T_LCURLY optl(stmt_list) . T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_READONLY T_RCURLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_COLON T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown RDots LDots EOF # ]
## Transitions:
-- On T_RCURLY shift to state 853
## Reductions:

State 853:
## Known stack suffix:
## T_LCURLY optl(stmt_list) T_RCURLY
## LR(1) items:
block -> T_LCURLY optl(stmt_list) T_RCURLY . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_READONLY T_RCURLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_COLON T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown RDots LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block -> T_LCURLY optl(stmt_list) T_RCURLY

State 854:
## Known stack suffix:
## id T_ARROW arrow_body
## LR(1) items:
arrow_function -> id T_ARROW arrow_body . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_function -> id T_ARROW arrow_body

State 855:
## Known stack suffix:
## left_hand_side_expr_(d1) assignment_operator assignment_expr
## LR(1) items:
assignment_expr -> left_hand_side_expr_(d1) assignment_operator assignment_expr . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expr -> left_hand_side_expr_(d1) assignment_operator assignment_expr

State 856:
## Known stack suffix:
## call_expr(d1) T_LBRACKET expr
## LR(1) items:
call_expr(d1) -> call_expr(d1) T_LBRACKET expr . T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
expr -> expr . T_COMMA assignment_expr [ T_RBRACKET T_COMMA ]
## Transitions:
-- On T_RBRACKET shift to state 857
-- On T_COMMA shift to state 395
## Reductions:

State 857:
## Known stack suffix:
## call_expr(d1) T_LBRACKET expr T_RBRACKET
## LR(1) items:
call_expr(d1) -> call_expr(d1) T_LBRACKET expr T_RBRACKET . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expr(d1) -> call_expr(d1) T_LBRACKET expr T_RBRACKET

State 858:
## Known stack suffix:
## call_expr(d1) template_literal
## LR(1) items:
call_expr(d1) -> call_expr(d1) template_literal . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expr(d1) -> call_expr(d1) template_literal

State 859:
## Known stack suffix:
## call_expr(d1) arguments
## LR(1) items:
call_expr(d1) -> call_expr(d1) arguments . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expr(d1) -> call_expr(d1) arguments

State 860:
## Known stack suffix:
## post_in_expr(d1) T_PLING
## LR(1) items:
conditional_expr(d1) -> post_in_expr(d1) T_PLING . assignment_expr T_COLON assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 861
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 861:
## Known stack suffix:
## post_in_expr(d1) T_PLING assignment_expr
## LR(1) items:
conditional_expr(d1) -> post_in_expr(d1) T_PLING assignment_expr . T_COLON assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_COLON shift to state 862
## Reductions:

State 862:
## Known stack suffix:
## post_in_expr(d1) T_PLING assignment_expr T_COLON
## LR(1) items:
conditional_expr(d1) -> post_in_expr(d1) T_PLING assignment_expr T_COLON . assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 863
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 863:
## Known stack suffix:
## post_in_expr(d1) T_PLING assignment_expr T_COLON assignment_expr
## LR(1) items:
conditional_expr(d1) -> post_in_expr(d1) T_PLING assignment_expr T_COLON assignment_expr . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expr(d1) -> post_in_expr(d1) T_PLING assignment_expr T_COLON assignment_expr

State 864:
## Known stack suffix:
## post_in_expr(d1) T_OR
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) T_OR . post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 297
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 865
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 353
-- On ident_semi_keyword shift to state 75
-- On id shift to state 354
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On array_literal shift to state 388
## Reductions:

State 865:
## Known stack suffix:
## post_in_expr(d1) T_OR post_in_expr(d1)
## LR(1) items:
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_LESS_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_GREATER_THAN_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_INSTANCEOF post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_IN post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_STRICT_NOT_EQUAL post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_XOR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_BIT_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_AND post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) . T_OR post_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
post_in_expr(d1) -> post_in_expr(d1) T_OR post_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 349
-- On T_STRICT_EQUAL shift to state 534
-- On T_NOT_EQUAL shift to state 536
-- On T_LESS_THAN_EQUAL shift to state 351
-- On T_LESS_THAN shift to state 512
-- On T_INSTANCEOF shift to state 514
-- On T_IN shift to state 516
-- On T_GREATER_THAN_EQUAL shift to state 518
-- On T_GREATER_THAN shift to state 520
-- On T_EQUAL shift to state 538
-- On T_BIT_XOR shift to state 540
-- On T_BIT_OR shift to state 544
-- On T_BIT_AND shift to state 542
-- On T_AND shift to state 546
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_PLING T_OR T_COMMA T_COLON RDots EOF
--   reduce production post_in_expr(d1) -> post_in_expr(d1) T_OR post_in_expr(d1)

State 866:
## Known stack suffix:
## member_expr(d1) T_LBRACKET expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_RBRACKET T_COMMA ]
member_expr(d1) -> member_expr(d1) T_LBRACKET expr . T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_RBRACKET shift to state 867
-- On T_COMMA shift to state 395
## Reductions:

State 867:
## Known stack suffix:
## member_expr(d1) T_LBRACKET expr T_RBRACKET
## LR(1) items:
member_expr(d1) -> member_expr(d1) T_LBRACKET expr T_RBRACKET . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(d1) -> member_expr(d1) T_LBRACKET expr T_RBRACKET

State 868:
## Known stack suffix:
## member_expr(d1) arguments
## LR(1) items:
call_expr(d1) -> member_expr(d1) arguments . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expr(d1) -> member_expr(d1) arguments

State 869:
## Known stack suffix:
## LDots expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_COMMA RDots ]
primary_expr_no_braces -> LDots expr . RDots [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_COMMA shift to state 395
-- On RDots shift to state 870
## Reductions:

State 870:
## Known stack suffix:
## LDots expr RDots
## LR(1) items:
primary_expr_no_braces -> LDots expr RDots . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr_no_braces -> LDots expr RDots

State 871:
## Known stack suffix:
## T_VOID pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(primary_no_stmt) -> T_VOID pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(primary_no_stmt) -> T_VOID pre_in_expr(d1)

State 872:
## Known stack suffix:
## T_ASYNC T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW arrow_body
## LR(1) items:
arrow_function -> T_ASYNC T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW arrow_body . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_function -> T_ASYNC T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW arrow_body

State 873:
## Known stack suffix:
## formal_parameter_list
## LR(1) items:
formal_parameter_list -> formal_parameter_list . T_COMMA formal_parameter [ T_RPAREN T_COMMA ]
formal_parameter_list_opt -> formal_parameter_list . option(T_COMMA) [ T_RPAREN ]
## Transitions:
-- On T_COMMA shift to state 874
-- On option(T_COMMA) shift to state 879
## Reductions:
-- On T_RPAREN
--   reduce production option(T_COMMA) ->

State 874:
## Known stack suffix:
## formal_parameter_list T_COMMA
## LR(1) items:
formal_parameter_list -> formal_parameter_list T_COMMA . formal_parameter [ T_RPAREN T_COMMA ]
option(T_COMMA) -> T_COMMA . [ T_RPAREN ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DOTS shift to state 306
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On object_binding_pattern shift to state 123
-- On ident_semi_keyword shift to state 75
-- On id shift to state 309
-- On formal_parameter shift to state 875
-- On binding_pattern shift to state 876
-- On array_binding_pattern shift to state 127
## Reductions:
-- On T_RPAREN
--   reduce production option(T_COMMA) -> T_COMMA

State 875:
## Known stack suffix:
## formal_parameter_list T_COMMA formal_parameter
## LR(1) items:
formal_parameter_list -> formal_parameter_list T_COMMA formal_parameter . [ T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_parameter_list -> formal_parameter_list T_COMMA formal_parameter

State 876:
## Known stack suffix:
## binding_pattern
## LR(1) items:
formal_parameter -> binding_pattern . option(annotation) option(initializeur) [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_COLON shift to state 155
-- On option(annotation) shift to state 877
-- On annotation shift to state 432
## Reductions:
-- On T_RPAREN T_COMMA T_ASSIGN
--   reduce production option(annotation) ->

State 877:
## Known stack suffix:
## binding_pattern option(annotation)
## LR(1) items:
formal_parameter -> binding_pattern option(annotation) . option(initializeur) [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_ASSIGN shift to state 132
-- On option(initializeur) shift to state 878
-- On initializeur shift to state 431
## Reductions:
-- On T_RPAREN T_COMMA
--   reduce production option(initializeur) ->

State 878:
## Known stack suffix:
## binding_pattern option(annotation) option(initializeur)
## LR(1) items:
formal_parameter -> binding_pattern option(annotation) option(initializeur) . [ T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_parameter -> binding_pattern option(annotation) option(initializeur)

State 879:
## Known stack suffix:
## formal_parameter_list option(T_COMMA)
## LR(1) items:
formal_parameter_list_opt -> formal_parameter_list option(T_COMMA) . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_parameter_list_opt -> formal_parameter_list option(T_COMMA)

State 880:
## Known stack suffix:
## formal_parameter
## LR(1) items:
formal_parameter_list -> formal_parameter . [ T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_parameter_list -> formal_parameter

State 881:
## Known stack suffix:
## T_WITH T_LPAREN expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_RPAREN T_COMMA ]
with_stmt -> T_WITH T_LPAREN expr . T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_RPAREN shift to state 882
-- On T_COMMA shift to state 395
## Reductions:

State 882:
## Known stack suffix:
## T_WITH T_LPAREN expr T_RPAREN
## LR(1) items:
with_stmt -> T_WITH T_LPAREN expr T_RPAREN . stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 883
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On empty_stmt shift to state 760
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 883:
## Known stack suffix:
## T_WITH T_LPAREN expr T_RPAREN stmt
## LR(1) items:
with_stmt -> T_WITH T_LPAREN expr T_RPAREN stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production with_stmt -> T_WITH T_LPAREN expr T_RPAREN stmt

State 884:
## Known stack suffix:
## T_ASYNC T_FUNCTION option(id) call_signature T_LCURLY function_body
## LR(1) items:
async_function_expr -> T_ASYNC T_FUNCTION option(id) call_signature T_LCURLY function_body . T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_RCURLY shift to state 885
## Reductions:

State 885:
## Known stack suffix:
## T_ASYNC T_FUNCTION option(id) call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
async_function_expr -> T_ASYNC T_FUNCTION option(id) call_signature T_LCURLY function_body T_RCURLY . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production async_function_expr -> T_ASYNC T_FUNCTION option(id) call_signature T_LCURLY function_body T_RCURLY

State 886:
## Known stack suffix:
## T_AWAIT pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> T_AWAIT pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> T_AWAIT pre_in_expr(d1)

State 887:
## Known stack suffix:
## T_DOLLARCURLY expr
## LR(1) items:
encaps -> T_DOLLARCURLY expr . T_RCURLY [ T_ENCAPSED_STRING T_DOLLARCURLY T_BACKQUOTE ]
expr -> expr . T_COMMA assignment_expr [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_RCURLY shift to state 888
-- On T_COMMA shift to state 395
## Reductions:

State 888:
## Known stack suffix:
## T_DOLLARCURLY expr T_RCURLY
## LR(1) items:
encaps -> T_DOLLARCURLY expr T_RCURLY . [ T_ENCAPSED_STRING T_DOLLARCURLY T_BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production encaps -> T_DOLLARCURLY expr T_RCURLY

State 889:
## Known stack suffix:
## T_BACKQUOTE list(encaps)
## LR(1) items:
template_literal -> T_BACKQUOTE list(encaps) . T_BACKQUOTE [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_BACKQUOTE shift to state 890
## Reductions:

State 890:
## Known stack suffix:
## T_BACKQUOTE list(encaps) T_BACKQUOTE
## LR(1) items:
template_literal -> T_BACKQUOTE list(encaps) T_BACKQUOTE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production template_literal -> T_BACKQUOTE list(encaps) T_BACKQUOTE

State 891:
## Known stack suffix:
## encaps
## LR(1) items:
list(encaps) -> encaps . list(encaps) [ T_BACKQUOTE ]
## Transitions:
-- On T_ENCAPSED_STRING shift to state 294
-- On T_DOLLARCURLY shift to state 295
-- On list(encaps) shift to state 892
-- On encaps shift to state 891
## Reductions:
-- On T_BACKQUOTE
--   reduce production list(encaps) ->

State 892:
## Known stack suffix:
## encaps list(encaps)
## LR(1) items:
list(encaps) -> encaps list(encaps) . [ T_BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(encaps) -> encaps list(encaps)

State 893:
## Known stack suffix:
## T_BIT_NOT pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> T_BIT_NOT pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> T_BIT_NOT pre_in_expr(d1)

State 894:
## Known stack suffix:
## T_YIELD T_MULT assignment_expr
## LR(1) items:
assignment_expr_no_stmt -> T_YIELD T_MULT assignment_expr . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expr_no_stmt -> T_YIELD T_MULT assignment_expr

State 895:
## Known stack suffix:
## T_YIELD assignment_expr
## LR(1) items:
assignment_expr_no_stmt -> T_YIELD assignment_expr . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expr_no_stmt -> T_YIELD assignment_expr

State 896:
## Known stack suffix:
## T_ASYNC property_name call_signature T_LCURLY function_body
## LR(1) items:
method_definition -> T_ASYNC property_name call_signature T_LCURLY function_body . T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_RCURLY shift to state 897
## Reductions:

State 897:
## Known stack suffix:
## T_ASYNC property_name call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
method_definition -> T_ASYNC property_name call_signature T_LCURLY function_body T_RCURLY . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_definition -> T_ASYNC property_name call_signature T_LCURLY function_body T_RCURLY

State 898:
## Known stack suffix:
## T_ASYNC method_get_set_star
## LR(1) items:
method_definition -> T_ASYNC method_get_set_star . property_name call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name shift to state 899
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 733
## Reductions:

State 899:
## Known stack suffix:
## T_ASYNC method_get_set_star property_name
## LR(1) items:
method_definition -> T_ASYNC method_get_set_star property_name . call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 900
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 900:
## Known stack suffix:
## T_ASYNC method_get_set_star property_name call_signature
## LR(1) items:
method_definition -> T_ASYNC method_get_set_star property_name call_signature . T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LCURLY shift to state 901
## Reductions:

State 901:
## Known stack suffix:
## T_ASYNC method_get_set_star property_name call_signature T_LCURLY
## LR(1) items:
method_definition -> T_ASYNC method_get_set_star property_name call_signature T_LCURLY . function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 902
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 902:
## Known stack suffix:
## T_ASYNC method_get_set_star property_name call_signature T_LCURLY function_body
## LR(1) items:
method_definition -> T_ASYNC method_get_set_star property_name call_signature T_LCURLY function_body . T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_RCURLY shift to state 903
## Reductions:

State 903:
## Known stack suffix:
## T_ASYNC method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
method_definition -> T_ASYNC method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_definition -> T_ASYNC method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY

State 904:
## Known stack suffix:
## sc
## LR(1) items:
class_element -> sc . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_element -> sc

State 905:
## Known stack suffix:
## property_name
## LR(1) items:
class_element -> property_name . option(annotation) option(initializeur) sc [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
method_definition -> property_name . call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On T_COLON shift to state 155
-- On option(generics) shift to state 118
-- On option(annotation) shift to state 906
-- On generics shift to state 175
-- On call_signature shift to state 909
-- On annotation shift to state 432
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_ASSIGN
--   reduce production option(annotation) ->
-- On T_LPAREN
--   reduce production option(generics) ->

State 906:
## Known stack suffix:
## property_name option(annotation)
## LR(1) items:
class_element -> property_name option(annotation) . option(initializeur) sc [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_ASSIGN shift to state 132
-- On option(initializeur) shift to state 907
-- On initializeur shift to state 431
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON
--   reduce production option(initializeur) ->

State 907:
## Known stack suffix:
## property_name option(annotation) option(initializeur)
## LR(1) items:
class_element -> property_name option(annotation) option(initializeur) . sc [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 908
## Reductions:

State 908:
## Known stack suffix:
## property_name option(annotation) option(initializeur) sc
## LR(1) items:
class_element -> property_name option(annotation) option(initializeur) sc . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_element -> property_name option(annotation) option(initializeur) sc

State 909:
## Known stack suffix:
## property_name call_signature
## LR(1) items:
method_definition -> property_name call_signature . T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LCURLY shift to state 910
## Reductions:

State 910:
## Known stack suffix:
## property_name call_signature T_LCURLY
## LR(1) items:
method_definition -> property_name call_signature T_LCURLY . function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 911
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 911:
## Known stack suffix:
## property_name call_signature T_LCURLY function_body
## LR(1) items:
method_definition -> property_name call_signature T_LCURLY function_body . T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_RCURLY shift to state 912
## Reductions:

State 912:
## Known stack suffix:
## property_name call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
method_definition -> property_name call_signature T_LCURLY function_body T_RCURLY . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_definition -> property_name call_signature T_LCURLY function_body T_RCURLY

State 913:
## Known stack suffix:
## nonempty_list(decorator)
## LR(1) items:
method_definition -> nonempty_list(decorator) . property_name call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
method_definition -> nonempty_list(decorator) . method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
method_definition -> nonempty_list(decorator) . T_ASYNC property_name call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
method_definition -> nonempty_list(decorator) . T_ASYNC method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 96
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MULT shift to state 98
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 100
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 914
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name shift to state 926
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On method_get_set_star shift to state 931
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 733
## Reductions:

State 914:
## Known stack suffix:
## nonempty_list(decorator) T_ASYNC
## LR(1) items:
ident_semi_keyword -> T_ASYNC . [ T_LPAREN T_LESS_THAN ]
method_definition -> nonempty_list(decorator) T_ASYNC . property_name call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
method_definition -> nonempty_list(decorator) T_ASYNC . method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 96
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MULT shift to state 98
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 100
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name shift to state 915
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On method_get_set_star shift to state 920
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 733
## Reductions:
-- On T_LPAREN T_LESS_THAN
--   reduce production ident_semi_keyword -> T_ASYNC

State 915:
## Known stack suffix:
## nonempty_list(decorator) T_ASYNC property_name
## LR(1) items:
method_definition -> nonempty_list(decorator) T_ASYNC property_name . call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 916
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 916:
## Known stack suffix:
## nonempty_list(decorator) T_ASYNC property_name call_signature
## LR(1) items:
method_definition -> nonempty_list(decorator) T_ASYNC property_name call_signature . T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LCURLY shift to state 917
## Reductions:

State 917:
## Known stack suffix:
## nonempty_list(decorator) T_ASYNC property_name call_signature T_LCURLY
## LR(1) items:
method_definition -> nonempty_list(decorator) T_ASYNC property_name call_signature T_LCURLY . function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 918
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 918:
## Known stack suffix:
## nonempty_list(decorator) T_ASYNC property_name call_signature T_LCURLY function_body
## LR(1) items:
method_definition -> nonempty_list(decorator) T_ASYNC property_name call_signature T_LCURLY function_body . T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_RCURLY shift to state 919
## Reductions:

State 919:
## Known stack suffix:
## nonempty_list(decorator) T_ASYNC property_name call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
method_definition -> nonempty_list(decorator) T_ASYNC property_name call_signature T_LCURLY function_body T_RCURLY . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_definition -> nonempty_list(decorator) T_ASYNC property_name call_signature T_LCURLY function_body T_RCURLY

State 920:
## Known stack suffix:
## nonempty_list(decorator) T_ASYNC method_get_set_star
## LR(1) items:
method_definition -> nonempty_list(decorator) T_ASYNC method_get_set_star . property_name call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name shift to state 921
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 733
## Reductions:

State 921:
## Known stack suffix:
## nonempty_list(decorator) T_ASYNC method_get_set_star property_name
## LR(1) items:
method_definition -> nonempty_list(decorator) T_ASYNC method_get_set_star property_name . call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 922
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 922:
## Known stack suffix:
## nonempty_list(decorator) T_ASYNC method_get_set_star property_name call_signature
## LR(1) items:
method_definition -> nonempty_list(decorator) T_ASYNC method_get_set_star property_name call_signature . T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LCURLY shift to state 923
## Reductions:

State 923:
## Known stack suffix:
## nonempty_list(decorator) T_ASYNC method_get_set_star property_name call_signature T_LCURLY
## LR(1) items:
method_definition -> nonempty_list(decorator) T_ASYNC method_get_set_star property_name call_signature T_LCURLY . function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 924
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 924:
## Known stack suffix:
## nonempty_list(decorator) T_ASYNC method_get_set_star property_name call_signature T_LCURLY function_body
## LR(1) items:
method_definition -> nonempty_list(decorator) T_ASYNC method_get_set_star property_name call_signature T_LCURLY function_body . T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_RCURLY shift to state 925
## Reductions:

State 925:
## Known stack suffix:
## nonempty_list(decorator) T_ASYNC method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
method_definition -> nonempty_list(decorator) T_ASYNC method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_definition -> nonempty_list(decorator) T_ASYNC method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY

State 926:
## Known stack suffix:
## nonempty_list(decorator) property_name
## LR(1) items:
method_definition -> nonempty_list(decorator) property_name . call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 927
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 927:
## Known stack suffix:
## nonempty_list(decorator) property_name call_signature
## LR(1) items:
method_definition -> nonempty_list(decorator) property_name call_signature . T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LCURLY shift to state 928
## Reductions:

State 928:
## Known stack suffix:
## nonempty_list(decorator) property_name call_signature T_LCURLY
## LR(1) items:
method_definition -> nonempty_list(decorator) property_name call_signature T_LCURLY . function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 929
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 929:
## Known stack suffix:
## nonempty_list(decorator) property_name call_signature T_LCURLY function_body
## LR(1) items:
method_definition -> nonempty_list(decorator) property_name call_signature T_LCURLY function_body . T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_RCURLY shift to state 930
## Reductions:

State 930:
## Known stack suffix:
## nonempty_list(decorator) property_name call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
method_definition -> nonempty_list(decorator) property_name call_signature T_LCURLY function_body T_RCURLY . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_definition -> nonempty_list(decorator) property_name call_signature T_LCURLY function_body T_RCURLY

State 931:
## Known stack suffix:
## nonempty_list(decorator) method_get_set_star
## LR(1) items:
method_definition -> nonempty_list(decorator) method_get_set_star . property_name call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name shift to state 932
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 733
## Reductions:

State 932:
## Known stack suffix:
## nonempty_list(decorator) method_get_set_star property_name
## LR(1) items:
method_definition -> nonempty_list(decorator) method_get_set_star property_name . call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 933
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 933:
## Known stack suffix:
## nonempty_list(decorator) method_get_set_star property_name call_signature
## LR(1) items:
method_definition -> nonempty_list(decorator) method_get_set_star property_name call_signature . T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LCURLY shift to state 934
## Reductions:

State 934:
## Known stack suffix:
## nonempty_list(decorator) method_get_set_star property_name call_signature T_LCURLY
## LR(1) items:
method_definition -> nonempty_list(decorator) method_get_set_star property_name call_signature T_LCURLY . function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 935
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 935:
## Known stack suffix:
## nonempty_list(decorator) method_get_set_star property_name call_signature T_LCURLY function_body
## LR(1) items:
method_definition -> nonempty_list(decorator) method_get_set_star property_name call_signature T_LCURLY function_body . T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_RCURLY shift to state 936
## Reductions:

State 936:
## Known stack suffix:
## nonempty_list(decorator) method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
method_definition -> nonempty_list(decorator) method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_definition -> nonempty_list(decorator) method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY

State 937:
## Known stack suffix:
## method_get_set_star
## LR(1) items:
method_definition -> method_get_set_star . property_name call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name shift to state 938
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 733
## Reductions:

State 938:
## Known stack suffix:
## method_get_set_star property_name
## LR(1) items:
method_definition -> method_get_set_star property_name . call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 939
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 939:
## Known stack suffix:
## method_get_set_star property_name call_signature
## LR(1) items:
method_definition -> method_get_set_star property_name call_signature . T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LCURLY shift to state 940
## Reductions:

State 940:
## Known stack suffix:
## method_get_set_star property_name call_signature T_LCURLY
## LR(1) items:
method_definition -> method_get_set_star property_name call_signature T_LCURLY . function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 941
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 941:
## Known stack suffix:
## method_get_set_star property_name call_signature T_LCURLY function_body
## LR(1) items:
method_definition -> method_get_set_star property_name call_signature T_LCURLY function_body . T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_RCURLY shift to state 942
## Reductions:

State 942:
## Known stack suffix:
## method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
method_definition -> method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_definition -> method_get_set_star property_name call_signature T_LCURLY function_body T_RCURLY

State 943:
## Known stack suffix:
## method_definition
## LR(1) items:
class_element -> method_definition . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_element -> method_definition

State 944:
## Known stack suffix:
## T_LCURLY list(class_element)
## LR(1) items:
class_body -> T_LCURLY list(class_element) . T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SET T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_READONLY T_RCURLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NUMBER_TYPE T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MODULE T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN_ARROW T_LPAREN T_LET T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_INCR T_IN T_IMPORT T_IF T_ID T_GREATER_THAN_EQUAL T_GREATER_THAN T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_EXPONENT T_EQUAL T_ENUM T_DOTS T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_COLON T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_ASSIGN T_AS T_ANY_TYPE T_AND TUnknown RDots LDots EOF ]
## Transitions:
-- On T_RCURLY shift to state 945
## Reductions:

State 945:
## Known stack suffix:
## T_LCURLY list(class_element) T_RCURLY
## LR(1) items:
class_body -> T_LCURLY list(class_element) T_RCURLY . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SET T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_READONLY T_RCURLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NUMBER_TYPE T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MODULE T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN_ARROW T_LPAREN T_LET T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_INCR T_IN T_IMPORT T_IF T_ID T_GREATER_THAN_EQUAL T_GREATER_THAN T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_EXPONENT T_EQUAL T_ENUM T_DOTS T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_COLON T_CLASS T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_ASSIGN T_AS T_ANY_TYPE T_AND TUnknown RDots LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_body -> T_LCURLY list(class_element) T_RCURLY

State 946:
## Known stack suffix:
## class_element
## LR(1) items:
list(class_element) -> class_element . list(class_element) [ T_RCURLY ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 272
-- On T_SET shift to state 96
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 273
-- On T_PUBLIC shift to state 274
-- On T_PROTECTED shift to state 275
-- On T_PRIVATE shift to state 276
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MULT shift to state 98
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 100
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DOTS shift to state 277
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 285
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On sc shift to state 904
-- On property_name shift to state 905
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On nonempty_list(decorator) shift to state 913
-- On method_get_set_star shift to state 937
-- On method_definition shift to state 943
-- On list(class_element) shift to state 947
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 733
-- On decorator shift to state 768
-- On class_element shift to state 946
-- On access_modifiers shift to state 948
-- On access_modifier shift to state 955
## Reductions:
-- On T_RCURLY
--   reduce production list(class_element) ->

State 947:
## Known stack suffix:
## class_element list(class_element)
## LR(1) items:
list(class_element) -> class_element list(class_element) . [ T_RCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(class_element) -> class_element list(class_element)

State 948:
## Known stack suffix:
## access_modifiers
## LR(1) items:
access_modifiers -> access_modifiers . access_modifier [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
class_element -> access_modifiers . method_definition [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
class_element -> access_modifiers . property_name option(annotation) option(initializeur) sc [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 272
-- On T_SET shift to state 96
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 273
-- On T_PUBLIC shift to state 274
-- On T_PROTECTED shift to state 275
-- On T_PRIVATE shift to state 276
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MULT shift to state 98
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 100
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 285
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name shift to state 949
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On nonempty_list(decorator) shift to state 913
-- On method_get_set_star shift to state 937
-- On method_definition shift to state 953
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 733
-- On decorator shift to state 768
-- On access_modifier shift to state 954
## Reductions:

State 949:
## Known stack suffix:
## access_modifiers property_name
## LR(1) items:
class_element -> access_modifiers property_name . option(annotation) option(initializeur) sc [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
method_definition -> property_name . call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On T_COLON shift to state 155
-- On option(generics) shift to state 118
-- On option(annotation) shift to state 950
-- On generics shift to state 175
-- On call_signature shift to state 909
-- On annotation shift to state 432
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_ASSIGN
--   reduce production option(annotation) ->
-- On T_LPAREN
--   reduce production option(generics) ->

State 950:
## Known stack suffix:
## access_modifiers property_name option(annotation)
## LR(1) items:
class_element -> access_modifiers property_name option(annotation) . option(initializeur) sc [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_ASSIGN shift to state 132
-- On option(initializeur) shift to state 951
-- On initializeur shift to state 431
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON
--   reduce production option(initializeur) ->

State 951:
## Known stack suffix:
## access_modifiers property_name option(annotation) option(initializeur)
## LR(1) items:
class_element -> access_modifiers property_name option(annotation) option(initializeur) . sc [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 952
## Reductions:

State 952:
## Known stack suffix:
## access_modifiers property_name option(annotation) option(initializeur) sc
## LR(1) items:
class_element -> access_modifiers property_name option(annotation) option(initializeur) sc . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_element -> access_modifiers property_name option(annotation) option(initializeur) sc

State 953:
## Known stack suffix:
## access_modifiers method_definition
## LR(1) items:
class_element -> access_modifiers method_definition . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_SEMICOLON T_RETURN T_READONLY T_RCURLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DOTS T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_element -> access_modifiers method_definition

State 954:
## Known stack suffix:
## access_modifiers access_modifier
## LR(1) items:
access_modifiers -> access_modifiers access_modifier . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production access_modifiers -> access_modifiers access_modifier

State 955:
## Known stack suffix:
## access_modifier
## LR(1) items:
access_modifiers -> access_modifier . [ T_YIELD T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STATIC T_SET T_RETURN T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_NULL T_NEW T_MULT T_MODULE T_LET T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_IN T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_ENUM T_ELSE T_DO T_DELETE T_DEFAULT T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production access_modifiers -> access_modifier

State 956:
## Known stack suffix:
## T_CLASS option(binding_id) option(generics) class_heritage class_body
## LR(1) items:
class_expr -> T_CLASS option(binding_id) option(generics) class_heritage class_body . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_expr -> T_CLASS option(binding_id) option(generics) class_heritage class_body

State 957:
## Known stack suffix:
## T_DECR pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> T_DECR pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> T_DECR pre_in_expr(d1)

State 958:
## Known stack suffix:
## T_DELETE pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> T_DELETE pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> T_DELETE pre_in_expr(d1)

State 959:
## Known stack suffix:
## T_ASSIGN assignment_expr
## LR(1) items:
initializeur -> T_ASSIGN assignment_expr . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production initializeur -> T_ASSIGN assignment_expr

State 960:
## Known stack suffix:
## binding_pattern option(initializeur)
## LR(1) items:
binding_element -> binding_pattern option(initializeur) . [ T_RCURLY T_RBRACKET T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_element -> binding_pattern option(initializeur)

State 961:
## Known stack suffix:
## binding_id
## LR(1) items:
binding_element -> binding_id . option(initializeur) [ T_RCURLY T_RBRACKET T_COMMA ]
## Transitions:
-- On T_ASSIGN shift to state 132
-- On option(initializeur) shift to state 962
-- On initializeur shift to state 431
## Reductions:
-- On T_RCURLY T_RBRACKET T_COMMA
--   reduce production option(initializeur) ->

State 962:
## Known stack suffix:
## binding_id option(initializeur)
## LR(1) items:
binding_element -> binding_id option(initializeur) . [ T_RCURLY T_RBRACKET T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_element -> binding_id option(initializeur)

State 963:
## Known stack suffix:
## binding_start_list binding_elision_element
## LR(1) items:
binding_element_list -> binding_start_list binding_elision_element . [ T_RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_element_list -> binding_start_list binding_elision_element

State 964:
## Known stack suffix:
## binding_element
## LR(1) items:
binding_elision_element -> binding_element . [ T_RBRACKET ]
binding_start_element -> binding_element . T_COMMA [ T_TYPE T_STRING_TYPE T_SET T_READONLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_MODULE T_LCURLY T_LBRACKET T_ID T_GET T_FROM T_DOTS T_DECLARE T_CONSTRUCTOR T_COMMA T_BOOLEAN_TYPE T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
-- On T_COMMA shift to state 965
## Reductions:
-- On T_RBRACKET
--   reduce production binding_elision_element -> binding_element

State 965:
## Known stack suffix:
## binding_element T_COMMA
## LR(1) items:
binding_start_element -> binding_element T_COMMA . [ T_TYPE T_STRING_TYPE T_SET T_READONLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_MODULE T_LCURLY T_LBRACKET T_ID T_GET T_FROM T_DOTS T_DECLARE T_CONSTRUCTOR T_COMMA T_BOOLEAN_TYPE T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_start_element -> binding_element T_COMMA

State 966:
## Known stack suffix:
## binding_start_element
## LR(1) items:
binding_start_list -> binding_start_element . [ T_TYPE T_STRING_TYPE T_SET T_READONLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_OF T_NUMBER_TYPE T_MODULE T_LCURLY T_LBRACKET T_ID T_GET T_FROM T_DOTS T_DECLARE T_CONSTRUCTOR T_COMMA T_BOOLEAN_TYPE T_ASYNC T_AS T_ANY_TYPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_start_list -> binding_start_element

State 967:
## Known stack suffix:
## binding_elision_element
## LR(1) items:
binding_element_list -> binding_elision_element . [ T_RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_element_list -> binding_elision_element

State 968:
## Known stack suffix:
## T_LBRACKET binding_element_list
## LR(1) items:
array_binding_pattern -> T_LBRACKET binding_element_list . T_RBRACKET [ T_RPAREN T_RCURLY T_RBRACKET T_OF T_IN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
-- On T_RBRACKET shift to state 969
## Reductions:

State 969:
## Known stack suffix:
## T_LBRACKET binding_element_list T_RBRACKET
## LR(1) items:
array_binding_pattern -> T_LBRACKET binding_element_list T_RBRACKET . [ T_RPAREN T_RCURLY T_RBRACKET T_OF T_IN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_binding_pattern -> T_LBRACKET binding_element_list T_RBRACKET

State 970:
## Known stack suffix:
## option(generics) T_LPAREN formal_parameter_list_opt
## LR(1) items:
call_signature -> option(generics) T_LPAREN formal_parameter_list_opt . T_RPAREN option(annotation) [ T_LCURLY EOF ]
## Transitions:
-- On T_RPAREN shift to state 971
## Reductions:

State 971:
## Known stack suffix:
## option(generics) T_LPAREN formal_parameter_list_opt T_RPAREN
## LR(1) items:
call_signature -> option(generics) T_LPAREN formal_parameter_list_opt T_RPAREN . option(annotation) [ T_LCURLY EOF ]
## Transitions:
-- On T_COLON shift to state 155
-- On option(annotation) shift to state 972
-- On annotation shift to state 432
## Reductions:
-- On T_LCURLY EOF
--   reduce production option(annotation) ->

State 972:
## Known stack suffix:
## option(generics) T_LPAREN formal_parameter_list_opt T_RPAREN option(annotation)
## LR(1) items:
call_signature -> option(generics) T_LPAREN formal_parameter_list_opt T_RPAREN option(annotation) . [ T_LCURLY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_signature -> option(generics) T_LPAREN formal_parameter_list_opt T_RPAREN option(annotation)

State 973:
## Known stack suffix:
## T_FUNCTION T_MULT option(id) call_signature
## LR(1) items:
generator_expr -> T_FUNCTION T_MULT option(id) call_signature . T_LCURLY function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_LCURLY shift to state 974
## Reductions:

State 974:
## Known stack suffix:
## T_FUNCTION T_MULT option(id) call_signature T_LCURLY
## LR(1) items:
generator_expr -> T_FUNCTION T_MULT option(id) call_signature T_LCURLY . function_body T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 975
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 975:
## Known stack suffix:
## T_FUNCTION T_MULT option(id) call_signature T_LCURLY function_body
## LR(1) items:
generator_expr -> T_FUNCTION T_MULT option(id) call_signature T_LCURLY function_body . T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_RCURLY shift to state 976
## Reductions:

State 976:
## Known stack suffix:
## T_FUNCTION T_MULT option(id) call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
generator_expr -> T_FUNCTION T_MULT option(id) call_signature T_LCURLY function_body T_RCURLY . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production generator_expr -> T_FUNCTION T_MULT option(id) call_signature T_LCURLY function_body T_RCURLY

State 977:
## Known stack suffix:
## T_INCR pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> T_INCR pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> T_INCR pre_in_expr(d1)

State 978:
## Known stack suffix:
## T_DOTS
## LR(1) items:
assignment_expr -> T_DOTS . [ T_RBRACKET T_COMMA ]
element -> T_DOTS . assignment_expr [ T_RBRACKET T_COMMA ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 979
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:
-- On T_RBRACKET T_COMMA
--   reduce production assignment_expr -> T_DOTS

State 979:
## Known stack suffix:
## T_DOTS assignment_expr
## LR(1) items:
element -> T_DOTS assignment_expr . [ T_RBRACKET T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production element -> T_DOTS assignment_expr

State 980:
## Known stack suffix:
## optl(elision) element
## LR(1) items:
element_list_rev -> optl(elision) element . [ T_RBRACKET T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production element_list_rev -> optl(elision) element

State 981:
## Known stack suffix:
## assignment_expr
## LR(1) items:
element -> assignment_expr . [ T_RBRACKET T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production element -> assignment_expr

State 982:
## Known stack suffix:
## elision
## LR(1) items:
elision -> elision . T_COMMA [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_COMMA T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
optl(elision) -> elision . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
-- On T_COMMA shift to state 983
## Reductions:
-- On T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots
--   reduce production optl(elision) -> elision

State 983:
## Known stack suffix:
## elision T_COMMA
## LR(1) items:
elision -> elision T_COMMA . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_COMMA T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elision -> elision T_COMMA

State 984:
## Known stack suffix:
## T_LBRACKET element_list_rev
## LR(1) items:
array_literal -> T_LBRACKET element_list_rev . optl(elision) T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
element_list_rev -> element_list_rev . T_COMMA element [ T_RBRACKET T_COMMA ]
element_list_rev -> element_list_rev . T_COMMA elision element [ T_RBRACKET T_COMMA ]
## Transitions:
-- On T_COMMA shift to state 985
-- On optl(elision) shift to state 989
-- On elision shift to state 982
## Reductions:
-- On T_RBRACKET
--   reduce production optl(elision) ->

State 985:
## Known stack suffix:
## element_list_rev T_COMMA
## LR(1) items:
element_list_rev -> element_list_rev T_COMMA . element [ T_RBRACKET T_COMMA ]
element_list_rev -> element_list_rev T_COMMA . elision element [ T_RBRACKET T_COMMA ]
elision -> T_COMMA . [ T_RBRACKET T_COMMA ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 978
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_COMMA shift to state 104
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On elision shift to state 986
-- On element shift to state 988
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 981
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:
-- On T_RBRACKET
--   reduce production elision -> T_COMMA

State 986:
## Known stack suffix:
## element_list_rev T_COMMA elision
## LR(1) items:
element_list_rev -> element_list_rev T_COMMA elision . element [ T_RBRACKET T_COMMA ]
elision -> elision . T_COMMA [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_VOID T_TYPEOF T_TYPE T_TRUE T_THIS T_SUPER T_STRING_TYPE T_STRING T_SET T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LCURLY T_LBRACKET T_INT T_INCR T_ID T_GET T_FUNCTION T_FROM T_FLOAT T_FALSE T_DOTS T_DELETE T_DECR T_DECLARE T_CONSTRUCTOR T_COMMA T_CLASS T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_ASYNC T_AS T_ANY_TYPE LDots ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 978
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_COMMA shift to state 983
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On element shift to state 987
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 981
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 987:
## Known stack suffix:
## element_list_rev T_COMMA elision element
## LR(1) items:
element_list_rev -> element_list_rev T_COMMA elision element . [ T_RBRACKET T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production element_list_rev -> element_list_rev T_COMMA elision element

State 988:
## Known stack suffix:
## element_list_rev T_COMMA element
## LR(1) items:
element_list_rev -> element_list_rev T_COMMA element . [ T_RBRACKET T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production element_list_rev -> element_list_rev T_COMMA element

State 989:
## Known stack suffix:
## T_LBRACKET element_list_rev optl(elision)
## LR(1) items:
array_literal -> T_LBRACKET element_list_rev optl(elision) . T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_RBRACKET shift to state 990
## Reductions:

State 990:
## Known stack suffix:
## T_LBRACKET element_list_rev optl(elision) T_RBRACKET
## LR(1) items:
array_literal -> T_LBRACKET element_list_rev optl(elision) T_RBRACKET . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_literal -> T_LBRACKET element_list_rev optl(elision) T_RBRACKET

State 991:
## Known stack suffix:
## T_DOTS assignment_expr
## LR(1) items:
property_name_and_value -> T_DOTS assignment_expr . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name_and_value -> T_DOTS assignment_expr

State 992:
## Known stack suffix:
## property_name_and_value
## LR(1) items:
listc(property_name_and_value) -> property_name_and_value . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(property_name_and_value) -> property_name_and_value

State 993:
## Known stack suffix:
## property_name
## LR(1) items:
method_definition -> property_name . call_signature T_LCURLY function_body T_RCURLY [ T_RCURLY T_COMMA ]
property_name_and_value -> property_name . T_COLON assignment_expr [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On T_COLON shift to state 994
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 909
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 994:
## Known stack suffix:
## property_name T_COLON
## LR(1) items:
property_name_and_value -> property_name T_COLON . assignment_expr [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 995
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 995:
## Known stack suffix:
## property_name T_COLON assignment_expr
## LR(1) items:
property_name_and_value -> property_name T_COLON assignment_expr . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name_and_value -> property_name T_COLON assignment_expr

State 996:
## Known stack suffix:
## method_definition
## LR(1) items:
property_name_and_value -> method_definition . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name_and_value -> method_definition

State 997:
## Known stack suffix:
## T_LCURLY listc(property_name_and_value)
## LR(1) items:
listc(property_name_and_value) -> listc(property_name_and_value) . T_COMMA property_name_and_value [ T_RCURLY T_COMMA ]
object_literal -> T_LCURLY listc(property_name_and_value) . option(T_COMMA) T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_COMMA shift to state 998
-- On option(T_COMMA) shift to state 1001
## Reductions:
-- On T_RCURLY
--   reduce production option(T_COMMA) ->

State 998:
## Known stack suffix:
## listc(property_name_and_value) T_COMMA
## LR(1) items:
listc(property_name_and_value) -> listc(property_name_and_value) T_COMMA . property_name_and_value [ T_RCURLY T_COMMA ]
option(T_COMMA) -> T_COMMA . [ T_RCURLY ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 96
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MULT shift to state 98
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 100
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DOTS shift to state 102
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 285
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name_and_value shift to state 999
-- On property_name shift to state 993
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On nonempty_list(decorator) shift to state 913
-- On method_get_set_star shift to state 937
-- On method_definition shift to state 996
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 1000
-- On decorator shift to state 768
## Reductions:
-- On T_RCURLY
--   reduce production option(T_COMMA) -> T_COMMA

State 999:
## Known stack suffix:
## listc(property_name_and_value) T_COMMA property_name_and_value
## LR(1) items:
listc(property_name_and_value) -> listc(property_name_and_value) T_COMMA property_name_and_value . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(property_name_and_value) -> listc(property_name_and_value) T_COMMA property_name_and_value

State 1000:
## Known stack suffix:
## id
## LR(1) items:
property_name -> id . [ T_LPAREN T_LESS_THAN T_COLON ]
property_name_and_value -> id . [ T_RCURLY T_COMMA ]
## Transitions:
## Reductions:
-- On T_LPAREN T_LESS_THAN T_COLON
--   reduce production property_name -> id
-- On T_RCURLY T_COMMA
--   reduce production property_name_and_value -> id

State 1001:
## Known stack suffix:
## T_LCURLY listc(property_name_and_value) option(T_COMMA)
## LR(1) items:
object_literal -> T_LCURLY listc(property_name_and_value) option(T_COMMA) . T_RCURLY [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_RCURLY shift to state 1002
## Reductions:

State 1002:
## Known stack suffix:
## T_LCURLY listc(property_name_and_value) option(T_COMMA) T_RCURLY
## LR(1) items:
object_literal -> T_LCURLY listc(property_name_and_value) option(T_COMMA) T_RCURLY . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production object_literal -> T_LCURLY listc(property_name_and_value) option(T_COMMA) T_RCURLY

State 1003:
## Known stack suffix:
## T_LBRACKET assignment_expr
## LR(1) items:
property_name -> T_LBRACKET assignment_expr . T_RBRACKET [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_LPAREN T_LESS_THAN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
-- On T_RBRACKET shift to state 1004
## Reductions:

State 1004:
## Known stack suffix:
## T_LBRACKET assignment_expr T_RBRACKET
## LR(1) items:
property_name -> T_LBRACKET assignment_expr T_RBRACKET . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_LPAREN T_LESS_THAN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name -> T_LBRACKET assignment_expr T_RBRACKET

State 1005:
## Known stack suffix:
## T_DOTS
## LR(1) items:
binding_property -> T_DOTS . binding_id [ T_RCURLY T_COMMA ]
binding_property -> T_DOTS . binding_pattern [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On object_binding_pattern shift to state 123
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_pattern shift to state 1006
-- On binding_id shift to state 1007
-- On array_binding_pattern shift to state 127
## Reductions:

State 1006:
## Known stack suffix:
## T_DOTS binding_pattern
## LR(1) items:
binding_property -> T_DOTS binding_pattern . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_property -> T_DOTS binding_pattern

State 1007:
## Known stack suffix:
## T_DOTS binding_id
## LR(1) items:
binding_property -> T_DOTS binding_id . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_property -> T_DOTS binding_id

State 1008:
## Known stack suffix:
## property_name
## LR(1) items:
binding_property -> property_name . T_COLON binding_element [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_COLON shift to state 1009
## Reductions:

State 1009:
## Known stack suffix:
## property_name T_COLON
## LR(1) items:
binding_property -> property_name T_COLON . binding_element [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On object_binding_pattern shift to state 123
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_pattern shift to state 131
-- On binding_id shift to state 961
-- On binding_element shift to state 1010
-- On array_binding_pattern shift to state 127
## Reductions:

State 1010:
## Known stack suffix:
## property_name T_COLON binding_element
## LR(1) items:
binding_property -> property_name T_COLON binding_element . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_property -> property_name T_COLON binding_element

State 1011:
## Known stack suffix:
## T_LCURLY listc(binding_property)
## LR(1) items:
listc(binding_property) -> listc(binding_property) . T_COMMA binding_property [ T_RCURLY T_COMMA ]
object_binding_pattern -> T_LCURLY listc(binding_property) . option(T_COMMA) T_RCURLY [ T_RPAREN T_RCURLY T_RBRACKET T_OF T_IN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
-- On T_COMMA shift to state 1012
-- On option(T_COMMA) shift to state 1017
## Reductions:
-- On T_RCURLY
--   reduce production option(T_COMMA) ->

State 1012:
## Known stack suffix:
## listc(binding_property) T_COMMA
## LR(1) items:
listc(binding_property) -> listc(binding_property) T_COMMA . binding_property [ T_RCURLY T_COMMA ]
option(T_COMMA) -> T_COMMA . [ T_RCURLY ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DOTS shift to state 1005
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name shift to state 1008
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 1013
-- On binding_property shift to state 1014
-- On binding_id shift to state 1015
## Reductions:
-- On T_RCURLY
--   reduce production option(T_COMMA) -> T_COMMA

State 1013:
## Known stack suffix:
## id
## LR(1) items:
binding_id -> id . [ T_RCURLY T_COMMA T_ASSIGN ]
property_name -> id . [ T_COLON ]
## Transitions:
## Reductions:
-- On T_RCURLY T_COMMA T_ASSIGN
--   reduce production binding_id -> id
-- On T_COLON
--   reduce production property_name -> id

State 1014:
## Known stack suffix:
## listc(binding_property) T_COMMA binding_property
## LR(1) items:
listc(binding_property) -> listc(binding_property) T_COMMA binding_property . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(binding_property) -> listc(binding_property) T_COMMA binding_property

State 1015:
## Known stack suffix:
## binding_id
## LR(1) items:
binding_property -> binding_id . option(initializeur) [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_ASSIGN shift to state 132
-- On option(initializeur) shift to state 1016
-- On initializeur shift to state 431
## Reductions:
-- On T_RCURLY T_COMMA
--   reduce production option(initializeur) ->

State 1016:
## Known stack suffix:
## binding_id option(initializeur)
## LR(1) items:
binding_property -> binding_id option(initializeur) . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_property -> binding_id option(initializeur)

State 1017:
## Known stack suffix:
## T_LCURLY listc(binding_property) option(T_COMMA)
## LR(1) items:
object_binding_pattern -> T_LCURLY listc(binding_property) option(T_COMMA) . T_RCURLY [ T_RPAREN T_RCURLY T_RBRACKET T_OF T_IN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
-- On T_RCURLY shift to state 1018
## Reductions:

State 1018:
## Known stack suffix:
## T_LCURLY listc(binding_property) option(T_COMMA) T_RCURLY
## LR(1) items:
object_binding_pattern -> T_LCURLY listc(binding_property) option(T_COMMA) T_RCURLY . [ T_RPAREN T_RCURLY T_RBRACKET T_OF T_IN T_COMMA T_COLON T_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production object_binding_pattern -> T_LCURLY listc(binding_property) option(T_COMMA) T_RCURLY

State 1019:
## Known stack suffix:
## binding_property
## LR(1) items:
listc(binding_property) -> binding_property . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(binding_property) -> binding_property

State 1020:
## Known stack suffix:
## T_LPAREN_ARROW formal_parameter_list_opt
## LR(1) items:
arrow_function -> T_LPAREN_ARROW formal_parameter_list_opt . T_RPAREN option(annotation) T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_RPAREN shift to state 1021
## Reductions:

State 1021:
## Known stack suffix:
## T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN
## LR(1) items:
arrow_function -> T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN . option(annotation) T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_COLON shift to state 155
-- On option(annotation) shift to state 1022
-- On annotation shift to state 432
## Reductions:
-- On T_ARROW
--   reduce production option(annotation) ->

State 1022:
## Known stack suffix:
## T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation)
## LR(1) items:
arrow_function -> T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) . T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_ARROW shift to state 1023
## Reductions:

State 1023:
## Known stack suffix:
## T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW
## LR(1) items:
arrow_function -> T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW . arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 319
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 603
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 784
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On function_expr shift to state 785
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On boolean_literal shift to state 386
-- On block shift to state 786
-- On assignment_expr_no_stmt shift to state 787
-- On arrow_function shift to state 728
-- On arrow_body shift to state 1024
-- On array_literal shift to state 388
## Reductions:

State 1024:
## Known stack suffix:
## T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW arrow_body
## LR(1) items:
arrow_function -> T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW arrow_body . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_function -> T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW arrow_body

State 1025:
## Known stack suffix:
## T_LPAREN id
## LR(1) items:
arrow_function -> id . T_ARROW arrow_body [ T_RPAREN T_COMMA ]
primary_expr_no_braces -> id . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND ]
primary_expr_no_braces -> T_LPAREN id . T_COLON type_ T_RPAREN [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_COLON shift to state 1026
-- On T_ARROW shift to state 383
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND
--   reduce production primary_expr_no_braces -> id

State 1026:
## Known stack suffix:
## T_LPAREN id T_COLON
## LR(1) items:
primary_expr_no_braces -> T_LPAREN id T_COLON . type_ T_RPAREN [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_PLING shift to state 149
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LPAREN_ARROW shift to state 152
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On union_type shift to state 186
-- On type_reference_aux shift to state 187
-- On type_name shift to state 144
-- On type_ shift to state 1027
-- On primary_type2 shift to state 189
-- On primary_type shift to state 190
-- On primary_or_union_type shift to state 193
-- On primary_or_intersect_type shift to state 201
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On module_name shift to state 198
-- On intersect_type shift to state 208
## Reductions:

State 1027:
## Known stack suffix:
## T_LPAREN id T_COLON type_
## LR(1) items:
primary_expr_no_braces -> T_LPAREN id T_COLON type_ . T_RPAREN [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_RPAREN shift to state 1028
## Reductions:

State 1028:
## Known stack suffix:
## T_LPAREN id T_COLON type_ T_RPAREN
## LR(1) items:
primary_expr_no_braces -> T_LPAREN id T_COLON type_ T_RPAREN . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr_no_braces -> T_LPAREN id T_COLON type_ T_RPAREN

State 1029:
## Known stack suffix:
## T_LPAREN expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_RPAREN T_COMMA ]
primary_expr_no_braces -> T_LPAREN expr . T_RPAREN [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_RPAREN shift to state 1030
-- On T_COMMA shift to state 395
## Reductions:

State 1030:
## Known stack suffix:
## T_LPAREN expr T_RPAREN
## LR(1) items:
primary_expr_no_braces -> T_LPAREN expr T_RPAREN . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr_no_braces -> T_LPAREN expr T_RPAREN

State 1031:
## Known stack suffix:
## T_MINUS pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> T_MINUS pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> T_MINUS pre_in_expr(d1)

State 1032:
## Known stack suffix:
## T_SUPER T_LBRACKET expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_RBRACKET T_COMMA ]
member_expr(d1) -> T_SUPER T_LBRACKET expr . T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_RBRACKET shift to state 1033
-- On T_COMMA shift to state 395
## Reductions:

State 1033:
## Known stack suffix:
## T_SUPER T_LBRACKET expr T_RBRACKET
## LR(1) items:
member_expr(d1) -> T_SUPER T_LBRACKET expr T_RBRACKET . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(d1) -> T_SUPER T_LBRACKET expr T_RBRACKET

State 1034:
## Known stack suffix:
## T_NEW T_PERIOD
## LR(1) items:
member_expr(d1) -> T_NEW T_PERIOD . id [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 1035
## Reductions:

State 1035:
## Known stack suffix:
## T_NEW T_PERIOD id
## LR(1) items:
member_expr(d1) -> T_NEW T_PERIOD id . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(d1) -> T_NEW T_PERIOD id

State 1036:
## Known stack suffix:
## T_NEW new_expr(d1)
## LR(1) items:
new_expr(d1) -> T_NEW new_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production new_expr(d1) -> T_NEW new_expr(d1)

State 1037:
## Known stack suffix:
## T_NEW member_expr(d1)
## LR(1) items:
member_expr(d1) -> member_expr(d1) . T_LBRACKET expr T_RBRACKET [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
member_expr(d1) -> member_expr(d1) . T_PERIOD field_name [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
member_expr(d1) -> T_NEW member_expr(d1) . arguments [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
member_expr(d1) -> member_expr(d1) . template_literal [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
member_expr(d1) -> member_expr(d1) . T_PERIOD T_DOTS [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
new_expr(d1) -> member_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_PERIOD shift to state 344
-- On T_LPAREN shift to state 80
-- On T_LBRACKET shift to state 347
-- On T_BACKQUOTE shift to state 293
-- On template_literal shift to state 414
-- On arguments shift to state 1038
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AS T_AND RDots EOF
--   reduce production new_expr(d1) -> member_expr(d1)

State 1038:
## Known stack suffix:
## T_NEW member_expr(d1) arguments
## LR(1) items:
member_expr(d1) -> T_NEW member_expr(d1) arguments . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expr(d1) -> T_NEW member_expr(d1) arguments

State 1039:
## Known stack suffix:
## T_NOT pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> T_NOT pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> T_NOT pre_in_expr(d1)

State 1040:
## Known stack suffix:
## T_PLUS pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> T_PLUS pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_MULT shift to state 333
-- On T_MOD shift to state 403
-- On T_INCR shift to state 335
-- On T_EXPONENT shift to state 336
-- On T_DIV shift to state 405
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> T_PLUS pre_in_expr(d1)

State 1041:
## Known stack suffix:
## T_DOTS
## LR(1) items:
argument -> T_DOTS . assignment_expr [ T_RPAREN T_COMMA ]
assignment_expr -> T_DOTS . [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 1042
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:
-- On T_RPAREN T_COMMA
--   reduce production assignment_expr -> T_DOTS

State 1042:
## Known stack suffix:
## T_DOTS assignment_expr
## LR(1) items:
argument -> T_DOTS assignment_expr . [ T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argument -> T_DOTS assignment_expr

State 1043:
## Known stack suffix:
## listc(argument)
## LR(1) items:
argument_list_opt -> listc(argument) . option(T_COMMA) [ T_RPAREN ]
listc(argument) -> listc(argument) . T_COMMA argument [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_COMMA shift to state 1044
-- On option(T_COMMA) shift to state 1047
## Reductions:
-- On T_RPAREN
--   reduce production option(T_COMMA) ->

State 1044:
## Known stack suffix:
## listc(argument) T_COMMA
## LR(1) items:
listc(argument) -> listc(argument) T_COMMA . argument [ T_RPAREN T_COMMA ]
option(T_COMMA) -> T_COMMA . [ T_RPAREN ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 1041
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 1045
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
-- On argument shift to state 1046
## Reductions:
-- On T_RPAREN
--   reduce production option(T_COMMA) -> T_COMMA

State 1045:
## Known stack suffix:
## assignment_expr
## LR(1) items:
argument -> assignment_expr . [ T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argument -> assignment_expr

State 1046:
## Known stack suffix:
## listc(argument) T_COMMA argument
## LR(1) items:
listc(argument) -> listc(argument) T_COMMA argument . [ T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(argument) -> listc(argument) T_COMMA argument

State 1047:
## Known stack suffix:
## listc(argument) option(T_COMMA)
## LR(1) items:
argument_list_opt -> listc(argument) option(T_COMMA) . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argument_list_opt -> listc(argument) option(T_COMMA)

State 1048:
## Known stack suffix:
## T_LPAREN argument_list_opt
## LR(1) items:
arguments -> T_LPAREN argument_list_opt . T_RPAREN [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_STATIC T_SET T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_READONLY T_RCURLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NUMBER_TYPE T_NULL T_NOT_EQUAL T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MODULE T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LET T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_INCR T_IN T_IMPORT T_IF T_ID T_GREATER_THAN_EQUAL T_GREATER_THAN T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_EXPONENT T_EQUAL T_ENUM T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_COLON T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_ASSIGN T_AS T_ANY_TYPE T_AND RDots EOF ]
## Transitions:
-- On T_RPAREN shift to state 1049
## Reductions:

State 1049:
## Known stack suffix:
## T_LPAREN argument_list_opt T_RPAREN
## LR(1) items:
arguments -> T_LPAREN argument_list_opt T_RPAREN . [ T_YIELD T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_STATIC T_SET T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_READONLY T_RCURLY T_RBRACKET T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NUMBER_TYPE T_NULL T_NOT_EQUAL T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MODULE T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LET T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INTERFACE T_INT T_INSTANCEOF T_INCR T_IN T_IMPORT T_IF T_ID T_GREATER_THAN_EQUAL T_GREATER_THAN T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FINALLY T_FALSE T_EXTENDS T_EXPORT T_EXPONENT T_EQUAL T_ENUM T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_COMMA T_COLON T_CLASS T_CATCH T_CASE T_BREAK T_BOOLEAN_TYPE T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_ASSIGN T_AS T_ANY_TYPE T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arguments -> T_LPAREN argument_list_opt T_RPAREN

State 1050:
## Known stack suffix:
## argument
## LR(1) items:
listc(argument) -> argument . [ T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(argument) -> argument

State 1051:
## Known stack suffix:
## T_SUPER arguments
## LR(1) items:
call_expr(d1) -> T_SUPER arguments . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expr(d1) -> T_SUPER arguments

State 1052:
## Known stack suffix:
## T_TYPEOF pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> T_TYPEOF pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> T_TYPEOF pre_in_expr(d1)

State 1053:
## Known stack suffix:
## T_VOID pre_in_expr(d1)
## LR(1) items:
pre_in_expr(d1) -> pre_in_expr(d1) . T_INCR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DECR [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> T_VOID pre_in_expr(d1) . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MULT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_DIV pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MOD pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_PLUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_MINUS pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_LSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_RSHIFT3 pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
pre_in_expr(d1) -> pre_in_expr(d1) . T_EXPONENT pre_in_expr(d1) [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF ]
## Transitions:
-- On T_INCR shift to state 335
-- On T_DECR shift to state 338
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND RDots EOF
--   reduce production pre_in_expr(d1) -> T_VOID pre_in_expr(d1)

State 1054:
## Known stack suffix:
## T_LCURLY expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_COMMA ]
xhp_attribute_value -> T_LCURLY expr . option(sc) T_RCURLY [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_COMMA shift to state 395
-- On sc shift to state 1055
-- On option(sc) shift to state 1056
## Reductions:
-- On T_RCURLY
--   reduce production option(sc) ->

State 1055:
## Known stack suffix:
## sc
## LR(1) items:
option(sc) -> sc . [ T_RCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(sc) -> sc

State 1056:
## Known stack suffix:
## T_LCURLY expr option(sc)
## LR(1) items:
xhp_attribute_value -> T_LCURLY expr option(sc) . T_RCURLY [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
-- On T_RCURLY shift to state 1057
## Reductions:

State 1057:
## Known stack suffix:
## T_LCURLY expr option(sc) T_RCURLY
## LR(1) items:
xhp_attribute_value -> T_LCURLY expr option(sc) T_RCURLY . [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xhp_attribute_value -> T_LCURLY expr option(sc) T_RCURLY

State 1058:
## Known stack suffix:
## T_DOTS
## LR(1) items:
xhp_attribute_value -> T_DOTS . [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xhp_attribute_value -> T_DOTS

State 1059:
## Known stack suffix:
## T_XHP_ATTR T_ASSIGN xhp_attribute_value
## LR(1) items:
xhp_attribute -> T_XHP_ATTR T_ASSIGN xhp_attribute_value . [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xhp_attribute -> T_XHP_ATTR T_ASSIGN xhp_attribute_value

State 1060:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
xhp_attribute -> T_LCURLY . T_DOTS assignment_expr T_RCURLY [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
-- On T_DOTS shift to state 1061
## Reductions:

State 1061:
## Known stack suffix:
## T_LCURLY T_DOTS
## LR(1) items:
xhp_attribute -> T_LCURLY T_DOTS . assignment_expr T_RCURLY [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 1062
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 1062:
## Known stack suffix:
## T_LCURLY T_DOTS assignment_expr
## LR(1) items:
xhp_attribute -> T_LCURLY T_DOTS assignment_expr . T_RCURLY [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
-- On T_RCURLY shift to state 1063
## Reductions:

State 1063:
## Known stack suffix:
## T_LCURLY T_DOTS assignment_expr T_RCURLY
## LR(1) items:
xhp_attribute -> T_LCURLY T_DOTS assignment_expr T_RCURLY . [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xhp_attribute -> T_LCURLY T_DOTS assignment_expr T_RCURLY

State 1064:
## Known stack suffix:
## T_DOTS
## LR(1) items:
xhp_attribute -> T_DOTS . [ T_XHP_SLASH_GT T_XHP_GT T_XHP_ATTR T_LCURLY T_DOTS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xhp_attribute -> T_DOTS

State 1065:
## Known stack suffix:
## xhp_attribute
## LR(1) items:
list(xhp_attribute) -> xhp_attribute . list(xhp_attribute) [ T_XHP_SLASH_GT T_XHP_GT ]
## Transitions:
-- On T_XHP_ATTR shift to state 5
-- On T_LCURLY shift to state 1060
-- On T_DOTS shift to state 1064
-- On xhp_attribute shift to state 1065
-- On list(xhp_attribute) shift to state 1066
## Reductions:
-- On T_XHP_SLASH_GT T_XHP_GT
--   reduce production list(xhp_attribute) ->

State 1066:
## Known stack suffix:
## xhp_attribute list(xhp_attribute)
## LR(1) items:
list(xhp_attribute) -> xhp_attribute list(xhp_attribute) . [ T_XHP_SLASH_GT T_XHP_GT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(xhp_attribute) -> xhp_attribute list(xhp_attribute)

State 1067:
## Known stack suffix:
## T_XHP_OPEN_TAG list(xhp_attribute)
## LR(1) items:
xhp_html -> T_XHP_OPEN_TAG list(xhp_attribute) . T_XHP_GT list(xhp_child) T_XHP_CLOSE_TAG [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
xhp_html -> T_XHP_OPEN_TAG list(xhp_attribute) . T_XHP_SLASH_GT [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_XHP_SLASH_GT shift to state 1068
-- On T_XHP_GT shift to state 1069
## Reductions:

State 1068:
## Known stack suffix:
## T_XHP_OPEN_TAG list(xhp_attribute) T_XHP_SLASH_GT
## LR(1) items:
xhp_html -> T_XHP_OPEN_TAG list(xhp_attribute) T_XHP_SLASH_GT . [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xhp_html -> T_XHP_OPEN_TAG list(xhp_attribute) T_XHP_SLASH_GT

State 1069:
## Known stack suffix:
## T_XHP_OPEN_TAG list(xhp_attribute) T_XHP_GT
## LR(1) items:
xhp_html -> T_XHP_OPEN_TAG list(xhp_attribute) T_XHP_GT . list(xhp_child) T_XHP_CLOSE_TAG [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_XHP_TEXT shift to state 3
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_LCURLY shift to state 1070
-- On xhp_html shift to state 1075
-- On xhp_child shift to state 1076
-- On list(xhp_child) shift to state 1078
## Reductions:
-- On T_XHP_CLOSE_TAG
--   reduce production list(xhp_child) ->

State 1070:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
xhp_child -> T_LCURLY . expr option(sc) T_RCURLY [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_LCURLY ]
xhp_child -> T_LCURLY . T_RCURLY [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_LCURLY ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_RCURLY shift to state 1071
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 1072
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 1071:
## Known stack suffix:
## T_LCURLY T_RCURLY
## LR(1) items:
xhp_child -> T_LCURLY T_RCURLY . [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_LCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xhp_child -> T_LCURLY T_RCURLY

State 1072:
## Known stack suffix:
## T_LCURLY expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RCURLY T_COMMA ]
xhp_child -> T_LCURLY expr . option(sc) T_RCURLY [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_LCURLY ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_COMMA shift to state 395
-- On sc shift to state 1055
-- On option(sc) shift to state 1073
## Reductions:
-- On T_RCURLY
--   reduce production option(sc) ->

State 1073:
## Known stack suffix:
## T_LCURLY expr option(sc)
## LR(1) items:
xhp_child -> T_LCURLY expr option(sc) . T_RCURLY [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_LCURLY ]
## Transitions:
-- On T_RCURLY shift to state 1074
## Reductions:

State 1074:
## Known stack suffix:
## T_LCURLY expr option(sc) T_RCURLY
## LR(1) items:
xhp_child -> T_LCURLY expr option(sc) T_RCURLY . [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_LCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xhp_child -> T_LCURLY expr option(sc) T_RCURLY

State 1075:
## Known stack suffix:
## xhp_html
## LR(1) items:
xhp_child -> xhp_html . [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_LCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xhp_child -> xhp_html

State 1076:
## Known stack suffix:
## xhp_child
## LR(1) items:
list(xhp_child) -> xhp_child . list(xhp_child) [ T_XHP_CLOSE_TAG ]
## Transitions:
-- On T_XHP_TEXT shift to state 3
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_LCURLY shift to state 1070
-- On xhp_html shift to state 1075
-- On xhp_child shift to state 1076
-- On list(xhp_child) shift to state 1077
## Reductions:
-- On T_XHP_CLOSE_TAG
--   reduce production list(xhp_child) ->

State 1077:
## Known stack suffix:
## xhp_child list(xhp_child)
## LR(1) items:
list(xhp_child) -> xhp_child list(xhp_child) . [ T_XHP_CLOSE_TAG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(xhp_child) -> xhp_child list(xhp_child)

State 1078:
## Known stack suffix:
## T_XHP_OPEN_TAG list(xhp_attribute) T_XHP_GT list(xhp_child)
## LR(1) items:
xhp_html -> T_XHP_OPEN_TAG list(xhp_attribute) T_XHP_GT list(xhp_child) . T_XHP_CLOSE_TAG [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_XHP_CLOSE_TAG shift to state 1079
## Reductions:

State 1079:
## Known stack suffix:
## T_XHP_OPEN_TAG list(xhp_attribute) T_XHP_GT list(xhp_child) T_XHP_CLOSE_TAG
## LR(1) items:
xhp_html -> T_XHP_OPEN_TAG list(xhp_attribute) T_XHP_GT list(xhp_child) T_XHP_CLOSE_TAG . [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xhp_html -> T_XHP_OPEN_TAG list(xhp_attribute) T_XHP_GT list(xhp_child) T_XHP_CLOSE_TAG

State 1080:
## Known stack suffix:
## T_XHP_SHORT_FRAGMENT list(xhp_child)
## LR(1) items:
xhp_html -> T_XHP_SHORT_FRAGMENT list(xhp_child) . T_XHP_CLOSE_TAG [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
-- On T_XHP_CLOSE_TAG shift to state 1081
## Reductions:

State 1081:
## Known stack suffix:
## T_XHP_SHORT_FRAGMENT list(xhp_child) T_XHP_CLOSE_TAG
## LR(1) items:
xhp_html -> T_XHP_SHORT_FRAGMENT list(xhp_child) T_XHP_CLOSE_TAG . [ T_XHP_TEXT T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_XHP_CLOSE_TAG T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_OF T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xhp_html -> T_XHP_SHORT_FRAGMENT list(xhp_child) T_XHP_CLOSE_TAG

State 1082:
## Known stack suffix:
## T_YIELD T_MULT
## LR(1) items:
assignment_expr -> T_YIELD T_MULT . assignment_expr [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 1083
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 1083:
## Known stack suffix:
## T_YIELD T_MULT assignment_expr
## LR(1) items:
assignment_expr -> T_YIELD T_MULT assignment_expr . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expr -> T_YIELD T_MULT assignment_expr

State 1084:
## Known stack suffix:
## T_YIELD assignment_expr
## LR(1) items:
assignment_expr -> T_YIELD assignment_expr . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_RPAREN T_RCURLY T_RBRACKET T_COMMA T_COLON RDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expr -> T_YIELD assignment_expr

State 1085:
## Known stack suffix:
## json
## LR(1) items:
json' -> json . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept json

State 1086:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_COMMA EOF ]
json -> expr . EOF [ # ]
## Transitions:
-- On T_COMMA shift to state 395
-- On EOF shift to state 1087
## Reductions:

State 1087:
## Known stack suffix:
## expr EOF
## LR(1) items:
json -> expr EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production json -> expr EOF

State 1088:
## Known stack suffix:
##
## LR(1) items:
json_pattern' -> . json_pattern [ # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 1089
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 1095
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On json_pattern shift to state 1100
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 1101
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 1089:
## Known stack suffix:
## T_ID
## LR(1) items:
id -> T_ID . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND EOF ]
json_pattern -> T_ID . T_COLON assignment_expr option(T_COMMA) EOF [ # ]
## Transitions:
-- On T_COLON shift to state 1090
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_ARROW T_AND EOF
--   reduce production id -> T_ID

State 1090:
## Known stack suffix:
## T_ID T_COLON
## LR(1) items:
json_pattern -> T_ID T_COLON . assignment_expr option(T_COMMA) EOF [ # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 1091
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 1091:
## Known stack suffix:
## T_ID T_COLON assignment_expr
## LR(1) items:
json_pattern -> T_ID T_COLON assignment_expr . option(T_COMMA) EOF [ # ]
## Transitions:
-- On T_COMMA shift to state 1092
-- On option(T_COMMA) shift to state 1093
## Reductions:
-- On EOF
--   reduce production option(T_COMMA) ->

State 1092:
## Known stack suffix:
## T_COMMA
## LR(1) items:
option(T_COMMA) -> T_COMMA . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(T_COMMA) -> T_COMMA

State 1093:
## Known stack suffix:
## T_ID T_COLON assignment_expr option(T_COMMA)
## LR(1) items:
json_pattern -> T_ID T_COLON assignment_expr option(T_COMMA) . EOF [ # ]
## Transitions:
-- On EOF shift to state 1094
## Reductions:

State 1094:
## Known stack suffix:
## T_ID T_COLON assignment_expr option(T_COMMA) EOF
## LR(1) items:
json_pattern -> T_ID T_COLON assignment_expr option(T_COMMA) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production json_pattern -> T_ID T_COLON assignment_expr option(T_COMMA) EOF

State 1095:
## Known stack suffix:
## string_literal
## LR(1) items:
json_pattern -> string_literal . T_COLON assignment_expr option(T_COMMA) EOF [ # ]
primary_expr_no_braces -> string_literal . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND EOF ]
## Transitions:
-- On T_COLON shift to state 1096
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AS T_AND EOF
--   reduce production primary_expr_no_braces -> string_literal

State 1096:
## Known stack suffix:
## string_literal T_COLON
## LR(1) items:
json_pattern -> string_literal T_COLON . assignment_expr option(T_COMMA) EOF [ # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 1097
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 1097:
## Known stack suffix:
## string_literal T_COLON assignment_expr
## LR(1) items:
json_pattern -> string_literal T_COLON assignment_expr . option(T_COMMA) EOF [ # ]
## Transitions:
-- On T_COMMA shift to state 1092
-- On option(T_COMMA) shift to state 1098
## Reductions:
-- On EOF
--   reduce production option(T_COMMA) ->

State 1098:
## Known stack suffix:
## string_literal T_COLON assignment_expr option(T_COMMA)
## LR(1) items:
json_pattern -> string_literal T_COLON assignment_expr option(T_COMMA) . EOF [ # ]
## Transitions:
-- On EOF shift to state 1099
## Reductions:

State 1099:
## Known stack suffix:
## string_literal T_COLON assignment_expr option(T_COMMA) EOF
## LR(1) items:
json_pattern -> string_literal T_COLON assignment_expr option(T_COMMA) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production json_pattern -> string_literal T_COLON assignment_expr option(T_COMMA) EOF

State 1100:
## Known stack suffix:
## json_pattern
## LR(1) items:
json_pattern' -> json_pattern . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept json_pattern

State 1101:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_COMMA EOF ]
json_pattern -> expr . EOF [ # ]
## Transitions:
-- On T_COMMA shift to state 395
-- On EOF shift to state 1102
## Reductions:

State 1102:
## Known stack suffix:
## expr EOF
## LR(1) items:
json_pattern -> expr EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production json_pattern -> expr EOF

State 1103:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IMPORT shift to state 1104
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_EXPORT shift to state 1142
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On program shift to state 1167
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On module_item shift to state 1169
-- On member_expr(primary_no_stmt) shift to state 705
-- On main shift to state 1174
-- On list(module_item) shift to state 1175
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 1171
-- On interface_decl shift to state 750
-- On import_decl shift to state 1172
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On export_decl shift to state 1173
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On EOF
--   reduce production list(module_item) ->
-- On T_ENUM
--   reduce production option(T_CONST) ->

State 1104:
## Known stack suffix:
## T_IMPORT
## LR(1) items:
import_decl -> T_IMPORT . import_clause from_clause sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
import_decl -> T_IMPORT . module_specifier sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_TYPE shift to state 1105
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MULT shift to state 1122
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 1106
-- On T_ID shift to state 1125
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 1126
-- On named_imports shift to state 1127
-- On module_specifier shift to state 1128
-- On import_names shift to state 1130
-- On import_default shift to state 1131
-- On import_clause shift to state 1135
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_id shift to state 1141
## Reductions:

State 1105:
## Known stack suffix:
## T_TYPE
## LR(1) items:
ident_semi_keyword -> T_TYPE . [ T_FROM T_COMMA ]
import_names -> T_TYPE . named_imports [ T_FROM ]
## Transitions:
-- On T_LCURLY shift to state 1106
-- On named_imports shift to state 1121
## Reductions:
-- On T_FROM T_COMMA
--   reduce production ident_semi_keyword -> T_TYPE

State 1106:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
named_imports -> T_LCURLY . T_RCURLY [ T_FROM ]
named_imports -> T_LCURLY . listc(import_specifier) T_RCURLY [ T_FROM ]
named_imports -> T_LCURLY . listc(import_specifier) T_COMMA T_RCURLY [ T_FROM ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_RCURLY shift to state 1107
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DEFAULT shift to state 1108
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On listc(import_specifier) shift to state 1111
-- On import_specifier shift to state 1120
-- On ident_semi_keyword shift to state 75
-- On id shift to state 1116
-- On binding_id shift to state 1119
## Reductions:

State 1107:
## Known stack suffix:
## T_LCURLY T_RCURLY
## LR(1) items:
named_imports -> T_LCURLY T_RCURLY . [ T_FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production named_imports -> T_LCURLY T_RCURLY

State 1108:
## Known stack suffix:
## T_DEFAULT
## LR(1) items:
import_specifier -> T_DEFAULT . T_AS binding_id [ T_RCURLY T_COMMA ]
import_specifier -> T_DEFAULT . [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_AS shift to state 1109
## Reductions:
-- On T_RCURLY T_COMMA
--   reduce production import_specifier -> T_DEFAULT

State 1109:
## Known stack suffix:
## T_DEFAULT T_AS
## LR(1) items:
import_specifier -> T_DEFAULT T_AS . binding_id [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_id shift to state 1110
## Reductions:

State 1110:
## Known stack suffix:
## T_DEFAULT T_AS binding_id
## LR(1) items:
import_specifier -> T_DEFAULT T_AS binding_id . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_specifier -> T_DEFAULT T_AS binding_id

State 1111:
## Known stack suffix:
## T_LCURLY listc(import_specifier)
## LR(1) items:
listc(import_specifier) -> listc(import_specifier) . T_COMMA import_specifier [ T_RCURLY T_COMMA ]
named_imports -> T_LCURLY listc(import_specifier) . T_RCURLY [ T_FROM ]
named_imports -> T_LCURLY listc(import_specifier) . T_COMMA T_RCURLY [ T_FROM ]
## Transitions:
-- On T_RCURLY shift to state 1112
-- On T_COMMA shift to state 1113
## Reductions:

State 1112:
## Known stack suffix:
## T_LCURLY listc(import_specifier) T_RCURLY
## LR(1) items:
named_imports -> T_LCURLY listc(import_specifier) T_RCURLY . [ T_FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production named_imports -> T_LCURLY listc(import_specifier) T_RCURLY

State 1113:
## Known stack suffix:
## T_LCURLY listc(import_specifier) T_COMMA
## LR(1) items:
listc(import_specifier) -> listc(import_specifier) T_COMMA . import_specifier [ T_RCURLY T_COMMA ]
named_imports -> T_LCURLY listc(import_specifier) T_COMMA . T_RCURLY [ T_FROM ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_RCURLY shift to state 1114
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DEFAULT shift to state 1108
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On import_specifier shift to state 1115
-- On ident_semi_keyword shift to state 75
-- On id shift to state 1116
-- On binding_id shift to state 1119
## Reductions:

State 1114:
## Known stack suffix:
## T_LCURLY listc(import_specifier) T_COMMA T_RCURLY
## LR(1) items:
named_imports -> T_LCURLY listc(import_specifier) T_COMMA T_RCURLY . [ T_FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production named_imports -> T_LCURLY listc(import_specifier) T_COMMA T_RCURLY

State 1115:
## Known stack suffix:
## listc(import_specifier) T_COMMA import_specifier
## LR(1) items:
listc(import_specifier) -> listc(import_specifier) T_COMMA import_specifier . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(import_specifier) -> listc(import_specifier) T_COMMA import_specifier

State 1116:
## Known stack suffix:
## id
## LR(1) items:
binding_id -> id . [ T_RCURLY T_COMMA ]
import_specifier -> id . T_AS binding_id [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_AS shift to state 1117
## Reductions:
-- On T_RCURLY T_COMMA
--   reduce production binding_id -> id

State 1117:
## Known stack suffix:
## id T_AS
## LR(1) items:
import_specifier -> id T_AS . binding_id [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_id shift to state 1118
## Reductions:

State 1118:
## Known stack suffix:
## id T_AS binding_id
## LR(1) items:
import_specifier -> id T_AS binding_id . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_specifier -> id T_AS binding_id

State 1119:
## Known stack suffix:
## binding_id
## LR(1) items:
import_specifier -> binding_id . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_specifier -> binding_id

State 1120:
## Known stack suffix:
## import_specifier
## LR(1) items:
listc(import_specifier) -> import_specifier . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listc(import_specifier) -> import_specifier

State 1121:
## Known stack suffix:
## T_TYPE named_imports
## LR(1) items:
import_names -> T_TYPE named_imports . [ T_FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_names -> T_TYPE named_imports

State 1122:
## Known stack suffix:
## T_MULT
## LR(1) items:
import_names -> T_MULT . T_AS binding_id [ T_FROM ]
## Transitions:
-- On T_AS shift to state 1123
## Reductions:

State 1123:
## Known stack suffix:
## T_MULT T_AS
## LR(1) items:
import_names -> T_MULT T_AS . binding_id [ T_FROM ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_id shift to state 1124
## Reductions:

State 1124:
## Known stack suffix:
## T_MULT T_AS binding_id
## LR(1) items:
import_names -> T_MULT T_AS binding_id . [ T_FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_names -> T_MULT T_AS binding_id

State 1125:
## Known stack suffix:
## T_ID
## LR(1) items:
id -> T_ID . [ T_FROM T_COMMA ]
module_specifier -> T_ID . [ T_VIRTUAL_SEMICOLON T_SEMICOLON ]
## Transitions:
## Reductions:
-- On T_FROM T_COMMA
--   reduce production id -> T_ID
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON
--   reduce production module_specifier -> T_ID

State 1126:
## Known stack suffix:
## string_literal
## LR(1) items:
module_specifier -> string_literal . [ T_VIRTUAL_SEMICOLON T_SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_specifier -> string_literal

State 1127:
## Known stack suffix:
## named_imports
## LR(1) items:
import_names -> named_imports . [ T_FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_names -> named_imports

State 1128:
## Known stack suffix:
## T_IMPORT module_specifier
## LR(1) items:
import_decl -> T_IMPORT module_specifier . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 1129
## Reductions:

State 1129:
## Known stack suffix:
## T_IMPORT module_specifier sc
## LR(1) items:
import_decl -> T_IMPORT module_specifier sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_decl -> T_IMPORT module_specifier sc

State 1130:
## Known stack suffix:
## import_names
## LR(1) items:
import_clause -> import_names . [ T_FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_clause -> import_names

State 1131:
## Known stack suffix:
## import_default
## LR(1) items:
import_clause -> import_default . [ T_FROM ]
import_clause -> import_default . T_COMMA import_names [ T_FROM ]
## Transitions:
-- On T_COMMA shift to state 1132
## Reductions:
-- On T_FROM
--   reduce production import_clause -> import_default

State 1132:
## Known stack suffix:
## import_default T_COMMA
## LR(1) items:
import_clause -> import_default T_COMMA . import_names [ T_FROM ]
## Transitions:
-- On T_TYPE shift to state 1133
-- On T_MULT shift to state 1122
-- On T_LCURLY shift to state 1106
-- On named_imports shift to state 1127
-- On import_names shift to state 1134
## Reductions:

State 1133:
## Known stack suffix:
## T_TYPE
## LR(1) items:
import_names -> T_TYPE . named_imports [ T_FROM ]
## Transitions:
-- On T_LCURLY shift to state 1106
-- On named_imports shift to state 1121
## Reductions:

State 1134:
## Known stack suffix:
## import_default T_COMMA import_names
## LR(1) items:
import_clause -> import_default T_COMMA import_names . [ T_FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_clause -> import_default T_COMMA import_names

State 1135:
## Known stack suffix:
## T_IMPORT import_clause
## LR(1) items:
import_decl -> T_IMPORT import_clause . from_clause sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_FROM shift to state 1136
-- On from_clause shift to state 1139
## Reductions:

State 1136:
## Known stack suffix:
## T_FROM
## LR(1) items:
from_clause -> T_FROM . module_specifier [ T_VIRTUAL_SEMICOLON T_SEMICOLON ]
## Transitions:
-- On T_STRING shift to state 81
-- On T_ID shift to state 1137
-- On string_literal shift to state 1126
-- On module_specifier shift to state 1138
## Reductions:

State 1137:
## Known stack suffix:
## T_ID
## LR(1) items:
module_specifier -> T_ID . [ T_VIRTUAL_SEMICOLON T_SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_specifier -> T_ID

State 1138:
## Known stack suffix:
## T_FROM module_specifier
## LR(1) items:
from_clause -> T_FROM module_specifier . [ T_VIRTUAL_SEMICOLON T_SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production from_clause -> T_FROM module_specifier

State 1139:
## Known stack suffix:
## T_IMPORT import_clause from_clause
## LR(1) items:
import_decl -> T_IMPORT import_clause from_clause . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 1140
## Reductions:

State 1140:
## Known stack suffix:
## T_IMPORT import_clause from_clause sc
## LR(1) items:
import_decl -> T_IMPORT import_clause from_clause sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_decl -> T_IMPORT import_clause from_clause sc

State 1141:
## Known stack suffix:
## binding_id
## LR(1) items:
import_default -> binding_id . [ T_FROM T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_default -> binding_id

State 1142:
## Known stack suffix:
## T_EXPORT
## LR(1) items:
export_decl -> T_EXPORT . export_names [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
export_decl -> T_EXPORT . variable_stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
export_decl -> T_EXPORT . decl [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
export_decl -> T_EXPORT . T_DEFAULT decl [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
export_decl -> T_EXPORT . T_DEFAULT assignment_expr_no_stmt sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
export_decl -> T_EXPORT . T_DEFAULT object_literal sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_VAR shift to state 423
-- On T_TYPE shift to state 1143
-- On T_MULT shift to state 1144
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 1147
-- On T_INTERFACE shift to state 476
-- On T_FUNCTION shift to state 607
-- On T_DEFAULT shift to state 1153
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 1159
-- On variable_stmt shift to state 1160
-- On type_alias_decl shift to state 630
-- On option(T_CONST) shift to state 698
-- On nonempty_list(decorator) shift to state 739
-- On lexical_decl shift to state 745
-- On interface_decl shift to state 750
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On export_names shift to state 1161
-- On export_clause shift to state 1162
-- On enum_decl shift to state 767
-- On decorator shift to state 768
-- On decl shift to state 1166
-- On class_decl shift to state 771
-- On async_decl shift to state 772
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->

State 1143:
## Known stack suffix:
## T_TYPE
## LR(1) items:
type_alias_decl -> T_TYPE . id T_ASSIGN type_ sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 465
## Reductions:

State 1144:
## Known stack suffix:
## T_MULT
## LR(1) items:
export_names -> T_MULT . from_clause sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_FROM shift to state 1136
-- On from_clause shift to state 1145
## Reductions:

State 1145:
## Known stack suffix:
## T_MULT from_clause
## LR(1) items:
export_names -> T_MULT from_clause . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 1146
## Reductions:

State 1146:
## Known stack suffix:
## T_MULT from_clause sc
## LR(1) items:
export_names -> T_MULT from_clause sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_names -> T_MULT from_clause sc

State 1147:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
export_clause -> T_LCURLY . T_RCURLY [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_FROM ]
export_clause -> T_LCURLY . listc(import_specifier) T_RCURLY [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_FROM ]
export_clause -> T_LCURLY . listc(import_specifier) T_COMMA T_RCURLY [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_FROM ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_RCURLY shift to state 1148
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DEFAULT shift to state 1108
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On listc(import_specifier) shift to state 1149
-- On import_specifier shift to state 1120
-- On ident_semi_keyword shift to state 75
-- On id shift to state 1116
-- On binding_id shift to state 1119
## Reductions:

State 1148:
## Known stack suffix:
## T_LCURLY T_RCURLY
## LR(1) items:
export_clause -> T_LCURLY T_RCURLY . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_clause -> T_LCURLY T_RCURLY

State 1149:
## Known stack suffix:
## T_LCURLY listc(import_specifier)
## LR(1) items:
export_clause -> T_LCURLY listc(import_specifier) . T_RCURLY [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_FROM ]
export_clause -> T_LCURLY listc(import_specifier) . T_COMMA T_RCURLY [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_FROM ]
listc(import_specifier) -> listc(import_specifier) . T_COMMA import_specifier [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_RCURLY shift to state 1150
-- On T_COMMA shift to state 1151
## Reductions:

State 1150:
## Known stack suffix:
## T_LCURLY listc(import_specifier) T_RCURLY
## LR(1) items:
export_clause -> T_LCURLY listc(import_specifier) T_RCURLY . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_clause -> T_LCURLY listc(import_specifier) T_RCURLY

State 1151:
## Known stack suffix:
## T_LCURLY listc(import_specifier) T_COMMA
## LR(1) items:
export_clause -> T_LCURLY listc(import_specifier) T_COMMA . T_RCURLY [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_FROM ]
listc(import_specifier) -> listc(import_specifier) T_COMMA . import_specifier [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_RCURLY shift to state 1152
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DEFAULT shift to state 1108
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On import_specifier shift to state 1115
-- On ident_semi_keyword shift to state 75
-- On id shift to state 1116
-- On binding_id shift to state 1119
## Reductions:

State 1152:
## Known stack suffix:
## T_LCURLY listc(import_specifier) T_COMMA T_RCURLY
## LR(1) items:
export_clause -> T_LCURLY listc(import_specifier) T_COMMA T_RCURLY . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_clause -> T_LCURLY listc(import_specifier) T_COMMA T_RCURLY

State 1153:
## Known stack suffix:
## T_EXPORT T_DEFAULT
## LR(1) items:
export_decl -> T_EXPORT T_DEFAULT . decl [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
export_decl -> T_EXPORT T_DEFAULT . assignment_expr_no_stmt sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
export_decl -> T_EXPORT T_DEFAULT . object_literal sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 319
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On type_alias_decl shift to state 630
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On option(T_CONST) shift to state 698
-- On object_literal shift to state 1154
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On interface_decl shift to state 750
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On enum_decl shift to state 767
-- On decorator shift to state 768
-- On decl shift to state 1156
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On boolean_literal shift to state 386
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 1157
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->

State 1154:
## Known stack suffix:
## T_EXPORT T_DEFAULT object_literal
## LR(1) items:
export_decl -> T_EXPORT T_DEFAULT object_literal . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 1155
## Reductions:

State 1155:
## Known stack suffix:
## T_EXPORT T_DEFAULT object_literal sc
## LR(1) items:
export_decl -> T_EXPORT T_DEFAULT object_literal sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_decl -> T_EXPORT T_DEFAULT object_literal sc

State 1156:
## Known stack suffix:
## T_EXPORT T_DEFAULT decl
## LR(1) items:
export_decl -> T_EXPORT T_DEFAULT decl . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_decl -> T_EXPORT T_DEFAULT decl

State 1157:
## Known stack suffix:
## T_EXPORT T_DEFAULT assignment_expr_no_stmt
## LR(1) items:
export_decl -> T_EXPORT T_DEFAULT assignment_expr_no_stmt . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 1158
## Reductions:

State 1158:
## Known stack suffix:
## T_EXPORT T_DEFAULT assignment_expr_no_stmt sc
## LR(1) items:
export_decl -> T_EXPORT T_DEFAULT assignment_expr_no_stmt sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_decl -> T_EXPORT T_DEFAULT assignment_expr_no_stmt sc

State 1159:
## Known stack suffix:
## T_ASYNC
## LR(1) items:
async_decl -> T_ASYNC . T_FUNCTION id call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_FUNCTION shift to state 622
## Reductions:

State 1160:
## Known stack suffix:
## T_EXPORT variable_stmt
## LR(1) items:
export_decl -> T_EXPORT variable_stmt . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_decl -> T_EXPORT variable_stmt

State 1161:
## Known stack suffix:
## T_EXPORT export_names
## LR(1) items:
export_decl -> T_EXPORT export_names . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_decl -> T_EXPORT export_names

State 1162:
## Known stack suffix:
## export_clause
## LR(1) items:
export_names -> export_clause . from_clause sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
export_names -> export_clause . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_FROM shift to state 1136
-- On sc shift to state 1163
-- On from_clause shift to state 1164
## Reductions:

State 1163:
## Known stack suffix:
## export_clause sc
## LR(1) items:
export_names -> export_clause sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_names -> export_clause sc

State 1164:
## Known stack suffix:
## export_clause from_clause
## LR(1) items:
export_names -> export_clause from_clause . sc [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 1165
## Reductions:

State 1165:
## Known stack suffix:
## export_clause from_clause sc
## LR(1) items:
export_names -> export_clause from_clause sc . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_names -> export_clause from_clause sc

State 1166:
## Known stack suffix:
## T_EXPORT decl
## LR(1) items:
export_decl -> T_EXPORT decl . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_decl -> T_EXPORT decl

State 1167:
## Known stack suffix:
## program
## LR(1) items:
main -> program . EOF [ # ]
## Transitions:
-- On EOF shift to state 1168
## Reductions:

State 1168:
## Known stack suffix:
## program EOF
## LR(1) items:
main -> program EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production main -> program EOF

State 1169:
## Known stack suffix:
## module_item
## LR(1) items:
list(module_item) -> module_item . list(module_item) [ EOF ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IMPORT shift to state 1104
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_EXPORT shift to state 1142
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On module_item shift to state 1169
-- On member_expr(primary_no_stmt) shift to state 705
-- On list(module_item) shift to state 1170
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 1171
-- On interface_decl shift to state 750
-- On import_decl shift to state 1172
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On export_decl shift to state 1173
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On EOF
--   reduce production list(module_item) ->
-- On T_ENUM
--   reduce production option(T_CONST) ->

State 1170:
## Known stack suffix:
## module_item list(module_item)
## LR(1) items:
list(module_item) -> module_item list(module_item) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(module_item) -> module_item list(module_item)

State 1171:
## Known stack suffix:
## item
## LR(1) items:
module_item -> item . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_item -> item

State 1172:
## Known stack suffix:
## import_decl
## LR(1) items:
module_item -> import_decl . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_item -> import_decl

State 1173:
## Known stack suffix:
## export_decl
## LR(1) items:
module_item -> export_decl . [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_item -> export_decl

State 1174:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept main

State 1175:
## Known stack suffix:
## list(module_item)
## LR(1) items:
program -> list(module_item) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production program -> list(module_item)

State 1176:
## Known stack suffix:
##
## LR(1) items:
module_item_or_eof' -> . module_item_or_eof [ # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 1177
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 1182
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 1185
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IMPORT shift to state 1193
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 1199
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_EXPORT shift to state 1211
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 1217
-- On T_CLASS shift to state 1220
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 1228
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On EOF shift to state 1269
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 1235
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 1270
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On option(T_CONST) shift to state 1236
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(decorator) shift to state 1245
-- On new_expr(primary_no_stmt) shift to state 704
-- On module_item_or_eof shift to state 1271
-- On module_item shift to state 1272
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 1251
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 1273
-- On interface_decl shift to state 1252
-- On import_decl shift to state 1274
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 1253
-- On function_decl shift to state 1254
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On export_decl shift to state 1275
-- On enum_decl shift to state 1255
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 1276
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 1257
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 1258
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->

State 1177:
## Known stack suffix:
## T_TYPE
## LR(1) items:
ident_semi_keyword -> T_TYPE . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_ARROW T_AND ]
type_alias_decl -> T_TYPE . id T_ASSIGN type_ sc [ # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 1178
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_ARROW T_AND
--   reduce production ident_semi_keyword -> T_TYPE

State 1178:
## Known stack suffix:
## T_TYPE id
## LR(1) items:
type_alias_decl -> T_TYPE id . T_ASSIGN type_ sc [ # ]
## Transitions:
-- On T_ASSIGN shift to state 1179
## Reductions:

State 1179:
## Known stack suffix:
## T_TYPE id T_ASSIGN
## LR(1) items:
type_alias_decl -> T_TYPE id T_ASSIGN . type_ sc [ # ]
## Transitions:
-- On T_VOID shift to state 146
-- On T_STRING_TYPE shift to state 147
-- On T_STRING shift to state 148
-- On T_PLING shift to state 149
-- On T_NUMBER_TYPE shift to state 150
-- On T_NULL shift to state 151
-- On T_LPAREN_ARROW shift to state 152
-- On T_LCURLY shift to state 156
-- On T_LBRACKET shift to state 183
-- On T_ID shift to state 141
-- On T_BOOLEAN_TYPE shift to state 184
-- On T_ANY_TYPE shift to state 185
-- On union_type shift to state 186
-- On type_reference_aux shift to state 187
-- On type_name shift to state 144
-- On type_ shift to state 1180
-- On primary_type2 shift to state 189
-- On primary_type shift to state 190
-- On primary_or_union_type shift to state 193
-- On primary_or_intersect_type shift to state 201
-- On predefined_type shift to state 196
-- On object_type shift to state 197
-- On module_name shift to state 198
-- On intersect_type shift to state 208
## Reductions:

State 1180:
## Known stack suffix:
## T_TYPE id T_ASSIGN type_
## LR(1) items:
type_alias_decl -> T_TYPE id T_ASSIGN type_ . sc [ # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 1181
## Reductions:

State 1181:
## Known stack suffix:
## T_TYPE id T_ASSIGN type_ sc
## LR(1) items:
type_alias_decl -> T_TYPE id T_ASSIGN type_ sc . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production type_alias_decl -> T_TYPE id T_ASSIGN type_ sc

State 1182:
## Known stack suffix:
## T_LET
## LR(1) items:
lexical_decl -> T_LET . listc(variable_decl) sc [ # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On variable_decl shift to state 424
-- On object_binding_pattern shift to state 123
-- On listc(variable_decl) shift to state 1183
-- On ident_semi_keyword shift to state 75
-- On id shift to state 428
-- On binding_pattern shift to state 433
-- On array_binding_pattern shift to state 127
## Reductions:

State 1183:
## Known stack suffix:
## T_LET listc(variable_decl)
## LR(1) items:
lexical_decl -> T_LET listc(variable_decl) . sc [ # ]
listc(variable_decl) -> listc(variable_decl) . T_COMMA variable_decl [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_COMMA shift to state 426
-- On sc shift to state 1184
## Reductions:

State 1184:
## Known stack suffix:
## T_LET listc(variable_decl) sc
## LR(1) items:
lexical_decl -> T_LET listc(variable_decl) sc . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production lexical_decl -> T_LET listc(variable_decl) sc

State 1185:
## Known stack suffix:
## T_INTERFACE
## LR(1) items:
interface_decl -> T_INTERFACE . binding_id option(generics) optl(interface_extends) object_type [ # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_id shift to state 1186
## Reductions:

State 1186:
## Known stack suffix:
## T_INTERFACE binding_id
## LR(1) items:
interface_decl -> T_INTERFACE binding_id . option(generics) optl(interface_extends) object_type [ # ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 1187
-- On generics shift to state 175
## Reductions:
-- On T_LCURLY T_EXTENDS
--   reduce production option(generics) ->

State 1187:
## Known stack suffix:
## T_INTERFACE binding_id option(generics)
## LR(1) items:
interface_decl -> T_INTERFACE binding_id option(generics) . optl(interface_extends) object_type [ # ]
## Transitions:
-- On T_EXTENDS shift to state 479
-- On optl(interface_extends) shift to state 1188
-- On interface_extends shift to state 486
## Reductions:
-- On T_LCURLY
--   reduce production optl(interface_extends) ->

State 1188:
## Known stack suffix:
## T_INTERFACE binding_id option(generics) optl(interface_extends)
## LR(1) items:
interface_decl -> T_INTERFACE binding_id option(generics) optl(interface_extends) . object_type [ # ]
## Transitions:
-- On T_LCURLY shift to state 1189
-- On object_type shift to state 1192
## Reductions:

State 1189:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
object_type -> T_LCURLY . list(type_member) T_RCURLY [ # ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 157
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On type_member shift to state 220
-- On string_literal shift to state 221
-- On property_name_typescript shift to state 222
-- On numeric_literal_as_string shift to state 228
-- On numeric_literal shift to state 229
-- On list(type_member) shift to state 1190
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 231
-- On id shift to state 232
## Reductions:
-- On T_RCURLY
--   reduce production list(type_member) ->

State 1190:
## Known stack suffix:
## T_LCURLY list(type_member)
## LR(1) items:
object_type -> T_LCURLY list(type_member) . T_RCURLY [ # ]
## Transitions:
-- On T_RCURLY shift to state 1191
## Reductions:

State 1191:
## Known stack suffix:
## T_LCURLY list(type_member) T_RCURLY
## LR(1) items:
object_type -> T_LCURLY list(type_member) T_RCURLY . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production object_type -> T_LCURLY list(type_member) T_RCURLY

State 1192:
## Known stack suffix:
## T_INTERFACE binding_id option(generics) optl(interface_extends) object_type
## LR(1) items:
interface_decl -> T_INTERFACE binding_id option(generics) optl(interface_extends) object_type . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interface_decl -> T_INTERFACE binding_id option(generics) optl(interface_extends) object_type

State 1193:
## Known stack suffix:
## T_IMPORT
## LR(1) items:
import_decl -> T_IMPORT . import_clause from_clause sc [ # ]
import_decl -> T_IMPORT . module_specifier sc [ # ]
## Transitions:
-- On T_TYPE shift to state 1105
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MULT shift to state 1122
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 1106
-- On T_ID shift to state 1125
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 1126
-- On named_imports shift to state 1127
-- On module_specifier shift to state 1194
-- On import_names shift to state 1130
-- On import_default shift to state 1131
-- On import_clause shift to state 1196
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_id shift to state 1141
## Reductions:

State 1194:
## Known stack suffix:
## T_IMPORT module_specifier
## LR(1) items:
import_decl -> T_IMPORT module_specifier . sc [ # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 1195
## Reductions:

State 1195:
## Known stack suffix:
## T_IMPORT module_specifier sc
## LR(1) items:
import_decl -> T_IMPORT module_specifier sc . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production import_decl -> T_IMPORT module_specifier sc

State 1196:
## Known stack suffix:
## T_IMPORT import_clause
## LR(1) items:
import_decl -> T_IMPORT import_clause . from_clause sc [ # ]
## Transitions:
-- On T_FROM shift to state 1136
-- On from_clause shift to state 1197
## Reductions:

State 1197:
## Known stack suffix:
## T_IMPORT import_clause from_clause
## LR(1) items:
import_decl -> T_IMPORT import_clause from_clause . sc [ # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 1198
## Reductions:

State 1198:
## Known stack suffix:
## T_IMPORT import_clause from_clause sc
## LR(1) items:
import_decl -> T_IMPORT import_clause from_clause sc . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production import_decl -> T_IMPORT import_clause from_clause sc

State 1199:
## Known stack suffix:
## T_FUNCTION
## LR(1) items:
function_decl -> T_FUNCTION . option(id) call_signature T_LCURLY function_body T_RCURLY [ # ]
generator_decl -> T_FUNCTION . T_MULT id call_signature T_LCURLY function_body T_RCURLY [ # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MULT shift to state 1200
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(id) shift to state 1206
-- On ident_semi_keyword shift to state 75
-- On id shift to state 592
## Reductions:
-- On T_LPAREN T_LESS_THAN
--   reduce production option(id) ->

State 1200:
## Known stack suffix:
## T_FUNCTION T_MULT
## LR(1) items:
generator_decl -> T_FUNCTION T_MULT . id call_signature T_LCURLY function_body T_RCURLY [ # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 1201
## Reductions:

State 1201:
## Known stack suffix:
## T_FUNCTION T_MULT id
## LR(1) items:
generator_decl -> T_FUNCTION T_MULT id . call_signature T_LCURLY function_body T_RCURLY [ # ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 1202
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 1202:
## Known stack suffix:
## T_FUNCTION T_MULT id call_signature
## LR(1) items:
generator_decl -> T_FUNCTION T_MULT id call_signature . T_LCURLY function_body T_RCURLY [ # ]
## Transitions:
-- On T_LCURLY shift to state 1203
## Reductions:

State 1203:
## Known stack suffix:
## T_FUNCTION T_MULT id call_signature T_LCURLY
## LR(1) items:
generator_decl -> T_FUNCTION T_MULT id call_signature T_LCURLY . function_body T_RCURLY [ # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 1204
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 1204:
## Known stack suffix:
## T_FUNCTION T_MULT id call_signature T_LCURLY function_body
## LR(1) items:
generator_decl -> T_FUNCTION T_MULT id call_signature T_LCURLY function_body . T_RCURLY [ # ]
## Transitions:
-- On T_RCURLY shift to state 1205
## Reductions:

State 1205:
## Known stack suffix:
## T_FUNCTION T_MULT id call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
generator_decl -> T_FUNCTION T_MULT id call_signature T_LCURLY function_body T_RCURLY . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production generator_decl -> T_FUNCTION T_MULT id call_signature T_LCURLY function_body T_RCURLY

State 1206:
## Known stack suffix:
## T_FUNCTION option(id)
## LR(1) items:
function_decl -> T_FUNCTION option(id) . call_signature T_LCURLY function_body T_RCURLY [ # ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 1207
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 1207:
## Known stack suffix:
## T_FUNCTION option(id) call_signature
## LR(1) items:
function_decl -> T_FUNCTION option(id) call_signature . T_LCURLY function_body T_RCURLY [ # ]
## Transitions:
-- On T_LCURLY shift to state 1208
## Reductions:

State 1208:
## Known stack suffix:
## T_FUNCTION option(id) call_signature T_LCURLY
## LR(1) items:
function_decl -> T_FUNCTION option(id) call_signature T_LCURLY . function_body T_RCURLY [ # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 1209
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 1209:
## Known stack suffix:
## T_FUNCTION option(id) call_signature T_LCURLY function_body
## LR(1) items:
function_decl -> T_FUNCTION option(id) call_signature T_LCURLY function_body . T_RCURLY [ # ]
## Transitions:
-- On T_RCURLY shift to state 1210
## Reductions:

State 1210:
## Known stack suffix:
## T_FUNCTION option(id) call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
function_decl -> T_FUNCTION option(id) call_signature T_LCURLY function_body T_RCURLY . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production function_decl -> T_FUNCTION option(id) call_signature T_LCURLY function_body T_RCURLY

State 1211:
## Known stack suffix:
## T_EXPORT
## LR(1) items:
export_decl -> T_EXPORT . export_names [ # ]
export_decl -> T_EXPORT . variable_stmt [ # ]
export_decl -> T_EXPORT . decl [ # ]
export_decl -> T_EXPORT . T_DEFAULT decl [ # ]
export_decl -> T_EXPORT . T_DEFAULT assignment_expr_no_stmt sc [ # ]
export_decl -> T_EXPORT . T_DEFAULT object_literal sc [ # ]
## Transitions:
-- On T_VAR shift to state 423
-- On T_TYPE shift to state 1212
-- On T_MULT shift to state 1213
-- On T_LET shift to state 1182
-- On T_LCURLY shift to state 1147
-- On T_INTERFACE shift to state 1185
-- On T_FUNCTION shift to state 1199
-- On T_DEFAULT shift to state 1216
-- On T_CONST shift to state 1217
-- On T_CLASS shift to state 1220
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 1261
-- On variable_stmt shift to state 1262
-- On type_alias_decl shift to state 1235
-- On option(T_CONST) shift to state 1236
-- On nonempty_list(decorator) shift to state 1245
-- On lexical_decl shift to state 1251
-- On interface_decl shift to state 1252
-- On generator_decl shift to state 1253
-- On function_decl shift to state 1254
-- On export_names shift to state 1263
-- On export_clause shift to state 1264
-- On enum_decl shift to state 1255
-- On decorator shift to state 768
-- On decl shift to state 1268
-- On class_decl shift to state 1257
-- On async_decl shift to state 1258
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->

State 1212:
## Known stack suffix:
## T_TYPE
## LR(1) items:
type_alias_decl -> T_TYPE . id T_ASSIGN type_ sc [ # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 1178
## Reductions:

State 1213:
## Known stack suffix:
## T_MULT
## LR(1) items:
export_names -> T_MULT . from_clause sc [ # ]
## Transitions:
-- On T_FROM shift to state 1136
-- On from_clause shift to state 1214
## Reductions:

State 1214:
## Known stack suffix:
## T_MULT from_clause
## LR(1) items:
export_names -> T_MULT from_clause . sc [ # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 1215
## Reductions:

State 1215:
## Known stack suffix:
## T_MULT from_clause sc
## LR(1) items:
export_names -> T_MULT from_clause sc . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production export_names -> T_MULT from_clause sc

State 1216:
## Known stack suffix:
## T_EXPORT T_DEFAULT
## LR(1) items:
export_decl -> T_EXPORT T_DEFAULT . decl [ # ]
export_decl -> T_EXPORT T_DEFAULT . assignment_expr_no_stmt sc [ # ]
export_decl -> T_EXPORT T_DEFAULT . object_literal sc [ # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 319
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 1177
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 1182
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 1185
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 1199
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 1217
-- On T_CLASS shift to state 1220
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 1228
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On type_alias_decl shift to state 1235
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On option(T_CONST) shift to state 1236
-- On object_literal shift to state 1243
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(decorator) shift to state 1245
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 1251
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On interface_decl shift to state 1252
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_decl shift to state 1253
-- On function_decl shift to state 1254
-- On enum_decl shift to state 1255
-- On decorator shift to state 768
-- On decl shift to state 1256
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 1257
-- On call_expr(primary_no_stmt) shift to state 718
-- On boolean_literal shift to state 386
-- On async_decl shift to state 1258
-- On assignment_expr_no_stmt shift to state 1259
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->

State 1217:
## Known stack suffix:
## T_CONST
## LR(1) items:
lexical_decl -> T_CONST . listc(variable_decl) sc [ # ]
option(T_CONST) -> T_CONST . [ T_ENUM ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On variable_decl shift to state 424
-- On object_binding_pattern shift to state 123
-- On listc(variable_decl) shift to state 1218
-- On ident_semi_keyword shift to state 75
-- On id shift to state 428
-- On binding_pattern shift to state 433
-- On array_binding_pattern shift to state 127
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) -> T_CONST

State 1218:
## Known stack suffix:
## T_CONST listc(variable_decl)
## LR(1) items:
lexical_decl -> T_CONST listc(variable_decl) . sc [ # ]
listc(variable_decl) -> listc(variable_decl) . T_COMMA variable_decl [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_COMMA shift to state 426
-- On sc shift to state 1219
## Reductions:

State 1219:
## Known stack suffix:
## T_CONST listc(variable_decl) sc
## LR(1) items:
lexical_decl -> T_CONST listc(variable_decl) sc . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production lexical_decl -> T_CONST listc(variable_decl) sc

State 1220:
## Known stack suffix:
## T_CLASS
## LR(1) items:
class_decl -> T_CLASS . option(binding_id) option(generics) class_heritage class_body [ # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(binding_id) shift to state 1221
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_id shift to state 620
## Reductions:
-- On T_LESS_THAN T_LCURLY T_IMPLEMENTS T_EXTENDS
--   reduce production option(binding_id) ->

State 1221:
## Known stack suffix:
## T_CLASS option(binding_id)
## LR(1) items:
class_decl -> T_CLASS option(binding_id) . option(generics) class_heritage class_body [ # ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 1222
-- On generics shift to state 175
## Reductions:
-- On T_LCURLY T_IMPLEMENTS T_EXTENDS
--   reduce production option(generics) ->

State 1222:
## Known stack suffix:
## T_CLASS option(binding_id) option(generics)
## LR(1) items:
class_decl -> T_CLASS option(binding_id) option(generics) . class_heritage class_body [ # ]
## Transitions:
-- On T_EXTENDS shift to state 140
-- On option(extends_clause) shift to state 264
-- On extends_clause shift to state 269
-- On class_heritage shift to state 1223
## Reductions:
-- On T_LCURLY T_IMPLEMENTS
--   reduce production option(extends_clause) ->

State 1223:
## Known stack suffix:
## T_CLASS option(binding_id) option(generics) class_heritage
## LR(1) items:
class_decl -> T_CLASS option(binding_id) option(generics) class_heritage . class_body [ # ]
## Transitions:
-- On T_LCURLY shift to state 1224
-- On class_body shift to state 1227
## Reductions:

State 1224:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
class_body -> T_LCURLY . list(class_element) T_RCURLY [ # ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 272
-- On T_SET shift to state 96
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 273
-- On T_PUBLIC shift to state 274
-- On T_PROTECTED shift to state 275
-- On T_PRIVATE shift to state 276
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MULT shift to state 98
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 100
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DOTS shift to state 277
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 285
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On sc shift to state 904
-- On property_name shift to state 905
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On nonempty_list(decorator) shift to state 913
-- On method_get_set_star shift to state 937
-- On method_definition shift to state 943
-- On list(class_element) shift to state 1225
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 733
-- On decorator shift to state 768
-- On class_element shift to state 946
-- On access_modifiers shift to state 948
-- On access_modifier shift to state 955
## Reductions:
-- On T_RCURLY
--   reduce production list(class_element) ->

State 1225:
## Known stack suffix:
## T_LCURLY list(class_element)
## LR(1) items:
class_body -> T_LCURLY list(class_element) . T_RCURLY [ # ]
## Transitions:
-- On T_RCURLY shift to state 1226
## Reductions:

State 1226:
## Known stack suffix:
## T_LCURLY list(class_element) T_RCURLY
## LR(1) items:
class_body -> T_LCURLY list(class_element) T_RCURLY . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production class_body -> T_LCURLY list(class_element) T_RCURLY

State 1227:
## Known stack suffix:
## T_CLASS option(binding_id) option(generics) class_heritage class_body
## LR(1) items:
class_decl -> T_CLASS option(binding_id) option(generics) class_heritage class_body . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production class_decl -> T_CLASS option(binding_id) option(generics) class_heritage class_body

State 1228:
## Known stack suffix:
## T_ASYNC
## LR(1) items:
arrow_function -> T_ASYNC . id T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
arrow_function -> T_ASYNC . T_LPAREN_ARROW formal_parameter_list_opt T_RPAREN option(annotation) T_ARROW arrow_body [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
async_decl -> T_ASYNC . T_FUNCTION id call_signature T_LCURLY function_body T_RCURLY [ # ]
ident_semi_keyword -> T_ASYNC . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_ARROW T_AND ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LPAREN_ARROW shift to state 305
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 1229
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 601
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_ARROW T_AND
--   reduce production ident_semi_keyword -> T_ASYNC

State 1229:
## Known stack suffix:
## T_ASYNC T_FUNCTION
## LR(1) items:
async_decl -> T_ASYNC T_FUNCTION . id call_signature T_LCURLY function_body T_RCURLY [ # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 1230
## Reductions:

State 1230:
## Known stack suffix:
## T_ASYNC T_FUNCTION id
## LR(1) items:
async_decl -> T_ASYNC T_FUNCTION id . call_signature T_LCURLY function_body T_RCURLY [ # ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 1231
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 1231:
## Known stack suffix:
## T_ASYNC T_FUNCTION id call_signature
## LR(1) items:
async_decl -> T_ASYNC T_FUNCTION id call_signature . T_LCURLY function_body T_RCURLY [ # ]
## Transitions:
-- On T_LCURLY shift to state 1232
## Reductions:

State 1232:
## Known stack suffix:
## T_ASYNC T_FUNCTION id call_signature T_LCURLY
## LR(1) items:
async_decl -> T_ASYNC T_FUNCTION id call_signature T_LCURLY . function_body T_RCURLY [ # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 1233
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 1233:
## Known stack suffix:
## T_ASYNC T_FUNCTION id call_signature T_LCURLY function_body
## LR(1) items:
async_decl -> T_ASYNC T_FUNCTION id call_signature T_LCURLY function_body . T_RCURLY [ # ]
## Transitions:
-- On T_RCURLY shift to state 1234
## Reductions:

State 1234:
## Known stack suffix:
## T_ASYNC T_FUNCTION id call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
async_decl -> T_ASYNC T_FUNCTION id call_signature T_LCURLY function_body T_RCURLY . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production async_decl -> T_ASYNC T_FUNCTION id call_signature T_LCURLY function_body T_RCURLY

State 1235:
## Known stack suffix:
## type_alias_decl
## LR(1) items:
decl -> type_alias_decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production decl -> type_alias_decl

State 1236:
## Known stack suffix:
## option(T_CONST)
## LR(1) items:
enum_decl -> option(T_CONST) . T_ENUM id T_LCURLY listc(enum_member) option(T_COMMA) T_RCURLY [ # ]
## Transitions:
-- On T_ENUM shift to state 1237
## Reductions:

State 1237:
## Known stack suffix:
## option(T_CONST) T_ENUM
## LR(1) items:
enum_decl -> option(T_CONST) T_ENUM . id T_LCURLY listc(enum_member) option(T_COMMA) T_RCURLY [ # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On ident_semi_keyword shift to state 75
-- On id shift to state 1238
## Reductions:

State 1238:
## Known stack suffix:
## option(T_CONST) T_ENUM id
## LR(1) items:
enum_decl -> option(T_CONST) T_ENUM id . T_LCURLY listc(enum_member) option(T_COMMA) T_RCURLY [ # ]
## Transitions:
-- On T_LCURLY shift to state 1239
## Reductions:

State 1239:
## Known stack suffix:
## option(T_CONST) T_ENUM id T_LCURLY
## LR(1) items:
enum_decl -> option(T_CONST) T_ENUM id T_LCURLY . listc(enum_member) option(T_COMMA) T_RCURLY [ # ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 31
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name shift to state 702
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On listc(enum_member) shift to state 1240
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 733
-- On enum_member shift to state 737
## Reductions:

State 1240:
## Known stack suffix:
## option(T_CONST) T_ENUM id T_LCURLY listc(enum_member)
## LR(1) items:
enum_decl -> option(T_CONST) T_ENUM id T_LCURLY listc(enum_member) . option(T_COMMA) T_RCURLY [ # ]
listc(enum_member) -> listc(enum_member) . T_COMMA enum_member [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_COMMA shift to state 731
-- On option(T_COMMA) shift to state 1241
## Reductions:
-- On T_RCURLY
--   reduce production option(T_COMMA) ->

State 1241:
## Known stack suffix:
## option(T_CONST) T_ENUM id T_LCURLY listc(enum_member) option(T_COMMA)
## LR(1) items:
enum_decl -> option(T_CONST) T_ENUM id T_LCURLY listc(enum_member) option(T_COMMA) . T_RCURLY [ # ]
## Transitions:
-- On T_RCURLY shift to state 1242
## Reductions:

State 1242:
## Known stack suffix:
## option(T_CONST) T_ENUM id T_LCURLY listc(enum_member) option(T_COMMA) T_RCURLY
## LR(1) items:
enum_decl -> option(T_CONST) T_ENUM id T_LCURLY listc(enum_member) option(T_COMMA) T_RCURLY . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production enum_decl -> option(T_CONST) T_ENUM id T_LCURLY listc(enum_member) option(T_COMMA) T_RCURLY

State 1243:
## Known stack suffix:
## T_EXPORT T_DEFAULT object_literal
## LR(1) items:
export_decl -> T_EXPORT T_DEFAULT object_literal . sc [ # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 1244
## Reductions:

State 1244:
## Known stack suffix:
## T_EXPORT T_DEFAULT object_literal sc
## LR(1) items:
export_decl -> T_EXPORT T_DEFAULT object_literal sc . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production export_decl -> T_EXPORT T_DEFAULT object_literal sc

State 1245:
## Known stack suffix:
## nonempty_list(decorator)
## LR(1) items:
class_decl -> nonempty_list(decorator) . T_CLASS option(binding_id) option(generics) class_heritage class_body [ # ]
## Transitions:
-- On T_CLASS shift to state 1246
## Reductions:

State 1246:
## Known stack suffix:
## nonempty_list(decorator) T_CLASS
## LR(1) items:
class_decl -> nonempty_list(decorator) T_CLASS . option(binding_id) option(generics) class_heritage class_body [ # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(binding_id) shift to state 1247
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_id shift to state 620
## Reductions:
-- On T_LESS_THAN T_LCURLY T_IMPLEMENTS T_EXTENDS
--   reduce production option(binding_id) ->

State 1247:
## Known stack suffix:
## nonempty_list(decorator) T_CLASS option(binding_id)
## LR(1) items:
class_decl -> nonempty_list(decorator) T_CLASS option(binding_id) . option(generics) class_heritage class_body [ # ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 1248
-- On generics shift to state 175
## Reductions:
-- On T_LCURLY T_IMPLEMENTS T_EXTENDS
--   reduce production option(generics) ->

State 1248:
## Known stack suffix:
## nonempty_list(decorator) T_CLASS option(binding_id) option(generics)
## LR(1) items:
class_decl -> nonempty_list(decorator) T_CLASS option(binding_id) option(generics) . class_heritage class_body [ # ]
## Transitions:
-- On T_EXTENDS shift to state 140
-- On option(extends_clause) shift to state 264
-- On extends_clause shift to state 269
-- On class_heritage shift to state 1249
## Reductions:
-- On T_LCURLY T_IMPLEMENTS
--   reduce production option(extends_clause) ->

State 1249:
## Known stack suffix:
## nonempty_list(decorator) T_CLASS option(binding_id) option(generics) class_heritage
## LR(1) items:
class_decl -> nonempty_list(decorator) T_CLASS option(binding_id) option(generics) class_heritage . class_body [ # ]
## Transitions:
-- On T_LCURLY shift to state 1224
-- On class_body shift to state 1250
## Reductions:

State 1250:
## Known stack suffix:
## nonempty_list(decorator) T_CLASS option(binding_id) option(generics) class_heritage class_body
## LR(1) items:
class_decl -> nonempty_list(decorator) T_CLASS option(binding_id) option(generics) class_heritage class_body . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production class_decl -> nonempty_list(decorator) T_CLASS option(binding_id) option(generics) class_heritage class_body

State 1251:
## Known stack suffix:
## lexical_decl
## LR(1) items:
decl -> lexical_decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production decl -> lexical_decl

State 1252:
## Known stack suffix:
## interface_decl
## LR(1) items:
decl -> interface_decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production decl -> interface_decl

State 1253:
## Known stack suffix:
## generator_decl
## LR(1) items:
decl -> generator_decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production decl -> generator_decl

State 1254:
## Known stack suffix:
## function_decl
## LR(1) items:
decl -> function_decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production decl -> function_decl

State 1255:
## Known stack suffix:
## enum_decl
## LR(1) items:
decl -> enum_decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production decl -> enum_decl

State 1256:
## Known stack suffix:
## T_EXPORT T_DEFAULT decl
## LR(1) items:
export_decl -> T_EXPORT T_DEFAULT decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production export_decl -> T_EXPORT T_DEFAULT decl

State 1257:
## Known stack suffix:
## class_decl
## LR(1) items:
decl -> class_decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production decl -> class_decl

State 1258:
## Known stack suffix:
## async_decl
## LR(1) items:
decl -> async_decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production decl -> async_decl

State 1259:
## Known stack suffix:
## T_EXPORT T_DEFAULT assignment_expr_no_stmt
## LR(1) items:
export_decl -> T_EXPORT T_DEFAULT assignment_expr_no_stmt . sc [ # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 1260
## Reductions:

State 1260:
## Known stack suffix:
## T_EXPORT T_DEFAULT assignment_expr_no_stmt sc
## LR(1) items:
export_decl -> T_EXPORT T_DEFAULT assignment_expr_no_stmt sc . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production export_decl -> T_EXPORT T_DEFAULT assignment_expr_no_stmt sc

State 1261:
## Known stack suffix:
## T_ASYNC
## LR(1) items:
async_decl -> T_ASYNC . T_FUNCTION id call_signature T_LCURLY function_body T_RCURLY [ # ]
## Transitions:
-- On T_FUNCTION shift to state 1229
## Reductions:

State 1262:
## Known stack suffix:
## T_EXPORT variable_stmt
## LR(1) items:
export_decl -> T_EXPORT variable_stmt . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production export_decl -> T_EXPORT variable_stmt

State 1263:
## Known stack suffix:
## T_EXPORT export_names
## LR(1) items:
export_decl -> T_EXPORT export_names . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production export_decl -> T_EXPORT export_names

State 1264:
## Known stack suffix:
## export_clause
## LR(1) items:
export_names -> export_clause . from_clause sc [ # ]
export_names -> export_clause . sc [ # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On T_FROM shift to state 1136
-- On sc shift to state 1265
-- On from_clause shift to state 1266
## Reductions:

State 1265:
## Known stack suffix:
## export_clause sc
## LR(1) items:
export_names -> export_clause sc . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production export_names -> export_clause sc

State 1266:
## Known stack suffix:
## export_clause from_clause
## LR(1) items:
export_names -> export_clause from_clause . sc [ # ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_SEMICOLON shift to state 212
-- On sc shift to state 1267
## Reductions:

State 1267:
## Known stack suffix:
## export_clause from_clause sc
## LR(1) items:
export_names -> export_clause from_clause sc . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production export_names -> export_clause from_clause sc

State 1268:
## Known stack suffix:
## T_EXPORT decl
## LR(1) items:
export_decl -> T_EXPORT decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production export_decl -> T_EXPORT decl

State 1269:
## Known stack suffix:
## EOF
## LR(1) items:
module_item_or_eof -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production module_item_or_eof -> EOF

State 1270:
## Known stack suffix:
## stmt
## LR(1) items:
item -> stmt . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production item -> stmt

State 1271:
## Known stack suffix:
## module_item_or_eof
## LR(1) items:
module_item_or_eof' -> module_item_or_eof . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept module_item_or_eof

State 1272:
## Known stack suffix:
## module_item
## LR(1) items:
module_item_or_eof -> module_item . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production module_item_or_eof -> module_item

State 1273:
## Known stack suffix:
## item
## LR(1) items:
module_item -> item . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production module_item -> item

State 1274:
## Known stack suffix:
## import_decl
## LR(1) items:
module_item -> import_decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production module_item -> import_decl

State 1275:
## Known stack suffix:
## export_decl
## LR(1) items:
module_item -> export_decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production module_item -> export_decl

State 1276:
## Known stack suffix:
## decl
## LR(1) items:
item -> decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production item -> decl

State 1277:
## Known stack suffix:
##
## LR(1) items:
sgrep_spatch_pattern' -> . sgrep_spatch_pattern [ # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 1278
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY_SEMGREP shift to state 1281
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IMPORT shift to state 1104
-- On T_IF shift to state 1286
-- On T_ID shift to state 1291
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 1304
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 439
-- On T_FALSE shift to state 133
-- On T_EXPORT shift to state 1142
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 1313
-- On T_CATCH shift to state 441
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 1318
-- On stmt shift to state 635
-- On sgrep_spatch_pattern shift to state 1323
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On module_item shift to state 1324
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 1171
-- On interface_decl shift to state 750
-- On import_decl shift to state 1172
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On finally shift to state 1330
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On export_decl shift to state 1173
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On catch shift to state 1332
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 1334
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->

State 1278:
## Known stack suffix:
## T_TRY
## LR(1) items:
sgrep_spatch_pattern -> T_TRY . block EOF [ # ]
try_stmt -> T_TRY . block catch [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
try_stmt -> T_TRY . block finally [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
try_stmt -> T_TRY . block catch finally [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_LCURLY shift to state 418
-- On block shift to state 1279
## Reductions:

State 1279:
## Known stack suffix:
## T_TRY block
## LR(1) items:
sgrep_spatch_pattern -> T_TRY block . EOF [ # ]
try_stmt -> T_TRY block . catch [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
try_stmt -> T_TRY block . finally [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
try_stmt -> T_TRY block . catch finally [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
## Transitions:
-- On T_FINALLY shift to state 439
-- On T_CATCH shift to state 441
-- On EOF shift to state 1280
-- On finally shift to state 450
-- On catch shift to state 451
## Reductions:

State 1280:
## Known stack suffix:
## T_TRY block EOF
## LR(1) items:
sgrep_spatch_pattern -> T_TRY block EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> T_TRY block EOF

State 1281:
## Known stack suffix:
## T_LCURLY_SEMGREP
## LR(1) items:
sgrep_spatch_pattern -> T_LCURLY_SEMGREP . T_RCURLY [ # ]
sgrep_spatch_pattern -> T_LCURLY_SEMGREP . listc(property_name_and_value) option(T_COMMA) T_RCURLY [ # ]
## Transitions:
-- On T_YIELD shift to state 17
-- On T_WITH shift to state 18
-- On T_WHILE shift to state 19
-- On T_VOID shift to state 20
-- On T_VAR shift to state 21
-- On T_TYPEOF shift to state 22
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 23
-- On T_TRUE shift to state 24
-- On T_THROW shift to state 25
-- On T_THIS shift to state 26
-- On T_SWITCH shift to state 27
-- On T_SUPER shift to state 28
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_STATIC shift to state 30
-- On T_SET shift to state 96
-- On T_RETURN shift to state 32
-- On T_READONLY shift to state 33
-- On T_RCURLY shift to state 1282
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 39
-- On T_NEW shift to state 40
-- On T_MULT shift to state 98
-- On T_MODULE shift to state 41
-- On T_LET shift to state 42
-- On T_LBRACKET shift to state 94
-- On T_INTERFACE shift to state 43
-- On T_INT shift to state 99
-- On T_INSTANCEOF shift to state 44
-- On T_IN shift to state 45
-- On T_IMPORT shift to state 46
-- On T_IF shift to state 47
-- On T_ID shift to state 48
-- On T_GET shift to state 100
-- On T_FUNCTION shift to state 50
-- On T_FROM shift to state 51
-- On T_FOR shift to state 52
-- On T_FLOAT shift to state 101
-- On T_FINALLY shift to state 53
-- On T_FALSE shift to state 54
-- On T_EXTENDS shift to state 55
-- On T_EXPORT shift to state 56
-- On T_ENUM shift to state 57
-- On T_ELSE shift to state 58
-- On T_DOTS shift to state 102
-- On T_DO shift to state 59
-- On T_DELETE shift to state 60
-- On T_DEFAULT shift to state 61
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 63
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 65
-- On T_CLASS shift to state 66
-- On T_CATCH shift to state 67
-- On T_CASE shift to state 68
-- On T_BREAK shift to state 69
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_AWAIT shift to state 71
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 285
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On string_literal shift to state 286
-- On property_name_and_value shift to state 992
-- On property_name shift to state 993
-- On numeric_literal_as_string shift to state 729
-- On numeric_literal shift to state 229
-- On nonempty_list(decorator) shift to state 913
-- On method_get_set_star shift to state 937
-- On method_definition shift to state 996
-- On listc(property_name_and_value) shift to state 1283
-- On ident_semi_keyword shift to state 75
-- On ident_keyword_bis shift to state 76
-- On ident_keyword shift to state 732
-- On id shift to state 1000
-- On decorator shift to state 768
## Reductions:

State 1282:
## Known stack suffix:
## T_LCURLY_SEMGREP T_RCURLY
## LR(1) items:
sgrep_spatch_pattern -> T_LCURLY_SEMGREP T_RCURLY . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> T_LCURLY_SEMGREP T_RCURLY

State 1283:
## Known stack suffix:
## T_LCURLY_SEMGREP listc(property_name_and_value)
## LR(1) items:
listc(property_name_and_value) -> listc(property_name_and_value) . T_COMMA property_name_and_value [ T_RCURLY T_COMMA ]
sgrep_spatch_pattern -> T_LCURLY_SEMGREP listc(property_name_and_value) . option(T_COMMA) T_RCURLY [ # ]
## Transitions:
-- On T_COMMA shift to state 998
-- On option(T_COMMA) shift to state 1284
## Reductions:
-- On T_RCURLY
--   reduce production option(T_COMMA) ->

State 1284:
## Known stack suffix:
## T_LCURLY_SEMGREP listc(property_name_and_value) option(T_COMMA)
## LR(1) items:
sgrep_spatch_pattern -> T_LCURLY_SEMGREP listc(property_name_and_value) option(T_COMMA) . T_RCURLY [ # ]
## Transitions:
-- On T_RCURLY shift to state 1285
## Reductions:

State 1285:
## Known stack suffix:
## T_LCURLY_SEMGREP listc(property_name_and_value) option(T_COMMA) T_RCURLY
## LR(1) items:
sgrep_spatch_pattern -> T_LCURLY_SEMGREP listc(property_name_and_value) option(T_COMMA) T_RCURLY . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> T_LCURLY_SEMGREP listc(property_name_and_value) option(T_COMMA) T_RCURLY

State 1286:
## Known stack suffix:
## T_IF
## LR(1) items:
if_stmt -> T_IF . T_LPAREN expr T_RPAREN stmt T_ELSE stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
if_stmt -> T_IF . T_LPAREN expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
sgrep_spatch_pattern -> T_IF . T_LPAREN expr T_RPAREN EOF [ # ]
## Transitions:
-- On T_LPAREN shift to state 1287
## Reductions:

State 1287:
## Known stack suffix:
## T_IF T_LPAREN
## LR(1) items:
if_stmt -> T_IF T_LPAREN . expr T_RPAREN stmt T_ELSE stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
if_stmt -> T_IF T_LPAREN . expr T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
sgrep_spatch_pattern -> T_IF T_LPAREN . expr T_RPAREN EOF [ # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On expr shift to state 1288
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 399
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 1288:
## Known stack suffix:
## T_IF T_LPAREN expr
## LR(1) items:
expr -> expr . T_COMMA assignment_expr [ T_RPAREN T_COMMA ]
if_stmt -> T_IF T_LPAREN expr . T_RPAREN stmt T_ELSE stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
if_stmt -> T_IF T_LPAREN expr . T_RPAREN stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
sgrep_spatch_pattern -> T_IF T_LPAREN expr . T_RPAREN EOF [ # ]
## Transitions:
-- On T_RPAREN shift to state 1289
-- On T_COMMA shift to state 395
## Reductions:

State 1289:
## Known stack suffix:
## T_IF T_LPAREN expr T_RPAREN
## LR(1) items:
if_stmt -> T_IF T_LPAREN expr T_RPAREN . stmt T_ELSE stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
if_stmt -> T_IF T_LPAREN expr T_RPAREN . stmt [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
sgrep_spatch_pattern -> T_IF T_LPAREN expr T_RPAREN . EOF [ # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 12
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_ASYNC shift to state 600
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On EOF shift to state 1290
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 836
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On empty_stmt shift to state 760
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:

State 1290:
## Known stack suffix:
## T_IF T_LPAREN expr T_RPAREN EOF
## LR(1) items:
sgrep_spatch_pattern -> T_IF T_LPAREN expr T_RPAREN EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> T_IF T_LPAREN expr T_RPAREN EOF

State 1291:
## Known stack suffix:
## T_ID
## LR(1) items:
id -> T_ID . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_COLON T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_ARROW T_AND EOF ]
sgrep_spatch_pattern -> T_ID . T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt T_RPAREN option(annotation) T_LCURLY function_body T_RCURLY EOF [ # ]
sgrep_spatch_pattern -> T_ID . T_COLON assignment_expr option(T_COMMA) EOF [ # ]
## Transitions:
-- On T_LPAREN_METHOD_SEMGREP shift to state 1292
-- On T_COLON shift to state 1300
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_ARROW T_AND EOF
--   reduce production id -> T_ID

State 1292:
## Known stack suffix:
## T_ID T_LPAREN_METHOD_SEMGREP
## LR(1) items:
sgrep_spatch_pattern -> T_ID T_LPAREN_METHOD_SEMGREP . formal_parameter_list_opt T_RPAREN option(annotation) T_LCURLY function_body T_RCURLY EOF [ # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_LCURLY shift to state 92
-- On T_LBRACKET shift to state 120
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DOTS shift to state 306
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On object_binding_pattern shift to state 123
-- On ident_semi_keyword shift to state 75
-- On id shift to state 309
-- On formal_parameter_list_opt shift to state 1293
-- On formal_parameter_list shift to state 873
-- On formal_parameter shift to state 880
-- On binding_pattern shift to state 876
-- On array_binding_pattern shift to state 127
## Reductions:
-- On T_RPAREN
--   reduce production formal_parameter_list_opt ->

State 1293:
## Known stack suffix:
## T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt
## LR(1) items:
sgrep_spatch_pattern -> T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt . T_RPAREN option(annotation) T_LCURLY function_body T_RCURLY EOF [ # ]
## Transitions:
-- On T_RPAREN shift to state 1294
## Reductions:

State 1294:
## Known stack suffix:
## T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt T_RPAREN
## LR(1) items:
sgrep_spatch_pattern -> T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt T_RPAREN . option(annotation) T_LCURLY function_body T_RCURLY EOF [ # ]
## Transitions:
-- On T_COLON shift to state 155
-- On option(annotation) shift to state 1295
-- On annotation shift to state 432
## Reductions:
-- On T_LCURLY
--   reduce production option(annotation) ->

State 1295:
## Known stack suffix:
## T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt T_RPAREN option(annotation)
## LR(1) items:
sgrep_spatch_pattern -> T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt T_RPAREN option(annotation) . T_LCURLY function_body T_RCURLY EOF [ # ]
## Transitions:
-- On T_LCURLY shift to state 1296
## Reductions:

State 1296:
## Known stack suffix:
## T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt T_RPAREN option(annotation) T_LCURLY
## LR(1) items:
sgrep_spatch_pattern -> T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt T_RPAREN option(annotation) T_LCURLY . function_body T_RCURLY EOF [ # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 1297
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 1297:
## Known stack suffix:
## T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt T_RPAREN option(annotation) T_LCURLY function_body
## LR(1) items:
sgrep_spatch_pattern -> T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt T_RPAREN option(annotation) T_LCURLY function_body . T_RCURLY EOF [ # ]
## Transitions:
-- On T_RCURLY shift to state 1298
## Reductions:

State 1298:
## Known stack suffix:
## T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt T_RPAREN option(annotation) T_LCURLY function_body T_RCURLY
## LR(1) items:
sgrep_spatch_pattern -> T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt T_RPAREN option(annotation) T_LCURLY function_body T_RCURLY . EOF [ # ]
## Transitions:
-- On EOF shift to state 1299
## Reductions:

State 1299:
## Known stack suffix:
## T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt T_RPAREN option(annotation) T_LCURLY function_body T_RCURLY EOF
## LR(1) items:
sgrep_spatch_pattern -> T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt T_RPAREN option(annotation) T_LCURLY function_body T_RCURLY EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> T_ID T_LPAREN_METHOD_SEMGREP formal_parameter_list_opt T_RPAREN option(annotation) T_LCURLY function_body T_RCURLY EOF

State 1300:
## Known stack suffix:
## T_ID T_COLON
## LR(1) items:
sgrep_spatch_pattern -> T_ID T_COLON . assignment_expr option(T_COMMA) EOF [ # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 1301
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 1301:
## Known stack suffix:
## T_ID T_COLON assignment_expr
## LR(1) items:
sgrep_spatch_pattern -> T_ID T_COLON assignment_expr . option(T_COMMA) EOF [ # ]
## Transitions:
-- On T_COMMA shift to state 1092
-- On option(T_COMMA) shift to state 1302
## Reductions:
-- On EOF
--   reduce production option(T_COMMA) ->

State 1302:
## Known stack suffix:
## T_ID T_COLON assignment_expr option(T_COMMA)
## LR(1) items:
sgrep_spatch_pattern -> T_ID T_COLON assignment_expr option(T_COMMA) . EOF [ # ]
## Transitions:
-- On EOF shift to state 1303
## Reductions:

State 1303:
## Known stack suffix:
## T_ID T_COLON assignment_expr option(T_COMMA) EOF
## LR(1) items:
sgrep_spatch_pattern -> T_ID T_COLON assignment_expr option(T_COMMA) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> T_ID T_COLON assignment_expr option(T_COMMA) EOF

State 1304:
## Known stack suffix:
## T_FUNCTION
## LR(1) items:
function_decl -> T_FUNCTION . option(id) call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
generator_decl -> T_FUNCTION . T_MULT id call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
sgrep_spatch_pattern -> T_FUNCTION . T_DOTS call_signature T_LCURLY function_body T_RCURLY [ # ]
sgrep_spatch_pattern -> T_FUNCTION . option(id) call_signature EOF [ # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MULT shift to state 608
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DOTS shift to state 1305
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(id) shift to state 1310
-- On ident_semi_keyword shift to state 75
-- On id shift to state 592
## Reductions:
-- On T_LPAREN T_LESS_THAN
--   reduce production option(id) ->

State 1305:
## Known stack suffix:
## T_FUNCTION T_DOTS
## LR(1) items:
sgrep_spatch_pattern -> T_FUNCTION T_DOTS . call_signature T_LCURLY function_body T_RCURLY [ # ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 1306
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 1306:
## Known stack suffix:
## T_FUNCTION T_DOTS call_signature
## LR(1) items:
sgrep_spatch_pattern -> T_FUNCTION T_DOTS call_signature . T_LCURLY function_body T_RCURLY [ # ]
## Transitions:
-- On T_LCURLY shift to state 1307
## Reductions:

State 1307:
## Known stack suffix:
## T_FUNCTION T_DOTS call_signature T_LCURLY
## LR(1) items:
sgrep_spatch_pattern -> T_FUNCTION T_DOTS call_signature T_LCURLY . function_body T_RCURLY [ # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt_list shift to state 634
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On optl(stmt_list) shift to state 697
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(item) shift to state 738
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 748
-- On interface_decl shift to state 750
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On function_body shift to state 1308
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->
-- On T_RCURLY
--   reduce production optl(stmt_list) ->

State 1308:
## Known stack suffix:
## T_FUNCTION T_DOTS call_signature T_LCURLY function_body
## LR(1) items:
sgrep_spatch_pattern -> T_FUNCTION T_DOTS call_signature T_LCURLY function_body . T_RCURLY [ # ]
## Transitions:
-- On T_RCURLY shift to state 1309
## Reductions:

State 1309:
## Known stack suffix:
## T_FUNCTION T_DOTS call_signature T_LCURLY function_body T_RCURLY
## LR(1) items:
sgrep_spatch_pattern -> T_FUNCTION T_DOTS call_signature T_LCURLY function_body T_RCURLY . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> T_FUNCTION T_DOTS call_signature T_LCURLY function_body T_RCURLY

State 1310:
## Known stack suffix:
## T_FUNCTION option(id)
## LR(1) items:
function_decl -> T_FUNCTION option(id) . call_signature T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
sgrep_spatch_pattern -> T_FUNCTION option(id) . call_signature EOF [ # ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 118
-- On generics shift to state 175
-- On call_signature shift to state 1311
## Reductions:
-- On T_LPAREN
--   reduce production option(generics) ->

State 1311:
## Known stack suffix:
## T_FUNCTION option(id) call_signature
## LR(1) items:
function_decl -> T_FUNCTION option(id) call_signature . T_LCURLY function_body T_RCURLY [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
sgrep_spatch_pattern -> T_FUNCTION option(id) call_signature . EOF [ # ]
## Transitions:
-- On T_LCURLY shift to state 779
-- On EOF shift to state 1312
## Reductions:

State 1312:
## Known stack suffix:
## T_FUNCTION option(id) call_signature EOF
## LR(1) items:
sgrep_spatch_pattern -> T_FUNCTION option(id) call_signature EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> T_FUNCTION option(id) call_signature EOF

State 1313:
## Known stack suffix:
## T_CLASS
## LR(1) items:
class_decl -> T_CLASS . option(binding_id) option(generics) class_heritage class_body [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
sgrep_spatch_pattern -> T_CLASS . option(binding_id) option(generics) class_heritage EOF [ # ]
## Transitions:
-- On T_TYPE shift to state 12
-- On T_STRING_TYPE shift to state 29
-- On T_SET shift to state 31
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_MODULE shift to state 41
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FROM shift to state 51
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_ASYNC shift to state 72
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On option(binding_id) shift to state 1314
-- On ident_semi_keyword shift to state 75
-- On id shift to state 124
-- On binding_id shift to state 620
## Reductions:
-- On T_LESS_THAN T_LCURLY T_IMPLEMENTS T_EXTENDS EOF
--   reduce production option(binding_id) ->

State 1314:
## Known stack suffix:
## T_CLASS option(binding_id)
## LR(1) items:
class_decl -> T_CLASS option(binding_id) . option(generics) class_heritage class_body [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
sgrep_spatch_pattern -> T_CLASS option(binding_id) . option(generics) class_heritage EOF [ # ]
## Transitions:
-- On T_LESS_THAN shift to state 111
-- On option(generics) shift to state 1315
-- On generics shift to state 175
## Reductions:
-- On T_LCURLY T_IMPLEMENTS T_EXTENDS EOF
--   reduce production option(generics) ->

State 1315:
## Known stack suffix:
## T_CLASS option(binding_id) option(generics)
## LR(1) items:
class_decl -> T_CLASS option(binding_id) option(generics) . class_heritage class_body [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
sgrep_spatch_pattern -> T_CLASS option(binding_id) option(generics) . class_heritage EOF [ # ]
## Transitions:
-- On T_EXTENDS shift to state 140
-- On option(extends_clause) shift to state 264
-- On extends_clause shift to state 269
-- On class_heritage shift to state 1316
## Reductions:
-- On T_LCURLY T_IMPLEMENTS EOF
--   reduce production option(extends_clause) ->

State 1316:
## Known stack suffix:
## T_CLASS option(binding_id) option(generics) class_heritage
## LR(1) items:
class_decl -> T_CLASS option(binding_id) option(generics) class_heritage . class_body [ T_YIELD T_XHP_SHORT_FRAGMENT T_XHP_OPEN_TAG T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TYPE T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_SUPER T_STRING_TYPE T_STRING T_SET T_SEMICOLON T_RETURN T_REGEX T_READONLY T_PUBLIC T_PROTECTED T_PRIVATE T_PLUS T_OF T_NUMBER_TYPE T_NULL T_NOT T_NEW T_MODULE T_MINUS T_LPAREN_ARROW T_LPAREN T_LET T_LCURLY T_LBRACKET T_INTERFACE T_INT T_INCR T_IMPORT T_IF T_ID T_GET T_FUNCTION T_FROM T_FOR T_FLOAT T_FALSE T_EXPORT T_ENUM T_DOTS T_DO T_DELETE T_DECR T_DECLARE T_CONTINUE T_CONSTRUCTOR T_CONST T_CLASS T_BREAK T_BOOLEAN_TYPE T_BIT_NOT T_BACKQUOTE T_AWAIT T_AT T_ASYNC T_AS T_ANY_TYPE TUnknown LDots EOF ]
sgrep_spatch_pattern -> T_CLASS option(binding_id) option(generics) class_heritage . EOF [ # ]
## Transitions:
-- On T_LCURLY shift to state 271
-- On EOF shift to state 1317
-- On class_body shift to state 619
## Reductions:

State 1317:
## Known stack suffix:
## T_CLASS option(binding_id) option(generics) class_heritage EOF
## LR(1) items:
sgrep_spatch_pattern -> T_CLASS option(binding_id) option(generics) class_heritage EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> T_CLASS option(binding_id) option(generics) class_heritage EOF

State 1318:
## Known stack suffix:
## string_literal
## LR(1) items:
primary_expr_no_braces -> string_literal . [ T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND EOF ]
sgrep_spatch_pattern -> string_literal . T_COLON assignment_expr option(T_COMMA) EOF [ # ]
## Transitions:
-- On T_COLON shift to state 1319
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NOT_EQUAL T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LBRACKET T_INSTANCEOF T_INCR T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EXPONENT T_EQUAL T_DIV_ASSIGN T_DIV T_DECR T_COMMA T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_AND_ASSIGN T_BIT_AND T_BACKQUOTE T_ASSIGN T_AND EOF
--   reduce production primary_expr_no_braces -> string_literal

State 1319:
## Known stack suffix:
## string_literal T_COLON
## LR(1) items:
sgrep_spatch_pattern -> string_literal T_COLON . assignment_expr option(T_COMMA) EOF [ # ]
## Transitions:
-- On T_YIELD shift to state 1
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_VOID shift to state 10
-- On T_TYPEOF shift to state 11
-- On T_TYPE shift to state 12
-- On T_TRUE shift to state 13
-- On T_THIS shift to state 14
-- On T_SUPER shift to state 15
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 83
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 85
-- On T_NEW shift to state 86
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 89
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LCURLY shift to state 95
-- On T_LBRACKET shift to state 103
-- On T_INT shift to state 99
-- On T_INCR shift to state 107
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 108
-- On T_FROM shift to state 51
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_DOTS shift to state 134
-- On T_DELETE shift to state 135
-- On T_DECR shift to state 136
-- On T_DECLARE shift to state 62
-- On T_CONSTRUCTOR shift to state 64
-- On T_CLASS shift to state 137
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 292
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 296
-- On T_ASYNC shift to state 304
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On template_literal shift to state 322
-- On string_literal shift to state 323
-- On regex_literal shift to state 324
-- On primary_with_stmt shift to state 325
-- On primary_expr_no_braces shift to state 326
-- On primary_expr(d1) shift to state 327
-- On pre_in_expr(d1) shift to state 328
-- On post_in_expr(d1) shift to state 348
-- On object_literal shift to state 339
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On new_expr(d1) shift to state 342
-- On member_expr(d1) shift to state 343
-- On left_hand_side_expr_(d1) shift to state 366
-- On ident_semi_keyword shift to state 75
-- On id shift to state 382
-- On generator_expr shift to state 355
-- On function_expr shift to state 356
-- On d1 shift to state 357
-- On conditional_expr(d1) shift to state 396
-- On class_expr shift to state 358
-- On call_expr(d1) shift to state 359
-- On boolean_literal shift to state 386
-- On async_function_expr shift to state 387
-- On assignment_expr shift to state 1320
-- On arrow_function shift to state 398
-- On array_literal shift to state 388
## Reductions:

State 1320:
## Known stack suffix:
## string_literal T_COLON assignment_expr
## LR(1) items:
sgrep_spatch_pattern -> string_literal T_COLON assignment_expr . option(T_COMMA) EOF [ # ]
## Transitions:
-- On T_COMMA shift to state 1092
-- On option(T_COMMA) shift to state 1321
## Reductions:
-- On EOF
--   reduce production option(T_COMMA) ->

State 1321:
## Known stack suffix:
## string_literal T_COLON assignment_expr option(T_COMMA)
## LR(1) items:
sgrep_spatch_pattern -> string_literal T_COLON assignment_expr option(T_COMMA) . EOF [ # ]
## Transitions:
-- On EOF shift to state 1322
## Reductions:

State 1322:
## Known stack suffix:
## string_literal T_COLON assignment_expr option(T_COMMA) EOF
## LR(1) items:
sgrep_spatch_pattern -> string_literal T_COLON assignment_expr option(T_COMMA) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> string_literal T_COLON assignment_expr option(T_COMMA) EOF

State 1323:
## Known stack suffix:
## sgrep_spatch_pattern
## LR(1) items:
sgrep_spatch_pattern' -> sgrep_spatch_pattern . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept sgrep_spatch_pattern

State 1324:
## Known stack suffix:
## module_item
## LR(1) items:
sgrep_spatch_pattern -> module_item . EOF [ # ]
sgrep_spatch_pattern -> module_item . nonempty_list(module_item) EOF [ # ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IMPORT shift to state 1104
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_EXPORT shift to state 1142
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On EOF shift to state 1325
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(module_item) shift to state 1326
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On module_item shift to state 1328
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 1171
-- On interface_decl shift to state 750
-- On import_decl shift to state 1172
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On export_decl shift to state 1173
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On T_ENUM
--   reduce production option(T_CONST) ->

State 1325:
## Known stack suffix:
## module_item EOF
## LR(1) items:
sgrep_spatch_pattern -> module_item EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> module_item EOF

State 1326:
## Known stack suffix:
## module_item nonempty_list(module_item)
## LR(1) items:
sgrep_spatch_pattern -> module_item nonempty_list(module_item) . EOF [ # ]
## Transitions:
-- On EOF shift to state 1327
## Reductions:

State 1327:
## Known stack suffix:
## module_item nonempty_list(module_item) EOF
## LR(1) items:
sgrep_spatch_pattern -> module_item nonempty_list(module_item) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> module_item nonempty_list(module_item) EOF

State 1328:
## Known stack suffix:
## module_item
## LR(1) items:
nonempty_list(module_item) -> module_item . [ EOF ]
nonempty_list(module_item) -> module_item . nonempty_list(module_item) [ EOF ]
## Transitions:
-- On T_YIELD shift to state 290
-- On T_XHP_SHORT_FRAGMENT shift to state 2
-- On T_XHP_OPEN_TAG shift to state 4
-- On T_WITH shift to state 302
-- On T_WHILE shift to state 419
-- On T_VOID shift to state 319
-- On T_VIRTUAL_SEMICOLON shift to state 211
-- On T_VAR shift to state 423
-- On T_TYPEOF shift to state 384
-- On T_TYPE shift to state 464
-- On T_TRY shift to state 437
-- On T_TRUE shift to state 13
-- On T_THROW shift to state 453
-- On T_THIS shift to state 14
-- On T_SWITCH shift to state 456
-- On T_SUPER shift to state 389
-- On T_STRING_TYPE shift to state 29
-- On T_STRING shift to state 81
-- On T_SET shift to state 31
-- On T_SEMICOLON shift to state 212
-- On T_RETURN shift to state 469
-- On T_REGEX shift to state 82
-- On T_READONLY shift to state 33
-- On T_PUBLIC shift to state 34
-- On T_PROTECTED shift to state 35
-- On T_PRIVATE shift to state 36
-- On T_PLUS shift to state 401
-- On T_OF shift to state 37
-- On T_NUMBER_TYPE shift to state 38
-- On T_NULL shift to state 84
-- On T_NOT shift to state 407
-- On T_NEW shift to state 409
-- On T_MODULE shift to state 41
-- On T_MINUS shift to state 416
-- On T_LPAREN_ARROW shift to state 91
-- On T_LPAREN shift to state 90
-- On T_LET shift to state 473
-- On T_LCURLY shift to state 418
-- On T_LBRACKET shift to state 103
-- On T_INTERFACE shift to state 476
-- On T_INT shift to state 99
-- On T_INCR shift to state 487
-- On T_IMPORT shift to state 1104
-- On T_IF shift to state 489
-- On T_ID shift to state 48
-- On T_GET shift to state 49
-- On T_FUNCTION shift to state 607
-- On T_FROM shift to state 51
-- On T_FOR shift to state 493
-- On T_FLOAT shift to state 101
-- On T_FALSE shift to state 133
-- On T_EXPORT shift to state 1142
-- On T_DOTS shift to state 583
-- On T_DO shift to state 584
-- On T_DELETE shift to state 585
-- On T_DECR shift to state 587
-- On T_DECLARE shift to state 62
-- On T_CONTINUE shift to state 589
-- On T_CONSTRUCTOR shift to state 64
-- On T_CONST shift to state 612
-- On T_CLASS shift to state 615
-- On T_BREAK shift to state 593
-- On T_BOOLEAN_TYPE shift to state 70
-- On T_BIT_NOT shift to state 596
-- On T_BACKQUOTE shift to state 293
-- On T_AWAIT shift to state 598
-- On T_AT shift to state 278
-- On T_ASYNC shift to state 621
-- On T_AS shift to state 73
-- On T_ANY_TYPE shift to state 74
-- On TUnknown shift to state 626
-- On LDots shift to state 320
-- On xhp_html shift to state 321
-- On with_stmt shift to state 628
-- On variable_stmt shift to state 629
-- On type_alias_decl shift to state 630
-- On try_stmt shift to state 631
-- On throw_stmt shift to state 632
-- On template_literal shift to state 322
-- On switch_stmt shift to state 633
-- On string_literal shift to state 323
-- On stmt shift to state 635
-- On sc shift to state 636
-- On return_stmt shift to state 637
-- On regex_literal shift to state 324
-- On primary_no_stmt shift to state 638
-- On primary_expr_no_braces shift to state 639
-- On primary_expr(primary_no_stmt) shift to state 640
-- On pre_in_expr(primary_no_stmt) shift to state 641
-- On post_in_expr(primary_no_stmt) shift to state 662
-- On option(T_CONST) shift to state 698
-- On numeric_literal shift to state 340
-- On null_literal shift to state 341
-- On nonempty_list(module_item) shift to state 1329
-- On nonempty_list(decorator) shift to state 739
-- On new_expr(primary_no_stmt) shift to state 704
-- On module_item shift to state 1328
-- On member_expr(primary_no_stmt) shift to state 705
-- On lexical_decl shift to state 745
-- On left_hand_side_expr_(primary_no_stmt) shift to state 714
-- On labelled_stmt shift to state 746
-- On iteration_stmt shift to state 747
-- On item shift to state 1171
-- On interface_decl shift to state 750
-- On import_decl shift to state 1172
-- On if_stmt shift to state 751
-- On ident_semi_keyword shift to state 75
-- On id shift to state 752
-- On generator_decl shift to state 765
-- On function_decl shift to state 766
-- On expr_stmt shift to state 755
-- On expr_no_stmt shift to state 756
-- On export_decl shift to state 1173
-- On enum_decl shift to state 767
-- On empty_stmt shift to state 760
-- On decorator shift to state 768
-- On decl shift to state 770
-- On continue_stmt shift to state 761
-- On conditional_expr(primary_no_stmt) shift to state 717
-- On class_decl shift to state 771
-- On call_expr(primary_no_stmt) shift to state 718
-- On break_stmt shift to state 762
-- On boolean_literal shift to state 386
-- On block shift to state 763
-- On async_decl shift to state 772
-- On assignment_expr_no_stmt shift to state 764
-- On arrow_function shift to state 728
-- On array_literal shift to state 388
## Reductions:
-- On EOF
--   reduce production nonempty_list(module_item) -> module_item
-- On T_ENUM
--   reduce production option(T_CONST) ->

State 1329:
## Known stack suffix:
## module_item nonempty_list(module_item)
## LR(1) items:
nonempty_list(module_item) -> module_item nonempty_list(module_item) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(module_item) -> module_item nonempty_list(module_item)

State 1330:
## Known stack suffix:
## finally
## LR(1) items:
sgrep_spatch_pattern -> finally . EOF [ # ]
## Transitions:
-- On EOF shift to state 1331
## Reductions:

State 1331:
## Known stack suffix:
## finally EOF
## LR(1) items:
sgrep_spatch_pattern -> finally EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> finally EOF

State 1332:
## Known stack suffix:
## catch
## LR(1) items:
sgrep_spatch_pattern -> catch . EOF [ # ]
## Transitions:
-- On EOF shift to state 1333
## Reductions:

State 1333:
## Known stack suffix:
## catch EOF
## LR(1) items:
sgrep_spatch_pattern -> catch EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> catch EOF

State 1334:
## Known stack suffix:
## assignment_expr_no_stmt
## LR(1) items:
expr_no_stmt -> assignment_expr_no_stmt . [ T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA ]
sgrep_spatch_pattern -> assignment_expr_no_stmt . EOF [ # ]
## Transitions:
-- On EOF shift to state 1335
## Reductions:
-- On T_VIRTUAL_SEMICOLON T_SEMICOLON T_COMMA
--   reduce production expr_no_stmt -> assignment_expr_no_stmt

State 1335:
## Known stack suffix:
## assignment_expr_no_stmt EOF
## LR(1) items:
sgrep_spatch_pattern -> assignment_expr_no_stmt EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production sgrep_spatch_pattern -> assignment_expr_no_stmt EOF

