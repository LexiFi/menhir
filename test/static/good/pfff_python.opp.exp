File "pfff_python.mly", line 95, characters 38-46:
Warning: the token TComment is unused.
File "pfff_python.mly", line 95, characters 24-37:
Warning: the token TCommentSpace is unused.
File "pfff_python.mly", line 88, characters 24-32:
Warning: the token TUnknown is unused.
%{
(* Yoann Padioleau
 *
 * Copyright (C) 2010 Facebook
 * Copyright (C) 2011-2015 Tomohiro Matsuyama
 * Copyright (C) 2019-2020 r2c
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation, with the
 * special exception on linking described in file license.txt.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the file
 * license.txt for more details.
 *)

(* This file contains a grammar for Python 3
 * (which is mostly a superset of Python 2).
 *
 * original src:
 *  https://github.com/m2ym/ocaml-pythonlib/blob/master/src/python2_parser.mly
 * reference:
 *  - https://docs.python.org/3/reference/grammar.html
 *  - http://docs.python.org/release/2.5.2/ref/grammar.txt
 * old src:
 *  - http://inst.eecs.berkeley.edu/~cs164/sp10/python-grammar.html
 *)
open Common
open AST_python
module PI = Parse_info

(* intermediate helper type *)
type single_or_tuple =
  | Single of expr
  | Tup of expr list

let cons e = function
  | Single e' -> Tup (e::[e'])
  | Tup l -> Tup (e::l)

let tuple_expr = function
  | Single e -> e
  | Tup l -> Tuple (CompList (PI.fake_bracket l), Load)

let to_list = function
  | Single e -> [e]
  | Tup l -> l

(* TODO: TypedExpr? ExprStar? then can appear as lvalue
 * CompForIf though is not an lvalue.
*)
let rec set_expr_ctx ctx = function
  | Name (id, _, x) ->
      Name (id, ctx, x)
  | Attribute (value, t, attr, _) ->
      Attribute (value, t, attr, ctx)
  | Subscript (value, slice, _) ->
      Subscript (value, slice, ctx)

  | List (CompList (t1, elts, t2), _) ->
      List (CompList ((t1, List.map (set_expr_ctx ctx) elts, t2)), ctx)
  | Tuple (CompList (t1, elts, t2), _) ->
      Tuple (CompList ((t1, List.map (set_expr_ctx ctx) elts, t2)), ctx)

  | e -> e

let expr_store = set_expr_ctx Store
and expr_del = set_expr_ctx Del

let tuple_expr_store l =
  let e = tuple_expr l in
    match AST_python.context_of_expr e with
    | Some Param -> e
    | _ -> expr_store e

let mk_str ii =
  let s = Parse_info.str_of_info ii in
  Str (s, ii)

%}
%start main
%start sgrep_spatch_pattern
%token <AST_python.tok> ADD
%token <AST_python.tok> ADDEQ
%token <AST_python.tok> AND
%token <AST_python.tok> ANDEQ
%token <AST_python.tok> AS
%token <AST_python.tok> ASSERT
%token <AST_python.tok> ASYNC
%token <AST_python.tok> AT
%token <AST_python.tok> AWAIT
%token <AST_python.tok> BACKQUOTE
%token <AST_python.tok> BANG
%token <AST_python.tok> BITAND
%token <AST_python.tok> BITNOT
%token <AST_python.tok> BITOR
%token <AST_python.tok> BITXOR
%token <AST_python.tok> BREAK
%token <AST_python.tok> CLASS
%token <AST_python.tok> COLON
%token <AST_python.tok> COLONEQ
%token <AST_python.tok> COMMA
%token <AST_python.tok> CONTINUE
%token <AST_python.tok> DEDENT
%token <AST_python.tok> DEF
%token <AST_python.tok> DEL
%token <AST_python.tok> DIV
%token <AST_python.tok> DIVEQ
%token <AST_python.tok> DOT
%token <AST_python.tok> ELIF
%token <AST_python.tok> ELLIPSES
%token <AST_python.tok> ELSE
%token <AST_python.tok> EOF
%token <AST_python.tok> EQ
%token <AST_python.tok> EQUAL
%token <AST_python.tok> EXCEPT
%token <AST_python.tok> EXEC
%token <AST_python.tok> FALSE
%token <AST_python.tok> FDIV
%token <AST_python.tok> FDIVEQ
%token <AST_python.tok> FINALLY
%token <float option  * AST_python.tok> FLOAT
%token <AST_python.tok> FOR
%token <AST_python.tok> FROM
%token <AST_python.tok> FSTRING_END
%token <AST_python.tok> FSTRING_LBRACE
%token <AST_python.tok> FSTRING_START
%token <string * AST_python.tok> FSTRING_STRING
%token <AST_python.tok> GEQ
%token <AST_python.tok> GLOBAL
%token <AST_python.tok> GT
%token <AST_python.tok> IF
%token <string * AST_python.tok> IMAG
%token <AST_python.tok> IMPORT
%token <AST_python.tok> IN
%token <AST_python.tok> INDENT
%token <int option    * AST_python.tok> INT
%token <AST_python.tok> IS
%token <AST_python.tok> LAMBDA
%token <AST_python.tok> LBRACE
%token <AST_python.tok> LBRACK
%token <AST_python.tok> LDots
%token <AST_python.tok> LEQ
%token <int option    * AST_python.tok> LONGINT
%token <AST_python.tok> LPAREN
%token <AST_python.tok> LSHEQ
%token <AST_python.tok> LSHIFT
%token <AST_python.tok> LT
%token <AST_python.tok> MOD
%token <AST_python.tok> MODEQ
%token <AST_python.tok> MULT
%token <AST_python.tok> MULTEQ
%token <string * AST_python.tok> NAME
%token <AST_python.tok> NEWLINE
%token <AST_python.tok> NONE
%token <AST_python.tok> NONLOCAL
%token <AST_python.tok> NOT
%token <AST_python.tok> NOTEQ
%token <AST_python.tok> OR
%token <AST_python.tok> OREQ
%token <AST_python.tok> PASS
%token <AST_python.tok> POW
%token <AST_python.tok> POWEQ
%token <AST_python.tok> PRINT
%token <AST_python.tok> RAISE
%token <AST_python.tok> RBRACE
%token <AST_python.tok> RBRACK
%token <AST_python.tok> RDots
%token <AST_python.tok> RETURN
%token <AST_python.tok> RPAREN
%token <AST_python.tok> RSHEQ
%token <AST_python.tok> RSHIFT
%token <AST_python.tok> SEMICOL
%token <string * string * AST_python.tok> STR
%token <AST_python.tok> SUB
%token <AST_python.tok> SUBEQ
%token <AST_python.tok> TComment
%token <AST_python.tok> TCommentSpace
%token <AST_python.tok> TRUE
%token <AST_python.tok> TRY
%token <AST_python.tok> TUnknown
%token <AST_python.tok> WHILE
%token <AST_python.tok> WITH
%token <AST_python.tok> XOREQ
%token <AST_python.tok> YIELD
%type <AST_python.program> main
%type <AST_python.any> sgrep_spatch_pattern
%%

option_NEWLINE_:
  
    {    ( None )} [@name none_NEWLINE]
| x = NEWLINE
    {    ( Some x )} [@name some_NEWLINE]

option_return_type_:
  
    {    ( None )} [@name none_return_type]
| x = return_type
    {    ( Some x )} [@name some_return_type]

option_test_:
  
    {    ( None )} [@name none_test]
| x = test
    {    ( Some x )} [@name some_test]

list_interpolated_:
  
    {    ( [] )} [@name nil_interpolated]
| x = interpolated xs = list_interpolated_
    {    ( x :: xs )} [@name cons_interpolated]

list_nl_or_stmt_:
  
    {    ( [] )} [@name nil_nl_or_stmt]
| x = nl_or_stmt xs = list_nl_or_stmt_
    {    ( x :: xs )} [@name cons_nl_or_stmt]

list_stmt_:
  
    {    ( [] )} [@name nil_stmt]
| x = stmt xs = list_stmt_
    {    ( x :: xs )} [@name cons_stmt]

nonempty_list_decorator_:
  x = decorator
    {    ( [ x ] )} [@name one_decorator]
| x = decorator xs = nonempty_list_decorator_
    {    ( x :: xs )} [@name more_decorator]

nonempty_list_excepthandler_:
  x = excepthandler
    {    ( [ x ] )} [@name one_excepthandler]
| x = excepthandler xs = nonempty_list_excepthandler_
    {    ( x :: xs )} [@name more_excepthandler]

nonempty_list_format_token_:
  x = format_token
    {    ( [ x ] )} [@name one_format_token]
| x = format_token xs = nonempty_list_format_token_
    {    ( x :: xs )} [@name more_format_token]

nonempty_list_stmt_:
  x = stmt
    {    ( [ x ] )} [@name one_stmt]
| x = stmt xs = nonempty_list_stmt_
    {    ( x :: xs )} [@name more_stmt]

nonempty_list_string_:
  x = string
    {    ( [ x ] )} [@name one_string]
| x = string xs = nonempty_list_string_
    {    ( x :: xs )} [@name more_string]

list_sep_NAME_COMMA_:
  _1 = NAME
    {                          ( [_1] )}
| _1 = list_sep_NAME_COMMA_ _2 = COMMA _3 = NAME
    {                          ( _1 @ [_3] )}

list_sep_and_test_OR_:
  _1 = and_test
    {                          ( [_1] )}
| _1 = list_sep_and_test_OR_ _2 = OR _3 = and_test
    {                          ( _1 @ [_3] )}

list_sep_dotted_as_name_COMMA_:
  _1 = dotted_as_name
    {                          ( [_1] )}
| _1 = list_sep_dotted_as_name_COMMA_ _2 = COMMA _3 = dotted_as_name
    {                          ( _1 @ [_3] )}

list_sep_not_test_AND_:
  _1 = not_test
    {                          ( [_1] )}
| _1 = list_sep_not_test_AND_ _2 = AND _3 = not_test
    {                          ( _1 @ [_3] )}

list_sep_term_argument_COMMA_:
  _1 = argument
    {                           ( [_1] )}
| _1 = argument _2 = COMMA
    {                           ( [_1] )}
| _1 = argument _2 = COMMA _3 = list_sep_term_argument_COMMA_
    {                               ( _1::_3 )}

list_sep_term_dictorset_elem_COMMA_:
  _1 = dictorset_elem
    {                           ( [_1] )}
| _1 = dictorset_elem _2 = COMMA
    {                           ( [_1] )}
| _1 = dictorset_elem _2 = COMMA _3 = list_sep_term_dictorset_elem_COMMA_
    {                               ( _1::_3 )}

list_sep_term_import_as_name_COMMA_:
  _1 = import_as_name
    {                           ( [_1] )}
| _1 = import_as_name _2 = COMMA
    {                           ( [_1] )}
| _1 = import_as_name _2 = COMMA _3 = list_sep_term_import_as_name_COMMA_
    {                               ( _1::_3 )}

list_sep_term_subscript_COMMA_:
  _1 = subscript
    {                           ( [_1] )}
| _1 = subscript _2 = COMMA
    {                           ( [_1] )}
| _1 = subscript _2 = COMMA _3 = list_sep_term_subscript_COMMA_
    {                               ( _1::_3 )}

list_comma_argument_:
  _1 = list_sep_term_argument_COMMA_
    {                                     ( _1 )}

list_comma_dictorset_elem_:
  _1 = list_sep_term_dictorset_elem_COMMA_
    {                                     ( _1 )}

list_comma_import_as_name_:
  _1 = list_sep_term_import_as_name_COMMA_
    {                                     ( _1 )}

list_comma_subscript_:
  _1 = list_sep_term_subscript_COMMA_
    {                                     ( _1 )}

tuple_expr_or_star_expr_:
  _1 = expr_or_star_expr
    {                   ( Single _1 )}
| _1 = expr_or_star_expr _2 = COMMA
    {                   ( Tup [_1] )}
| _1 = expr_or_star_expr _2 = COMMA _3 = tuple_expr_or_star_expr_
    {                   ( cons _1 _3 )}

tuple_namedexpr_or_star_expr_:
  _1 = namedexpr_or_star_expr
    {                   ( Single _1 )}
| _1 = namedexpr_or_star_expr _2 = COMMA
    {                   ( Tup [_1] )}
| _1 = namedexpr_or_star_expr _2 = COMMA _3 = tuple_namedexpr_or_star_expr_
    {                   ( cons _1 _3 )}

tuple_test_:
  _1 = test
    {                   ( Single _1 )}
| _1 = test _2 = COMMA
    {                   ( Tup [_1] )}
| _1 = test _2 = COMMA _3 = tuple_test_
    {                   ( cons _1 _3 )}

tuple_test_or_star_expr_:
  _1 = test_or_star_expr
    {                   ( Single _1 )}
| _1 = test_or_star_expr _2 = COMMA
    {                   ( Tup [_1] )}
| _1 = test_or_star_expr _2 = COMMA _3 = tuple_test_or_star_expr_
    {                   ( cons _1 _3 )}

main:
  _1 = file_input _2 = EOF
    {                  ( _1 )}
| _1 = file_input _2 = INDENT _3 = NEWLINE _4 = DEDENT _5 = NEWLINE _6 = EOF
    {                                                ( _1 )}

file_input:
  _1 = list_nl_or_stmt_
    {                        ( List.flatten _1 )}

nl_or_stmt:
  _1 = NEWLINE
    {           ( [] )}
| _1 = stmt
    {           ( _1 )}

sgrep_spatch_pattern:
  _1 = stmt _2 = option_NEWLINE_ _3 = EOF
    {                       (
   match _1 with
   | [ExprStmt x] -> Expr x
   | [x] -> Stmt x
   | xs -> Stmts xs
 )}
| _1 = stmt _2 = nonempty_list_stmt_ _3 = option_NEWLINE_ _4 = EOF
    {                           ( Stmts (_1 @ (List.flatten _2)) )}

import_stmt:
  _1 = import_name
    {                ( _1 )}
| _1 = import_from
    {                ( _1 )}

import_name:
  _1 = IMPORT _2 = list_sep_dotted_as_name_COMMA_
    {  ( _2 |> List.map (fun (v1, v2) -> let dots = None in
         ImportAs (_1, (v1, dots), v2))   )}

dotted_as_name:
  _1 = dotted_name
    {                        ( _1, None )}
| _1 = dotted_name _2 = AS _3 = NAME
    {                        ( _1, Some _3 )}

dotted_name:
  _1 = NAME
    {         ( [_1] )}
| _1 = NAME _2 = DOT _3 = dotted_name
    {                         ( _1::_3 )}

import_from:
  _1 = FROM _2 = name_and_level _3 = IMPORT _4 = MULT
    {      ( [ImportAll (_1, _2, _4)] )}
| _1 = FROM _2 = name_and_level _3 = IMPORT _4 = LPAREN _5 = list_comma_import_as_name_ _6 = RPAREN
    {      ( [ImportFrom (_1, _2, _5)] )}
| _1 = FROM _2 = name_and_level _3 = IMPORT _4 = list_comma_import_as_name_
    {      ( [ImportFrom (_1, _2, _4)] )}

name_and_level:
  _1 = dot_level _2 = dotted_name
    {                          (
    match _1 with
    | [] -> _2, None
    | dl -> _2, Some dl
  )}
| _1 = DOT _2 = dot_level
    {                          ( [("",_1(*TODO*))], Some (_1 :: _2) )}
| _1 = ELLIPSES _2 = dot_level
    {                            ( [("",_1(*TODO*))], Some (_1:: _2) )}

dot_level:
  
    {               ( [] )}
| _1 = DOT _2 = dot_level
    {                   ( _1::_2 )}
| _1 = ELLIPSES _2 = dot_level
    {                    ( _1::_2 )}

import_as_name:
  _1 = NAME
    {                 ( _1, None )}
| _1 = NAME _2 = AS _3 = NAME
    {                 ( _1, Some _3 )}

namedexpr_test:
  _1 = test
    {         ( _1 )}
| _1 = test _2 = COLONEQ _3 = test
    {                      ( NamedExpr (_1, _2, _3) )}

expr_stmt:
  _1 = tuple_test_or_star_expr_
    {      ( ExprStmt (tuple_expr _1) )}
| _1 = tuple_test_or_star_expr_ _2 = COLON _3 = test
    {      ( ExprStmt (TypedExpr (tuple_expr _1, _3)) )}
| _1 = tuple_test_or_star_expr_ _2 = COLON _3 = test _4 = EQ _5 = test
    {      ( Assign ([TypedExpr (tuple_expr_store _1, _3)], _4, _5) )}
| _1 = tuple_test_or_star_expr_ _2 = augassign _3 = yield_expr
    {      ( AugAssign (tuple_expr_store _1, _2, _3) )}
| _1 = tuple_test_or_star_expr_ _2 = augassign _3 = tuple_test_
    {      ( AugAssign (tuple_expr_store _1, _2, tuple_expr _3) )}
| _1 = tuple_test_or_star_expr_ _2 = EQ _3 = expr_stmt_rhs_list
    {      ( Assign ((tuple_expr_store _1)::(fst _3), _2, snd _3) )}

namedexpr_or_star_expr:
  _1 = namedexpr_test
    {                   ( _1 )}
| _1 = star_expr
    {                   ( _1 )}

test_or_star_expr:
  _1 = test
    {              ( _1 )}
| _1 = star_expr
    {              ( _1 )}

expr_or_star_expr:
  _1 = expr
    {              ( _1 )}
| _1 = star_expr
    {              ( _1 )}

exprlist:
  _1 = tuple_expr_or_star_expr_
    {                                   ( _1 )}

expr_stmt_rhs_list:
  _1 = expr_stmt_rhs
    {                                          ( [], _1 )}
| _1 = expr_stmt_rhs _2 = EQ _3 = expr_stmt_rhs_list
    {                                          ( (expr_store _1)::(fst _3), snd _3 )}

expr_stmt_rhs:
  _1 = yield_expr
    {                             ( _1 )}
| _1 = tuple_test_or_star_expr_
    {                             ( tuple_expr _1 )}

augassign:
  _1 = ADDEQ
    {            ( Add, _1 )}
| _1 = SUBEQ
    {            ( Sub, _1 )}
| _1 = MULTEQ
    {            ( Mult, _1 )}
| _1 = DIVEQ
    {            ( Div, _1 )}
| _1 = POWEQ
    {            ( Pow, _1 )}
| _1 = MODEQ
    {            ( Mod, _1 )}
| _1 = LSHEQ
    {            ( LShift, _1 )}
| _1 = RSHEQ
    {            ( RShift, _1 )}
| _1 = OREQ
    {            ( BitOr, _1 )}
| _1 = XOREQ
    {            ( BitXor, _1 )}
| _1 = ANDEQ
    {            ( BitAnd, _1 )}
| _1 = FDIVEQ
    {            ( FloorDiv, _1 )}

funcdef:
  _1 = DEF _2 = NAME _3 = parameters _4 = option_return_type_ _5 = COLON _6 = suite
    {    ( FunctionDef (_1, _2, _3, _4, _6, []) )}

async_funcdef:
  _1 = ASYNC _2 = DEF _3 = NAME _4 = parameters _5 = option_return_type_ _6 = COLON _7 = suite
    {    ( FunctionDef (_2, _3, _4, _5, _7, [] (* TODO $1 *)) )}

return_type:
  _1 = SUB _2 = GT _3 = test
    {                    ( _3 )}

parameters:
  _1 = LPAREN _2 = typedargslist _3 = RPAREN
    {                                  ( _2 )}

typedargslist:
  
    {                                    ( [] )}
| _1 = typed_parameter
    {                                        ( [_1] )}
| _1 = typed_parameter _2 = COMMA _3 = typedargslist
    {                                      ( _1::_3 )}

typed_parameter:
  _1 = tfpdef_or_fpdef
    {                    ( ParamPattern (fst _1, snd _1) )}
| _1 = tfpdef _2 = EQ _3 = test
    {                    ( ParamDefault (_1, _3) )}
| _1 = MULT _2 = tfpdef
    {                    ( ParamStar (_1, _2) )}
| _1 = MULT
    {                    ( ParamSingleStar _1 )}
| _1 = DIV
    {                    ( ParamSlash _1 )}
| _1 = POW _2 = tfpdef
    {                    ( ParamPow (_1, _2) )}
| _1 = ELLIPSES
    {                    ( Flag_parsing.sgrep_guard (ParamEllipsis _1) )}

tfpdef:
  _1 = NAME
    {                    ( _1, None )}
| _1 = NAME _2 = COLON _3 = test
    {                    ( _1, Some _3 )}

tfpdef_or_fpdef:
  _1 = tfpdef
    {                    ( PatternName (fst _1), snd _1 )}
| _1 = LPAREN _2 = fplist _3 = RPAREN
    {                    ( PatternTuple _2, None )}

varargslist:
  
    {                            ( [] )}
| _1 = parameter
    {                                ( [_1] )}
| _1 = parameter _2 = COMMA _3 = varargslist
    {                              ( _1::_3 )}

parameter:
  _1 = fpdef
    {                    ( ParamPattern (_1, None) )}
| _1 = NAME _2 = EQ _3 = test
    {                    ( ParamDefault ((_1, None), _3) )}
| _1 = MULT _2 = NAME
    {                    ( ParamStar (_1, (_2, None)) )}
| _1 = DIV
    {                    ( ParamSlash _1 )}
| _1 = POW _2 = NAME
    {                    ( ParamPow (_1, (_2, None)) )}

fpdef:
  _1 = NAME
    {                   ( PatternName _1 )}
| _1 = LPAREN _2 = fplist _3 = RPAREN
    {                   ( PatternTuple _2 )}

fplist:
  _1 = fpdef
    {                     ( [_1] )}
| _1 = fpdef _2 = COMMA _3 = fplist
    {                     ( _1::_3 )}

classdef:
  _1 = CLASS _2 = NAME _3 = arglist_paren_opt _4 = COLON _5 = suite
    {  ( ClassDef (_1, _2, _3, _5, []) )}

arglist_paren_opt:
  
    {               ( [] )}
| _1 = LPAREN _2 = RPAREN
    {               ( [] )}
| _1 = LPAREN _2 = list_comma_argument_ _3 = RPAREN
    {                                ( _2 )}

decorator:
  _1 = AT _2 = decorator_name _3 = arglist_paren2_opt _4 = NEWLINE
    {    ( _1, _2, _3 )}

decorator_name:
  _1 = NAME
    {                            ( [_1] )}
| _1 = decorator_name _2 = DOT _3 = NAME
    {                            ( _1 @ [_3] )}

arglist_paren2_opt:
  
    {               ( None )}
| _1 = LPAREN _2 = RPAREN
    {               ( Some (_1, [], _2) )}
| _1 = LPAREN _2 = list_comma_argument_ _3 = RPAREN
    {                                ( Some (_1, _2, _3) )}

stmt:
  _1 = simple_stmt
    {                ( _1 )}
| _1 = compound_stmt
    {                  ( [_1] )}

simple_stmt:
  _1 = small_stmt _2 = NEWLINE
    {                       ( _1 )}
| _1 = small_stmt _2 = SEMICOL _3 = NEWLINE
    {                           ( _1 )}
| _1 = small_stmt _2 = SEMICOL _3 = simple_stmt
    {                               ( _1 @ _3 )}

small_stmt:
  _1 = expr_stmt
    {                ( [_1] )}
| _1 = del_stmt
    {                ( [_1] )}
| _1 = pass_stmt
    {                ( [_1] )}
| _1 = flow_stmt
    {                ( [_1] )}
| _1 = import_stmt
    {                ( _1 )}
| _1 = global_stmt
    {                ( [_1] )}
| _1 = nonlocal_stmt
    {                  ( [_1] )}
| _1 = assert_stmt
    {                ( [_1] )}
| _1 = print_stmt
    {               ( [_1] )}
| _1 = exec_stmt
    {              ( [_1] )}

print_stmt:
  _1 = PRINT
    {                              ( Print (_1, None, [], true) )}
| _1 = PRINT _2 = test _3 = print_testlist
    {                              ( Print (_1, None, _2::(fst _3), snd _3) )}
| _1 = PRINT _2 = RSHIFT _3 = test
    {                      ( Print (_1, Some _3, [], true) )}
| _1 = PRINT _2 = RSHIFT _3 = test _4 = COMMA _5 = test _6 = print_testlist
    {      ( Print (_1, Some _3, _5::(fst _6), snd _6) )}

print_testlist:
  
    {                 ( [], true )}
| _1 = COMMA
    {                 ( [], false )}
| _1 = COMMA _2 = test _3 = print_testlist
    {                            ( _2::(fst _3), snd _3 )}

exec_stmt:
  _1 = EXEC _2 = expr
    {              ( Exec (_1, _2, None, None) )}
| _1 = EXEC _2 = expr _3 = IN _4 = test
    {                      ( Exec (_1, _2, Some _4, None) )}
| _1 = EXEC _2 = expr _3 = IN _4 = test _5 = COMMA _6 = test
    {                               ( Exec (_1, _2, Some _4, Some _6) )}

del_stmt:
  _1 = DEL _2 = exprlist
    {                       ( Delete (_1, List.map expr_del (to_list _2)) )}

pass_stmt:
  _1 = PASS
    {                ( Pass _1 )}

flow_stmt:
  _1 = break_stmt
    {                  ( _1 )}
| _1 = continue_stmt
    {                  ( _1 )}
| _1 = return_stmt
    {                  ( _1 )}
| _1 = raise_stmt
    {                  ( _1 )}
| _1 = yield_stmt
    {                  ( _1 )}

break_stmt:
  _1 = BREAK
    {                        ( Break _1  )}

continue_stmt:
  _1 = CONTINUE
    {                        ( Continue _1 )}

return_stmt:
  _1 = RETURN
    {                    ( Return (_1, None) )}
| _1 = RETURN _2 = tuple_test_
    {                       ( Return (_1, Some (tuple_expr _2)) )}

yield_stmt:
  _1 = yield_expr
    {                       ( ExprStmt (_1) )}

raise_stmt:
  _1 = RAISE
    {                                    ( Raise (_1, None) )}
| _1 = RAISE _2 = test
    {                                    ( Raise (_1, Some (_2, None)) )}
| _1 = RAISE _2 = test _3 = FROM _4 = test
    {                                    ( Raise (_1, Some (_2, Some _4)) )}
| _1 = RAISE _2 = test _3 = COMMA _4 = test
    {                                    ( RaisePython2 (_1, _2, Some _4, None) )}
| _1 = RAISE _2 = test _3 = COMMA _4 = test _5 = COMMA _6 = test
    {                                    ( RaisePython2 (_1, _2, Some _4, Some _6) )}

global_stmt:
  _1 = GLOBAL _2 = list_sep_NAME_COMMA_
    {                                        ( Global (_1, _2) )}

nonlocal_stmt:
  _1 = NONLOCAL _2 = list_sep_NAME_COMMA_
    {                                            ( NonLocal (_1, _2) )}

assert_stmt:
  _1 = ASSERT _2 = test
    {                         ( Assert (_1, _2, None) )}
| _1 = ASSERT _2 = test _3 = COMMA _4 = test
    {                         ( Assert (_1, _2, Some _4) )}

compound_stmt:
  _1 = if_stmt
    {                ( _1 )}
| _1 = while_stmt
    {                ( _1 )}
| _1 = for_stmt
    {                ( _1 )}
| _1 = try_stmt
    {                ( _1 )}
| _1 = with_stmt
    {                ( _1 )}
| _1 = funcdef
    {                ( _1 )}
| _1 = classdef
    {                ( _1 )}
| _1 = decorated
    {                ( _1 )}
| _1 = async_stmt
    {                ( _1 )}

decorated:
  _1 = nonempty_list_decorator_ _2 = classdef
    {                        (
     match _2 with
     | ClassDef (t, a, b, c, d) -> ClassDef (t, a, b, c, _1 @ d)
     | _ -> raise Impossible
   )}
| _1 = nonempty_list_decorator_ _2 = funcdef
    {                       (
     match _2 with
     | FunctionDef (t, a, b, c, d, e) -> FunctionDef (t, a, b, c, d, _1 @ e)
     | _ -> raise Impossible
   )}
| _1 = nonempty_list_decorator_ _2 = async_funcdef
    {                             (
     match _2 with
     | FunctionDef (t, a, b, c, d, e) -> FunctionDef (t, a, b, c, d, _1 @ e)
     | _ -> raise Impossible
  )}

suite:
  _1 = simple_stmt
    {                ( _1 )}
| _1 = NEWLINE _2 = INDENT _3 = list_stmt_ _4 = DEDENT
    {                                ( List.flatten _3 )}

if_stmt:
  _1 = IF _2 = namedexpr_test _3 = COLON _4 = suite _5 = elif_stmt_list
    {                                                    ( If (_1, _2, _4, _5) )}

elif_stmt_list:
  
    {                                                 ( None )}
| _1 = ELIF _2 = namedexpr_test _3 = COLON _4 = suite _5 = elif_stmt_list
    {                                                 ( Some [If (_1, _2, _4, _5)] )}
| _1 = ELSE _2 = COLON _3 = suite
    {                                                 ( Some (_3) )}

while_stmt:
  _1 = WHILE _2 = namedexpr_test _3 = COLON _4 = suite
    {                                                  ( While (_1, _2, _4, []) )}
| _1 = WHILE _2 = namedexpr_test _3 = COLON _4 = suite _5 = ELSE _6 = COLON _7 = suite
    {                                                  ( While (_1, _2, _4, _7) )}

for_stmt:
  _1 = FOR _2 = exprlist _3 = IN _4 = tuple_test_ _5 = COLON _6 = suite
    {      ( For (_1, tuple_expr_store _2, _3, tuple_expr _4, _6, []) )}
| _1 = FOR _2 = exprlist _3 = IN _4 = tuple_test_ _5 = COLON _6 = suite _7 = ELSE _8 = COLON _9 = suite
    {      ( For (_1, tuple_expr_store _2, _3, tuple_expr _4, _6, _9) )}

try_stmt:
  _1 = TRY _2 = COLON _3 = suite _4 = nonempty_list_excepthandler_
    {      ( TryExcept (_1, _3, _4, []) )}
| _1 = TRY _2 = COLON _3 = suite _4 = nonempty_list_excepthandler_ _5 = ELSE _6 = COLON _7 = suite
    {      ( TryExcept (_1, _3, _4, _7) )}
| _1 = TRY _2 = COLON _3 = suite _4 = nonempty_list_excepthandler_ _5 = ELSE _6 = COLON _7 = suite _8 = FINALLY _9 = COLON _10 = suite
    {      ( TryFinally (_1, [TryExcept (_1, _3, _4, _7)], _8, _10) )}
| _1 = TRY _2 = COLON _3 = suite _4 = nonempty_list_excepthandler_ _5 = FINALLY _6 = COLON _7 = suite
    {      ( TryFinally (_1, [TryExcept (_1, _3, _4, [])], _5, _7) )}
| _1 = TRY _2 = COLON _3 = suite _4 = FINALLY _5 = COLON _6 = suite
    {      ( TryFinally (_1, _3, _4, _6) )}

excepthandler:
  _1 = EXCEPT _2 = COLON _3 = suite
    {                                  ( ExceptHandler (_1, None, None, _3) )}
| _1 = EXCEPT _2 = test _3 = COLON _4 = suite
    {                                  ( ExceptHandler (_1, Some _2, None, _4) )}
| _1 = EXCEPT _2 = test _3 = AS _4 = NAME _5 = COLON _6 = suite
    {                                  ( ExceptHandler (_1, Some _2, Some _4, _6))}
| _1 = EXCEPT _2 = test _3 = COMMA _4 = NAME _5 = COLON _6 = suite
    {                                   ( ExceptHandler (_1, Some _2, Some _4, _6) )}

with_stmt:
  _1 = WITH _2 = with_inner
    {                           ( _2 _1 )}

with_inner:
  _1 = test _2 = COLON _3 = suite
    {                                ( fun t -> With (t, _1, None, _3) )}
| _1 = test _2 = AS _3 = expr _4 = COLON _5 = suite
    {                                ( fun t -> With (t, _1, Some _3, _5) )}
| _1 = test _2 = COMMA _3 = with_inner
    {                                ( fun t -> With (t, _1, None, [_3 t]) )}
| _1 = test _2 = AS _3 = expr _4 = COMMA _5 = with_inner
    {                                ( fun t -> With (t, _1, Some _3, [_5 t]) )}

async_stmt:
  _1 = ASYNC _2 = funcdef
    {                    ( Async (_1, _2) )}
| _1 = ASYNC _2 = with_stmt
    {                    ( Async (_1, _2) )}
| _1 = ASYNC _2 = for_stmt
    {                    ( Async (_1, _2) )}

expr:
  _1 = xor_expr
    {                        ( _1 )}
| _1 = expr _2 = BITOR _3 = xor_expr
    {                        ( BinOp (_1, (BitOr,_2), _3) )}

xor_expr:
  _1 = and_expr
    {                             ( _1 )}
| _1 = xor_expr _2 = BITXOR _3 = and_expr
    {                             ( BinOp (_1, (BitXor,_2), _3) )}

and_expr:
  _1 = shift_expr
    {                               ( _1 )}
| _1 = shift_expr _2 = BITAND _3 = and_expr
    {                               ( BinOp (_1, (BitAnd,_2), _3) )}

shift_expr:
  _1 = arith_expr
    {                                 ( _1 )}
| _1 = shift_expr _2 = LSHIFT _3 = arith_expr
    {                                 ( BinOp (_1, (LShift,_2), _3) )}
| _1 = shift_expr _2 = RSHIFT _3 = arith_expr
    {                                 ( BinOp (_1, (RShift,_2), _3) )}

arith_expr:
  _1 = term
    {                        ( _1 )}
| _1 = arith_expr _2 = ADD _3 = term
    {                        ( BinOp (_1, (Add,_2), _3) )}
| _1 = arith_expr _2 = SUB _3 = term
    {                        ( BinOp (_1, (Sub,_2), _3) )}

term:
  _1 = factor
    {                        ( _1 )}
| _1 = factor _2 = term_op _3 = term
    {                        ( BinOp (_1, _2, _3) )}

term_op:
  _1 = MULT
    {            ( Mult, _1 )}
| _1 = DIV
    {            ( Div, _1 )}
| _1 = MOD
    {            ( Mod, _1 )}
| _1 = FDIV
    {            ( FloorDiv, _1 )}
| _1 = AT
    {            ( MatMult, _1 )}

factor:
  _1 = ADD _2 = factor
    {                  ( UnaryOp ((UAdd,_1), _2) )}
| _1 = SUB _2 = factor
    {                  ( UnaryOp ((USub,_1), _2) )}
| _1 = BITNOT _2 = factor
    {                  ( UnaryOp ((Invert,_1), _2) )}
| _1 = power
    {                  ( _1 )}

power:
  _1 = atom_expr
    {                         ( _1 )}
| _1 = atom_expr _2 = POW _3 = factor
    {                          ( BinOp (_1, (Pow,_2), _3) )}

atom_expr:
  _1 = atom_and_trailers
    {                             ( _1 )}
| _1 = AWAIT _2 = atom_and_trailers
    {                             ( Await (_1, _2) )}

atom_and_trailers:
  _1 = atom
    {         ( _1 )}
| _1 = atom_and_trailers _2 = LPAREN _3 = RPAREN
    {                                       ( Call (_1, (_2,[],_3)) )}
| _1 = atom_and_trailers _2 = LPAREN _3 = list_comma_argument_ _4 = RPAREN
    {                                                   ( Call (_1, (_2,_3,_4)) )}
| _1 = atom_and_trailers _2 = LBRACK _3 = list_comma_subscript_ _4 = RBRACK
    {      ( match _3 with
          (* TODO test* => Index (Tuple (elts)) *)
        | [s] -> Subscript (_1, (_2, [s], _4), Load)
        | l -> Subscript (_1, (_2, l, _4), Load) )}
| _1 = atom_and_trailers _2 = DOT _3 = NAME
    {                               ( Attribute (_1, _2, _3, Load) )}

atom:
  _1 = NAME
    {                ( Name (_1, Load, ref NotResolved) )}
| _1 = INT
    {                ( Num (Int (_1)) )}
| _1 = LONGINT
    {                ( Num (LongInt (_1)) )}
| _1 = FLOAT
    {                ( Num (Float (_1)) )}
| _1 = IMAG
    {                ( Num (Imag (_1)) )}
| _1 = TRUE
    {                ( Bool (true, _1) )}
| _1 = FALSE
    {                ( Bool (false, _1) )}
| _1 = NONE
    {                ( None_ _1 )}
| _1 = nonempty_list_string_
    {            (
     match _1 with
     | [] ->  raise Common.Impossible
     | [x] -> x
     | xs -> ConcatenatedString xs
   )}
| _1 = atom_tuple
    {                ( _1 )}
| _1 = atom_list
    {                ( _1 )}
| _1 = atom_dict
    {                ( _1 )}
| _1 = atom_repr
    {                ( _1 )}
| _1 = ELLIPSES
    {                       ( Ellipsis _1 )}
| _1 = LDots _2 = test _3 = RDots
    {                       ( Flag_parsing.sgrep_guard (DeepEllipsis (_1, _2, _3)) )}

atom_repr:
  _1 = BACKQUOTE _2 = testlist1 _3 = BACKQUOTE
    {                             ( Repr (_1, tuple_expr _2, _3) )}

testlist1:
  _1 = test
    {                         ( Single _1 )}
| _1 = test _2 = COMMA _3 = testlist1
    {                       ( cons _1 _3 )}

string:
  _1 = STR
    {        ( let (s, pre, tok) = _1 in
          if pre = "" then Str (s, tok) else EncodedStr ((s, tok), pre) )}
| _1 = FSTRING_START _2 = list_interpolated_ _3 = FSTRING_END
    {                                            ( InterpolatedString _2 )}

interpolated:
  _1 = FSTRING_STRING
    {                   ( Str _1 )}
| _1 = FSTRING_LBRACE _2 = interpolant _3 = fstring_print_spec _4 = RBRACE
    {                                                      ( InterpolatedString (_2::_3) )}

fstring_print_spec:
  _1 = fstring_format_clause
    {                              ( _1 )}
| _1 = EQ _2 = fstring_format_clause
    {                              ( mk_str _1::_2 )}

fstring_format_clause:
  
    {              ( [] )}
| _1 = fstring_format_delimeter _2 = format_specifier
    {                                              ( mk_str _1::_2 )}

fstring_format_delimeter:
  _1 = COLON
    {        ( _1 )}
| _1 = BANG
    {         ( _1 )}

interpolant:
  _1 = tuple_test_
    {                ( tuple_expr _1 )}

format_specifier:
  _1 = nonempty_list_format_token_
    {                                ( _1 )}

format_token:
  _1 = INT
    {          ( mk_str (snd _1) )}
| _1 = FLOAT
    {          ( mk_str (snd _1) )}
| _1 = NAME
    {          ( mk_str (snd _1) )}
| _1 = MOD
    {        ( mk_str _1 )}
| _1 = LT
    {       ( mk_str _1 )}
| _1 = GT
    {                          ( mk_str _1 )}
| _1 = BITXOR
    {           ( mk_str _1 )}
| _1 = ADD
    {         ( mk_str _1 )}
| _1 = SUB
    {                             ( mk_str _1 )}
| _1 = DIV
    {        ( mk_str _1 )}
| _1 = DOT
    {          ( mk_str _1 )}
| _1 = EQ
    {        ( mk_str _1 )}
| _1 = COMMA
    {        ( mk_str _1 )}
| _1 = COLON
    {        ( mk_str _1 )}
| _1 = LBRACE _2 = test _3 = RBRACE
    {                 ( _2 )}

atom_tuple:
  _1 = LPAREN _2 = RPAREN
    {                                  ( Tuple (CompList (_1, [], _2), Load) )}
| _1 = LPAREN _2 = testlist_comp_or_expr _3 = RPAREN
    {                                  ( _2 )}
| _1 = LPAREN _2 = yield_expr _3 = RPAREN
    {                                  ( _2 )}

atom_list:
  _1 = LBRACK _2 = RBRACK
    {                          ( List (CompList (_1, [], _2), Load) )}
| _1 = LBRACK _2 = testlist_comp _3 = RBRACK
    {                          ( List (_2 (_1, _3), Load) )}

atom_dict:
  _1 = LBRACE _2 = RBRACE
    {                           ( DictOrSet (CompList (_1, [], _2)) )}
| _1 = LBRACE _2 = dictorsetmaker _3 = RBRACE
    {                           ( DictOrSet (_2 (_1, _3)) )}

dictorsetmaker:
  _1 = dictorset_elem _2 = comp_for
    {                            ( fun _ -> CompForIf (_1, _2) )}
| _1 = list_comma_dictorset_elem_
    {                                   ( fun (t1, t2) -> CompList (t1, _1, t2) )}

dictorset_elem:
  _1 = test _2 = COLON _3 = test
    {                  ( KeyVal (_1, _3) )}
| _1 = test
    {                    ( Key _1 )}
| _1 = star_expr
    {                    ( Key _1 )}
| _1 = POW _2 = expr
    {                     ( PowInline _2 )}

subscript:
  _1 = test
    {         ( Index (_1) )}
| _1 = option_test_ _2 = COLON _3 = option_test_
    {                    ( Slice (_1, _3, None) )}
| _1 = option_test_ _2 = COLON _3 = option_test_ _4 = COLON _5 = option_test_
    {                              ( Slice (_1, _3, _5) )}

test:
  _1 = or_test
    {                                 ( _1 )}
| _1 = or_test _2 = IF _3 = or_test _4 = ELSE _5 = test
    {                                 ( IfExp (_3, _1, _5) )}
| _1 = lambdadef
    {                                 ( _1 )}

or_test:
  _1 = and_test
    {                                       ( _1 )}
| _1 = and_test _2 = OR _3 = list_sep_and_test_OR_
    {                                       ( BoolOp ((Or,_2), _1::_3) )}

and_test:
  _1 = not_test
    {                                         ( _1 )}
| _1 = not_test _2 = AND _3 = list_sep_not_test_AND_
    {                                         ( BoolOp ((And,_2), _1::_3) )}

not_test:
  _1 = NOT _2 = not_test
    {                 ( UnaryOp ((Not,_1), _2) )}
| _1 = comparison
    {                 ( _1 )}

comparison:
  _1 = expr
    {                                 ( _1 )}
| _1 = expr _2 = comp_op _3 = comparison_list
    {                                 ( Compare (_1, (_2)::(fst _3), snd _3) )}

comparison_list:
  _1 = expr
    {                                 ( [], [_1] )}
| _1 = expr _2 = comp_op _3 = comparison_list
    {                                 ( (_2)::(fst _3), _1::(snd _3) )}

comp_op:
  _1 = EQUAL
    {            ( Eq, _1 )}
| _1 = NOTEQ
    {            ( NotEq, _1 )}
| _1 = LT
    {            ( Lt, _1 )}
| _1 = LEQ
    {            ( LtE, _1 )}
| _1 = GT
    {            ( Gt, _1 )}
| _1 = GEQ
    {            ( GtE, _1 )}
| _1 = IS
    {            ( Is, _1 )}
| _1 = IS _2 = NOT
    {            ( IsNot, _1 )}
| _1 = IN
    {            ( In, _1 )}
| _1 = NOT _2 = IN
    {            ( NotIn, _1 )}

star_expr:
  _1 = MULT _2 = expr
    {                    ( ExprStar _2 )}

yield_expr:
  _1 = YIELD
    {                    ( Yield (_1, None, false) )}
| _1 = YIELD _2 = FROM _3 = test
    {                    ( Yield (_1, Some _3, true) )}
| _1 = YIELD _2 = tuple_test_
    {                       ( Yield (_1, Some (tuple_expr _2), false) )}

lambdadef:
  _1 = LAMBDA _2 = varargslist _3 = COLON _4 = test
    {                                       ( Lambda (_1, _2, _3, _4) )}

testlist_comp:
  _1 = namedexpr_or_star_expr _2 = listcomp_for
    {                                         ( fun _ -> CompForIf (_1, _2) )}
| _1 = tuple_namedexpr_or_star_expr_
    {      ( fun (t1, t2) -> CompList (t1, to_list _1, t2) )}

testlist_comp_or_expr:
  _1 = namedexpr_or_star_expr _2 = comp_for
    {                                     ( Tuple (CompForIf (_1, _2), Load) )}
| _1 = tuple_namedexpr_or_star_expr_
    {                                     (
    match _1 with
    | Single e -> e
    | Tup l -> Tuple (CompList (PI.fake_bracket l), Load)
   )}

comp_for:
  _1 = sync_comp_for
    {                       ( _1 )}
| _1 = ASYNC _2 = sync_comp_for
    {                       ( (* TODO *) _2 )}

sync_comp_for:
  _1 = FOR _2 = exprlist _3 = IN _4 = or_test
    {    ( [CompFor (tuple_expr_store _2, _4)] )}
| _1 = FOR _2 = exprlist _3 = IN _4 = or_test _5 = comp_iter
    {    ( [CompFor (tuple_expr_store _2, _4)] @ _5 )}

listcomp_for:
  _1 = listsync_comp_for
    {                           ( _1 )}
| _1 = ASYNC _2 = listsync_comp_for
    {                           ( (* TODO *) _2 )}

list_for:
  _1 = or_test _2 = COMMA _3 = list_for_rest
    {                            (
    List (CompList (PI.fake_bracket (_1::_3)), Load)
  )}

list_for_rest:
  _1 = or_test
    {                              ( [_1] )}
| _1 = or_test _2 = COMMA _3 = list_for_rest
    {                              ( _1::_3 )}

listsync_comp_for:
  _1 = sync_comp_for
    {                  ( _1 )}
| _1 = FOR _2 = exprlist _3 = IN _4 = list_for
    {                             ( [CompFor (tuple_expr_store _2, _4) ] )}

comp_iter:
  _1 = comp_for
    {             ( _1 )}
| _1 = comp_if
    {             ( _1 )}

comp_if:
  _1 = IF _2 = test_nocond
    {                             ( [CompIf (_2)] )}
| _1 = IF _2 = test_nocond _3 = comp_iter
    {                             ( [CompIf (_2)] @ _3 )}

test_nocond:
  _1 = or_test
    {                     ( _1 )}
| _1 = lambdadef_nocond
    {                     ( _1 )}

lambdadef_nocond:
  _1 = LAMBDA _2 = varargslist _3 = COLON _4 = test_nocond
    {    ( Lambda (_1, _2, _3, _4) )}

argument:
  _1 = test
    {                   ( Arg _1 )}
| _1 = test _2 = comp_for
    {                   ( ArgComp (_1, _2) )}
| _1 = test _2 = COLONEQ _3 = test
    {                       ( Arg (NamedExpr (_1, _2, _3)) )}
| _1 = MULT _2 = test
    {                       ( ArgStar (_1, _2) )}
| _1 = POW _2 = test
    {                       ( ArgPow  (_1, _2) )}
| _1 = NAME _2 = COLON _3 = test
    {    ( Flag_parsing.sgrep_guard (Arg (TypedMetavar (_1, _2, _3))) )}
| _1 = test _2 = EQ _3 = test
    {      ( match _1 with
        | Name (id, _, _) -> ArgKwd (id, _3)
        | _ -> raise Parsing.Parse_error
      )}

%%
