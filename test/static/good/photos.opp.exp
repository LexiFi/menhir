File "photos.mly", line 37, characters 7-10:
Warning: the token EOF is unused.
%{

open Search

(* Error handling. *)

let failure index message =
  raise (SyntaxError (Parsing.rhs_start index, message))

let today () =
  let date = fst (Unix.mktime {
    (Unix.localtime (Unix.time ())) with
    Unix.tm_hour = 0;
    Unix.tm_min = 0;
    Unix.tm_sec = 0
  }) in
  date, date +. 86400.0

%}
%start query
%token AFTER
%token AND
%token BEFORE
%token EOF
%token HAS
%token <string> LITERAL
%token LPAREN
%token MATCHES
%token NAME
%token NOT
%token <int> NUMBER
%token ON
%token OR
%token RPAREN
%token SLASH
%token TODAY
%token TRUE
%token YESTERDAY
%type <Search.query> query
%%

query0:
  _1 = NAME _2 = LITERAL
    {    ( Name (fun s -> Filename.chop_extension s = _2) )}
| _1 = BEFORE _2 = date
    {    ( let _, date = _2 in DateLessThan date )}
| _1 = ON _2 = date
    {    ( let date1, date2 = _2 in And (DateGreaterThan date1, DateLessThan date2) )}
| _1 = TODAY
    {    ( let date1, date2 = today () in And (DateGreaterThan date1, DateLessThan date2) )}
| _1 = YESTERDAY
    {    ( let date1, date2 = today () in let date1, date2 = date1 -. 86400.0, date2 -. 86400.0 in
      And (DateGreaterThan date1, DateLessThan date2) )}
| _1 = AFTER _2 = date
    {    ( let date, _ = _2 in DateGreaterThan date )}
| _1 = MATCHES _2 = LITERAL
    {    ( let regexp = Str.regexp _2 in
      let predicate s = try let _ = Str.search_forward regexp s 0 in true with Not_found -> false in
      Or (Key ("caption", predicate), Key ("description", predicate)) )}
| _1 = HAS _2 = LITERAL
    {    ( Property _2 )}
| _1 = NOT _2 = query0
    {    ( Not _2 )}
| _1 = LPAREN _2 = query _3 = RPAREN
    {    ( _2 )}
| _1 = TRUE
    {    ( True )}

query1:
  _1 = query1 _2 = AND _3 = query0
    {    ( And (_1, _3) )}
| _1 = query0
    {    ( _1 )}

query2:
  _1 = query2 _2 = OR _3 = query1
    {    ( Or (_1, _3) )}
| _1 = query1
    {    ( _1 )}

query:
  _1 = query2
    {    ( _1 )}

date:
  _1 = NUMBER _2 = SLASH _3 = NUMBER _4 = SLASH _5 = NUMBER
    {    ( try
        let date = fst (Unix.mktime {
			Unix.tm_year = _1 - 1900;
			Unix.tm_mon = _3 - 1;
			Unix.tm_mday = _5;
			Unix.tm_hour = 0;
			Unix.tm_min = 0;
			Unix.tm_sec = 0;
			Unix.tm_wday = 0;
			Unix.tm_yday = 0;
			Unix.tm_isdst = false
		      }) in
	date, date +. 86400.0
      with Unix.Unix_error _ ->
	failure 1 "date invalide"
    )}
| _1 = NUMBER _2 = SLASH _3 = NUMBER _4 = SLASH _5 = error
    {    ( failure 5 "jour du mois (deux chiffres) attendu" )}
| _1 = NUMBER _2 = SLASH _3 = NUMBER _4 = error
    {    ( failure 4 "'/' attendu" )}
| _1 = NUMBER _2 = SLASH _3 = error
    {    ( failure 3 "mois de l'année (deux chiffres) attendu" )}
| _1 = NUMBER _2 = error
    {    ( failure 2 "'/' attendu" )}

%%
