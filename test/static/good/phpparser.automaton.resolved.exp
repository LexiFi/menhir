State 0:
## Known stack suffix:
##
## LR(1) items:
single_php_source_file' -> . single_php_source_file [ # ]
## Transitions:
-- On T_PHPSL shift to state 1
-- On single_php_source_file shift to state 320
## Reductions:

State 1:
## Known stack suffix:
## T_PHPSL
## LR(1) items:
single_php_source_file -> T_PHPSL . single_php_source_file_item_list T_PHPE [ # ]
## Transitions:
-- On T_TRY shift to state 2
-- On T_THROW shift to state 4
-- On T_SWITCH shift to state 190
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_RETURN shift to state 199
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_LPAREN shift to state 30
-- On T_LBRACC shift to state 3
-- On T_INT_LITERAL shift to state 32
-- On T_IF shift to state 202
-- On T_IDENTIFIER shift to state 10
-- On T_FUNCTION shift to state 267
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On T_BREAK shift to state 206
-- On T_ABSTRACT shift to state 284
-- On variable_declaration shift to state 208
-- On variable shift to state 209
-- On try_catch_statement shift to state 214
-- On throw_statement shift to state 215
-- On switch_statement shift to state 216
-- On static_reference_chain_noiv shift to state 42
-- On statement_no_unmatched_if shift to state 240
-- On statement shift to state 285
-- On single_php_source_file_item_list shift to state 318
-- On simple_statement shift to state 220
-- On return_statement shift to state 221
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On lvalue_novariable shift to state 222
-- On literal shift to state 46
-- On if_statement_unmatched shift to state 239
-- On if_statement_matched shift to state 227
-- On identifier shift to state 228
-- On function_definition shift to state 287
-- On function_call_statement shift to state 229
-- On function_call_expression_basic shift to state 230
-- On constant_literal shift to state 56
-- On compound_statement_no_unmatched_if shift to state 232
-- On class_definition shift to state 289
-- On break_statement shift to state 233
-- On block_statement shift to state 234
-- On atomic_expression_noiv shift to state 57
-- On assignment_statement shift to state 235
-- On array_expression_noiv shift to state 236
-- On array_expression shift to state 237
-- On abstract_clause shift to state 291
## Reductions:
-- On T_PHPE reduce production single_php_source_file_item_list ->
-- On T_CLASS reduce production abstract_clause ->

State 2:
## Known stack suffix:
## T_TRY
## LR(1) items:
try_catch_statement -> T_TRY . block_statement nonempty_catch_list [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_LBRACC shift to state 3
-- On block_statement shift to state 255
## Reductions:

State 3:
## Known stack suffix:
## T_LBRACC
## LR(1) items:
block_statement -> T_LBRACC . statement_list T_RBRACC [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_STATIC T_SELF T_RETURN T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_TRY shift to state 2
-- On T_THROW shift to state 4
-- On T_SWITCH shift to state 190
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_RETURN shift to state 199
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_LPAREN shift to state 30
-- On T_LBRACC shift to state 3
-- On T_INT_LITERAL shift to state 32
-- On T_IF shift to state 202
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On T_BREAK shift to state 206
-- On variable_declaration shift to state 208
-- On variable shift to state 209
-- On try_catch_statement shift to state 214
-- On throw_statement shift to state 215
-- On switch_statement shift to state 216
-- On static_reference_chain_noiv shift to state 42
-- On statement_no_unmatched_if shift to state 240
-- On statement_list shift to state 253
-- On statement shift to state 242
-- On simple_statement shift to state 220
-- On return_statement shift to state 221
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On lvalue_novariable shift to state 222
-- On literal shift to state 46
-- On if_statement_unmatched shift to state 239
-- On if_statement_matched shift to state 227
-- On identifier shift to state 228
-- On function_call_statement shift to state 229
-- On function_call_expression_basic shift to state 230
-- On constant_literal shift to state 56
-- On compound_statement_no_unmatched_if shift to state 232
-- On break_statement shift to state 233
-- On block_statement shift to state 234
-- On atomic_expression_noiv shift to state 57
-- On assignment_statement shift to state 235
-- On array_expression_noiv shift to state 236
-- On array_expression shift to state 237
## Reductions:
-- On T_RBRACC reduce production statement_list ->

State 4:
## Known stack suffix:
## T_THROW
## LR(1) items:
throw_statement -> T_THROW . expression T_SEMICOLON [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 160
-- On logical_or_expression_weak shift to state 166
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On expression shift to state 188
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 5:
## Known stack suffix:
## T_TILDE
## LR(1) items:
unary_expression -> T_TILDE . crement_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_LPAREN shift to state 30
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On literal shift to state 46
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 187
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
## Reductions:

State 6:
## Known stack suffix:
## T_STRING_LITERAL_S
## LR(1) items:
constant_literal -> T_STRING_LITERAL_S . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant_literal -> T_STRING_LITERAL_S

State 7:
## Known stack suffix:
## T_STRING_LITERAL_D
## LR(1) items:
literal -> T_STRING_LITERAL_D . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> T_STRING_LITERAL_D

State 8:
## Known stack suffix:
## T_SELF
## LR(1) items:
static_reference_chain_noiv -> T_SELF . T_COLON_2 identifier_variable rarrow_chain [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_COLON_2 shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## T_SELF T_COLON_2
## LR(1) items:
static_reference_chain_noiv -> T_SELF T_COLON_2 . identifier_variable rarrow_chain [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On T_DOLLAR shift to state 11
-- On variable shift to state 13
-- On identifier_variable shift to state 14
-- On identifier shift to state 18
## Reductions:

State 10:
## Known stack suffix:
## T_IDENTIFIER
## LR(1) items:
identifier -> T_IDENTIFIER . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_LBRACC T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXTENDS T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_DOLLAR T_COMMA T_COLON_2 T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier -> T_IDENTIFIER

State 11:
## Known stack suffix:
## T_DOLLAR
## LR(1) items:
variable -> T_DOLLAR . T_IDENTIFIER [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_IDENTIFIER shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## T_DOLLAR T_IDENTIFIER
## LR(1) items:
variable -> T_DOLLAR T_IDENTIFIER . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> T_DOLLAR T_IDENTIFIER

State 13:
## Known stack suffix:
## variable
## LR(1) items:
identifier_variable -> variable . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier_variable -> variable

State 14:
## Known stack suffix:
## T_SELF T_COLON_2 identifier_variable
## LR(1) items:
static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable . rarrow_chain [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On rarrow_chain shift to state 15
## Default reduction:
-- After reading the next token, reduce production rarrow_chain ->

State 15:
## Known stack suffix:
## T_SELF T_COLON_2 identifier_variable rarrow_chain
## LR(1) items:
rarrow_chain -> rarrow_chain . T_RARROW identifier_variable [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_RARROW shift to state 16
## Reductions:
-- On T_XOR reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_SLASH_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_SLASH reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_SEMICOLON reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_RPAREN reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_RBRACS reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_QUESTION reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_PLUS_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_PLUS_2 reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_PLUS reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_PERCENT_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_PERCENT reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_OR reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_MINUS_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_MINUS_2 reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_MINUS reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_LT_LT_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_LT_LT reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_LT_GT reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_LT_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_LT reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_LPAREN reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_LBRACS reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_INSTANCEOF reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_GT_GT_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_GT_GT reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_GT_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_GT reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_EXCL_EQ_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_EXCL_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_EQ_EQ_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_EQ_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_DOT_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_DOT reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_COMMA reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_COLON reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_CARET_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_CARET reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_BAR_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_BAR_2 reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_BAR reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_ASTERISK_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_ASTERISK reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_AND reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_AMPERSAND_EQ reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_AMPERSAND_2 reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain
-- On T_AMPERSAND reduce production static_reference_chain_noiv -> T_SELF T_COLON_2 identifier_variable rarrow_chain

State 16:
## Known stack suffix:
## rarrow_chain T_RARROW
## LR(1) items:
rarrow_chain -> rarrow_chain T_RARROW . identifier_variable [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On T_DOLLAR shift to state 11
-- On variable shift to state 13
-- On identifier_variable shift to state 17
-- On identifier shift to state 18
## Reductions:

State 17:
## Known stack suffix:
## rarrow_chain T_RARROW identifier_variable
## LR(1) items:
rarrow_chain -> rarrow_chain T_RARROW identifier_variable . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rarrow_chain -> rarrow_chain T_RARROW identifier_variable

State 18:
## Known stack suffix:
## identifier
## LR(1) items:
identifier_variable -> identifier . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier_variable -> identifier

State 19:
## Known stack suffix:
## T_PLUS_2
## LR(1) items:
crement_expression -> T_PLUS_2 . function_call_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_LPAREN shift to state 30
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On literal shift to state 46
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 186
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
## Reductions:

State 20:
## Known stack suffix:
## T_PARENT
## LR(1) items:
static_reference_chain_noiv -> T_PARENT . T_COLON_2 identifier_variable rarrow_chain [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_COLON_2 shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## T_PARENT T_COLON_2
## LR(1) items:
static_reference_chain_noiv -> T_PARENT T_COLON_2 . identifier_variable rarrow_chain [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On T_DOLLAR shift to state 11
-- On variable shift to state 13
-- On identifier_variable shift to state 22
-- On identifier shift to state 18
## Reductions:

State 22:
## Known stack suffix:
## T_PARENT T_COLON_2 identifier_variable
## LR(1) items:
static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable . rarrow_chain [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On rarrow_chain shift to state 23
## Default reduction:
-- After reading the next token, reduce production rarrow_chain ->

State 23:
## Known stack suffix:
## T_PARENT T_COLON_2 identifier_variable rarrow_chain
## LR(1) items:
rarrow_chain -> rarrow_chain . T_RARROW identifier_variable [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_RARROW shift to state 16
## Reductions:
-- On T_XOR reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_SLASH_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_SLASH reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_SEMICOLON reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_RPAREN reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_RBRACS reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_QUESTION reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_PLUS_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_PLUS_2 reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_PLUS reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_PERCENT_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_PERCENT reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_OR reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_MINUS_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_MINUS_2 reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_MINUS reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_LT_LT_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_LT_LT reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_LT_GT reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_LT_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_LT reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_LPAREN reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_LBRACS reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_INSTANCEOF reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_GT_GT_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_GT_GT reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_GT_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_GT reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_EXCL_EQ_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_EXCL_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_EQ_EQ_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_EQ_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_DOT_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_DOT reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_COMMA reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_COLON reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_CARET_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_CARET reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_BAR_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_BAR_2 reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_BAR reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_ASTERISK_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_ASTERISK reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_AND reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_AMPERSAND_EQ reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_AMPERSAND_2 reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain
-- On T_AMPERSAND reduce production static_reference_chain_noiv -> T_PARENT T_COLON_2 identifier_variable rarrow_chain

State 24:
## Known stack suffix:
## T_NULL
## LR(1) items:
constant_literal -> T_NULL . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant_literal -> T_NULL

State 25:
## Known stack suffix:
## T_NEW
## LR(1) items:
new_expression_noiv -> T_NEW . identifier T_LPAREN expression_list T_RPAREN [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On identifier shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## T_NEW identifier
## LR(1) items:
new_expression_noiv -> T_NEW identifier . T_LPAREN expression_list T_RPAREN [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_LPAREN shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## T_NEW identifier T_LPAREN
## LR(1) items:
new_expression_noiv -> T_NEW identifier T_LPAREN . expression_list T_RPAREN [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 160
-- On logical_or_expression_weak shift to state 166
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On expression_list shift to state 184
-- On expression shift to state 174
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:
-- On T_RPAREN reduce production expression_list ->

State 28:
## Known stack suffix:
## T_PLUS
## LR(1) items:
unary_expression -> T_PLUS . crement_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_LPAREN shift to state 30
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On literal shift to state 46
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 183
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
## Reductions:

State 29:
## Known stack suffix:
## T_MINUS_2
## LR(1) items:
crement_expression -> T_MINUS_2 . function_call_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_LPAREN shift to state 30
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On literal shift to state 46
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 182
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
## Reductions:

State 30:
## Known stack suffix:
## T_LPAREN
## LR(1) items:
atomic_expression_noiv -> T_LPAREN . expression T_RPAREN [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 160
-- On logical_or_expression_weak shift to state 166
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On expression shift to state 170
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 31:
## Known stack suffix:
## T_MINUS
## LR(1) items:
unary_expression -> T_MINUS . crement_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_LPAREN shift to state 30
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On literal shift to state 46
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 55
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
## Reductions:

State 32:
## Known stack suffix:
## T_INT_LITERAL
## LR(1) items:
constant_literal -> T_INT_LITERAL . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant_literal -> T_INT_LITERAL

State 33:
## Known stack suffix:
## T_FLOAT_LITERAL
## LR(1) items:
constant_literal -> T_FLOAT_LITERAL . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant_literal -> T_FLOAT_LITERAL

State 34:
## Known stack suffix:
## T_DOLLAR
## LR(1) items:
object_member_expression_noiv -> T_DOLLAR . T_THIS rarrow_chain [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
variable -> T_DOLLAR . T_IDENTIFIER [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_THIS shift to state 35
-- On T_IDENTIFIER shift to state 12
## Reductions:

State 35:
## Known stack suffix:
## T_DOLLAR T_THIS
## LR(1) items:
object_member_expression_noiv -> T_DOLLAR T_THIS . rarrow_chain [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On rarrow_chain shift to state 36
## Default reduction:
-- After reading the next token, reduce production rarrow_chain ->

State 36:
## Known stack suffix:
## T_DOLLAR T_THIS rarrow_chain
## LR(1) items:
object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
rarrow_chain -> rarrow_chain . T_RARROW identifier_variable [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_RARROW shift to state 16
## Reductions:
-- On T_XOR reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_SLASH_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_SLASH reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_SEMICOLON reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_RPAREN reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_RBRACS reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_QUESTION reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_PLUS_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_PLUS_2 reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_PLUS reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_PERCENT_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_PERCENT reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_OR reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_MINUS_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_MINUS_2 reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_MINUS reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_LT_LT_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_LT_LT reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_LT_GT reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_LT_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_LT reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_LPAREN reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_LBRACS reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_INSTANCEOF reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_GT_GT_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_GT_GT reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_GT_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_GT reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_EXCL_EQ_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_EXCL_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_EQ_EQ_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_EQ_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_DOT_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_DOT reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_COMMA reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_COLON reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_CARET_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_CARET reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_BAR_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_BAR_2 reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_BAR reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_ASTERISK_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_ASTERISK reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_AND reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_AMPERSAND_EQ reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_AMPERSAND_2 reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain
-- On T_AMPERSAND reduce production object_member_expression_noiv -> T_DOLLAR T_THIS rarrow_chain

State 37:
## Known stack suffix:
## variable
## LR(1) items:
array_expression -> variable . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
object_member_expression_noiv -> variable . nonempty_rarrow_chain [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On rarrow_chain shift to state 38
-- On nonempty_rarrow_chain shift to state 41
## Reductions:
-- On T_XOR reduce production array_expression -> variable
-- On T_SLASH_EQ reduce production array_expression -> variable
-- On T_SLASH reduce production array_expression -> variable
-- On T_SEMICOLON reduce production array_expression -> variable
-- On T_RPAREN reduce production array_expression -> variable
-- On T_RBRACS reduce production array_expression -> variable
-- On T_RARROW reduce production rarrow_chain ->
-- On T_QUESTION reduce production array_expression -> variable
-- On T_PLUS_EQ reduce production array_expression -> variable
-- On T_PLUS_2 reduce production array_expression -> variable
-- On T_PLUS reduce production array_expression -> variable
-- On T_PERCENT_EQ reduce production array_expression -> variable
-- On T_PERCENT reduce production array_expression -> variable
-- On T_OR reduce production array_expression -> variable
-- On T_MINUS_EQ reduce production array_expression -> variable
-- On T_MINUS_2 reduce production array_expression -> variable
-- On T_MINUS reduce production array_expression -> variable
-- On T_LT_LT_EQ reduce production array_expression -> variable
-- On T_LT_LT reduce production array_expression -> variable
-- On T_LT_GT reduce production array_expression -> variable
-- On T_LT_EQ reduce production array_expression -> variable
-- On T_LT reduce production array_expression -> variable
-- On T_LPAREN reduce production array_expression -> variable
-- On T_LBRACS reduce production array_expression -> variable
-- On T_INSTANCEOF reduce production array_expression -> variable
-- On T_GT_GT_EQ reduce production array_expression -> variable
-- On T_GT_GT reduce production array_expression -> variable
-- On T_GT_EQ reduce production array_expression -> variable
-- On T_GT reduce production array_expression -> variable
-- On T_EXCL_EQ_EQ reduce production array_expression -> variable
-- On T_EXCL_EQ reduce production array_expression -> variable
-- On T_EQ_EQ_EQ reduce production array_expression -> variable
-- On T_EQ_EQ reduce production array_expression -> variable
-- On T_EQ reduce production array_expression -> variable
-- On T_DOT_EQ reduce production array_expression -> variable
-- On T_DOT reduce production array_expression -> variable
-- On T_COMMA reduce production array_expression -> variable
-- On T_COLON reduce production array_expression -> variable
-- On T_CARET_EQ reduce production array_expression -> variable
-- On T_CARET reduce production array_expression -> variable
-- On T_BAR_EQ reduce production array_expression -> variable
-- On T_BAR_2 reduce production array_expression -> variable
-- On T_BAR reduce production array_expression -> variable
-- On T_ASTERISK_EQ reduce production array_expression -> variable
-- On T_ASTERISK reduce production array_expression -> variable
-- On T_AND reduce production array_expression -> variable
-- On T_AMPERSAND_EQ reduce production array_expression -> variable
-- On T_AMPERSAND_2 reduce production array_expression -> variable
-- On T_AMPERSAND reduce production array_expression -> variable

State 38:
## Known stack suffix:
## rarrow_chain
## LR(1) items:
nonempty_rarrow_chain -> rarrow_chain . T_RARROW identifier_variable [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
rarrow_chain -> rarrow_chain . T_RARROW identifier_variable [ T_RARROW ]
## Transitions:
-- On T_RARROW shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## rarrow_chain T_RARROW
## LR(1) items:
nonempty_rarrow_chain -> rarrow_chain T_RARROW . identifier_variable [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
rarrow_chain -> rarrow_chain T_RARROW . identifier_variable [ T_RARROW ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On T_DOLLAR shift to state 11
-- On variable shift to state 13
-- On identifier_variable shift to state 40
-- On identifier shift to state 18
## Reductions:

State 40:
## Known stack suffix:
## rarrow_chain T_RARROW identifier_variable
## LR(1) items:
nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
rarrow_chain -> rarrow_chain T_RARROW identifier_variable . [ T_RARROW ]
## Transitions:
## Reductions:
-- On T_XOR reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_SLASH_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_SLASH reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_SEMICOLON reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_RPAREN reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_RBRACS reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_RARROW reduce production rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_QUESTION reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_PLUS_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_PLUS_2 reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_PLUS reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_PERCENT_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_PERCENT reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_OR reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_MINUS_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_MINUS_2 reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_MINUS reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_LT_LT_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_LT_LT reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_LT_GT reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_LT_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_LT reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_LPAREN reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_LBRACS reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_INSTANCEOF reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_GT_GT_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_GT_GT reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_GT_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_GT reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_EXCL_EQ_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_EXCL_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_EQ_EQ_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_EQ_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_DOT_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_DOT reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_COMMA reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_COLON reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_CARET_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_CARET reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_BAR_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_BAR_2 reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_BAR reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_ASTERISK_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_ASTERISK reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_AND reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_AMPERSAND_EQ reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_AMPERSAND_2 reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable
-- On T_AMPERSAND reduce production nonempty_rarrow_chain -> rarrow_chain T_RARROW identifier_variable

State 41:
## Known stack suffix:
## variable nonempty_rarrow_chain
## LR(1) items:
object_member_expression_noiv -> variable nonempty_rarrow_chain . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production object_member_expression_noiv -> variable nonempty_rarrow_chain

State 42:
## Known stack suffix:
## static_reference_chain_noiv
## LR(1) items:
array_expression_noiv -> static_reference_chain_noiv . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_expression_noiv -> static_reference_chain_noiv

State 43:
## Known stack suffix:
## object_member_expression_noiv
## LR(1) items:
static_reference_chain_noiv -> object_member_expression_noiv . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_reference_chain_noiv -> object_member_expression_noiv

State 44:
## Known stack suffix:
## new_expression_noiv
## LR(1) items:
object_member_expression_noiv -> new_expression_noiv . rarrow_chain [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On rarrow_chain shift to state 45
## Default reduction:
-- After reading the next token, reduce production rarrow_chain ->

State 45:
## Known stack suffix:
## new_expression_noiv rarrow_chain
## LR(1) items:
object_member_expression_noiv -> new_expression_noiv rarrow_chain . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
rarrow_chain -> rarrow_chain . T_RARROW identifier_variable [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_RARROW shift to state 16
## Reductions:
-- On T_XOR reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_SLASH_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_SLASH reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_SEMICOLON reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_RPAREN reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_RBRACS reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_QUESTION reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_PLUS_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_PLUS_2 reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_PLUS reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_PERCENT_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_PERCENT reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_OR reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_MINUS_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_MINUS_2 reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_MINUS reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_LT_LT_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_LT_LT reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_LT_GT reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_LT_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_LT reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_LPAREN reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_LBRACS reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_INSTANCEOF reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_GT_GT_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_GT_GT reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_GT_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_GT reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_EXCL_EQ_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_EXCL_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_EQ_EQ_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_EQ_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_DOT_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_DOT reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_COMMA reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_COLON reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_CARET_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_CARET reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_BAR_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_BAR_2 reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_BAR reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_ASTERISK_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_ASTERISK reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_AND reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_AMPERSAND_EQ reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_AMPERSAND_2 reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain
-- On T_AMPERSAND reduce production object_member_expression_noiv -> new_expression_noiv rarrow_chain

State 46:
## Known stack suffix:
## literal
## LR(1) items:
atomic_expression_noiv -> literal . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expression_noiv -> literal

State 47:
## Known stack suffix:
## identifier
## LR(1) items:
array_expression -> identifier . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
static_reference_chain_noiv -> identifier . T_COLON_2 identifier_variable rarrow_chain [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_COLON_2 shift to state 48
## Reductions:
-- On T_XOR reduce production array_expression -> identifier
-- On T_SLASH_EQ reduce production array_expression -> identifier
-- On T_SLASH reduce production array_expression -> identifier
-- On T_SEMICOLON reduce production array_expression -> identifier
-- On T_RPAREN reduce production array_expression -> identifier
-- On T_RBRACS reduce production array_expression -> identifier
-- On T_QUESTION reduce production array_expression -> identifier
-- On T_PLUS_EQ reduce production array_expression -> identifier
-- On T_PLUS_2 reduce production array_expression -> identifier
-- On T_PLUS reduce production array_expression -> identifier
-- On T_PERCENT_EQ reduce production array_expression -> identifier
-- On T_PERCENT reduce production array_expression -> identifier
-- On T_OR reduce production array_expression -> identifier
-- On T_MINUS_EQ reduce production array_expression -> identifier
-- On T_MINUS_2 reduce production array_expression -> identifier
-- On T_MINUS reduce production array_expression -> identifier
-- On T_LT_LT_EQ reduce production array_expression -> identifier
-- On T_LT_LT reduce production array_expression -> identifier
-- On T_LT_GT reduce production array_expression -> identifier
-- On T_LT_EQ reduce production array_expression -> identifier
-- On T_LT reduce production array_expression -> identifier
-- On T_LPAREN reduce production array_expression -> identifier
-- On T_LBRACS reduce production array_expression -> identifier
-- On T_INSTANCEOF reduce production array_expression -> identifier
-- On T_GT_GT_EQ reduce production array_expression -> identifier
-- On T_GT_GT reduce production array_expression -> identifier
-- On T_GT_EQ reduce production array_expression -> identifier
-- On T_GT reduce production array_expression -> identifier
-- On T_EXCL_EQ_EQ reduce production array_expression -> identifier
-- On T_EXCL_EQ reduce production array_expression -> identifier
-- On T_EQ_EQ_EQ reduce production array_expression -> identifier
-- On T_EQ_EQ reduce production array_expression -> identifier
-- On T_EQ reduce production array_expression -> identifier
-- On T_DOT_EQ reduce production array_expression -> identifier
-- On T_DOT reduce production array_expression -> identifier
-- On T_COMMA reduce production array_expression -> identifier
-- On T_COLON reduce production array_expression -> identifier
-- On T_CARET_EQ reduce production array_expression -> identifier
-- On T_CARET reduce production array_expression -> identifier
-- On T_BAR_EQ reduce production array_expression -> identifier
-- On T_BAR_2 reduce production array_expression -> identifier
-- On T_BAR reduce production array_expression -> identifier
-- On T_ASTERISK_EQ reduce production array_expression -> identifier
-- On T_ASTERISK reduce production array_expression -> identifier
-- On T_AND reduce production array_expression -> identifier
-- On T_AMPERSAND_EQ reduce production array_expression -> identifier
-- On T_AMPERSAND_2 reduce production array_expression -> identifier
-- On T_AMPERSAND reduce production array_expression -> identifier

State 48:
## Known stack suffix:
## identifier T_COLON_2
## LR(1) items:
static_reference_chain_noiv -> identifier T_COLON_2 . identifier_variable rarrow_chain [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On T_DOLLAR shift to state 11
-- On variable shift to state 13
-- On identifier_variable shift to state 49
-- On identifier shift to state 18
## Reductions:

State 49:
## Known stack suffix:
## identifier T_COLON_2 identifier_variable
## LR(1) items:
static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable . rarrow_chain [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On rarrow_chain shift to state 50
## Default reduction:
-- After reading the next token, reduce production rarrow_chain ->

State 50:
## Known stack suffix:
## identifier T_COLON_2 identifier_variable rarrow_chain
## LR(1) items:
rarrow_chain -> rarrow_chain . T_RARROW identifier_variable [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_RARROW shift to state 16
## Reductions:
-- On T_XOR reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_SLASH_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_SLASH reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_SEMICOLON reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_RPAREN reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_RBRACS reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_QUESTION reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_PLUS_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_PLUS_2 reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_PLUS reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_PERCENT_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_PERCENT reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_OR reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_MINUS_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_MINUS_2 reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_MINUS reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_LT_LT_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_LT_LT reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_LT_GT reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_LT_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_LT reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_LPAREN reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_LBRACS reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_INSTANCEOF reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_GT_GT_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_GT_GT reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_GT_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_GT reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_EXCL_EQ_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_EXCL_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_EQ_EQ_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_EQ_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_DOT_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_DOT reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_COMMA reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_COLON reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_CARET_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_CARET reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_BAR_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_BAR_2 reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_BAR reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_ASTERISK_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_ASTERISK reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_AND reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_AMPERSAND_EQ reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_AMPERSAND_2 reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain
-- On T_AMPERSAND reduce production static_reference_chain_noiv -> identifier T_COLON_2 identifier_variable rarrow_chain

State 51:
## Known stack suffix:
## function_call_expression_basic
## LR(1) items:
function_call_expression -> function_call_expression_basic . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_call_expression -> function_call_expression_basic

State 52:
## Known stack suffix:
## function_call_expression
## LR(1) items:
crement_expression -> function_call_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
crement_expression -> function_call_expression . T_MINUS_2 [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
crement_expression -> function_call_expression . T_PLUS_2 [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_PLUS_2 shift to state 53
-- On T_MINUS_2 shift to state 54
## Reductions:
-- On T_XOR reduce production crement_expression -> function_call_expression
-- On T_SLASH_EQ reduce production crement_expression -> function_call_expression
-- On T_SLASH reduce production crement_expression -> function_call_expression
-- On T_SEMICOLON reduce production crement_expression -> function_call_expression
-- On T_RPAREN reduce production crement_expression -> function_call_expression
-- On T_RBRACS reduce production crement_expression -> function_call_expression
-- On T_QUESTION reduce production crement_expression -> function_call_expression
-- On T_PLUS_EQ reduce production crement_expression -> function_call_expression
-- On T_PLUS reduce production crement_expression -> function_call_expression
-- On T_PERCENT_EQ reduce production crement_expression -> function_call_expression
-- On T_PERCENT reduce production crement_expression -> function_call_expression
-- On T_OR reduce production crement_expression -> function_call_expression
-- On T_MINUS_EQ reduce production crement_expression -> function_call_expression
-- On T_MINUS reduce production crement_expression -> function_call_expression
-- On T_LT_LT_EQ reduce production crement_expression -> function_call_expression
-- On T_LT_LT reduce production crement_expression -> function_call_expression
-- On T_LT_GT reduce production crement_expression -> function_call_expression
-- On T_LT_EQ reduce production crement_expression -> function_call_expression
-- On T_LT reduce production crement_expression -> function_call_expression
-- On T_INSTANCEOF reduce production crement_expression -> function_call_expression
-- On T_GT_GT_EQ reduce production crement_expression -> function_call_expression
-- On T_GT_GT reduce production crement_expression -> function_call_expression
-- On T_GT_EQ reduce production crement_expression -> function_call_expression
-- On T_GT reduce production crement_expression -> function_call_expression
-- On T_EXCL_EQ_EQ reduce production crement_expression -> function_call_expression
-- On T_EXCL_EQ reduce production crement_expression -> function_call_expression
-- On T_EQ_EQ_EQ reduce production crement_expression -> function_call_expression
-- On T_EQ_EQ reduce production crement_expression -> function_call_expression
-- On T_EQ reduce production crement_expression -> function_call_expression
-- On T_DOT_EQ reduce production crement_expression -> function_call_expression
-- On T_DOT reduce production crement_expression -> function_call_expression
-- On T_COMMA reduce production crement_expression -> function_call_expression
-- On T_COLON reduce production crement_expression -> function_call_expression
-- On T_CARET_EQ reduce production crement_expression -> function_call_expression
-- On T_CARET reduce production crement_expression -> function_call_expression
-- On T_BAR_EQ reduce production crement_expression -> function_call_expression
-- On T_BAR_2 reduce production crement_expression -> function_call_expression
-- On T_BAR reduce production crement_expression -> function_call_expression
-- On T_ASTERISK_EQ reduce production crement_expression -> function_call_expression
-- On T_ASTERISK reduce production crement_expression -> function_call_expression
-- On T_AND reduce production crement_expression -> function_call_expression
-- On T_AMPERSAND_EQ reduce production crement_expression -> function_call_expression
-- On T_AMPERSAND_2 reduce production crement_expression -> function_call_expression
-- On T_AMPERSAND reduce production crement_expression -> function_call_expression

State 53:
## Known stack suffix:
## function_call_expression T_PLUS_2
## LR(1) items:
crement_expression -> function_call_expression T_PLUS_2 . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production crement_expression -> function_call_expression T_PLUS_2

State 54:
## Known stack suffix:
## function_call_expression T_MINUS_2
## LR(1) items:
crement_expression -> function_call_expression T_MINUS_2 . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production crement_expression -> function_call_expression T_MINUS_2

State 55:
## Known stack suffix:
## T_MINUS crement_expression
## LR(1) items:
unary_expression -> T_MINUS crement_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> T_MINUS crement_expression

State 56:
## Known stack suffix:
## constant_literal
## LR(1) items:
literal -> constant_literal . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> constant_literal

State 57:
## Known stack suffix:
## atomic_expression_noiv
## LR(1) items:
new_expression_noiv -> atomic_expression_noiv . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production new_expression_noiv -> atomic_expression_noiv

State 58:
## Known stack suffix:
## array_expression_noiv
## LR(1) items:
array_expression -> array_expression_noiv . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_expression -> array_expression_noiv

State 59:
## Known stack suffix:
## array_expression
## LR(1) items:
array_expression_noiv -> array_expression . T_LBRACS expression T_RBRACS [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
function_call_expression -> array_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
function_call_expression_basic -> array_expression . T_LPAREN expression_list T_RPAREN [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_LPAREN shift to state 60
-- On T_LBRACS shift to state 179
## Reductions:
-- On T_XOR reduce production function_call_expression -> array_expression
-- On T_SLASH_EQ reduce production function_call_expression -> array_expression
-- On T_SLASH reduce production function_call_expression -> array_expression
-- On T_SEMICOLON reduce production function_call_expression -> array_expression
-- On T_RPAREN reduce production function_call_expression -> array_expression
-- On T_RBRACS reduce production function_call_expression -> array_expression
-- On T_QUESTION reduce production function_call_expression -> array_expression
-- On T_PLUS_EQ reduce production function_call_expression -> array_expression
-- On T_PLUS_2 reduce production function_call_expression -> array_expression
-- On T_PLUS reduce production function_call_expression -> array_expression
-- On T_PERCENT_EQ reduce production function_call_expression -> array_expression
-- On T_PERCENT reduce production function_call_expression -> array_expression
-- On T_OR reduce production function_call_expression -> array_expression
-- On T_MINUS_EQ reduce production function_call_expression -> array_expression
-- On T_MINUS_2 reduce production function_call_expression -> array_expression
-- On T_MINUS reduce production function_call_expression -> array_expression
-- On T_LT_LT_EQ reduce production function_call_expression -> array_expression
-- On T_LT_LT reduce production function_call_expression -> array_expression
-- On T_LT_GT reduce production function_call_expression -> array_expression
-- On T_LT_EQ reduce production function_call_expression -> array_expression
-- On T_LT reduce production function_call_expression -> array_expression
-- On T_INSTANCEOF reduce production function_call_expression -> array_expression
-- On T_GT_GT_EQ reduce production function_call_expression -> array_expression
-- On T_GT_GT reduce production function_call_expression -> array_expression
-- On T_GT_EQ reduce production function_call_expression -> array_expression
-- On T_GT reduce production function_call_expression -> array_expression
-- On T_EXCL_EQ_EQ reduce production function_call_expression -> array_expression
-- On T_EXCL_EQ reduce production function_call_expression -> array_expression
-- On T_EQ_EQ_EQ reduce production function_call_expression -> array_expression
-- On T_EQ_EQ reduce production function_call_expression -> array_expression
-- On T_EQ reduce production function_call_expression -> array_expression
-- On T_DOT_EQ reduce production function_call_expression -> array_expression
-- On T_DOT reduce production function_call_expression -> array_expression
-- On T_COMMA reduce production function_call_expression -> array_expression
-- On T_COLON reduce production function_call_expression -> array_expression
-- On T_CARET_EQ reduce production function_call_expression -> array_expression
-- On T_CARET reduce production function_call_expression -> array_expression
-- On T_BAR_EQ reduce production function_call_expression -> array_expression
-- On T_BAR_2 reduce production function_call_expression -> array_expression
-- On T_BAR reduce production function_call_expression -> array_expression
-- On T_ASTERISK_EQ reduce production function_call_expression -> array_expression
-- On T_ASTERISK reduce production function_call_expression -> array_expression
-- On T_AND reduce production function_call_expression -> array_expression
-- On T_AMPERSAND_EQ reduce production function_call_expression -> array_expression
-- On T_AMPERSAND_2 reduce production function_call_expression -> array_expression
-- On T_AMPERSAND reduce production function_call_expression -> array_expression

State 60:
## Known stack suffix:
## array_expression T_LPAREN
## LR(1) items:
function_call_expression_basic -> array_expression T_LPAREN . expression_list T_RPAREN [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 160
-- On logical_or_expression_weak shift to state 166
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On expression_list shift to state 172
-- On expression shift to state 174
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:
-- On T_RPAREN reduce production expression_list ->

State 61:
## Known stack suffix:
## T_LPAREN
## LR(1) items:
atomic_expression_noiv -> T_LPAREN . expression T_RPAREN [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
unary_expression -> T_LPAREN . predefined_type T_RPAREN crement_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_STRING shift to state 62
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_INT shift to state 63
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_FLOAT shift to state 64
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On T_BOOL shift to state 72
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On predefined_type shift to state 157
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 160
-- On logical_or_expression_weak shift to state 166
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On expression shift to state 170
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 62:
## Known stack suffix:
## T_STRING
## LR(1) items:
predefined_type -> T_STRING . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production predefined_type -> T_STRING

State 63:
## Known stack suffix:
## T_INT
## LR(1) items:
predefined_type -> T_INT . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production predefined_type -> T_INT

State 64:
## Known stack suffix:
## T_FLOAT
## LR(1) items:
predefined_type -> T_FLOAT . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production predefined_type -> T_FLOAT

State 65:
## Known stack suffix:
## T_EXCLAMATION
## LR(1) items:
logical_not_expression -> T_EXCLAMATION . logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 69
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
## Reductions:

State 66:
## Known stack suffix:
## unary_expression
## LR(1) items:
instanceof_expression -> unary_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
instanceof_expression -> unary_expression . T_INSTANCEOF identifier [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_INSTANCEOF shift to state 67
## Reductions:
-- On T_XOR reduce production instanceof_expression -> unary_expression
-- On T_SLASH_EQ reduce production instanceof_expression -> unary_expression
-- On T_SLASH reduce production instanceof_expression -> unary_expression
-- On T_SEMICOLON reduce production instanceof_expression -> unary_expression
-- On T_RPAREN reduce production instanceof_expression -> unary_expression
-- On T_RBRACS reduce production instanceof_expression -> unary_expression
-- On T_QUESTION reduce production instanceof_expression -> unary_expression
-- On T_PLUS_EQ reduce production instanceof_expression -> unary_expression
-- On T_PLUS reduce production instanceof_expression -> unary_expression
-- On T_PERCENT_EQ reduce production instanceof_expression -> unary_expression
-- On T_PERCENT reduce production instanceof_expression -> unary_expression
-- On T_OR reduce production instanceof_expression -> unary_expression
-- On T_MINUS_EQ reduce production instanceof_expression -> unary_expression
-- On T_MINUS reduce production instanceof_expression -> unary_expression
-- On T_LT_LT_EQ reduce production instanceof_expression -> unary_expression
-- On T_LT_LT reduce production instanceof_expression -> unary_expression
-- On T_LT_GT reduce production instanceof_expression -> unary_expression
-- On T_LT_EQ reduce production instanceof_expression -> unary_expression
-- On T_LT reduce production instanceof_expression -> unary_expression
-- On T_GT_GT_EQ reduce production instanceof_expression -> unary_expression
-- On T_GT_GT reduce production instanceof_expression -> unary_expression
-- On T_GT_EQ reduce production instanceof_expression -> unary_expression
-- On T_GT reduce production instanceof_expression -> unary_expression
-- On T_EXCL_EQ_EQ reduce production instanceof_expression -> unary_expression
-- On T_EXCL_EQ reduce production instanceof_expression -> unary_expression
-- On T_EQ_EQ_EQ reduce production instanceof_expression -> unary_expression
-- On T_EQ_EQ reduce production instanceof_expression -> unary_expression
-- On T_EQ reduce production instanceof_expression -> unary_expression
-- On T_DOT_EQ reduce production instanceof_expression -> unary_expression
-- On T_DOT reduce production instanceof_expression -> unary_expression
-- On T_COMMA reduce production instanceof_expression -> unary_expression
-- On T_COLON reduce production instanceof_expression -> unary_expression
-- On T_CARET_EQ reduce production instanceof_expression -> unary_expression
-- On T_CARET reduce production instanceof_expression -> unary_expression
-- On T_BAR_EQ reduce production instanceof_expression -> unary_expression
-- On T_BAR_2 reduce production instanceof_expression -> unary_expression
-- On T_BAR reduce production instanceof_expression -> unary_expression
-- On T_ASTERISK_EQ reduce production instanceof_expression -> unary_expression
-- On T_ASTERISK reduce production instanceof_expression -> unary_expression
-- On T_AND reduce production instanceof_expression -> unary_expression
-- On T_AMPERSAND_EQ reduce production instanceof_expression -> unary_expression
-- On T_AMPERSAND_2 reduce production instanceof_expression -> unary_expression
-- On T_AMPERSAND reduce production instanceof_expression -> unary_expression

State 67:
## Known stack suffix:
## unary_expression T_INSTANCEOF
## LR(1) items:
instanceof_expression -> unary_expression T_INSTANCEOF . identifier [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On identifier shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## unary_expression T_INSTANCEOF identifier
## LR(1) items:
instanceof_expression -> unary_expression T_INSTANCEOF identifier . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instanceof_expression -> unary_expression T_INSTANCEOF identifier

State 69:
## Known stack suffix:
## T_EXCLAMATION logical_not_expression
## LR(1) items:
logical_not_expression -> T_EXCLAMATION logical_not_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logical_not_expression -> T_EXCLAMATION logical_not_expression

State 70:
## Known stack suffix:
## instanceof_expression
## LR(1) items:
logical_not_expression -> instanceof_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logical_not_expression -> instanceof_expression

State 71:
## Known stack suffix:
## crement_expression
## LR(1) items:
unary_expression -> crement_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> crement_expression

State 72:
## Known stack suffix:
## T_BOOL
## LR(1) items:
predefined_type -> T_BOOL . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production predefined_type -> T_BOOL

State 73:
## Known stack suffix:
## ternary_choice_expression
## LR(1) items:
assignment_expression -> ternary_choice_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
assignment_expression -> ternary_choice_expression . T_EQ assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
assignment_expression -> ternary_choice_expression . T_PLUS_EQ assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
assignment_expression -> ternary_choice_expression . T_MINUS_EQ assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
assignment_expression -> ternary_choice_expression . T_ASTERISK_EQ assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
assignment_expression -> ternary_choice_expression . T_SLASH_EQ assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
assignment_expression -> ternary_choice_expression . T_DOT_EQ assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
assignment_expression -> ternary_choice_expression . T_PERCENT_EQ assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
assignment_expression -> ternary_choice_expression . T_AMPERSAND_EQ assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
assignment_expression -> ternary_choice_expression . T_BAR_EQ assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
assignment_expression -> ternary_choice_expression . T_CARET_EQ assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
assignment_expression -> ternary_choice_expression . T_LT_LT_EQ assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
assignment_expression -> ternary_choice_expression . T_GT_GT_EQ assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
-- On T_SLASH_EQ shift to state 74
-- On T_PLUS_EQ shift to state 135
-- On T_PERCENT_EQ shift to state 137
-- On T_MINUS_EQ shift to state 139
-- On T_LT_LT_EQ shift to state 141
-- On T_GT_GT_EQ shift to state 143
-- On T_EQ shift to state 145
-- On T_DOT_EQ shift to state 147
-- On T_CARET_EQ shift to state 149
-- On T_BAR_EQ shift to state 151
-- On T_ASTERISK_EQ shift to state 153
-- On T_AMPERSAND_EQ shift to state 155
## Reductions:
-- On T_XOR reduce production assignment_expression -> ternary_choice_expression
-- On T_SEMICOLON reduce production assignment_expression -> ternary_choice_expression
-- On T_RPAREN reduce production assignment_expression -> ternary_choice_expression
-- On T_RBRACS reduce production assignment_expression -> ternary_choice_expression
-- On T_OR reduce production assignment_expression -> ternary_choice_expression
-- On T_COMMA reduce production assignment_expression -> ternary_choice_expression
-- On T_COLON reduce production assignment_expression -> ternary_choice_expression
-- On T_AND reduce production assignment_expression -> ternary_choice_expression

State 74:
## Known stack suffix:
## ternary_choice_expression T_SLASH_EQ
## LR(1) items:
assignment_expression -> ternary_choice_expression T_SLASH_EQ . assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 134
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 75:
## Known stack suffix:
## shift_expression
## LR(1) items:
comparison_expression -> shift_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
comparison_expression -> shift_expression . T_LT shift_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
comparison_expression -> shift_expression . T_LT_EQ shift_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
comparison_expression -> shift_expression . T_GT shift_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
comparison_expression -> shift_expression . T_GT_EQ shift_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
comparison_expression -> shift_expression . T_LT_GT shift_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> shift_expression . T_LT_LT arithmetic_string_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> shift_expression . T_GT_GT arithmetic_string_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_LT_LT shift to state 76
-- On T_LT_GT shift to state 92
-- On T_LT_EQ shift to state 97
-- On T_LT shift to state 99
-- On T_GT_GT shift to state 94
-- On T_GT_EQ shift to state 101
-- On T_GT shift to state 103
## Reductions:
-- On T_XOR reduce production comparison_expression -> shift_expression
-- On T_SLASH_EQ reduce production comparison_expression -> shift_expression
-- On T_SEMICOLON reduce production comparison_expression -> shift_expression
-- On T_RPAREN reduce production comparison_expression -> shift_expression
-- On T_RBRACS reduce production comparison_expression -> shift_expression
-- On T_QUESTION reduce production comparison_expression -> shift_expression
-- On T_PLUS_EQ reduce production comparison_expression -> shift_expression
-- On T_PERCENT_EQ reduce production comparison_expression -> shift_expression
-- On T_OR reduce production comparison_expression -> shift_expression
-- On T_MINUS_EQ reduce production comparison_expression -> shift_expression
-- On T_LT_LT_EQ reduce production comparison_expression -> shift_expression
-- On T_GT_GT_EQ reduce production comparison_expression -> shift_expression
-- On T_EXCL_EQ_EQ reduce production comparison_expression -> shift_expression
-- On T_EXCL_EQ reduce production comparison_expression -> shift_expression
-- On T_EQ_EQ_EQ reduce production comparison_expression -> shift_expression
-- On T_EQ_EQ reduce production comparison_expression -> shift_expression
-- On T_EQ reduce production comparison_expression -> shift_expression
-- On T_DOT_EQ reduce production comparison_expression -> shift_expression
-- On T_COMMA reduce production comparison_expression -> shift_expression
-- On T_COLON reduce production comparison_expression -> shift_expression
-- On T_CARET_EQ reduce production comparison_expression -> shift_expression
-- On T_CARET reduce production comparison_expression -> shift_expression
-- On T_BAR_EQ reduce production comparison_expression -> shift_expression
-- On T_BAR_2 reduce production comparison_expression -> shift_expression
-- On T_BAR reduce production comparison_expression -> shift_expression
-- On T_ASTERISK_EQ reduce production comparison_expression -> shift_expression
-- On T_AND reduce production comparison_expression -> shift_expression
-- On T_AMPERSAND_EQ reduce production comparison_expression -> shift_expression
-- On T_AMPERSAND_2 reduce production comparison_expression -> shift_expression
-- On T_AMPERSAND reduce production comparison_expression -> shift_expression

State 76:
## Known stack suffix:
## shift_expression T_LT_LT
## LR(1) items:
shift_expression -> shift_expression T_LT_LT . arithmetic_string_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 78
-- On arithmetic_expression shift to state 91
## Reductions:

State 77:
## Known stack suffix:
## logical_not_expression
## LR(1) items:
arithmetic_expression -> logical_not_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arithmetic_expression -> logical_not_expression

State 78:
## Known stack suffix:
## shift_expression T_LT_LT arithmetic_string_expression
## LR(1) items:
arithmetic_string_expression -> arithmetic_string_expression . T_PLUS arithmetic_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_string_expression -> arithmetic_string_expression . T_MINUS arithmetic_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_string_expression -> arithmetic_string_expression . T_DOT arithmetic_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> shift_expression T_LT_LT arithmetic_string_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_PLUS shift to state 79
-- On T_MINUS shift to state 87
-- On T_DOT shift to state 89
## Reductions:
-- On T_XOR reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_SLASH_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_SEMICOLON reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_RPAREN reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_RBRACS reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_QUESTION reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_PLUS_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_PERCENT_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_OR reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_MINUS_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_LT_LT_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_LT_LT reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_LT_GT reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_LT_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_LT reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_GT_GT_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_GT_GT reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_GT_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_GT reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_EXCL_EQ_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_EXCL_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_EQ_EQ_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_EQ_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_DOT_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_COMMA reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_COLON reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_CARET_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_CARET reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_BAR_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_BAR_2 reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_BAR reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_ASTERISK_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_AND reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_AMPERSAND_EQ reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_AMPERSAND_2 reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression
-- On T_AMPERSAND reduce production shift_expression -> shift_expression T_LT_LT arithmetic_string_expression

State 79:
## Known stack suffix:
## arithmetic_string_expression T_PLUS
## LR(1) items:
arithmetic_string_expression -> arithmetic_string_expression T_PLUS . arithmetic_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_expression shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## arithmetic_string_expression T_PLUS arithmetic_expression
## LR(1) items:
arithmetic_expression -> arithmetic_expression . T_ASTERISK logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_expression -> arithmetic_expression . T_SLASH logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_expression -> arithmetic_expression . T_PERCENT logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_SLASH shift to state 81
-- On T_PERCENT shift to state 83
-- On T_ASTERISK shift to state 85
## Reductions:
-- On T_XOR reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_SLASH_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_SEMICOLON reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_RPAREN reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_RBRACS reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_QUESTION reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_PLUS_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_PLUS reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_PERCENT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_OR reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_MINUS_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_MINUS reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_LT_LT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_LT_LT reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_LT_GT reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_LT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_LT reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_GT_GT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_GT_GT reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_GT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_GT reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_EXCL_EQ_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_EXCL_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_EQ_EQ_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_EQ_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_DOT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_DOT reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_COMMA reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_COLON reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_CARET_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_CARET reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_BAR_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_BAR_2 reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_BAR reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_ASTERISK_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_AND reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_AMPERSAND_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_AMPERSAND_2 reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression
-- On T_AMPERSAND reduce production arithmetic_string_expression -> arithmetic_string_expression T_PLUS arithmetic_expression

State 81:
## Known stack suffix:
## arithmetic_expression T_SLASH
## LR(1) items:
arithmetic_expression -> arithmetic_expression T_SLASH . logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 82
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
## Reductions:

State 82:
## Known stack suffix:
## arithmetic_expression T_SLASH logical_not_expression
## LR(1) items:
arithmetic_expression -> arithmetic_expression T_SLASH logical_not_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arithmetic_expression -> arithmetic_expression T_SLASH logical_not_expression

State 83:
## Known stack suffix:
## arithmetic_expression T_PERCENT
## LR(1) items:
arithmetic_expression -> arithmetic_expression T_PERCENT . logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 84
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
## Reductions:

State 84:
## Known stack suffix:
## arithmetic_expression T_PERCENT logical_not_expression
## LR(1) items:
arithmetic_expression -> arithmetic_expression T_PERCENT logical_not_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arithmetic_expression -> arithmetic_expression T_PERCENT logical_not_expression

State 85:
## Known stack suffix:
## arithmetic_expression T_ASTERISK
## LR(1) items:
arithmetic_expression -> arithmetic_expression T_ASTERISK . logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 86
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
## Reductions:

State 86:
## Known stack suffix:
## arithmetic_expression T_ASTERISK logical_not_expression
## LR(1) items:
arithmetic_expression -> arithmetic_expression T_ASTERISK logical_not_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arithmetic_expression -> arithmetic_expression T_ASTERISK logical_not_expression

State 87:
## Known stack suffix:
## arithmetic_string_expression T_MINUS
## LR(1) items:
arithmetic_string_expression -> arithmetic_string_expression T_MINUS . arithmetic_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_expression shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## arithmetic_string_expression T_MINUS arithmetic_expression
## LR(1) items:
arithmetic_expression -> arithmetic_expression . T_ASTERISK logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_expression -> arithmetic_expression . T_SLASH logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_expression -> arithmetic_expression . T_PERCENT logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_SLASH shift to state 81
-- On T_PERCENT shift to state 83
-- On T_ASTERISK shift to state 85
## Reductions:
-- On T_XOR reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_SLASH_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_SEMICOLON reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_RPAREN reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_RBRACS reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_QUESTION reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_PLUS_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_PLUS reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_PERCENT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_OR reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_MINUS_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_MINUS reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_LT_LT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_LT_LT reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_LT_GT reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_LT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_LT reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_GT_GT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_GT_GT reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_GT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_GT reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_EXCL_EQ_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_EXCL_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_EQ_EQ_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_EQ_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_DOT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_DOT reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_COMMA reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_COLON reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_CARET_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_CARET reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_BAR_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_BAR_2 reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_BAR reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_ASTERISK_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_AND reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_AMPERSAND_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_AMPERSAND_2 reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression
-- On T_AMPERSAND reduce production arithmetic_string_expression -> arithmetic_string_expression T_MINUS arithmetic_expression

State 89:
## Known stack suffix:
## arithmetic_string_expression T_DOT
## LR(1) items:
arithmetic_string_expression -> arithmetic_string_expression T_DOT . arithmetic_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_expression shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## arithmetic_string_expression T_DOT arithmetic_expression
## LR(1) items:
arithmetic_expression -> arithmetic_expression . T_ASTERISK logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_expression -> arithmetic_expression . T_SLASH logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_expression -> arithmetic_expression . T_PERCENT logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_SLASH shift to state 81
-- On T_PERCENT shift to state 83
-- On T_ASTERISK shift to state 85
## Reductions:
-- On T_XOR reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_SLASH_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_SEMICOLON reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_RPAREN reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_RBRACS reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_QUESTION reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_PLUS_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_PLUS reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_PERCENT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_OR reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_MINUS_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_MINUS reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_LT_LT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_LT_LT reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_LT_GT reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_LT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_LT reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_GT_GT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_GT_GT reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_GT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_GT reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_EXCL_EQ_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_EXCL_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_EQ_EQ_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_EQ_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_DOT_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_DOT reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_COMMA reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_COLON reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_CARET_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_CARET reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_BAR_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_BAR_2 reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_BAR reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_ASTERISK_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_AND reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_AMPERSAND_EQ reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_AMPERSAND_2 reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression
-- On T_AMPERSAND reduce production arithmetic_string_expression -> arithmetic_string_expression T_DOT arithmetic_expression

State 91:
## Known stack suffix:
## arithmetic_expression
## LR(1) items:
arithmetic_expression -> arithmetic_expression . T_ASTERISK logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_expression -> arithmetic_expression . T_SLASH logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_expression -> arithmetic_expression . T_PERCENT logical_not_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_string_expression -> arithmetic_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_SLASH shift to state 81
-- On T_PERCENT shift to state 83
-- On T_ASTERISK shift to state 85
## Reductions:
-- On T_XOR reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_SLASH_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_SEMICOLON reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_RPAREN reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_RBRACS reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_QUESTION reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_PLUS_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_PLUS reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_PERCENT_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_OR reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_MINUS_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_MINUS reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_LT_LT_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_LT_LT reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_LT_GT reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_LT_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_LT reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_GT_GT_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_GT_GT reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_GT_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_GT reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_EXCL_EQ_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_EXCL_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_EQ_EQ_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_EQ_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_DOT_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_DOT reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_COMMA reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_COLON reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_CARET_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_CARET reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_BAR_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_BAR_2 reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_BAR reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_ASTERISK_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_AND reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_AMPERSAND_EQ reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_AMPERSAND_2 reduce production arithmetic_string_expression -> arithmetic_expression
-- On T_AMPERSAND reduce production arithmetic_string_expression -> arithmetic_expression

State 92:
## Known stack suffix:
## shift_expression T_LT_GT
## LR(1) items:
comparison_expression -> shift_expression T_LT_GT . shift_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 93
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 93:
## Known stack suffix:
## shift_expression T_LT_GT shift_expression
## LR(1) items:
comparison_expression -> shift_expression T_LT_GT shift_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> shift_expression . T_LT_LT arithmetic_string_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_GT_GT_EQ T_GT_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> shift_expression . T_GT_GT arithmetic_string_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_GT_GT_EQ T_GT_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_LT_LT shift to state 76
-- On T_GT_GT shift to state 94
## Reductions:
-- On T_XOR reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_SLASH_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_SEMICOLON reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_RPAREN reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_RBRACS reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_QUESTION reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_PLUS_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_PERCENT_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_OR reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_MINUS_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_LT_LT_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_GT_GT_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_EXCL_EQ_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_EXCL_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_EQ_EQ_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_EQ_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_DOT_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_COMMA reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_COLON reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_CARET_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_CARET reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_BAR_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_BAR_2 reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_BAR reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_ASTERISK_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_AND reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_AMPERSAND_EQ reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_AMPERSAND_2 reduce production comparison_expression -> shift_expression T_LT_GT shift_expression
-- On T_AMPERSAND reduce production comparison_expression -> shift_expression T_LT_GT shift_expression

State 94:
## Known stack suffix:
## shift_expression T_GT_GT
## LR(1) items:
shift_expression -> shift_expression T_GT_GT . arithmetic_string_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 95
-- On arithmetic_expression shift to state 91
## Reductions:

State 95:
## Known stack suffix:
## shift_expression T_GT_GT arithmetic_string_expression
## LR(1) items:
arithmetic_string_expression -> arithmetic_string_expression . T_PLUS arithmetic_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_string_expression -> arithmetic_string_expression . T_MINUS arithmetic_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_string_expression -> arithmetic_string_expression . T_DOT arithmetic_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> shift_expression T_GT_GT arithmetic_string_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_PLUS shift to state 79
-- On T_MINUS shift to state 87
-- On T_DOT shift to state 89
## Reductions:
-- On T_XOR reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_SLASH_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_SEMICOLON reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_RPAREN reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_RBRACS reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_QUESTION reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_PLUS_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_PERCENT_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_OR reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_MINUS_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_LT_LT_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_LT_LT reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_LT_GT reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_LT_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_LT reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_GT_GT_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_GT_GT reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_GT_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_GT reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_EXCL_EQ_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_EXCL_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_EQ_EQ_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_EQ_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_DOT_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_COMMA reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_COLON reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_CARET_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_CARET reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_BAR_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_BAR_2 reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_BAR reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_ASTERISK_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_AND reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_AMPERSAND_EQ reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_AMPERSAND_2 reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression
-- On T_AMPERSAND reduce production shift_expression -> shift_expression T_GT_GT arithmetic_string_expression

State 96:
## Known stack suffix:
## arithmetic_string_expression
## LR(1) items:
arithmetic_string_expression -> arithmetic_string_expression . T_PLUS arithmetic_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_string_expression -> arithmetic_string_expression . T_MINUS arithmetic_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
arithmetic_string_expression -> arithmetic_string_expression . T_DOT arithmetic_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> arithmetic_string_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_PLUS shift to state 79
-- On T_MINUS shift to state 87
-- On T_DOT shift to state 89
## Reductions:
-- On T_XOR reduce production shift_expression -> arithmetic_string_expression
-- On T_SLASH_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_SEMICOLON reduce production shift_expression -> arithmetic_string_expression
-- On T_RPAREN reduce production shift_expression -> arithmetic_string_expression
-- On T_RBRACS reduce production shift_expression -> arithmetic_string_expression
-- On T_QUESTION reduce production shift_expression -> arithmetic_string_expression
-- On T_PLUS_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_PERCENT_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_OR reduce production shift_expression -> arithmetic_string_expression
-- On T_MINUS_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_LT_LT_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_LT_LT reduce production shift_expression -> arithmetic_string_expression
-- On T_LT_GT reduce production shift_expression -> arithmetic_string_expression
-- On T_LT_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_LT reduce production shift_expression -> arithmetic_string_expression
-- On T_GT_GT_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_GT_GT reduce production shift_expression -> arithmetic_string_expression
-- On T_GT_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_GT reduce production shift_expression -> arithmetic_string_expression
-- On T_EXCL_EQ_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_EXCL_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_EQ_EQ_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_EQ_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_DOT_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_COMMA reduce production shift_expression -> arithmetic_string_expression
-- On T_COLON reduce production shift_expression -> arithmetic_string_expression
-- On T_CARET_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_CARET reduce production shift_expression -> arithmetic_string_expression
-- On T_BAR_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_BAR_2 reduce production shift_expression -> arithmetic_string_expression
-- On T_BAR reduce production shift_expression -> arithmetic_string_expression
-- On T_ASTERISK_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_AND reduce production shift_expression -> arithmetic_string_expression
-- On T_AMPERSAND_EQ reduce production shift_expression -> arithmetic_string_expression
-- On T_AMPERSAND_2 reduce production shift_expression -> arithmetic_string_expression
-- On T_AMPERSAND reduce production shift_expression -> arithmetic_string_expression

State 97:
## Known stack suffix:
## shift_expression T_LT_EQ
## LR(1) items:
comparison_expression -> shift_expression T_LT_EQ . shift_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 98
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 98:
## Known stack suffix:
## shift_expression T_LT_EQ shift_expression
## LR(1) items:
comparison_expression -> shift_expression T_LT_EQ shift_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> shift_expression . T_LT_LT arithmetic_string_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_GT_GT_EQ T_GT_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> shift_expression . T_GT_GT arithmetic_string_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_GT_GT_EQ T_GT_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_LT_LT shift to state 76
-- On T_GT_GT shift to state 94
## Reductions:
-- On T_XOR reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_SLASH_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_SEMICOLON reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_RPAREN reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_RBRACS reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_QUESTION reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_PLUS_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_PERCENT_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_OR reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_MINUS_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_LT_LT_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_GT_GT_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_EXCL_EQ_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_EXCL_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_EQ_EQ_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_EQ_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_DOT_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_COMMA reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_COLON reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_CARET_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_CARET reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_BAR_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_BAR_2 reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_BAR reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_ASTERISK_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_AND reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_AMPERSAND_EQ reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_AMPERSAND_2 reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression
-- On T_AMPERSAND reduce production comparison_expression -> shift_expression T_LT_EQ shift_expression

State 99:
## Known stack suffix:
## shift_expression T_LT
## LR(1) items:
comparison_expression -> shift_expression T_LT . shift_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 100
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 100:
## Known stack suffix:
## shift_expression T_LT shift_expression
## LR(1) items:
comparison_expression -> shift_expression T_LT shift_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> shift_expression . T_LT_LT arithmetic_string_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_GT_GT_EQ T_GT_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> shift_expression . T_GT_GT arithmetic_string_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_GT_GT_EQ T_GT_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_LT_LT shift to state 76
-- On T_GT_GT shift to state 94
## Reductions:
-- On T_XOR reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_SLASH_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_SEMICOLON reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_RPAREN reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_RBRACS reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_QUESTION reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_PLUS_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_PERCENT_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_OR reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_MINUS_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_LT_LT_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_GT_GT_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_EXCL_EQ_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_EXCL_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_EQ_EQ_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_EQ_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_DOT_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_COMMA reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_COLON reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_CARET_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_CARET reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_BAR_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_BAR_2 reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_BAR reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_ASTERISK_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_AND reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_AMPERSAND_EQ reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_AMPERSAND_2 reduce production comparison_expression -> shift_expression T_LT shift_expression
-- On T_AMPERSAND reduce production comparison_expression -> shift_expression T_LT shift_expression

State 101:
## Known stack suffix:
## shift_expression T_GT_EQ
## LR(1) items:
comparison_expression -> shift_expression T_GT_EQ . shift_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 102
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 102:
## Known stack suffix:
## shift_expression T_GT_EQ shift_expression
## LR(1) items:
comparison_expression -> shift_expression T_GT_EQ shift_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> shift_expression . T_LT_LT arithmetic_string_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_GT_GT_EQ T_GT_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> shift_expression . T_GT_GT arithmetic_string_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_GT_GT_EQ T_GT_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_LT_LT shift to state 76
-- On T_GT_GT shift to state 94
## Reductions:
-- On T_XOR reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_SLASH_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_SEMICOLON reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_RPAREN reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_RBRACS reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_QUESTION reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_PLUS_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_PERCENT_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_OR reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_MINUS_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_LT_LT_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_GT_GT_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_EXCL_EQ_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_EXCL_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_EQ_EQ_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_EQ_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_DOT_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_COMMA reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_COLON reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_CARET_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_CARET reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_BAR_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_BAR_2 reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_BAR reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_ASTERISK_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_AND reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_AMPERSAND_EQ reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_AMPERSAND_2 reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression
-- On T_AMPERSAND reduce production comparison_expression -> shift_expression T_GT_EQ shift_expression

State 103:
## Known stack suffix:
## shift_expression T_GT
## LR(1) items:
comparison_expression -> shift_expression T_GT . shift_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 104
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 104:
## Known stack suffix:
## shift_expression T_GT shift_expression
## LR(1) items:
comparison_expression -> shift_expression T_GT shift_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> shift_expression . T_LT_LT arithmetic_string_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_GT_GT_EQ T_GT_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
shift_expression -> shift_expression . T_GT_GT arithmetic_string_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_LT_LT T_GT_GT_EQ T_GT_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_LT_LT shift to state 76
-- On T_GT_GT shift to state 94
## Reductions:
-- On T_XOR reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_SLASH_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_SEMICOLON reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_RPAREN reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_RBRACS reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_QUESTION reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_PLUS_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_PERCENT_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_OR reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_MINUS_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_LT_LT_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_GT_GT_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_EXCL_EQ_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_EXCL_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_EQ_EQ_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_EQ_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_DOT_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_COMMA reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_COLON reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_CARET_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_CARET reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_BAR_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_BAR_2 reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_BAR reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_ASTERISK_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_AND reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_AMPERSAND_EQ reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_AMPERSAND_2 reduce production comparison_expression -> shift_expression T_GT shift_expression
-- On T_AMPERSAND reduce production comparison_expression -> shift_expression T_GT shift_expression

State 105:
## Known stack suffix:
## logical_or_expression_strong
## LR(1) items:
logical_or_expression_strong -> logical_or_expression_strong . T_BAR_2 logical_and_expression_strong [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_ASTERISK_EQ T_AND T_AMPERSAND_EQ ]
ternary_choice_expression -> logical_or_expression_strong . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_ASTERISK_EQ T_AND T_AMPERSAND_EQ ]
ternary_choice_expression -> logical_or_expression_strong . T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_ASTERISK_EQ T_AND T_AMPERSAND_EQ ]
## Transitions:
-- On T_QUESTION shift to state 106
-- On T_BAR_2 shift to state 110
## Reductions:
-- On T_XOR reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_SLASH_EQ reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_SEMICOLON reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_RPAREN reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_RBRACS reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_PLUS_EQ reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_PERCENT_EQ reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_OR reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_MINUS_EQ reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_LT_LT_EQ reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_GT_GT_EQ reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_EQ reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_DOT_EQ reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_COMMA reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_COLON reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_CARET_EQ reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_BAR_EQ reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_ASTERISK_EQ reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_AND reduce production ternary_choice_expression -> logical_or_expression_strong
-- On T_AMPERSAND_EQ reduce production ternary_choice_expression -> logical_or_expression_strong

State 106:
## Known stack suffix:
## logical_or_expression_strong T_QUESTION
## LR(1) items:
ternary_choice_expression -> logical_or_expression_strong T_QUESTION . logical_or_expression_strong T_COLON logical_or_expression_strong [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_ASTERISK_EQ T_AND T_AMPERSAND_EQ ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 107
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 107:
## Known stack suffix:
## logical_or_expression_strong T_QUESTION logical_or_expression_strong
## LR(1) items:
logical_or_expression_strong -> logical_or_expression_strong . T_BAR_2 logical_and_expression_strong [ T_COLON T_BAR_2 ]
ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong . T_COLON logical_or_expression_strong [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_ASTERISK_EQ T_AND T_AMPERSAND_EQ ]
## Transitions:
-- On T_COLON shift to state 108
-- On T_BAR_2 shift to state 110
## Reductions:

State 108:
## Known stack suffix:
## logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON
## LR(1) items:
ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON . logical_or_expression_strong [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_ASTERISK_EQ T_AND T_AMPERSAND_EQ ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 109
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 109:
## Known stack suffix:
## logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
## LR(1) items:
logical_or_expression_strong -> logical_or_expression_strong . T_BAR_2 logical_and_expression_strong [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_ASTERISK_EQ T_AND T_AMPERSAND_EQ ]
ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_ASTERISK_EQ T_AND T_AMPERSAND_EQ ]
## Transitions:
-- On T_BAR_2 shift to state 110
## Reductions:
-- On T_XOR reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_SLASH_EQ reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_SEMICOLON reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_RPAREN reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_RBRACS reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_PLUS_EQ reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_PERCENT_EQ reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_OR reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_MINUS_EQ reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_LT_LT_EQ reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_GT_GT_EQ reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_EQ reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_DOT_EQ reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_COMMA reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_COLON reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_CARET_EQ reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_BAR_EQ reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_ASTERISK_EQ reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_AND reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong
-- On T_AMPERSAND_EQ reduce production ternary_choice_expression -> logical_or_expression_strong T_QUESTION logical_or_expression_strong T_COLON logical_or_expression_strong

State 110:
## Known stack suffix:
## logical_or_expression_strong T_BAR_2
## LR(1) items:
logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 . logical_and_expression_strong [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_ASTERISK_EQ T_AND T_AMPERSAND_EQ ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 111
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 111:
## Known stack suffix:
## logical_or_expression_strong T_BAR_2 logical_and_expression_strong
## LR(1) items:
logical_and_expression_strong -> logical_and_expression_strong . T_AMPERSAND_2 bitwise_or_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_ASTERISK_EQ T_AND T_AMPERSAND_EQ ]
## Transitions:
-- On T_AMPERSAND_2 shift to state 112
## Reductions:
-- On T_XOR reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_SLASH_EQ reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_SEMICOLON reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_RPAREN reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_RBRACS reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_QUESTION reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_PLUS_EQ reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_PERCENT_EQ reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_OR reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_MINUS_EQ reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_LT_LT_EQ reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_GT_GT_EQ reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_EQ reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_DOT_EQ reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_COMMA reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_COLON reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_CARET_EQ reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_BAR_EQ reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_BAR_2 reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_ASTERISK_EQ reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_AND reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong
-- On T_AMPERSAND_EQ reduce production logical_or_expression_strong -> logical_or_expression_strong T_BAR_2 logical_and_expression_strong

State 112:
## Known stack suffix:
## logical_and_expression_strong T_AMPERSAND_2
## LR(1) items:
logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 . bitwise_or_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 128
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 113:
## Known stack suffix:
## comparison_expression_weak
## LR(1) items:
bitwise_and_expression -> comparison_expression_weak . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bitwise_and_expression -> comparison_expression_weak

State 114:
## Known stack suffix:
## comparison_expression
## LR(1) items:
comparison_expression_weak -> comparison_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
comparison_expression_weak -> comparison_expression . T_EQ_EQ comparison_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
comparison_expression_weak -> comparison_expression . T_EXCL_EQ comparison_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
comparison_expression_weak -> comparison_expression . T_EQ_EQ_EQ comparison_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
comparison_expression_weak -> comparison_expression . T_EXCL_EQ_EQ comparison_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_EXCL_EQ_EQ shift to state 115
-- On T_EXCL_EQ shift to state 117
-- On T_EQ_EQ_EQ shift to state 119
-- On T_EQ_EQ shift to state 121
## Reductions:
-- On T_XOR reduce production comparison_expression_weak -> comparison_expression
-- On T_SLASH_EQ reduce production comparison_expression_weak -> comparison_expression
-- On T_SEMICOLON reduce production comparison_expression_weak -> comparison_expression
-- On T_RPAREN reduce production comparison_expression_weak -> comparison_expression
-- On T_RBRACS reduce production comparison_expression_weak -> comparison_expression
-- On T_QUESTION reduce production comparison_expression_weak -> comparison_expression
-- On T_PLUS_EQ reduce production comparison_expression_weak -> comparison_expression
-- On T_PERCENT_EQ reduce production comparison_expression_weak -> comparison_expression
-- On T_OR reduce production comparison_expression_weak -> comparison_expression
-- On T_MINUS_EQ reduce production comparison_expression_weak -> comparison_expression
-- On T_LT_LT_EQ reduce production comparison_expression_weak -> comparison_expression
-- On T_GT_GT_EQ reduce production comparison_expression_weak -> comparison_expression
-- On T_EQ reduce production comparison_expression_weak -> comparison_expression
-- On T_DOT_EQ reduce production comparison_expression_weak -> comparison_expression
-- On T_COMMA reduce production comparison_expression_weak -> comparison_expression
-- On T_COLON reduce production comparison_expression_weak -> comparison_expression
-- On T_CARET_EQ reduce production comparison_expression_weak -> comparison_expression
-- On T_CARET reduce production comparison_expression_weak -> comparison_expression
-- On T_BAR_EQ reduce production comparison_expression_weak -> comparison_expression
-- On T_BAR_2 reduce production comparison_expression_weak -> comparison_expression
-- On T_BAR reduce production comparison_expression_weak -> comparison_expression
-- On T_ASTERISK_EQ reduce production comparison_expression_weak -> comparison_expression
-- On T_AND reduce production comparison_expression_weak -> comparison_expression
-- On T_AMPERSAND_EQ reduce production comparison_expression_weak -> comparison_expression
-- On T_AMPERSAND_2 reduce production comparison_expression_weak -> comparison_expression
-- On T_AMPERSAND reduce production comparison_expression_weak -> comparison_expression

State 115:
## Known stack suffix:
## comparison_expression T_EXCL_EQ_EQ
## LR(1) items:
comparison_expression_weak -> comparison_expression T_EXCL_EQ_EQ . comparison_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression shift to state 116
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 116:
## Known stack suffix:
## comparison_expression T_EXCL_EQ_EQ comparison_expression
## LR(1) items:
comparison_expression_weak -> comparison_expression T_EXCL_EQ_EQ comparison_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production comparison_expression_weak -> comparison_expression T_EXCL_EQ_EQ comparison_expression

State 117:
## Known stack suffix:
## comparison_expression T_EXCL_EQ
## LR(1) items:
comparison_expression_weak -> comparison_expression T_EXCL_EQ . comparison_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression shift to state 118
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 118:
## Known stack suffix:
## comparison_expression T_EXCL_EQ comparison_expression
## LR(1) items:
comparison_expression_weak -> comparison_expression T_EXCL_EQ comparison_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production comparison_expression_weak -> comparison_expression T_EXCL_EQ comparison_expression

State 119:
## Known stack suffix:
## comparison_expression T_EQ_EQ_EQ
## LR(1) items:
comparison_expression_weak -> comparison_expression T_EQ_EQ_EQ . comparison_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression shift to state 120
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 120:
## Known stack suffix:
## comparison_expression T_EQ_EQ_EQ comparison_expression
## LR(1) items:
comparison_expression_weak -> comparison_expression T_EQ_EQ_EQ comparison_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production comparison_expression_weak -> comparison_expression T_EQ_EQ_EQ comparison_expression

State 121:
## Known stack suffix:
## comparison_expression T_EQ_EQ
## LR(1) items:
comparison_expression_weak -> comparison_expression T_EQ_EQ . comparison_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression shift to state 122
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 122:
## Known stack suffix:
## comparison_expression T_EQ_EQ comparison_expression
## LR(1) items:
comparison_expression_weak -> comparison_expression T_EQ_EQ comparison_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production comparison_expression_weak -> comparison_expression T_EQ_EQ comparison_expression

State 123:
## Known stack suffix:
## bitwise_xor_expression
## LR(1) items:
bitwise_or_expression -> bitwise_xor_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
bitwise_xor_expression -> bitwise_xor_expression . T_CARET bitwise_and_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
## Transitions:
-- On T_CARET shift to state 124
## Reductions:
-- On T_XOR reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_SLASH_EQ reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_SEMICOLON reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_RPAREN reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_RBRACS reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_QUESTION reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_PLUS_EQ reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_PERCENT_EQ reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_OR reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_MINUS_EQ reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_LT_LT_EQ reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_GT_GT_EQ reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_EQ reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_DOT_EQ reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_COMMA reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_COLON reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_CARET_EQ reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_BAR_EQ reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_BAR_2 reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_BAR reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_ASTERISK_EQ reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_AND reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_AMPERSAND_EQ reduce production bitwise_or_expression -> bitwise_xor_expression
-- On T_AMPERSAND_2 reduce production bitwise_or_expression -> bitwise_xor_expression

State 124:
## Known stack suffix:
## bitwise_xor_expression T_CARET
## LR(1) items:
bitwise_xor_expression -> bitwise_xor_expression T_CARET . bitwise_and_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_and_expression shift to state 125
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 125:
## Known stack suffix:
## bitwise_xor_expression T_CARET bitwise_and_expression
## LR(1) items:
bitwise_and_expression -> bitwise_and_expression . T_AMPERSAND comparison_expression_weak [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
## Transitions:
-- On T_AMPERSAND shift to state 126
## Reductions:
-- On T_XOR reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_SLASH_EQ reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_SEMICOLON reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_RPAREN reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_RBRACS reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_QUESTION reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_PLUS_EQ reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_PERCENT_EQ reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_OR reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_MINUS_EQ reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_LT_LT_EQ reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_GT_GT_EQ reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_EQ reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_DOT_EQ reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_COMMA reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_COLON reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_CARET_EQ reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_CARET reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_BAR_EQ reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_BAR_2 reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_BAR reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_ASTERISK_EQ reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_AND reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_AMPERSAND_EQ reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression
-- On T_AMPERSAND_2 reduce production bitwise_xor_expression -> bitwise_xor_expression T_CARET bitwise_and_expression

State 126:
## Known stack suffix:
## bitwise_and_expression T_AMPERSAND
## LR(1) items:
bitwise_and_expression -> bitwise_and_expression T_AMPERSAND . comparison_expression_weak [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 127
-- On comparison_expression shift to state 114
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 127:
## Known stack suffix:
## bitwise_and_expression T_AMPERSAND comparison_expression_weak
## LR(1) items:
bitwise_and_expression -> bitwise_and_expression T_AMPERSAND comparison_expression_weak . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bitwise_and_expression -> bitwise_and_expression T_AMPERSAND comparison_expression_weak

State 128:
## Known stack suffix:
## logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
## LR(1) items:
bitwise_or_expression -> bitwise_or_expression . T_BAR bitwise_xor_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
## Transitions:
-- On T_BAR shift to state 129
## Reductions:
-- On T_XOR reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_SLASH_EQ reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_SEMICOLON reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_RPAREN reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_RBRACS reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_QUESTION reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_PLUS_EQ reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_PERCENT_EQ reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_OR reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_MINUS_EQ reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_LT_LT_EQ reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_GT_GT_EQ reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_EQ reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_DOT_EQ reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_COMMA reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_COLON reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_CARET_EQ reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_BAR_EQ reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_BAR_2 reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_ASTERISK_EQ reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_AND reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_AMPERSAND_EQ reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression
-- On T_AMPERSAND_2 reduce production logical_and_expression_strong -> logical_and_expression_strong T_AMPERSAND_2 bitwise_or_expression

State 129:
## Known stack suffix:
## bitwise_or_expression T_BAR
## LR(1) items:
bitwise_or_expression -> bitwise_or_expression T_BAR . bitwise_xor_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_not_expression shift to state 77
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 130
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 130:
## Known stack suffix:
## bitwise_or_expression T_BAR bitwise_xor_expression
## LR(1) items:
bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
bitwise_xor_expression -> bitwise_xor_expression . T_CARET bitwise_and_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
## Transitions:
-- On T_CARET shift to state 124
## Reductions:
-- On T_XOR reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_SLASH_EQ reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_SEMICOLON reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_RPAREN reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_RBRACS reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_QUESTION reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_PLUS_EQ reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_PERCENT_EQ reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_OR reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_MINUS_EQ reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_LT_LT_EQ reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_GT_GT_EQ reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_EQ reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_DOT_EQ reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_COMMA reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_COLON reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_CARET_EQ reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_BAR_EQ reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_BAR_2 reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_BAR reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_ASTERISK_EQ reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_AND reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_AMPERSAND_EQ reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression
-- On T_AMPERSAND_2 reduce production bitwise_or_expression -> bitwise_or_expression T_BAR bitwise_xor_expression

State 131:
## Known stack suffix:
## bitwise_and_expression
## LR(1) items:
bitwise_and_expression -> bitwise_and_expression . T_AMPERSAND comparison_expression_weak [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
bitwise_xor_expression -> bitwise_and_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
## Transitions:
-- On T_AMPERSAND shift to state 126
## Reductions:
-- On T_XOR reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_SLASH_EQ reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_SEMICOLON reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_RPAREN reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_RBRACS reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_QUESTION reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_PLUS_EQ reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_PERCENT_EQ reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_OR reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_MINUS_EQ reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_LT_LT_EQ reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_GT_GT_EQ reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_EQ reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_DOT_EQ reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_COMMA reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_COLON reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_CARET_EQ reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_CARET reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_BAR_EQ reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_BAR_2 reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_BAR reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_ASTERISK_EQ reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_AND reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_AMPERSAND_EQ reduce production bitwise_xor_expression -> bitwise_and_expression
-- On T_AMPERSAND_2 reduce production bitwise_xor_expression -> bitwise_and_expression

State 132:
## Known stack suffix:
## bitwise_or_expression
## LR(1) items:
bitwise_or_expression -> bitwise_or_expression . T_BAR bitwise_xor_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
logical_and_expression_strong -> bitwise_or_expression . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
## Transitions:
-- On T_BAR shift to state 129
## Reductions:
-- On T_XOR reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_SLASH_EQ reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_SEMICOLON reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_RPAREN reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_RBRACS reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_QUESTION reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_PLUS_EQ reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_PERCENT_EQ reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_OR reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_MINUS_EQ reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_LT_LT_EQ reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_GT_GT_EQ reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_EQ reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_DOT_EQ reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_COMMA reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_COLON reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_CARET_EQ reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_BAR_EQ reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_BAR_2 reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_ASTERISK_EQ reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_AND reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_AMPERSAND_EQ reduce production logical_and_expression_strong -> bitwise_or_expression
-- On T_AMPERSAND_2 reduce production logical_and_expression_strong -> bitwise_or_expression

State 133:
## Known stack suffix:
## logical_and_expression_strong
## LR(1) items:
logical_and_expression_strong -> logical_and_expression_strong . T_AMPERSAND_2 bitwise_or_expression [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_ASTERISK_EQ T_AND T_AMPERSAND_EQ T_AMPERSAND_2 ]
logical_or_expression_strong -> logical_and_expression_strong . [ T_XOR T_SLASH_EQ T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PERCENT_EQ T_OR T_MINUS_EQ T_LT_LT_EQ T_GT_GT_EQ T_EQ T_DOT_EQ T_COMMA T_COLON T_CARET_EQ T_BAR_EQ T_BAR_2 T_ASTERISK_EQ T_AND T_AMPERSAND_EQ ]
## Transitions:
-- On T_AMPERSAND_2 shift to state 112
## Reductions:
-- On T_XOR reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_SLASH_EQ reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_SEMICOLON reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_RPAREN reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_RBRACS reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_QUESTION reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_PLUS_EQ reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_PERCENT_EQ reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_OR reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_MINUS_EQ reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_LT_LT_EQ reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_GT_GT_EQ reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_EQ reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_DOT_EQ reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_COMMA reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_COLON reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_CARET_EQ reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_BAR_EQ reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_BAR_2 reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_ASTERISK_EQ reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_AND reduce production logical_or_expression_strong -> logical_and_expression_strong
-- On T_AMPERSAND_EQ reduce production logical_or_expression_strong -> logical_and_expression_strong

State 134:
## Known stack suffix:
## ternary_choice_expression T_SLASH_EQ assignment_expression
## LR(1) items:
assignment_expression -> ternary_choice_expression T_SLASH_EQ assignment_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> ternary_choice_expression T_SLASH_EQ assignment_expression

State 135:
## Known stack suffix:
## ternary_choice_expression T_PLUS_EQ
## LR(1) items:
assignment_expression -> ternary_choice_expression T_PLUS_EQ . assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 136
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 136:
## Known stack suffix:
## ternary_choice_expression T_PLUS_EQ assignment_expression
## LR(1) items:
assignment_expression -> ternary_choice_expression T_PLUS_EQ assignment_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> ternary_choice_expression T_PLUS_EQ assignment_expression

State 137:
## Known stack suffix:
## ternary_choice_expression T_PERCENT_EQ
## LR(1) items:
assignment_expression -> ternary_choice_expression T_PERCENT_EQ . assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 138
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 138:
## Known stack suffix:
## ternary_choice_expression T_PERCENT_EQ assignment_expression
## LR(1) items:
assignment_expression -> ternary_choice_expression T_PERCENT_EQ assignment_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> ternary_choice_expression T_PERCENT_EQ assignment_expression

State 139:
## Known stack suffix:
## ternary_choice_expression T_MINUS_EQ
## LR(1) items:
assignment_expression -> ternary_choice_expression T_MINUS_EQ . assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 140
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 140:
## Known stack suffix:
## ternary_choice_expression T_MINUS_EQ assignment_expression
## LR(1) items:
assignment_expression -> ternary_choice_expression T_MINUS_EQ assignment_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> ternary_choice_expression T_MINUS_EQ assignment_expression

State 141:
## Known stack suffix:
## ternary_choice_expression T_LT_LT_EQ
## LR(1) items:
assignment_expression -> ternary_choice_expression T_LT_LT_EQ . assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 142
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 142:
## Known stack suffix:
## ternary_choice_expression T_LT_LT_EQ assignment_expression
## LR(1) items:
assignment_expression -> ternary_choice_expression T_LT_LT_EQ assignment_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> ternary_choice_expression T_LT_LT_EQ assignment_expression

State 143:
## Known stack suffix:
## ternary_choice_expression T_GT_GT_EQ
## LR(1) items:
assignment_expression -> ternary_choice_expression T_GT_GT_EQ . assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 144
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 144:
## Known stack suffix:
## ternary_choice_expression T_GT_GT_EQ assignment_expression
## LR(1) items:
assignment_expression -> ternary_choice_expression T_GT_GT_EQ assignment_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> ternary_choice_expression T_GT_GT_EQ assignment_expression

State 145:
## Known stack suffix:
## ternary_choice_expression T_EQ
## LR(1) items:
assignment_expression -> ternary_choice_expression T_EQ . assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 146
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 146:
## Known stack suffix:
## ternary_choice_expression T_EQ assignment_expression
## LR(1) items:
assignment_expression -> ternary_choice_expression T_EQ assignment_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> ternary_choice_expression T_EQ assignment_expression

State 147:
## Known stack suffix:
## ternary_choice_expression T_DOT_EQ
## LR(1) items:
assignment_expression -> ternary_choice_expression T_DOT_EQ . assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 148
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 148:
## Known stack suffix:
## ternary_choice_expression T_DOT_EQ assignment_expression
## LR(1) items:
assignment_expression -> ternary_choice_expression T_DOT_EQ assignment_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> ternary_choice_expression T_DOT_EQ assignment_expression

State 149:
## Known stack suffix:
## ternary_choice_expression T_CARET_EQ
## LR(1) items:
assignment_expression -> ternary_choice_expression T_CARET_EQ . assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 150
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 150:
## Known stack suffix:
## ternary_choice_expression T_CARET_EQ assignment_expression
## LR(1) items:
assignment_expression -> ternary_choice_expression T_CARET_EQ assignment_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> ternary_choice_expression T_CARET_EQ assignment_expression

State 151:
## Known stack suffix:
## ternary_choice_expression T_BAR_EQ
## LR(1) items:
assignment_expression -> ternary_choice_expression T_BAR_EQ . assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 152
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 152:
## Known stack suffix:
## ternary_choice_expression T_BAR_EQ assignment_expression
## LR(1) items:
assignment_expression -> ternary_choice_expression T_BAR_EQ assignment_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> ternary_choice_expression T_BAR_EQ assignment_expression

State 153:
## Known stack suffix:
## ternary_choice_expression T_ASTERISK_EQ
## LR(1) items:
assignment_expression -> ternary_choice_expression T_ASTERISK_EQ . assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 154
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 154:
## Known stack suffix:
## ternary_choice_expression T_ASTERISK_EQ assignment_expression
## LR(1) items:
assignment_expression -> ternary_choice_expression T_ASTERISK_EQ assignment_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> ternary_choice_expression T_ASTERISK_EQ assignment_expression

State 155:
## Known stack suffix:
## ternary_choice_expression T_AMPERSAND_EQ
## LR(1) items:
assignment_expression -> ternary_choice_expression T_AMPERSAND_EQ . assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 156
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 156:
## Known stack suffix:
## ternary_choice_expression T_AMPERSAND_EQ assignment_expression
## LR(1) items:
assignment_expression -> ternary_choice_expression T_AMPERSAND_EQ assignment_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> ternary_choice_expression T_AMPERSAND_EQ assignment_expression

State 157:
## Known stack suffix:
## T_LPAREN predefined_type
## LR(1) items:
unary_expression -> T_LPAREN predefined_type . T_RPAREN crement_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_RPAREN shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## T_LPAREN predefined_type T_RPAREN
## LR(1) items:
unary_expression -> T_LPAREN predefined_type T_RPAREN . crement_expression [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_LPAREN shift to state 30
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On static_reference_chain_noiv shift to state 42
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On literal shift to state 46
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 159
-- On constant_literal shift to state 56
-- On atomic_expression_noiv shift to state 57
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
## Reductions:

State 159:
## Known stack suffix:
## T_LPAREN predefined_type T_RPAREN crement_expression
## LR(1) items:
unary_expression -> T_LPAREN predefined_type T_RPAREN crement_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> T_LPAREN predefined_type T_RPAREN crement_expression

State 160:
## Known stack suffix:
## logical_xor_expression_weak
## LR(1) items:
logical_or_expression_weak -> logical_xor_expression_weak . [ T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON ]
logical_xor_expression_weak -> logical_xor_expression_weak . T_XOR logical_and_expression_weak [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON ]
## Transitions:
-- On T_XOR shift to state 161
## Reductions:
-- On T_SEMICOLON reduce production logical_or_expression_weak -> logical_xor_expression_weak
-- On T_RPAREN reduce production logical_or_expression_weak -> logical_xor_expression_weak
-- On T_RBRACS reduce production logical_or_expression_weak -> logical_xor_expression_weak
-- On T_OR reduce production logical_or_expression_weak -> logical_xor_expression_weak
-- On T_COMMA reduce production logical_or_expression_weak -> logical_xor_expression_weak
-- On T_COLON reduce production logical_or_expression_weak -> logical_xor_expression_weak

State 161:
## Known stack suffix:
## logical_xor_expression_weak T_XOR
## LR(1) items:
logical_xor_expression_weak -> logical_xor_expression_weak T_XOR . logical_and_expression_weak [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 162
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 162:
## Known stack suffix:
## logical_xor_expression_weak T_XOR logical_and_expression_weak
## LR(1) items:
logical_and_expression_weak -> logical_and_expression_weak . T_AND assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
logical_xor_expression_weak -> logical_xor_expression_weak T_XOR logical_and_expression_weak . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON ]
## Transitions:
-- On T_AND shift to state 163
## Reductions:
-- On T_XOR reduce production logical_xor_expression_weak -> logical_xor_expression_weak T_XOR logical_and_expression_weak
-- On T_SEMICOLON reduce production logical_xor_expression_weak -> logical_xor_expression_weak T_XOR logical_and_expression_weak
-- On T_RPAREN reduce production logical_xor_expression_weak -> logical_xor_expression_weak T_XOR logical_and_expression_weak
-- On T_RBRACS reduce production logical_xor_expression_weak -> logical_xor_expression_weak T_XOR logical_and_expression_weak
-- On T_OR reduce production logical_xor_expression_weak -> logical_xor_expression_weak T_XOR logical_and_expression_weak
-- On T_COMMA reduce production logical_xor_expression_weak -> logical_xor_expression_weak T_XOR logical_and_expression_weak
-- On T_COLON reduce production logical_xor_expression_weak -> logical_xor_expression_weak T_XOR logical_and_expression_weak

State 163:
## Known stack suffix:
## logical_and_expression_weak T_AND
## LR(1) items:
logical_and_expression_weak -> logical_and_expression_weak T_AND . assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 164
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 164:
## Known stack suffix:
## logical_and_expression_weak T_AND assignment_expression
## LR(1) items:
logical_and_expression_weak -> logical_and_expression_weak T_AND assignment_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logical_and_expression_weak -> logical_and_expression_weak T_AND assignment_expression

State 165:
## Known stack suffix:
## assignment_expression
## LR(1) items:
logical_and_expression_weak -> assignment_expression . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logical_and_expression_weak -> assignment_expression

State 166:
## Known stack suffix:
## logical_or_expression_weak
## LR(1) items:
expression -> logical_or_expression_weak . [ T_SEMICOLON T_RPAREN T_RBRACS T_COMMA T_COLON ]
logical_or_expression_weak -> logical_or_expression_weak . T_OR logical_xor_expression_weak [ T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON ]
## Transitions:
-- On T_OR shift to state 167
## Reductions:
-- On T_SEMICOLON reduce production expression -> logical_or_expression_weak
-- On T_RPAREN reduce production expression -> logical_or_expression_weak
-- On T_RBRACS reduce production expression -> logical_or_expression_weak
-- On T_COMMA reduce production expression -> logical_or_expression_weak
-- On T_COLON reduce production expression -> logical_or_expression_weak

State 167:
## Known stack suffix:
## logical_or_expression_weak T_OR
## LR(1) items:
logical_or_expression_weak -> logical_or_expression_weak T_OR . logical_xor_expression_weak [ T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 168
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 168:
## Known stack suffix:
## logical_or_expression_weak T_OR logical_xor_expression_weak
## LR(1) items:
logical_or_expression_weak -> logical_or_expression_weak T_OR logical_xor_expression_weak . [ T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON ]
logical_xor_expression_weak -> logical_xor_expression_weak . T_XOR logical_and_expression_weak [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON ]
## Transitions:
-- On T_XOR shift to state 161
## Reductions:
-- On T_SEMICOLON reduce production logical_or_expression_weak -> logical_or_expression_weak T_OR logical_xor_expression_weak
-- On T_RPAREN reduce production logical_or_expression_weak -> logical_or_expression_weak T_OR logical_xor_expression_weak
-- On T_RBRACS reduce production logical_or_expression_weak -> logical_or_expression_weak T_OR logical_xor_expression_weak
-- On T_OR reduce production logical_or_expression_weak -> logical_or_expression_weak T_OR logical_xor_expression_weak
-- On T_COMMA reduce production logical_or_expression_weak -> logical_or_expression_weak T_OR logical_xor_expression_weak
-- On T_COLON reduce production logical_or_expression_weak -> logical_or_expression_weak T_OR logical_xor_expression_weak

State 169:
## Known stack suffix:
## logical_and_expression_weak
## LR(1) items:
logical_and_expression_weak -> logical_and_expression_weak . T_AND assignment_expression [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON T_AND ]
logical_xor_expression_weak -> logical_and_expression_weak . [ T_XOR T_SEMICOLON T_RPAREN T_RBRACS T_OR T_COMMA T_COLON ]
## Transitions:
-- On T_AND shift to state 163
## Reductions:
-- On T_XOR reduce production logical_xor_expression_weak -> logical_and_expression_weak
-- On T_SEMICOLON reduce production logical_xor_expression_weak -> logical_and_expression_weak
-- On T_RPAREN reduce production logical_xor_expression_weak -> logical_and_expression_weak
-- On T_RBRACS reduce production logical_xor_expression_weak -> logical_and_expression_weak
-- On T_OR reduce production logical_xor_expression_weak -> logical_and_expression_weak
-- On T_COMMA reduce production logical_xor_expression_weak -> logical_and_expression_weak
-- On T_COLON reduce production logical_xor_expression_weak -> logical_and_expression_weak

State 170:
## Known stack suffix:
## T_LPAREN expression
## LR(1) items:
atomic_expression_noiv -> T_LPAREN expression . T_RPAREN [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_RPAREN shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## T_LPAREN expression T_RPAREN
## LR(1) items:
atomic_expression_noiv -> T_LPAREN expression T_RPAREN . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expression_noiv -> T_LPAREN expression T_RPAREN

State 172:
## Known stack suffix:
## array_expression T_LPAREN expression_list
## LR(1) items:
function_call_expression_basic -> array_expression T_LPAREN expression_list . T_RPAREN [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_RPAREN shift to state 173
## Reductions:

State 173:
## Known stack suffix:
## array_expression T_LPAREN expression_list T_RPAREN
## LR(1) items:
function_call_expression_basic -> array_expression T_LPAREN expression_list T_RPAREN . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_call_expression_basic -> array_expression T_LPAREN expression_list T_RPAREN

State 174:
## Known stack suffix:
## expression
## LR(1) items:
expression_list -> expression . expression_list_suffx [ T_RPAREN ]
## Transitions:
-- On T_COMMA shift to state 175
-- On expression_list_suffx shift to state 178
## Reductions:
-- On T_RPAREN reduce production expression_list_suffx ->

State 175:
## Known stack suffix:
## T_COMMA
## LR(1) items:
expression_list_suffx -> T_COMMA . expression expression_list_suffx [ T_RPAREN ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 160
-- On logical_or_expression_weak shift to state 166
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On expression shift to state 176
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 176:
## Known stack suffix:
## T_COMMA expression
## LR(1) items:
expression_list_suffx -> T_COMMA expression . expression_list_suffx [ T_RPAREN ]
## Transitions:
-- On T_COMMA shift to state 175
-- On expression_list_suffx shift to state 177
## Reductions:
-- On T_RPAREN reduce production expression_list_suffx ->

State 177:
## Known stack suffix:
## T_COMMA expression expression_list_suffx
## LR(1) items:
expression_list_suffx -> T_COMMA expression expression_list_suffx . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression_list_suffx -> T_COMMA expression expression_list_suffx

State 178:
## Known stack suffix:
## expression expression_list_suffx
## LR(1) items:
expression_list -> expression expression_list_suffx . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression_list -> expression expression_list_suffx

State 179:
## Known stack suffix:
## array_expression T_LBRACS
## LR(1) items:
array_expression_noiv -> array_expression T_LBRACS . expression T_RBRACS [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 160
-- On logical_or_expression_weak shift to state 166
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On expression shift to state 180
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 180:
## Known stack suffix:
## array_expression T_LBRACS expression
## LR(1) items:
array_expression_noiv -> array_expression T_LBRACS expression . T_RBRACS [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_RBRACS shift to state 181
## Reductions:

State 181:
## Known stack suffix:
## array_expression T_LBRACS expression T_RBRACS
## LR(1) items:
array_expression_noiv -> array_expression T_LBRACS expression T_RBRACS . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_expression_noiv -> array_expression T_LBRACS expression T_RBRACS

State 182:
## Known stack suffix:
## T_MINUS_2 function_call_expression
## LR(1) items:
crement_expression -> T_MINUS_2 function_call_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production crement_expression -> T_MINUS_2 function_call_expression

State 183:
## Known stack suffix:
## T_PLUS crement_expression
## LR(1) items:
unary_expression -> T_PLUS crement_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> T_PLUS crement_expression

State 184:
## Known stack suffix:
## T_NEW identifier T_LPAREN expression_list
## LR(1) items:
new_expression_noiv -> T_NEW identifier T_LPAREN expression_list . T_RPAREN [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
-- On T_RPAREN shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## T_NEW identifier T_LPAREN expression_list T_RPAREN
## LR(1) items:
new_expression_noiv -> T_NEW identifier T_LPAREN expression_list T_RPAREN . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_RARROW T_QUESTION T_PLUS_EQ T_PLUS_2 T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS_2 T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_LPAREN T_LBRACS T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production new_expression_noiv -> T_NEW identifier T_LPAREN expression_list T_RPAREN

State 186:
## Known stack suffix:
## T_PLUS_2 function_call_expression
## LR(1) items:
crement_expression -> T_PLUS_2 function_call_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production crement_expression -> T_PLUS_2 function_call_expression

State 187:
## Known stack suffix:
## T_TILDE crement_expression
## LR(1) items:
unary_expression -> T_TILDE crement_expression . [ T_XOR T_SLASH_EQ T_SLASH T_SEMICOLON T_RPAREN T_RBRACS T_QUESTION T_PLUS_EQ T_PLUS T_PERCENT_EQ T_PERCENT T_OR T_MINUS_EQ T_MINUS T_LT_LT_EQ T_LT_LT T_LT_GT T_LT_EQ T_LT T_INSTANCEOF T_GT_GT_EQ T_GT_GT T_GT_EQ T_GT T_EXCL_EQ_EQ T_EXCL_EQ T_EQ_EQ_EQ T_EQ_EQ T_EQ T_DOT_EQ T_DOT T_COMMA T_COLON T_CARET_EQ T_CARET T_BAR_EQ T_BAR_2 T_BAR T_ASTERISK_EQ T_ASTERISK T_AND T_AMPERSAND_EQ T_AMPERSAND_2 T_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> T_TILDE crement_expression

State 188:
## Known stack suffix:
## T_THROW expression
## LR(1) items:
throw_statement -> T_THROW expression . T_SEMICOLON [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_SEMICOLON shift to state 189
## Reductions:

State 189:
## Known stack suffix:
## T_THROW expression T_SEMICOLON
## LR(1) items:
throw_statement -> T_THROW expression T_SEMICOLON . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production throw_statement -> T_THROW expression T_SEMICOLON

State 190:
## Known stack suffix:
## T_SWITCH
## LR(1) items:
switch_statement -> T_SWITCH . T_LPAREN expression T_RPAREN T_LBRACC switch_item_list T_RBRACC [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_LPAREN shift to state 191
## Reductions:

State 191:
## Known stack suffix:
## T_SWITCH T_LPAREN
## LR(1) items:
switch_statement -> T_SWITCH T_LPAREN . expression T_RPAREN T_LBRACC switch_item_list T_RBRACC [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 160
-- On logical_or_expression_weak shift to state 166
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On expression shift to state 192
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 192:
## Known stack suffix:
## T_SWITCH T_LPAREN expression
## LR(1) items:
switch_statement -> T_SWITCH T_LPAREN expression . T_RPAREN T_LBRACC switch_item_list T_RBRACC [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_RPAREN shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## T_SWITCH T_LPAREN expression T_RPAREN
## LR(1) items:
switch_statement -> T_SWITCH T_LPAREN expression T_RPAREN . T_LBRACC switch_item_list T_RBRACC [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_LBRACC shift to state 194
## Reductions:

State 194:
## Known stack suffix:
## T_SWITCH T_LPAREN expression T_RPAREN T_LBRACC
## LR(1) items:
switch_statement -> T_SWITCH T_LPAREN expression T_RPAREN T_LBRACC . switch_item_list T_RBRACC [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_DEFAULT shift to state 195
-- On T_CASE shift to state 244
-- On switch_item_list shift to state 248
-- On switch_default shift to state 250
-- On switch_case shift to state 251
## Reductions:
-- On T_RBRACC reduce production switch_item_list ->

State 195:
## Known stack suffix:
## T_DEFAULT
## LR(1) items:
switch_default -> T_DEFAULT . switch_item_sepa statement_list [ T_RBRACC ]
## Transitions:
-- On T_SEMICOLON shift to state 196
-- On T_COLON shift to state 197
-- On switch_item_sepa shift to state 198
## Reductions:

State 196:
## Known stack suffix:
## T_SEMICOLON
## LR(1) items:
switch_item_sepa -> T_SEMICOLON . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CASE T_BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_item_sepa -> T_SEMICOLON

State 197:
## Known stack suffix:
## T_COLON
## LR(1) items:
switch_item_sepa -> T_COLON . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CASE T_BREAK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_item_sepa -> T_COLON

State 198:
## Known stack suffix:
## T_DEFAULT switch_item_sepa
## LR(1) items:
switch_default -> T_DEFAULT switch_item_sepa . statement_list [ T_RBRACC ]
## Transitions:
-- On T_TRY shift to state 2
-- On T_THROW shift to state 4
-- On T_SWITCH shift to state 190
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_RETURN shift to state 199
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_LPAREN shift to state 30
-- On T_LBRACC shift to state 3
-- On T_INT_LITERAL shift to state 32
-- On T_IF shift to state 202
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On T_BREAK shift to state 206
-- On variable_declaration shift to state 208
-- On variable shift to state 209
-- On try_catch_statement shift to state 214
-- On throw_statement shift to state 215
-- On switch_statement shift to state 216
-- On static_reference_chain_noiv shift to state 42
-- On statement_no_unmatched_if shift to state 240
-- On statement_list shift to state 241
-- On statement shift to state 242
-- On simple_statement shift to state 220
-- On return_statement shift to state 221
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On lvalue_novariable shift to state 222
-- On literal shift to state 46
-- On if_statement_unmatched shift to state 239
-- On if_statement_matched shift to state 227
-- On identifier shift to state 228
-- On function_call_statement shift to state 229
-- On function_call_expression_basic shift to state 230
-- On constant_literal shift to state 56
-- On compound_statement_no_unmatched_if shift to state 232
-- On break_statement shift to state 233
-- On block_statement shift to state 234
-- On atomic_expression_noiv shift to state 57
-- On assignment_statement shift to state 235
-- On array_expression_noiv shift to state 236
-- On array_expression shift to state 237
## Reductions:
-- On T_RBRACC reduce production statement_list ->

State 199:
## Known stack suffix:
## T_RETURN
## LR(1) items:
return_statement -> T_RETURN . expression T_SEMICOLON [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 160
-- On logical_or_expression_weak shift to state 166
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On expression shift to state 200
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 200:
## Known stack suffix:
## T_RETURN expression
## LR(1) items:
return_statement -> T_RETURN expression . T_SEMICOLON [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_SEMICOLON shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## T_RETURN expression T_SEMICOLON
## LR(1) items:
return_statement -> T_RETURN expression T_SEMICOLON . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production return_statement -> T_RETURN expression T_SEMICOLON

State 202:
## Known stack suffix:
## T_IF
## LR(1) items:
if_statement_matched -> T_IF . T_LPAREN expression T_RPAREN statement_no_unmatched_if T_ELSE statement_no_unmatched_if [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
if_statement_unmatched -> T_IF . T_LPAREN expression T_RPAREN statement [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
if_statement_unmatched -> T_IF . T_LPAREN expression T_RPAREN statement_no_unmatched_if T_ELSE if_statement_unmatched [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_LPAREN shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## T_IF T_LPAREN
## LR(1) items:
if_statement_matched -> T_IF T_LPAREN . expression T_RPAREN statement_no_unmatched_if T_ELSE statement_no_unmatched_if [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
if_statement_unmatched -> T_IF T_LPAREN . expression T_RPAREN statement [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
if_statement_unmatched -> T_IF T_LPAREN . expression T_RPAREN statement_no_unmatched_if T_ELSE if_statement_unmatched [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 160
-- On logical_or_expression_weak shift to state 166
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On expression shift to state 204
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 204:
## Known stack suffix:
## T_IF T_LPAREN expression
## LR(1) items:
if_statement_matched -> T_IF T_LPAREN expression . T_RPAREN statement_no_unmatched_if T_ELSE statement_no_unmatched_if [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
if_statement_unmatched -> T_IF T_LPAREN expression . T_RPAREN statement [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
if_statement_unmatched -> T_IF T_LPAREN expression . T_RPAREN statement_no_unmatched_if T_ELSE if_statement_unmatched [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_RPAREN shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## T_IF T_LPAREN expression T_RPAREN
## LR(1) items:
if_statement_matched -> T_IF T_LPAREN expression T_RPAREN . statement_no_unmatched_if T_ELSE statement_no_unmatched_if [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
if_statement_unmatched -> T_IF T_LPAREN expression T_RPAREN . statement [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
if_statement_unmatched -> T_IF T_LPAREN expression T_RPAREN . statement_no_unmatched_if T_ELSE if_statement_unmatched [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_TRY shift to state 2
-- On T_THROW shift to state 4
-- On T_SWITCH shift to state 190
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_RETURN shift to state 199
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_LPAREN shift to state 30
-- On T_LBRACC shift to state 3
-- On T_INT_LITERAL shift to state 32
-- On T_IF shift to state 202
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On T_BREAK shift to state 206
-- On variable_declaration shift to state 208
-- On variable shift to state 209
-- On try_catch_statement shift to state 214
-- On throw_statement shift to state 215
-- On switch_statement shift to state 216
-- On static_reference_chain_noiv shift to state 42
-- On statement_no_unmatched_if shift to state 217
-- On statement shift to state 238
-- On simple_statement shift to state 220
-- On return_statement shift to state 221
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On lvalue_novariable shift to state 222
-- On literal shift to state 46
-- On if_statement_unmatched shift to state 239
-- On if_statement_matched shift to state 227
-- On identifier shift to state 228
-- On function_call_statement shift to state 229
-- On function_call_expression_basic shift to state 230
-- On constant_literal shift to state 56
-- On compound_statement_no_unmatched_if shift to state 232
-- On break_statement shift to state 233
-- On block_statement shift to state 234
-- On atomic_expression_noiv shift to state 57
-- On assignment_statement shift to state 235
-- On array_expression_noiv shift to state 236
-- On array_expression shift to state 237
## Reductions:

State 206:
## Known stack suffix:
## T_BREAK
## LR(1) items:
break_statement -> T_BREAK . T_SEMICOLON [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_SEMICOLON shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## T_BREAK T_SEMICOLON
## LR(1) items:
break_statement -> T_BREAK T_SEMICOLON . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production break_statement -> T_BREAK T_SEMICOLON

State 208:
## Known stack suffix:
## variable_declaration
## LR(1) items:
simple_statement -> variable_declaration . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_statement -> variable_declaration

State 209:
## Known stack suffix:
## variable
## LR(1) items:
array_expression -> variable . [ T_LPAREN T_LBRACS ]
object_member_expression_noiv -> variable . nonempty_rarrow_chain [ T_LPAREN T_LBRACS T_EQ ]
variable_declaration -> variable . T_SEMICOLON [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
variable_declaration -> variable . T_EQ expression T_SEMICOLON [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_SEMICOLON shift to state 210
-- On T_EQ shift to state 211
-- On rarrow_chain shift to state 38
-- On nonempty_rarrow_chain shift to state 41
## Reductions:
-- On T_RARROW reduce production rarrow_chain ->
-- On T_LPAREN reduce production array_expression -> variable
-- On T_LBRACS reduce production array_expression -> variable

State 210:
## Known stack suffix:
## variable T_SEMICOLON
## LR(1) items:
variable_declaration -> variable T_SEMICOLON . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_STATIC T_SELF T_RETURN T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CONST T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration -> variable T_SEMICOLON

State 211:
## Known stack suffix:
## variable T_EQ
## LR(1) items:
variable_declaration -> variable T_EQ . expression T_SEMICOLON [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_STATIC T_SELF T_RETURN T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CONST T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 160
-- On logical_or_expression_weak shift to state 166
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On expression shift to state 212
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 212:
## Known stack suffix:
## variable T_EQ expression
## LR(1) items:
variable_declaration -> variable T_EQ expression . T_SEMICOLON [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_STATIC T_SELF T_RETURN T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CONST T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_SEMICOLON shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## variable T_EQ expression T_SEMICOLON
## LR(1) items:
variable_declaration -> variable T_EQ expression T_SEMICOLON . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_STATIC T_SELF T_RETURN T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CONST T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration -> variable T_EQ expression T_SEMICOLON

State 214:
## Known stack suffix:
## try_catch_statement
## LR(1) items:
compound_statement_no_unmatched_if -> try_catch_statement . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compound_statement_no_unmatched_if -> try_catch_statement

State 215:
## Known stack suffix:
## throw_statement
## LR(1) items:
simple_statement -> throw_statement . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_statement -> throw_statement

State 216:
## Known stack suffix:
## switch_statement
## LR(1) items:
compound_statement_no_unmatched_if -> switch_statement . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compound_statement_no_unmatched_if -> switch_statement

State 217:
## Known stack suffix:
## T_IF T_LPAREN expression T_RPAREN statement_no_unmatched_if
## LR(1) items:
if_statement_matched -> T_IF T_LPAREN expression T_RPAREN statement_no_unmatched_if . T_ELSE statement_no_unmatched_if [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
if_statement_unmatched -> T_IF T_LPAREN expression T_RPAREN statement_no_unmatched_if . T_ELSE if_statement_unmatched [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
statement -> statement_no_unmatched_if . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_ELSE shift to state 218
## Reductions:
-- On T_TRY reduce production statement -> statement_no_unmatched_if
-- On T_THROW reduce production statement -> statement_no_unmatched_if
-- On T_SWITCH reduce production statement -> statement_no_unmatched_if
-- On T_STRING_LITERAL_S reduce production statement -> statement_no_unmatched_if
-- On T_STRING_LITERAL_D reduce production statement -> statement_no_unmatched_if
-- On T_SELF reduce production statement -> statement_no_unmatched_if
-- On T_RETURN reduce production statement -> statement_no_unmatched_if
-- On T_RBRACC reduce production statement -> statement_no_unmatched_if
-- On T_PHPE reduce production statement -> statement_no_unmatched_if
-- On T_PARENT reduce production statement -> statement_no_unmatched_if
-- On T_NULL reduce production statement -> statement_no_unmatched_if
-- On T_NEW reduce production statement -> statement_no_unmatched_if
-- On T_LPAREN reduce production statement -> statement_no_unmatched_if
-- On T_LBRACC reduce production statement -> statement_no_unmatched_if
-- On T_INT_LITERAL reduce production statement -> statement_no_unmatched_if
-- On T_IF reduce production statement -> statement_no_unmatched_if
-- On T_IDENTIFIER reduce production statement -> statement_no_unmatched_if
-- On T_FUNCTION reduce production statement -> statement_no_unmatched_if
-- On T_FLOAT_LITERAL reduce production statement -> statement_no_unmatched_if
-- On T_DOLLAR reduce production statement -> statement_no_unmatched_if
-- On T_DEFAULT reduce production statement -> statement_no_unmatched_if
-- On T_CLASS reduce production statement -> statement_no_unmatched_if
-- On T_CASE reduce production statement -> statement_no_unmatched_if
-- On T_BREAK reduce production statement -> statement_no_unmatched_if
-- On T_ABSTRACT reduce production statement -> statement_no_unmatched_if

State 218:
## Known stack suffix:
## T_IF T_LPAREN expression T_RPAREN statement_no_unmatched_if T_ELSE
## LR(1) items:
if_statement_matched -> T_IF T_LPAREN expression T_RPAREN statement_no_unmatched_if T_ELSE . statement_no_unmatched_if [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
if_statement_unmatched -> T_IF T_LPAREN expression T_RPAREN statement_no_unmatched_if T_ELSE . if_statement_unmatched [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_TRY shift to state 2
-- On T_THROW shift to state 4
-- On T_SWITCH shift to state 190
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_RETURN shift to state 199
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_LPAREN shift to state 30
-- On T_LBRACC shift to state 3
-- On T_INT_LITERAL shift to state 32
-- On T_IF shift to state 202
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On T_BREAK shift to state 206
-- On variable_declaration shift to state 208
-- On variable shift to state 209
-- On try_catch_statement shift to state 214
-- On throw_statement shift to state 215
-- On switch_statement shift to state 216
-- On static_reference_chain_noiv shift to state 42
-- On statement_no_unmatched_if shift to state 219
-- On simple_statement shift to state 220
-- On return_statement shift to state 221
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On lvalue_novariable shift to state 222
-- On literal shift to state 46
-- On if_statement_unmatched shift to state 226
-- On if_statement_matched shift to state 227
-- On identifier shift to state 228
-- On function_call_statement shift to state 229
-- On function_call_expression_basic shift to state 230
-- On constant_literal shift to state 56
-- On compound_statement_no_unmatched_if shift to state 232
-- On break_statement shift to state 233
-- On block_statement shift to state 234
-- On atomic_expression_noiv shift to state 57
-- On assignment_statement shift to state 235
-- On array_expression_noiv shift to state 236
-- On array_expression shift to state 237
## Reductions:

State 219:
## Known stack suffix:
## T_IF T_LPAREN expression T_RPAREN statement_no_unmatched_if T_ELSE statement_no_unmatched_if
## LR(1) items:
if_statement_matched -> T_IF T_LPAREN expression T_RPAREN statement_no_unmatched_if T_ELSE statement_no_unmatched_if . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_statement_matched -> T_IF T_LPAREN expression T_RPAREN statement_no_unmatched_if T_ELSE statement_no_unmatched_if

State 220:
## Known stack suffix:
## simple_statement
## LR(1) items:
statement_no_unmatched_if -> simple_statement . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_no_unmatched_if -> simple_statement

State 221:
## Known stack suffix:
## return_statement
## LR(1) items:
simple_statement -> return_statement . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_statement -> return_statement

State 222:
## Known stack suffix:
## lvalue_novariable
## LR(1) items:
assignment_statement -> lvalue_novariable . T_EQ expression T_SEMICOLON [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_EQ shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## lvalue_novariable T_EQ
## LR(1) items:
assignment_statement -> lvalue_novariable T_EQ . expression T_SEMICOLON [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 160
-- On logical_or_expression_weak shift to state 166
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On expression shift to state 224
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 224:
## Known stack suffix:
## lvalue_novariable T_EQ expression
## LR(1) items:
assignment_statement -> lvalue_novariable T_EQ expression . T_SEMICOLON [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_SEMICOLON shift to state 225
## Reductions:

State 225:
## Known stack suffix:
## lvalue_novariable T_EQ expression T_SEMICOLON
## LR(1) items:
assignment_statement -> lvalue_novariable T_EQ expression T_SEMICOLON . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_statement -> lvalue_novariable T_EQ expression T_SEMICOLON

State 226:
## Known stack suffix:
## T_IF T_LPAREN expression T_RPAREN statement_no_unmatched_if T_ELSE if_statement_unmatched
## LR(1) items:
if_statement_unmatched -> T_IF T_LPAREN expression T_RPAREN statement_no_unmatched_if T_ELSE if_statement_unmatched . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_statement_unmatched -> T_IF T_LPAREN expression T_RPAREN statement_no_unmatched_if T_ELSE if_statement_unmatched

State 227:
## Known stack suffix:
## if_statement_matched
## LR(1) items:
compound_statement_no_unmatched_if -> if_statement_matched . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compound_statement_no_unmatched_if -> if_statement_matched

State 228:
## Known stack suffix:
## identifier
## LR(1) items:
array_expression -> identifier . [ T_LPAREN T_LBRACS ]
lvalue_novariable -> identifier . [ T_EQ ]
static_reference_chain_noiv -> identifier . T_COLON_2 identifier_variable rarrow_chain [ T_LPAREN T_LBRACS T_EQ ]
## Transitions:
-- On T_COLON_2 shift to state 48
## Reductions:
-- On T_LPAREN reduce production array_expression -> identifier
-- On T_LBRACS reduce production array_expression -> identifier
-- On T_EQ reduce production lvalue_novariable -> identifier

State 229:
## Known stack suffix:
## function_call_statement
## LR(1) items:
simple_statement -> function_call_statement . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_statement -> function_call_statement

State 230:
## Known stack suffix:
## function_call_expression_basic
## LR(1) items:
function_call_statement -> function_call_expression_basic . T_SEMICOLON [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_SEMICOLON shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## function_call_expression_basic T_SEMICOLON
## LR(1) items:
function_call_statement -> function_call_expression_basic T_SEMICOLON . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_call_statement -> function_call_expression_basic T_SEMICOLON

State 232:
## Known stack suffix:
## compound_statement_no_unmatched_if
## LR(1) items:
statement_no_unmatched_if -> compound_statement_no_unmatched_if . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_no_unmatched_if -> compound_statement_no_unmatched_if

State 233:
## Known stack suffix:
## break_statement
## LR(1) items:
simple_statement -> break_statement . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_statement -> break_statement

State 234:
## Known stack suffix:
## block_statement
## LR(1) items:
compound_statement_no_unmatched_if -> block_statement . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compound_statement_no_unmatched_if -> block_statement

State 235:
## Known stack suffix:
## assignment_statement
## LR(1) items:
simple_statement -> assignment_statement . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_statement -> assignment_statement

State 236:
## Known stack suffix:
## array_expression_noiv
## LR(1) items:
array_expression -> array_expression_noiv . [ T_LPAREN T_LBRACS ]
lvalue_novariable -> array_expression_noiv . [ T_EQ ]
## Transitions:
## Reductions:
-- On T_LPAREN reduce production array_expression -> array_expression_noiv
-- On T_LBRACS reduce production array_expression -> array_expression_noiv
-- On T_EQ reduce production lvalue_novariable -> array_expression_noiv

State 237:
## Known stack suffix:
## array_expression
## LR(1) items:
array_expression_noiv -> array_expression . T_LBRACS expression T_RBRACS [ T_LPAREN T_LBRACS T_EQ ]
function_call_expression_basic -> array_expression . T_LPAREN expression_list T_RPAREN [ T_SEMICOLON ]
## Transitions:
-- On T_LPAREN shift to state 60
-- On T_LBRACS shift to state 179
## Reductions:

State 238:
## Known stack suffix:
## T_IF T_LPAREN expression T_RPAREN statement
## LR(1) items:
if_statement_unmatched -> T_IF T_LPAREN expression T_RPAREN statement . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_statement_unmatched -> T_IF T_LPAREN expression T_RPAREN statement

State 239:
## Known stack suffix:
## if_statement_unmatched
## LR(1) items:
statement -> if_statement_unmatched . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> if_statement_unmatched

State 240:
## Known stack suffix:
## statement_no_unmatched_if
## LR(1) items:
statement -> statement_no_unmatched_if . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> statement_no_unmatched_if

State 241:
## Known stack suffix:
## T_DEFAULT switch_item_sepa statement_list
## LR(1) items:
switch_default -> T_DEFAULT switch_item_sepa statement_list . [ T_RBRACC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_default -> T_DEFAULT switch_item_sepa statement_list

State 242:
## Known stack suffix:
## statement
## LR(1) items:
statement_list -> statement . statement_list [ T_RBRACC T_DEFAULT T_CASE ]
## Transitions:
-- On T_TRY shift to state 2
-- On T_THROW shift to state 4
-- On T_SWITCH shift to state 190
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_RETURN shift to state 199
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_LPAREN shift to state 30
-- On T_LBRACC shift to state 3
-- On T_INT_LITERAL shift to state 32
-- On T_IF shift to state 202
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On T_BREAK shift to state 206
-- On variable_declaration shift to state 208
-- On variable shift to state 209
-- On try_catch_statement shift to state 214
-- On throw_statement shift to state 215
-- On switch_statement shift to state 216
-- On static_reference_chain_noiv shift to state 42
-- On statement_no_unmatched_if shift to state 240
-- On statement_list shift to state 243
-- On statement shift to state 242
-- On simple_statement shift to state 220
-- On return_statement shift to state 221
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On lvalue_novariable shift to state 222
-- On literal shift to state 46
-- On if_statement_unmatched shift to state 239
-- On if_statement_matched shift to state 227
-- On identifier shift to state 228
-- On function_call_statement shift to state 229
-- On function_call_expression_basic shift to state 230
-- On constant_literal shift to state 56
-- On compound_statement_no_unmatched_if shift to state 232
-- On break_statement shift to state 233
-- On block_statement shift to state 234
-- On atomic_expression_noiv shift to state 57
-- On assignment_statement shift to state 235
-- On array_expression_noiv shift to state 236
-- On array_expression shift to state 237
## Reductions:
-- On T_RBRACC reduce production statement_list ->
-- On T_DEFAULT reduce production statement_list ->
-- On T_CASE reduce production statement_list ->

State 243:
## Known stack suffix:
## statement statement_list
## LR(1) items:
statement_list -> statement statement_list . [ T_RBRACC T_DEFAULT T_CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_list -> statement statement_list

State 244:
## Known stack suffix:
## T_CASE
## LR(1) items:
switch_case -> T_CASE . expression switch_item_sepa statement_list [ T_RBRACC T_DEFAULT T_CASE ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 160
-- On logical_or_expression_weak shift to state 166
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On expression shift to state 245
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 245:
## Known stack suffix:
## T_CASE expression
## LR(1) items:
switch_case -> T_CASE expression . switch_item_sepa statement_list [ T_RBRACC T_DEFAULT T_CASE ]
## Transitions:
-- On T_SEMICOLON shift to state 196
-- On T_COLON shift to state 197
-- On switch_item_sepa shift to state 246
## Reductions:

State 246:
## Known stack suffix:
## T_CASE expression switch_item_sepa
## LR(1) items:
switch_case -> T_CASE expression switch_item_sepa . statement_list [ T_RBRACC T_DEFAULT T_CASE ]
## Transitions:
-- On T_TRY shift to state 2
-- On T_THROW shift to state 4
-- On T_SWITCH shift to state 190
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_RETURN shift to state 199
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_LPAREN shift to state 30
-- On T_LBRACC shift to state 3
-- On T_INT_LITERAL shift to state 32
-- On T_IF shift to state 202
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On T_BREAK shift to state 206
-- On variable_declaration shift to state 208
-- On variable shift to state 209
-- On try_catch_statement shift to state 214
-- On throw_statement shift to state 215
-- On switch_statement shift to state 216
-- On static_reference_chain_noiv shift to state 42
-- On statement_no_unmatched_if shift to state 240
-- On statement_list shift to state 247
-- On statement shift to state 242
-- On simple_statement shift to state 220
-- On return_statement shift to state 221
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On lvalue_novariable shift to state 222
-- On literal shift to state 46
-- On if_statement_unmatched shift to state 239
-- On if_statement_matched shift to state 227
-- On identifier shift to state 228
-- On function_call_statement shift to state 229
-- On function_call_expression_basic shift to state 230
-- On constant_literal shift to state 56
-- On compound_statement_no_unmatched_if shift to state 232
-- On break_statement shift to state 233
-- On block_statement shift to state 234
-- On atomic_expression_noiv shift to state 57
-- On assignment_statement shift to state 235
-- On array_expression_noiv shift to state 236
-- On array_expression shift to state 237
## Reductions:
-- On T_RBRACC reduce production statement_list ->
-- On T_DEFAULT reduce production statement_list ->
-- On T_CASE reduce production statement_list ->

State 247:
## Known stack suffix:
## T_CASE expression switch_item_sepa statement_list
## LR(1) items:
switch_case -> T_CASE expression switch_item_sepa statement_list . [ T_RBRACC T_DEFAULT T_CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_case -> T_CASE expression switch_item_sepa statement_list

State 248:
## Known stack suffix:
## T_SWITCH T_LPAREN expression T_RPAREN T_LBRACC switch_item_list
## LR(1) items:
switch_statement -> T_SWITCH T_LPAREN expression T_RPAREN T_LBRACC switch_item_list . T_RBRACC [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_RBRACC shift to state 249
## Reductions:

State 249:
## Known stack suffix:
## T_SWITCH T_LPAREN expression T_RPAREN T_LBRACC switch_item_list T_RBRACC
## LR(1) items:
switch_statement -> T_SWITCH T_LPAREN expression T_RPAREN T_LBRACC switch_item_list T_RBRACC . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_statement -> T_SWITCH T_LPAREN expression T_RPAREN T_LBRACC switch_item_list T_RBRACC

State 250:
## Known stack suffix:
## switch_default
## LR(1) items:
switch_item_list -> switch_default . [ T_RBRACC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_item_list -> switch_default

State 251:
## Known stack suffix:
## switch_case
## LR(1) items:
switch_item_list -> switch_case . switch_item_list [ T_RBRACC ]
## Transitions:
-- On T_DEFAULT shift to state 195
-- On T_CASE shift to state 244
-- On switch_item_list shift to state 252
-- On switch_default shift to state 250
-- On switch_case shift to state 251
## Reductions:
-- On T_RBRACC reduce production switch_item_list ->

State 252:
## Known stack suffix:
## switch_case switch_item_list
## LR(1) items:
switch_item_list -> switch_case switch_item_list . [ T_RBRACC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_item_list -> switch_case switch_item_list

State 253:
## Known stack suffix:
## T_LBRACC statement_list
## LR(1) items:
block_statement -> T_LBRACC statement_list . T_RBRACC [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_STATIC T_SELF T_RETURN T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_RBRACC shift to state 254
## Reductions:

State 254:
## Known stack suffix:
## T_LBRACC statement_list T_RBRACC
## LR(1) items:
block_statement -> T_LBRACC statement_list T_RBRACC . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_STATIC T_SELF T_RETURN T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CONST T_CLASS T_CATCH T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_statement -> T_LBRACC statement_list T_RBRACC

State 255:
## Known stack suffix:
## T_TRY block_statement
## LR(1) items:
try_catch_statement -> T_TRY block_statement . nonempty_catch_list [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_CATCH shift to state 256
-- On nonempty_catch_list shift to state 264
-- On catch shift to state 265
## Reductions:

State 256:
## Known stack suffix:
## T_CATCH
## LR(1) items:
catch -> T_CATCH . T_LPAREN formal_argument T_RPAREN block_statement [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CATCH T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_LPAREN shift to state 257
## Reductions:

State 257:
## Known stack suffix:
## T_CATCH T_LPAREN
## LR(1) items:
catch -> T_CATCH T_LPAREN . formal_argument T_RPAREN block_statement [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CATCH T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On T_DOLLAR shift to state 11
-- On variable shift to state 258
-- On identifier shift to state 259
-- On formal_argument shift to state 261
## Reductions:

State 258:
## Known stack suffix:
## variable
## LR(1) items:
formal_argument -> variable . [ T_RPAREN T_EQ T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_argument -> variable

State 259:
## Known stack suffix:
## identifier
## LR(1) items:
formal_argument -> identifier . variable [ T_RPAREN T_EQ T_COMMA ]
## Transitions:
-- On T_DOLLAR shift to state 11
-- On variable shift to state 260
## Reductions:

State 260:
## Known stack suffix:
## identifier variable
## LR(1) items:
formal_argument -> identifier variable . [ T_RPAREN T_EQ T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_argument -> identifier variable

State 261:
## Known stack suffix:
## T_CATCH T_LPAREN formal_argument
## LR(1) items:
catch -> T_CATCH T_LPAREN formal_argument . T_RPAREN block_statement [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CATCH T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_RPAREN shift to state 262
## Reductions:

State 262:
## Known stack suffix:
## T_CATCH T_LPAREN formal_argument T_RPAREN
## LR(1) items:
catch -> T_CATCH T_LPAREN formal_argument T_RPAREN . block_statement [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CATCH T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_LBRACC shift to state 3
-- On block_statement shift to state 263
## Reductions:

State 263:
## Known stack suffix:
## T_CATCH T_LPAREN formal_argument T_RPAREN block_statement
## LR(1) items:
catch -> T_CATCH T_LPAREN formal_argument T_RPAREN block_statement . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CATCH T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production catch -> T_CATCH T_LPAREN formal_argument T_RPAREN block_statement

State 264:
## Known stack suffix:
## T_TRY block_statement nonempty_catch_list
## LR(1) items:
try_catch_statement -> T_TRY block_statement nonempty_catch_list . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production try_catch_statement -> T_TRY block_statement nonempty_catch_list

State 265:
## Known stack suffix:
## catch
## LR(1) items:
nonempty_catch_list -> catch . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
nonempty_catch_list -> catch . nonempty_catch_list [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_CATCH shift to state 256
-- On nonempty_catch_list shift to state 266
-- On catch shift to state 265
## Reductions:
-- On T_TRY reduce production nonempty_catch_list -> catch
-- On T_THROW reduce production nonempty_catch_list -> catch
-- On T_SWITCH reduce production nonempty_catch_list -> catch
-- On T_STRING_LITERAL_S reduce production nonempty_catch_list -> catch
-- On T_STRING_LITERAL_D reduce production nonempty_catch_list -> catch
-- On T_SELF reduce production nonempty_catch_list -> catch
-- On T_RETURN reduce production nonempty_catch_list -> catch
-- On T_RBRACC reduce production nonempty_catch_list -> catch
-- On T_PHPE reduce production nonempty_catch_list -> catch
-- On T_PARENT reduce production nonempty_catch_list -> catch
-- On T_NULL reduce production nonempty_catch_list -> catch
-- On T_NEW reduce production nonempty_catch_list -> catch
-- On T_LPAREN reduce production nonempty_catch_list -> catch
-- On T_LBRACC reduce production nonempty_catch_list -> catch
-- On T_INT_LITERAL reduce production nonempty_catch_list -> catch
-- On T_IF reduce production nonempty_catch_list -> catch
-- On T_IDENTIFIER reduce production nonempty_catch_list -> catch
-- On T_FUNCTION reduce production nonempty_catch_list -> catch
-- On T_FLOAT_LITERAL reduce production nonempty_catch_list -> catch
-- On T_ELSE reduce production nonempty_catch_list -> catch
-- On T_DOLLAR reduce production nonempty_catch_list -> catch
-- On T_DEFAULT reduce production nonempty_catch_list -> catch
-- On T_CLASS reduce production nonempty_catch_list -> catch
-- On T_CASE reduce production nonempty_catch_list -> catch
-- On T_BREAK reduce production nonempty_catch_list -> catch
-- On T_ABSTRACT reduce production nonempty_catch_list -> catch

State 266:
## Known stack suffix:
## catch nonempty_catch_list
## LR(1) items:
nonempty_catch_list -> catch nonempty_catch_list . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_RBRACC T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_ELSE T_DOLLAR T_DEFAULT T_CLASS T_CASE T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_catch_list -> catch nonempty_catch_list

State 267:
## Known stack suffix:
## T_FUNCTION
## LR(1) items:
function_definition -> T_FUNCTION . identifier T_LPAREN formal_argument_list T_RPAREN block_statement [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_STATIC T_SELF T_RETURN T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_CONST T_CLASS T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On identifier shift to state 268
## Reductions:

State 268:
## Known stack suffix:
## T_FUNCTION identifier
## LR(1) items:
function_definition -> T_FUNCTION identifier . T_LPAREN formal_argument_list T_RPAREN block_statement [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_STATIC T_SELF T_RETURN T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_CONST T_CLASS T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_LPAREN shift to state 269
## Reductions:

State 269:
## Known stack suffix:
## T_FUNCTION identifier T_LPAREN
## LR(1) items:
function_definition -> T_FUNCTION identifier T_LPAREN . formal_argument_list T_RPAREN block_statement [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_STATIC T_SELF T_RETURN T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_CONST T_CLASS T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On T_DOLLAR shift to state 11
-- On variable shift to state 258
-- On nonempty_formal_argument_list_with_defaults shift to state 270
-- On nonempty_formal_argument_list shift to state 271
-- On identifier shift to state 259
-- On formal_argument_with_default shift to state 272
-- On formal_argument_list shift to state 278
-- On formal_argument shift to state 281
## Reductions:
-- On T_RPAREN reduce production formal_argument_list ->

State 270:
## Known stack suffix:
## nonempty_formal_argument_list_with_defaults
## LR(1) items:
nonempty_formal_argument_list -> nonempty_formal_argument_list_with_defaults . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_formal_argument_list -> nonempty_formal_argument_list_with_defaults

State 271:
## Known stack suffix:
## nonempty_formal_argument_list
## LR(1) items:
formal_argument_list -> nonempty_formal_argument_list . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_argument_list -> nonempty_formal_argument_list

State 272:
## Known stack suffix:
## formal_argument_with_default
## LR(1) items:
nonempty_formal_argument_list_with_defaults -> formal_argument_with_default . [ T_RPAREN ]
nonempty_formal_argument_list_with_defaults -> formal_argument_with_default . T_COMMA nonempty_formal_argument_list_with_defaults [ T_RPAREN ]
## Transitions:
-- On T_COMMA shift to state 273
## Reductions:
-- On T_RPAREN reduce production nonempty_formal_argument_list_with_defaults -> formal_argument_with_default

State 273:
## Known stack suffix:
## formal_argument_with_default T_COMMA
## LR(1) items:
nonempty_formal_argument_list_with_defaults -> formal_argument_with_default T_COMMA . nonempty_formal_argument_list_with_defaults [ T_RPAREN ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On T_DOLLAR shift to state 11
-- On variable shift to state 258
-- On nonempty_formal_argument_list_with_defaults shift to state 274
-- On identifier shift to state 259
-- On formal_argument_with_default shift to state 272
-- On formal_argument shift to state 275
## Reductions:

State 274:
## Known stack suffix:
## formal_argument_with_default T_COMMA nonempty_formal_argument_list_with_defaults
## LR(1) items:
nonempty_formal_argument_list_with_defaults -> formal_argument_with_default T_COMMA nonempty_formal_argument_list_with_defaults . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_formal_argument_list_with_defaults -> formal_argument_with_default T_COMMA nonempty_formal_argument_list_with_defaults

State 275:
## Known stack suffix:
## formal_argument
## LR(1) items:
formal_argument_with_default -> formal_argument . T_EQ constant_literal [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_EQ shift to state 276
## Reductions:

State 276:
## Known stack suffix:
## formal_argument T_EQ
## LR(1) items:
formal_argument_with_default -> formal_argument T_EQ . constant_literal [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_STRING_LITERAL_S shift to state 6
-- On T_NULL shift to state 24
-- On T_INT_LITERAL shift to state 32
-- On T_FLOAT_LITERAL shift to state 33
-- On constant_literal shift to state 277
## Reductions:

State 277:
## Known stack suffix:
## formal_argument T_EQ constant_literal
## LR(1) items:
formal_argument_with_default -> formal_argument T_EQ constant_literal . [ T_RPAREN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_argument_with_default -> formal_argument T_EQ constant_literal

State 278:
## Known stack suffix:
## T_FUNCTION identifier T_LPAREN formal_argument_list
## LR(1) items:
function_definition -> T_FUNCTION identifier T_LPAREN formal_argument_list . T_RPAREN block_statement [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_STATIC T_SELF T_RETURN T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_CONST T_CLASS T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_RPAREN shift to state 279
## Reductions:

State 279:
## Known stack suffix:
## T_FUNCTION identifier T_LPAREN formal_argument_list T_RPAREN
## LR(1) items:
function_definition -> T_FUNCTION identifier T_LPAREN formal_argument_list T_RPAREN . block_statement [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_STATIC T_SELF T_RETURN T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_CONST T_CLASS T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_LBRACC shift to state 3
-- On block_statement shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## T_FUNCTION identifier T_LPAREN formal_argument_list T_RPAREN block_statement
## LR(1) items:
function_definition -> T_FUNCTION identifier T_LPAREN formal_argument_list T_RPAREN block_statement . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_STATIC T_SELF T_RETURN T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_CONST T_CLASS T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_definition -> T_FUNCTION identifier T_LPAREN formal_argument_list T_RPAREN block_statement

State 281:
## Known stack suffix:
## formal_argument
## LR(1) items:
formal_argument_with_default -> formal_argument . T_EQ constant_literal [ T_RPAREN T_COMMA ]
nonempty_formal_argument_list -> formal_argument . [ T_RPAREN ]
nonempty_formal_argument_list -> formal_argument . T_COMMA nonempty_formal_argument_list [ T_RPAREN ]
## Transitions:
-- On T_EQ shift to state 276
-- On T_COMMA shift to state 282
## Reductions:
-- On T_RPAREN reduce production nonempty_formal_argument_list -> formal_argument

State 282:
## Known stack suffix:
## formal_argument T_COMMA
## LR(1) items:
nonempty_formal_argument_list -> formal_argument T_COMMA . nonempty_formal_argument_list [ T_RPAREN ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On T_DOLLAR shift to state 11
-- On variable shift to state 258
-- On nonempty_formal_argument_list_with_defaults shift to state 270
-- On nonempty_formal_argument_list shift to state 283
-- On identifier shift to state 259
-- On formal_argument_with_default shift to state 272
-- On formal_argument shift to state 281
## Reductions:

State 283:
## Known stack suffix:
## formal_argument T_COMMA nonempty_formal_argument_list
## LR(1) items:
nonempty_formal_argument_list -> formal_argument T_COMMA nonempty_formal_argument_list . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_formal_argument_list -> formal_argument T_COMMA nonempty_formal_argument_list

State 284:
## Known stack suffix:
## T_ABSTRACT
## LR(1) items:
abstract_clause -> T_ABSTRACT . [ T_CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production abstract_clause -> T_ABSTRACT

State 285:
## Known stack suffix:
## statement
## LR(1) items:
single_php_source_file_item_list -> statement . single_php_source_file_item_list [ T_PHPE ]
## Transitions:
-- On T_TRY shift to state 2
-- On T_THROW shift to state 4
-- On T_SWITCH shift to state 190
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_RETURN shift to state 199
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_LPAREN shift to state 30
-- On T_LBRACC shift to state 3
-- On T_INT_LITERAL shift to state 32
-- On T_IF shift to state 202
-- On T_IDENTIFIER shift to state 10
-- On T_FUNCTION shift to state 267
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On T_BREAK shift to state 206
-- On T_ABSTRACT shift to state 284
-- On variable_declaration shift to state 208
-- On variable shift to state 209
-- On try_catch_statement shift to state 214
-- On throw_statement shift to state 215
-- On switch_statement shift to state 216
-- On static_reference_chain_noiv shift to state 42
-- On statement_no_unmatched_if shift to state 240
-- On statement shift to state 285
-- On single_php_source_file_item_list shift to state 286
-- On simple_statement shift to state 220
-- On return_statement shift to state 221
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On lvalue_novariable shift to state 222
-- On literal shift to state 46
-- On if_statement_unmatched shift to state 239
-- On if_statement_matched shift to state 227
-- On identifier shift to state 228
-- On function_definition shift to state 287
-- On function_call_statement shift to state 229
-- On function_call_expression_basic shift to state 230
-- On constant_literal shift to state 56
-- On compound_statement_no_unmatched_if shift to state 232
-- On class_definition shift to state 289
-- On break_statement shift to state 233
-- On block_statement shift to state 234
-- On atomic_expression_noiv shift to state 57
-- On assignment_statement shift to state 235
-- On array_expression_noiv shift to state 236
-- On array_expression shift to state 237
-- On abstract_clause shift to state 291
## Reductions:
-- On T_PHPE reduce production single_php_source_file_item_list ->
-- On T_CLASS reduce production abstract_clause ->

State 286:
## Known stack suffix:
## statement single_php_source_file_item_list
## LR(1) items:
single_php_source_file_item_list -> statement single_php_source_file_item_list . [ T_PHPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production single_php_source_file_item_list -> statement single_php_source_file_item_list

State 287:
## Known stack suffix:
## function_definition
## LR(1) items:
single_php_source_file_item_list -> function_definition . single_php_source_file_item_list [ T_PHPE ]
## Transitions:
-- On T_TRY shift to state 2
-- On T_THROW shift to state 4
-- On T_SWITCH shift to state 190
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_RETURN shift to state 199
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_LPAREN shift to state 30
-- On T_LBRACC shift to state 3
-- On T_INT_LITERAL shift to state 32
-- On T_IF shift to state 202
-- On T_IDENTIFIER shift to state 10
-- On T_FUNCTION shift to state 267
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On T_BREAK shift to state 206
-- On T_ABSTRACT shift to state 284
-- On variable_declaration shift to state 208
-- On variable shift to state 209
-- On try_catch_statement shift to state 214
-- On throw_statement shift to state 215
-- On switch_statement shift to state 216
-- On static_reference_chain_noiv shift to state 42
-- On statement_no_unmatched_if shift to state 240
-- On statement shift to state 285
-- On single_php_source_file_item_list shift to state 288
-- On simple_statement shift to state 220
-- On return_statement shift to state 221
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On lvalue_novariable shift to state 222
-- On literal shift to state 46
-- On if_statement_unmatched shift to state 239
-- On if_statement_matched shift to state 227
-- On identifier shift to state 228
-- On function_definition shift to state 287
-- On function_call_statement shift to state 229
-- On function_call_expression_basic shift to state 230
-- On constant_literal shift to state 56
-- On compound_statement_no_unmatched_if shift to state 232
-- On class_definition shift to state 289
-- On break_statement shift to state 233
-- On block_statement shift to state 234
-- On atomic_expression_noiv shift to state 57
-- On assignment_statement shift to state 235
-- On array_expression_noiv shift to state 236
-- On array_expression shift to state 237
-- On abstract_clause shift to state 291
## Reductions:
-- On T_PHPE reduce production single_php_source_file_item_list ->
-- On T_CLASS reduce production abstract_clause ->

State 288:
## Known stack suffix:
## function_definition single_php_source_file_item_list
## LR(1) items:
single_php_source_file_item_list -> function_definition single_php_source_file_item_list . [ T_PHPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production single_php_source_file_item_list -> function_definition single_php_source_file_item_list

State 289:
## Known stack suffix:
## class_definition
## LR(1) items:
single_php_source_file_item_list -> class_definition . single_php_source_file_item_list [ T_PHPE ]
## Transitions:
-- On T_TRY shift to state 2
-- On T_THROW shift to state 4
-- On T_SWITCH shift to state 190
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_RETURN shift to state 199
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_LPAREN shift to state 30
-- On T_LBRACC shift to state 3
-- On T_INT_LITERAL shift to state 32
-- On T_IF shift to state 202
-- On T_IDENTIFIER shift to state 10
-- On T_FUNCTION shift to state 267
-- On T_FLOAT_LITERAL shift to state 33
-- On T_DOLLAR shift to state 34
-- On T_BREAK shift to state 206
-- On T_ABSTRACT shift to state 284
-- On variable_declaration shift to state 208
-- On variable shift to state 209
-- On try_catch_statement shift to state 214
-- On throw_statement shift to state 215
-- On switch_statement shift to state 216
-- On static_reference_chain_noiv shift to state 42
-- On statement_no_unmatched_if shift to state 240
-- On statement shift to state 285
-- On single_php_source_file_item_list shift to state 290
-- On simple_statement shift to state 220
-- On return_statement shift to state 221
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On lvalue_novariable shift to state 222
-- On literal shift to state 46
-- On if_statement_unmatched shift to state 239
-- On if_statement_matched shift to state 227
-- On identifier shift to state 228
-- On function_definition shift to state 287
-- On function_call_statement shift to state 229
-- On function_call_expression_basic shift to state 230
-- On constant_literal shift to state 56
-- On compound_statement_no_unmatched_if shift to state 232
-- On class_definition shift to state 289
-- On break_statement shift to state 233
-- On block_statement shift to state 234
-- On atomic_expression_noiv shift to state 57
-- On assignment_statement shift to state 235
-- On array_expression_noiv shift to state 236
-- On array_expression shift to state 237
-- On abstract_clause shift to state 291
## Reductions:
-- On T_PHPE reduce production single_php_source_file_item_list ->
-- On T_CLASS reduce production abstract_clause ->

State 290:
## Known stack suffix:
## class_definition single_php_source_file_item_list
## LR(1) items:
single_php_source_file_item_list -> class_definition single_php_source_file_item_list . [ T_PHPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production single_php_source_file_item_list -> class_definition single_php_source_file_item_list

State 291:
## Known stack suffix:
## abstract_clause
## LR(1) items:
class_definition -> abstract_clause . T_CLASS identifier extends_clause T_LBRACC class_item_list T_RBRACC [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_CLASS T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_CLASS shift to state 292
## Reductions:

State 292:
## Known stack suffix:
## abstract_clause T_CLASS
## LR(1) items:
class_definition -> abstract_clause T_CLASS . identifier extends_clause T_LBRACC class_item_list T_RBRACC [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_CLASS T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On identifier shift to state 293
## Reductions:

State 293:
## Known stack suffix:
## abstract_clause T_CLASS identifier
## LR(1) items:
class_definition -> abstract_clause T_CLASS identifier . extends_clause T_LBRACC class_item_list T_RBRACC [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_CLASS T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_EXTENDS shift to state 294
-- On extends_clause shift to state 296
## Reductions:
-- On T_LBRACC reduce production extends_clause ->

State 294:
## Known stack suffix:
## T_EXTENDS
## LR(1) items:
extends_clause -> T_EXTENDS . identifier [ T_LBRACC ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On identifier shift to state 295
## Reductions:

State 295:
## Known stack suffix:
## T_EXTENDS identifier
## LR(1) items:
extends_clause -> T_EXTENDS identifier . [ T_LBRACC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production extends_clause -> T_EXTENDS identifier

State 296:
## Known stack suffix:
## abstract_clause T_CLASS identifier extends_clause
## LR(1) items:
class_definition -> abstract_clause T_CLASS identifier extends_clause . T_LBRACC class_item_list T_RBRACC [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_CLASS T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_LBRACC shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## abstract_clause T_CLASS identifier extends_clause T_LBRACC
## LR(1) items:
class_definition -> abstract_clause T_CLASS identifier extends_clause T_LBRACC . class_item_list T_RBRACC [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_CLASS T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_PUBLIC shift to state 298
-- On T_PROTECTED shift to state 299
-- On T_PRIVATE shift to state 300
-- On method_definition shift to state 301
-- On field_definition shift to state 302
-- On class_item_visibility shift to state 303
-- On class_item_list shift to state 316
## Reductions:
-- On T_STATIC reduce production class_item_visibility ->
-- On T_RBRACC reduce production class_item_list ->
-- On T_FUNCTION reduce production class_item_visibility ->
-- On T_CONST reduce production class_item_visibility ->

State 298:
## Known stack suffix:
## T_PUBLIC
## LR(1) items:
class_item_visibility -> T_PUBLIC . [ T_STATIC T_FUNCTION T_CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_item_visibility -> T_PUBLIC

State 299:
## Known stack suffix:
## T_PROTECTED
## LR(1) items:
class_item_visibility -> T_PROTECTED . [ T_STATIC T_FUNCTION T_CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_item_visibility -> T_PROTECTED

State 300:
## Known stack suffix:
## T_PRIVATE
## LR(1) items:
class_item_visibility -> T_PRIVATE . [ T_STATIC T_FUNCTION T_CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_item_visibility -> T_PRIVATE

State 301:
## Known stack suffix:
## method_definition
## LR(1) items:
class_item_list -> method_definition . class_item_list [ T_RBRACC ]
## Transitions:
-- On T_PUBLIC shift to state 298
-- On T_PROTECTED shift to state 299
-- On T_PRIVATE shift to state 300
-- On method_definition shift to state 301
-- On field_definition shift to state 302
-- On class_item_visibility shift to state 303
-- On class_item_list shift to state 315
## Reductions:
-- On T_STATIC reduce production class_item_visibility ->
-- On T_RBRACC reduce production class_item_list ->
-- On T_FUNCTION reduce production class_item_visibility ->
-- On T_CONST reduce production class_item_visibility ->

State 302:
## Known stack suffix:
## field_definition
## LR(1) items:
class_item_list -> field_definition . class_item_list [ T_RBRACC ]
## Transitions:
-- On T_PUBLIC shift to state 298
-- On T_PROTECTED shift to state 299
-- On T_PRIVATE shift to state 300
-- On method_definition shift to state 301
-- On field_definition shift to state 302
-- On class_item_visibility shift to state 303
-- On class_item_list shift to state 314
## Reductions:
-- On T_STATIC reduce production class_item_visibility ->
-- On T_RBRACC reduce production class_item_list ->
-- On T_FUNCTION reduce production class_item_visibility ->
-- On T_CONST reduce production class_item_visibility ->

State 303:
## Known stack suffix:
## class_item_visibility
## LR(1) items:
field_definition -> class_item_visibility . T_STATIC variable_declaration [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
field_definition -> class_item_visibility . T_CONST identifier T_EQ expression T_SEMICOLON [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
method_definition -> class_item_visibility . T_STATIC function_definition [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
method_definition -> class_item_visibility . function_definition [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
## Transitions:
-- On T_STATIC shift to state 304
-- On T_FUNCTION shift to state 267
-- On T_CONST shift to state 308
-- On function_definition shift to state 313
## Reductions:

State 304:
## Known stack suffix:
## class_item_visibility T_STATIC
## LR(1) items:
field_definition -> class_item_visibility T_STATIC . variable_declaration [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
method_definition -> class_item_visibility T_STATIC . function_definition [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
## Transitions:
-- On T_FUNCTION shift to state 267
-- On T_DOLLAR shift to state 11
-- On variable_declaration shift to state 305
-- On variable shift to state 306
-- On function_definition shift to state 307
## Reductions:

State 305:
## Known stack suffix:
## class_item_visibility T_STATIC variable_declaration
## LR(1) items:
field_definition -> class_item_visibility T_STATIC variable_declaration . [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_definition -> class_item_visibility T_STATIC variable_declaration

State 306:
## Known stack suffix:
## variable
## LR(1) items:
variable_declaration -> variable . T_SEMICOLON [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
variable_declaration -> variable . T_EQ expression T_SEMICOLON [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
## Transitions:
-- On T_SEMICOLON shift to state 210
-- On T_EQ shift to state 211
## Reductions:

State 307:
## Known stack suffix:
## class_item_visibility T_STATIC function_definition
## LR(1) items:
method_definition -> class_item_visibility T_STATIC function_definition . [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_definition -> class_item_visibility T_STATIC function_definition

State 308:
## Known stack suffix:
## class_item_visibility T_CONST
## LR(1) items:
field_definition -> class_item_visibility T_CONST . identifier T_EQ expression T_SEMICOLON [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
## Transitions:
-- On T_IDENTIFIER shift to state 10
-- On identifier shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## class_item_visibility T_CONST identifier
## LR(1) items:
field_definition -> class_item_visibility T_CONST identifier . T_EQ expression T_SEMICOLON [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
## Transitions:
-- On T_EQ shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## class_item_visibility T_CONST identifier T_EQ
## LR(1) items:
field_definition -> class_item_visibility T_CONST identifier T_EQ . expression T_SEMICOLON [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
## Transitions:
-- On T_TILDE shift to state 5
-- On T_STRING_LITERAL_S shift to state 6
-- On T_STRING_LITERAL_D shift to state 7
-- On T_SELF shift to state 8
-- On T_PLUS_2 shift to state 19
-- On T_PLUS shift to state 28
-- On T_PARENT shift to state 20
-- On T_NULL shift to state 24
-- On T_NEW shift to state 25
-- On T_MINUS_2 shift to state 29
-- On T_MINUS shift to state 31
-- On T_LPAREN shift to state 61
-- On T_INT_LITERAL shift to state 32
-- On T_IDENTIFIER shift to state 10
-- On T_FLOAT_LITERAL shift to state 33
-- On T_EXCLAMATION shift to state 65
-- On T_DOLLAR shift to state 34
-- On variable shift to state 37
-- On unary_expression shift to state 66
-- On ternary_choice_expression shift to state 73
-- On static_reference_chain_noiv shift to state 42
-- On shift_expression shift to state 75
-- On object_member_expression_noiv shift to state 43
-- On new_expression_noiv shift to state 44
-- On logical_xor_expression_weak shift to state 160
-- On logical_or_expression_weak shift to state 166
-- On logical_or_expression_strong shift to state 105
-- On logical_not_expression shift to state 77
-- On logical_and_expression_weak shift to state 169
-- On logical_and_expression_strong shift to state 133
-- On literal shift to state 46
-- On instanceof_expression shift to state 70
-- On identifier shift to state 47
-- On function_call_expression_basic shift to state 51
-- On function_call_expression shift to state 52
-- On expression shift to state 311
-- On crement_expression shift to state 71
-- On constant_literal shift to state 56
-- On comparison_expression_weak shift to state 113
-- On comparison_expression shift to state 114
-- On bitwise_xor_expression shift to state 123
-- On bitwise_or_expression shift to state 132
-- On bitwise_and_expression shift to state 131
-- On atomic_expression_noiv shift to state 57
-- On assignment_expression shift to state 165
-- On array_expression_noiv shift to state 58
-- On array_expression shift to state 59
-- On arithmetic_string_expression shift to state 96
-- On arithmetic_expression shift to state 91
## Reductions:

State 311:
## Known stack suffix:
## class_item_visibility T_CONST identifier T_EQ expression
## LR(1) items:
field_definition -> class_item_visibility T_CONST identifier T_EQ expression . T_SEMICOLON [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
## Transitions:
-- On T_SEMICOLON shift to state 312
## Reductions:

State 312:
## Known stack suffix:
## class_item_visibility T_CONST identifier T_EQ expression T_SEMICOLON
## LR(1) items:
field_definition -> class_item_visibility T_CONST identifier T_EQ expression T_SEMICOLON . [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_definition -> class_item_visibility T_CONST identifier T_EQ expression T_SEMICOLON

State 313:
## Known stack suffix:
## class_item_visibility function_definition
## LR(1) items:
method_definition -> class_item_visibility function_definition . [ T_STATIC T_RBRACC T_PUBLIC T_PROTECTED T_PRIVATE T_FUNCTION T_CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_definition -> class_item_visibility function_definition

State 314:
## Known stack suffix:
## field_definition class_item_list
## LR(1) items:
class_item_list -> field_definition class_item_list . [ T_RBRACC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_item_list -> field_definition class_item_list

State 315:
## Known stack suffix:
## method_definition class_item_list
## LR(1) items:
class_item_list -> method_definition class_item_list . [ T_RBRACC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_item_list -> method_definition class_item_list

State 316:
## Known stack suffix:
## abstract_clause T_CLASS identifier extends_clause T_LBRACC class_item_list
## LR(1) items:
class_definition -> abstract_clause T_CLASS identifier extends_clause T_LBRACC class_item_list . T_RBRACC [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_CLASS T_BREAK T_ABSTRACT ]
## Transitions:
-- On T_RBRACC shift to state 317
## Reductions:

State 317:
## Known stack suffix:
## abstract_clause T_CLASS identifier extends_clause T_LBRACC class_item_list T_RBRACC
## LR(1) items:
class_definition -> abstract_clause T_CLASS identifier extends_clause T_LBRACC class_item_list T_RBRACC . [ T_TRY T_THROW T_SWITCH T_STRING_LITERAL_S T_STRING_LITERAL_D T_SELF T_RETURN T_PHPE T_PARENT T_NULL T_NEW T_LPAREN T_LBRACC T_INT_LITERAL T_IF T_IDENTIFIER T_FUNCTION T_FLOAT_LITERAL T_DOLLAR T_CLASS T_BREAK T_ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_definition -> abstract_clause T_CLASS identifier extends_clause T_LBRACC class_item_list T_RBRACC

State 318:
## Known stack suffix:
## T_PHPSL single_php_source_file_item_list
## LR(1) items:
single_php_source_file -> T_PHPSL single_php_source_file_item_list . T_PHPE [ # ]
## Transitions:
-- On T_PHPE shift to state 319
## Reductions:

State 319:
## Known stack suffix:
## T_PHPSL single_php_source_file_item_list T_PHPE
## LR(1) items:
single_php_source_file -> T_PHPSL single_php_source_file_item_list T_PHPE . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production single_php_source_file -> T_PHPSL single_php_source_file_item_list T_PHPE

State 320:
## Known stack suffix:
## single_php_source_file
## LR(1) items:
single_php_source_file' -> single_php_source_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept single_php_source_file

