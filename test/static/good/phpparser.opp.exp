File "phpparser.mly", line 37, characters 7-14:
Warning: the token T_ARRAY is unused.
File "phpparser.mly", line 38, characters 57-67:
Warning: the token T_CONTINUE is unused.
File "phpparser.mly", line 37, characters 36-44:
Warning: the token T_OBJECT is unused.
%{
open PHPSyntaxTree;;

let makeTokenData () =
    let pos = symbol_start_pos ()
    in
        (TokenData(pos.Lexing.pos_fname, pos.Lexing.pos_lnum, (pos.Lexing.pos_cnum - pos.Lexing.pos_bol)))
;;
%}
%start single_php_source_file
%token T_ABSTRACT
%token T_AMPERSAND
%token T_AMPERSAND_2
%token T_AMPERSAND_EQ
%token T_AND
%token T_ARRAY
%token T_ASTERISK
%token T_ASTERISK_EQ
%token T_BAR
%token T_BAR_2
%token T_BAR_EQ
%token T_BOOL
%token T_BREAK
%token T_CARET
%token T_CARET_EQ
%token T_CASE
%token T_CATCH
%token T_CLASS
%token T_COLON
%token T_COLON_2
%token T_COMMA
%token T_CONST
%token T_CONTINUE
%token T_DEFAULT
%token T_DOLLAR
%token T_DOT
%token T_DOT_EQ
%token T_ELSE
%token T_EQ
%token T_EQ_EQ
%token T_EQ_EQ_EQ
%token T_EXCLAMATION
%token T_EXCL_EQ
%token T_EXCL_EQ_EQ
%token T_EXTENDS
%token T_FLOAT
%token <float> T_FLOAT_LITERAL
%token T_FUNCTION
%token T_GT
%token T_GT_EQ
%token T_GT_GT
%token T_GT_GT_EQ
%token <string> T_IDENTIFIER
%token T_IF
%token T_INSTANCEOF
%token T_INT
%token <int> T_INT_LITERAL
%token T_LBRACC
%token T_LBRACS
%token T_LPAREN
%token T_LT
%token T_LT_EQ
%token T_LT_GT
%token T_LT_LT
%token T_LT_LT_EQ
%token T_MINUS
%token T_MINUS_2
%token T_MINUS_EQ
%token T_NEW
%token T_NULL
%token T_OBJECT
%token T_OR
%token T_PARENT
%token T_PERCENT
%token T_PERCENT_EQ
%token T_PHPE
%token T_PHPSL
%token T_PLUS
%token T_PLUS_2
%token T_PLUS_EQ
%token T_PRIVATE
%token T_PROTECTED
%token T_PUBLIC
%token T_QUESTION
%token T_RARROW
%token T_RBRACC
%token T_RBRACS
%token T_RETURN
%token T_RPAREN
%token T_SELF
%token T_SEMICOLON
%token T_SLASH
%token T_SLASH_EQ
%token T_STATIC
%token T_STRING
%token <string> T_STRING_LITERAL_D
%token <string> T_STRING_LITERAL_S
%token T_SWITCH
%token T_THIS
%token T_THROW
%token T_TILDE
%token T_TRY
%token T_UMINUS
%token T_UPLUS
%token T_XOR
%left T_COMMA
%left T_OR
%left T_XOR
%left T_AND
%right T_AMPERSAND_EQ T_ASTERISK_EQ T_BAR_EQ T_CARET_EQ T_DOT_EQ T_EQ T_GT_GT_EQ T_LT_LT_EQ T_MINUS_EQ T_PERCENT_EQ T_PLUS_EQ T_SLASH_EQ
%left T_BAR_2
%left T_AMPERSAND_2
%left T_BAR
%left T_CARET
%left T_AMPERSAND
%nonassoc T_EQ_EQ T_EQ_EQ_EQ T_EXCL_EQ T_EXCL_EQ_EQ
%nonassoc T_GT T_GT_EQ T_LT T_LT_EQ T_LT_GT
%left T_GT_GT T_LT_LT
%left T_DOT T_MINUS T_PLUS
%left T_ASTERISK T_PERCENT T_SLASH
%right T_EXCLAMATION
%nonassoc T_INSTANCEOF
%nonassoc T_TILDE T_UMINUS T_UPLUS
%nonassoc T_MINUS_2 T_PLUS_2
%left T_COLON_2 T_RARROW
%left T_NEW
%type <PHPSyntaxTree.sourceFile> single_php_source_file
%%

constant_literal:
  _1 = T_NULL
    {                        (     Null(makeTokenData()) )}
| _1 = T_INT_LITERAL
    {                        (      Int(makeTokenData(),_1) )}
| _1 = T_FLOAT_LITERAL
    {                        (    Float(makeTokenData(),_1) )}
| _1 = T_STRING_LITERAL_S
    {                        ( StringSQ(makeTokenData(),_1) )}

literal:
  _1 = constant_literal
    {                        ( ConstLiteral(_1) )}
| _1 = T_STRING_LITERAL_D
    {                        ( StringDQ(makeTokenData(),_1) )}

predefined_type:
  _1 = T_BOOL
    {                        ( TypeBool  (makeTokenData()) )}
| _1 = T_FLOAT
    {                        ( TypeFloat (makeTokenData()) )}
| _1 = T_INT
    {                        ( TypeInt   (makeTokenData()) )}
| _1 = T_STRING
    {                        ( TypeString(makeTokenData()) )}

identifier:
  _1 = T_IDENTIFIER
    {                           ( Identifier(makeTokenData(),_1) )}

variable:
  _1 = T_DOLLAR _2 = T_IDENTIFIER
    {                           ( Variable(makeTokenData(),_2) )}

identifier_variable:
  _1 = identifier
    {                     ( IdentVar_ident(_1) )}
| _1 = variable
    {                     ( IdentVar_var  (_1) )}

atomic_expression_noiv:
  _1 = literal
    {                                            ( _1 )}
| _1 = T_LPAREN _2 = expression _3 = T_RPAREN
    {                                            ( _2 )}

new_expression_noiv:
  _1 = atomic_expression_noiv
    {                                                         ( _1 )}
| _1 = T_NEW _2 = identifier _3 = T_LPAREN _4 = expression_list _5 = T_RPAREN
    {                                                         ( New(_2, _4) )}

rarrow_chain:
  
    {                                                 ( [] )}
| _1 = rarrow_chain _2 = T_RARROW _3 = identifier_variable
    {                                                 ( _3::_1 )}

nonempty_rarrow_chain:
  _1 = rarrow_chain _2 = T_RARROW _3 = identifier_variable
    {                                                 ( _3::_1 )}

object_member_expression_noiv:
  _1 = new_expression_noiv _2 = rarrow_chain
    {                                      ( Dereference(_1,                             _2) )}
| _1 = T_DOLLAR _2 = T_THIS _3 = rarrow_chain
    {                                      ( Dereference(VarExpr(This(makeTokenData())), _3) )}
| _1 = variable _2 = nonempty_rarrow_chain
    {                                      ( Dereference(VarExpr(_1),                    _2) )}

static_reference_chain_noiv:
  _1 = object_member_expression_noiv
    {                                                                  ( _1 )}
| _1 = T_PARENT _2 = T_COLON_2 _3 = identifier_variable _4 = rarrow_chain
    {                                                                  ( Parent(_3::_4) )}
| _1 = T_SELF _2 = T_COLON_2 _3 = identifier_variable _4 = rarrow_chain
    {                                                                  (   Self(_3::_4) )}
| _1 = identifier _2 = T_COLON_2 _3 = identifier_variable _4 = rarrow_chain
    {                                                                  ( StaticReferenceChain(_1, _3::_4) )}

array_expression_noiv:
  _1 = static_reference_chain_noiv
    {                                                      ( _1     )}
| _1 = array_expression _2 = T_LBRACS _3 = expression _4 = T_RBRACS
    {                                                      ( ArrayExpr(_1,_3) )}

array_expression:
  _1 = array_expression_noiv
    {                                    ( _1 )}
| _1 = identifier
    {                                    ( IdentExpr(_1) )}
| _1 = variable
    {                                    (   VarExpr(_1) )}

lvalue_novariable:
  _1 = array_expression_noiv
    {                             ( _1 )}
| _1 = identifier
    {                             ( IdentExpr(_1) )}

function_call_expression_basic:
  _1 = array_expression _2 = T_LPAREN _3 = expression_list _4 = T_RPAREN
    {                                                         ( FunCallExpr(_1, _3)  )}

function_call_expression:
  _1 = array_expression
    {                                     ( _1 )}
| _1 = function_call_expression_basic
    {                                     ( _1 )}

crement_expression:
  _1 = function_call_expression
    {                                                      ( _1 )}
| _1 = function_call_expression _2 = T_MINUS_2
    {                                                      ( PostDecrement(_1) )}
| _1 = function_call_expression _2 = T_PLUS_2
    {                                                      ( PostIncrement(_1) )}
| _1 = T_MINUS_2 _2 = function_call_expression
    {                                                      (  PreDecrement(_2) )}
| _1 = T_PLUS_2 _2 = function_call_expression
    {                                                      (  PreIncrement(_2) )}

unary_expression:
  _1 = crement_expression
    {                                                         ( _1 )}
| _1 = T_PLUS _2 = crement_expression %prec T_UPLUS
    {                                                         ( _2 )}
| _1 = T_MINUS _2 = crement_expression %prec T_UMINUS
    {                                                         ( UnaryMinus(_2) )}
| _1 = T_TILDE _2 = crement_expression
    {                                                         ( BitwiseNot(_2) )}
| _1 = T_LPAREN _2 = predefined_type _3 = T_RPAREN _4 = crement_expression
    {                                                         ( TypeCast(_2,_4) )}

instanceof_expression:
  _1 = unary_expression
    {                                                ( _1 )}
| _1 = unary_expression _2 = T_INSTANCEOF _3 = identifier
    {                                                ( InstanceOf(_1,_3) )}

logical_not_expression:
  _1 = instanceof_expression
    {                                                      ( _1 )}
| _1 = T_EXCLAMATION _2 = logical_not_expression
    {                                                      ( LogicalNot(_2) )}

arithmetic_expression:
  _1 = logical_not_expression
    {                                                                ( _1 )}
| _1 = arithmetic_expression _2 = T_ASTERISK _3 = logical_not_expression
    {                                                                ( Multiplication(_1,_3) )}
| _1 = arithmetic_expression _2 = T_SLASH _3 = logical_not_expression
    {                                                                ( Division(_1,_3) )}
| _1 = arithmetic_expression _2 = T_PERCENT _3 = logical_not_expression
    {                                                                ( Modulo(_1,_3) )}

arithmetic_string_expression:
  _1 = arithmetic_expression
    {                                                                ( _1 )}
| _1 = arithmetic_string_expression _2 = T_PLUS _3 = arithmetic_expression
    {                                                                (   Plus(_1,_3) )}
| _1 = arithmetic_string_expression _2 = T_MINUS _3 = arithmetic_expression
    {                                                                (  Minus(_1,_3) )}
| _1 = arithmetic_string_expression _2 = T_DOT _3 = arithmetic_expression
    {                                                                ( Concat(_1,_3) )}

shift_expression:
  _1 = arithmetic_string_expression
    {                                                                ( _1 )}
| _1 = shift_expression _2 = T_LT_LT _3 = arithmetic_string_expression
    {                                                                ( ShiftLeft(_1,_3) )}
| _1 = shift_expression _2 = T_GT_GT _3 = arithmetic_string_expression
    {                                                                ( ShiftRight(_1,_3) )}

comparison_expression:
  _1 = shift_expression
    {                                                                ( _1 )}
| _1 = shift_expression _2 = T_LT _3 = shift_expression
    {                                                                ( IsSmaller(_1,_3) )}
| _1 = shift_expression _2 = T_LT_EQ _3 = shift_expression
    {                                                                ( IsSmallerEq(_1,_3) )}
| _1 = shift_expression _2 = T_GT _3 = shift_expression
    {                                                                ( IsSmaller(_3,_1) )}
| _1 = shift_expression _2 = T_GT_EQ _3 = shift_expression
    {                                                                ( IsSmallerEq(_3,_1) )}
| _1 = shift_expression _2 = T_LT_GT _3 = shift_expression
    {                                                                ( LogicalNot(IsEqual(_1,_3)) )}

comparison_expression_weak:
  _1 = comparison_expression
    {                                                                ( _1 )}
| _1 = comparison_expression _2 = T_EQ_EQ _3 = comparison_expression
    {                                                                (            IsEqual(_1,_3) )}
| _1 = comparison_expression _2 = T_EXCL_EQ _3 = comparison_expression
    {                                                                ( LogicalNot(IsEqual(_1,_3)) )}
| _1 = comparison_expression _2 = T_EQ_EQ_EQ _3 = comparison_expression
    {                                                                (            IsIdentical(_1,_3) )}
| _1 = comparison_expression _2 = T_EXCL_EQ_EQ _3 = comparison_expression
    {                                                                ( LogicalNot(IsIdentical(_1,_3)) )}

bitwise_and_expression:
  _1 = comparison_expression_weak
    {                                                                    ( _1 )}
| _1 = bitwise_and_expression _2 = T_AMPERSAND _3 = comparison_expression_weak
    {                                                                    ( BitwiseAnd(_1,_3) )}

bitwise_xor_expression:
  _1 = bitwise_and_expression
    {                                                                    ( _1 )}
| _1 = bitwise_xor_expression _2 = T_CARET _3 = bitwise_and_expression
    {                                                                    ( BitwiseXor(_1,_3) )}

bitwise_or_expression:
  _1 = bitwise_xor_expression
    {                                                                    ( _1 )}
| _1 = bitwise_or_expression _2 = T_BAR _3 = bitwise_xor_expression
    {                                                                    ( BitwiseOr(_1,_3) )}

logical_and_expression_strong:
  _1 = bitwise_or_expression
    {                                                                        ( _1 )}
| _1 = logical_and_expression_strong _2 = T_AMPERSAND_2 _3 = bitwise_or_expression
    {                                                                        ( LogicalAnd(_1,_3) )}

logical_or_expression_strong:
  _1 = logical_and_expression_strong
    {                                                                        ( _1 )}
| _1 = logical_or_expression_strong _2 = T_BAR_2 _3 = logical_and_expression_strong
    {                                                                        ( LogicalOr(_1,_3) )}

ternary_choice_expression:
  _1 = logical_or_expression_strong
    {                                                                        ( _1 )}
| _1 = logical_or_expression_strong _2 = T_QUESTION _3 = logical_or_expression_strong _4 = T_COLON _5 = logical_or_expression_strong
    {                                                                                                                ( TernaryChoice(_1,_3,_5) )}

assignment_expression:
  _1 = ternary_choice_expression
    {                                                                     ( _1 )}
| _1 = ternary_choice_expression _2 = T_EQ _3 = assignment_expression
    {                                                                     ( AssignExpr(_1,                   _3) )}
| _1 = ternary_choice_expression _2 = T_PLUS_EQ _3 = assignment_expression
    {                                                                     ( AssignExpr(_1,           Plus(_1,_3)) )}
| _1 = ternary_choice_expression _2 = T_MINUS_EQ _3 = assignment_expression
    {                                                                     ( AssignExpr(_1,          Minus(_1,_3)) )}
| _1 = ternary_choice_expression _2 = T_ASTERISK_EQ _3 = assignment_expression
    {                                                                     ( AssignExpr(_1, Multiplication(_1,_3)) )}
| _1 = ternary_choice_expression _2 = T_SLASH_EQ _3 = assignment_expression
    {                                                                     ( AssignExpr(_1,       Division(_1,_3)) )}
| _1 = ternary_choice_expression _2 = T_DOT_EQ _3 = assignment_expression
    {                                                                     ( AssignExpr(_1,         Concat(_1,_3)) )}
| _1 = ternary_choice_expression _2 = T_PERCENT_EQ _3 = assignment_expression
    {                                                                     ( AssignExpr(_1,         Modulo(_1,_3)) )}
| _1 = ternary_choice_expression _2 = T_AMPERSAND_EQ _3 = assignment_expression
    {                                                                     ( AssignExpr(_1,     BitwiseAnd(_1,_3)) )}
| _1 = ternary_choice_expression _2 = T_BAR_EQ _3 = assignment_expression
    {                                                                     ( AssignExpr(_1,      BitwiseOr(_1,_3)) )}
| _1 = ternary_choice_expression _2 = T_CARET_EQ _3 = assignment_expression
    {                                                                     ( AssignExpr(_1,     BitwiseXor(_1,_3)) )}
| _1 = ternary_choice_expression _2 = T_LT_LT_EQ _3 = assignment_expression
    {                                                                     ( AssignExpr(_1,      ShiftLeft(_1,_3)) )}
| _1 = ternary_choice_expression _2 = T_GT_GT_EQ _3 = assignment_expression
    {                                                                     ( AssignExpr(_1,     ShiftRight(_1,_3)) )}

logical_and_expression_weak:
  _1 = assignment_expression
    {                                                                  ( _1 )}
| _1 = logical_and_expression_weak _2 = T_AND _3 = assignment_expression
    {                                                                  ( LogicalAnd(_1, _3) )}

logical_xor_expression_weak:
  _1 = logical_and_expression_weak
    {                                                                  ( _1 )}
| _1 = logical_xor_expression_weak _2 = T_XOR _3 = logical_and_expression_weak
    {                                                                  ( LogicalXor(_1, _3) )}

logical_or_expression_weak:
  _1 = logical_xor_expression_weak
    {                                                                  ( _1 )}
| _1 = logical_or_expression_weak _2 = T_OR _3 = logical_xor_expression_weak
    {                                                                  ( LogicalOr(_1, _3) )}

expression:
  _1 = logical_or_expression_weak
    {                                                                  ( _1 )}

expression_list_suffx:
  
    {                                                ( [] )}
| _1 = T_COMMA _2 = expression _3 = expression_list_suffx
    {                                                ( _2::_3 )}

expression_list:
  
    {                                        ( [] )}
| _1 = expression _2 = expression_list_suffx
    {                                        ( _1::_2 )}

formal_argument:
  _1 = variable
    {                                   (      FormalArg(_1) )}
| _1 = identifier _2 = variable
    {                                   ( TypedFormalArg(_1,_2) )}

formal_argument_with_default:
  _1 = formal_argument _2 = T_EQ _3 = constant_literal
    {                                           ( FormalArgWDefault(_1,_3) )}

nonempty_formal_argument_list_with_defaults:
  _1 = formal_argument_with_default
    {                                                                                     ( [_1] )}
| _1 = formal_argument_with_default _2 = T_COMMA _3 = nonempty_formal_argument_list_with_defaults
    {                                                                                     ( _1::_3 )}

nonempty_formal_argument_list:
  _1 = formal_argument
    {                                                                                ( ([_1],[]) )}
| _1 = formal_argument _2 = T_COMMA _3 = nonempty_formal_argument_list
    {                                                                                ( (_1::(fst _3), snd _3) )}
| _1 = nonempty_formal_argument_list_with_defaults
    {                                                                                ( ([], _1) )}

formal_argument_list:
  
    {                                   ( ([],[]) )}
| _1 = nonempty_formal_argument_list
    {                                   (  _1 )}

function_definition:
  _1 = T_FUNCTION _2 = identifier _3 = T_LPAREN _4 = formal_argument_list _5 = T_RPAREN _6 = block_statement
    {                                                                                   ( Function(_2, _4, _6) )}

class_item_visibility:
  
    {                                                ( Public )}
| _1 = T_PUBLIC
    {                                                ( Public )}
| _1 = T_PROTECTED
    {                                                ( Protected )}
| _1 = T_PRIVATE
    {                                                ( Private )}

method_definition:
  _1 = class_item_visibility _2 = T_STATIC _3 = function_definition
    {                                                            (   StaticMethod(_1,_3) )}
| _1 = class_item_visibility _2 = function_definition
    {                                                            ( InstanceMethod(_1,_2) )}

field_definition:
  _1 = class_item_visibility _2 = T_STATIC _3 = variable_declaration
    {                                                                          ( StaticVar  (_1,_3) )}
| _1 = class_item_visibility _2 = T_CONST _3 = identifier _4 = T_EQ _5 = expression _6 = T_SEMICOLON
    {                                                                          ( StaticConst(_1,_3,_5) )}

class_item_list:
  
    {                                           ( [] )}
| _1 = method_definition _2 = class_item_list
    {                                           ( _1::_2 )}
| _1 = field_definition _2 = class_item_list
    {                                           ( _1::_2 )}

abstract_clause:
  
    {                   ( Concrete )}
| _1 = T_ABSTRACT
    {                   ( Abstract )}

extends_clause:
  
    {                            ( RootClass )}
| _1 = T_EXTENDS _2 = identifier
    {                            ( Extends(_2) )}

class_definition:
  _1 = abstract_clause _2 = T_CLASS _3 = identifier _4 = extends_clause _5 = T_LBRACC _6 = class_item_list _7 = T_RBRACC
    {                                                                                        ( Class(_1, _3, _4, _6) )}

assignment_statement:
  _1 = lvalue_novariable _2 = T_EQ _3 = expression _4 = T_SEMICOLON
    {                                                     ( AssignStmt(_1, _3) )}

variable_declaration:
  _1 = variable _2 = T_SEMICOLON
    {                                           ( VarDecl     (_1)    )}
| _1 = variable _2 = T_EQ _3 = expression _4 = T_SEMICOLON
    {                                           ( VarDeclAssig(_1,_3) )}

function_call_statement:
  _1 = function_call_expression_basic _2 = T_SEMICOLON
    {                                                        ( FunCallStmt(funCallExprAsPair _1) )}

break_statement:
  _1 = T_BREAK _2 = T_SEMICOLON
    {                                       ( Break(makeTokenData()) )}

return_statement:
  _1 = T_RETURN _2 = expression _3 = T_SEMICOLON
    {                                       ( Return(_2) )}

throw_statement:
  _1 = T_THROW _2 = expression _3 = T_SEMICOLON
    {                                       ( Throw(_2) )}

simple_statement:
  _1 = variable_declaration
    {                                  ( VarDeclStmt(_1) )}
| _1 = assignment_statement
    {                                  ( _1 )}
| _1 = function_call_statement
    {                                  ( _1 )}
| _1 = break_statement
    {                                  ( _1 )}
| _1 = return_statement
    {                                  ( _1 )}
| _1 = throw_statement
    {                                  ( _1 )}

statement_list:
  
    {                               ( [] )}
| _1 = statement _2 = statement_list
    {                               ( _1::_2 )}

block_statement:
  _1 = T_LBRACC _2 = statement_list _3 = T_RBRACC
    {                                        ( BlockStmt(_2) )}

switch_item_sepa:
  _1 = T_COLON
    {                      ()}
| _1 = T_SEMICOLON
    {                      ()}

switch_case:
  _1 = T_CASE _2 = expression _3 = switch_item_sepa _4 = statement_list
    {                                                      ( (SwCase(_2), BlockStmt(_4)) )}

switch_default:
  _1 = T_DEFAULT _2 = switch_item_sepa _3 = statement_list
    {                                                      ( (SwDefault,  BlockStmt(_3)) )}

switch_item_list:
  
    {                                                      ( [] )}
| _1 = switch_default
    {                                                      ( [_1] )}
| _1 = switch_case _2 = switch_item_list
    {                                                      ( _1::_2 )}

switch_statement:
  _1 = T_SWITCH _2 = T_LPAREN _3 = expression _4 = T_RPAREN _5 = T_LBRACC _6 = switch_item_list _7 = T_RBRACC
    {                                                                                ( SwitchStmt(_3, _6) )}

catch:
  _1 = T_CATCH _2 = T_LPAREN _3 = formal_argument _4 = T_RPAREN _5 = block_statement
    {                                                                ( (_3,_5) )}

nonempty_catch_list:
  _1 = catch
    {                                    ( [_1] )}
| _1 = catch _2 = nonempty_catch_list
    {                                    ( _1::_2 )}

try_catch_statement:
  _1 = T_TRY _2 = block_statement _3 = nonempty_catch_list
    {                                                    ( TryCatch(_2,_3) )}

if_statement_unmatched:
  _1 = T_IF _2 = T_LPAREN _3 = expression _4 = T_RPAREN _5 = statement
    {                                                                                                  (     If(_3,_5)    )}
| _1 = T_IF _2 = T_LPAREN _3 = expression _4 = T_RPAREN _5 = statement_no_unmatched_if _6 = T_ELSE _7 = if_statement_unmatched
    {                                                                                                  ( IfElse(_3,_5,_7) )}

if_statement_matched:
  _1 = T_IF _2 = T_LPAREN _3 = expression _4 = T_RPAREN _5 = statement_no_unmatched_if _6 = T_ELSE _7 = statement_no_unmatched_if
    {                                                                                                  ( IfElse(_3,_5,_7) )}

compound_statement_no_unmatched_if:
  _1 = block_statement
    {                                        ( _1 )}
| _1 = switch_statement
    {                                        ( _1 )}
| _1 = if_statement_matched
    {                                        ( _1 )}
| _1 = try_catch_statement
    {                                        ( _1 )}

statement_no_unmatched_if:
  _1 = simple_statement
    {                                        ( _1 )}
| _1 = compound_statement_no_unmatched_if
    {                                        ( _1 )}

statement:
  _1 = statement_no_unmatched_if
    {                                        ( _1 )}
| _1 = if_statement_unmatched
    {                                        ( _1 )}

single_php_source_file_item_list:
  
    {                                                            ( [] )}
| _1 = class_definition _2 = single_php_source_file_item_list
    {                                                            ( (PHPClass    (_1))::_2  )}
| _1 = function_definition _2 = single_php_source_file_item_list
    {                                                            ( (PHPFunction (_1))::_2  )}
| _1 = statement _2 = single_php_source_file_item_list
    {                                                            ( (PHPStatement(_1))::_2  )}

single_php_source_file:
  _1 = T_PHPSL _2 = single_php_source_file_item_list _3 = T_PHPE
    {                                                          ( PHPSourceFile(_2) )}

%%
